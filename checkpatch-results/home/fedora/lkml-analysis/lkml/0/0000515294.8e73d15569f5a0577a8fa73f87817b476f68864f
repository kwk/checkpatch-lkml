WARNING:TYPO_SPELLING: 'ahve' may be misspelled - perhaps 'have'?
#33: 
>    NOTE! You ahve to do this _anyway_, as part of checking the "do I need
               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
diff -urN 2.4.10pre4/arch/alpha/kernel/process.c mmap-rb/arch/alpha/kernel/process.c

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: include/linux/mm.h:491:
+extern void build_mmap_rb(struct mm_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#464: FILE: include/linux/mm.h:491:
+extern void build_mmap_rb(struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#472: FILE: include/linux/mm.h:517:
+static inline void __vma_unlink(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: include/linux/mm.h:517:
+static inline void __vma_unlink(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: include/linux/mm.h:517:
+static inline void __vma_unlink(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: include/linux/mm.h:517:
+static inline void __vma_unlink(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: include/linux/mm.h:525:
+static inline int can_vma_merge(struct vm_area_struct * vma, unsigned long vm_flags)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#507: FILE: include/linux/rbtree.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#508: FILE: include/linux/rbtree.h:2:
+/*
+  Red Black Trees

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: include/linux/rbtree.h:4:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#522: FILE: include/linux/rbtree.h:16:
+  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#523: FILE: include/linux/rbtree.h:17:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#525: FILE: include/linux/rbtree.h:19:
+  linux/include/linux/rbtree.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#606: FILE: include/linux/rbtree.h:100:
+typedef struct rb_node_s

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#607: FILE: include/linux/rbtree.h:101:
+typedef struct rb_node_s
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: include/linux/rbtree.h:102:
+	struct rb_node_s * rb_parent;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#612: FILE: include/linux/rbtree.h:106:
+	struct rb_node_s * rb_right;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#613: FILE: include/linux/rbtree.h:107:
+	struct rb_node_s * rb_left;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#615: FILE: include/linux/rbtree.h:109:
+}
+rb_node_t;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#617: FILE: include/linux/rbtree.h:111:
+typedef struct rb_root_s

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#618: FILE: include/linux/rbtree.h:112:
+typedef struct rb_root_s
+{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: include/linux/rbtree.h:113:
+	struct rb_node_s * rb_node;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#621: FILE: include/linux/rbtree.h:115:
+}
+rb_root_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#623: FILE: include/linux/rbtree.h:117:
+#define RB_ROOT	(rb_root_t) { NULL, }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#624: FILE: include/linux/rbtree.h:118:
+#define	rb_entry(ptr, type, member)					\
+	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#625: FILE: include/linux/rbtree.h:119:
+	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#627: FILE: include/linux/rbtree.h:121:
+extern void rb_insert_color(rb_node_t *, rb_root_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rb_node_t *' should also have an identifier name
#627: FILE: include/linux/rbtree.h:121:
+extern void rb_insert_color(rb_node_t *, rb_root_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rb_root_t *' should also have an identifier name
#627: FILE: include/linux/rbtree.h:121:
+extern void rb_insert_color(rb_node_t *, rb_root_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#628: FILE: include/linux/rbtree.h:122:
+extern void rb_erase(rb_node_t *, rb_root_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rb_node_t *' should also have an identifier name
#628: FILE: include/linux/rbtree.h:122:
+extern void rb_erase(rb_node_t *, rb_root_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rb_root_t *' should also have an identifier name
#628: FILE: include/linux/rbtree.h:122:
+extern void rb_erase(rb_node_t *, rb_root_t *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#630: FILE: include/linux/rbtree.h:124:
+static inline void rb_link_node(rb_node_t * node, rb_node_t * parent, rb_node_t ** rb_link)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#630: FILE: include/linux/rbtree.h:124:
+static inline void rb_link_node(rb_node_t * node, rb_node_t * parent, rb_node_t ** rb_link)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#630: FILE: include/linux/rbtree.h:124:
+static inline void rb_link_node(rb_node_t * node, rb_node_t * parent, rb_node_t ** rb_link)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#634: FILE: include/linux/rbtree.h:128:
+	node->rb_left = node->rb_right = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:INDENTED_LABEL: labels should not be indented
#672: FILE: include/linux/sched.h:237:
+	mm_rb:		RB_ROOT,			\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#717: FILE: lib/rbtree.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#718: FILE: lib/rbtree.c:2:
+/*
+  Red Black Trees

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: lib/rbtree.c:4:
+  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#732: FILE: lib/rbtree.c:16:
+  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#733: FILE: lib/rbtree.c:17:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#735: FILE: lib/rbtree.c:19:
+  linux/lib/rbtree.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: lib/rbtree.c:24:
+static void __rb_rotate_left(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: lib/rbtree.c:24:
+static void __rb_rotate_left(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#742: FILE: lib/rbtree.c:26:
+	rb_node_t * right = node->rb_right;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#744: FILE: lib/rbtree.c:28:
+	if ((node->rb_right = right->rb_left))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#748: FILE: lib/rbtree.c:32:
+	if ((right->rb_parent = node->rb_parent))
+	{

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#748: FILE: lib/rbtree.c:32:
+	if ((right->rb_parent = node->rb_parent))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#755: FILE: lib/rbtree.c:39:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: lib/rbtree.c:44:
+static void __rb_rotate_right(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: lib/rbtree.c:44:
+static void __rb_rotate_right(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#762: FILE: lib/rbtree.c:46:
+	rb_node_t * left = node->rb_left;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#764: FILE: lib/rbtree.c:48:
+	if ((node->rb_left = left->rb_right))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#768: FILE: lib/rbtree.c:52:
+	if ((left->rb_parent = node->rb_parent))
+	{

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#768: FILE: lib/rbtree.c:52:
+	if ((left->rb_parent = node->rb_parent))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#775: FILE: lib/rbtree.c:59:
+	}
+	else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#780: FILE: lib/rbtree.c:64:
+void rb_insert_color(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#780: FILE: lib/rbtree.c:64:
+void rb_insert_color(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#782: FILE: lib/rbtree.c:66:
+	rb_node_t * parent, * gparent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#782: FILE: lib/rbtree.c:66:
+	rb_node_t * parent, * gparent;
 	                    ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#784: FILE: lib/rbtree.c:68:
+	while ((parent = node->rb_parent) && parent->rb_color == RB_RED)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#788: FILE: lib/rbtree.c:72:
+		if (parent == gparent->rb_left)
+		{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#791: FILE: lib/rbtree.c:75:
+				register rb_node_t * uncle = gparent->rb_right;

WARNING:LINE_SPACING: Missing a blank line after declarations
#792: FILE: lib/rbtree.c:76:
+				register rb_node_t * uncle = gparent->rb_right;
+				if (uncle && uncle->rb_color == RB_RED)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#792: FILE: lib/rbtree.c:76:
+				if (uncle && uncle->rb_color == RB_RED)
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#802: FILE: lib/rbtree.c:86:
+			if (parent->rb_right == node)
+			{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#804: FILE: lib/rbtree.c:88:
+				register rb_node_t * tmp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#805: FILE: lib/rbtree.c:89:
+				register rb_node_t * tmp;
+				__rb_rotate_left(parent, root);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#816: FILE: lib/rbtree.c:100:
+				register rb_node_t * uncle = gparent->rb_left;

WARNING:LINE_SPACING: Missing a blank line after declarations
#817: FILE: lib/rbtree.c:101:
+				register rb_node_t * uncle = gparent->rb_left;
+				if (uncle && uncle->rb_color == RB_RED)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#817: FILE: lib/rbtree.c:101:
+				if (uncle && uncle->rb_color == RB_RED)
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#827: FILE: lib/rbtree.c:111:
+			if (parent->rb_left == node)
+			{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#829: FILE: lib/rbtree.c:113:
+				register rb_node_t * tmp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#830: FILE: lib/rbtree.c:114:
+				register rb_node_t * tmp;
+				__rb_rotate_right(parent, root);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: lib/rbtree.c:129:
+static void __rb_erase_color(rb_node_t * node, rb_node_t * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: lib/rbtree.c:129:
+static void __rb_erase_color(rb_node_t * node, rb_node_t * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#846: FILE: lib/rbtree.c:130:
+			     rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#848: FILE: lib/rbtree.c:132:
+	rb_node_t * other;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#850: FILE: lib/rbtree.c:134:
+	while ((!node || node->rb_color == RB_BLACK) && node != root->rb_node)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#852: FILE: lib/rbtree.c:136:
+		if (parent->rb_left == node)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#855: FILE: lib/rbtree.c:139:
+			if (other->rb_color == RB_RED)
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#862: FILE: lib/rbtree.c:146:
+			if ((!other->rb_left ||
+			     other->rb_left->rb_color == RB_BLACK)
+			    && (!other->rb_right ||
+				other->rb_right->rb_color == RB_BLACK))
+			{

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#864: FILE: lib/rbtree.c:148:
+			     other->rb_left->rb_color == RB_BLACK)
+			    && (!other->rb_right ||

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#871: FILE: lib/rbtree.c:155:
+			else
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#871: FILE: lib/rbtree.c:155:
+			}
+			else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#873: FILE: lib/rbtree.c:157:
+				if (!other->rb_right ||
+				    other->rb_right->rb_color == RB_BLACK)
+				{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#876: FILE: lib/rbtree.c:160:
+					register rb_node_t * o_left;

WARNING:LINE_SPACING: Missing a blank line after declarations
#877: FILE: lib/rbtree.c:161:
+					register rb_node_t * o_left;
+					if ((o_left = other->rb_left))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#877: FILE: lib/rbtree.c:161:
+					if ((o_left = other->rb_left))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#892: FILE: lib/rbtree.c:176:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#892: FILE: lib/rbtree.c:176:
+		}
+		else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#895: FILE: lib/rbtree.c:179:
+			if (other->rb_color == RB_RED)
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#902: FILE: lib/rbtree.c:186:
+			if ((!other->rb_left ||
+			     other->rb_left->rb_color == RB_BLACK)
+			    && (!other->rb_right ||
+				other->rb_right->rb_color == RB_BLACK))
+			{

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#904: FILE: lib/rbtree.c:188:
+			     other->rb_left->rb_color == RB_BLACK)
+			    && (!other->rb_right ||

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#911: FILE: lib/rbtree.c:195:
+			else
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#911: FILE: lib/rbtree.c:195:
+			}
+			else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#913: FILE: lib/rbtree.c:197:
+				if (!other->rb_left ||
+				    other->rb_left->rb_color == RB_BLACK)
+				{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#916: FILE: lib/rbtree.c:200:
+					register rb_node_t * o_right;

WARNING:LINE_SPACING: Missing a blank line after declarations
#917: FILE: lib/rbtree.c:201:
+					register rb_node_t * o_right;
+					if ((o_right = other->rb_right))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#917: FILE: lib/rbtree.c:201:
+					if ((o_right = other->rb_right))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#937: FILE: lib/rbtree.c:221:
+void rb_erase(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#937: FILE: lib/rbtree.c:221:
+void rb_erase(rb_node_t * node, rb_root_t * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#939: FILE: lib/rbtree.c:223:
+	rb_node_t * child, * parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#939: FILE: lib/rbtree.c:223:
+	rb_node_t * child, * parent;
 	                   ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#946: FILE: lib/rbtree.c:230:
+	else
+	{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#948: FILE: lib/rbtree.c:232:
+		rb_node_t * old = node, * left;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#948: FILE: lib/rbtree.c:232:
+		rb_node_t * old = node, * left;
 		                        ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#959: FILE: lib/rbtree.c:243:
+		if (parent)
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#966: FILE: lib/rbtree.c:250:
+		}
+		else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#976: FILE: lib/rbtree.c:260:
+		if (old->rb_parent)
+		{

CHECK:BRACES: Unbalanced braces around else statement
#982: FILE: lib/rbtree.c:266:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#996: FILE: lib/rbtree.c:280:
+	if (parent)
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1003: FILE: lib/rbtree.c:287:
+	}
+	else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1017: FILE: mm/filemap.c:1801:
+	struct mm_struct * mm = vma->vm_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1042: FILE: mm/filemap.c:1828:
+	struct mm_struct * mm = vma->vm_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1064: FILE: mm/filemap.c:1855:
+	struct mm_struct * mm = vma->vm_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1142: FILE: mm/mmap.c:214:
+static int browse_rb(rb_node_t * rb_node) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1142: FILE: mm/mmap.c:214:
+static int browse_rb(rb_node_t * rb_node) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1144: FILE: mm/mmap.c:216:
+	int i = 0;
+	if (rb_node) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1152: FILE: mm/mmap.c:224:
+static void validate_mm(struct mm_struct * mm) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1152: FILE: mm/mmap.c:224:
+static void validate_mm(struct mm_struct * mm) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1155: FILE: mm/mmap.c:227:
+	struct vm_area_struct * tmp = mm->mmap;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1156: FILE: mm/mmap.c:228:
+	struct vm_area_struct * tmp = mm->mmap;
+	while (tmp) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1161: FILE: mm/mmap.c:233:
+		printk("map_count %d vm_next %d\n", mm->map_count, i), bug = 1;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1164: FILE: mm/mmap.c:236:
+		printk("map_count %d rb %d\n", mm->map_count, i), bug = 1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1166: FILE: mm/mmap.c:238:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1172: FILE: mm/mmap.c:244:
+static struct vm_area_struct * find_vma_prepare(struct mm_struct * mm, unsigned long addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1172: FILE: mm/mmap.c:244:
+static struct vm_area_struct * find_vma_prepare(struct mm_struct * mm, unsigned long addr,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1173: FILE: mm/mmap.c:245:
+						struct vm_area_struct ** pprev,

ERROR:POINTER_LOCATION: "foo *** bar" should be "foo ***bar"
#1174: FILE: mm/mmap.c:246:
+						rb_node_t *** rb_link, rb_node_t ** rb_parent)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1174: FILE: mm/mmap.c:246:
+						rb_node_t *** rb_link, rb_node_t ** rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1176: FILE: mm/mmap.c:248:
+	struct vm_area_struct * vma;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1177: FILE: mm/mmap.c:249:
+	rb_node_t ** __rb_link, * __rb_parent, * rb_prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1177: FILE: mm/mmap.c:249:
+	rb_node_t ** __rb_link, * __rb_parent, * rb_prev;
 	                        ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1177: FILE: mm/mmap.c:249:
+	rb_node_t ** __rb_link, * __rb_parent, * rb_prev;
 	                                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1180: FILE: mm/mmap.c:252:
+	rb_prev = __rb_parent = NULL;

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1208: FILE: mm/mmap.c:280:
+static inline void __vma_link_list(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1208: FILE: mm/mmap.c:280:
+static inline void __vma_link_list(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1208: FILE: mm/mmap.c:280:
+static inline void __vma_link_list(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1208: FILE: mm/mmap.c:280:
+static inline void __vma_link_list(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1209: FILE: mm/mmap.c:281:
+				   rb_node_t * rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1223: FILE: mm/mmap.c:295:
+static inline void __vma_link_rb(struct mm_struct * mm, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1223: FILE: mm/mmap.c:295:
+static inline void __vma_link_rb(struct mm_struct * mm, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1224: FILE: mm/mmap.c:296:
+				 rb_node_t ** rb_link, rb_node_t * rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1224: FILE: mm/mmap.c:296:
+				 rb_node_t ** rb_link, rb_node_t * rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1230: FILE: mm/mmap.c:302:
+static inline void __vma_link_file(struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1232: FILE: mm/mmap.c:304:
+	struct file * file;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: mm/mmap.c:308:
+		struct inode * inode = file->f_dentry->d_inode;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1246: FILE: mm/mmap.c:318:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: mm/mmap.c:318:
+      $

ERROR:SPACING: space required before the open parenthesis '('
#1248: FILE: mm/mmap.c:320:
+		if((vma->vm_next_share = *head) != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1248: FILE: mm/mmap.c:320:
+		if((vma->vm_next_share = *head) != NULL)

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1255: FILE: mm/mmap.c:327:
+static void __vma_link(struct mm_struct * mm, struct vm_area_struct * vma,  struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1255: FILE: mm/mmap.c:327:
+static void __vma_link(struct mm_struct * mm, struct vm_area_struct * vma,  struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1255: FILE: mm/mmap.c:327:
+static void __vma_link(struct mm_struct * mm, struct vm_area_struct * vma,  struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1255: FILE: mm/mmap.c:327:
+static void __vma_link(struct mm_struct * mm, struct vm_area_struct * vma,  struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1256: FILE: mm/mmap.c:328:
+		       rb_node_t ** rb_link, rb_node_t * rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1256: FILE: mm/mmap.c:328:
+		       rb_node_t ** rb_link, rb_node_t * rb_parent)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1263: FILE: mm/mmap.c:335:
+static inline void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1263: FILE: mm/mmap.c:335:
+static inline void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1263: FILE: mm/mmap.c:335:
+static inline void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1263: FILE: mm/mmap.c:335:
+static inline void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1264: FILE: mm/mmap.c:336:
+			    rb_node_t ** rb_link, rb_node_t * rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1264: FILE: mm/mmap.c:336:
+			    rb_node_t ** rb_link, rb_node_t * rb_parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: mm/mmap.c:348:
+static int vma_merge(struct mm_struct * mm, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: mm/mmap.c:348:
+static int vma_merge(struct mm_struct * mm, struct vm_area_struct * prev,

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1277: FILE: mm/mmap.c:349:
+		     rb_node_t * rb_parent, unsigned long addr, unsigned long end, unsigned long vm_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1277: FILE: mm/mmap.c:349:
+		     rb_node_t * rb_parent, unsigned long addr, unsigned long end, unsigned long vm_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1279: FILE: mm/mmap.c:351:
+	spinlock_t * lock = &mm->page_table_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1280: FILE: mm/mmap.c:352:
+	spinlock_t * lock = &mm->page_table_lock;
+	if (!prev) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1285: FILE: mm/mmap.c:357:
+		struct vm_area_struct * next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1324: FILE: mm/mmap.c:395:
+	struct vm_area_struct * vma, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1324: FILE: mm/mmap.c:395:
+	struct vm_area_struct * vma, * prev;
 	                             ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1328: FILE: mm/mmap.c:399:
+	rb_node_t ** rb_link, * rb_parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1328: FILE: mm/mmap.c:399:
+	rb_node_t ** rb_link, * rb_parent;
 	                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1401: FILE: mm/mmap.c:633:
+			rb_node_t * rb_node;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1407: FILE: mm/mmap.c:639:
+				struct vm_area_struct * vma_tmp;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1411: FILE: mm/mmap.c:643:
+				if (vma_tmp->vm_end > addr) {
[...]
-						vma = tree;
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1424: FILE: mm/mmap.c:648:
+				} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1452: FILE: mm/mmap.c:664:
+		struct vm_area_struct * vma;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1453: FILE: mm/mmap.c:665:
+		rb_node_t * rb_node, * rb_last_right, * rb_prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1453: FILE: mm/mmap.c:665:
+		rb_node_t * rb_node, * rb_last_right, * rb_prev;
 		                     ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1453: FILE: mm/mmap.c:665:
+		rb_node_t * rb_node, * rb_last_right, * rb_prev;
 		                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1454: FILE: mm/mmap.c:666:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1456: FILE: mm/mmap.c:668:
+		rb_last_right = rb_prev = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1460: FILE: mm/mmap.c:672:
+			struct vm_area_struct * vma_tmp;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1505: FILE: mm/mmap.c:697:
+				BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1551: FILE: mm/mmap.c:999:
+	struct vm_area_struct * vma, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1551: FILE: mm/mmap.c:999:
+	struct vm_area_struct * vma, * prev;
 	                             ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1553: FILE: mm/mmap.c:1001:
+	rb_node_t ** rb_link, * rb_parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1553: FILE: mm/mmap.c:1001:
+	rb_node_t ** rb_link, * rb_parent;
 	                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1610: FILE: mm/mmap.c:1077:
+void build_mmap_rb(struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1613: FILE: mm/mmap.c:1080:
+	rb_node_t ** rb_link, * rb_parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1613: FILE: mm/mmap.c:1080:
+	rb_node_t ** rb_link, * rb_parent;
 	                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1634: FILE: mm/mmap.c:1100:
+	mm->mmap = mm->mmap_cache = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1644: FILE: mm/mmap.c:1130:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1653: FILE: mm/mmap.c:1139:
+void __insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1653: FILE: mm/mmap.c:1139:
+void __insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1671: FILE: mm/mmap.c:1141:
+	struct vm_area_struct * __vma, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1671: FILE: mm/mmap.c:1141:
+	struct vm_area_struct * __vma, * prev;
 	                               ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1672: FILE: mm/mmap.c:1142:
+	rb_node_t ** rb_link, * rb_parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1672: FILE: mm/mmap.c:1142:
+	rb_node_t ** rb_link, * rb_parent;
 	                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1676: FILE: mm/mmap.c:1146:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1705: FILE: mm/mmap.c:1152:
+void insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1705: FILE: mm/mmap.c:1152:
+void insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1712: FILE: mm/mmap.c:1154:
+	struct vm_area_struct * __vma, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1712: FILE: mm/mmap.c:1154:
+	struct vm_area_struct * __vma, * prev;
 	                               ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1713: FILE: mm/mmap.c:1155:
+	rb_node_t ** rb_link, * rb_parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1713: FILE: mm/mmap.c:1155:
+	rb_node_t ** rb_link, * rb_parent;
 	                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1717: FILE: mm/mmap.c:1159:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2107: FILE: mm/mprotect.c:94:
+static inline int mprotect_fixup_all(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#2107: FILE: mm/mprotect.c:94:
+static inline int mprotect_fixup_all(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2108: FILE: mm/mprotect.c:95:
+static inline int mprotect_fixup_all(struct vm_area_struct * vma, struct vm_area_struct ** pprev,
 	int newflags, pgprot_t prot)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2111: FILE: mm/mprotect.c:97:
+	struct vm_area_struct * prev = *pprev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2112: FILE: mm/mprotect.c:98:
+	struct mm_struct * mm = vma->vm_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2139: FILE: mm/mprotect.c:123:
+static inline int mprotect_fixup_start(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#2139: FILE: mm/mprotect.c:123:
+static inline int mprotect_fixup_start(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2140: FILE: mm/mprotect.c:124:
+static inline int mprotect_fixup_start(struct vm_area_struct * vma, struct vm_area_struct ** pprev,
 	unsigned long end,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2144: FILE: mm/mprotect.c:127:
+	struct vm_area_struct * n, * prev = *pprev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2144: FILE: mm/mprotect.c:127:
+	struct vm_area_struct * n, * prev = *pprev;
 	                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2177: FILE: mm/mprotect.c:163:
+static inline int mprotect_fixup_end(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#2177: FILE: mm/mprotect.c:163:
+static inline int mprotect_fixup_end(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2178: FILE: mm/mprotect.c:164:
+static inline int mprotect_fixup_end(struct vm_area_struct * vma, struct vm_area_struct ** pprev,
 	unsigned long start,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2192: FILE: mm/mprotect.c:194:
+static inline int mprotect_fixup_middle(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#2192: FILE: mm/mprotect.c:194:
+static inline int mprotect_fixup_middle(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2193: FILE: mm/mprotect.c:195:
+static inline int mprotect_fixup_middle(struct vm_area_struct * vma, struct vm_area_struct ** pprev,
 	unsigned long start, unsigned long end,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2222: FILE: mm/mprotect.c:239:
+static int mprotect_fixup(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#2222: FILE: mm/mprotect.c:239:
+static int mprotect_fixup(struct vm_area_struct * vma, struct vm_area_struct ** pprev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2223: FILE: mm/mprotect.c:240:
+static int mprotect_fixup(struct vm_area_struct * vma, struct vm_area_struct ** pprev,
 	unsigned long start, unsigned long end, unsigned int newflags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2255: FILE: mm/mprotect.c:270:
+	struct vm_area_struct * vma, * next, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2255: FILE: mm/mprotect.c:270:
+	struct vm_area_struct * vma, * next, * prev;
 	                             ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2255: FILE: mm/mprotect.c:270:
+	struct vm_area_struct * vma, * next, * prev;
 	                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2331: FILE: mm/mremap.c:130:
+	struct mm_struct * mm = vma->vm_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2332: FILE: mm/mremap.c:131:
+	struct vm_area_struct * new_vma, * next, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2332: FILE: mm/mremap.c:131:
+	struct vm_area_struct * new_vma, * next, * prev;
 	                                 ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2332: FILE: mm/mremap.c:131:
+	struct vm_area_struct * new_vma, * next, * prev;
 	                                         ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2342: FILE: mm/mremap.c:138:
+		    can_vma_merge(prev, vma->vm_flags) && !vma->vm_file && !(vma->vm_flags & VM_SHARED)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2348: FILE: mm/mremap.c:144:
+				BUG();

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2359: FILE: mm/mremap.c:155:
+			   can_vma_merge(next, vma->vm_flags) && !vma->vm_file && !(vma->vm_flags & VM_SHARED)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2366: FILE: mm/mremap.c:162:
+		prev = find_vma(mm, new_addr-1);
 		                            ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2368: FILE: mm/mremap.c:164:
+		    can_vma_merge(prev, vma->vm_flags) && !vma->vm_file && !(vma->vm_flags & VM_SHARED)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515294.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 180 errors, 42 warnings, 22 checks, 1782 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515294.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
