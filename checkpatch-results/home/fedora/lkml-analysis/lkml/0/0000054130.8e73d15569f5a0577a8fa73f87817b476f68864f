WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: drivers/md/dm-user.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#65: FILE: drivers/md/dm-user.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#66: FILE: drivers/md/dm-user.h:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#86: FILE: drivers/md/dm-user.h:36:
+	uint64_t size;                /* Number of buckets                  */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#87: FILE: drivers/md/dm-user.h:37:
+	uint32_t mask;                /* Mask used to determine bucket      */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#88: FILE: drivers/md/dm-user.h:38:
+	uint64_t count;               /* Number of remaps in entire table   */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#121: FILE: drivers/md/dm-user.h:71:
+	uint64_t block_size;          /* Block size for this device        */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#122: FILE: drivers/md/dm-user.h:72:
+	uint64_t block_mask;          /* Mask for offset in block          */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#127: FILE: drivers/md/dm-user.h:77:
+	uint32_t id_counter;          /* Used to generate request IDs      */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#139: FILE: drivers/md/dm-user.h:89:
+	uint32_t flags;               /* Attribute flags                   */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#140: FILE: drivers/md/dm-user.h:90:
+	uint32_t id;                  /* Unique ID for sync with userspace */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#143: FILE: drivers/md/dm-user.h:93:
+		uint64_t block;       /* The block in question             */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#155: FILE: drivers/md/dm-user.h:105:
+	uint64_t org_block;           /* Original block                    */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#156: FILE: drivers/md/dm-user.h:106:
+	uint64_t new_block;           /* Destination block                 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#157: FILE: drivers/md/dm-user.h:107:
+	int64_t offset;               /* Sectors to offset remapped block  */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#158: FILE: drivers/md/dm-user.h:108:
+	uint32_t flags;               /* Attribute flags                   */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#159: FILE: drivers/md/dm-user.h:109:
+	uint32_t id;                  /* Unique ID for sync with userspace */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: drivers/md/dm-user.h:186:
+	BUG_ON(remap->dest == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!remap->dest"
#236: FILE: drivers/md/dm-user.h:186:
+	BUG_ON(remap->dest == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#263: FILE: drivers/md/dm-userspace.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#277: FILE: drivers/md/dm-userspace.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#278: FILE: drivers/md/dm-userspace.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#311: FILE: drivers/md/dm-userspace.c:49:
+static int enable_watchdog = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#314: FILE: drivers/md/dm-userspace.c:52:
+spinlock_t devices_lock;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#356: FILE: drivers/md/dm-userspace.c:94:
+	if (remap) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#389: FILE: drivers/md/dm-userspace.c:127:
+				/* If the LRU remap is not valid,
+				   we're in trouble */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#389: FILE: drivers/md/dm-userspace.c:127:
+				   we're in trouble */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#392: FILE: drivers/md/dm-userspace.c:130:
+				printk(KERN_EMERG

WARNING:SPLIT_STRING: quoted string split across lines
#394: FILE: drivers/md/dm-userspace.c:132:
+				       "dm-userspace: Unable to allocate "
+				       "or steal a remap!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#442: FILE: drivers/md/dm-userspace.c:180:
+	remap->org_block = remap->new_block = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#445: FILE: drivers/md/dm-userspace.c:183:
+	remap->src = remap->dest = NULL;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#492: FILE: drivers/md/dm-userspace.c:230:
+	uint64_t i;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#528: FILE: drivers/md/dm-userspace.c:266:
+	uint32_t addr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#532: FILE: drivers/md/dm-userspace.c:270:
+	BUG_ON(addr >= ht->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: drivers/md/dm-userspace.c:282:
+	BUG_ON(ht->count == 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#550: FILE: drivers/md/dm-userspace.c:288:
+	uint32_t addr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#555: FILE: drivers/md/dm-userspace.c:293:
+	BUG_ON(addr >= ht->size);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#584: FILE: drivers/md/dm-userspace.c:322:
+	uint64_t i;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#591: FILE: drivers/md/dm-userspace.c:329:
+	for (i = 0; i < old_table.size; i++ ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: drivers/md/dm-userspace.c:331:
+		struct dmu_map *m, *n;
+		list_for_each_entry_safe(m, n, &old_table.table[i],

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#607: FILE: drivers/md/dm-userspace.c:345:
+	uint64_t i, count = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: drivers/md/dm-userspace.c:360:
+struct target_device *find_target(struct dmu_device *dev,
+					 dev_t devno)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#642: FILE: drivers/md/dm-userspace.c:380:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#695: FILE: drivers/md/dm-userspace.c:433:
+	uint64_t i;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#704: FILE: drivers/md/dm-userspace.c:442:
+		v_remaps = i_remaps = reqs = s_reqs = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#720: FILE: drivers/md/dm-userspace.c:458:
+		printk("Device "

WARNING:SPLIT_STRING: quoted string split across lines
#721: FILE: drivers/md/dm-userspace.c:459:
+		printk("Device "
+		       "  reqs: %u/%u "

WARNING:SPLIT_STRING: quoted string split across lines
#722: FILE: drivers/md/dm-userspace.c:460:
+		       "  reqs: %u/%u "
+		       "  inv maps: %u "

WARNING:SPLIT_STRING: quoted string split across lines
#723: FILE: drivers/md/dm-userspace.c:461:
+		       "  inv maps: %u "
+		       "  val maps: %u\n",

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#739: FILE: drivers/md/dm-userspace.c:477:
+	uint64_t remaps;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#819: FILE: drivers/md/dm-userspace.c:557:
+	if (dev == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#873: FILE: drivers/md/dm-userspace.c:611:
+	uint64_t block_size;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#888: FILE: drivers/md/dm-userspace.c:626:
+	block_size = simple_strtoul(block_size_param, NULL, 10) / 512;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#891: FILE: drivers/md/dm-userspace.c:629:
+	if (dev == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#895: FILE: drivers/md/dm-userspace.c:633:
+		if (dev == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: drivers/md/dm-userspace.c:651:
+		int maj, min;
+		sscanf(argv[target_idx], "%i:%i", &maj, &min);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#913: FILE: drivers/md/dm-userspace.c:651:
+		sscanf(argv[target_idx], "%i:%i", &maj, &min);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#927: FILE: drivers/md/dm-userspace.c:665:
+	if (dev) {
+		spin_unlock_irqrestore(&dev->lock, flags);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#931: FILE: drivers/md/dm-userspace.c:669:
+	if (dev) {
+		put_dev(dev);
+	}

CHECK:SPACING: No space is necessary after a cast
#940: FILE: drivers/md/dm-userspace.c:678:
+	struct dmu_device *dev = (struct dmu_device *) ti->private;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req->type == DM_USERSPACE_MAP_BLOCK_REQ'
#956: FILE: drivers/md/dm-userspace.c:694:
+		if ((req->type == DM_USERSPACE_MAP_BLOCK_REQ) &&
+		    (dmu_block(dev, req->u.bios.head->bi_sector) == block)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#958: FILE: drivers/md/dm-userspace.c:696:
+			if (maybe) {
+				atomic_dec(&maybe->refcnt);
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#976: FILE: drivers/md/dm-userspace.c:714:
+	if (req == NULL)

CHECK:SPACING: No space is necessary after a cast
#1067: FILE: drivers/md/dm-userspace.c:805:
+	struct dmu_device *dev = (struct dmu_device *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#1099: FILE: drivers/md/dm-userspace.c:837:
+	struct dmu_device *dev = (struct dmu_device *) ti->private;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1120: FILE: drivers/md/dm-userspace.c:858:
+       struct userspace_request *req;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1121: FILE: drivers/md/dm-userspace.c:859:
+       struct userspace_request *req;
+       req = mempool_alloc(request_pool, GFP_ATOMIC);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: drivers/md/dm-userspace.c:859:
+       req = mempool_alloc(request_pool, GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: drivers/md/dm-userspace.c:860:
+       if (!req) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1122: FILE: drivers/md/dm-userspace.c:860:
+       if (!req) {
+	       printk(KERN_ERR  "Failed to allocate copy response\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1123: FILE: drivers/md/dm-userspace.c:861:
+	       printk(KERN_ERR  "Failed to allocate copy response\n");

WARNING:TABSTOP: Statements should start on a tabstop
#1124: FILE: drivers/md/dm-userspace.c:862:
+	       return NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: drivers/md/dm-userspace.c:863:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1126: FILE: drivers/md/dm-userspace.c:864:
+       init_request(dev, DM_USERSPACE_SYNC_COMPLETE, req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1127: FILE: drivers/md/dm-userspace.c:865:
+       req->id = id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: drivers/md/dm-userspace.c:867:
+       return req;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!remap->bios_waiting.head"
#1140: FILE: drivers/md/dm-userspace.c:878:
+	    remap->bios_waiting.head == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "remap->bios_waiting.head"
#1153: FILE: drivers/md/dm-userspace.c:891:
+	} else if (remap->bios_waiting.head != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1173: FILE: drivers/md/dm-userspace.c:911:
+                        int error, union map_info *map_context)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1173: FILE: drivers/md/dm-userspace.c:911:
+static int dmu_end_io(struct dm_target *ti, struct bio *bio,
+                        int error, union map_info *map_context)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: drivers/md/dm-userspace.c:911:
+                        int error, union map_info *map_context)$

CHECK:SPACING: No space is necessary after a cast
#1175: FILE: drivers/md/dm-userspace.c:913:
+	struct dmu_device *dev = (struct dmu_device *) ti->private;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmu_end_io', this function's name, in a string
#1183: FILE: drivers/md/dm-userspace.c:921:
+		DMERR("Error in dmu_end_io\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1237: FILE: drivers/md/dm-userspace.c:975:
+	int r = dm_register_target(&userspace_target);
+	if (r < 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1253: FILE: drivers/md/dm-userspace.c:991:
+				  __alignof__ (struct userspace_request),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1263: FILE: drivers/md/dm-userspace.c:1001:
+				  __alignof__ (struct dmu_map),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1348: FILE: drivers/md/dm-userspace.c:1086:
+module_param(enable_watchdog, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1357: FILE: drivers/md/dm-userspace-chardev.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1371: FILE: drivers/md/dm-userspace-chardev.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1372: FILE: drivers/md/dm-userspace-chardev.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1386: FILE: drivers/md/dm-userspace-chardev.c:30:
+#include <asm/uaccess.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#1434: FILE: drivers/md/dm-userspace-chardev.c:78:
+                          unsigned int write_err,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1434: FILE: drivers/md/dm-userspace-chardev.c:78:
+                          unsigned int write_err,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1435: FILE: drivers/md/dm-userspace-chardev.c:79:
+                          void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1435: FILE: drivers/md/dm-userspace-chardev.c:79:
+                          void *data)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1487: FILE: drivers/md/dm-userspace-chardev.c:131:
+	if (bio)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1489: FILE: drivers/md/dm-userspace-chardev.c:133:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1525: FILE: drivers/md/dm-userspace-chardev.c:169:
+	while (1) {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1543: FILE: drivers/md/dm-userspace-chardev.c:187:
+static int send_userspace_message(uint8_t __user *buffer,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1651: FILE: drivers/md/dm-userspace-chardev.c:295:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1656: FILE: drivers/md/dm-userspace-chardev.c:300:
+        if (!capable(CAP_SYS_ADMIN))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1656: FILE: drivers/md/dm-userspace-chardev.c:300:
+        if (!capable(CAP_SYS_ADMIN))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1657: FILE: drivers/md/dm-userspace-chardev.c:301:
+                return -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: drivers/md/dm-userspace-chardev.c:301:
+                return -EACCES;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1660: FILE: drivers/md/dm-userspace-chardev.c:304:
+		if (file->f_flags & O_NONBLOCK) {
+			return 0;
+		}

ERROR:SPACING: space required before the open parenthesis '('
#1669: FILE: drivers/md/dm-userspace-chardev.c:313:
+	while(ret < size) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cursor->type == DM_USERSPACE_MAP_BLOCK_REQ'
#1703: FILE: drivers/md/dm-userspace-chardev.c:347:
+		if ((cursor->type == DM_USERSPACE_MAP_BLOCK_REQ) &&
+		    (cursor->id == msg->id_of_req)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cursor->id == msg->id_of_req'
#1703: FILE: drivers/md/dm-userspace-chardev.c:347:
+		if ((cursor->type == DM_USERSPACE_MAP_BLOCK_REQ) &&
+		    (cursor->id == msg->id_of_req)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1716: FILE: drivers/md/dm-userspace-chardev.c:360:
+			DMERR("Failed to find src device %i:%i",
+			       msg->src_maj, msg->src_min);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1724: FILE: drivers/md/dm-userspace-chardev.c:368:
+		DMERR("Failed to find dest device %i:%i",
+		       msg->dst_maj, msg->dst_min);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1769: FILE: drivers/md/dm-userspace-chardev.c:413:
+	if (parent) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1775: FILE: drivers/md/dm-userspace-chardev.c:419:
+			 * so we can't use it
+			*/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent->new_block == msg->new_block'
#1780: FILE: drivers/md/dm-userspace-chardev.c:424:
+			if (dmu_get_flag(&parent->flags, DMU_FLAG_WR) ==
+			    dmu_get_flag(&msg->flags, DMU_FLAG_WR) &&
+			    (parent->new_block == msg->new_block)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1784: FILE: drivers/md/dm-userspace-chardev.c:428:
+				/* Perms match for this not-yet-valid remap,
+				   so tag our bios on to it and bail */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1784: FILE: drivers/md/dm-userspace-chardev.c:428:
+				   so tag our bios on to it and bail */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1792: FILE: drivers/md/dm-userspace-chardev.c:436:
+				return 1;
+			} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1801: FILE: drivers/md/dm-userspace-chardev.c:445:
+					BUG();

WARNING:INDENTED_LABEL: labels should not be indented
#1813: FILE: drivers/md/dm-userspace-chardev.c:457:
+	end_parent:

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1843: FILE: drivers/md/dm-userspace-chardev.c:487:
+	if (! is_chained)
 	    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1880: FILE: drivers/md/dm-userspace-chardev.c:524:
+	if (!remap)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1882: FILE: drivers/md/dm-userspace-chardev.c:526:
+	else {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1912: FILE: drivers/md/dm-userspace-chardev.c:556:
+static void sync_complete(struct dmu_device *dev, uint32_t id_of_op) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1924: FILE: drivers/md/dm-userspace-chardev.c:568:
+
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1931: FILE: drivers/md/dm-userspace-chardev.c:575:
+		while(1) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1944: FILE: drivers/md/dm-userspace-chardev.c:588:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1958: FILE: drivers/md/dm-userspace-chardev.c:602:
+        if (!capable(CAP_SYS_ADMIN))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1958: FILE: drivers/md/dm-userspace-chardev.c:602:
+        if (!capable(CAP_SYS_ADMIN))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1959: FILE: drivers/md/dm-userspace-chardev.c:603:
+                return -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1959: FILE: drivers/md/dm-userspace-chardev.c:603:
+                return -EACCES;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1962: FILE: drivers/md/dm-userspace-chardev.c:606:
+		if (copy_from_user(&hdr, buffer+ret, sizeof(hdr))) {
 		                               ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1963: FILE: drivers/md/dm-userspace-chardev.c:607:
+			DMERR("%s copy_from_user failed!", __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1971: FILE: drivers/md/dm-userspace-chardev.c:615:
+		switch (hdr.msg_type) {
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1978: FILE: drivers/md/dm-userspace-chardev.c:622:
+			if (copy_from_user(&msgs.ver_req, buffer+ret,
 			                                        ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1981: FILE: drivers/md/dm-userspace-chardev.c:625:
+				      __FUNCTION__);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1995: FILE: drivers/md/dm-userspace-chardev.c:639:
+			if (copy_from_user(&msgs.map_rsp, buffer+ret,
 			                                        ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1998: FILE: drivers/md/dm-userspace-chardev.c:642:
+				      __FUNCTION__);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2013: FILE: drivers/md/dm-userspace-chardev.c:657:
+			if (copy_from_user(&msgs.map_rsp, buffer+ret,
 			                                        ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2016: FILE: drivers/md/dm-userspace-chardev.c:660:
+				      __FUNCTION__);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2030: FILE: drivers/md/dm-userspace-chardev.c:674:
+			if (copy_from_user(&msgs.inval_rsp, buffer+ret,
 			                                          ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2033: FILE: drivers/md/dm-userspace-chardev.c:677:
+				      __FUNCTION__);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2047: FILE: drivers/md/dm-userspace-chardev.c:691:
+			if (copy_from_user(&msgs.status_rsp, buffer+ret,
 			                                           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2050: FILE: drivers/md/dm-userspace-chardev.c:694:
+				      __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2076: FILE: drivers/md/dm-userspace-chardev.c:720:
+        if (!capable(CAP_SYS_ADMIN))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2076: FILE: drivers/md/dm-userspace-chardev.c:720:
+        if (!capable(CAP_SYS_ADMIN))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2077: FILE: drivers/md/dm-userspace-chardev.c:721:
+                return -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2077: FILE: drivers/md/dm-userspace-chardev.c:721:
+                return -EACCES;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2100: FILE: drivers/md/dm-userspace-chardev.c:744:
+unsigned dmu_ctl_poll(struct file *file, poll_table *wait)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2103: FILE: drivers/md/dm-userspace-chardev.c:747:
+	unsigned mask = 0;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2113: FILE: drivers/md/dm-userspace-chardev.c:757:
+static struct file_operations ctl_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#2132: FILE: drivers/md/dm-userspace-chardev.c:776:
+			struct chardev_transport *t = dev->transport_private;
+			if (MINOR(t->ctl_dev) == minor)

WARNING:INDENTED_LABEL: labels should not be indented
#2136: FILE: drivers/md/dm-userspace-chardev.c:780:
+	dupe:

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev->transport_private)...) over kmalloc(sizeof(struct chardev_transport)...)
#2150: FILE: drivers/md/dm-userspace-chardev.c:794:
+	dev->transport_private = kmalloc(sizeof(struct chardev_transport),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2169: FILE: drivers/md/dm-userspace-chardev.c:813:
+		DMERR("Failed to register control device %d:%d",
+		       MAJOR(t->ctl_dev), MINOR(t->ctl_dev));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2193: FILE: drivers/md/dm-userspace-chardev.c:837:
+	if (r) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2196: FILE: drivers/md/dm-userspace-chardev.c:840:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2206: FILE: drivers/md/dm-userspace-chardev.c:850:
+void write_chardev_transport_info(struct dmu_device *dev,
+			char *buf, unsigned int maxlen)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2220: FILE: drivers/md/Kconfig:240:
+config DM_USERSPACE
+       tristate "Userspace target (EXPERIMENTAL)"
+       depends on BLK_DEV_DM && EXPERIMENTAL
+       ---help---
+	 A target that provides a userspace interface to device-mapper
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2252: FILE: include/linux/dm-userspace.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2266: FILE: include/linux/dm-userspace.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2267: FILE: include/linux/dm-userspace.h:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2305: FILE: include/linux/dm-userspace.h:54:
+static int dmu_get_flag(uint32_t *flags, uint32_t flag)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2310: FILE: include/linux/dm-userspace.h:59:
+static void dmu_set_flag(uint32_t *flags, uint32_t flag)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2315: FILE: include/linux/dm-userspace.h:64:
+static void dmu_clr_flag(uint32_t *flags, uint32_t flag)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2320: FILE: include/linux/dm-userspace.h:69:
+static void dmu_cpy_flag(uint32_t *flags, uint32_t src, uint32_t flag)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2330: FILE: include/linux/dm-userspace.h:79:
+	uint32_t msg_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2331: FILE: include/linux/dm-userspace.h:80:
+	uint32_t payload_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2332: FILE: include/linux/dm-userspace.h:81:
+	uint32_t id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2337: FILE: include/linux/dm-userspace.h:86:
+	uint32_t userspace_ver;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2338: FILE: include/linux/dm-userspace.h:87:
+	uint32_t kernel_ver;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2343: FILE: include/linux/dm-userspace.h:92:
+	uint32_t id_of_op;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2344: FILE: include/linux/dm-userspace.h:93:
+	uint32_t status;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2349: FILE: include/linux/dm-userspace.h:98:
+	uint64_t org_block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2351: FILE: include/linux/dm-userspace.h:100:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2358: FILE: include/linux/dm-userspace.h:107:
+	uint64_t org_block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2359: FILE: include/linux/dm-userspace.h:108:
+	uint64_t new_block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#2360: FILE: include/linux/dm-userspace.h:109:
+	int64_t offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2362: FILE: include/linux/dm-userspace.h:111:
+	uint32_t id_of_req;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2363: FILE: include/linux/dm-userspace.h:112:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2365: FILE: include/linux/dm-userspace.h:114:
+	uint32_t src_maj;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2366: FILE: include/linux/dm-userspace.h:115:
+	uint32_t src_min;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2368: FILE: include/linux/dm-userspace.h:117:
+	uint32_t dst_maj;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2369: FILE: include/linux/dm-userspace.h:118:
+	uint32_t dst_min;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2374: FILE: include/linux/dm-userspace.h:123:
+	uint64_t org_block;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000054130.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 68 warnings, 92 checks, 2327 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000054130.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
