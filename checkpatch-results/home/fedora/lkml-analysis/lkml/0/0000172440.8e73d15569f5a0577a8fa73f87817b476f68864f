WARNING:TYPO_SPELLING: 'seemes' may be misspelled - perhaps 'seems'?
#171: FILE: arch/i386/kernel/cpu/mtrr/main.c:704:
+	/* The CPUs haven't MTRR and seemes not support SMP. They have specific
 	                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: arch/i386/kernel/cpu/mtrr/main.c:710:
+		sysdev_driver_register(&cpu_sysdev_class,
+			&mtrr_sysdev_driver);

CHECK:CAMELCASE: Avoid CamelCase: <MTRRphysBase_MSR>
#223: FILE: arch/i386/kernel/cpu/mtrr/generic.c:348:
+		mtrr_wrmsr(MTRRphysBase_MSR(reg), vr->base_lo, vr->base_hi);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MTRRphysMask_MSR>
#224: FILE: arch/i386/kernel/cpu/mtrr/generic.c:349:
+		mtrr_wrmsr(MTRRphysMask_MSR(reg), vr->mask_lo, vr->mask_hi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/asm-i386/processor.h:700:
+extern int mtrr_ap_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/asm-i386/processor.h:701:
+extern int mtrr_bp_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/asm-x86_64/proto.h:19:
+extern int mtrr_ap_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/asm-x86_64/proto.h:20:
+extern int mtrr_bp_init(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#293: FILE: include/asm-x86_64/proto.h:23:
+#define mtrr_bp_init();

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#293: FILE: include/asm-x86_64/proto.h:23:
+#define mtrr_bp_init();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000172440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 2 warnings, 7 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000172440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
