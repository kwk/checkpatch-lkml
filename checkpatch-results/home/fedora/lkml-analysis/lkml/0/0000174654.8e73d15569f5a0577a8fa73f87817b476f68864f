ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#57: FILE: scripts/basic/fixdep.c:245:
+		use_config((char*)p+7, q-p-7);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#57: FILE: scripts/basic/fixdep.c:245:
+		use_config((char*)p+7, q-p-7);
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#57: FILE: scripts/basic/fixdep.c:245:
+		use_config((char*)p+7, q-p-7);
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#57: FILE: scripts/basic/fixdep.c:245:
+		use_config((char*)p+7, q-p-7);
 		                          ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#66: FILE: scripts/basic/fixdep.c:299:
+	p = (signed char*)strchr((char*)m, ':');

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#66: FILE: scripts/basic/fixdep.c:299:
+	p = (signed char*)strchr((char*)m, ':');

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#80: FILE: scripts/basic/docproc.c:184:
+			if (((p = (signed char*)strstr(line, "EXPORT_SYMBOL_GPL")) != 0) ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#80: FILE: scripts/basic/docproc.c:184:
+			if (((p = (signed char*)strstr(line, "EXPORT_SYMBOL_GPL")) != 0) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: scripts/basic/docproc.c:185:
+                            ((p = (signed char*)strstr(line, "EXPORT_SYMBOL")) != 0)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: scripts/basic/docproc.c:185:
+			if (((p = (signed char*)strstr(line, "EXPORT_SYMBOL_GPL")) != 0) ||
+                            ((p = (signed char*)strstr(line, "EXPORT_SYMBOL")) != 0)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: scripts/basic/docproc.c:185:
+                            ((p = (signed char*)strstr(line, "EXPORT_SYMBOL")) != 0)) {$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#81: FILE: scripts/basic/docproc.c:185:
+                            ((p = (signed char*)strstr(line, "EXPORT_SYMBOL")) != 0)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#90: FILE: scripts/basic/docproc.c:202:
+				add_new_symbol(sym, (char*)p);

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: scripts/basic/docproc.c:274:
+                        vec[idx++] = (char*)&line[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: scripts/basic/docproc.c:274:
+                        vec[idx++] = (char*)&line[i];$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#99: FILE: scripts/basic/docproc.c:274:
+                        vec[idx++] = (char*)&line[i];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#108: FILE: scripts/basic/docproc.c:296:
+			s = (signed char*)(line + 2);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#121: FILE: scripts/basic/split-include.c:113:
+	if ((str_config = (signed char*)strstr(line, "CONFIG_")) == NULL)
 	    continue;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#121: FILE: scripts/basic/split-include.c:113:
+	if ((str_config = (signed char*)strstr(line, "CONFIG_")) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#121: FILE: scripts/basic/split-include.c:113:
+	if ((str_config = (signed char*)strstr(line, "CONFIG_")) == NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#134: FILE: scripts/kconfig/mconf.c:337:
+		*argptr = (char*)bufptr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#137: FILE: scripts/kconfig/mconf.c:339:
+	res = vsprintf((char*)bufptr, fmt, ap);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#146: FILE: scripts/kconfig/mconf.c:357:
+	*argptr++ = (char*)bufptr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#149: FILE: scripts/kconfig/mconf.c:359:
+	res = vsprintf((char*)bufptr, fmt, ap);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#158: FILE: scripts/kconfig/mconf.c:550:
+	sym_arr = sym_re_search((char*)input_buf);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#167: FILE: scripts/kconfig/mconf.c:761:
+		strcpy(active_entry, (char*)input_buf);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#172: FILE: scripts/kconfig/mconf.c:765:
+		if (sscanf((char*)(input_buf + 1), "%p", &submenu) == 1)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#181: FILE: scripts/kconfig/mconf.c:915:
+			if (sscanf((char*)input_buf, "%p", &child) != 1)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#187: FILE: scripts/kconfig/mconf.c:920:
+			if (sscanf((char*)input_buf, "%p", &child) == 1) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#196: FILE: scripts/kconfig/mconf.c:961:
+			if (sym_set_string_value(menu->sym, (char*)input_buf))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#205: FILE: scripts/kconfig/mconf.c:990:
+			if (!conf_read((char*)input_buf))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#214: FILE: scripts/kconfig/mconf.c:1019:
+			if (!conf_write((char*)input_buf))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#228: FILE: scripts/kconfig/confdata.c:39:
+	while ((src = (const signed char*)strchr((const char*)in, '$'))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#228: FILE: scripts/kconfig/confdata.c:39:
+	while ((src = (const signed char*)strchr((const char*)in, '$'))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#229: FILE: scripts/kconfig/confdata.c:40:
+		strncat(res_value, (const char*)in, src - in);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#238: FILE: scripts/kconfig/confdata.c:51:
+	strcat(res_value, (const char*)in);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#247: FILE: scripts/kconfig/confdata.c:62:
+	name = conf_expand_value((const signed char*)conf_defname);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#256: FILE: scripts/kconfig/confdata.c:88:
+			name = conf_expand_value((const signed char*)name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#269: FILE: scripts/kconfig/conf.c:46:
+	l = strlen((char*)p);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#278: FILE: scripts/kconfig/conf.c:94:
+		fgets((char*)line, 128, stdin);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#288: FILE: scripts/kconfig/conf.c:187:
+			line[strlen((char*)line)-1] = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#288: FILE: scripts/kconfig/conf.c:187:
+			line[strlen((char*)line)-1] = 0;
 			                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#289: FILE: scripts/kconfig/conf.c:188:
+			def = (char*)line;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#298: FILE: scripts/kconfig/conf.c:236:
+			if (!line[1] || !strcmp((char*)&line[1], "o"))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#307: FILE: scripts/kconfig/conf.c:248:
+			if (!line[1] || !strcmp((char*)&line[1], "es"))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#316: FILE: scripts/kconfig/conf.c:350:
+			fgets((char*)line, 128, stdin);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#325: FILE: scripts/kconfig/conf.c:360:
+				cnt = atoi((char*)line);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#334: FILE: scripts/kconfig/conf.c:384:
+		if (line[strlen((char*)line) - 1] == '?') {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 3 warnings, 5 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
