WARNING:TYPO_SPELLING: 'upcomming' may be misspelled - perhaps 'upcoming'?
#48: 
you. Note: the upcomming release of hdparm should contain the
               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: hdparm.8:377:
+.I -X sdma1 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: hdparm.c:610:
+    int val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: hdparm.c:611:
+    char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: hdparm.c:615:
+    { 8,    "pio0" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: hdparm.c:616:
+    { 9,    "pio1" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: hdparm.c:617:
+    { 10,   "pio2" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: hdparm.c:618:
+    { 11,   "pio3" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: hdparm.c:619:
+    { 12,   "pio4" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: hdparm.c:620:
+    { 13,   "pio5" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: hdparm.c:621:
+    { 14,   "pio6" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: hdparm.c:622:
+    { 15,   "pio7" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: hdparm.c:623:
+    { 16,   "sdma0" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: hdparm.c:624:
+    { 17,   "sdma1" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: hdparm.c:625:
+    { 18,   "sdma2" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: hdparm.c:626:
+    { 19,   "sdma3" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: hdparm.c:627:
+    { 20,   "sdma4" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: hdparm.c:628:
+    { 21,   "sdma5" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: hdparm.c:629:
+    { 22,   "sdma6" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: hdparm.c:630:
+    { 23,   "sdma7" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: hdparm.c:631:
+    { 32,   "mdma0" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: hdparm.c:632:
+    { 33,   "mdma1" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: hdparm.c:633:
+    { 34,   "mdma2" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: hdparm.c:634:
+    { 35,   "mdma3" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: hdparm.c:635:
+    { 36,   "mdma4" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: hdparm.c:636:
+    { 37,   "mdma5" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: hdparm.c:637:
+    { 38,   "mdma6" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: hdparm.c:638:
+    { 39,   "mdma7" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: hdparm.c:639:
+    { 64,   "udma0" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: hdparm.c:640:
+    { 65,   "udma1" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: hdparm.c:641:
+    { 66,   "udma2" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: hdparm.c:642:
+    { 67,   "udma3" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: hdparm.c:643:
+    { 68,   "udma4" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: hdparm.c:644:
+    { 69,   "udma5" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: hdparm.c:645:
+    { 70,   "udma6" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: hdparm.c:646:
+    { 71,   "udma7" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: hdparm.c:647:
+    { 0, NULL }$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: hdparm.c:650:
+static unsigned int translate_xfermode(char * name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: hdparm.c:652:
+    struct xfermode_entry *tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: hdparm.c:653:
+    char *endptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: hdparm.c:654:
+    int val = -1;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#140: FILE: hdparm.c:656:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: hdparm.c:657:
+    for (tmp = xfermode_table; tmp->name; ++tmp) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#142: FILE: hdparm.c:658:
+	if (!strcmp(name, tmp->name))
+	    return tmp->val;

WARNING:TABSTOP: Statements should start on a tabstop
#143: FILE: hdparm.c:659:
+	    return tmp->val;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: hdparm.c:660:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: hdparm.c:662:
+    val = strtol(name, &endptr, 10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: hdparm.c:663:
+    if (*endptr == '\0')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: hdparm.c:666:
+    return -1;$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#160: FILE: hdparm.c:1471:
+#define GET_STRING(flag, num) tmpstr = name; \
+				tmpstr[0] = '\0'; \
+				if (!*p && argc && isalnum(**argv)) \
+					p = *argv++, --argc; \
+				while (isalnum(*p) && (tmpstr - name < 31)) { \
+					tmpstr[0] = *p++; \
+					tmpstr[1] = '\0'; \
+					++tmpstr; \
+				} \
+				num = translate_xfermode(name); \
+				if (num == -1) \
+					flag = 0; \
+				else \
+					flag = 1;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flag' - possible side-effects?
#160: FILE: hdparm.c:1471:
+#define GET_STRING(flag, num) tmpstr = name; \
+				tmpstr[0] = '\0'; \
+				if (!*p && argc && isalnum(**argv)) \
+					p = *argv++, --argc; \
+				while (isalnum(*p) && (tmpstr - name < 31)) { \
+					tmpstr[0] = *p++; \
+					tmpstr[1] = '\0'; \
+					++tmpstr; \
+				} \
+				num = translate_xfermode(name); \
+				if (num == -1) \
+					flag = 0; \
+				else \
+					flag = 1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'num' - possible side-effects?
#160: FILE: hdparm.c:1471:
+#define GET_STRING(flag, num) tmpstr = name; \
+				tmpstr[0] = '\0'; \
+				if (!*p && argc && isalnum(**argv)) \
+					p = *argv++, --argc; \
+				while (isalnum(*p) && (tmpstr - name < 31)) { \
+					tmpstr[0] = *p++; \
+					tmpstr[1] = '\0'; \
+					++tmpstr; \
+				} \
+				num = translate_xfermode(name); \
+				if (num == -1) \
+					flag = 0; \
+				else \
+					flag = 1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#160: FILE: hdparm.c:1471:
+#define GET_STRING(flag, num) tmpstr = name; \
+				tmpstr[0] = '\0'; \
+				if (!*p && argc && isalnum(**argv)) \
+					p = *argv++, --argc; \
+				while (isalnum(*p) && (tmpstr - name < 31)) { \
+					tmpstr[0] = *p++; \
+					tmpstr[1] = '\0'; \
+					++tmpstr; \
+				} \
+				num = translate_xfermode(name); \
+				if (num == -1) \
+					flag = 0; \
+				else \
+					flag = 1;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: hdparm.c:1571:
+						GET_STRING(set_piomode,piomode);
 						                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#197: FILE: hdparm.c:1631:
+						GET_STRING(set_xfermode,xfermode);
 						                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 47 warnings, 3 checks, 128 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
