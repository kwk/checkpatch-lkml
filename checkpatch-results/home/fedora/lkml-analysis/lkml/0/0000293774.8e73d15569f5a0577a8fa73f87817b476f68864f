WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#36: 
immediatly, or can I? The IPI flood and huge pagetable walk with total
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/objrmap.h:1:
+#ifndef _LINUX_OBJRMAP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BRACES: Unbalanced braces around else statement
#103: FILE: mm/vmscan.c:322:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#156: FILE: mm/memory.c:330:
+						printk("Badness in %s at %s:%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#157: FILE: mm/memory.c:331:
+						       __FUNCTION__, __FILE__, __LINE__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: mm/memory.c:1433:
+		printk("Badness in %s at %s:%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#226: FILE: mm/memory.c:1434:
+		       __FUNCTION__, __FILE__, __LINE__);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: mm/objrmap.c:367:
+unmap_pte_page(struct page * page, struct vm_area_struct * vma,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: mm/objrmap.c:367:
+unmap_pte_page(struct page * page, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: mm/objrmap.c:368:
+	       unsigned long address, pte_t * pte)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: mm/objrmap.c:384:
+		BUG_ON(!PageAnon(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: mm/objrmap.c:388:
+		BUG_ON(PageAnon(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: mm/objrmap.c:414:
+try_to_unmap_nonlinear_pte(struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: mm/objrmap.c:415:
+			   pmd_t * pmd, unsigned long address, unsigned long size)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#377: FILE: mm/objrmap.c:432:
+	for (offset=0; offset < size; ptep++, offset += PAGE_SIZE) {
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#379: FILE: mm/objrmap.c:434:
+		pte_t pte = *ptep;
+		if (pte_none(pte))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: mm/objrmap.c:438:
+			struct page * page;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: mm/objrmap.c:440:
+			BUG_ON(!pfn_valid(pfn));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#399: FILE: mm/objrmap.c:454:
+	pte_unmap(ptep-1);
 	              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: mm/objrmap.c:458:
+try_to_unmap_nonlinear_pmd(struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: mm/objrmap.c:459:
+			   pgd_t * dir, unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#406: FILE: mm/objrmap.c:461:
+	pmd_t * pmd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: mm/objrmap.c:475:
+^I^Iaddress = (address + PMD_SIZE) & PMD_MASK; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: mm/objrmap.c:483:
+	pgd_t * dir;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: mm/objrmap.c:510:
+	BUG_ON(vma->vm_flags & VM_RESERVED);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293774.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 11 warnings, 2 checks, 409 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293774.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
