WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#166: FILE: Documentation/accounting/getdelays.c:1:
+/* getdelays.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#199: FILE: Documentation/accounting/getdelays.c:34:
+#define NLA_DATA(na)		((void *)((char*)(na) + NLA_HDRLEN))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#200: FILE: Documentation/accounting/getdelays.c:35:
+#define NLA_PAYLOAD(len)	(len - NLA_HDRLEN)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#203: FILE: Documentation/accounting/getdelays.c:38:
+int done = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: Documentation/accounting/getdelays.c:45:
+    socklen_t addr_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: Documentation/accounting/getdelays.c:46:
+    int fd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: Documentation/accounting/getdelays.c:47:
+    struct sockaddr_nl local;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: Documentation/accounting/getdelays.c:49:
+    fd = socket(AF_NETLINK, SOCK_RAW, protocol);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: Documentation/accounting/getdelays.c:50:
+    if (fd < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: Documentation/accounting/getdelays.c:53:
+    memset(&local, 0, sizeof(local));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: Documentation/accounting/getdelays.c:54:
+    local.nl_family = AF_NETLINK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: Documentation/accounting/getdelays.c:55:
+    local.nl_groups = groups;$

CHECK:SPACING: No space is necessary after a cast
#222: FILE: Documentation/accounting/getdelays.c:57:
+    if (bind(fd, (struct sockaddr *) &local, sizeof(local)) < 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: Documentation/accounting/getdelays.c:57:
+    if (bind(fd, (struct sockaddr *) &local, sizeof(local)) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: Documentation/accounting/getdelays.c:60:
+    return fd;$

WARNING:INDENTED_LABEL: labels should not be indented
#226: FILE: Documentation/accounting/getdelays.c:61:
+  error:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: Documentation/accounting/getdelays.c:62:
+    close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: Documentation/accounting/getdelays.c:63:
+    return -1;$

CHECK:CAMELCASE: Avoid CamelCase: <bufLen>
#231: FILE: Documentation/accounting/getdelays.c:66:
+int sendto_fd(int s, const char *buf, int bufLen)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: Documentation/accounting/getdelays.c:68:
+    struct sockaddr_nl nladdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: Documentation/accounting/getdelays.c:69:
+    int r;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: Documentation/accounting/getdelays.c:71:
+    memset(&nladdr, 0, sizeof(nladdr));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: Documentation/accounting/getdelays.c:72:
+    nladdr.nl_family = AF_NETLINK;$

CHECK:SPACING: No space is necessary after a cast
#239: FILE: Documentation/accounting/getdelays.c:74:
+    while ((r = sendto(s, buf, bufLen, 0, (struct sockaddr *) &nladdr,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: Documentation/accounting/getdelays.c:74:
+    while ((r = sendto(s, buf, bufLen, 0, (struct sockaddr *) &nladdr,$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#241: FILE: Documentation/accounting/getdelays.c:76:
+	if (r > 0) {
+	    buf += r;

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: Documentation/accounting/getdelays.c:76:
+	if (r > 0) {
[...]
+	} else if (errno != EAGAIN)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#244: FILE: Documentation/accounting/getdelays.c:79:
+	} else if (errno != EAGAIN)
+	    return -1;

WARNING:TABSTOP: Statements should start on a tabstop
#245: FILE: Documentation/accounting/getdelays.c:80:
+	    return -1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: Documentation/accounting/getdelays.c:81:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: Documentation/accounting/getdelays.c:82:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: Documentation/accounting/getdelays.c:91:
+    struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: Documentation/accounting/getdelays.c:95:
+    } family_req;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: Documentation/accounting/getdelays.c:96:
+    struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: Documentation/accounting/getdelays.c:100:
+    } ans;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: Documentation/accounting/getdelays.c:102:
+    int id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: Documentation/accounting/getdelays.c:103:
+    struct nlattr *na;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: Documentation/accounting/getdelays.c:104:
+    int rep_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: Documentation/accounting/getdelays.c:107:
+    family_req.n.nlmsg_type = GENL_ID_CTRL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: Documentation/accounting/getdelays.c:108:
+    family_req.n.nlmsg_flags = NLM_F_REQUEST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: Documentation/accounting/getdelays.c:109:
+    family_req.n.nlmsg_seq = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: Documentation/accounting/getdelays.c:110:
+    family_req.n.nlmsg_pid = getpid();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: Documentation/accounting/getdelays.c:111:
+    family_req.n.nlmsg_len = NLMSG_LENGTH(GENL_HDRLEN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: Documentation/accounting/getdelays.c:112:
+    family_req.g.cmd = CTRL_CMD_GETFAMILY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: Documentation/accounting/getdelays.c:113:
+    family_req.g.version = 0x1;$

CHECK:SPACING: No space is necessary after a cast
#279: FILE: Documentation/accounting/getdelays.c:114:
+    na = (struct nlattr *) GENLMSG_DATA(&family_req);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: Documentation/accounting/getdelays.c:114:
+    na = (struct nlattr *) GENLMSG_DATA(&family_req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: Documentation/accounting/getdelays.c:115:
+    na->nla_type = CTRL_ATTR_FAMILY_NAME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: Documentation/accounting/getdelays.c:116:
+    na->nla_len = strlen(TASKSTATS_GENL_NAME) + 1 + NLA_HDRLEN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: Documentation/accounting/getdelays.c:117:
+    strcpy(NLA_DATA(na), TASKSTATS_GENL_NAME);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: Documentation/accounting/getdelays.c:118:
+    family_req.n.nlmsg_len += NLMSG_ALIGN(na->nla_len);$

CHECK:SPACING: No space is necessary after a cast
#285: FILE: Documentation/accounting/getdelays.c:120:
+    if (sendto_fd(sd, (char *) &family_req, family_req.n.nlmsg_len) < 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: Documentation/accounting/getdelays.c:120:
+    if (sendto_fd(sd, (char *) &family_req, family_req.n.nlmsg_len) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: Documentation/accounting/getdelays.c:123:
+    rep_len = recv(sd, &ans, sizeof(ans), 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: Documentation/accounting/getdelays.c:125:
+    if (rep_len < 0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: Documentation/accounting/getdelays.c:128:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: Documentation/accounting/getdelays.c:130:
+    if (!NLMSG_OK((&ans.n), rep_len))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&ans.n'
#295: FILE: Documentation/accounting/getdelays.c:130:
+    if (!NLMSG_OK((&ans.n), rep_len))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: Documentation/accounting/getdelays.c:133:
+    if (ans.n.nlmsg_type == NLMSG_ERROR) {^I/* error */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: Documentation/accounting/getdelays.c:136:
+    }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#303: FILE: Documentation/accounting/getdelays.c:138:
+
+

CHECK:SPACING: No space is necessary after a cast
#304: FILE: Documentation/accounting/getdelays.c:139:
+    na = (struct nlattr *) GENLMSG_DATA(&ans);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: Documentation/accounting/getdelays.c:139:
+    na = (struct nlattr *) GENLMSG_DATA(&ans);$

CHECK:SPACING: No space is necessary after a cast
#305: FILE: Documentation/accounting/getdelays.c:140:
+    na = (struct nlattr *) ((char *) na + NLA_ALIGN(na->nla_len));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: Documentation/accounting/getdelays.c:140:
+    na = (struct nlattr *) ((char *) na + NLA_ALIGN(na->nla_len));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: Documentation/accounting/getdelays.c:141:
+    if (na->nla_type == CTRL_ATTR_FAMILY_ID) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#306: FILE: Documentation/accounting/getdelays.c:141:
+    if (na->nla_type == CTRL_ATTR_FAMILY_ID) {
+	id = *(__u16 *) NLA_DATA(na);
+    }

CHECK:SPACING: No space is necessary after a cast
#307: FILE: Documentation/accounting/getdelays.c:142:
+	id = *(__u16 *) NLA_DATA(na);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: Documentation/accounting/getdelays.c:143:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: Documentation/accounting/getdelays.c:144:
+    return id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: Documentation/accounting/getdelays.c:149:
+    printf("\n\nCPU   %15s%15s%15s%15s\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: Documentation/accounting/getdelays.c:165:
+    done = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: Documentation/accounting/getdelays.c:170:
+    int rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: Documentation/accounting/getdelays.c:171:
+    int sk_nl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: Documentation/accounting/getdelays.c:172:
+    struct nlmsghdr *nlh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: Documentation/accounting/getdelays.c:173:
+    struct genlmsghdr *genlhdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: Documentation/accounting/getdelays.c:174:
+    char *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: Documentation/accounting/getdelays.c:175:
+    struct taskstats_cmd_param *param;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: Documentation/accounting/getdelays.c:176:
+    __u16 id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: Documentation/accounting/getdelays.c:177:
+    struct nlattr *na;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: Documentation/accounting/getdelays.c:180:
+    struct sockaddr_nl kern_nla, from_nla;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: Documentation/accounting/getdelays.c:181:
+    socklen_t from_nla_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: Documentation/accounting/getdelays.c:182:
+    int recv_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: Documentation/accounting/getdelays.c:183:
+    struct taskstats_reply *reply;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: Documentation/accounting/getdelays.c:185:
+    struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: Documentation/accounting/getdelays.c:189:
+    } req;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: Documentation/accounting/getdelays.c:191:
+    struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: Documentation/accounting/getdelays.c:195:
+    } ans;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: Documentation/accounting/getdelays.c:197:
+    int nl_sd = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: Documentation/accounting/getdelays.c:198:
+    int rep_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: Documentation/accounting/getdelays.c:199:
+    int len = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: Documentation/accounting/getdelays.c:200:
+    int aggr_len, len2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: Documentation/accounting/getdelays.c:201:
+    struct sockaddr_nl nladdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: Documentation/accounting/getdelays.c:202:
+    pid_t tid = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: Documentation/accounting/getdelays.c:203:
+    pid_t rtid = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: Documentation/accounting/getdelays.c:204:
+    int cmd_type = TASKSTATS_TYPE_TGID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: Documentation/accounting/getdelays.c:205:
+    int c, status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: Documentation/accounting/getdelays.c:206:
+    int forking = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: Documentation/accounting/getdelays.c:207:
+    struct sigaction act = {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: Documentation/accounting/getdelays.c:210:
+    };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: Documentation/accounting/getdelays.c:211:
+    struct sigaction tact ;$

WARNING:SPACING: space prohibited before semicolon
#376: FILE: Documentation/accounting/getdelays.c:211:
+    struct sigaction tact ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: Documentation/accounting/getdelays.c:213:
+    if (argc < 3) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: Documentation/accounting/getdelays.c:216:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: Documentation/accounting/getdelays.c:218:
+    tact.sa_handler = sigchld;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: Documentation/accounting/getdelays.c:219:
+    sigemptyset(&tact.sa_mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: Documentation/accounting/getdelays.c:220:
+    if (sigaction(SIGCHLD, &tact, NULL) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: Documentation/accounting/getdelays.c:223:
+    while (1) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#389: FILE: Documentation/accounting/getdelays.c:224:
+    while (1) {
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#391: FILE: Documentation/accounting/getdelays.c:226:
+	if (c < 0)
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#392: FILE: Documentation/accounting/getdelays.c:227:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#397: FILE: Documentation/accounting/getdelays.c:232:
+	    if (!tid)

WARNING:TABSTOP: Statements should start on a tabstop
#400: FILE: Documentation/accounting/getdelays.c:235:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#403: FILE: Documentation/accounting/getdelays.c:238:
+	    if (!tid)

WARNING:TABSTOP: Statements should start on a tabstop
#406: FILE: Documentation/accounting/getdelays.c:241:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#410: FILE: Documentation/accounting/getdelays.c:245:
+	    if (tid < 0)

WARNING:TABSTOP: Statements should start on a tabstop
#413: FILE: Documentation/accounting/getdelays.c:248:
+	    if (tid == 0) {	/* child process */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#414: FILE: Documentation/accounting/getdelays.c:249:
+		if (execvp(argv[optind - 1], &argv[optind - 1]) < 0) {
+		    exit(-1);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#414: FILE: Documentation/accounting/getdelays.c:249:
+		if (execvp(argv[optind - 1], &argv[optind - 1]) < 0) {
+		    exit(-1);
+		}

WARNING:TABSTOP: Statements should start on a tabstop
#417: FILE: Documentation/accounting/getdelays.c:252:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#419: FILE: Documentation/accounting/getdelays.c:254:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#423: FILE: Documentation/accounting/getdelays.c:258:
+	    break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#425: FILE: Documentation/accounting/getdelays.c:260:
+	if (c == 'c')
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#426: FILE: Documentation/accounting/getdelays.c:261:
+	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: Documentation/accounting/getdelays.c:262:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: Documentation/accounting/getdelays.c:268:
+    if ((nl_sd =$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#433: FILE: Documentation/accounting/getdelays.c:268:
+    if ((nl_sd =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#437: FILE: Documentation/accounting/getdelays.c:272:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: Documentation/accounting/getdelays.c:273:
+    id = get_family_id(nl_sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: Documentation/accounting/getdelays.c:276:
+    req.n.nlmsg_len = NLMSG_LENGTH(GENL_HDRLEN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: Documentation/accounting/getdelays.c:277:
+    req.n.nlmsg_type = id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: Documentation/accounting/getdelays.c:278:
+    req.n.nlmsg_flags = NLM_F_REQUEST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: Documentation/accounting/getdelays.c:279:
+    req.n.nlmsg_seq = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: Documentation/accounting/getdelays.c:280:
+    req.n.nlmsg_pid = tid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: Documentation/accounting/getdelays.c:281:
+    req.g.cmd = TASKSTATS_CMD_GET;$

CHECK:SPACING: No space is necessary after a cast
#447: FILE: Documentation/accounting/getdelays.c:282:
+    na = (struct nlattr *) GENLMSG_DATA(&req);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: Documentation/accounting/getdelays.c:282:
+    na = (struct nlattr *) GENLMSG_DATA(&req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: Documentation/accounting/getdelays.c:283:
+    na->nla_type = cmd_type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: Documentation/accounting/getdelays.c:284:
+    na->nla_len = sizeof(unsigned int) + NLA_HDRLEN;$

CHECK:SPACING: No space is necessary after a cast
#450: FILE: Documentation/accounting/getdelays.c:285:
+    *(__u32 *) NLA_DATA(na) = tid;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: Documentation/accounting/getdelays.c:285:
+    *(__u32 *) NLA_DATA(na) = tid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: Documentation/accounting/getdelays.c:286:
+    req.n.nlmsg_len += NLMSG_ALIGN(na->nla_len);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#453: FILE: Documentation/accounting/getdelays.c:288:
+
+

CHECK:SPACING: No space is necessary after a cast
#454: FILE: Documentation/accounting/getdelays.c:289:
+    if (!forking && sendto_fd(nl_sd, (char *) &req, req.n.nlmsg_len) < 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: Documentation/accounting/getdelays.c:289:
+    if (!forking && sendto_fd(nl_sd, (char *) &req, req.n.nlmsg_len) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: Documentation/accounting/getdelays.c:292:
+    act.sa_handler = SIG_IGN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: Documentation/accounting/getdelays.c:293:
+    sigemptyset(&act.sa_mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: Documentation/accounting/getdelays.c:294:
+    if (sigaction(SIGINT, &act, NULL) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: Documentation/accounting/getdelays.c:297:
+    do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#470: FILE: Documentation/accounting/getdelays.c:305:
+	if (pollres < 0 || done) {
+	    break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#470: FILE: Documentation/accounting/getdelays.c:305:
+	if (pollres < 0 || done) {
+	    break;
+	}

WARNING:TABSTOP: Statements should start on a tabstop
#471: FILE: Documentation/accounting/getdelays.c:306:
+	    break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#478: FILE: Documentation/accounting/getdelays.c:313:
+	if (ans.n.nlmsg_type == NLMSG_ERROR) {	/* error */
+	    printf("error received NACK - leaving\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#483: FILE: Documentation/accounting/getdelays.c:318:
+	if (rep_len < 0) {
+	    err(1, "error receiving reply message via Netlink\n");

WARNING:TABSTOP: Statements should start on a tabstop
#485: FILE: Documentation/accounting/getdelays.c:320:
+	    break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#489: FILE: Documentation/accounting/getdelays.c:324:
+	if (!NLMSG_OK((&ans.n), rep_len))
+	    err(1, "invalid reply message received via Netlink\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&ans.n'
#489: FILE: Documentation/accounting/getdelays.c:324:
+	if (!NLMSG_OK((&ans.n), rep_len))

CHECK:SPACING: No space is necessary after a cast
#494: FILE: Documentation/accounting/getdelays.c:329:
+	na = (struct nlattr *) GENLMSG_DATA(&ans);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#497: FILE: Documentation/accounting/getdelays.c:332:
+	while (len < rep_len) {
+	    len += NLA_ALIGN(na->nla_len);

WARNING:TABSTOP: Statements should start on a tabstop
#499: FILE: Documentation/accounting/getdelays.c:334:
+	    switch (na->nla_type) {

WARNING:TABSTOP: Statements should start on a tabstop
#500: FILE: Documentation/accounting/getdelays.c:335:
+	    case TASKSTATS_TYPE_AGGR_PID:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#501: FILE: Documentation/accounting/getdelays.c:336:
+		/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TABSTOP: Statements should start on a tabstop
#502: FILE: Documentation/accounting/getdelays.c:337:
+	    case TASKSTATS_TYPE_AGGR_TGID:

CHECK:SPACING: No space is necessary after a cast
#506: FILE: Documentation/accounting/getdelays.c:341:
+		na = (struct nlattr *) NLA_DATA(na);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#508: FILE: Documentation/accounting/getdelays.c:343:
+		while (len2 < aggr_len) {
+		    switch (na->nla_type) {

WARNING:TABSTOP: Statements should start on a tabstop
#509: FILE: Documentation/accounting/getdelays.c:344:
+		    switch (na->nla_type) {

WARNING:TABSTOP: Statements should start on a tabstop
#510: FILE: Documentation/accounting/getdelays.c:345:
+		    case TASKSTATS_TYPE_PID:

CHECK:SPACING: No space is necessary after a cast
#511: FILE: Documentation/accounting/getdelays.c:346:
+			rtid = *(int *) NLA_DATA(na);

WARNING:TABSTOP: Statements should start on a tabstop
#513: FILE: Documentation/accounting/getdelays.c:348:
+		    case TASKSTATS_TYPE_TGID:

CHECK:SPACING: No space is necessary after a cast
#514: FILE: Documentation/accounting/getdelays.c:349:
+			rtid = *(int *) NLA_DATA(na);

WARNING:TABSTOP: Statements should start on a tabstop
#516: FILE: Documentation/accounting/getdelays.c:351:
+		    case TASKSTATS_TYPE_STATS:

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#517: FILE: Documentation/accounting/getdelays.c:352:
+			if (rtid == tid) {
+			    print_taskstats((struct taskstats *)

WARNING:TABSTOP: Statements should start on a tabstop
#523: FILE: Documentation/accounting/getdelays.c:358:
+		    }

CHECK:SPACING: No space is necessary after a cast
#525: FILE: Documentation/accounting/getdelays.c:360:
+		    na = (struct nlattr *) ((char *) na + len2);

WARNING:TABSTOP: Statements should start on a tabstop
#526: FILE: Documentation/accounting/getdelays.c:361:
+		    if (done)

WARNING:TABSTOP: Statements should start on a tabstop
#529: FILE: Documentation/accounting/getdelays.c:364:
+	    }

CHECK:SPACING: No space is necessary after a cast
#530: FILE: Documentation/accounting/getdelays.c:365:
+	    na = (struct nlattr *) (GENLMSG_DATA(&ans) + len);

WARNING:TABSTOP: Statements should start on a tabstop
#531: FILE: Documentation/accounting/getdelays.c:366:
+	    if (done)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#534: FILE: Documentation/accounting/getdelays.c:369:
+	if (done)
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#535: FILE: Documentation/accounting/getdelays.c:370:
+	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: Documentation/accounting/getdelays.c:371:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: Documentation/accounting/getdelays.c:372:
+    while (1);$

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#537: FILE: Documentation/accounting/getdelays.c:372:
+    }
+    while (1);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: Documentation/accounting/getdelays.c:374:
+    close(nl_sd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: Documentation/accounting/getdelays.c:375:
+    return 0;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083331.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 155 warnings, 26 checks, 499 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083331.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
