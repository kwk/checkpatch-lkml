WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#99: 
--- linux-2.6.7-staircase.orig/fs/proc/array.c	2004-06-25 02:24:28.106117207 +1000

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: include/linux/sysctl.h:136:
+	KERN_INTERACTIVE=66,	/* interactive tasks can have cpu bursts */
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#185: FILE: include/linux/sysctl.h:137:
+	KERN_COMPUTE=67,	/* adjust timeslices for a compute server */
 	            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: init/main.c:323:
+	printk("Generic cache decay timeout: %ld msecs.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: init/main.c:324:
+	printk("Generic cache decay timeout: %ld msecs.\n",
+		(cache_decay_ticks * 1000 / HZ));

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#354: FILE: kernel/sched.c:71:
+int compute = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: kernel/sched.c:72:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#403: FILE: kernel/sched.c:112:
+	unsigned long bitmap[BITS_TO_LONGS(MAX_PRIO+1)];
 	                                           ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#424: FILE: kernel/sched.c:195:
+	if (!compute || rq->cache_ticks >= cache_decay_ticks ||
[...]
+			rq->curr->flags |= PF_PREEMPTED;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: kernel/sched.c:196:
+	if (!compute || rq->cache_ticks >= cache_decay_ticks ||
+		rt_task(p) || !p->mm || rq->curr == rq->idle) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#463: FILE: kernel/sched.c:221:
+	if (rq->curr->flags & PF_PREEMPTED) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#466: FILE: kernel/sched.c:224:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: kernel/sched.c:262:
+	unsigned int task_user_prio;
+	if (rt_task(p))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: kernel/sched.c:274:
+	unsigned int best_burst;
+	best_burst = burst(p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#605: FILE: kernel/sched.c:289:
+	unsigned int slice = RR_INTERVAL;
+	if (!rt_task(p))

WARNING:LINE_SPACING: Missing a blank line after declarations
#637: FILE: kernel/sched.c:308:
+	unsigned int best_burst;
+	if (rt_task(p))

WARNING:LINE_SPACING: Missing a blank line after declarations
#663: FILE: kernel/sched.c:334:
+	unsigned long total_run = NS_TO_JIFFIES(p->totalrun) + run_time;
+	if ((!run_time && NS_TO_JIFFIES(p->runtime + sleep_time) <

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#663: FILE: kernel/sched.c:334:
+	if ((!run_time && NS_TO_JIFFIES(p->runtime + sleep_time) <
[...]
+			p->flags &= ~PF_FORKED;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: kernel/sched.c:1147:
+static inline $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: kernel/sched.c:1148:
+void pull_task(runqueue_t *src_rq, task_t *p, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: kernel/sched.c:1149:
+void pull_task(runqueue_t *src_rq, task_t *p, 
+		runqueue_t *this_rq, int this_cpu)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1031: FILE: kernel/sched.c:1219:
+^Iif (idx >= MAX_PRIO) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1179: FILE: kernel/sched.c:1840:
+		if (((smt_curr->slice * (100 - sd->per_cpu_gain) / 100) >
[...]
 				ret = 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1190: FILE: kernel/sched.c:1850:
+^I^Iif ((((p->slice * (100 - sd->per_cpu_gain) / 100) > $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1190: FILE: kernel/sched.c:1850:
+		if ((((p->slice * (100 - sd->per_cpu_gain) / 100) > 
[...]
 				resched_task(smt_curr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: kernel/sched.c:1851:
+^I^I^Islice(smt_curr) || rt_task(p)) && $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1310: FILE: kernel/sched.c:2225:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1331: FILE: kernel/sched.c:2340:
+	BUG_ON(task_queued(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1351: FILE: kernel/sched.c:2416:
+	if ((queued = task_queued(p)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1397: FILE: kernel/sched.c:2631:
+ ^Icurrent->slice = slice(current);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1397: FILE: kernel/sched.c:2631:
+ ^Icurrent->slice = slice(current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: kernel/sched.c:2631:
+ ^Icurrent->slice = slice(current);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1398: FILE: kernel/sched.c:2632:
+ ^Icurrent->time_slice = RR_INTERVAL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1398: FILE: kernel/sched.c:2632:
+ ^Icurrent->time_slice = RR_INTERVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1398: FILE: kernel/sched.c:2632:
+ ^Icurrent->time_slice = RR_INTERVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: kernel/sched.c:3551:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1486: FILE: kernel/sched.c:3566:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO+1)*sizeof(long));
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1486: FILE: kernel/sched.c:3566:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO+1)*sizeof(long));
 		                                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1504: FILE: kernel/sysctl.c:643:
+		.maxlen		= sizeof (int),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1512: FILE: kernel/sysctl.c:651:
+		.maxlen		= sizeof (int),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 18 warnings, 8 checks, 1336 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
