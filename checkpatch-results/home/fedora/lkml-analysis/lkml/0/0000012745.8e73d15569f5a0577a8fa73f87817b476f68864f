WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: fs/unionfs/inode.c:24:
+extern int unionfs_readlink(struct dentry *dentry, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#66: FILE: fs/unionfs/inode.c:24:
+extern int unionfs_readlink(struct dentry *dentry, char __user * buf,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#68: FILE: fs/unionfs/inode.c:26:
+extern void unionfs_put_link(struct dentry *dentry, struct nameidata *nd,
                                                                       ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#68: FILE: fs/unionfs/inode.c:26:
+extern void unionfs_put_link(struct dentry *dentry, struct nameidata *nd,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#72: FILE: fs/unionfs/inode.c:30:
+			  int mode, struct nameidata *nd)
 			                              ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#131: FILE: fs/unionfs/inode.c:89:
+			printk(KERN_WARNING "unionfs: %s:%d: notify_change "

WARNING:SPLIT_STRING: quoted string split across lines
#132: FILE: fs/unionfs/inode.c:90:
+			printk(KERN_WARNING "unionfs: %s:%d: notify_change "
+				"failed: %d, ignoring..\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#141: FILE: fs/unionfs/inode.c:99:
+		if (!(err = is_robranch_super(dentry->d_sb, bstart))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/unionfs/inode.c:108:
+			fsstack_copy_attr_times(parent,
+					new_hidden_dentry->d_parent->d_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: fs/unionfs/inode.c:110:
+			fsstack_copy_inode_size(parent,
+					new_hidden_dentry->d_parent->d_inode);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#191: FILE: fs/unionfs/inode.c:149:
+			 * pointing to a lone negative underlying dentry */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#206: FILE: fs/unionfs/inode.c:164:
+		if (!(err = is_robranch_super(dentry->d_sb, bindex)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/unionfs/inode.c:166:
+					 hidden_dentry, mode, nd);
 					                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: fs/unionfs/inode.c:178:
+				fsstack_copy_attr_times(parent,
+						hidden_parent_dentry->d_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: fs/unionfs/inode.c:180:
+				fsstack_copy_inode_size(parent,
+						hidden_parent_dentry->d_inode);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#240: FILE: fs/unionfs/inode.c:198:
+			      struct nameidata *nd)
 			                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#244: FILE: fs/unionfs/inode.c:202:
+	if (nd)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#245: FILE: fs/unionfs/inode.c:203:
+		memcpy(&lowernd, nd, sizeof(struct nameidata));
 		                 ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#268: FILE: fs/unionfs/inode.c:226:
+	 * .wh.foo first. If present, delete it */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: fs/unionfs/inode.c:234:
+	whiteout_dentry = lookup_one_len(name, hidden_new_dentry->d_parent,
+				new_dentry->d_name.len + UNIONFS_WHLEN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: fs/unionfs/inode.c:249:
+			err = vfs_unlink(hidden_dir_dentry->d_inode,
+				       whiteout_dentry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: fs/unionfs/inode.c:272:
+	BUG_ON(dbstart(old_dentry) != dbstart(new_dentry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#316: FILE: fs/unionfs/inode.c:274:
+	if (!(err = is_robranch(old_dentry)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: fs/unionfs/inode.c:276:
+		err = vfs_link(hidden_old_dentry, hidden_dir_dentry->d_inode,
+			     hidden_new_dentry);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'old_dentry->d_parent->d_inode'
#329: FILE: fs/unionfs/inode.c:287:
+			    copyup_dentry(old_dentry->d_parent->
+					  d_inode, old_dentry,

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: fs/unionfs/inode.c:298:
+				err = vfs_link(hidden_old_dentry,
+					     hidden_dir_dentry->d_inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: fs/unionfs/inode.c:315:
+	fsstack_copy_attr_all(dir, hidden_new_dentry->d_parent->d_inode,
+					unionfs_get_nlinks);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#392: FILE: fs/unionfs/inode.c:350:
+	 * first. If present, delete it */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: fs/unionfs/inode.c:372:
+		if (!(err = is_robranch_super(dentry->d_sb, bstart)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: fs/unionfs/inode.c:374:
+			err = vfs_unlink(hidden_dir_dentry->d_inode,
+				       whiteout_dentry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#435: FILE: fs/unionfs/inode.c:393:
+	 * with possible recursive directory creation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#444: FILE: fs/unionfs/inode.c:402:
+			 * underlying dentry */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#450: FILE: fs/unionfs/inode.c:408:
+				printk(KERN_DEBUG "hidden dentry NULL (or error)"

WARNING:SPLIT_STRING: quoted string split across lines
#451: FILE: fs/unionfs/inode.c:409:
+				printk(KERN_DEBUG "hidden dentry NULL (or error)"
+					"for bindex = %d\n", bindex);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#458: FILE: fs/unionfs/inode.c:416:
+		if (!(err = is_robranch_super(dentry->d_sb, bindex))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: fs/unionfs/inode.c:432:
+				fsstack_copy_attr_times(dir,
+						hidden_dir_dentry->d_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: fs/unionfs/inode.c:434:
+				fsstack_copy_inode_size(dir,
+						hidden_dir_dentry->d_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: fs/unionfs/inode.c:474:
+	whiteout_dentry = lookup_one_len(name, hidden_dentry->d_parent,
+			   dentry->d_name.len + UNIONFS_WHLEN);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#529: FILE: fs/unionfs/inode.c:487:
+		if (!(err = is_robranch_super(dentry->d_sb, bstart))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#539: FILE: fs/unionfs/inode.c:497:
+		if (err) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#544: FILE: fs/unionfs/inode.c:502:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#559: FILE: fs/unionfs/inode.c:517:
+				printk(KERN_DEBUG "hidden dentry NULL for "

WARNING:SPLIT_STRING: quoted string split across lines
#560: FILE: fs/unionfs/inode.c:518:
+				printk(KERN_DEBUG "hidden dentry NULL for "
+					"bindex = %d\n", bindex);

WARNING:TYPO_SPELLING: 'suceed' may be misspelled - perhaps 'succeed'?
#576: FILE: fs/unionfs/inode.c:534:
+		/* did the mkdir suceed? */
 		                 ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: fs/unionfs/inode.c:549:
+			fsstack_copy_attr_times(parent,
+					hidden_parent_dentry->d_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: fs/unionfs/inode.c:551:
+			fsstack_copy_inode_size(parent,
+					hidden_parent_dentry->d_inode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#601: FILE: fs/unionfs/inode.c:559:
+			printk(KERN_ERR "mkdir: error creating "

WARNING:SPLIT_STRING: quoted string split across lines
#602: FILE: fs/unionfs/inode.c:560:
+			printk(KERN_ERR "mkdir: error creating "
+				".wh.__dir_opaque: %d\n", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: fs/unionfs/inode.c:601:
+	whiteout_dentry = lookup_one_len(name, hidden_dentry->d_parent,
+				dentry->d_name.len + UNIONFS_WHLEN);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#657: FILE: fs/unionfs/inode.c:615:
+		if (!(err = is_robranch_super(dentry->d_sb, bstart)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#664: FILE: fs/unionfs/inode.c:622:
+		if (err) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#669: FILE: fs/unionfs/inode.c:627:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#681: FILE: fs/unionfs/inode.c:639:
+				printk(KERN_DEBUG

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: fs/unionfs/inode.c:663:
+			fsstack_copy_attr_times(dir,
+					hidden_parent_dentry->d_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: fs/unionfs/inode.c:665:
+			fsstack_copy_inode_size(dir,
+					hidden_parent_dentry->d_inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: fs/unionfs/inode.c:684:
+int unionfs_readlink(struct dentry *dentry, char __user * buf, int bufsiz)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#750: FILE: fs/unionfs/inode.c:708:
+static void *unionfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#774: FILE: fs/unionfs/inode.c:732:
+	nd_set_link(nd, buf);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#781: FILE: fs/unionfs/inode.c:739:
+void unionfs_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)
                                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#783: FILE: fs/unionfs/inode.c:741:
+	kfree(nd_get_link(nd));
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#793: FILE: fs/unionfs/inode.c:751:
+static int inode_permission(struct inode *inode, int mask, struct nameidata *nd,
                                                                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#802: FILE: fs/unionfs/inode.c:760:
+			umode_t mode = inode->i_mode;
+			if (IS_RDONLY(inode) && (S_ISREG(mode) || S_ISDIR(mode)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#803: FILE: fs/unionfs/inode.c:761:
+			if (IS_RDONLY(inode) && (S_ISREG(mode) || S_ISDIR(mode)
+						 || S_ISLNK(mode)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#815: FILE: fs/unionfs/inode.c:773:
+	if (inode->i_op && inode->i_op->permission) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#816: FILE: fs/unionfs/inode.c:774:
+		retval = inode->i_op->permission(inode, submask, nd);
 		                                                 ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nd->mnt'
#817: FILE: fs/unionfs/inode.c:775:
+		if ((retval == -EACCES) && (submask & MAY_WRITE) &&
+		    (!strcmp("nfs", (inode)->i_sb->s_type->name)) &&
+		    (nd) && (nd->mnt) && (nd->mnt->mnt_sb) &&
+		    (branchperms(nd->mnt->mnt_sb, bindex) & MAY_NFSRO)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nd->mnt->mnt_sb'
#817: FILE: fs/unionfs/inode.c:775:
+		if ((retval == -EACCES) && (submask & MAY_WRITE) &&
+		    (!strcmp("nfs", (inode)->i_sb->s_type->name)) &&
+		    (nd) && (nd->mnt) && (nd->mnt->mnt_sb) &&
+		    (branchperms(nd->mnt->mnt_sb, bindex) & MAY_NFSRO)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#819: FILE: fs/unionfs/inode.c:777:
+		    (nd) && (nd->mnt) && (nd->mnt->mnt_sb) &&
 		     ^^

CHECK:BRACES: Unbalanced braces around else statement
#823: FILE: fs/unionfs/inode.c:781:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#829: FILE: fs/unionfs/inode.c:787:
+	retval = security_inode_permission(inode, mask, nd);
 	                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#834: FILE: fs/unionfs/inode.c:792:
+			      struct nameidata *nd)
 			                        ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#858: FILE: fs/unionfs/inode.c:816:
+		 * only the first branch returns -EROFS. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#859: FILE: fs/unionfs/inode.c:817:
+		err = inode_permission(hidden_inode, mask, nd, bindex);
 		                                           ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#862: FILE: fs/unionfs/inode.c:820:
+		 * permissions, so we fail if one fails. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#900: FILE: fs/unionfs/inode.c:858:
+		BUG_ON(hidden_dentry->d_inode == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hidden_dentry->d_inode"
#900: FILE: fs/unionfs/inode.c:858:
+		BUG_ON(hidden_dentry->d_inode == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#904: FILE: fs/unionfs/inode.c:862:
+		if (is_robranch_super(dentry->d_sb, bindex)
+		    || IS_RDONLY(hidden_dentry->d_inode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bindex != bstart'
#905: FILE: fs/unionfs/inode.c:863:
+			if (copyup || (bindex != bstart))

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: fs/unionfs/inode.c:868:
+				loff_t size = dentry->d_inode->i_size;
+				if (ia->ia_valid & ATTR_SIZE)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#926: FILE: fs/unionfs/inode.c:884:
+
+		}

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#942: FILE: fs/unionfs/inode.c:900:
+struct inode_operations unionfs_symlink_iops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#950: FILE: fs/unionfs/inode.c:908:
+struct inode_operations unionfs_dir_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#964: FILE: fs/unionfs/inode.c:922:
+struct inode_operations unionfs_main_iops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012745.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 45 warnings, 31 checks, 926 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012745.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
