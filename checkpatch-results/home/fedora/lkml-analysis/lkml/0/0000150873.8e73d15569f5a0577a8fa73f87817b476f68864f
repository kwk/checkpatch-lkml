WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# ./test_ra.sh 4k 0 50 100

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
79.88s real  9.09s system  0.47s user  13651+130 cs  dd if=$FILE of=/dev/null bs=$bs 2> /dev/null

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# ./test_ra.sh 32k 0 50 100

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#236: 
# opreport -cl linux-2.6.13ra/vmlinux

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#237: 
# opannotate --assembly linux-2.6.13ra/vmlinux

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#238: 
# make CONFIG_DEBUG_INFO=1 mm/filemap.o

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#239: 
# objdump -S mm/filemap.o > mm/filemap.asm 

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#280: 
     d69:       f0 0f ba 37 15          lock btrl $0x15,(%edi)
                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#285: 
                                                filp, prev_page, NULL,
                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#291: 
                                                filp, prev_page, page,
                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#320: FILE: include/linux/mm.h:894:
+			struct file_ra_state *ra, struct file *filp,
 			                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: include/linux/mm.h:894:
+page_cache_readahead_adaptive(struct address_space *mapping,
+			struct file_ra_state *ra, struct file *filp,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#365: FILE: include/linux/sysctl.h:183:
+	VM_READAHEAD_RATIO=29, /* ratio of readahead request size to backward-looking size */
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#376: FILE: kernel/sysctl.c:69:
+extern int readahead_ratio;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#392: FILE: kernel/sysctl.c:863:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#404: FILE: mm/filemap.c:702:
+extern int readahead_ratio;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: mm/filemap.c:765:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#435: FILE: mm/filemap.c:773:
+			if (unlikely(page == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#437: FILE: mm/filemap.c:775:
+						filp, prev_page, NULL,
 						^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: mm/filemap.c:775:
+				page_cache_readahead_adaptive(mapping, &ra,
+						filp, prev_page, NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#443: FILE: mm/filemap.c:781:
+						filp, prev_page, page,
 						^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: mm/filemap.c:781:
+				page_cache_readahead_adaptive(mapping, &ra,
+						filp, prev_page, page,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#535: FILE: mm/filemap.c:1238:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: mm/filemap.c:1247:
+			page_cache_readahead_adaptive(mapping, ra,
+						file, NULL, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: mm/filemap.c:1252:
+			page_cache_readahead_adaptive(mapping, ra,
+						file, NULL, page,

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#570: FILE: mm/readahead.c:18:
+int readahead_ratio = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/readahead.c:292:
+			if (readahead_ratio > 9 &&
+					page_idx == nr_to_read - lookahead_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: mm/readahead.c:304:
+		if (readahead_ratio > 9 &&
+				page_idx == nr_to_read - lookahead_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#661: FILE: mm/readahead.c:399:
+	return __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#670: FILE: mm/readahead.c:419:
+	actual = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                            ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#673: FILE: mm/readahead.c:422:
+		printk(KERN_DEBUG

CHECK:LINE_SPACING: Please don't use multiple blank lines
#688: FILE: mm/readahead.c:588:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#690: FILE: mm/readahead.c:590:
+ *  ___ ^I0^I^Inot in inactive list$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#691: FILE: mm/readahead.c:591:
+ *  L__ ^I1^I^Ifresh$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#692: FILE: mm/readahead.c:592:
+ *  L_R ^I2^I^Istale$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: mm/readahead.c:593:
+ *  LA_ ^I4^I^Idisturbed once$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#694: FILE: mm/readahead.c:594:
+ *  LAR ^I8^I^Idisturbed twice$

CHECK:BRACES: braces {} should be used on all arms of this statement
#698: FILE: mm/readahead.c:598:
+	if (page && PageLRU(page) && !PageActive(page)) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#702: FILE: mm/readahead.c:602:
+			return 4 + 4*PageReferenced(page);
 			            ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#704: FILE: mm/readahead.c:604:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: mm/readahead.c:616:
+static int count_sequential_pages(struct address_space *mapping,
+			unsigned long offset, unsigned long nr_lookback,

ERROR:SPACING: space required before the open parenthesis '('
#729: FILE: mm/readahead.c:629:
+	for(step = (offset - index + 3) / 4, count = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: mm/readahead.c:651:
+static unsigned long lru_scan(struct page *page, int dir,
+				int nr_chunks, int nr_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#758: FILE: mm/readahead.c:658:
+	BUG_ON(nr_pages <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#759: FILE: mm/readahead.c:659:
+	BUG_ON(nr_chunks <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#760: FILE: mm/readahead.c:660:
+	BUG_ON(dir != 1 && dir != -1);

ERROR:SPACING: space required before the open parenthesis '('
#762: FILE: mm/readahead.c:662:
+	for(;;) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: mm/readahead.c:669:
+^I^Ido {    $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#786: FILE: mm/readahead.c:686:
+		head_page = page = find_get_page(mapping, index);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#791: FILE: mm/readahead.c:691:
+out:    $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: mm/readahead.c:700:
+static unsigned long get_readahead_index(struct address_space *mapping,
+				unsigned long index, unsigned long ra_size)

ERROR:SPACING: space required before the open parenthesis '('
#814: FILE: mm/readahead.c:714:
+	for(ra_size -= ra_size / 4;; ra_size = (ra_size + 1) / 2) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: mm/readahead.c:732:
+static void rotate_old_pages(struct address_space *mapping,
+			unsigned long offset, unsigned long nr_scan)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#853: FILE: mm/readahead.c:753:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#871: FILE: mm/readahead.c:771:
+#define KB(size)	(((size) * (1<<10)) / PAGE_CACHE_SIZE)
                 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#872: FILE: mm/readahead.c:772:
+	mem_mb = max_sane_readahead(KB(1024*1024)) * 2 *
 	                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#875: FILE: mm/readahead.c:775:
+	*ra_max = min(min(KB(64 + mem_mb*8), KB(2048)),
 	                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#876: FILE: mm/readahead.c:776:
+^I^I^Imapping->backing_dev_info->ra_pages); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: mm/readahead.c:776:
+	*ra_max = min(min(KB(64 + mem_mb*8), KB(2048)),
+			mapping->backing_dev_info->ra_pages); 

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#878: FILE: mm/readahead.c:778:
+	*ra_min = min(min(KB(32 + mem_mb/4), KB(128)), *ra_max);
 	                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: mm/readahead.c:782:
+/* $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#887: FILE: mm/readahead.c:787:
+			struct file_ra_state *ra, struct file *filp,
 			                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: mm/readahead.c:787:
+page_cache_readahead_adaptive(struct address_space *mapping,
+			struct file_ra_state *ra, struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: mm/readahead.c:841:
+	if (!prev_page && first_index == index &&
+			last_index - index < ra_min) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: mm/readahead.c:861:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#963: FILE: mm/readahead.c:863:
+^I */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: mm/readahead.c:866:
+	if (sequential_type > 1 && (!page || !PageActive(page)) &&
+				get_sequential_type(page) < sequential_type) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: mm/readahead.c:868:
+		ra_size = count_sequential_pages(mapping, index,
+				ra_max * 100 / readahead_ratio,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: mm/readahead.c:871:
+		if (last_index - first_index < ra_max &&
+			ra_size < ra_min && sequential_type != 2)

CHECK:BRACES: braces {} should be used on all arms of this statement
#988: FILE: mm/readahead.c:888:
+			if (ra_index + 2 * ra_size + ra_min <= eof_index) {
[...]
+			else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#992: FILE: mm/readahead.c:892:
+			}
+			else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1002: FILE: mm/readahead.c:902:
+readit: $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1003: FILE: mm/readahead.c:903:
+	ret = __do_page_cache_readahead(mapping, filp, ra_index, ra_size, la_size);
 	                                         ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1005: FILE: mm/readahead.c:905:
+^I/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1012: FILE: mm/readahead.c:912:
+	/* if (la_size) {
+		page = find_get_page(mapping, ra_index + ra_size - la_size);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1017: FILE: mm/readahead.c:917:
+	}                                                                       */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1020: FILE: mm/readahead.c:920:
+		printk(KERN_DEBUG "readahead(ino=%lu, index=%lu-%lu-%lu, "

WARNING:SPLIT_STRING: quoted string split across lines
#1021: FILE: mm/readahead.c:921:
+		printk(KERN_DEBUG "readahead(ino=%lu, index=%lu-%lu-%lu, "
+				"ra=%lu+%lu-%lu) = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: mm/swap.c:133:
+	if (!PageActive(page) && !PageActivate(page) &&
+			PageReferenced(page) && PageLRU(page)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 33 warnings, 30 checks, 722 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
