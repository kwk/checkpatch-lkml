WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
The time taken is a function of the number of symbols, you can work around it 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#67: FILE: include/linux/moduleparam.h:88:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#70: FILE: include/linux/moduleparam.h:91:
+extern int parse_args_reloc(char ** args, struct module * me, int * core_size, int * init_size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: include/linux/moduleparam.h:91:
+extern int parse_args_reloc(char ** args, struct module * me, int * core_size, int * init_size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: include/linux/moduleparam.h:91:
+extern int parse_args_reloc(char ** args, struct module * me, int * core_size, int * init_size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: include/linux/moduleparam.h:91:
+extern int parse_args_reloc(char ** args, struct module * me, int * core_size, int * init_size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/moduleparam.h:91:
+extern int parse_args_reloc(char ** args, struct module * me, int * core_size, int * init_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: kernel/module.c:1432:
 
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: kernel/module.c:1452:
+	int core_size=0, init_size=0;
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: kernel/module.c:1452:
+	int core_size=0, init_size=0;
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: kernel/module.c:1453:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: kernel/module.c:1453:
+ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: kernel/module.c:1586:
+	if(strncmp("elf_plt_info=",args, strlen("elf_plt_info="))==0){
 	                          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#104: FILE: kernel/module.c:1586:
+	if(strncmp("elf_plt_info=",args, strlen("elf_plt_info="))==0){
 	                                                         ^

ERROR:SPACING: space required before the open brace '{'
#104: FILE: kernel/module.c:1586:
+	if(strncmp("elf_plt_info=",args, strlen("elf_plt_info="))==0){

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: kernel/module.c:1586:
+	if(strncmp("elf_plt_info=",args, strlen("elf_plt_info="))==0){

ERROR:SPACING: space required before the open parenthesis '('
#105: FILE: kernel/module.c:1587:
+		if(parse_args_reloc(&args, mod, &core_size, &init_size)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: kernel/module.c:1592:
+^I^I} ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: kernel/module.c:1592:
+^I^I} ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: kernel/module.c:1594:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: kernel/module.c:1595:
+^Iif(!no_frob_arch_sections) $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#113: FILE: kernel/module.c:1595:
+	if(!no_frob_arch_sections) 
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#113: FILE: kernel/module.c:1595:
+	if(!no_frob_arch_sections) 

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                              ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#117: FILE: kernel/module.c:1599:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
 		                                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: kernel/module.c:1600:
+		printk("init_module: consider ¥"insmod %s elf_plt_info=%d,%d,%d,%d %s¥"¥n", mod->name,
+			mod->arch.core_plt_section, mod->arch.init_plt_section,

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#119: FILE: kernel/module.c:1601:
+			sechdrs[mod->arch.core_plt_section].sh_size, sechdrs[mod->arch.init_plt_section].sh_size, args);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: kernel/module.c:1604:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: kernel/params.c:167:
 
+

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#134: FILE: kernel/params.c:168:
+int parse_args_reloc(char ** args, struct module *me, int* core_size, int* init_size){

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#134: FILE: kernel/params.c:168:
+int parse_args_reloc(char ** args, struct module *me, int* core_size, int* init_size){

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#134: FILE: kernel/params.c:168:
+int parse_args_reloc(char ** args, struct module *me, int* core_size, int* init_size){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#134: FILE: kernel/params.c:168:
+int parse_args_reloc(char ** args, struct module *me, int* core_size, int* init_size){

ERROR:SPACING: space required before the open brace '{'
#134: FILE: kernel/params.c:168:
+int parse_args_reloc(char ** args, struct module *me, int* core_size, int* init_size){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#136: FILE: kernel/params.c:170:
+	int ret=0;
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: kernel/params.c:172:
+^Iret = sscanf(val, "%d,%d,%d,%d",^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: kernel/params.c:173:
+	ret = sscanf(val, "%d,%d,%d,%d",	
+		&me->arch.core_plt_section, &me->arch.init_plt_section, core_size, init_size);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#140: FILE: kernel/params.c:174:
+	if(ret!=4) return 0;  /* fail */
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#140: FILE: kernel/params.c:174:
+	if(ret!=4) return 0;  /* fail */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#140: FILE: kernel/params.c:174:
+	if(ret!=4) return 0;  /* fail */

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: kernel/params.c:175:
+        return 1;             /* success */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: kernel/params.c:175:
+        return 1;             /* success */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 7 warnings, 14 checks, 73 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
