WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: drivers/serial/jsm/jsm_proc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: drivers/serial/jsm/jsm_proc.c:9:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: drivers/serial/jsm/jsm_proc.c:11:
+ * but WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED; without even the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: drivers/serial/jsm/jsm_proc.c:12:
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: drivers/serial/jsm/jsm_proc.c:14:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: drivers/serial/jsm/jsm_proc.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#63: FILE: drivers/serial/jsm/jsm_proc.c:17:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#77: FILE: drivers/serial/jsm/jsm_proc.c:31:
+ * $Id: jsm_proc.c,v 1.38 2004/08/30 21:39:40 scottk Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#90: FILE: drivers/serial/jsm/jsm_proc.c:44:
+#include <asm/uaccess.h>		/* For copy_from_user/copy_to_user */

CHECK:CAMELCASE: Avoid CamelCase: <ProcJSM>
#96: FILE: drivers/serial/jsm/jsm_proc.c:50:
+static struct proc_dir_entry *ProcJSM;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#117: FILE: drivers/serial/jsm/jsm_proc.c:71:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#118: FILE: drivers/serial/jsm/jsm_proc.c:72:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#122: FILE: drivers/serial/jsm/jsm_proc.c:76:
+{
+

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#124: FILE: drivers/serial/jsm/jsm_proc.c:78:
+	seq_printf(seq, "\n");

CHECK:CAMELCASE: Avoid CamelCase: <jsm_NumBoards>
#128: FILE: drivers/serial/jsm/jsm_proc.c:82:
+	seq_printf(seq, "Total Boards:\t%d\n", jsm_NumBoards);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#133: FILE: drivers/serial/jsm/jsm_proc.c:87:
+
+}

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#135: FILE: drivers/serial/jsm/jsm_proc.c:89:
+static struct seq_operations jsm_info_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: drivers/serial/jsm/jsm_proc.c:112:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#178: FILE: drivers/serial/jsm/jsm_proc.c:132:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#179: FILE: drivers/serial/jsm/jsm_proc.c:133:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: drivers/serial/jsm/jsm_proc.c:138:
+  ^Iseq_printf(seq, "#\tCreate the management devices.\n");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: drivers/serial/jsm/jsm_proc.c:138:
+  ^Iseq_printf(seq, "#\tCreate the management devices.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/serial/jsm/jsm_proc.c:138:
+  ^Iseq_printf(seq, "#\tCreate the management devices.\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#184: FILE: drivers/serial/jsm/jsm_proc.c:138:
+  	seq_printf(seq, "#\tCreate the management devices.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: drivers/serial/jsm/jsm_proc.c:142:
+		char tmp[100];
+		sprintf(tmp, "/dev/jsm/mgmt%d", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/serial/jsm/jsm_proc.c:144:
+		seq_printf(seq, "%s\t%d\t%d\t%d\n",
+			tmp, jsm_Major, i, 1);

CHECK:CAMELCASE: Avoid CamelCase: <jsm_Major>
#190: FILE: drivers/serial/jsm/jsm_proc.c:144:
+			tmp, jsm_Major, i, 1);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#195: FILE: drivers/serial/jsm/jsm_proc.c:149:
+static struct seq_operations jsm_mknod_seq_ops = {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#237: FILE: drivers/serial/jsm/jsm_proc.c:191:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#238: FILE: drivers/serial/jsm/jsm_proc.c:192:
+
+}

CHECK:SPACING: No space is necessary after a cast
#242: FILE: drivers/serial/jsm/jsm_proc.c:196:
+	struct board_t	*brd = (struct board_t *) seq->private;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brd->magic != JSM_BOARD_MAGIC'
#247: FILE: drivers/serial/jsm/jsm_proc.c:201:
+	if (!brd || (brd->magic != JSM_BOARD_MAGIC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: drivers/serial/jsm/jsm_proc.c:224:
+^I */^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: drivers/serial/jsm/jsm_proc.c:230:
+	seq_printf(seq, "Interrupt #: %d. Times interrupted: %ld\n",
+		brd->irq, brd->intr_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/serial/jsm/jsm_proc.c:232:
+	seq_printf(seq, "Majors allocated to board = TTY: %d PR: %d\n",
+		brd->SerialDriver.major, brd->PrintDriver.major);

CHECK:CAMELCASE: Avoid CamelCase: <SerialDriver>
#278: FILE: drivers/serial/jsm/jsm_proc.c:232:
+		brd->SerialDriver.major, brd->PrintDriver.major);

CHECK:CAMELCASE: Avoid CamelCase: <PrintDriver>
#278: FILE: drivers/serial/jsm/jsm_proc.c:232:
+		brd->SerialDriver.major, brd->PrintDriver.major);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#283: FILE: drivers/serial/jsm/jsm_proc.c:237:
+static struct seq_operations jsm_board_info_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: drivers/serial/jsm/jsm_proc.c:260:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#326: FILE: drivers/serial/jsm/jsm_proc.c:280:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#327: FILE: drivers/serial/jsm/jsm_proc.c:281:
+
+}

CHECK:SPACING: No space is necessary after a cast
#331: FILE: drivers/serial/jsm/jsm_proc.c:285:
+	struct board_t	*brd = (struct board_t *) seq->private;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#334: FILE: drivers/serial/jsm/jsm_proc.c:288:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brd->magic != JSM_BOARD_MAGIC'
#335: FILE: drivers/serial/jsm/jsm_proc.c:289:
+	if (!brd || (brd->magic != JSM_BOARD_MAGIC))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: drivers/serial/jsm/jsm_proc.c:294:
+	seq_printf(seq, "%2s %10s %23s %10s %9s\n",
+		"Ch", "Chars Rx", "  Rx Par--Brk--Frm--Ovr",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#344: FILE: drivers/serial/jsm/jsm_proc.c:298:
+	for (i = 0; i < brd->nasync; i++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: drivers/serial/jsm/jsm_proc.c:304:
+		seq_printf(seq, "%4ld %4ld %4ld %4ld ", ch->ch_err_parity,
+			ch->ch_err_break, ch->ch_err_frame, ch->ch_err_overrun);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#354: FILE: drivers/serial/jsm/jsm_proc.c:308:
+		seq_printf(seq, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#360: FILE: drivers/serial/jsm/jsm_proc.c:314:
+static struct seq_operations jsm_board_stats_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#384: FILE: drivers/serial/jsm/jsm_proc.c:338:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#404: FILE: drivers/serial/jsm/jsm_proc.c:358:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#405: FILE: drivers/serial/jsm/jsm_proc.c:359:
+
+}

CHECK:SPACING: No space is necessary after a cast
#409: FILE: drivers/serial/jsm/jsm_proc.c:363:
+	struct board_t	*brd = (struct board_t *) seq->private;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brd->magic != JSM_BOARD_MAGIC'
#414: FILE: drivers/serial/jsm/jsm_proc.c:368:
+	if (!brd || (brd->magic != JSM_BOARD_MAGIC))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: drivers/serial/jsm/jsm_proc.c:373:
+	seq_printf(seq, "%2s %5s %5s %5s %5s %5s %10s  Line Status Flags\n",
+		"Ch", "CFlag", "IFlag", "OFlag", "LFlag", "DFlag", "Baud");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#422: FILE: drivers/serial/jsm/jsm_proc.c:376:
+	for (i = 0; i < brd->nasync; i++) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#432: FILE: drivers/serial/jsm/jsm_proc.c:386:
+		if (!ch->ch_open_count)
[...]
+		else {
[...]

WARNING:SPACING: space prohibited before semicolon
#433: FILE: drivers/serial/jsm/jsm_proc.c:387:
+			seq_printf(seq, " -- -- -- -- -- -- --") ;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#433: FILE: drivers/serial/jsm/jsm_proc.c:387:
+			seq_printf(seq, " -- -- -- -- -- -- --") ;

CHECK:BRACES: Unbalanced braces around else statement
#434: FILE: drivers/serial/jsm/jsm_proc.c:388:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: drivers/serial/jsm/jsm_proc.c:390:
+			seq_printf(seq, " op %s %s %s %s %s %s",
+				(ch->ch_mostat & UART_MCR_RTS) ? "rs" : "--",

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#444: FILE: drivers/serial/jsm/jsm_proc.c:398:
+		seq_printf(seq, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#450: FILE: drivers/serial/jsm/jsm_proc.c:404:
+static struct seq_operations jsm_board_flags_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#474: FILE: drivers/serial/jsm/jsm_proc.c:428:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#495: FILE: drivers/serial/jsm/jsm_proc.c:449:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#496: FILE: drivers/serial/jsm/jsm_proc.c:450:
+
+}

CHECK:SPACING: No space is necessary after a cast
#500: FILE: drivers/serial/jsm/jsm_proc.c:454:
+	struct board_t	*brd = (struct board_t *) seq->private;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brd->magic != JSM_BOARD_MAGIC'
#505: FILE: drivers/serial/jsm/jsm_proc.c:459:
+	if (!brd || (brd->magic != JSM_BOARD_MAGIC))

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#509: FILE: drivers/serial/jsm/jsm_proc.c:463:
+	/*
+	* For each board, output the device information in

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#512: FILE: drivers/serial/jsm/jsm_proc.c:466:
+	seq_printf(seq, "# Create the TTY and PR devices\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/serial/jsm/jsm_proc.c:471:
+	seq_printf(seq, "%s\t\t\t%d\t%d\t%d\n", str,
+		brd->jsm_Serial_Major, 0, brd->maxports);

CHECK:CAMELCASE: Avoid CamelCase: <jsm_Serial_Major>
#517: FILE: drivers/serial/jsm/jsm_proc.c:471:
+		brd->jsm_Serial_Major, 0, brd->maxports);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/serial/jsm/jsm_proc.c:476:
+	seq_printf(seq, "%s\t\t\t%d\t%d\t%d\n", str,
+		brd->jsm_TransparentPrint_Major, 128, brd->maxports);

CHECK:CAMELCASE: Avoid CamelCase: <jsm_TransparentPrint_Major>
#522: FILE: drivers/serial/jsm/jsm_proc.c:476:
+		brd->jsm_TransparentPrint_Major, 128, brd->maxports);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#527: FILE: drivers/serial/jsm/jsm_proc.c:481:
+static struct seq_operations jsm_board_mknod_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: drivers/serial/jsm/jsm_proc.c:505:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#571: FILE: drivers/serial/jsm/jsm_proc.c:525:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#572: FILE: drivers/serial/jsm/jsm_proc.c:526:
+
+}

CHECK:SPACING: No space is necessary after a cast
#576: FILE: drivers/serial/jsm/jsm_proc.c:530:
+	struct channel_t	*ch = (struct channel_t *) seq->private;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->magic != JSM_CHANNEL_MAGIC'
#580: FILE: drivers/serial/jsm/jsm_proc.c:534:
+	if (!ch || (ch->magic != JSM_CHANNEL_MAGIC))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#584: FILE: drivers/serial/jsm/jsm_proc.c:538:
+	seq_printf(seq, "\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: drivers/serial/jsm/jsm_proc.c:540:
+^I/* Prepare the Header Labels */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/serial/jsm/jsm_proc.c:542:
+	seq_printf(seq, "%10s %23s %10s %9s\n",
+		"Chars Rx", "  Rx Par--Brk--Frm--Ovr",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/serial/jsm/jsm_proc.c:546:
+	seq_printf(seq, "%4ld %4ld %4ld %4ld ", ch->ch_err_parity,
+		ch->ch_err_break, ch->ch_err_frame, ch->ch_err_overrun);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: drivers/serial/jsm/jsm_proc.c:547:
+^Iseq_printf(seq, "%10ld ", ch->ch_txcount);  $

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#595: FILE: drivers/serial/jsm/jsm_proc.c:549:
+	seq_printf(seq, "\n\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/serial/jsm/jsm_proc.c:553:
+	seq_printf(seq, "%5s %5s %5s %5s %5s %10s  Line Status Flags\n",
+		"CFlag", "IFlag", "OFlag", "LFlag", "DFlag", "Baud");

CHECK:BRACES: braces {} should be used on all arms of this statement
#606: FILE: drivers/serial/jsm/jsm_proc.c:560:
+	if (!ch->ch_open_count)
[...]
+	else {
[...]

WARNING:SPACING: space prohibited before semicolon
#607: FILE: drivers/serial/jsm/jsm_proc.c:561:
+		seq_printf(seq, " -- -- -- -- -- -- --") ;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#607: FILE: drivers/serial/jsm/jsm_proc.c:561:
+		seq_printf(seq, " -- -- -- -- -- -- --") ;

CHECK:BRACES: Unbalanced braces around else statement
#608: FILE: drivers/serial/jsm/jsm_proc.c:562:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: drivers/serial/jsm/jsm_proc.c:563:
+^I^Iseq_printf(seq, " op %s %s %s %s %s %s", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: drivers/serial/jsm/jsm_proc.c:564:
+		seq_printf(seq, " op %s %s %s %s %s %s", 
+		(ch->ch_mostat & UART_MCR_RTS) ? "rs" : "--",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: drivers/serial/jsm/jsm_proc.c:570:
+^I} $

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#617: FILE: drivers/serial/jsm/jsm_proc.c:571:
+	seq_printf(seq, "\n\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#622: FILE: drivers/serial/jsm/jsm_proc.c:576:
+static struct seq_operations jsm_channel_info_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#646: FILE: drivers/serial/jsm/jsm_proc.c:600:
+
+

CHECK:SPACING: No space is necessary after a cast
#650: FILE: drivers/serial/jsm/jsm_proc.c:604:
+	struct channel_t	*ch = (struct channel_t *) seq->private;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->magic != JSM_CHANNEL_MAGIC'
#652: FILE: drivers/serial/jsm/jsm_proc.c:606:
+	if (!ch || (ch->magic != JSM_CHANNEL_MAGIC))

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: drivers/serial/jsm/jsm_proc.c:630:
+ ^Iulong  lock_flags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#676: FILE: drivers/serial/jsm/jsm_proc.c:630:
+ ^Iulong  lock_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: drivers/serial/jsm/jsm_proc.c:630:
+ ^Iulong  lock_flags;$

CHECK:SPACING: No space is necessary after a cast
#677: FILE: drivers/serial/jsm/jsm_proc.c:631:
+	struct channel_t	*ch = (struct channel_t *) seq->private;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#685: FILE: drivers/serial/jsm/jsm_proc.c:639:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#688: FILE: drivers/serial/jsm/jsm_proc.c:642:
+{
+

CHECK:SPACING: No space is necessary after a cast
#689: FILE: drivers/serial/jsm/jsm_proc.c:643:
+	struct channel_t	*ch = (struct channel_t *) seq->private;

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: drivers/serial/jsm/jsm_proc.c:651:
+	int count;
+	if (!ch || (ch->magic != JSM_CHANNEL_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->magic != JSM_CHANNEL_MAGIC'
#697: FILE: drivers/serial/jsm/jsm_proc.c:651:
+	if (!ch || (ch->magic != JSM_CHANNEL_MAGIC)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: drivers/serial/jsm/jsm_proc.c:675:
+		rtn = wait_event_interruptible(ch->ch_sniff_wait,
+			((ch->ch_sniff_flags & SNIFF_WAIT_DATA) == 0));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#752: FILE: drivers/serial/jsm/jsm_proc.c:706:
+	seq_printf(seq, "in =%d out=%d\n",ch->ch_sniff_in,ch->ch_sniff_out);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#752: FILE: drivers/serial/jsm/jsm_proc.c:706:
+	seq_printf(seq, "in =%d out=%d\n",ch->ch_sniff_in,ch->ch_sniff_out);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#753: FILE: drivers/serial/jsm/jsm_proc.c:707:
+	seq_printf(seq, "first=%x\n",ch->ch_sniff_buf[5]);
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: drivers/serial/jsm/jsm_proc.c:708:
+	seq_printf(seq, "first=%x\n",ch->ch_sniff_buf[6]);
 	                            ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#755: FILE: drivers/serial/jsm/jsm_proc.c:709:
+	for (count = 0; count < n; count++) {
+		seq_printf(seq, "%x ",ch->ch_sniff_buf[ch->ch_sniff_out++]);
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: drivers/serial/jsm/jsm_proc.c:710:
+		seq_printf(seq, "%x ",ch->ch_sniff_buf[ch->ch_sniff_out++]);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#764: FILE: drivers/serial/jsm/jsm_proc.c:718:
+	seq_printf(seq,"\n");
 	              ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#764: FILE: drivers/serial/jsm/jsm_proc.c:718:
+	seq_printf(seq,"\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#765: FILE: drivers/serial/jsm/jsm_proc.c:719:
+	seq_printf(seq, "in =%d out=%d\n",ch->ch_sniff_in,ch->ch_sniff_out);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#765: FILE: drivers/serial/jsm/jsm_proc.c:719:
+	seq_printf(seq, "in =%d out=%d\n",ch->ch_sniff_in,ch->ch_sniff_out);
 	                                                 ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#782: FILE: drivers/serial/jsm/jsm_proc.c:736:
+static struct seq_operations jsm_channel_sniff_seq_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#806: FILE: drivers/serial/jsm/jsm_proc.c:760:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#807: FILE: drivers/serial/jsm/jsm_proc.c:761:
+static struct file_operations jsm_info_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#814: FILE: drivers/serial/jsm/jsm_proc.c:768:
+static struct file_operations jsm_mknod_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#821: FILE: drivers/serial/jsm/jsm_proc.c:775:
+static struct file_operations jsm_board_info_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#828: FILE: drivers/serial/jsm/jsm_proc.c:782:
+static struct file_operations jsm_board_stats_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#835: FILE: drivers/serial/jsm/jsm_proc.c:789:
+static struct file_operations jsm_board_flags_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#842: FILE: drivers/serial/jsm/jsm_proc.c:796:
+static struct file_operations jsm_board_mknod_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#849: FILE: drivers/serial/jsm/jsm_proc.c:803:
+static struct file_operations jsm_channel_info_operations = $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#849: FILE: drivers/serial/jsm/jsm_proc.c:803:
+static struct file_operations jsm_channel_info_operations = 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#850: FILE: drivers/serial/jsm/jsm_proc.c:804:
+static struct file_operations jsm_channel_info_operations = 
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: drivers/serial/jsm/jsm_proc.c:811:
+static struct file_operations jsm_channel_sniff_operations = $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#857: FILE: drivers/serial/jsm/jsm_proc.c:811:
+static struct file_operations jsm_channel_sniff_operations = 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#858: FILE: drivers/serial/jsm/jsm_proc.c:812:
+static struct file_operations jsm_channel_sniff_operations = 
+{

ERROR:SPACING: space required after that ',' (ctx:VxO)
#877: FILE: drivers/serial/jsm/jsm_proc.c:831:
+	ProcJSM = proc_mkdir("jsm",&proc_root);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#877: FILE: drivers/serial/jsm/jsm_proc.c:831:
+	ProcJSM = proc_mkdir("jsm",&proc_root);
 	                           ^

WARNING:TYPO_SPELLING: 'cann't' may be misspelled - perhaps 'can't'?
#881: FILE: drivers/serial/jsm/jsm_proc.c:835:
+		printk(KERN_WARNING "cann't create /proc/net/jsm\n");
 		                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#881: FILE: drivers/serial/jsm/jsm_proc.c:835:
+		printk(KERN_WARNING "cann't create /proc/net/jsm\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#883: FILE: drivers/serial/jsm/jsm_proc.c:837:
+	entry = create_proc_entry("info", S_IRUGO, ProcJSM);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#887: FILE: drivers/serial/jsm/jsm_proc.c:841:
+	entry = create_proc_entry("mknod", S_IRUGO, ProcJSM);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#892: FILE: drivers/serial/jsm/jsm_proc.c:846:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#902: FILE: drivers/serial/jsm/jsm_proc.c:856:
+	struct proc_dir_entry *e, *board_e, *channel_e;
+	sprintf(board, "%d", board_num);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#905: FILE: drivers/serial/jsm/jsm_proc.c:859:
+	board_e = jsm_Board[board_num]->proc_entry_pointer = proc_mkdir(board, ProcJSM);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <jsm_Board>
#905: FILE: drivers/serial/jsm/jsm_proc.c:859:
+	board_e = jsm_Board[board_num]->proc_entry_pointer = proc_mkdir(board, ProcJSM);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#907: FILE: drivers/serial/jsm/jsm_proc.c:861:
+	e = create_proc_entry("info", S_IRUGO, board_e);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#913: FILE: drivers/serial/jsm/jsm_proc.c:867:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#914: FILE: drivers/serial/jsm/jsm_proc.c:868:
+	e = create_proc_entry("stats", S_IRUGO, board_e);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#920: FILE: drivers/serial/jsm/jsm_proc.c:874:
+	e = create_proc_entry("flags", S_IRUGO, board_e);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#926: FILE: drivers/serial/jsm/jsm_proc.c:880:
+	e = create_proc_entry("mknod", S_IRUGO, board_e);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#936: FILE: drivers/serial/jsm/jsm_proc.c:890:
+	for (i = 0; i < jsm_Board[board_num]->nasync; i++) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#938: FILE: drivers/serial/jsm/jsm_proc.c:892:
+		char channel[10];
+		sprintf(channel, "%d", i);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#940: FILE: drivers/serial/jsm/jsm_proc.c:894:
+		channel_e = jsm_Board[board_num]->channels[i]->proc_entry_pointer = proc_mkdir(channel,board_e);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#940: FILE: drivers/serial/jsm/jsm_proc.c:894:
+		channel_e = jsm_Board[board_num]->channels[i]->proc_entry_pointer = proc_mkdir(channel,board_e);
 		                                                                                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#940: FILE: drivers/serial/jsm/jsm_proc.c:894:
+		channel_e = jsm_Board[board_num]->channels[i]->proc_entry_pointer = proc_mkdir(channel,board_e);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#942: FILE: drivers/serial/jsm/jsm_proc.c:896:
+		e = create_proc_entry("info", S_IRUGO, channel_e);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#948: FILE: drivers/serial/jsm/jsm_proc.c:902:
+		e = create_proc_entry("sniff", S_IRUGO, channel_e);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#954: FILE: drivers/serial/jsm/jsm_proc.c:908:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#959: FILE: drivers/serial/jsm/jsm_proc.c:913:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#968: FILE: drivers/serial/jsm/jsm_proc.c:922:
+	char board_number[16];
+	sprintf(board_number,"%d",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: drivers/serial/jsm/jsm_proc.c:922:
+	sprintf(board_number,"%d",i);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: drivers/serial/jsm/jsm_proc.c:922:
+	sprintf(board_number,"%d",i);
 	                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#970: FILE: drivers/serial/jsm/jsm_proc.c:924:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#972: FILE: drivers/serial/jsm/jsm_proc.c:926:
+	for (j = 0; j < jsm_Board[i]->nasync; j++) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#974: FILE: drivers/serial/jsm/jsm_proc.c:928:
+		char channel_number[16];
+		sprintf(channel_number,"%d",j);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#974: FILE: drivers/serial/jsm/jsm_proc.c:928:
+		sprintf(channel_number,"%d",j);
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#974: FILE: drivers/serial/jsm/jsm_proc.c:928:
+		sprintf(channel_number,"%d",j);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#976: FILE: drivers/serial/jsm/jsm_proc.c:930:
+		remove_proc_entry("info",jsm_Board[i]->channels[j]->proc_entry_pointer);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#977: FILE: drivers/serial/jsm/jsm_proc.c:931:
+		remove_proc_entry("sniff",jsm_Board[i]->channels[j]->proc_entry_pointer);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#978: FILE: drivers/serial/jsm/jsm_proc.c:932:
+		remove_proc_entry(channel_number,jsm_Board[i]->proc_entry_pointer);
 		                                ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#980: FILE: drivers/serial/jsm/jsm_proc.c:934:
+
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#982: FILE: drivers/serial/jsm/jsm_proc.c:936:
+	remove_proc_entry("info",jsm_Board[i]->proc_entry_pointer);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#983: FILE: drivers/serial/jsm/jsm_proc.c:937:
+	remove_proc_entry("mknod",jsm_Board[i]->proc_entry_pointer);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#984: FILE: drivers/serial/jsm/jsm_proc.c:938:
+	remove_proc_entry("flags",jsm_Board[i]->proc_entry_pointer);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#985: FILE: drivers/serial/jsm/jsm_proc.c:939:
+	remove_proc_entry("stats",jsm_Board[i]->proc_entry_pointer);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#986: FILE: drivers/serial/jsm/jsm_proc.c:940:
+	remove_proc_entry(board_number,ProcJSM);
 	                              ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#988: FILE: drivers/serial/jsm/jsm_proc.c:942:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#992: FILE: drivers/serial/jsm/jsm_proc.c:946:
+{
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: drivers/serial/jsm/jsm_proc.c:948:
+	remove_proc_entry("info",ProcJSM);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: drivers/serial/jsm/jsm_proc.c:949:
+	remove_proc_entry("mknod",ProcJSM);
 	                         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204162.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 55 warnings, 81 checks, 951 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204162.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
