CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#123: FILE: include/linux/futex.h:33:
+	struct mutex robust_mutex;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/futex.h:38:
+extern void futex_free_robust_list(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/futex.h:39:
+extern void exit_futex(struct task_struct *tsk);

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#183: FILE: kernel/futex.c:48:
+#include <asm/uaccess.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: kernel/futex.c:876:
+ ^Istruct futex_robust *this, *next;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: kernel/futex.c:876:
+ ^Istruct futex_robust *this, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/futex.c:876:
+ ^Istruct futex_robust *this, *next;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!futex_head"
#235: FILE: kernel/futex.c:881:
+	if (futex_head == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:RETURN_VOID: void function return statements are not generally useful
#255: FILE: kernel/futex.c:901:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: kernel/futex.c:966:
+		uaddr = get_shared_uaddr(key,vma);
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: kernel/futex.c:989:
+ ^Iunsigned long uaddr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: kernel/futex.c:989:
+ ^Iunsigned long uaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: kernel/futex.c:989:
+ ^Iunsigned long uaddr;$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#349: FILE: kernel/futex.c:995:
+	list_for_each_entry_safe(this, next, head, list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#384: FILE: kernel/futex.c:1030:
+	if (mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#389: FILE: kernel/futex.c:1035:
+	for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#390: FILE: kernel/futex.c:1036:
+		if (vma->vm_file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#394: FILE: kernel/futex.c:1040:
+		if (addr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr->robust_head"
#397: FILE: kernel/futex.c:1043:
+		if (addr->robust_head == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#447: FILE: kernel/futex.c:1093:
+		if (addr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr->robust_head"
#456: FILE: kernel/futex.c:1102:
+		if (addr->robust_head == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#515: FILE: kernel/futex.c:1161:
+	if (head == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: kernel/futex.c:1298:
+	robust_futex_cachep = kmem_cache_create("robust_futex",
+			       sizeof(struct futex_robust), 0, 0, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: kernel/futex.c:1300:
+	file_futex_cachep = kmem_cache_create("file_futex",
+			       sizeof(struct futex_head), 0, 0, NULL, NULL);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#609: FILE: init/Kconfig:351:
+config ROBUST_FUTEX
+	bool "Enable robust futex support"
+	depends on FUTEX
+	default y
+	help
+	  Enable this option if you want to use robust user space mutexes.
+	  Enabling this option slows down the exit path of the kernel for
+	  all processes.  Robust futexes will run glibc-based applications correctly.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113398.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 7 warnings, 15 checks, 530 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113398.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
