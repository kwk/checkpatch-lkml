WARNING:BAD_SIGN_OFF: Do not use whitespace before To:
#29: 
 To:      lhms-devel@lists.sourceforge.net

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Use a single space after To:
#29: 
 To:      lhms-devel@lists.sourceforge.net

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
 Subject: [Lhms-devel] Making hotremovable attribute with memory section[1/4]

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#101: FILE: include/linux/mmzone.h:183:
+	struct area_type       area_type[NUM_AREA_TYPE];  /* 0: un-removable , 1: removable memory */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: include/linux/nonlinear.h:44:
+#define SECTION_REMOVABLE       (1 << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/nonlinear.h:142:
+extern unsigned int page_is_removable(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#139: FILE: mm/nonlinear.c:183:
+	int index = page->section;
+	return !!(mem_section[index].flags & SECTION_REMOVABLE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: mm/nonlinear.c:186:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: mm/page_alloc.c:271:
+                /* at = 0: Un-removable, 1: removable */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: mm/page_alloc.c:464:
+static struct page *__rmqueue(struct zone *zone,struct area_type *area_type, unsigned int order)
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#245: FILE: mm/page_alloc.c:513:
+		if (page == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#245: FILE: mm/page_alloc.c:513:
+		if (page == NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open brace '{'
#246: FILE: mm/page_alloc.c:514:
+			if (at){

CHECK:BRACES: braces {} should be used on all arms of this statement
#246: FILE: mm/page_alloc.c:514:
+			if (at){
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#250: FILE: mm/page_alloc.c:518:
+			} else

ERROR:SPACING: space required before the open brace '{'
#275: FILE: mm/page_alloc.c:562:
+	for (at = 0; at < NUM_AREA_TYPE; at++){

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: mm/page_alloc.c:763:
+		struct area_type *area_type;
+		for (; at >= 0; at--){

ERROR:SPACING: space required before the open brace '{'
#313: FILE: mm/page_alloc.c:763:
+		for (; at >= 0; at--){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: mm/page_alloc.c:770:
+				printk("%s() saw c100c6b4\n", __func__);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#325: FILE: mm/page_alloc.c:775:
+			if (page != NULL) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#325: FILE: mm/page_alloc.c:775:
+			if (page != NULL) break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: mm/page_alloc.c:1311:
+ ^I^Iunsigned long nr, flags, order, total = 0, at;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: mm/page_alloc.c:1311:
+ ^I^Iunsigned long nr, flags, order, total = 0, at;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: mm/page_alloc.c:1311:
+ ^I^Iunsigned long nr, flags, order, total = 0, at;$

ERROR:SPACING: space required before the open brace '{'
#350: FILE: mm/page_alloc.c:1321:
+		for (at = 0; at < NUM_AREA_TYPE; at++){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#356: FILE: mm/page_alloc.c:1327:
+				printk("%lu*%lukB ", nr, K(1UL) << order);

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: mm/page_alloc.c:1645:
+	int order, at;
+	for (at = 0; at < NUM_AREA_TYPE; at++){

ERROR:SPACING: space required before the open brace '{'
#375: FILE: mm/page_alloc.c:1645:
+	for (at = 0; at < NUM_AREA_TYPE; at++){

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#380: FILE: mm/page_alloc.c:1650:
+			if (order == MAX_ORDER-1) {
 			                      ^

CHECK:SPACING: No space is necessary after a cast
#392: FILE: mm/page_alloc.c:1657:
+				(unsigned long *) alloc_bootmem_node(pgdat, bitmap_size);

ERROR:SPACING: space required before the open brace '{'
#430: FILE: mm/page_alloc.c:1780:
+	for (at = 0; at < NUM_AREA_TYPE; at++){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: mm/page_alloc.c:1781:
+		for (order=0; order < MAX_ORDER-1; order++) {
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#431: FILE: mm/page_alloc.c:1781:
+		for (order=0; order < MAX_ORDER-1; order++) {
 		                               ^

ERROR:SPACING: space required before the open brace '{'
#463: FILE: mm/page_alloc.c:2017:
+		for (at = 0; at < NUM_AREA_TYPE ; at++){

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#468: FILE: mm/page_alloc.c:2022:
+				list_for_each(elem, &(zone->area_type[at].free_area[order].free_list))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->area_type[at].free_area[order].free_list
#468: FILE: mm/page_alloc.c:2022:
+				list_for_each(elem, &(zone->area_type[at].free_area[order].free_list))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 12 warnings, 11 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
