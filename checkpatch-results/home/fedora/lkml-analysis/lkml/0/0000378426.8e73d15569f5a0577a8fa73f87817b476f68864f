WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#93: FILE: kernel/sched.c:2:
+ *  kernel/sched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#145: FILE: kernel/sched.c:205:
+# define nr_running_inc(rq)    do { (rq)->nr_running++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#146: FILE: kernel/sched.c:206:
+# define nr_running_dec(rq)    do { (rq)->nr_running--; } while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sleep_time > 0'
#191: FILE: kernel/sched.c:315:
+	if (!rt_task(p) && (sleep_time > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: kernel/sched.c:489:
+static int try_to_wake_up(task_t * p, unsigned int state, int sync)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#292: FILE: kernel/sched.c:502:
+		/*
+			 * Fast-migrate the task if it's not running or runnable

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#294: FILE: kernel/sched.c:504:
+			 * currently. Do not violate hard affinity.
+		 */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/sched.c:506:
+			if (unlikely(sync && !task_running(rq, p) &&
+				(task_cpu(p) != smp_processor_id()) &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#298: FILE: kernel/sched.c:508:
+				(p->cpus_allowed & (1UL << smp_processor_id())))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#308: FILE: kernel/sched.c:516:
+			if (sync)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#310: FILE: kernel/sched.c:518:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: kernel/sched.c:535:
+		prio_array_t *array;
+		rq = task_rq_lock(current, &flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#385: FILE: kernel/sched.c:570:
+	if (unlikely(!current->array))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#387: FILE: kernel/sched.c:572:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#462: FILE: kernel/sched.c:645:
+static inline task_t * context_switch(runqueue_t *rq, task_t *prev, task_t *next)

CHECK:BRACES: Unbalanced braces around else statement
#492: FILE: kernel/sched.c:930:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: kernel/sched.c:932:
+		if (p->prio == this_rq->curr->prio &&
+				p->time_slice > this_rq->curr->time_slice)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#517: FILE: kernel/sched.c:1057:
+			STARVATION_LIMIT * ((rq)->nr_running) + 1 )))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#583: FILE: kernel/sched.c:1353:
+		if ((state & mode) && try_to_wake_up(p, state, sync) &&
[...]
 				break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: kernel/sched.c:1354:
+		if ((state & mode) && try_to_wake_up(p, state, sync) &&
 			((curr->flags & WQ_FLAG_EXCLUSIVE) && !--nr_exclusive))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: kernel/sched.c:1913:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: kernel/sched.c:1914:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#623: FILE: kernel/sched.c:1914:
+		
+	

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378426.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 11 checks, 569 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378426.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
