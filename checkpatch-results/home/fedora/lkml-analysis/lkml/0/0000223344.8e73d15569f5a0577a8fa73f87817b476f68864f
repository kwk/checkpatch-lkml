WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
POSIX requires that when you claim _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu_timers' - possible side-effects?
#63: FILE: include/linux/init_task.h:117:
+#define INIT_CPU_TIMERS(cpu_timers)					\
+{									\
+	LIST_HEAD_INIT(cpu_timers[0]),					\
+	LIST_HEAD_INIT(cpu_timers[1]),					\
+	LIST_HEAD_INIT(cpu_timers[2]),					\
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: include/linux/sched.h:613:
+  ^Iunsigned long it_prof_expires, it_virt_expires;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#88: FILE: include/linux/sched.h:613:
+  ^Iunsigned long it_prof_expires, it_virt_expires;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/linux/sched.h:613:
+  ^Iunsigned long it_prof_expires, it_virt_expires;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#123: FILE: kernel/fork.c:882:
+	p->it_virt_expires = p->it_prof_expires = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#170: FILE: include/linux/posix-timers.h:20:
+#define CPUCLOCK_PID(clock)		((pid_t) ~((clock) >> 3))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 19)
#214: FILE: include/linux/posix-timers.h:105:
               if (delta >= 0) {						\
+	           orun = 1 + (delta / (timr)->it.real.incr);		\

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: include/linux/posix-timers.h:106:
+^I           orun = 1 + (delta / (timr)->it.real.incr);^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: include/linux/posix-timers.h:107:
+^I          (timr)->it.real.timer.expires +=^I^I^I\$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#227: FILE: include/linux/posix-timers.h:116:
+int posix_cpu_clock_nanosleep(clockid_t, int, const struct timespec __user *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#227: FILE: include/linux/posix-timers.h:116:
+int posix_cpu_clock_nanosleep(clockid_t, int, const struct timespec __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct timespec __user *' should also have an identifier name
#227: FILE: include/linux/posix-timers.h:116:
+int posix_cpu_clock_nanosleep(clockid_t, int, const struct timespec __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#227: FILE: include/linux/posix-timers.h:116:
+int posix_cpu_clock_nanosleep(clockid_t, int, const struct timespec __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_itimer *' should also have an identifier name
#230: FILE: include/linux/posix-timers.h:119:
+int posix_cpu_timer_init(struct k_itimer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_itimer *' should also have an identifier name
#231: FILE: include/linux/posix-timers.h:120:
+int posix_cpu_timer_delete(struct k_itimer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_itimer *' should also have an identifier name
#232: FILE: include/linux/posix-timers.h:121:
+void posix_cpu_timer_gettime(struct k_itimer *, struct itimerspec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerspec *' should also have an identifier name
#232: FILE: include/linux/posix-timers.h:121:
+void posix_cpu_timer_gettime(struct k_itimer *, struct itimerspec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_itimer *' should also have an identifier name
#233: FILE: include/linux/posix-timers.h:122:
+int posix_cpu_timer_settime(struct k_itimer *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/posix-timers.h:122:
+int posix_cpu_timer_settime(struct k_itimer *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerspec *' should also have an identifier name
#233: FILE: include/linux/posix-timers.h:122:
+int posix_cpu_timer_settime(struct k_itimer *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerspec *' should also have an identifier name
#233: FILE: include/linux/posix-timers.h:122:
+int posix_cpu_timer_settime(struct k_itimer *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_itimer *' should also have an identifier name
#235: FILE: include/linux/posix-timers.h:124:
+void posix_cpu_timer_schedule(struct k_itimer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#237: FILE: include/linux/posix-timers.h:126:
+void run_posix_cpu_timers(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#238: FILE: include/linux/posix-timers.h:127:
+void posix_cpu_timers_exit(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#239: FILE: include/linux/posix-timers.h:128:
+void posix_cpu_timers_exit_group(struct task_struct *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: kernel/posix-cpu-timers.c:37:
+	union cpu_time_count ret;
+	ret.sched = 0;		/* high half always zero when .cpu used */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#265: FILE: kernel/posix-cpu-timers.c:38:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#284: FILE: kernel/posix-cpu-timers.c:71:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	}  else {
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#290: FILE: kernel/posix-cpu-timers.c:77:
+}
+static inline void cpu_time_add(clockid_t which_clock,

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: kernel/posix-cpu-timers.c:79:
+^I^I^I        union cpu_time_count val)$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#294: FILE: kernel/posix-cpu-timers.c:81:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	}  else {
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#300: FILE: kernel/posix-cpu-timers.c:87:
+}
+static inline union cpu_time_count cpu_time_sub(clockid_t which_clock,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#304: FILE: kernel/posix-cpu-timers.c:91:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	}  else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: kernel/posix-cpu-timers.c:111:
+		long long delta;
+		delta = now.sched - timer->it.cpu.expires.sched;

CHECK:SPACING: No space is necessary after a cast
#330: FILE: kernel/posix-cpu-timers.c:117:
+			timer->it_overrun += (int) delta;

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: kernel/posix-cpu-timers.c:121:
+		long delta, orun;
+		delta = now.cpu - timer->it.cpu.expires.cpu;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: kernel/posix-cpu-timers.c:310:
+
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#389: FILE: kernel/posix-cpu-timers.c:347:
+	if (p) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#412: FILE: kernel/posix-cpu-timers.c:370:
+	if (unlikely(p == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#417: FILE: kernel/posix-cpu-timers.c:375:
+		if (unlikely(p->signal == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#422: FILE: kernel/posix-cpu-timers.c:380:
+			BUG_ON(!list_empty(&timer->it.cpu.entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#453: FILE: kernel/posix-cpu-timers.c:411:
+		if (timer->expires.cpu < utime + stime) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#464: FILE: kernel/posix-cpu-timers.c:422:
+		if (timer->expires.cpu < utime) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#475: FILE: kernel/posix-cpu-timers.c:433:
+		if (timer->expires.sched < sched_time) {
[...]
+		} else {
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#493: FILE: kernel/posix-cpu-timers.c:451:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#494: FILE: kernel/posix-cpu-timers.c:452:
+}
+void posix_cpu_timers_exit_group(struct task_struct *tsk)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#502: FILE: kernel/posix-cpu-timers.c:460:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: kernel/posix-cpu-timers.c:475:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: kernel/posix-cpu-timers.c:549:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#622: FILE: kernel/posix-cpu-timers.c:580:
+				BUG();

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#623: FILE: kernel/posix-cpu-timers.c:581:
+#define UPDATE_CLOCK(WHICH, c, n)^I^I^I      ^I^I      \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#623: FILE: kernel/posix-cpu-timers.c:581:
+#define UPDATE_CLOCK(WHICH, c, n)			      		      \
+			case CPUCLOCK_##WHICH: 				      \
+				if (p->it_##c##_expires == 0 ||		      \
+				    p->it_##c##_expires > nt->expires.n) {    \
+					p->it_##c##_expires = nt->expires.n;  \
+				}					      \
+				break

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#623: FILE: kernel/posix-cpu-timers.c:581:
+#define UPDATE_CLOCK(WHICH, c, n)			      		      \
+			case CPUCLOCK_##WHICH: 				      \
+				if (p->it_##c##_expires == 0 ||		      \
+				    p->it_##c##_expires > nt->expires.n) {    \
+					p->it_##c##_expires = nt->expires.n;  \
+				}					      \
+				break

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#624: FILE: kernel/posix-cpu-timers.c:582:
+^I^I^Icase CPUCLOCK_##WHICH: ^I^I^I^I      \$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timer->sigq"
#652: FILE: kernel/posix-cpu-timers.c:610:
+	if (unlikely(timer->sigq == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#689: FILE: kernel/posix-cpu-timers.c:647:
+	if (unlikely(p == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#704: FILE: kernel/posix-cpu-timers.c:662:
+	if (unlikely(p->signal == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#714: FILE: kernel/posix-cpu-timers.c:672:
+	BUG_ON(!irqs_disabled());

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#728: FILE: kernel/posix-cpu-timers.c:686:
+	if (CPUCLOCK_PERTHREAD(timer->it_clock)) {
[...]
+	} else {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#752: FILE: kernel/posix-cpu-timers.c:710:
+				old_expires = cpu_time_sub(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#778: FILE: kernel/posix-cpu-timers.c:736:
+	if (new_expires.sched != 0 && !(flags & TIMER_ABSTIME)) {
+		cpu_time_add(timer->it_clock, &new_expires, val);
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#846: FILE: kernel/posix-cpu-timers.c:804:
+		itp->it_value.tv_sec = itp->it_value.tv_nsec = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#850: FILE: kernel/posix-cpu-timers.c:808:
+	if (unlikely(p == NULL)) {

WARNING:INDENTED_LABEL: labels should not be indented
#855: FILE: kernel/posix-cpu-timers.c:813:
+	dead:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#869: FILE: kernel/posix-cpu-timers.c:827:
+		if (unlikely(p->signal == NULL)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#897: FILE: kernel/posix-cpu-timers.c:855:
+			itp->it_value.tv_sec = itp->it_value.tv_nsec = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1117: FILE: kernel/posix-cpu-timers.c:1075:
+	if (unlikely(p == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#1136: FILE: kernel/posix-cpu-timers.c:1094:
+		if (unlikely(p->signal == NULL)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1142: FILE: kernel/posix-cpu-timers.c:1100:
+			timer->it.cpu.task = p = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1179: FILE: kernel/posix-cpu-timers.c:1137:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1192: FILE: kernel/posix-cpu-timers.c:1150:
+	BUG_ON(tsk->exit_state);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#1220: FILE: kernel/posix-cpu-timers.c:1178:
+	 * noone will touch their list entries but us.  We'll take
 	   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1226: FILE: kernel/posix-cpu-timers.c:1184:
+		int firing;
+		spin_lock(&timer->it_lock);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1235: FILE: kernel/posix-cpu-timers.c:1193:
+		if (likely(firing >= 0)) {
+			cpu_timer_fire(timer);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1264: FILE: kernel/posix-cpu-timers.c:1222:
+		if (copy_from_user(&t, rqtp, sizeof (struct timespec)))

CHECK:SPACING: No space is necessary after a cast
#1271: FILE: kernel/posix-cpu-timers.c:1229:
+	if ((unsigned long) t.tv_nsec >= NSEC_PER_SEC || t.tv_sec < 0)

WARNING:SIZEOF_PARENTHESIS: sizeof timer should be sizeof(timer)
#1282: FILE: kernel/posix-cpu-timers.c:1240:
+	memset(&timer, 0, sizeof timer);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rmtp"
#1334: FILE: kernel/posix-cpu-timers.c:1292:
+		if (rmtp != NULL && !(flags & TIMER_ABSTIME) &&

WARNING:SIZEOF_PARENTHESIS: sizeof *rmtp should be sizeof(*rmtp)
#1335: FILE: kernel/posix-cpu-timers.c:1293:
+		    copy_to_user(rmtp, &it.it_value, sizeof *rmtp))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1350: FILE: kernel/posix-cpu-timers.c:1308:
+
+

CHECK:SPACING: No space is necessary after a cast
#1355: FILE: kernel/posix-cpu-timers.c:1313:
+		(struct timespec __user *) restart_block->arg1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'restart_block->arg1'
#1359: FILE: kernel/posix-cpu-timers.c:1317:
+	if ((ret == -ERESTART_RESTARTBLOCK) && restart_block->arg1 &&
+	    copy_to_user((struct timespec __user *)(restart_block->arg1), &t,
+			 sizeof (t)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1361: FILE: kernel/posix-cpu-timers.c:1319:
+			 sizeof (t)))

CHECK:SPACING: No space is necessary after a cast
#1538: FILE: kernel/posix-timers.c:558:
+	else if ((unsigned) which_clock >= MAX_CLOCKS ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1538: FILE: kernel/posix-timers.c:558:
+	else if ((unsigned) which_clock >= MAX_CLOCKS ||

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1538: FILE: kernel/posix-timers.c:558:
+	}
+	else if ((unsigned) which_clock >= MAX_CLOCKS ||

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1539: FILE: kernel/posix-timers.c:559:
+	else if ((unsigned) which_clock >= MAX_CLOCKS ||
 				!posix_clocks[which_clock].res)

CHECK:SPACING: No space is necessary after a cast
#1567: FILE: kernel/posix-timers.c:605:
+		new_timer->it.real.timer.data = (unsigned long) new_timer;

CHECK:SPACING: No space is necessary after a cast
#1579: FILE: kernel/posix-timers.c:766:
+	while ((volatile long) (timr->it.real.timer.expires) != expires);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1579: FILE: kernel/posix-timers.c:766:
+	while ((volatile long) (timr->it.real.timer.expires) != expires);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1579: FILE: kernel/posix-timers.c:766:
+	while ((volatile long) (timr->it.real.timer.expires) != expires);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1590: FILE: kernel/posix-timers.c:774:
+		timr->it.real.timer.expires = expires = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around timr->it.real.wall_to_prev
#1661: FILE: kernel/posix-timers.c:983:
+			    &expire_64, &(timr->it.real.wall_to_prev))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around timr->it.real.abs_timer_entry
#1681: FILE: kernel/posix-timers.c:999:
+		list_add_tail(&(timr->it.real.abs_timer_entry),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223344.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 52 warnings, 36 checks, 1720 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223344.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
