WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
If indeed the decision is to "preempt" the reserving task, (actually, its not

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: kernel/sched.c:100:
+               struct task_struct * resched;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: kernel/sched.c:100:
+               struct task_struct * resched;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: kernel/sched.c:100:
+               struct task_struct * resched;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#61: FILE: kernel/sched.c:104:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0}}};

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#61: FILE: kernel/sched.c:104:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0}}};
                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#61: FILE: kernel/sched.c:104:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0}}};
                                                                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#61: FILE: kernel/sched.c:104:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0}}};

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: kernel/sched.c:213:
+       struct task_struct *tsk, *target_tsk, *rtsk;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: kernel/sched.c:224:
+               if ((cpu_curr(best_cpu) == tsk) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/sched.c:224:
+               if ((cpu_curr(best_cpu) == tsk) &&$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#82: FILE: kernel/sched.c:224:
+               if ((cpu_curr(best_cpu) == tsk) &&
+                   (cpu_resched(best_cpu) == NULL))
+               {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#82: FILE: kernel/sched.c:224:
+               if ((cpu_curr(best_cpu) == tsk) &&
[...]
+               {

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: kernel/sched.c:225:
+                   (cpu_resched(best_cpu) == NULL))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/sched.c:225:
+                   (cpu_resched(best_cpu) == NULL))$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpu_resched"
#83: FILE: kernel/sched.c:225:
+                   (cpu_resched(best_cpu) == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: kernel/sched.c:226:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: kernel/sched.c:226:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: kernel/sched.c:251:
+       best_cpu = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: kernel/sched.c:258:
+               /* first check whether there is an resched IPI$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: kernel/sched.c:259:
+                * reservation for that cpu. If so consider priority$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: kernel/sched.c:260:
+                * of the reservation instead of current.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: kernel/sched.c:261:
+                * We do not have to set the need_resched flag again$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: kernel/sched.c:262:
+                * for the currently running task. It must have been$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: kernel/sched.c:263:
+                * signalled before$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: kernel/sched.c:264:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: kernel/sched.c:265:
+               tsk = cpu_resched(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: kernel/sched.c:265:
+               tsk = cpu_resched(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: kernel/sched.c:266:
+               if (tsk == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: kernel/sched.c:266:
+               if (tsk == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 15)
#107: FILE: kernel/sched.c:266:
+               if (tsk == NULL)
                tsk = cpu_curr(cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk"
#107: FILE: kernel/sched.c:266:
+               if (tsk == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: kernel/sched.c:286:
+                                       best_cpu = cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: kernel/sched.c:286:
+                                       best_cpu = cpu;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#123: FILE: kernel/sched.c:292:
        if (tsk) {
+               rtsk = cpu_resched(best_cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: kernel/sched.c:293:
+               rtsk = cpu_resched(best_cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: kernel/sched.c:293:
+               rtsk = cpu_resched(best_cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: kernel/sched.c:294:
+               if (rtsk) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: kernel/sched.c:294:
+               if (rtsk) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#125: FILE: kernel/sched.c:294:
+               if (rtsk) {
+                       rtsk->has_cpu = 0; /* return rtsk to scheduable */

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: kernel/sched.c:295:
+                       rtsk->has_cpu = 0; /* return rtsk to scheduable */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: kernel/sched.c:295:
+                       rtsk->has_cpu = 0; /* return rtsk to scheduable */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: kernel/sched.c:296:
+                       tsk->has_cpu  = 1; /* can't schedule this one no$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: kernel/sched.c:296:
+                       tsk->has_cpu  = 1; /* can't schedule this one no$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#128: FILE: kernel/sched.c:296:
more*/ +                       cpu_resched(best_cpu) = tsk;

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: kernel/sched.c:297:
+                       return;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#129: FILE: kernel/sched.c:297:
+                       tsk->has_cpu  = 1; /* can't schedule this one no
+                       return;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: kernel/sched.c:298:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: kernel/sched.c:304:
+               if (tsk->processor != this_cpu) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: kernel/sched.c:305:
+                       tsk->has_cpu  = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: kernel/sched.c:306:
+                       cpu_resched(best_cpu) = tsk;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: kernel/sched.c:307:
+                       smp_send_reschedule(best_cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: kernel/sched.c:308:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: kernel/sched.c:608:
+        * if so simply select the reserving task and next and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: kernel/sched.c:609:
+        * go to switch to it.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: kernel/sched.c:610:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: kernel/sched.c:611:
+       next = cpu_resched(this_cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: kernel/sched.c:612:
+       if (next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#155: FILE: kernel/sched.c:612:
+       if (next) {
+               next = p;

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: kernel/sched.c:613:
+               next = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: kernel/sched.c:613:
+               next = p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: kernel/sched.c:614:
+               goto found_next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: kernel/sched.c:614:
+               goto found_next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: kernel/sched.c:615:
+       }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523931.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 26 warnings, 2 checks, 111 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523931.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
