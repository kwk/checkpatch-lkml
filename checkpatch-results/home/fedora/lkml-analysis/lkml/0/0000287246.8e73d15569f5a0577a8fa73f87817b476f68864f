WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#115: 
diff -urN --exclude-from=dontdiff dual-2.6.5/arch/i386/kernel/i386_ksyms.c uaccess64-2.6.5/arch/i386/kernel/i386_ksyms.c

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/asm-i386/uaccess.h:171:
+	case 1: __get_user_x(1,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/asm-i386/uaccess.h:171:
+	case 1: __get_user_x(1,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/asm-i386/uaccess.h:171:
+	case 1: __get_user_x(1,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/asm-i386/uaccess.h:171:
+	case 1: __get_user_x(1,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#265: FILE: include/asm-i386/uaccess.h:171:
+	case 1: __get_user_x(1,__gu_val,ptr,__gu_err,"=a"); break;	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/asm-i386/uaccess.h:172:
+	case 2: __get_user_x(2,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/asm-i386/uaccess.h:172:
+	case 2: __get_user_x(2,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/asm-i386/uaccess.h:172:
+	case 2: __get_user_x(2,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/asm-i386/uaccess.h:172:
+	case 2: __get_user_x(2,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: include/asm-i386/uaccess.h:172:
+	case 2: __get_user_x(2,__gu_val,ptr,__gu_err,"=a"); break;	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: include/asm-i386/uaccess.h:173:
+	case 4: __get_user_x(4,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: include/asm-i386/uaccess.h:173:
+	case 4: __get_user_x(4,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: include/asm-i386/uaccess.h:173:
+	case 4: __get_user_x(4,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: include/asm-i386/uaccess.h:173:
+	case 4: __get_user_x(4,__gu_val,ptr,__gu_err,"=a"); break;	\
 	                                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: include/asm-i386/uaccess.h:173:
+	case 4: __get_user_x(4,__gu_val,ptr,__gu_err,"=a"); break;	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: include/asm-i386/uaccess.h:174:
+	case 8: __get_user_x(8,__gu_val,ptr,__gu_err,"=A"); break;	\
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: include/asm-i386/uaccess.h:174:
+	case 8: __get_user_x(8,__gu_val,ptr,__gu_err,"=A"); break;	\
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: include/asm-i386/uaccess.h:174:
+	case 8: __get_user_x(8,__gu_val,ptr,__gu_err,"=A"); break;	\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: include/asm-i386/uaccess.h:174:
+	case 8: __get_user_x(8,__gu_val,ptr,__gu_err,"=A"); break;	\
 	                                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: include/asm-i386/uaccess.h:174:
+	case 8: __get_user_x(8,__gu_val,ptr,__gu_err,"=A"); break;	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#269: FILE: include/asm-i386/uaccess.h:175:
+	default: __get_user_bad(); __gu_val = 0; __gu_err = 0;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/asm-i386/uaccess.h:181:
+extern void __get_user_1(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: include/asm-i386/uaccess.h:182:
+extern void __get_user_2(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/asm-i386/uaccess.h:183:
+extern void __get_user_4(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/asm-i386/uaccess.h:184:
+extern void __get_user_8(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#283: FILE: include/asm-i386/uaccess.h:186:
+#define __get_user_x(size, x, ptr, err, rtype)		\
+	__asm__ __volatile__("call __get_user_" #size	\
+		: "=c" (err), rtype (x)			\
+		: "0" (ptr));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#283: FILE: include/asm-i386/uaccess.h:186:
+#define __get_user_x(size, x, ptr, err, rtype)		\
+	__asm__ __volatile__("call __get_user_" #size	\
+		: "=c" (err), rtype (x)			\
+		: "0" (ptr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#285: FILE: include/asm-i386/uaccess.h:188:
+		: "=c" (err), rtype (x)			\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/asm-i386/uaccess.h:275:
+extern void __put_user_bad(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/asm-i386/uaccess.h:286:
+	case 8: __put_user_u64(x,ptr,retval,errret); break;		\
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/asm-i386/uaccess.h:286:
+	case 8: __put_user_u64(x,ptr,retval,errret); break;		\
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/asm-i386/uaccess.h:286:
+	case 8: __put_user_u64(x,ptr,retval,errret); break;		\
 	                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#333: FILE: include/asm-i386/uaccess.h:286:
+	case 8: __put_user_u64(x,ptr,retval,errret); break;		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#334: FILE: include/asm-i386/uaccess.h:287:
+	default: __put_user_bad();					\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#351: FILE: include/asm-i386/uaccess.h:326:
+#define __put_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %%eax,%2\n"				\
+		"2:	movl %%edx,%3\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err)						\
+		: "A" (x), "m" (__m(addr)), "m" (__m(4+(char*)addr)),	\
+		  "i" (errret), "0" (err))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#351: FILE: include/asm-i386/uaccess.h:326:
+#define __put_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %%eax,%2\n"				\
+		"2:	movl %%edx,%3\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err)						\
+		: "A" (x), "m" (__m(addr)), "m" (__m(4+(char*)addr)),	\
+		  "i" (errret), "0" (err))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#351: FILE: include/asm-i386/uaccess.h:326:
+#define __put_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %%eax,%2\n"				\
+		"2:	movl %%edx,%3\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err)						\
+		: "A" (x), "m" (__m(addr)), "m" (__m(4+(char*)addr)),	\
+		  "i" (errret), "0" (err))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#366: FILE: include/asm-i386/uaccess.h:341:
+		: "A" (x), "m" (__m(addr)), "m" (__m(4+(char*)addr)),	\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#366: FILE: include/asm-i386/uaccess.h:341:
+		: "A" (x), "m" (__m(addr)), "m" (__m(4+(char*)addr)),	\
 		                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#386: FILE: include/asm-i386/uaccess.h:363:
+	case 8: __get_user_u64(x,ptr,retval,errret);break;		\
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#386: FILE: include/asm-i386/uaccess.h:363:
+	case 8: __get_user_u64(x,ptr,retval,errret);break;		\
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#386: FILE: include/asm-i386/uaccess.h:363:
+	case 8: __get_user_u64(x,ptr,retval,errret);break;		\
 	                                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#386: FILE: include/asm-i386/uaccess.h:363:
+	case 8: __get_user_u64(x,ptr,retval,errret);break;		\
 	                                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#386: FILE: include/asm-i386/uaccess.h:363:
+	case 8: __get_user_u64(x,ptr,retval,errret);break;		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#387: FILE: include/asm-i386/uaccess.h:364:
+	default: __get_user_bad(); (x) = 0;				\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#395: FILE: include/asm-i386/uaccess.h:384:
+#define __get_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %2,%%eax\n"				\
+		"2:	movl %3,%%edx\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	xorl %%eax,%%eax\n"				\
+		"	xorl %%edx,%%edx\n"				\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err), "=A" (x)					\
+		: "m" (__m(addr)), "m" (__m(4+(char*)addr)),		\
+		  "i" (errret), "0" (err));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#395: FILE: include/asm-i386/uaccess.h:384:
+#define __get_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %2,%%eax\n"				\
+		"2:	movl %3,%%edx\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	xorl %%eax,%%eax\n"				\
+		"	xorl %%edx,%%edx\n"				\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err), "=A" (x)					\
+		: "m" (__m(addr)), "m" (__m(4+(char*)addr)),		\
+		  "i" (errret), "0" (err));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#395: FILE: include/asm-i386/uaccess.h:384:
+#define __get_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %2,%%eax\n"				\
+		"2:	movl %3,%%edx\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	xorl %%eax,%%eax\n"				\
+		"	xorl %%edx,%%edx\n"				\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err), "=A" (x)					\
+		: "m" (__m(addr)), "m" (__m(4+(char*)addr)),		\
+		  "i" (errret), "0" (err));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#395: FILE: include/asm-i386/uaccess.h:384:
+#define __get_user_u64(x, addr, err, errret)				\
+	__asm__ __volatile__(						\
+		"1:	movl %2,%%eax\n"				\
+		"2:	movl %3,%%edx\n"				\
+		"3:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"4:	movl %4,%0\n"					\
+		"	xorl %%eax,%%eax\n"				\
+		"	xorl %%edx,%%edx\n"				\
+		"	jmp 3b\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.align 4\n"					\
+		"	.long 1b,4b\n"					\
+		"	.long 2b,4b\n"					\
+		".previous"						\
+		: "=r" (err), "=A" (x)					\
+		: "m" (__m(addr)), "m" (__m(4+(char*)addr)),		\
+		  "i" (errret), "0" (err));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#412: FILE: include/asm-i386/uaccess.h:401:
+		: "m" (__m(addr)), "m" (__m(4+(char*)addr)),		\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#412: FILE: include/asm-i386/uaccess.h:401:
+		: "m" (__m(addr)), "m" (__m(4+(char*)addr)),		\
 		                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 4 warnings, 11 checks, 326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
