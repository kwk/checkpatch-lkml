WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
The attached patch introduces a simple mutex implementation as an alternative

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#38: 
     capabilites to make it more easier to debug.
     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#115: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: include/linux/mutex-cmpxchg.h:1:
+/* mutex-cmpxchg.h: compare-and-exchange-based mutexes

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#170: FILE: include/linux/mutex-cmpxchg.h:42:
+	volatile unsigned long	state;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#171: FILE: include/linux/mutex-cmpxchg.h:43:
+	spinlock_t		wait_lock;

CHECK:SPACING: No space is necessary after a cast
#188: FILE: include/linux/mutex-cmpxchg.h:60:
+#define __mutex_owner() ((unsigned long) current_thread_info())

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#200: FILE: include/linux/mutex-cmpxchg.h:72:
+#define DECLARE_MUTEX(name) \
+	struct mutex name = MUTEX_UNLOCKED(name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#203: FILE: include/linux/mutex-cmpxchg.h:75:
+static inline void __mutex_init(struct mutex *mutex, unsigned state)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/mutex-cmpxchg.h:103:
+extern void fastcall mutex_lock(struct mutex *mutex);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo fastcall  bar" should be "foo fastcall bar"
#232: FILE: include/linux/mutex-cmpxchg.h:104:
+extern int fastcall  mutex_lock_interruptible(struct mutex *mutex);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/mutex-cmpxchg.h:104:
+extern int fastcall  mutex_lock_interruptible(struct mutex *mutex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/linux/mutex-cmpxchg.h:105:
+extern void fastcall mutex_unlock(struct mutex *mutex);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: include/linux/mutex-cmpxchg.h:107:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#242: FILE: include/linux/mutex-default.h:1:
+/* mutex-default.h: default mutex implementation: wrap semaphores

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#275: FILE: include/linux/mutex-default.h:34:
+# define __MUTEX_OWNER_INIT(owner) , .__owner = NULL
                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#286: FILE: include/linux/mutex-default.h:45:
+#define DECLARE_MUTEX(name) \
+	struct mutex name = MUTEX_UNLOCKED(name)

WARNING:CONSIDER_COMPLETION: consider using a completion
#296: FILE: include/linux/mutex-default.h:55:
+	sema_init(&mutex->sem, 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: include/linux/mutex-default.h:114:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#373: FILE: include/linux/mutex-xchg.h:1:
+/* mutex-xchg.h: simple exchange-based mutexes

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#427: FILE: include/linux/mutex-xchg.h:55:
+	volatile int		state;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#428: FILE: include/linux/mutex-xchg.h:56:
+	spinlock_t		wait_lock;

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#445: FILE: include/linux/mutex-xchg.h:73:
+#define __mutex_release(mutex) \
+	do { (mutex)->state = __MUTEX_STATE_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#446: FILE: include/linux/mutex-xchg.h:74:
+	do { (mutex)->state = __MUTEX_STATE_UNLOCKED; } while(0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#455: FILE: include/linux/mutex-xchg.h:83:
+# define __MUTEX_OWNER_INIT(owner) , .__owner = NULL
                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#468: FILE: include/linux/mutex-xchg.h:96:
+#define DECLARE_MUTEX(name) \
+	struct mutex name = MUTEX_UNLOCKED(name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#471: FILE: include/linux/mutex-xchg.h:99:
+static inline void __mutex_init(struct mutex *mutex, unsigned state)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: include/linux/mutex-xchg.h:144:
+extern void fastcall __mutex_lock(struct mutex *mutex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: include/linux/mutex-xchg.h:145:
+extern int fastcall __mutex_lock_interruptible(struct mutex *mutex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: include/linux/mutex-xchg.h:146:
+extern void fastcall mutex_unlock(struct mutex *mutex);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#548: FILE: include/linux/mutex.h:1:
+/* mutex.h: mutex implementation base

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#601: FILE: lib/Kconfig.debug:114:
+config DEBUG_MUTEX_OWNER
+	bool "Mutex owner tracking and checking"
+	depends on DEBUG_KERNEL
+	help
+	  If you say Y here, the process currently owning a mutex will be
+	  remembered, and a warning will be issued if anyone other than that
+	  process releases it.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 15 warnings, 13 checks, 467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
