WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#87: FILE: drivers/block/Kconfig:459:
+config BLK_FCACHE
+	bool "Boot frontend cache driver"
+	help
+	This driver puts the data needed for a boot sequentially in a
+	defined place, taking all seeks out of the boot process.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: drivers/block/fcache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#122: FILE: drivers/block/fcache.c:12:
+ * the fcache is located on another disk, the hit should be small. If the
+ * the fcache is located on the same disk (another partition), it runs

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#160: FILE: drivers/block/fcache.c:50:
+	spinlock_t lock;

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#294: FILE: drivers/block/fcache.c:184:
+	header->max_extents = ((fdev->cache_blocks - 1) * PAGE_SIZE) / (PAGE_SIZE - sizeof(struct fcache_extent));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#297: FILE: drivers/block/fcache.c:187:
+	header->extent_offset = 1 + (header->max_extents * sizeof(struct fcache_extent) / PAGE_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: drivers/block/fcache.c:215:
+	printk("fcache: new header: first block %lu, max %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: drivers/block/fcache.c:216:
+	printk("fcache: new header: first block %lu, max %lu\n",
+				fdev->next_cache_block, fdev->max_extents);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#387: FILE: drivers/block/fcache.c:277:
+	this_extents = nr_extents = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#417: FILE: drivers/block/fcache.c:307:
+	printk("fcache: wrote %d extents, holding %llu sectors of data\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: drivers/block/fcache.c:308:
+	printk("fcache: wrote %d extents, holding %llu sectors of data\n",
+				nr_extents, (unsigned long long) sectors);

CHECK:SPACING: No space is necessary after a cast
#418: FILE: drivers/block/fcache.c:308:
+				nr_extents, (unsigned long long) sectors);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: drivers/block/fcache.c:329:
+		printk("fcache: wrote header (extents=%lu,serial=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: drivers/block/fcache.c:330:
+		printk("fcache: wrote header (extents=%lu,serial=%d)\n",
+						fdev->nr_extents, fdev->serial);

CHECK:SPACING: No space is necessary after a cast
#636: FILE: drivers/block/fcache.c:526:
+typedef void (chopper_done_t) (struct fcache_endio_data *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#690: FILE: drivers/block/fcache.c:580:
+			BUG_ON(!bio->bi_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: drivers/block/fcache.c:637:
+		fcache_io_chopper(fdev, fed, fcache_extent_write_endio,
+					fcache_chop_write_done, WRITE);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#766: FILE: drivers/block/fcache.c:656:
+			fed = list_entry(fdev->list.next, struct fcache_endio_data,list);
 			                                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#777: FILE: drivers/block/fcache.c:667:
+			printk(KERN_ERR "fcache: read error from device\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#833: FILE: drivers/block/fcache.c:723:
+	if (start > fe->fs_sector)
[...]
+	else if (start < fe->fs_sector) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: drivers/block/fcache.c:729:
+		BUG_ON(!(bio->bi_flags & (1 << BIO_CLONED)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: drivers/block/fcache.c:730:
+		BUG_ON(bio_data_dir(bio) != WRITE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#884: FILE: drivers/block/fcache.c:774:
+		BUG_ON(!(bio->bi_flags & (1 << BIO_CLONED)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#885: FILE: drivers/block/fcache.c:775:
+		BUG_ON(bio_data_dir(bio) != WRITE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#920: FILE: drivers/block/fcache.c:810:
+	BUG_ON(bio->bi_sector < fe->cache_sector);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#921: FILE: drivers/block/fcache.c:811:
+	BUG_ON(bio->bi_sector + (bio->bi_size >> 9) > fe->cache_sector + (fe->fs_size >> 9));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#938: FILE: drivers/block/fcache.c:828:
+		printk(KERN_ERR "fcache: overwrite error, cache off\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1029: FILE: drivers/block/fcache.c:919:
+		printk(KERN_ERR "fcache: ran out of space, priming now off\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1139: FILE: drivers/block/fcache.c:1029:
+		printk(KERN_ERR "fcache: bad magic %x\n", header->magic);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1143: FILE: drivers/block/fcache.c:1033:
+		printk(KERN_ERR "fcache: bad version %d\n", header->version);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1147: FILE: drivers/block/fcache.c:1037:
+		printk(KERN_ERR "fcache: device mismatch (%s/%s\n", b,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: drivers/block/fcache.c:1038:
+		printk(KERN_ERR "fcache: device mismatch (%s/%s\n", b,
+							header->fs_dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1153: FILE: drivers/block/fcache.c:1043:
+		printk(KERN_ERR "fcache: fs appears to have changed size\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1165: FILE: drivers/block/fcache.c:1055:
+		printk(KERN_ERR "fcache: found serial %d, expected %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: drivers/block/fcache.c:1056:
+		printk(KERN_ERR "fcache: found serial %d, expected %d.\n",
+							header->serial, serial);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1167: FILE: drivers/block/fcache.c:1057:
+		printk(KERN_ERR "fcache: reprime the cache!\n");

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1176: FILE: drivers/block/fcache.c:1066:
+		printk("fcache: header looks valid (extents=%ld extents, serial=%u)\n", fdev->nr_extents, fdev->serial);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1176: FILE: drivers/block/fcache.c:1066:
+		printk("fcache: header looks valid (extents=%ld extents, serial=%u)\n", fdev->nr_extents, fdev->serial);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1179: FILE: drivers/block/fcache.c:1069:
+		printk("fcache: loaded %d extents\n", ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1184: FILE: drivers/block/fcache.c:1074:
+		if (ret != fdev->nr_extents) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1187: FILE: drivers/block/fcache.c:1077:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1268: FILE: drivers/block/fcache.c:1158:
+		sector_t end_fe, end_bi;
+		fe = extents[i];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: drivers/block/fcache.c:1201:
+		fcache_io_chopper(fdev, fed, fcache_chop_read_endio,
+					fcache_chop_read_done, READ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_sector >= fdev->fs_start_sector'
#1371: FILE: drivers/block/fcache.c:1261:
+	if ((bio->bi_sector >= fdev->fs_start_sector) &&
+	    (bio->bi_sector < (fdev->fs_start_sector + fdev->fs_sectors)) &&
+	    !test_bit(FDEV_F_DOWN, &fdev->flags) &&
+	    !fcache_bio_seen(bio)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1375: FILE: drivers/block/fcache.c:1265:
+	    !fcache_bio_seen(bio)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1430: FILE: drivers/block/fcache.c:1320:
+	if (ret != PAGE_SIZE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1435: FILE: drivers/block/fcache.c:1325:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1441: FILE: drivers/block/fcache.c:1331:
+	if (priming) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1444: FILE: drivers/block/fcache.c:1334:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1448: FILE: drivers/block/fcache.c:1338:
+		printk("fcache: %s opened successfully (%spriming)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: drivers/block/fcache.c:1339:
+		printk("fcache: %s opened successfully (%spriming)\n",
+						bdevname(bdev, b),

CHECK:SPACING: No space is necessary after a cast
#1472: FILE: drivers/block/fcache.c:1362:
+			(void) xchg(&q->make_request_fn, fdev->mfn);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1501: FILE: drivers/block/fcache.c:1391:
+	fcache_bdev = open_by_devnum(cache_dev, FMODE_READ|FMODE_WRITE);
 	                                                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1514: FILE: drivers/block/fcache.c:1404:
+EXPORT_SYMBOL(fcache_dev_open);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1526: FILE: drivers/block/fcache.c:1416:
+	printk("fcache: ios r/w %u/%u, hits %u, misses %u, overwrites %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1527: FILE: drivers/block/fcache.c:1417:
+	printk("fcache: ios r/w %u/%u, hits %u, misses %u, overwrites %u\n",
+					fdev->ios[0], fdev->ios[1], fdev->hits,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1542: FILE: drivers/block/fcache.c:1432:
+EXPORT_SYMBOL(fcache_dev_close);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1552: FILE: drivers/block/fcache.c:1442:
+	fcache_fed_slab = kmem_cache_create("fcache_fed",
+					sizeof(struct fcache_endio_data), 0, 0,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1595: FILE: fs/ext3/super.c:388:
+extern int fcache_dev_close(struct block_device *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1595: FILE: fs/ext3/super.c:388:
+extern int fcache_dev_close(struct block_device *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1595: FILE: fs/ext3/super.c:388:
+extern int fcache_dev_close(struct block_device *, int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1620: FILE: fs/ext3/super.c:413:
+	printk(KERN_ERR "ext3: failed to open fcache (err=%d)\n", ret);

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#1649: FILE: fs/ext3/super.c:672:
+	Opt_grpquota, Opt_fcache_dev, Opt_fcache_prime,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fcache_dev>
#1649: FILE: fs/ext3/super.c:672:
+	Opt_grpquota, Opt_fcache_dev, Opt_fcache_prime,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fcache_prime>
#1649: FILE: fs/ext3/super.c:672:
+	Opt_grpquota, Opt_fcache_dev, Opt_fcache_prime,

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1683: FILE: fs/ext3/super.c:1061:
+			maj = simple_strtol(p, &pm, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1684: FILE: fs/ext3/super.c:1062:
+			min = simple_strtol(pm + 1, NULL, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1819: FILE: include/linux/ext3_fs.h:854:
+static inline int fcache_dev_open(struct block_device *bdev,
+			unsigned long cache_dev, int priming, int serial)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000068243.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 38 warnings, 29 checks, 1738 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000068243.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
