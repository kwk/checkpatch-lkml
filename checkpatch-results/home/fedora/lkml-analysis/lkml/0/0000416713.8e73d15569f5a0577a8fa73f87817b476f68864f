WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#20: 
1) Introduce linux/bug.h and #include it from linux/kernel.h so noone
                                                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.45/include/linux/bug.h working-2.5.45-bug/include/linux/bug.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#31: FILE: include/linux/bug.h:1:
+#ifndef _LINUX_BUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#36: FILE: include/linux/bug.h:6:
+extern void dump_stack(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#38: FILE: include/linux/bug.h:8:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#38: FILE: include/linux/bug.h:8:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#38: FILE: include/linux/bug.h:8:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#40: FILE: include/linux/bug.h:10:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#41: FILE: include/linux/bug.h:11:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#41: FILE: include/linux/bug.h:11:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#47: FILE: include/linux/bug.h:17:
+/* Fail at build-time (condition must be a constant expression:
+   BUILD_BUG does not exist). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#47: FILE: include/linux/bug.h:17:
+   BUILD_BUG does not exist). */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#48: FILE: include/linux/bug.h:18:
+extern void BUILD_BUG(void);

ERROR:SPACING: space required before the open parenthesis '('
#49: FILE: include/linux/bug.h:19:
+#define BUILD_BUG_ON(condition) do { if (condition) BUILD_BUG(); } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: include/asm-alpha/bug.h:1:
+#ifndef _ALPHA_BUG_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#100: FILE: include/asm-alpha/bug.h:6:
+/* ??? Would be nice to use .gprel32 here, but we can't be sure that the
+   function loaded the GP, so this could fail in modules.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#100: FILE: include/asm-alpha/bug.h:6:
+   function loaded the GP, so this could fail in modules.  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: include/asm-alpha/bug.h:7:
+#define BUG() \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#101: FILE: include/asm-alpha/bug.h:7:
+#define BUG() \
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \
+		       : : "i" (PAL_bugchk), "i"(__LINE__), "i"(__FILE__))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/asm-alpha/bug.h:8:
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#102: FILE: include/asm-alpha/bug.h:8:
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#102: FILE: include/asm-alpha/bug.h:8:
+  __asm__ __volatile__("call_pal %0  # bugchk\n\t"".long %1\n\t.8byte %2" \

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#113: FILE: include/asm-alpha/page.h:5:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: include/asm-arm/bug.h:1:
+#ifndef _ASMARM_BUG_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/asm-arm/bug.h:6:
+extern void __bug(const char *file, int line, void *data);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: include/asm-arm/bug.h:9:
+#define BUG()		__bug(__FILE__, __LINE__, NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#148: FILE: include/asm-arm/bug.h:15:
+#define BUG()		(*(int *)0 = 0)

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#161: FILE: include/asm-arm/page.h:10:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#191: FILE: include/asm-cris/bug.h:1:
+#ifndef _CRIS_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#194: FILE: include/asm-cris/bug.h:4:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#194: FILE: include/asm-cris/bug.h:4:
+#define BUG() do { \
+  printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: include/asm-cris/bug.h:5:
+  printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: include/asm-cris/bug.h:5:
+  printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#206: FILE: include/asm-cris/page.h:6:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#233: FILE: include/asm-i386/bug.h:1:
+#ifndef _I386_BUG_H

WARNING:IF_1: Consider removing the #if 1 and its #endif
#242: FILE: include/asm-i386/bug.h:10:
+#if 1	/* Set to zero for a slightly smaller kernel */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: include/asm-i386/bug.h:11:
+#define BUG()				\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#243: FILE: include/asm-i386/bug.h:11:
+#define BUG()				\
+ __asm__ __volatile__(	"ud2\n"		\
+			"\t.word %c0\n"	\
+			"\t.long %c1\n"	\
+			 : : "i" (__LINE__), "i" (__FILE__))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: include/asm-i386/bug.h:12:
+ __asm__ __volatile__(^I"ud2\n"^I^I\$

ERROR:SPACING: space prohibited after that open parenthesis '('
#244: FILE: include/asm-i386/bug.h:12:
+ __asm__ __volatile__(	"ud2\n"		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: include/asm-i386/bug.h:17:
+#define BUG() __asm__ __volatile__("ud2\n")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#249: FILE: include/asm-i386/bug.h:17:
+#define BUG() __asm__ __volatile__("ud2\n")

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#260: FILE: include/asm-i386/page.h:16:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#292: FILE: include/asm-ia64/bug.h:1:
+#ifndef _ASM_IA64_BUG_H

CHECK:SPACING: No space is necessary after a cast
#298: FILE: include/asm-ia64/bug.h:7:
+# define ia64_abort()	(*(volatile int *) 0 = 0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#298: FILE: include/asm-ia64/bug.h:7:
+# define ia64_abort()	(*(volatile int *) 0 = 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: include/asm-ia64/bug.h:9:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); ia64_abort(); } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: include/asm-ia64/bug.h:9:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); ia64_abort(); } while (0)

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#310: FILE: include/asm-ia64/page.h:13:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#331: FILE: include/asm-m68k/bug.h:1:
+#ifndef _M68K_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: include/asm-m68k/bug.h:8:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#339: FILE: include/asm-m68k/bug.h:9:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#343: FILE: include/asm-m68k/bug.h:13:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#344: FILE: include/asm-m68k/bug.h:14:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: include/asm-m68k/bug.h:19:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#349: FILE: include/asm-m68k/bug.h:19:
+#define BUG() do { \
+	asm volatile("illegal"); \
+} while (0)

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#362: FILE: include/asm-m68k/page.h:19:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#395: FILE: include/asm-mips/bug.h:1:
+#ifndef __ASM_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#398: FILE: include/asm-mips/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#398: FILE: include/asm-mips/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#398: FILE: include/asm-mips/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)
                                                                                   ^

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#408: FILE: include/asm-mips/page.h:20:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#420: FILE: include/asm-mips64/bug.h:1:
+#ifndef _ASM_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: include/asm-mips64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#423: FILE: include/asm-mips64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#423: FILE: include/asm-mips64/bug.h:4:
+#define BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; } while (0)
                                                                                   ^

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#433: FILE: include/asm-mips64/page.h:13:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#449: FILE: include/asm-parisc/bug.h:1:
+#ifndef _PARISC_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: include/asm-parisc/bug.h:10:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#458: FILE: include/asm-parisc/bug.h:10:
+#define BUG() do { \
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \
+} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#459: FILE: include/asm-parisc/bug.h:11:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#470: FILE: include/asm-parisc/page.h:13:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#495: FILE: include/asm-ppc/bug.h:1:
+#ifndef _PPC_PAGE_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#504: FILE: include/asm-ppc/bug.h:10:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: include/asm-ppc/bug.h:11:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#509: FILE: include/asm-ppc/bug.h:15:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#510: FILE: include/asm-ppc/bug.h:16:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#524: FILE: include/asm-ppc/page.h:11:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#552: FILE: include/asm-ppc64/bug.h:1:
+#ifndef _PPC64_BUG_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#565: FILE: include/asm-ppc64/bug.h:14:
+extern void xmon(struct pt_regs *excp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#566: FILE: include/asm-ppc64/bug.h:15:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: include/asm-ppc64/bug.h:16:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#571: FILE: include/asm-ppc64/bug.h:20:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: include/asm-ppc64/bug.h:21:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#594: FILE: include/asm-ppc64/page.h:26:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#623: FILE: include/asm-s390/bug.h:1:
+#ifndef _S390_PAGE_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: include/asm-s390/bug.h:4:
+#define BUG() do { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: include/asm-s390/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: include/asm-s390/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#627: FILE: include/asm-s390/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: include/asm-s390/bug.h:6:
+        __asm__ __volatile__(".word 0x0000"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: include/asm-s390/bug.h:6:
+        __asm__ __volatile__(".word 0x0000"); \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: include/asm-s390/bug.h:7:
+} while (0)                                       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#639: FILE: include/asm-s390/page.h:23:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#660: FILE: include/asm-s390x/bug.h:1:
+#ifndef _S390_PAGE_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: include/asm-s390x/bug.h:4:
+#define BUG() do { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: include/asm-s390x/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: include/asm-s390x/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#664: FILE: include/asm-s390x/bug.h:5:
+        printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: include/asm-s390x/bug.h:6:
+        __asm__ __volatile__(".long 0"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: include/asm-s390x/bug.h:6:
+        __asm__ __volatile__(".long 0"); \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: include/asm-s390x/bug.h:7:
+} while (0)                                       $

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#677: FILE: include/asm-s390x/page.h:22:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#698: FILE: include/asm-sh/bug.h:1:
+#ifndef __ASM_SH_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: include/asm-sh/bug.h:7:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#705: FILE: include/asm-sh/bug.h:8:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#717: FILE: include/asm-sh/page.h:27:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#741: FILE: include/asm-sparc/bug.h:1:
+#ifndef _SPARC_BUG_H

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#749: FILE: include/asm-sparc/bug.h:9:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: include/asm-sparc/bug.h:11:
+#define BUG() do { \

WARNING:MEMORY_BARRIER: memory barrier without comment
#752: FILE: include/asm-sparc/bug.h:12:
+	mb(); \

WARNING:MEMORY_BARRIER: memory barrier without comment
#754: FILE: include/asm-sparc/bug.h:14:
+	mb(); \

ERROR:SPACING: space required before the open parenthesis '('
#755: FILE: include/asm-sparc/bug.h:15:
+} while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: include/asm-sparc/bug.h:17:
+#define BUG() do { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#758: FILE: include/asm-sparc/bug.h:18:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#758: FILE: include/asm-sparc/bug.h:18:
+	printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); *(int *)0=0; \
 	                                                               ^

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#788: FILE: include/asm-sparc/page.h:31:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#796: FILE: include/asm-sparc64/bug.h:1:
+#ifndef _SPARC64_BUG_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: include/asm-sparc64/bug.h:6:
+extern void do_BUG(const char *file, int line);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#802: FILE: include/asm-sparc64/bug.h:7:
+#define BUG() do {					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#807: FILE: include/asm-sparc64/bug.h:12:
+#define BUG()		__builtin_trap()

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#828: FILE: include/asm-sparc64/page.h:22:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#836: FILE: include/asm-um/bug.h:1:
+#ifndef __UM_BUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: include/asm-um/bug.h:4:
+#define BUG() do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#839: FILE: include/asm-um/bug.h:4:
+#define BUG() do { \
+	panic("kernel BUG at %s:%d!\n", __FILE__, __LINE__); \
+} while (0)

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#855: FILE: include/asm-um/page.h:28:
+#include <asm/bug.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#863: FILE: include/asm-x86_64/bug.h:1:
+#ifndef _X86_64_BUG_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: include/asm-x86_64/bug.h:7:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: include/asm-x86_64/bug.h:8:
+struct bug_frame { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#871: FILE: include/asm-x86_64/bug.h:9:
+       unsigned char ud2[2];          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: include/asm-x86_64/bug.h:9:
+       unsigned char ud2[2];          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: include/asm-x86_64/bug.h:10:
+^Ichar *filename;    /* should use 32bit offset instead, but the assembler doesn't like it */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: include/asm-x86_64/bug.h:11:
+^Iunsigned short line; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: include/asm-x86_64/bug.h:12:
+} __attribute__((packed)); $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#874: FILE: include/asm-x86_64/bug.h:12:
+} __attribute__((packed)); 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#875: FILE: include/asm-x86_64/bug.h:13:
+#define BUG() \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#875: FILE: include/asm-x86_64/bug.h:13:
+#define BUG() \
+	asm volatile("ud2 ; .quad %c1 ; .short %c0" :: \
+		     "i"(__LINE__), "i" (__stringify(KBUILD_BASENAME)))

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#889: FILE: include/asm-x86_64/page.h:67:
+#include <asm/bug.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416713.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 106 warnings, 7 checks, 713 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416713.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
