WARNING:TYPO_SPELLING: 'witout' may be misspelled - perhaps 'without'?
#39: 
> and faster witout that indirection..
             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -uNr -X dontdiff -p linux-2.6.10-mm2.orig/fs/afs/file.c linux-2.6.10-mm2/fs/afs/file.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/afs/file.c:36:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/afs/file.c:36:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#74: FILE: fs/afs/file.c:65:
+struct vm_operations_struct afs_fs_vm_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: fs/afs/file.c:89:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: fs/afs/file.c:89:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/mm.h:765:
+extern struct page *filemap_nopage(struct vm_area_struct *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#124: FILE: include/linux/mm.h:765:
+extern struct page *filemap_nopage(struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#124: FILE: include/linux/mm.h:765:
+extern struct page *filemap_nopage(struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#124: FILE: include/linux/mm.h:765:
+extern struct page *filemap_nopage(struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: include/linux/mm.h:766:
+extern struct page *filemap_nopage(struct vm_area_struct *,
+		unsigned long, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgprot_t' should also have an identifier name
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#126: FILE: include/linux/mm.h:767:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: include/linux/mm.h:768:
+extern int filemap_populate(struct vm_area_struct *, unsigned long,
+		unsigned long, pgprot_t, unsigned long, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: mm/filemap.c:1481:
+int filemap_populate(struct vm_area_struct *vma,
 			unsigned long addr,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218512.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 12 warnings, 5 checks, 117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218512.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
