ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: fs/namei.c:445:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#57: FILE: fs/namei.c:445:
 
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#61: FILE: fs/namei.c:449:
+static inline int walk_one(struct nameidata *nd)
                                              ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: fs/namei.c:452:
+	struct dentry * dentry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#65: FILE: fs/namei.c:453:
+	struct inode * inode;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: fs/namei.c:454:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#72: FILE: fs/namei.c:460:
+	if (nd->last.name[0] == '.') switch (nd->last.len) {
+		default:
[...]
+		case 2:	
[...]
+		case 1:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#72: FILE: fs/namei.c:460:
+	if (nd->last.name[0] == '.') switch (nd->last.len) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: fs/namei.c:463:
+^I^Icase 2:^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#78: FILE: fs/namei.c:466:
+			follow_dotdot(nd);
 			              ^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#80: FILE: fs/namei.c:468:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: fs/namei.c:478:
+^I^Iif (err < 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: fs/namei.c:483:
+^Identry = cached_lookup(nd->dentry, &nd->last, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: fs/namei.c:484:
+	dentry = cached_lookup(nd->dentry, &nd->last, 
+			(nd->flags & LOOKUP_LAST) ? 0 : LOOKUP_CONTINUE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: fs/namei.c:486:
+^I^Identry = real_lookup(nd->dentry, &nd->last, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: fs/namei.c:487:
+		dentry = real_lookup(nd->dentry, &nd->last, 
+			    (nd->flags & LOOKUP_LAST) ? 0 : LOOKUP_CONTINUE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: fs/namei.c:489:
+^I^Iif (IS_ERR(dentry)) $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#116: FILE: fs/namei.c:504:
+		err = do_follow_link(dentry, nd);
 		                             ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: fs/namei.c:516:
+^Iif (!inode) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#131: FILE: fs/namei.c:519:
+	if ((nd->flags & LOOKUP_LAST) && !(nd->flags & LOOKUP_DIRECTORY))
+			return 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: fs/namei.c:522:
+^Ierr = -ENOTDIR; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: fs/namei.c:523:
+^Iif (!inode->i_op || !inode->i_op->lookup) $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#141: FILE: fs/namei.c:529:
+	path_release(nd);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/namei.c:542:
+int lookup_parent(const char * name, struct nameidata *nd)
                                                        ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: fs/namei.c:542:
+int lookup_parent(const char * name, struct nameidata *nd)

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#166: FILE: fs/namei.c:551:
+		nd->last = (struct qstr) { name : ".", len : 1, hash : 0 };
 		                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/namei.c:581:
+^I^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#236: FILE: fs/namei.c:590:
+		if ((err = walk_one(nd)) < 0)
 		                    ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: fs/namei.c:590:
+		if ((err = walk_one(nd)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/namei.c:595:
+^I^Icontinue; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: fs/namei.c:602:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/namei.c:604:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#283: FILE: fs/namei.c:604:
+		if (nd->flags & LOOKUP_PARENT) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: fs/namei.c:624:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#354: FILE: fs/namei.c:626:
+	err = lookup_parent(name, nd);
 	                          ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: fs/namei.c:629:
+^Iif (!err && !(nd->flags & LOOKUP_PARENT)) $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#358: FILE: fs/namei.c:630:
+		err = walk_one(nd); 
 		               ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: fs/namei.c:630:
+^I^Ierr = walk_one(nd); $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#370: FILE: fs/namei.c:1916:
+	res = lookup_parent(link, nd);
 	                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#374: FILE: fs/namei.c:1920:
+		res = walk_one(nd);
 		               ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461686.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 12 warnings, 4 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461686.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
