WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#84: FILE: mm/filemap.c:1070:
+	volatile char c;

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: mm/filemap.c:1079:
+^I^I ^Iret = __get_user(c, (char *)end);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: mm/filemap.c:1079:
+^I^I ^Iret = __get_user(c, (char *)end);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: mm/filemap.c:1904:
+filemap_copy_from_user(struct page *page, unsigned long offset,
+			const char *buf, unsigned bytes, int fault_expected)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: mm/filemap.c:1904:
+			const char *buf, unsigned bytes, int fault_expected)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#118: FILE: mm/filemap.c:1915:
+			printk("%s: Unexpected page fault\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#118: FILE: mm/filemap.c:1915:
+			printk("%s: Unexpected page fault\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: mm/filemap.c:2112:
+		page_fault = filemap_copy_from_user(page, offset,
+						buf, bytes, fault_expected);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: fs/buffer.c:1881:
+						memset(kaddr+to, 0,
 						            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: fs/buffer.c:1882:
+						memset(kaddr+to, 0,
+							block_end-to);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#211: FILE: fs/buffer.c:1882:
+							block_end-to);
 							         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: fs/buffer.c:1884:
+						memset(kaddr+block_start,
 						            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: fs/buffer.c:1885:
+						memset(kaddr+block_start,
+							0, from-block_start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#214: FILE: fs/buffer.c:1885:
+							0, from-block_start);
 							       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: fs/buffer.c:2021:
+				void *kaddr = kmap_atomic(page, KM_USER0);
+				memset(kaddr + i * blocksize, 0, blocksize);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#831: FILE: fs/reiserfs/inode.c:1789:
 	if (length) {
+	    char *kaddr;

WARNING:TABSTOP: Statements should start on a tabstop
#832: FILE: fs/reiserfs/inode.c:1790:
+	    char *kaddr;

WARNING:SPACING: space prohibited before semicolon
#836: FILE: fs/reiserfs/inode.c:1793:
+	    kaddr = kmap_atomic(page, KM_USER0) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: fs/reiserfs/inode.c:1794:
+^I    memset(kaddr + offset, 0, length) ;   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#837: FILE: fs/reiserfs/inode.c:1794:
+	    memset(kaddr + offset, 0, length) ;   

WARNING:SPACING: space prohibited before semicolon
#840: FILE: fs/reiserfs/inode.c:1796:
+	    kunmap_atomic(kaddr, KM_USER0) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: fs/reiserfs/inode.c:1946:
+    if (!page_has_buffers(page))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#868: FILE: fs/reiserfs/inode.c:1962:
+	memset(kaddr + last_offset, 0, PAGE_CACHE_SIZE-last_offset) ;
 	                                              ^

WARNING:SPACING: space prohibited before semicolon
#868: FILE: fs/reiserfs/inode.c:1962:
+	memset(kaddr + last_offset, 0, PAGE_CACHE_SIZE-last_offset) ;

WARNING:SPACING: space prohibited before semicolon
#871: FILE: fs/reiserfs/inode.c:1964:
+	kunmap_atomic(kaddr, KM_USER0) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: fs/fat/inode.c:988:
+fat_prepare_write(struct file *file, struct page *page,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#911: FILE: fs/fat/inode.c:988:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#911: FILE: fs/fat/inode.c:988:
+			unsigned from, unsigned to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: fs/fat/inode.c:997:
+fat_commit_write(struct file *file, struct page *page,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#920: FILE: fs/fat/inode.c:997:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#920: FILE: fs/fat/inode.c:997:
+			unsigned from, unsigned to)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#934: FILE: fs/fat/inode.c:1012:
+	commit_write: fat_commit_write,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#934: FILE: fs/fat/inode.c:1012:
+	commit_write: fat_commit_write,

ERROR:CODE_INDENT: code indent should use tabs where possible
#946: FILE: fs/reiserfs/stree.c:1287:
+        ** can't use p_s_un_bh->b_data.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#951: FILE: fs/reiserfs/stree.c:1291:
+        data = kmap_atomic(p_s_un_bh->b_page, KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: fs/reiserfs/stree.c:1291:
+        data = kmap_atomic(p_s_un_bh->b_page, KM_USER0);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#970: FILE: fs/reiserfs/tail_conversion.c:128:
+	char *kaddr=kmap_atomic(up_to_date_bh->b_page, KM_USER0);
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#971: FILE: fs/reiserfs/tail_conversion.c:129:
+	char *kaddr=kmap_atomic(up_to_date_bh->b_page, KM_USER0);
+	memset(kaddr + pgoff, 0, n_blk_size - total_tail) ;

WARNING:SPACING: space prohibited before semicolon
#971: FILE: fs/reiserfs/tail_conversion.c:129:
+	memset(kaddr + pgoff, 0, n_blk_size - total_tail) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 22 warnings, 11 checks, 795 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
