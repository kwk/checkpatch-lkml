WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#81: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:41:
+ *  $Id: ehca_iverbs.h,v 1.8 2006/04/04 21:51:52 nguyen Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:54:
+int ehca_query_pkey(struct ib_device *ibdev, u8 port, u16 index, u16 * pkey);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:127:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:175:
+int ehca_mmap_nopage(u64 foffset,u64 length,void **mapped,
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:175:
+int ehca_mmap_nopage(u64 foffset,u64 length,void **mapped,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:178:
+int ehca_mmap_register(u64 physical,void **mapped,
                                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#268: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:42:
+ *  $Id: ehca_kernel.h,v 1.13 2006/04/03 06:40:54 schickhj Exp $

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#287: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:61:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#288: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:62:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#291: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:65:
+ * ehca_adr_bad - Handle to be used for adress translation mechanisms,
                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#294: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:68:
+inline static int ehca_adr_bad(void *adr)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#302: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:76:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,17)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:76:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,17)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:76:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,17)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#302: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:76:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,17)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#314: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:88:
+#define H_IS_LONG_BUSY(x)  ((x >= H_LongBusyStartRange) && (x <= H_LongBusyEndRange))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#314: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:88:
+#define H_IS_LONG_BUSY(x)  ((x >= H_LongBusyStartRange) && (x <= H_LongBusyEndRange))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#392: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#433: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:42:
+ *  $Id: ehca_tools.h,v 1.12 2006/03/30 12:36:54 schickhj Exp $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:45:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str4' - possible side-effects?
#442: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:51:
+#define EDEB_ID_TO_U32(str4) (str4[3] | (str4[2] << 8) | (str4[1] << 16) | \
+			      (str4[0] << 24))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#445: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:54:
+inline static u64 ehca_edeb_filter(const u32 level,

WARNING:TYPO_SPELLING: 'everythin' may be misspelled - perhaps 'everything'?
#455: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:64:
+	 * compiler means trace everythin below 6. */
 	                        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#455: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:64:
+	 * compiler means trace everythin below 6. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#525: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:134:
+	if ((filenr - 1) > sizeof(ehca_edeb_mask)) {
+		filenr = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#529: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:138:
+	if (filenr == 0) {
+		filter_level = 9;
+	} /* default */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#533: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:142:
+	if (filter_level <= level) {
+		return (ret | 0x100000000L); /* this is the flag to not trace */
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:161:
+    ((ehca_edeb_filter(level, EDEB_ID_TO_U32(DEB_PREFIX), __LINE__) & 0x100000000L)==0)$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#552: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:161:
+    ((ehca_edeb_filter(level, EDEB_ID_TO_U32(DEB_PREFIX), __LINE__) & 0x100000000L)==0)
                                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:163:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:163:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:163:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:168:
+		printk("PU%04x %08x:%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#562: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:171:
+} while (1==0)
           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:175:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:175:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:175:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#571: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:180:
+		printk("%08x:%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:183:
+} while (1==0)
           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:190:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:190:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:190:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#583: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:192:
+	printk("%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#585: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:194:
+} while (1==0)
           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:205:
+#define EDEB(level,format,args...) \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:205:
+#define EDEB(level,format,args...) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#597: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:206:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#597: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:206:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#597: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:206:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#598: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:207:
+#define EDEB_ERR(level,format,args...) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#598: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:207:
+#define EDEB_ERR(level,format,args...) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:208:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:208:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:208:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#600: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:209:
+#define EDEB_EN(level,format,args...) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#600: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:209:
+#define EDEB_EN(level,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#601: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:210:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#601: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:210:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#601: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:210:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#602: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:211:
+#define EDEB_EX(level,format,args...) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#602: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:211:
+#define EDEB_EX(level,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#603: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:212:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#603: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:212:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#603: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:212:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:219:
+#define EDEB_DMP(level,adr,len,format,args...) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:219:
+#define EDEB_DMP(level,adr,len,format,args...) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:219:
+#define EDEB_DMP(level,adr,len,format,args...) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:219:
+#define EDEB_DMP(level,adr,len,format,args...) \
                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#614: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:223:
+		unsigned char *deb = (unsigned char*)(adr);	\

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:225:
+^I^I        EDEB(level, format " adr=%p ofs=%04x %016lx %016lx", \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#623: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#623: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#623: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'to' may be better as '(to)' to avoid precedence issues
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#627: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:236:
+#define EHCA_BMASK_SHIFTPOS(mask) (((mask)>>16)&0xffff)
                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#627: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:236:
+#define EHCA_BMASK_SHIFTPOS(mask) (((mask)>>16)&0xffff)
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#629: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:238:
+#define EHCA_BMASK_MASK(mask) (0xffffffffffffffffULL >> ((64-(mask))&0xffff))
                                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#629: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:238:
+#define EHCA_BMASK_MASK(mask) (0xffffffffffffffffULL >> ((64-(mask))&0xffff))
                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#635: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+#define EHCA_BMASK_SET(mask,value) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#635: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+#define EHCA_BMASK_SET(mask,value) \
+	((EHCA_BMASK_MASK(mask) & ((u64)(value)))<<EHCA_BMASK_SHIFTPOS(mask))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#636: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:245:
+	((EHCA_BMASK_MASK(mask) & ((u64)(value)))<<EHCA_BMASK_SHIFTPOS(mask))
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#640: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:249:
+#define EHCA_BMASK_GET(mask,value) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#640: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:249:
+#define EHCA_BMASK_GET(mask,value) \
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#641: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:250:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))
 	                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#641: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:250:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))
 	                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#641: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:250:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#646: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:255:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#646: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:255:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#646: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:255:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#646: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:255:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#647: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:256:
+	if (unlikely(adr==0)) {					\
 	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#652: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#652: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#652: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#652: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#653: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:262:
+	if (unlikely(adr==0)) {					\
 	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#658: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:267:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'device' - possible side-effects?
#658: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:267:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#658: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:267:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#658: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:267:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#659: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:268:
+	if (unlikely(device==0)) {				\
 	                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#663: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:272:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'device' - possible side-effects?
#663: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:272:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#663: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:272:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#663: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:272:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#664: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:273:
+	if (unlikely(device==0)) {				\
 	                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#668: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#668: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pd' may be better as '(pd)' to avoid precedence issues
#668: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#668: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#669: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:278:
+	if (unlikely(pd==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#673: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:282:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#673: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:282:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pd' may be better as '(pd)' to avoid precedence issues
#673: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:282:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#673: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:282:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#674: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:283:
+	if (unlikely(pd==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#678: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:287:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'av' - possible side-effects?
#678: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:287:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'av' may be better as '(av)' to avoid precedence issues
#678: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:287:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#678: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:287:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#679: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:288:
+	if (unlikely(av==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#683: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:292:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'av' - possible side-effects?
#683: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:292:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'av' may be better as '(av)' to avoid precedence issues
#683: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:292:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#683: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:292:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#684: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:293:
+	if (unlikely(av==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#688: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:297:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cq' - possible side-effects?
#688: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:297:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cq' may be better as '(cq)' to avoid precedence issues
#688: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:297:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#688: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:297:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#689: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:298:
+	if (unlikely(cq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#693: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:302:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cq' - possible side-effects?
#693: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:302:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cq' may be better as '(cq)' to avoid precedence issues
#693: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:302:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#693: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:302:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#694: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:303:
+	if (unlikely(cq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#698: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:307:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'eq' - possible side-effects?
#698: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:307:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'eq' may be better as '(eq)' to avoid precedence issues
#698: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:307:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#698: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:307:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#699: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:308:
+	if (unlikely(eq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#703: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:312:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'eq' - possible side-effects?
#703: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:312:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'eq' may be better as '(eq)' to avoid precedence issues
#703: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:312:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#703: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:312:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#704: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:313:
+	if (unlikely(eq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#708: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:317:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qp' - possible side-effects?
#708: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:317:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qp' may be better as '(qp)' to avoid precedence issues
#708: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:317:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#708: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:317:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#709: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:318:
+	if (unlikely(qp==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#713: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:322:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qp' - possible side-effects?
#713: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:322:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qp' may be better as '(qp)' to avoid precedence issues
#713: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:322:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#713: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:322:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#714: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:323:
+	if (unlikely(qp==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#718: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:327:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mr' - possible side-effects?
#718: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:327:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mr' may be better as '(mr)' to avoid precedence issues
#718: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:327:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#718: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:327:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#719: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:328:
+	if (unlikely(mr==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#723: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:332:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mr' - possible side-effects?
#723: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:332:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mr' may be better as '(mr)' to avoid precedence issues
#723: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:332:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#723: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:332:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#724: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:333:
+	if (unlikely(mr==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#728: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:337:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mw' - possible side-effects?
#728: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:337:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mw' may be better as '(mw)' to avoid precedence issues
#728: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:337:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#728: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:337:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#729: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:338:
+	if (unlikely(mw==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#733: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:342:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mw' - possible side-effects?
#733: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:342:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mw' may be better as '(mw)' to avoid precedence issues
#733: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:342:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#733: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:342:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#734: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:343:
+	if (unlikely(mw==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#738: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:347:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmr' - possible side-effects?
#738: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:347:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fmr' may be better as '(fmr)' to avoid precedence issues
#738: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:347:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#738: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:347:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#739: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:348:
+	if (unlikely(fmr==0)) {					\
 	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#743: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:352:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmr' - possible side-effects?
#743: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:352:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fmr' may be better as '(fmr)' to avoid precedence issues
#743: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:352:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#743: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:352:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#744: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:353:
+	if (unlikely(fmr==0)) {					\
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#748: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:357:
+#define EHCA_REGISTER_PD(device,pd)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#749: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:358:
+#define EHCA_REGISTER_AV(pd,av)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:365:
+#define EHCA_REGISTER_PD(device,pd)
                                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 95 errors, 41 warnings, 63 checks, 732 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
