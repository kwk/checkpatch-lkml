WARNING:TYPO_SPELLING: 'outweights' may be misspelled - perhaps 'outweighs'?
#35: 
the diagnoses outweights the savings for spin locks that are held
              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: arch/s390/lib/spinlock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#106: FILE: arch/s390/lib/spinlock.c:2:
+ *  arch/s390/lib/spinlock.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#118: FILE: arch/s390/lib/spinlock.c:14:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#128: FILE: arch/s390/lib/spinlock.c:24:
+	spin_retry = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#131: FILE: arch/s390/lib/spinlock.c:27:
+__setup("spin_retry=", spin_retry_setup);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#136: FILE: arch/s390/lib/spinlock.c:32:
+#ifdef __s390x__

Architecture specific defines should be avoided wherever
possible.

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: include/asm-s390/lowcore.h:288:
+        __u8         pad8[0xc00-0x290];        /* 0x290 */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: include/asm-s390/lowcore.h:288:
+        __u8         pad8[0xc00-0x290];        /* 0x290 */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#255: FILE: include/asm-s390/lowcore.h:288:
+        __u8         pad8[0xc00-0x290];        /* 0x290 */
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#297: FILE: include/asm-s390/spinlock.h:15:
+_raw_compare_and_swap(volatile unsigned int *lock,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#303: FILE: include/asm-s390/spinlock.h:21:
+		      : "cc", "memory" );

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#315: FILE: include/asm-s390/spinlock.h:39:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#316: FILE: include/asm-s390/spinlock.h:40:
+#define spin_lock_init(lp)	do { (lp)->lock = 0; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#316: FILE: include/asm-s390/spinlock.h:40:
+#define spin_lock_init(lp)	do { (lp)->lock = 0; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#319: FILE: include/asm-s390/spinlock.h:42:
+#define spin_is_locked(x)	((x)->lock != 0)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/asm-s390/spinlock.h:45:
+extern void _raw_spin_lock_wait(spinlock_t *lp, unsigned int pc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/asm-s390/spinlock.h:46:
+extern int _raw_spin_trylock_retry(spinlock_t *lp, unsigned int pc);

CHECK:SPACING: No space is necessary after a cast
#362: FILE: include/asm-s390/spinlock.h:50:
+	unsigned long pc = (unsigned long) __builtin_return_address(0);

CHECK:SPACING: No space is necessary after a cast
#372: FILE: include/asm-s390/spinlock.h:58:
+	unsigned long pc = (unsigned long) __builtin_return_address(0);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#394: FILE: include/asm-s390/spinlock.h:81:
+	volatile unsigned int lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: include/asm-s390/spinlock.h:104:
+extern void _raw_read_lock_wait(rwlock_t *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: include/asm-s390/spinlock.h:105:
+extern int _raw_read_trylock_retry(rwlock_t *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#521: FILE: include/asm-s390/spinlock.h:106:
+extern void _raw_write_lock_wait(rwlock_t *lp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#522: FILE: include/asm-s390/spinlock.h:107:
+extern int _raw_write_trylock_retry(rwlock_t *lp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#527: FILE: include/asm-s390/spinlock.h:112:
+	unsigned int old;
+	old = rw->lock & 0x7fffffffU;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#557: FILE: include/asm-s390/spinlock.h:142:
+	unsigned int old;
+	old = rw->lock & 0x7fffffffU;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#578: FILE: include/linux/sysctl.h:140:
+	KERN_SPIN_RETRY=70,	/* int: number of spinlock retries */
 	               ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#589: FILE: kernel/sysctl.c:117:
+extern int spin_retry;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#603: FILE: kernel/sysctl.c:652:
+		.maxlen		= sizeof (int),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 13 warnings, 12 checks, 517 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
