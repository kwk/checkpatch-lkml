WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#56: FILE: arch/ppc64/mm/numa.c:22:
+#define dbg(args...) printk(KERN_INFO args)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 0'
#76: FILE: arch/ppc64/mm/numa.c:71:
+		if (interrupt_server && (len > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#78: FILE: arch/ppc64/mm/numa.c:73:
+				if (interrupt_server[len-1] == hw_cpuid)
 				                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 0'
#84: FILE: arch/ppc64/mm/numa.c:79:
+			if (reg && (len > 0) && (reg[0] == hw_cpuid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg[0] == hw_cpuid'
#84: FILE: arch/ppc64/mm/numa.c:79:
+			if (reg && (len > 0) && (reg[0] == hw_cpuid))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#93: FILE: arch/ppc64/mm/numa.c:88:
+static int *of_get_associativity(struct device_node *dev)
+ {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: arch/ppc64/mm/numa.c:89:
+ {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: arch/ppc64/mm/numa.c:92:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: arch/ppc64/mm/numa.c:105:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp[0] >= depth'
#112: FILE: arch/ppc64/mm/numa.c:107:
+	if (tmp && (tmp[0] >= depth)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#115: FILE: arch/ppc64/mm/numa.c:110:
+		printk(KERN_ERR "WARNING: no NUMA information for "

WARNING:SPLIT_STRING: quoted string split across lines
#116: FILE: arch/ppc64/mm/numa.c:111:
+		printk(KERN_ERR "WARNING: no NUMA information for "
+		       "%s\n", device->full_name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: arch/ppc64/mm/numa.c:118:
+ * In theory, the "ibm,associativity" property may contain multiple $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: arch/ppc64/mm/numa.c:119:
+ * associativity lists because a resource may be multiply connected $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/ppc64/mm/numa.c:123:
+ * their distances represented at a common level.  This won't be $

WARNING:TYPO_SPELLING: 'heirarchical' may be misspelled - perhaps 'hierarchical'?
#129: FILE: arch/ppc64/mm/numa.c:124:
+ * true for heirarchical NUMA.
             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#146: FILE: arch/ppc64/mm/numa.c:141:
+		printk(KERN_ERR "WARNING: %s() could not find rtas root\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: arch/ppc64/mm/numa.c:142:
+		printk(KERN_ERR "WARNING: %s() could not find rtas root\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#147: FILE: arch/ppc64/mm/numa.c:142:
+				__FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: arch/ppc64/mm/numa.c:145:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: arch/ppc64/mm/numa.c:147:
+^I * this property is 2 32-bit integers, each representing a level of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: arch/ppc64/mm/numa.c:148:
+^I * depth in the associativity nodes.  The first is for an SMP $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: arch/ppc64/mm/numa.c:149:
+^I * configuration (should be all 0's) and the second is for a normal $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: arch/ppc64/mm/numa.c:152:
+^Iref_points = (unsigned int *)get_property(rtas_root, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len >= 1'
#160: FILE: arch/ppc64/mm/numa.c:155:
+	if ((len >= 1) && ref_points) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#163: FILE: arch/ppc64/mm/numa.c:158:
+		printk(KERN_ERR "WARNING: could not find NUMA "

WARNING:SPLIT_STRING: quoted string split across lines
#164: FILE: arch/ppc64/mm/numa.c:159:
+		printk(KERN_ERR "WARNING: could not find NUMA "
+				"associativity reference point\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#236: FILE: arch/ppc64/mm/numa.c:203:
+	printk(KERN_INFO "NUMA associativity depth for CPU/Memory: %d\n", depth);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: arch/ppc64/mm/numa.c:206:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: arch/ppc64/mm/numa.c:218:
+^I^I^I ^I * POWER4 LPAR uses 0xffff as invalid node,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: arch/ppc64/mm/numa.c:218:
+^I^I^I ^I * POWER4 LPAR uses 0xffff as invalid node,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: arch/ppc64/mm/numa.c:220:
+^I^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: arch/ppc64/mm/numa.c:220:
+^I^I^I ^I */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#263: FILE: arch/ppc64/mm/numa.c:222:
+					printk(KERN_ERR "WARNING: cpu %ld "

WARNING:SPLIT_STRING: quoted string split across lines
#264: FILE: arch/ppc64/mm/numa.c:223:
+					printk(KERN_ERR "WARNING: cpu %ld "
+					       "maps to invalid NUMA node %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#269: FILE: arch/ppc64/mm/numa.c:228:
+			printk(KERN_ERR "WARNING: no NUMA information for "

WARNING:SPLIT_STRING: quoted string split across lines
#270: FILE: arch/ppc64/mm/numa.c:229:
+			printk(KERN_ERR "WARNING: no NUMA information for "
+			       "cpu %ld\n", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#345: FILE: arch/ppc64/mm/numa.c:267:
+				printk(KERN_ERR "WARNING: memory at %lx maps "

WARNING:SPLIT_STRING: quoted string split across lines
#346: FILE: arch/ppc64/mm/numa.c:268:
+				printk(KERN_ERR "WARNING: memory at %lx maps "
+				       "to invalid NUMA node %d\n", start,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 18 warnings, 7 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
