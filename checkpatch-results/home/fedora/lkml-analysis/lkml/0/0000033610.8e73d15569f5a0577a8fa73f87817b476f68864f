WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
Allow modules to watch tasks initialize, clone/fork, exec, change [re][ug]ids,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: kernel/task_watchers.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ev' - possible side-effects?
#109: FILE: kernel/task_watchers.c:4:
+#define for_each_task_event(ev) \
+for ((ev) = 0; (ev) < NUM_WATCH_TASK_EVENTS; (ev)++)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".task_watchers_table") over __attribute__((section(".task_watchers_table")))
#124: FILE: kernel/task_watchers.c:18:
+__attribute__((section(".task_watchers_table"))) = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: kernel/task_watchers.c:49:
+^I^I^I       ^I    unsigned long val,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: kernel/task_watchers.c:49:
+^I^I^I       ^I    unsigned long val,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: kernel/task_watchers.c:50:
+^I^I^I  ^I    struct task_struct *tsk,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: kernel/task_watchers.c:50:
+^I^I^I  ^I    struct task_struct *tsk,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: kernel/task_watchers.c:51:
+^I^I   ^I^I    int ret_err)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: kernel/task_watchers.c:51:
+^I^I   ^I^I    int ret_err)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err < 0'
#171: FILE: kernel/task_watchers.c:59:
+		if (unlikely((err < 0) && (ret_err == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret_err == 0'
#171: FILE: kernel/task_watchers.c:59:
+		if (unlikely((err < 0) && (ret_err == 0)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#177: FILE: kernel/task_watchers.c:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around module_task_watchers[ev]
#190: FILE: kernel/task_watchers.c:78:
+	list_for_each_safe_rcu(elem, next, &(module_task_watchers[ev])) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: kernel/task_watchers.c:88:
+^I^I^I^I   ^I    val, tsk, ret_err);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: kernel/task_watchers.c:88:
+^I^I^I^I   ^I    val, tsk, ret_err);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'twtable' - possible side-effects?
#207: FILE: kernel/task_watchers.c:95:
+#define tw_table_empty(twtable, ev) ({ ((twtable[ev + 1] - twtable[ev]) == 0) ? 1 : 0; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ev' - possible side-effects?
#207: FILE: kernel/task_watchers.c:95:
+#define tw_table_empty(twtable, ev) ({ ((twtable[ev + 1] - twtable[ev]) == 0) ? 1 : 0; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ev' may be better as '(ev)' to avoid precedence issues
#207: FILE: kernel/task_watchers.c:95:
+#define tw_table_empty(twtable, ev) ({ ((twtable[ev + 1] - twtable[ev]) == 0) ? 1 : 0; })

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod"
#213: FILE: kernel/task_watchers.c:101:
+	if (mod == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#218: FILE: kernel/task_watchers.c:106:
+		BUG_ON(!list_empty(&mod->task_watching_modules[ev]));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod"
#235: FILE: kernel/task_watchers.c:123:
+	if (mod == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: kernel/task_watchers.c:128:
+		BUG_ON(list_empty(&mod->task_watching_modules[ev]) &&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#264: FILE: include/linux/task_watchers.h:14:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/task_watchers.h:29:
+extern void init_task_watching_list_heads(struct list_head *lh_arr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#285: FILE: include/linux/task_watchers.h:31:
+int register_module_task_watchers(struct module *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#286: FILE: include/linux/task_watchers.h:32:
+int unregister_module_task_watchers(struct module *);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#322: FILE: kernel/module.c:1844:
+	mod->twtable = (void*)sechdrs[twindex].sh_addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: include/asm-generic/module.lds.S:1:
+#include <asm-generic/common.lds.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#387: FILE: include/asm-generic/common.lds.h:1:
+#ifndef LOAD_OFFSET

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#395: FILE: include/asm-generic/common.lds.h:9:
+#define TWTABLE								\
+	.task_watchers_table : AT(ADDR(.task_watchers_table) - LOAD_OFFSET) { \
+		*(.task_watchers_table)					\
+		VMLINUX_SYMBOL(__start_task_watchers_init) = .;		\
+		*(.task_watchers.init)				\
+		VMLINUX_SYMBOL(__start_task_watchers_clone) = .;	\
+		*(.task_watchers.clone)					\
+		VMLINUX_SYMBOL(__start_task_watchers_exec) = .;		\
+		*(.task_watchers.exec)					\
+		VMLINUX_SYMBOL(__start_task_watchers_uid) = .;		\
+		*(.task_watchers.uid)					\
+		VMLINUX_SYMBOL(__start_task_watchers_gid) = .;		\
+		*(.task_watchers.gid)					\
+		VMLINUX_SYMBOL(__start_task_watchers_exit) = .;		\
+		*(.task_watchers.exit)					\
+		VMLINUX_SYMBOL(__start_task_watchers_free) = .;		\
+		*(.task_watchers.free)					\
+		VMLINUX_SYMBOL(__stop_task_watchers_free) = .;		\
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#419: FILE: include/asm-generic/vmlinux.lds.h:1:
+#include <asm-generic/common.lds.h>

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#533: FILE: scripts/mod/modpost.c:1207:
+	buf_printf(b, "__attribute_used__ __attribute__((section(\".task_watchers_table\"), used)) = {\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(\".task_watchers_table\") over __attribute__((section(\".task_watchers_table\")))
#533: FILE: scripts/mod/modpost.c:1207:
+	buf_printf(b, "__attribute_used__ __attribute__((section(\".task_watchers_table\"), used)) = {\n");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((used))
#533: FILE: scripts/mod/modpost.c:1207:
+	buf_printf(b, "__attribute_used__ __attribute__((section(\".task_watchers_table\"), used)) = {\n");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#563: FILE: include/linux/kernel.h:309:
+#define array_of(ptr, i) \
+	({ const typeof(*(ptr)) *__mptr = (ptr); __mptr -= (i); __mptr; })

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033610.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 17 warnings, 13 checks, 413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033610.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
