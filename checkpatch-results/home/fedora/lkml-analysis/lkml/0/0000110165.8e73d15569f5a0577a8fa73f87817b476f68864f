WARNING:TYPO_SPELLING: 'appliable' may be misspelled - perhaps 'applicable'?
#35: 
and also appliable against 2.6.16-rc1-mm4.
         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#37: 
This patch works with kernel preemption. On preemptable kernel,
                                            ^^^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#66: FILE: arch/i386/kernel/kprobes.c:50:
+	} __attribute__((packed)) *jop;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#77: FILE: arch/i386/kernel/kprobes.c:61:
+	switch (opcode & 0xf0 ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#85: FILE: arch/i386/kernel/kprobes.c:69:
+		return (0xc1 < opcode && opcode < 0xc6) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#86: FILE: arch/i386/kernel/kprobes.c:70:
+			(0xc7 < opcode && opcode < 0xcc) || opcode == 0xcf;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#92: FILE: arch/i386/kernel/kprobes.c:76:
+		return (0xe3 < opcode && opcode != 0xe8);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#95: FILE: arch/i386/kernel/kprobes.c:79:
+		return (opcode == 0xf5 || (0xf7 < opcode && opcode < 0xfe));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#102: FILE: arch/i386/kernel/kprobes.c:86:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#110: FILE: arch/i386/kernel/kprobes.c:106:
+	if (can_boost(p->opcode)) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: arch/i386/kernel/kprobes.c:198:
+	unsigned pre_preempt_count = preempt_count();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: arch/i386/kernel/kprobes.c:295:
+	if (p->ainsn.boostable == 1 &&
+#ifdef CONFIG_PREEMPT

ERROR:SPACING: space prohibited before that close parenthesis ')'
#139: FILE: arch/i386/kernel/kprobes.c:301:
+	    !p->post_handler && !p->break_handler ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->eip > copy_eip'
#190: FILE: arch/i386/kernel/kprobes.c:461:
+		if ((regs->eip > copy_eip) &&
+		    (regs->eip - copy_eip) + 5 < MAX_INSN_SIZE) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110165.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 3 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110165.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
