ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#34: 
--- a/drivers/scsi/scsi.h	Mon Sep 16 15:29:45 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#47: FILE: drivers/scsi/scsi.h:143:
+#define REQUEUE  ^I0x2007$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#77: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#77: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: drivers/scsi/scsi.h:472:
+extern void scsi_cleanup_io(Scsi_Cmnd *SCpnt);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#93: FILE: drivers/scsi/scsi.h:482:
+struct Scsi_Host;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: drivers/scsi/scsi.h:491:
+extern void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: drivers/scsi/scsi.h:491:
+extern void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: drivers/scsi/scsi.h:491:
+extern void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: drivers/scsi/scsi.h:492:
+				    struct Scsi_Host * SHpnt);

CHECK:CAMELCASE: Avoid CamelCase: <SHpnt>
#103: FILE: drivers/scsi/scsi.h:492:
+				    struct Scsi_Host * SHpnt);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#106: FILE: drivers/scsi/scsi.h:495:
+extern void scsi_add_scsi_device(Scsi_Device *SDpnt, struct Scsi_Host *SHpnt);

CHECK:CAMELCASE: Avoid CamelCase: <SDpnt>
#106: FILE: drivers/scsi/scsi.h:495:
+extern void scsi_add_scsi_device(Scsi_Device *SDpnt, struct Scsi_Host *SHpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: drivers/scsi/scsi.h:495:
+extern void scsi_add_scsi_device(Scsi_Device *SDpnt, struct Scsi_Host *SHpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: drivers/scsi/scsi.h:496:
+extern void scsi_remove_scsi_device(Scsi_Device *SDpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: drivers/scsi/scsi.h:508:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Device *' should also have an identifier name
#116: FILE: drivers/scsi/scsi.h:508:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#116: FILE: drivers/scsi/scsi.h:508:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#116: FILE: drivers/scsi/scsi.h:508:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_path_id *' should also have an identifier name
#116: FILE: drivers/scsi/scsi.h:508:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: drivers/scsi/scsi.h:518:
+extern int scsi_paths_proc_print_paths(Scsi_Device *SDpnt, char *buffer,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: drivers/scsi/scsi.h:593:
+^I * Only the SCSI mid-layer routines should access sdev_next and $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#220: FILE: drivers/scsi/scsi.h:897:
+typedef struct scsi_traverse_hndl {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: drivers/scsi/scsi.h:902:
+extern Scsi_Device *scsi_traverse_sdevs(scsi_traverse_hndl_t *handle,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#235: FILE: drivers/scsi/scsi.h:912:
+#define __INIT_TRAVERSE_HNDL(name)		\
+	(name)->last_scsi_device_p = NULL, 	\
+	(name)->last_scsi_host_p = NULL

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#235: FILE: drivers/scsi/scsi.h:912:
+#define __INIT_TRAVERSE_HNDL(name)		\
+	(name)->last_scsi_device_p = NULL, 	\
+	(name)->last_scsi_host_p = NULL

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: drivers/scsi/scsi.h:913:
+^I(name)->last_scsi_device_p = NULL, ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#246: FILE: drivers/scsi/scsi.h:923:
+#define scsi_for_all_sdevs(hndl, sdev)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 		\
+	     sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl); 	\
+	     sdev != NULL; 				\
+	     sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#246: FILE: drivers/scsi/scsi.h:923:
+#define scsi_for_all_sdevs(hndl, sdev)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 		\
+	     sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl); 	\
+	     sdev != NULL; 				\
+	     sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: drivers/scsi/scsi.h:924:
+^Ifor (__INIT_TRAVERSE_HNDL(hndl), ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: drivers/scsi/scsi.h:925:
+^I     sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: drivers/scsi/scsi.h:926:
+^I     sdev != NULL; ^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#249: FILE: drivers/scsi/scsi.h:926:
+	     sdev != NULL; 				\

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#259: FILE: drivers/scsi/scsi.h:936:
+#define scsi_for_each_host_sdev(hndl, sdev, host)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 			\
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); 	\
+	     sdev != NULL; 					\
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#259: FILE: drivers/scsi/scsi.h:936:
+#define scsi_for_each_host_sdev(hndl, sdev, host)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 			\
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); 	\
+	     sdev != NULL; 					\
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#259: FILE: drivers/scsi/scsi.h:936:
+#define scsi_for_each_host_sdev(hndl, sdev, host)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 			\
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); 	\
+	     sdev != NULL; 					\
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: drivers/scsi/scsi.h:937:
+^Ifor (__INIT_TRAVERSE_HNDL(hndl), ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: drivers/scsi/scsi.h:938:
+^I     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: drivers/scsi/scsi.h:939:
+^I     sdev != NULL; ^I^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#262: FILE: drivers/scsi/scsi.h:939:
+	     sdev != NULL; 					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#272: FILE: drivers/scsi/scsi.h:949:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan)		\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#272: FILE: drivers/scsi/scsi.h:949:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan)		\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#272: FILE: drivers/scsi/scsi.h:949:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan)		\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#272: FILE: drivers/scsi/scsi.h:949:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan)		\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: drivers/scsi/scsi.h:950:
+^Ifor (__INIT_TRAVERSE_HNDL(hndl), ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: drivers/scsi/scsi.h:951:
+^I     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: drivers/scsi/scsi.h:952:
+^I     sdev != NULL; ^I^I^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#275: FILE: drivers/scsi/scsi.h:952:
+	     sdev != NULL; 						\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#285: FILE: drivers/scsi/scsi.h:962:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#285: FILE: drivers/scsi/scsi.h:962:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#285: FILE: drivers/scsi/scsi.h:962:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#285: FILE: drivers/scsi/scsi.h:962:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#285: FILE: drivers/scsi/scsi.h:962:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); 	\
+	     sdev != NULL; 						\
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: drivers/scsi/scsi.h:963:
+^Ifor (__INIT_TRAVERSE_HNDL(hndl), ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: drivers/scsi/scsi.h:964:
+^I     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: drivers/scsi/scsi.h:965:
+^I     sdev != NULL; ^I^I^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#288: FILE: drivers/scsi/scsi.h:965:
+	     sdev != NULL; 						\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#291: FILE: drivers/scsi/scsi.h:968:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#292: FILE: drivers/scsi/scsi.h:969:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); 	\
+	     sdev != NULL; 						\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#292: FILE: drivers/scsi/scsi.h:969:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); 	\
+	     sdev != NULL; 						\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#292: FILE: drivers/scsi/scsi.h:969:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); 	\
+	     sdev != NULL; 						\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#292: FILE: drivers/scsi/scsi.h:969:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); 	\
+	     sdev != NULL; 						\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#292: FILE: drivers/scsi/scsi.h:969:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); 	\
+	     sdev != NULL; 						\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lun' - possible side-effects?
#292: FILE: drivers/scsi/scsi.h:969:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun)			\
+	for (__INIT_TRAVERSE_HNDL(hndl), 				\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); 	\
+	     sdev != NULL; 						\
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: drivers/scsi/scsi.h:970:
+^Ifor (__INIT_TRAVERSE_HNDL(hndl), ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: drivers/scsi/scsi.h:971:
+^I     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: drivers/scsi/scsi.h:972:
+^I     sdev != NULL; ^I^I^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#295: FILE: drivers/scsi/scsi.h:972:
+	     sdev != NULL; 						\

CHECK:SPACING: No space is necessary after a cast
#299: FILE: drivers/scsi/scsi.h:976:
+	scsi_traverse_sdevs((scsi_traverse_hndl_t *) NULL,	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#314: FILE: drivers/scsi/scsi.h:1076:
+	return(NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#319: FILE: drivers/scsi/scsi.h:1081:
+	return (SDpnt->host);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: drivers/scsi/scsi.h:1102:
+static inline void scsi_replace_path(Scsi_Device *sdev, struct Scsi_Host *shost,
+	unsigned int channel, unsigned int id, unsigned int lun)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#357: FILE: drivers/scsi/scsi.h:1119:
+static inline int scsi_path_decide_disposition(Scsi_Cmnd * SCpnt)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: drivers/scsi/scsi.h:1124:
+extern void scsi_paths_printk(Scsi_Device *SDpnt, char *prefix, char *format);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: drivers/scsi/scsi.h:1125:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {^I^I ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'scp' - possible side-effects?
#363: FILE: drivers/scsi/scsi.h:1125:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'scp' may be better as '(scp)' to avoid precedence issues
#363: FILE: drivers/scsi/scsi.h:1125:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pathp' - possible side-effects?
#363: FILE: drivers/scsi/scsi.h:1125:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pathp' may be better as '(pathp)' to avoid precedence issues
#363: FILE: drivers/scsi/scsi.h:1125:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: drivers/scsi/scsi.h:1128:
+^Iscp->lun = pathp->spi_lun; ^I^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#367: FILE: drivers/scsi/scsi.h:1129:
+	scp->channel = pathp->spi_channel; } while(0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#386: FILE: drivers/scsi/scsi_ioctl.c:136:
+			printk("SCSI error: host %d channel %d id %d lun %d return code = %x\n",

CHECK:CAMELCASE: Avoid CamelCase: <SRpnt>
#387: FILE: drivers/scsi/scsi_ioctl.c:137:
+			       SRpnt->sr_command->host->host_no,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#407: FILE: drivers/scsi/scsi_ioctl.c:209:
+	if ((SHpnt = scsi_get_host(dev)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: drivers/scsi/scsi_ioctl.c:391:
+^I */ $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#439: FILE: drivers/scsi/scsi_ioctl.c:392:
+	if ((SHpnt = scsi_get_host(dev)) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: drivers/scsi/scsi_ioctl.c:394:
+        if (!SHpnt->pci_dev) return -ENXIO;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/scsi/scsi_ioctl.c:394:
+        if (!SHpnt->pci_dev) return -ENXIO;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#441: FILE: drivers/scsi/scsi_ioctl.c:394:
+        if (!SHpnt->pci_dev) return -ENXIO;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: drivers/scsi/scsi_ioctl.c:395:
+        return copy_to_user(arg, SHpnt->pci_dev->slot_name,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: drivers/scsi/scsi_ioctl.c:395:
+        return copy_to_user(arg, SHpnt->pci_dev->slot_name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: drivers/scsi/scsi_ioctl.c:396:
+                            sizeof(SHpnt->pci_dev->slot_name));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: drivers/scsi/scsi_ioctl.c:396:
+                            sizeof(SHpnt->pci_dev->slot_name));$

CHECK:SPACING: No space is necessary after a cast
#484: FILE: drivers/scsi/scsi_ioctl.c:441:
+		__put_user(scsi_path.spi_shpnt->unique_id, &((Scsi_Idlun *) arg)->host_unique_id);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Idlun>
#484: FILE: drivers/scsi/scsi_ioctl.c:441:
+		__put_user(scsi_path.spi_shpnt->unique_id, &((Scsi_Idlun *) arg)->host_unique_id);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#488: FILE: drivers/scsi/scsi_ioctl.c:444:
+		if ((SHpnt = scsi_get_host(dev)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#490: FILE: drivers/scsi/scsi_ioctl.c:446:
+		return put_user(SHpnt->host_no, (int *) arg);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#499: FILE: drivers/scsi/scsi_ioctl.c:464:
+		if ((SHpnt = scsi_get_host(dev)) == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#511: FILE: drivers/scsi/scsi_ioctl.c:476:
+		scsi_cmd[1] = scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#521: FILE: drivers/scsi/scsi_ioctl.c:485:
+		scsi_cmd[1] = scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#529: FILE: drivers/scsi/scsi_ioctl.c:491:
+		scsi_cmd[1] = scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#538: FILE: drivers/scsi/scsi_ioctl.c:498:
+		scsi_cmd[1] = scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#547: FILE: drivers/scsi/scsi_ioctl.c:505:
+		scsi_cmd[1] = scsi_cmd[2] = scsi_cmd[3] = scsi_cmd[5] = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#557: FILE: drivers/scsi/scsi_ioctl.c:514:
+		if ((SHpnt = scsi_get_host(dev)) == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#580: FILE: drivers/scsi/scsi_lib.c:199:
+void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#580: FILE: drivers/scsi/scsi_lib.c:199:
+void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#581: FILE: drivers/scsi/scsi_lib.c:200:
+			     struct Scsi_Host * SHpnt)

CHECK:CAMELCASE: Avoid CamelCase: <STrav_hndl>
#589: FILE: drivers/scsi/scsi_lib.c:206:
+	scsi_traverse_hndl_t STrav_hndl;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#623: FILE: drivers/scsi/scsi_lib.c:319:
+	struct Scsi_Host * SHpnt = SCpnt->host;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#751: FILE: drivers/scsi/scsi_lib.c:692:
+ * Notes: ^IThe q arg and local flags are only needed for the locking hack.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#753: FILE: drivers/scsi/scsi_lib.c:694:
+void scsi_dec_check_host_busy (struct Scsi_Host *SHpnt, request_queue_t * q)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#753: FILE: drivers/scsi/scsi_lib.c:694:
+void scsi_dec_check_host_busy (struct Scsi_Host *SHpnt, request_queue_t * q)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#776: FILE: drivers/scsi/scsi_lib.c:717:
+ * ^I^I*pathpnt.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#781: FILE: drivers/scsi/scsi_lib.c:722:
+ * ^I^Ibecause it is not extern, and it is inlined; it is not in$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#782: FILE: drivers/scsi/scsi_lib.c:723:
+ * ^I^Iscsi.h because it needs Scsi_Host (in hosts.h) and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: drivers/scsi/scsi_lib.c:724:
+ * ^I^IScsi_Device (in scsi.h).$

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#785: FILE: drivers/scsi/scsi_lib.c:726:
+static int inline scsi_get_best_path(Scsi_Device *SDpnt, struct scsi_path_id

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pathpnt->spi_shpnt->host_busy >= pathpnt->spi_shpnt->can_queue'
#793: FILE: drivers/scsi/scsi_lib.c:734:
+	if ((pathpnt->spi_shpnt->can_queue > 0 &&
+	     (pathpnt->spi_shpnt->host_busy >= pathpnt->spi_shpnt->can_queue))
+	    || (pathpnt->spi_shpnt->host_blocked) ||
+	    (pathpnt->spi_shpnt->host_self_blocked)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pathpnt->spi_shpnt->host_blocked'
#793: FILE: drivers/scsi/scsi_lib.c:734:
+	if ((pathpnt->spi_shpnt->can_queue > 0 &&
+	     (pathpnt->spi_shpnt->host_busy >= pathpnt->spi_shpnt->can_queue))
+	    || (pathpnt->spi_shpnt->host_blocked) ||
+	    (pathpnt->spi_shpnt->host_self_blocked)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pathpnt->spi_shpnt->host_self_blocked'
#793: FILE: drivers/scsi/scsi_lib.c:734:
+	if ((pathpnt->spi_shpnt->can_queue > 0 &&
+	     (pathpnt->spi_shpnt->host_busy >= pathpnt->spi_shpnt->can_queue))
+	    || (pathpnt->spi_shpnt->host_blocked) ||
+	    (pathpnt->spi_shpnt->host_self_blocked)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#793: FILE: drivers/scsi/scsi_lib.c:734:
+	if ((pathpnt->spi_shpnt->can_queue > 0 &&
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#795: FILE: drivers/scsi/scsi_lib.c:736:
+	     (pathpnt->spi_shpnt->host_busy >= pathpnt->spi_shpnt->can_queue))
+	    || (pathpnt->spi_shpnt->host_blocked) ||

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#802: FILE: drivers/scsi/scsi_lib.c:743:
+		return 1;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#802: FILE: drivers/scsi/scsi_lib.c:743:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#893: FILE: drivers/scsi/scsi_lib.c:829:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: drivers/scsi/scsi_lib.c:894:
+^I^I^I^I/* $

CHECK:CAMELCASE: Avoid CamelCase: <SDloop>
#1058: FILE: drivers/scsi/scsi_lib.c:1105:
+	scsi_for_each_host_sdev(&STrav_hndl, SDloop, SHpnt->host_no) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shostpnt->host_queue"
#1105: FILE: drivers/scsi/scsi_lib.c:1178:
+	if (shostpnt->host_queue != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdtailpnt->sdev_next"
#1107: FILE: drivers/scsi/scsi_lib.c:1180:
+		while (sdtailpnt->sdev_next != NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1125: FILE: drivers/scsi/scsi_lib.c:1198:
+ * ^I^Ito removal of all Scsi_Devices.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!SDpnt"
#1131: FILE: drivers/scsi/scsi_lib.c:1204:
+	if (SDpnt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "SDpnt->sdev_next"
#1133: FILE: drivers/scsi/scsi_lib.c:1206:
+	if (SDpnt->sdev_next != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "SDpnt->sdev_prev"
#1135: FILE: drivers/scsi/scsi_lib.c:1208:
+	if (SDpnt->sdev_prev != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hbapnt != NULL'
#1139: FILE: drivers/scsi/scsi_lib.c:1212:
+	if ((hbapnt != NULL) && (hbapnt->host_queue == SDpnt))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hbapnt->host_queue == SDpnt'
#1139: FILE: drivers/scsi/scsi_lib.c:1212:
+	if ((hbapnt != NULL) && (hbapnt->host_queue == SDpnt))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbapnt"
#1139: FILE: drivers/scsi/scsi_lib.c:1212:
+	if ((hbapnt != NULL) && (hbapnt->host_queue == SDpnt))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "SDpnt->inquiry"
#1141: FILE: drivers/scsi/scsi_lib.c:1214:
+	if (SDpnt->inquiry != NULL)

CHECK:SPACING: No space is necessary after a cast
#1143: FILE: drivers/scsi/scsi_lib.c:1216:
+	kfree((char *) SDpnt);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1157: FILE: drivers/scsi/scsi_lib.c:1230:
+ * ^IReturns - A pointer to Scsi_Device, NULL when the list is complete.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1158: FILE: drivers/scsi/scsi_lib.c:1231:
+ * ^INotes -  Assumes that we do not remove a device between calls.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handle"
#1167: FILE: drivers/scsi/scsi_lib.c:1240:
+	if (handle == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: drivers/scsi/scsi_lib.c:1248:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1175: FILE: drivers/scsi/scsi_lib.c:1248:
+
+	

CHECK:BRACES: braces {} should be used on all arms of this statement
#1176: FILE: drivers/scsi/scsi_lib.c:1249:
+	if (shostpnt == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shostpnt"
#1176: FILE: drivers/scsi/scsi_lib.c:1249:
+	if (shostpnt == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1184: FILE: drivers/scsi/scsi_lib.c:1257:
+	} else

ERROR:SPACING: space required before the open parenthesis '('
#1190: FILE: drivers/scsi/scsi_lib.c:1263:
+			for(; SDpnt; SDpnt = SDpnt->sdev_next) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: drivers/scsi/scsi_lib.c:1265:
+				if ((channel == SCSI_FIND_ALL_CHANNEL ||
+				   channel == SDpnt->channel) &&

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1199: FILE: drivers/scsi/scsi_lib.c:1272:
+
+			}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1201: FILE: drivers/scsi/scsi_lib.c:1274:
+
+		}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1222: FILE: drivers/scsi/scsi_lib.c:1295:
+ * ^I^Iusing the specified format.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1227: FILE: drivers/scsi/scsi_lib.c:1300:
+ * ^I^Iis in hosts.h, Scsi_Device in scsi.h).$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1230: FILE: drivers/scsi/scsi_lib.c:1303:
+void scsi_paths_printk(Scsi_Device *SDpnt, char *prefix,
+	char *format)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1232: FILE: drivers/scsi/scsi_lib.c:1305:
+	printk(format, SDpnt->host->host_no, SDpnt->channel, SDpnt->id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: drivers/scsi/scsi_lib.c:1313:
+	return(sprintf(buffer, format, SDpnt->host->host_no,
+		      SDpnt->channel, SDpnt->id, SDpnt->lun));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 42 warnings, 85 checks, 1146 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
