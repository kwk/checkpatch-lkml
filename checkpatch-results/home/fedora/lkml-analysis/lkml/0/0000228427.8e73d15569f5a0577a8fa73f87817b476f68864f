WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#51: 
Signed-Off-By: Guillaume Thouvenin <guillaume.thouvenin@bull.net>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: fork.c:63:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: fork.c:64:
+ * fork_hook is a pointer to a function to call when forking if it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: fork.c:65:
+ * isn't NULL.  $

WARNING:SPACING: Unnecessary space before function pointer arguments
#63: FILE: fork.c:67:
+void (*fork_hook) (int, int) = NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: fork.c:75:
+ * Function returns 0 on success, -1 on failure (ie hook is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: fork.c:80:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: fork.c:81:
+^I * fork_hook_id is used as a lock to protect the use of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: fork.c:82:
+^I * fork_hook variable. A module can set the fork_hook $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: fork.c:84:
+^I * or if it has the corresponding fork_hook_id. $

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#83: FILE: fork.c:87:
+	static int fork_hook_id = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'func != NULL'
#86: FILE: fork.c:90:
+	if ((func != NULL) && (fork_hook_id == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fork_hook_id == 0'
#86: FILE: fork.c:90:
+	if ((func != NULL) && (fork_hook_id == 0)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "func"
#86: FILE: fork.c:90:
+	if ((func != NULL) && (fork_hook_id == 0)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'func == NULL'
#93: FILE: fork.c:97:
+	if ((func == NULL) && (fork_hook_id == id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fork_hook_id == id'
#93: FILE: fork.c:97:
+	if ((func == NULL) && (fork_hook_id == id)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!func"
#93: FILE: fork.c:97:
+	if ((func == NULL) && (fork_hook_id == id)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fork_hook"
#112: FILE: fork.c:1330:
+	if (fork_hook != NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000228427.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 3 warnings, 7 checks, 61 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000228427.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
