WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#69: FILE: ipv6/ndisc.c:601:
+			printk(KERN_WARNING "ICMP NS: packet too short\n");

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#73: FILE: ipv6/ndisc.c:605:
+	if (ipv6_addr_type(&msg->target)&IPV6_ADDR_MULTICAST) {
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#75: FILE: ipv6/ndisc.c:607:
+			printk(KERN_WARNING "ICMP NS: target address is multicast\n");

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#81: FILE: ipv6/ndisc.c:613:
+			printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");
 			                                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#81: FILE: ipv6/ndisc.c:613:
+			printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#86: FILE: ipv6/ndisc.c:618:
+		lladdr = (u8*)(ndopts.nd_opts_src_lladdr + 1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#90: FILE: ipv6/ndisc.c:622:
+				printk(KERN_WARNING "ICMP NS: bad lladdr length.\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: ipv6/ndisc.c:628:
+^I * ^IIf the IP source address is the unspecified address, there$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: ipv6/ndisc.c:633:
+^I^I ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: ipv6/ndisc.c:633:
+^I^I ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: ipv6/ndisc.c:636:
+      ^I *^Idestination address MUST be a solicited-node multicast address.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: ipv6/ndisc.c:636:
+      ^I *^Idestination address MUST be a solicited-node multicast address.$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#107: FILE: ipv6/ndisc.c:639:
+	if ((ifp = ipv6_get_ifaddr(&msg->target, dev)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#112: FILE: ipv6/ndisc.c:644:
+			/* Address is tentative. If the source
+			   is unspecified address, it is someone

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#116: FILE: ipv6/ndisc.c:648:
+			if (addr_type == IPV6_ADDR_ANY) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: ipv6/ndisc.c:649:
+^I^I^I^Iif (dev->type == ARPHRD_IEEE802_TR) { $

WARNING:SPACING: space prohibited before semicolon
#118: FILE: ipv6/ndisc.c:650:
+					unsigned char *sadr = skb->mac.raw ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: ipv6/ndisc.c:651:
+					unsigned char *sadr = skb->mac.raw ;
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||
+					(sadr[10] != dev->dev_addr[2]) ||
+					(sadr[11] != dev->dev_addr[3]) ||
+					(sadr[12] != dev->dev_addr[4]) ||
+					(sadr[13] != dev->dev_addr[5])) 
+					{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
 					              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sadr[9] != dev->dev_addr[1]'
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||
+					(sadr[10] != dev->dev_addr[2]) ||
+					(sadr[11] != dev->dev_addr[3]) ||
+					(sadr[12] != dev->dev_addr[4]) ||
+					(sadr[13] != dev->dev_addr[5])) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sadr[10] != dev->dev_addr[2]'
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||
+					(sadr[10] != dev->dev_addr[2]) ||
+					(sadr[11] != dev->dev_addr[3]) ||
+					(sadr[12] != dev->dev_addr[4]) ||
+					(sadr[13] != dev->dev_addr[5])) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sadr[11] != dev->dev_addr[3]'
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||
+					(sadr[10] != dev->dev_addr[2]) ||
+					(sadr[11] != dev->dev_addr[3]) ||
+					(sadr[12] != dev->dev_addr[4]) ||
+					(sadr[13] != dev->dev_addr[5])) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sadr[12] != dev->dev_addr[4]'
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||
+					(sadr[10] != dev->dev_addr[2]) ||
+					(sadr[11] != dev->dev_addr[3]) ||
+					(sadr[12] != dev->dev_addr[4]) ||
+					(sadr[13] != dev->dev_addr[5])) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sadr[13] != dev->dev_addr[5]'
#119: FILE: ipv6/ndisc.c:651:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||
+					(sadr[10] != dev->dev_addr[2]) ||
+					(sadr[11] != dev->dev_addr[3]) ||
+					(sadr[12] != dev->dev_addr[4]) ||
+					(sadr[13] != dev->dev_addr[5])) 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: ipv6/ndisc.c:652:
+					if (((sadr[8] &0x7f) != (dev->dev_addr[0] & 0x7f)) ||
+					(sadr[9] != dev->dev_addr[1]) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: ipv6/ndisc.c:656:
+^I^I^I^I^I(sadr[13] != dev->dev_addr[5])) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: ipv6/ndisc.c:658:
+^I^I^I^I^I^Iaddrconf_dad_failure(ifp) ; $

WARNING:SPACING: space prohibited before semicolon
#126: FILE: ipv6/ndisc.c:658:
+						addrconf_dad_failure(ifp) ; 

CHECK:BRACES: Unbalanced braces around else statement
#131: FILE: ipv6/ndisc.c:663:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: ipv6/ndisc.c:667:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: ipv6/ndisc.c:672:
+^I^I^Indisc_send_na(dev, NULL, &maddr, &ifp->addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: ipv6/ndisc.c:673:
+^I^I^I^I      ifp->idev->cnf.forwarding, 0, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: ipv6/ndisc.c:674:
+^I^I^I^I      ipv6_addr_type(&ifp->addr)&IPV6_ADDR_ANYCAST ? 0 : 1, $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#142: FILE: ipv6/ndisc.c:674:
+				      ipv6_addr_type(&ifp->addr)&IPV6_ADDR_ANYCAST ? 0 : 1, 
 				                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#149: FILE: ipv6/ndisc.c:681:
+			int inc = ipv6_addr_type(daddr)&IPV6_ADDR_MULTICAST;
 			                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: ipv6/ndisc.c:688:
+^I^I^I/* $

WARNING:TYPO_SPELLING: 'adddress' may be misspelled - perhaps 'address'?
#158: FILE: ipv6/ndisc.c:690:
+			 *	for the source adddress
 			  	               ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: ipv6/ndisc.c:696:
+^I^I^I^Indisc_send_na(dev, neigh, saddr, &ifp->addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: ipv6/ndisc.c:697:
+^I^I^I^I^I      ifp->idev->cnf.forwarding, 1, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: ipv6/ndisc.c:698:
+^I^I^I^I^I      ipv6_addr_type(&ifp->addr)&IPV6_ADDR_ANYCAST ? 0 : 1, $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#166: FILE: ipv6/ndisc.c:698:
+					      ipv6_addr_type(&ifp->addr)&IPV6_ADDR_ANYCAST ? 0 : 1, 
 					                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#180: FILE: ipv6/ndisc.c:712:
+			int inc = ipv6_addr_type(daddr)&IPV6_ADDR_MULTICAST;
 			                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: ipv6/ndisc.c:722:
+^I^I^I^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: ipv6/ndisc.c:732:
+				struct sk_buff *n = skb_clone(skb, GFP_ATOMIC);
+				if (n)

WARNING:RETURN_VOID: void function return statements are not generally useful
#210: FILE: ipv6/ndisc.c:742:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#227: FILE: ipv6/ndisc.c:759:
+			printk(KERN_WARNING "ICMP NA: packet too short\n");

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#231: FILE: ipv6/ndisc.c:763:
+	if (ipv6_addr_type(&msg->target)&IPV6_ADDR_MULTICAST) {
 	                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#233: FILE: ipv6/ndisc.c:765:
+			printk(KERN_WARNING "NDISC NA: target address is multicast\n");

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#237: FILE: ipv6/ndisc.c:769:
+	if ((ipv6_addr_type(daddr)&IPV6_ADDR_MULTICAST) &&
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: ipv6/ndisc.c:774:
+^I^I$

WARNING:TYPO_SPELLING: 'ND' may be misspelled - perhaps 'AND'?
#245: FILE: ipv6/ndisc.c:777:
+			printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");
 			                                      ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#245: FILE: ipv6/ndisc.c:777:
+			printk(KERN_WARNING "ICMP NS: invalid ND option, ignored.\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#249: FILE: ipv6/ndisc.c:781:
+		lladdr = (u8*)(ndopts.nd_opts_tgt_lladdr + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#253: FILE: ipv6/ndisc.c:785:
+				printk(KERN_WARNING "NDISC NA: invalid lladdr length.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#257: FILE: ipv6/ndisc.c:789:
+	if ((ifp = ipv6_get_ifaddr(&msg->target, dev))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#263: FILE: ipv6/ndisc.c:795:
+		/* What should we make now? The advertisement
+		   is invalid, but ndisc specs say nothing

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: ipv6/ndisc.c:813:
+				struct rt6_info *rt;
+				rt = rt6_get_dflt_router(saddr, dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#284: FILE: ipv6/ndisc.c:816:
+					/* It is safe only because
+					   we aer in BH */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#284: FILE: ipv6/ndisc.c:816:
+					   we aer in BH */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419808.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 25 warnings, 16 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419808.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
