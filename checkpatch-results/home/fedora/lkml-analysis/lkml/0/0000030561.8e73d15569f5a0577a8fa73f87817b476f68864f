WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: fs/unionfs/main.c:51:
+	BUG_ON(is_negative_dentry);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#101: FILE: fs/unionfs/main.c:59:
+	 * to fix it up. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#176: FILE: fs/unionfs/main.c:134:
+	switch (flag) {
+		case INTERPOSE_DEFAULT:
+		case INTERPOSE_REVAL_NEG:
[...]
+		case INTERPOSE_LOOKUP:
[...]
+		case INTERPOSE_REVAL:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#188: FILE: fs/unionfs/main.c:146:
+			printk(KERN_ERR "Invalid interpose flag passed!");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: fs/unionfs/main.c:147:
+			BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#226: FILE: fs/unionfs/main.c:184:
+int check_branch(struct nameidata *nd)
                                    ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#255: FILE: fs/unionfs/main.c:213:
+}
+static int parse_branch_mode(char *name)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: fs/unionfs/main.c:217:
+	int l = strlen(name);
+	if (!strcmp(name + l - 3, "=ro")) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: fs/unionfs/main.c:217:
+	if (!strcmp(name + l - 3, "=ro")) {
[...]
+	} else if (!strcmp(name + l - 6, "=nfsro")) {
[...]
+	} else if (!strcmp(name + l - 3, "=rw")) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#268: FILE: fs/unionfs/main.c:226:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#277: FILE: fs/unionfs/main.c:235:
+	struct nameidata nd;
 	                 ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#289: FILE: fs/unionfs/main.c:247:
+		printk(KERN_WARNING "unionfs: no branches specified\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#295: FILE: fs/unionfs/main.c:253:
+	 * guess, since strsep will handle empty fields for us. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#301: FILE: fs/unionfs/main.c:259:
+	if (!(stopd(sb)->usi_data = alloc_new_data(branches))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#306: FILE: fs/unionfs/main.c:264:
+	if (!(hidden_root_info->udi_dentry = alloc_new_dentries(branches))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: fs/unionfs/main.c:270:
+	hidden_root_info->udi_mnt = kcalloc(branches,
+			sizeof(struct vfsmount *), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#335: FILE: fs/unionfs/main.c:293:
+		err = path_lookup(name, LOOKUP_FOLLOW, &nd);
 		                                        ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#337: FILE: fs/unionfs/main.c:295:
+			printk(KERN_WARNING "unionfs: error accessing "

WARNING:SPLIT_STRING: quoted string split across lines
#338: FILE: fs/unionfs/main.c:296:
+			printk(KERN_WARNING "unionfs: error accessing "
+			       "hidden directory '%s' (error %d)\n", name, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#342: FILE: fs/unionfs/main.c:300:
+		if ((err = check_branch(&nd))) {
 		                         ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#342: FILE: fs/unionfs/main.c:300:
+		if ((err = check_branch(&nd))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#343: FILE: fs/unionfs/main.c:301:
+			printk(KERN_WARNING "unionfs: hidden directory "

WARNING:SPLIT_STRING: quoted string split across lines
#344: FILE: fs/unionfs/main.c:302:
+			printk(KERN_WARNING "unionfs: hidden directory "
+			       "'%s' is not a valid branch\n", name);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#345: FILE: fs/unionfs/main.c:303:
+			path_release(&nd);
 			              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#349: FILE: fs/unionfs/main.c:307:
+		hidden_root_info->udi_dentry[bindex] = nd.dentry;
 		                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#350: FILE: fs/unionfs/main.c:308:
+		hidden_root_info->udi_mnt[bindex] = nd.mnt;
 		                                    ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#362: FILE: fs/unionfs/main.c:320:
+		printk(KERN_WARNING "unionfs: no branches specified\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: fs/unionfs/main.c:325:
+	BUG_ON(branches != (hidden_root_info->udi_bend + 1));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#376: FILE: fs/unionfs/main.c:334:
+				printk(KERN_WARNING "unionfs: branches %d and %d overlap\n", i, j);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#445: FILE: fs/unionfs/main.c:403:
+		 * don't, above this check.  */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: fs/unionfs/main.c:405:
+			printk("unionfs: %s requires an argument.\n", optname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#454: FILE: fs/unionfs/main.c:412:
+				printk(KERN_WARNING

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#466: FILE: fs/unionfs/main.c:424:
+		intval = simple_strtoul(optarg, &endptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#468: FILE: fs/unionfs/main.c:426:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#476: FILE: fs/unionfs/main.c:434:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#481: FILE: fs/unionfs/main.c:439:
+		printk(KERN_WARNING "unionfs: dirs option required\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: fs/unionfs/main.c:479:
+		static const struct qstr name = {.name = "/",.len = 1 };
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#542: FILE: fs/unionfs/main.c:500:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_read_super', this function's name, in a string
#543: FILE: fs/unionfs/main.c:501:
+		       "unionfs_read_super: missing data argument\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#553: FILE: fs/unionfs/main.c:511:
+		printk(KERN_WARNING "%s: out of memory\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#553: FILE: fs/unionfs/main.c:511:
+		printk(KERN_WARNING "%s: out of memory\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#563: FILE: fs/unionfs/main.c:521:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_read_super', this function's name, in a string
#564: FILE: fs/unionfs/main.c:522:
+		       "unionfs_read_super: error while parsing options (err = %ld)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#577: FILE: fs/unionfs/main.c:535:
+	BUG_ON(bstart != 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#605: FILE: fs/unionfs/main.c:563:
+	if ((err = new_dentry_private_data(sb->s_root)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#626: FILE: fs/unionfs/main.c:584:
+	if ((err = unionfs_interpose(sb->s_root, sb, 0)))

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#692: FILE: fs/unionfs/main.c:650:
+static int init_debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#693: FILE: fs/unionfs/main.c:651:
+module_param_named(debug, init_debug, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#699: FILE: fs/unionfs/main.c:657:
+	int err;
+	printk("Registering unionfs " UNIONFS_VERSION "\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#699: FILE: fs/unionfs/main.c:657:
+	printk("Registering unionfs " UNIONFS_VERSION "\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#701: FILE: fs/unionfs/main.c:659:
+	if ((err = init_filldir_cache()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#703: FILE: fs/unionfs/main.c:661:
+	if ((err = init_inode_cache()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#705: FILE: fs/unionfs/main.c:663:
+	if ((err = init_dentry_cache()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#707: FILE: fs/unionfs/main.c:665:
+	if ((err = init_sioq()))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#719: FILE: fs/unionfs/main.c:677:
+}
+static void __exit exit_unionfs_fs(void)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#726: FILE: fs/unionfs/main.c:684:
+	printk("Completed unionfs module unload.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#730: FILE: fs/unionfs/main.c:688:
+MODULE_AUTHOR("Erez Zadok, Filesystems and Storage Lab, Stony Brook University"
+		" (http://www.fsl.cs.sunysb.edu)");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030561.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 41 warnings, 5 checks, 695 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030561.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
