WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -B --unidirectional-new-file --exclude-from=DiffExcludeList --recursive --unified linux-2.2.16/include/asm-alpha/div64.h linux/include/asm-alpha/div64.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: include/asm-alpha/div64.h:1:
+#ifndef __ALPHA_DIV64

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#54: FILE: include/asm-alpha/div64.h:8:
+#define do_div(n,base) ({ \
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#54: FILE: include/asm-alpha/div64.h:8:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) (n)) % (unsigned) (base); \
+	(n) = ((unsigned long) (n)) / (unsigned) (base); \
+	__res; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#54: FILE: include/asm-alpha/div64.h:8:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) (n)) % (unsigned) (base); \
+	(n) = ((unsigned long) (n)) / (unsigned) (base); \
+	__res; })

CHECK:SPACING: No space is necessary after a cast
#56: FILE: include/asm-alpha/div64.h:10:
+	__res = ((unsigned long) (n)) % (unsigned) (base); \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#56: FILE: include/asm-alpha/div64.h:10:
+	__res = ((unsigned long) (n)) % (unsigned) (base); \

CHECK:SPACING: No space is necessary after a cast
#57: FILE: include/asm-alpha/div64.h:11:
+	(n) = ((unsigned long) (n)) / (unsigned) (base); \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#57: FILE: include/asm-alpha/div64.h:11:
+	(n) = ((unsigned long) (n)) / (unsigned) (base); \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/asm-arm/div64.h:1:
+#ifndef __ASM_ARM_DIV64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: include/asm-arm/div64.h:5:
+#define do_div(n,base)						\
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#69: FILE: include/asm-arm/div64.h:5:
+#define do_div(n,base)						\
+({								\
+	int __res;						\
+	__res = ((unsigned long)n) % (unsigned int)base;	\
+	n = ((unsigned long)n) / (unsigned int)base;		\
+	__res;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#69: FILE: include/asm-arm/div64.h:5:
+#define do_div(n,base)						\
+({								\
+	int __res;						\
+	__res = ((unsigned long)n) % (unsigned int)base;	\
+	n = ((unsigned long)n) / (unsigned int)base;		\
+	__res;							\
+})

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: include/asm-i386/div64.h:1:
+#ifndef __I386_DIV64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: include/asm-i386/div64.h:4:
+#define do_div(n,base) ({ \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#86: FILE: include/asm-i386/div64.h:4:
+#define do_div(n,base) ({ \
+	unsigned long __upper, __low, __high, __mod; \
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
+	__upper = __high; \
+	if (__high) { \
+		__upper = __high % (base); \
+		__high = __high / (base); \
+	} \
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (base), "0" (__low), "1" (__upper)); \
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
+	__mod; \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#86: FILE: include/asm-i386/div64.h:4:
+#define do_div(n,base) ({ \
+	unsigned long __upper, __low, __high, __mod; \
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
+	__upper = __high; \
+	if (__high) { \
+		__upper = __high % (base); \
+		__high = __high / (base); \
+	} \
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (base), "0" (__low), "1" (__upper)); \
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
+	__mod; \
+})

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#88: FILE: include/asm-i386/div64.h:6:
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 	      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#88: FILE: include/asm-i386/div64.h:6:
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 	                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#94: FILE: include/asm-i386/div64.h:12:
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (base), "0" (__low), "1" (__upper)); \
 	             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#94: FILE: include/asm-i386/div64.h:12:
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (base), "0" (__low), "1" (__upper)); \
 	                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#95: FILE: include/asm-i386/div64.h:13:
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
 	      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#95: FILE: include/asm-i386/div64.h:13:
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: include/asm-i386/div64.h:13:
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
 	                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: include/asm-m68k/div64.h:1:
+#ifndef _M68K_DIV64_H

WARNING:IF_1: Consider removing the #if 1 and its #endif
#109: FILE: include/asm-m68k/div64.h:6:
+#if 1

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#110: FILE: include/asm-m68k/div64.h:7:
+#define do_div(n, base) ({					\
+	union {							\
+		unsigned long n32[2];				\
+		unsigned long long n64;				\
+	} __n;							\
+	unsigned long __rem, __upper;				\
+								\
+	__n.n64 = (n);						\
+	if ((__upper = __n.n32[0])) {				\
+		asm ("divul.l %2,%1:%0"				\
+			: "=d" (__n.n32[0]), "=d" (__upper)	\
+			: "d" (base), "0" (__n.n32[0]));	\
+	}							\
+	asm ("divu.l %2,%1:%0"					\
+		: "=d" (__n.n32[1]), "=d" (__rem)		\
+		: "d" (base), "1" (__upper), "0" (__n.n32[1]));	\
+	(n) = __n.n64;						\
+	__rem;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#110: FILE: include/asm-m68k/div64.h:7:
+#define do_div(n, base) ({					\
+	union {							\
+		unsigned long n32[2];				\
+		unsigned long long n64;				\
+	} __n;							\
+	unsigned long __rem, __upper;				\
+								\
+	__n.n64 = (n);						\
+	if ((__upper = __n.n32[0])) {				\
+		asm ("divul.l %2,%1:%0"				\
+			: "=d" (__n.n32[0]), "=d" (__upper)	\
+			: "d" (base), "0" (__n.n32[0]));	\
+	}							\
+	asm ("divu.l %2,%1:%0"					\
+		: "=d" (__n.n32[1]), "=d" (__rem)		\
+		: "d" (base), "1" (__upper), "0" (__n.n32[1]));	\
+	(n) = __n.n64;						\
+	__rem;							\
+})

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#118: FILE: include/asm-m68k/div64.h:15:
+	if ((__upper = __n.n32[0])) {				\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: include/asm-m68k/div64.h:27:
+#define do_div(n,base) ({					\
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#130: FILE: include/asm-m68k/div64.h:27:
+#define do_div(n,base) ({					\
+	int __res;						\
+	__res = ((unsigned long) n) % (unsigned) base;		\
+	n = ((unsigned long) n) / (unsigned) base;		\
+	__res;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#130: FILE: include/asm-m68k/div64.h:27:
+#define do_div(n,base) ({					\
+	int __res;						\
+	__res = ((unsigned long) n) % (unsigned) base;		\
+	n = ((unsigned long) n) / (unsigned) base;		\
+	__res;							\
+})

CHECK:SPACING: No space is necessary after a cast
#132: FILE: include/asm-m68k/div64.h:29:
+	__res = ((unsigned long) n) % (unsigned) base;		\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#132: FILE: include/asm-m68k/div64.h:29:
+	__res = ((unsigned long) n) % (unsigned) base;		\

CHECK:SPACING: No space is necessary after a cast
#133: FILE: include/asm-m68k/div64.h:30:
+	n = ((unsigned long) n) / (unsigned) base;		\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#133: FILE: include/asm-m68k/div64.h:30:
+	n = ((unsigned long) n) / (unsigned) base;		\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: include/asm-mips/div64.h:1:
+/* $Id: div64.h,v 1.1.2.1 2000/08/12 00:41:49 zapman Exp $

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#143: FILE: include/asm-mips/div64.h:1:
+/* $Id: div64.h,v 1.1.2.1 2000/08/12 00:41:49 zapman Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#156: FILE: include/asm-mips/div64.h:14:
+#define do_div(n,base) ({ \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#156: FILE: include/asm-mips/div64.h:14:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) n) % (unsigned) base; \
+	n = ((unsigned long) n) / (unsigned) base; \
+	__res; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#156: FILE: include/asm-mips/div64.h:14:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) n) % (unsigned) base; \
+	n = ((unsigned long) n) / (unsigned) base; \
+	__res; })

CHECK:SPACING: No space is necessary after a cast
#158: FILE: include/asm-mips/div64.h:16:
+	__res = ((unsigned long) n) % (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: include/asm-mips/div64.h:16:
+	__res = ((unsigned long) n) % (unsigned) base; \

CHECK:SPACING: No space is necessary after a cast
#159: FILE: include/asm-mips/div64.h:17:
+	n = ((unsigned long) n) / (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: include/asm-mips/div64.h:17:
+	n = ((unsigned long) n) / (unsigned) base; \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: include/asm-ppc/div64.h:1:
+#ifndef __PPC_DIV64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: include/asm-ppc/div64.h:4:
+#define do_div(n,base) ({ \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#170: FILE: include/asm-ppc/div64.h:4:
+#define do_div(n,base) ({ \
+int __res; \
+__res = ((unsigned long) n) % (unsigned) base; \
+n = ((unsigned long) n) / (unsigned) base; \
+__res; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#170: FILE: include/asm-ppc/div64.h:4:
+#define do_div(n,base) ({ \
+int __res; \
+__res = ((unsigned long) n) % (unsigned) base; \
+n = ((unsigned long) n) / (unsigned) base; \
+__res; })

CHECK:SPACING: No space is necessary after a cast
#172: FILE: include/asm-ppc/div64.h:6:
+__res = ((unsigned long) n) % (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: include/asm-ppc/div64.h:6:
+__res = ((unsigned long) n) % (unsigned) base; \

CHECK:SPACING: No space is necessary after a cast
#173: FILE: include/asm-ppc/div64.h:7:
+n = ((unsigned long) n) / (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#173: FILE: include/asm-ppc/div64.h:7:
+n = ((unsigned long) n) / (unsigned) base; \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#181: FILE: include/asm-s390/div64.h:1:
+#ifndef __S390_DIV64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: include/asm-s390/div64.h:4:
+#define do_div(n,base) ({ \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#184: FILE: include/asm-s390/div64.h:4:
+#define do_div(n,base) ({ \
+int __res; \
+__res = ((unsigned long) n) % (unsigned) base; \
+n = ((unsigned long) n) / (unsigned) base; \
+__res; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#184: FILE: include/asm-s390/div64.h:4:
+#define do_div(n,base) ({ \
+int __res; \
+__res = ((unsigned long) n) % (unsigned) base; \
+n = ((unsigned long) n) / (unsigned) base; \
+__res; })

CHECK:SPACING: No space is necessary after a cast
#186: FILE: include/asm-s390/div64.h:6:
+__res = ((unsigned long) n) % (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: include/asm-s390/div64.h:6:
+__res = ((unsigned long) n) % (unsigned) base; \

CHECK:SPACING: No space is necessary after a cast
#187: FILE: include/asm-s390/div64.h:7:
+n = ((unsigned long) n) / (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#187: FILE: include/asm-s390/div64.h:7:
+n = ((unsigned long) n) / (unsigned) base; \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#195: FILE: include/asm-sparc/div64.h:1:
+#ifndef __SPARC_DIV64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: include/asm-sparc/div64.h:5:
+#define do_div(n,base) ({ \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#199: FILE: include/asm-sparc/div64.h:5:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) n) % (unsigned) base; \
+	n = ((unsigned long) n) / (unsigned) base; \
+	__res; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#199: FILE: include/asm-sparc/div64.h:5:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) n) % (unsigned) base; \
+	n = ((unsigned long) n) / (unsigned) base; \
+	__res; })

CHECK:SPACING: No space is necessary after a cast
#201: FILE: include/asm-sparc/div64.h:7:
+	__res = ((unsigned long) n) % (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#201: FILE: include/asm-sparc/div64.h:7:
+	__res = ((unsigned long) n) % (unsigned) base; \

CHECK:SPACING: No space is necessary after a cast
#202: FILE: include/asm-sparc/div64.h:8:
+	n = ((unsigned long) n) / (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: include/asm-sparc/div64.h:8:
+	n = ((unsigned long) n) / (unsigned) base; \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#210: FILE: include/asm-sparc64/div64.h:1:
+#ifndef __SPARC64_DIV64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: include/asm-sparc64/div64.h:8:
+#define do_div(n,base) ({ \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#217: FILE: include/asm-sparc64/div64.h:8:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) n) % (unsigned) base; \
+	n = ((unsigned long) n) / (unsigned) base; \
+	__res; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#217: FILE: include/asm-sparc64/div64.h:8:
+#define do_div(n,base) ({ \
+	int __res; \
+	__res = ((unsigned long) n) % (unsigned) base; \
+	n = ((unsigned long) n) / (unsigned) base; \
+	__res; })

CHECK:SPACING: No space is necessary after a cast
#219: FILE: include/asm-sparc64/div64.h:10:
+	__res = ((unsigned long) n) % (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#219: FILE: include/asm-sparc64/div64.h:10:
+	__res = ((unsigned long) n) % (unsigned) base; \

CHECK:SPACING: No space is necessary after a cast
#220: FILE: include/asm-sparc64/div64.h:11:
+	n = ((unsigned long) n) / (unsigned) base; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: include/asm-sparc64/div64.h:11:
+	n = ((unsigned long) n) / (unsigned) base; \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#243: FILE: lib/vsprintf.c:35:
+	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#243: FILE: lib/vsprintf.c:35:
+	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#243: FILE: lib/vsprintf.c:35:
+	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
 	                                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: lib/vsprintf.c:68:
+static char * number(char * str, long long num, int base, int size, int precision, int type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: lib/vsprintf.c:68:
+static char * number(char * str, long long num, int base, int size, int precision, int type)

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: lib/vsprintf.c:151:
+^I                        /* 'z' support added 23/7/1999 S.H.    */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: lib/vsprintf.c:154:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: lib/vsprintf.c:154:
 
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#322: FILE: lib/vsprintf.c:204:
+		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt =='Z') {
 		                                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: lib/vsprintf.c:254:
+				size_t * ip = va_arg(args, size_t *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#341: FILE: lib/vsprintf.c:291:
+		if (qualifier == 'L')
[...]
+		else if (qualifier == 'l') {
[...]
+				num = (signed long) num;
[...]
+			num = va_arg(args, size_t);
[...]
-				num = (short) num;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#347: FILE: lib/vsprintf.c:296:
+				num = (signed long) num;

CHECK:SPACING: No space is necessary after a cast
#357: FILE: lib/vsprintf.c:302:
+				num = (signed short) num;

CHECK:SPACING: No space is necessary after a cast
#361: FILE: lib/vsprintf.c:306:
+				num = (signed int) num;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000567571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 26 warnings, 48 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000567571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
