WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
--- linux-2.6.17-rc4.orig/perfmon/perfmon_dfl_smpl.c	1969-12-31 16:00:00.000000000 -0800

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#29: FILE: perfmon/perfmon_dfl_smpl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#56: FILE: perfmon/perfmon_dfl_smpl.c:28:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#65: FILE: perfmon/perfmon_dfl_smpl.c:37:
+#define MAX_SIZE_T	(1ULL<<(sizeof(size_t)<<3))
                   	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#65: FILE: perfmon/perfmon_dfl_smpl.c:37:
+#define MAX_SIZE_T	(1ULL<<(sizeof(size_t)<<3))
                   	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: perfmon/perfmon_dfl_smpl.c:43:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: perfmon/perfmon_dfl_smpl.c:49:
+^I             + (sizeof(struct pfm_dfl_smpl_entry) + (npmds*sizeof(u64)));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#77: FILE: perfmon/perfmon_dfl_smpl.c:49:
+	             + (sizeof(struct pfm_dfl_smpl_entry) + (npmds*sizeof(u64)));
 	                                                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#80: FILE: perfmon/perfmon_dfl_smpl.c:52:
+	PFM_DBG("validate ctx_flags=0x%x flags=0x%x npmds=%u "
+		   "min_buf_size=%llu buf_size=%llu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: perfmon/perfmon_dfl_smpl.c:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#125: FILE: perfmon/perfmon_dfl_smpl.c:97:
+	hdr->hdr_min_buf_space = sizeof(struct pfm_dfl_smpl_entry) + (npmds*sizeof(u64));
 	                                                                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#128: FILE: perfmon/perfmon_dfl_smpl.c:100:
+	PFM_DBG("buffer=%p buf_size=%llu hdr_size=%zu hdr_version=%u.%u "
+		  "min_space=%llu npmds=%u",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#152: FILE: perfmon/perfmon_dfl_smpl.c:124:
+	cur = buf+hdr->hdr_cur_offs;
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: perfmon/perfmon_dfl_smpl.c:125:
+	last = buf+hdr->hdr_buf_size;
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#170: FILE: perfmon/perfmon_dfl_smpl.c:142:
+	e = (u64 *)(ent+1);
 	               ^

WARNING:SPLIT_STRING: quoted string split across lines
#175: FILE: perfmon/perfmon_dfl_smpl.c:147:
+	PFM_DBG_ovfl("count=%llu cur=%p last=%p free_bytes=%zu ovfl_pmd=%d "
+		       "npmds=%u",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: perfmon/perfmon_dfl_smpl.c:150:
+		       (last-cur),
 		            ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: perfmon/perfmon_dfl_smpl.c:158:
+^I * ^I- this is usually the task being monitored.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: perfmon/perfmon_dfl_smpl.c:159:
+^I * ^I  Under certain conditions, it might be a different task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: perfmon/perfmon_dfl_smpl.c:162:
+^I * ^I- this is not necessarily the task controlling the session$

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		u64 *val = arg->smpl_pmds_values;
+		for(i=0; i < npmds; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#211: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		for(i=0; i < npmds; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		for(i=0; i < npmds; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#211: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		for(i=0; i < npmds; i++) {
+			*e++ = *val++;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#234: FILE: perfmon/perfmon_dfl_smpl.c:206:
+		     last-cur,
 		         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#248: FILE: perfmon/perfmon_dfl_smpl.c:220:
+	arg->ovfl_ctrl = PFM_OVFL_CTRL_NOTIFY| PFM_OVFL_CTRL_MASK;
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#272: FILE: perfmon/perfmon_dfl_smpl.c:244:
+static struct pfm_smpl_fmt dfl_fmt={
                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#301: FILE: perfmon/perfmon_file.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: perfmon/perfmon_file.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#335: FILE: perfmon/perfmon_file.c:35:
+static struct file_operations pfm_file_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#342: FILE: perfmon/perfmon_file.c:42:
+static struct dentry_operations pfmfs_dentry_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#346: FILE: perfmon/perfmon_file.c:46:
+int pfm_is_fd(struct file *filp)
                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#366: FILE: perfmon/perfmon_file.c:66:
+	msg = ctx->msgq+ctx->msgq_head;
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#371: FILE: perfmon/perfmon_file.c:71:
+	ctx->msgq_head = (ctx->msgq_head+1) % PFM_MAX_MSGS;
 	                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#391: FILE: perfmon/perfmon_file.c:91:
+	if (ctx == NULL) {

CHECK:SPACING: No space is necessary after a cast
#397: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#397: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) vma->vm_start'
#397: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + size)) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: perfmon/perfmon_file.c:98:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + size)) )

CHECK:SPACING: No space is necessary after a cast
#398: FILE: perfmon/perfmon_file.c:98:
+	     (address > (unsigned long) (vma->vm_start + size)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#398: FILE: perfmon/perfmon_file.c:98:
+	     (address > (unsigned long) (vma->vm_start + size)) )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kaddr"
#423: FILE: perfmon/perfmon_file.c:123:
+	if (kaddr == NULL) {

CHECK:SPACING: No space is necessary after a cast
#428: FILE: perfmon/perfmon_file.c:128:
+	if ( (address < (unsigned long) vma->vm_start) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#428: FILE: perfmon/perfmon_file.c:128:
+	if ( (address < (unsigned long) vma->vm_start) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) vma->vm_start'
#428: FILE: perfmon/perfmon_file.c:128:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: perfmon/perfmon_file.c:129:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:SPACING: No space is necessary after a cast
#429: FILE: perfmon/perfmon_file.c:129:
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#429: FILE: perfmon/perfmon_file.c:129:
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: perfmon/perfmon_file.c:141:
+	PFM_DBG("[%d] start=%p ref_count=%d",
+		  current->pid,

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#447: FILE: perfmon/perfmon_file.c:147:
+struct vm_operations_struct pfm_buf_map_vm_ops = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#451: FILE: perfmon/perfmon_file.c:151:
+struct vm_operations_struct pfm_view_map_vm_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#455: FILE: perfmon/perfmon_file.c:155:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: perfmon/perfmon_file.c:165:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#469: FILE: perfmon/perfmon_file.c:169:
+	if (ctx == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#487: FILE: perfmon/perfmon_file.c:187:
+	if (vma->vm_pgoff == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx->smpl_addr"
#488: FILE: perfmon/perfmon_file.c:188:
+		if (ctx->smpl_addr == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: perfmon/perfmon_file.c:195:
+			PFM_DBG("mmap size=%zu >= actual buf size=%zu",
+				  size,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#510: FILE: perfmon/perfmon_file.c:210:
+		if (vma->vm_pgoff < PFM_SET_REMAP_OFFS
+		    || vma->vm_pgoff >= PFM_SET_REMAP_OFFS_MAX) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#522: FILE: perfmon/perfmon_file.c:222:
+		if (set == NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#539: FILE: perfmon/perfmon_file.c:239:
+		vma->vm_end-vma->vm_start);
 		           ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#547: FILE: perfmon/perfmon_file.c:247:
+static ssize_t pfm_read(struct file *filp, char __user *buf, size_t size,
                                      ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#557: FILE: perfmon/perfmon_file.c:257:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_read', this function's name, in a string
#558: FILE: perfmon/perfmon_file.c:258:
+		PFM_ERR("no ctx for pfm_read");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#584: FILE: perfmon/perfmon_file.c:284:
+	if(PFM_CTXQ_EMPTY(ctx) == 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: perfmon/perfmon_file.c:286:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: perfmon/perfmon_file.c:295:
+      ^Iret = -EAGAIN;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#595: FILE: perfmon/perfmon_file.c:295:
+      ^Iret = -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: perfmon/perfmon_file.c:295:
+      ^Iret = -EAGAIN;$

ERROR:SPACING: space required before the open parenthesis '('
#596: FILE: perfmon/perfmon_file.c:296:
+	if(filp->f_flags & O_NONBLOCK)

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: perfmon/perfmon_file.c:320:
+		if(signal_pending(current))

ERROR:SPACING: space required before the open parenthesis '('
#631: FILE: perfmon/perfmon_file.c:331:
+		if(PFM_CTXQ_EMPTY(ctx) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#653: FILE: perfmon/perfmon_file.c:353:
+	if (unlikely(msg == NULL))

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: perfmon/perfmon_file.c:381:
+  ^I^Iif(copy_to_user(buf, &msg_buf, size))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#681: FILE: perfmon/perfmon_file.c:381:
+  ^I^Iif(copy_to_user(buf, &msg_buf, size))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: perfmon/perfmon_file.c:381:
+  ^I^Iif(copy_to_user(buf, &msg_buf, size))$

ERROR:SPACING: space required before the open parenthesis '('
#681: FILE: perfmon/perfmon_file.c:381:
+  		if(copy_to_user(buf, &msg_buf, size))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: perfmon/perfmon_file.c:389:
+static ssize_t pfm_write(struct file *file, const char __user *ubuf,
+			  size_t size, loff_t *ppos)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_write', this function's name, in a string
#691: FILE: perfmon/perfmon_file.c:391:
+	PFM_DBG("pfm_write called");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#695: FILE: perfmon/perfmon_file.c:395:
+static unsigned int pfm_poll(struct file *filp, poll_table * wait)
                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#695: FILE: perfmon/perfmon_file.c:395:
+static unsigned int pfm_poll(struct file *filp, poll_table * wait)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#701: FILE: perfmon/perfmon_file.c:401:
+	if (!pfm_is_fd(filp)) {
 	               ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_poll', this function's name, in a string
#702: FILE: perfmon/perfmon_file.c:402:
+		PFM_ERR("pfm_poll bad magic");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#707: FILE: perfmon/perfmon_file.c:407:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_poll', this function's name, in a string
#708: FILE: perfmon/perfmon_file.c:408:
+		PFM_ERR("pfm_poll no ctx");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#712: FILE: perfmon/perfmon_file.c:412:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#715: FILE: perfmon/perfmon_file.c:415:
+	poll_wait(filp, &ctx->msgq_wait, wait);
 	          ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: perfmon/perfmon_file.c:430:
+^I  ^I     unsigned long arg)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#730: FILE: perfmon/perfmon_file.c:430:
+^I  ^I     unsigned long arg)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: perfmon/perfmon_file.c:430:
+static int pfm_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	  	     unsigned long arg)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_ioctl', this function's name, in a string
#732: FILE: perfmon/perfmon_file.c:432:
+	PFM_DBG("pfm_ioctl called");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#739: FILE: perfmon/perfmon_file.c:439:
+static inline int __pfm_fasync(int fd, struct file *filp,
                                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#744: FILE: perfmon/perfmon_file.c:444:
+	ret = fasync_helper (fd, filp, on, &ctx->async_queue);
 	                         ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#744: FILE: perfmon/perfmon_file.c:444:
+	ret = fasync_helper (fd, filp, on, &ctx->async_queue);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#754: FILE: perfmon/perfmon_file.c:454:
+static int pfm_fasync(int fd, struct file *filp, int on)
                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#760: FILE: perfmon/perfmon_file.c:460:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_fasync', this function's name, in a string
#761: FILE: perfmon/perfmon_file.c:461:
+		PFM_ERR("pfm_fasync no ctx");

WARNING:TYPO_SPELLING: 'avalaible' may be misspelled - perhaps 'available'?
#767: FILE: perfmon/perfmon_file.c:467:
+	 * may go to sleep if memory is not readily avalaible.
 	                                            ^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'may'
#767: FILE: perfmon/perfmon_file.c:467:
+	 * we cannot mask interrupts during this call because this may
+	 * may go to sleep if memory is not readily avalaible.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#773: FILE: perfmon/perfmon_file.c:473:
+	ret = __pfm_fasync(fd, filp, ctx, on);
 	                       ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_fasync', this function's name, in a string
#775: FILE: perfmon/perfmon_file.c:475:
+	PFM_DBG("pfm_fasync called on fd=%d on=%d async_queue=%p ret=%d",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#798: FILE: perfmon/perfmon_file.c:498:
+int __pfm_close(struct pfm_context *ctx, struct file *filp)
                                                       ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#817: FILE: perfmon/perfmon_file.c:517:
+	if (task == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: perfmon/perfmon_file.c:535:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: perfmon/perfmon_file.c:539:
+^I ^I * We need to release the resource on the ORIGINAL cpu.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#839: FILE: perfmon/perfmon_file.c:539:
+^I ^I * We need to release the resource on the ORIGINAL cpu.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#840: FILE: perfmon/perfmon_file.c:540:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#840: FILE: perfmon/perfmon_file.c:540:
+^I ^I */$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#842: FILE: perfmon/perfmon_file.c:542:
+		if (ctx->cpu != smp_processor_id()) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: perfmon/perfmon_file.c:569:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: perfmon/perfmon_file.c:572:
+^I^I ^I* force task to wake up from MASKED state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#872: FILE: perfmon/perfmon_file.c:572:
+^I^I ^I* force task to wake up from MASKED state$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#872: FILE: perfmon/perfmon_file.c:572:
+			/*
+		 	* force task to wake up from MASKED state

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#873: FILE: perfmon/perfmon_file.c:573:
+^I^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#873: FILE: perfmon/perfmon_file.c:573:
+^I^I ^I*/$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#882: FILE: perfmon/perfmon_file.c:582:
+		free_possible = can_unload = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#896: FILE: perfmon/perfmon_file.c:596:
+	if (state == PFM_CTX_ZOMBIE) {
+		pfm_release_session(ctx, ctx->cpu);
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#904: FILE: perfmon/perfmon_file.c:604:
+	if (filp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'unreacheable' may be misspelled - perhaps 'unreachable'?
#908: FILE: perfmon/perfmon_file.c:608:
+	 * if we free on the spot, the context is now completely unreacheable
 	                                                         ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#925: FILE: perfmon/perfmon_file.c:625:
+static int pfm_close(struct inode *inode, struct file *filp)
                                                        ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#930: FILE: perfmon/perfmon_file.c:630:
+	if (ctx == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#934: FILE: perfmon/perfmon_file.c:634:
+	return __pfm_close(ctx, filp);
 	                        ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#949: FILE: perfmon/perfmon_file.c:649:
+ * ^I- remove virtual mapping for sampling buffer$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#950: FILE: perfmon/perfmon_file.c:650:
+ * ^I- remove from fasync queue$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#952: FILE: perfmon/perfmon_file.c:652:
+static int pfm_flush(struct file *filp)
                                   ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#957: FILE: perfmon/perfmon_file.c:657:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_flush', this function's name, in a string
#958: FILE: perfmon/perfmon_file.c:658:
+		PFM_ERR("pfm_flush no ctx");

WARNING:TYPO_SPELLING: 'unreacheable' may be misspelled - perhaps 'unreachable'?
#965: FILE: perfmon/perfmon_file.c:665:
+	 * here when the context has become unreacheable by other tasks.
 	                                    ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#977: FILE: perfmon/perfmon_file.c:677:
+		__pfm_fasync (-1, filp, ctx, 0);
 		                  ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#977: FILE: perfmon/perfmon_file.c:677:
+		__pfm_fasync (-1, filp, ctx, 0);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#982: FILE: perfmon/perfmon_file.c:682:
+static struct file_operations pfm_file_ops = {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#991: FILE: perfmon/perfmon_file.c:691:
+	.flush= pfm_flush,
 	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#995: FILE: perfmon/perfmon_file.c:695:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1010: FILE: perfmon/perfmon_file.c:710:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: perfmon/perfmon_file.c:722:
+	int err = register_filesystem(&pfm_fs_type);
+	if (!err) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1043: FILE: perfmon/perfmon_file.c:743:
+	struct inode * inode;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1067: FILE: perfmon/perfmon_file.c:767:
+	inode->i_mode = S_IFCHR|S_IRUGO;
 	                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1067: FILE: perfmon/perfmon_file.c:767:
+	inode->i_mode = S_IFCHR|S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1108: FILE: perfmon/perfmon_fmt.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1129: FILE: perfmon/perfmon_fmt.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1148: FILE: perfmon/perfmon_fmt.c:41:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1156: FILE: perfmon/perfmon_fmt.c:49:
+	struct pfm_smpl_fmt * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1167: FILE: perfmon/perfmon_fmt.c:60:
+	struct pfm_smpl_fmt * entry;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1175: FILE: perfmon/perfmon_fmt.c:68:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1180: FILE: perfmon/perfmon_fmt.c:73:
+	struct pfm_smpl_fmt * fmt;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt"
#1199: FILE: perfmon/perfmon_fmt.c:92:
+	if (fmt == NULL || fmt_is_mod(fmt) == 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1201: FILE: perfmon/perfmon_fmt.c:94:
+	BUG_ON(fmt->owner == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->owner"
#1201: FILE: perfmon/perfmon_fmt.c:94:
+	BUG_ON(fmt->owner == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt"
#1213: FILE: perfmon/perfmon_fmt.c:106:
+	if (fmt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->fmt_name"
#1218: FILE: perfmon/perfmon_fmt.c:111:
+	if (fmt->fmt_name == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: perfmon/perfmon_fmt.c:122:
+		PFM_INFO("perfmon: format %s requires %u msg queue depth (max %d)",
+		       fmt->fmt_name,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->owner"
#1239: FILE: perfmon/perfmon_fmt.c:132:
+	if (fmt->owner == NULL && fmt_is_mod(fmt)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->fmt_handler"
#1246: FILE: perfmon/perfmon_fmt.c:139:
+	if (fmt->fmt_handler == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1311: FILE: perfmon/perfmon_fmt.c:204:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1321: FILE: perfmon/perfmon_fmt.c:214:
+	struct pfm_smpl_fmt * entry;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1334: FILE: perfmon/perfmon_intr.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1355: FILE: perfmon/perfmon_intr.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1410: FILE: perfmon/perfmon_intr.c:77:
+	num_ovfl = num_ovfl_orig = set->npend_ovfls;

WARNING:SPLIT_STRING: quoted string split across lines
#1417: FILE: perfmon/perfmon_intr.c:84:
+	PFM_DBG_ovfl("ovfl_pmds=0x%llx ip=%p, blocking=%d "
+		     "u_pmds=0x%llx use_fmt=%u",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hdr"
#1422: FILE: perfmon/perfmon_intr.c:89:
+		     hdr != NULL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1466: FILE: perfmon/perfmon_intr.c:133:
+		old_val = new_val = pmds[i];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1480: FILE: perfmon/perfmon_intr.c:147:
+		if (likely(old_val > new_val)) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1510: FILE: perfmon/perfmon_intr.c:177:
+		PFM_DBG_ovfl("pmd%u=0x%llx old_val=0x%llx "
+			     "hw_pmd=0x%llx o_pmds=0x%llx must_switch=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#1511: FILE: perfmon/perfmon_intr.c:178:
+			     "hw_pmd=0x%llx o_pmds=0x%llx must_switch=%u "
+			     "o_thres=%llu o_thres_ref=%llu",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1539: FILE: perfmon/perfmon_intr.c:206:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1580: FILE: perfmon/perfmon_intr.c:247:
+		for (i = first_cnt_pmd; num_ovfl && ret == 0; i++) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1593: FILE: perfmon/perfmon_intr.c:260:
+^I^I ^I * copy values of pmds of interest.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1593: FILE: perfmon/perfmon_intr.c:260:
+^I^I ^I * copy values of pmds of interest.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1596: FILE: perfmon/perfmon_intr.c:263:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1596: FILE: perfmon/perfmon_intr.c:263:
+^I^I ^I */$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1600: FILE: perfmon/perfmon_intr.c:267:
+			if (bitmap_empty(ulp(smpl_pmds), max_pmd) == 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1602: FILE: perfmon/perfmon_intr.c:269:
+				for (j = 0; j < max_pmd; j++) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1616: FILE: perfmon/perfmon_intr.c:283:
+					PFM_DBG_ovfl("s_pmd_val[%u]="
+						     "pmd%u=0x%llx",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1628: FILE: perfmon/perfmon_intr.c:295:
+^I^I ^I * call custom buffer format record (handler) routine$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1628: FILE: perfmon/perfmon_intr.c:295:
+^I^I ^I * call custom buffer format record (handler) routine$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1629: FILE: perfmon/perfmon_intr.c:296:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1629: FILE: perfmon/perfmon_intr.c:296:
+^I^I ^I */$

WARNING:REPEATED_WORD: Possible repeated word: 'may'
#1647: FILE: perfmon/perfmon_intr.c:314:
+			 * status. It may may deferred until pfm_restart().

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1650: FILE: perfmon/perfmon_intr.c:317:
+				   & (PFM_OVFL_CTRL_NOTIFY|PFM_OVFL_CTRL_MASK);
 				                          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1667: FILE: perfmon/perfmon_intr.c:334:
+^I^I * ^I- mask monitoring$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1668: FILE: perfmon/perfmon_intr.c:335:
+^I^I * ^I- notify user if requested$

WARNING:SPLIT_STRING: quoted string split across lines
#1682: FILE: perfmon/perfmon_intr.c:349:
+	PFM_DBG_ovfl("o_notify=0x%llx o_pmds=0x%llx "
+		     "r_pmds=0x%llx masking=%d notify=%d",

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#1687: FILE: perfmon/perfmon_intr.c:354:
+		     (ovfl_ctrl & PFM_OVFL_CTRL_NOTIFY)!= 0);
 		                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1696: FILE: perfmon/perfmon_intr.c:363:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1696: FILE: perfmon/perfmon_intr.c:363:
+^I ^I */$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1697: FILE: perfmon/perfmon_intr.c:364:
+		if (must_switch) {
[...]
+		} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1705: FILE: perfmon/perfmon_intr.c:372:
+^I^I ^I * update our view of the active set$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1705: FILE: perfmon/perfmon_intr.c:372:
+^I^I ^I * update our view of the active set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1706: FILE: perfmon/perfmon_intr.c:373:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1706: FILE: perfmon/perfmon_intr.c:373:
+^I^I ^I */$

CHECK:BRACES: Unbalanced braces around else statement
#1710: FILE: perfmon/perfmon_intr.c:377:
+		} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1756: FILE: perfmon/perfmon_intr.c:423:
+}
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1760: FILE: perfmon/perfmon_intr.c:427:
+ * ^I- per-thread: ctx attached to current thread, so LOADED,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1761: FILE: perfmon/perfmon_intr.c:428:
+ * ^I  and cannot be unloaded or modified without current being$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1762: FILE: perfmon/perfmon_intr.c:429:
+ * ^I  stopped or not in the interrupt handler (self)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1764: FILE: perfmon/perfmon_intr.c:431:
+ * ^I- system-wide: is controlled either by current thread, or remote$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1765: FILE: perfmon/perfmon_intr.c:432:
+ * ^I  but then needs IPI to this CPU to unload or modify state and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1766: FILE: perfmon/perfmon_intr.c:433:
+ * ^I  interrupts are masked by virtue of SA_INTERRUPT. Furthermore,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1767: FILE: perfmon/perfmon_intr.c:434:
+ * ^I  the PMU interrupt is in the same priority class as IPI, so even$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1768: FILE: perfmon/perfmon_intr.c:435:
+ * ^I  with interrupt unmasked, there is no race.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#1781: FILE: perfmon/perfmon_intr.c:448:
+	if (unlikely(ctx == NULL))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1858: FILE: perfmon/perfmon_pmu.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1879: FILE: perfmon/perfmon_pmu.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:TYPO_SPELLING: 'acces' may be misspelled - perhaps 'access'?
#1898: FILE: perfmon/perfmon_pmu.c:41:
+ * perfmon core must acces PMU information ONLY through pfm_pmu_conf
                      ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1904: FILE: perfmon/perfmon_pmu.c:47:
+
+

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1918: FILE: perfmon/perfmon_pmu.c:61:
+	memset(&_pfm_pmu_conf, 0 , sizeof(_pfm_pmu_conf));
 	                         ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1927: FILE: perfmon/perfmon_pmu.c:70:
+	max1 = max2 = -1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1929: FILE: perfmon/perfmon_pmu.c:72:
+	for (i = 0; i < cfg->num_pmc_entries;  i++) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1953: FILE: perfmon/perfmon_pmu.c:96:
+	n = n_counters = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1954: FILE: perfmon/perfmon_pmu.c:97:
+	max1 = max2 = max3 = first_cnt = first_i = -1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1956: FILE: perfmon/perfmon_pmu.c:99:
+	for (i = 0; i < cfg->num_pmd_entries;  i++) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2013: FILE: perfmon/perfmon_pmu.c:156:
+	_pfm_pmu_conf.ovfl_mask = (PFM_ONE_64 << cfg->counter_width) -1;
 	                                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2016: FILE: perfmon/perfmon_pmu.c:159:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2034: FILE: perfmon/perfmon_pmu.c:177:
+	nspec = nspec_ro = num_pmds = num_pmcs = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#2037: FILE: perfmon/perfmon_pmu.c:180:
+	if (cfg == NULL || cfg->pmu_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmu_name"
#2037: FILE: perfmon/perfmon_pmu.c:180:
+	if (cfg == NULL || cfg->pmu_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->owner"
#2042: FILE: perfmon/perfmon_pmu.c:185:
+	if ((cfg->flags & PFM_PMUFL_IS_BUILTIN) == 0 && cfg->owner == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->probe_pmu"
#2063: FILE: perfmon/perfmon_pmu.c:206:
+	if (cfg->probe_pmu == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2072: FILE: perfmon/perfmon_pmu.c:215:
+	for (i = 0; i < cfg->num_pmc_entries;  i++) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#2080: FILE: perfmon/perfmon_pmu.c:223:
+			PFM_INFO("PFM_REG_V is not supported on "
+				 "PMCs (PMC%d)", i);

WARNING:SPLIT_STRING: quoted string split across lines
#2085: FILE: perfmon/perfmon_pmu.c:228:
+			PFM_INFO("PFM_REG_RO meaningless on "
+				 "PMCs (PMC%u)", i);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2094: FILE: perfmon/perfmon_pmu.c:237:
+	for (i = 0; i < cfg->num_pmd_entries;  i++) {
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2103: FILE: perfmon/perfmon_pmu.c:246:
+		if ((type & (PFM_REG_V|PFM_REG_RO)) == (PFM_REG_V|PFM_REG_RO))
 		                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2103: FILE: perfmon/perfmon_pmu.c:246:
+		if ((type & (PFM_REG_V|PFM_REG_RO)) == (PFM_REG_V|PFM_REG_RO))
 		                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_sread"
#2107: FILE: perfmon/perfmon_pmu.c:250:
+	if (nspec_ro && cfg->pmd_sread == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_swrite"
#2113: FILE: perfmon/perfmon_pmu.c:256:
+	if (nspec && cfg->pmd_swrite == NULL) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2139: FILE: perfmon/perfmon_pmu.c:282:
+	if (pfm_pmu_conf && (pmu_is_module(pfm_pmu_conf) == 0 || module_refcount(pfm_pmu_conf->owner))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2139: FILE: perfmon/perfmon_pmu.c:282:
+	if (pfm_pmu_conf && (pmu_is_module(pfm_pmu_conf) == 0 || module_refcount(pfm_pmu_conf->owner))) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#2172: FILE: perfmon/perfmon_pmu.c:315:
+	if (cfg == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2177: FILE: perfmon/perfmon_pmu.c:320:
+	BUG_ON(module_refcount(pfm_pmu_conf->owner));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod_name"
#2194: FILE: perfmon/perfmon_pmu.c:337:
+	if (mod_name == NULL)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2195: FILE: perfmon/perfmon_pmu.c:338:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2205: FILE: perfmon/perfmon_pmu.c:348:
+ * ^I0     : do not try to autoload the PMu description module$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2206: FILE: perfmon/perfmon_pmu.c:349:
+ * ^Inot 0 : try to autoload the PMu description module$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2215: FILE: perfmon/perfmon_pmu.c:358:
+		ret = -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2218: FILE: perfmon/perfmon_pmu.c:361:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#2219: FILE: perfmon/perfmon_pmu.c:362:
+	if (autoload && pfm_pmu_conf == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2220: FILE: perfmon/perfmon_pmu.c:363:
+	if (autoload && pfm_pmu_conf == NULL) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2236: FILE: perfmon/perfmon_pmu.c:379:
+^I} $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2238: FILE: perfmon/perfmon_pmu.c:381:
+	ret = pfm_pmu_conf == NULL ? -ENOSYS : 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#2238: FILE: perfmon/perfmon_pmu.c:381:
+	ret = pfm_pmu_conf == NULL ? -ENOSYS : 0;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2241: FILE: perfmon/perfmon_pmu.c:384:
+	if (ret == 0 && pmu_is_module(pfm_pmu_conf)
+	    && !try_module_get(pfm_pmu_conf->owner))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2242: FILE: perfmon/perfmon_pmu.c:385:
+		ret = -ENOSYS;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#2251: FILE: perfmon/perfmon_pmu.c:394:
+	if (pfm_pmu_conf == NULL || pmu_is_module(pfm_pmu_conf) == 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2261: FILE: perfmon/perfmon_res.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2282: FILE: perfmon/perfmon_res.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2343: FILE: perfmon/perfmon_res.c:83:
+	if (locked > current->signal->rlim[RLIMIT_MEMLOCK].rlim_cur) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2394: FILE: perfmon/perfmon_res.c:134:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#2422: FILE: perfmon/perfmon_res.c:162:
+			PFM_DBG("system wide imppossible, %u conflicting"
+				"task_sessions\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2422: FILE: perfmon/perfmon_res.c:162:
+			PFM_DBG("system wide imppossible, %u conflicting"
+				"task_sessions\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2423: FILE: perfmon/perfmon_res.c:163:
+^I^I^I  ^Ipfm_sessions.pfs_task_sessions);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2423: FILE: perfmon/perfmon_res.c:163:
+^I^I^I  ^Ipfm_sessions.pfs_task_sessions);$

WARNING:SPLIT_STRING: quoted string split across lines
#2429: FILE: perfmon/perfmon_res.c:169:
+			PFM_DBG("syswide not possible, conflicting session "
+				"on CPU%u\n", cpu);

WARNING:SPLIT_STRING: quoted string split across lines
#2434: FILE: perfmon/perfmon_res.c:174:
+		PFM_DBG("reserving syswide session on CPU%u currently "
+			"on CPU%u\n",

WARNING:SPACING: space prohibited before semicolon
#2440: FILE: perfmon/perfmon_res.c:180:
+		pfm_sessions.pfs_sys_sessions++ ;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2505: FILE: perfmon/perfmon_res.c:245:
+static struct _pfm_pmu_config empty_config={
                                           ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2522: FILE: perfmon/perfmon_res.c:262:
+	switch(what) {
+		case 0: ret = snprintf(buf, sz, "%s\n", p->pmu_name);
[...]
+		case 1: ret = snprintf(buf, sz, "%d\n", p->counter_width);
[...]
+		case 2: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_task_sessions);
[...]
+		case 3: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_sys_sessions);
[...]
+		case 4: ret = snprintf(buf, sz, "%zu\n", pfm_sessions.pfs_cur_smpl_buf_mem);

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#2522: FILE: perfmon/perfmon_res.c:262:
+	switch(what) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2523: FILE: perfmon/perfmon_res.c:263:
+		case 0: ret = snprintf(buf, sz, "%s\n", p->pmu_name);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2525: FILE: perfmon/perfmon_res.c:265:
+		case 1: ret = snprintf(buf, sz, "%d\n", p->counter_width);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2527: FILE: perfmon/perfmon_res.c:267:
+		case 2: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_task_sessions);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2529: FILE: perfmon/perfmon_res.c:269:
+		case 3: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_sys_sessions);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2531: FILE: perfmon/perfmon_res.c:271:
+		case 4: ret = snprintf(buf, sz, "%zu\n", pfm_sessions.pfs_cur_smpl_buf_mem);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2542: FILE: perfmon/perfmon_syscalls.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2563: FILE: perfmon/perfmon_syscalls.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2567: FILE: perfmon/perfmon_syscalls.c:26:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2624: FILE: perfmon/perfmon_syscalls.c:83:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_STOPPED'
#2640: FILE: perfmon/perfmon_syscalls.c:99:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_TRACED'
#2640: FILE: perfmon/perfmon_syscalls.c:99:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2641: FILE: perfmon/perfmon_syscalls.c:100:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#2702: FILE: perfmon/perfmon_syscalls.c:161:
+	if (unlikely(addr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#2730: FILE: perfmon/perfmon_syscalls.c:189:
+	if (f == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2746: FILE: perfmon/perfmon_syscalls.c:205:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#2749: FILE: perfmon/perfmon_syscalls.c:208:
+	if (addr == NULL)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2766: FILE: perfmon/perfmon_syscalls.c:225:
+asmlinkage long sys_pfm_create_context(struct pfarg_ctx __user *ureq, void __user *uarg, size_t smpl_size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2799: FILE: perfmon/perfmon_syscalls.c:258:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2812: FILE: perfmon/perfmon_syscalls.c:271:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2815: FILE: perfmon/perfmon_syscalls.c:274:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2816: FILE: perfmon/perfmon_syscalls.c:275:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2851: FILE: perfmon/perfmon_syscalls.c:310:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2854: FILE: perfmon/perfmon_syscalls.c:313:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2855: FILE: perfmon/perfmon_syscalls.c:314:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2890: FILE: perfmon/perfmon_syscalls.c:349:
+	if (unlikely(ctx == NULL))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2893: FILE: perfmon/perfmon_syscalls.c:352:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2916: FILE: perfmon/perfmon_syscalls.c:375:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2924: FILE: perfmon/perfmon_syscalls.c:383:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2940: FILE: perfmon/perfmon_syscalls.c:399:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2948: FILE: perfmon/perfmon_syscalls.c:407:
+	if (unlikely(ctx == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2972: FILE: perfmon/perfmon_syscalls.c:431:
+	if (ctx == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2994: FILE: perfmon/perfmon_syscalls.c:453:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3004: FILE: perfmon/perfmon_syscalls.c:463:
+	if (ctx == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3023: FILE: perfmon/perfmon_syscalls.c:482:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3031: FILE: perfmon/perfmon_syscalls.c:490:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3036: FILE: perfmon/perfmon_syscalls.c:495:
+	ret = pfm_check_task_state(ctx, PFM_CMD_STOPPED|PFM_CMD_UNLOAD, &flags);
 	                                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3059: FILE: perfmon/perfmon_syscalls.c:518:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3062: FILE: perfmon/perfmon_syscalls.c:521:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3099: FILE: perfmon/perfmon_syscalls.c:558:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3102: FILE: perfmon/perfmon_syscalls.c:561:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3139: FILE: perfmon/perfmon_syscalls.c:598:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3142: FILE: perfmon/perfmon_syscalls.c:601:
+	sz = count*sizeof(*ureq);
 	          ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3168: FILE: perfmon/perfmon_sysfs.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3189: FILE: perfmon/perfmon_sysfs.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#3202: FILE: perfmon/perfmon_sysfs.c:35:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#3204: FILE: perfmon/perfmon_sysfs.c:37:
+#include <asm/processor.h>

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3208: FILE: perfmon/perfmon_sysfs.c:41:
+	ssize_t (*show)(void *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3208: FILE: perfmon/perfmon_sysfs.c:41:
+	ssize_t (*show)(void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3209: FILE: perfmon/perfmon_sysfs.c:42:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#3209: FILE: perfmon/perfmon_sysfs.c:42:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3209: FILE: perfmon/perfmon_sysfs.c:42:
+	ssize_t (*store)(void *, const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3211: FILE: perfmon/perfmon_sysfs.c:44:
+};
+#define to_attr(n) container_of(n, struct pfm_attribute, attr);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3211: FILE: perfmon/perfmon_sysfs.c:44:
+#define to_attr(n) container_of(n, struct pfm_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3216: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3216: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3216: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3216: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
                                      ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3216: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3217: FILE: perfmon/perfmon_sysfs.c:50:
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3217: FILE: perfmon/perfmon_sysfs.c:50:
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3217: FILE: perfmon/perfmon_sysfs.c:50:
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);
                                                             ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3223: FILE: perfmon/perfmon_sysfs.c:56:
+int pfm_sysfs_add_pmu(struct _pfm_pmu_config *pmu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3241: FILE: perfmon/perfmon_sysfs.c:74:
+static ssize_t pfm_fmt_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3245: FILE: perfmon/perfmon_sysfs.c:78:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(fmt, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3249: FILE: perfmon/perfmon_sysfs.c:82:
+static ssize_t pfm_pmu_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3251: FILE: perfmon/perfmon_sysfs.c:84:
+	struct _pfm_pmu_config *pmu= to_pmu(kobj);
 	                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3253: FILE: perfmon/perfmon_sysfs.c:86:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(pmu, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3257: FILE: perfmon/perfmon_sysfs.c:90:
+static ssize_t pfm_stats_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3261: FILE: perfmon/perfmon_sysfs.c:94:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(st, buf) : -EIO;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#3264: FILE: perfmon/perfmon_sysfs.c:97:
+static struct sysfs_ops pfm_fmt_sysfs_ops = {

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#3268: FILE: perfmon/perfmon_sysfs.c:101:
+static struct sysfs_ops pfm_pmu_sysfs_ops = {

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#3272: FILE: perfmon/perfmon_sysfs.c:105:
+static struct sysfs_ops pfm_stats_sysfs_ops = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3331: FILE: perfmon/perfmon_sysfs.c:164:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#3331: FILE: perfmon/perfmon_sysfs.c:164:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3338: FILE: perfmon/perfmon_sysfs.c:171:
+			memset(&per_cpu(pfm_stats,d), 0, sizeof(struct pfm_stats));
 			                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3353: FILE: perfmon/perfmon_sysfs.c:186:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#3353: FILE: perfmon/perfmon_sysfs.c:186:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3366: FILE: perfmon/perfmon_sysfs.c:199:
+		memset(&per_cpu(pfm_stats,m), 0, sizeof(struct pfm_stats));
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3380: FILE: perfmon/perfmon_sysfs.c:213:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#3380: FILE: perfmon/perfmon_sysfs.c:213:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3397: FILE: perfmon/perfmon_sysfs.c:230:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#3397: FILE: perfmon/perfmon_sysfs.c:230:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3414: FILE: perfmon/perfmon_sysfs.c:247:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#3414: FILE: perfmon/perfmon_sysfs.c:247:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3431: FILE: perfmon/perfmon_sysfs.c:264:
+	if (sscanf(buf,"%zu", &d) != 1)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3453: FILE: perfmon/perfmon_sysfs.c:286:
+	if (sscanf(buf,"%zu", &d) != 1)
 	              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3508: FILE: perfmon/perfmon_sysfs.c:341:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3512: FILE: perfmon/perfmon_sysfs.c:345:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#3586: FILE: perfmon/perfmon_sysfs.c:419:
+	struct pfm_stats *st = info;
+	return snprintf(buf, PAGE_SIZE, "%llu\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#3594: FILE: perfmon/perfmon_sysfs.c:427:
+	struct pfm_stats *st = info;
+	return snprintf(buf, PAGE_SIZE, "%llu\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3647: FILE: perfmon/perfmon_sysfs.c:480:
+	return snprintf(buf, PAGE_SIZE, "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"
+			   "-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3709: FILE: perfmon/perfmon_sysfs.c:542:
+	for (i = 0; i < PFM_MAX_PMCS;  i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3725: FILE: perfmon/perfmon_sysfs.c:558:
+	for (i = 0; i < PFM_MAX_PMDS;  i++) {
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078129.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 142 warnings, 138 checks, 3721 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078129.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
