ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: fs/buffer.c:582:
+/* The caller must have the lru_list lock before calling the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: fs/buffer.c:583:
+/* The caller must have the lru_list lock before calling the 
+   remove_inode_queue functions.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#80: FILE: fs/buffer.c:583:
+   remove_inode_queue functions.  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: fs/buffer.c:599:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: fs/buffer.c:603:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: fs/buffer.c:607:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/buffer.c:847:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: fs/buffer.c:861:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: fs/buffer.c:863:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#160: FILE: fs/buffer.c:869:
+		if (!buffer_dirty(bh) && !buffer_locked(bh))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#162: FILE: fs/buffer.c:871:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/buffer.c:893:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: fs/buffer.c:903:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: fs/buffer.c:922:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: fs/buffer.c:924:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: fs/buffer.c:925:
+^Ifor (list = inode->i_dirty_buffers.prev; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: fs/buffer.c:944:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: fs/buffer.c:954:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/buffer.c:956:
+^Ilist = inode->i_dirty_buffers.next; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: fs/buffer.c:965:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: fs/buffer.c:1251:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#302: FILE: fs/buffer.c:2492:
+		if (p->b_dev != B_FREE) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#305: FILE: fs/buffer.c:2495:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: fs/inode.c:292:
+ * O_SYNC flag set, to flush dirty writes to disk.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: fs/inode.c:298:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: fs/inode.c:299:
+^I/* $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#339: FILE: fs/inode.c:303:
+	 * filp down to the low-level write functions.  Therefore it
 	   ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: fs/inode.c:314:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: fs/inode.c:316:
+^I * to flush _all_ dirty buffers for this inode to disk on $

ERROR:POINTER_LOCATION: "foo *	     bar" should be "foo *bar"
#397: FILE: include/linux/fs.h:247:
+	struct inode *	     b_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: include/linux/fs.h:388:
+^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: include/linux/fs.h:1042:
+extern void buffer_insert_inode_queue(struct buffer_head *, struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/linux/fs.h:1053:
+extern void invalidate_inode_buffers(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#426: FILE: include/linux/fs.h:1053:
+extern void invalidate_inode_buffers(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/fs.h:1061:
+extern int fsync_inode_buffers(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#434: FILE: include/linux/fs.h:1061:
+extern int fsync_inode_buffers(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#435: FILE: include/linux/fs.h:1062:
+extern int osync_inode_buffers(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#435: FILE: include/linux/fs.h:1062:
+extern int osync_inode_buffers(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/fs.h:1063:
+extern int inode_has_buffers(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#436: FILE: include/linux/fs.h:1063:
+extern int inode_has_buffers(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#444: FILE: include/linux/fs.h:1277:
+extern int generic_osync_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#444: FILE: include/linux/fs.h:1277:
+extern int generic_osync_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#444: FILE: include/linux/fs.h:1277:
+extern int generic_osync_inode(struct inode *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 10 warnings, 14 checks, 370 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
