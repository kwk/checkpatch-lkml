WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -ruN 827-memory-pool-old/kernel/power/memory_pool.c 827-memory-pool-new/kernel/power/memory_pool.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: kernel/power/memory_pool.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#39: FILE: kernel/power/memory_pool.c:2:
+ * kernel/power/memory_pool.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#40: FILE: kernel/power/memory_pool.c:3:
+ *  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: kernel/power/memory_pool.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: kernel/power/memory_pool.c:16:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: kernel/power/memory_pool.c:18:
+ * is made for one order one and one order two allocation. This provision is $

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#82: FILE: kernel/power/memory_pool.c:45:
+static int min_pool_level = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: kernel/power/memory_pool.c:51:
+ */^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: kernel/power/memory_pool.c:52:
+static void __display_memory_pool_pages(struct memory_pool * pool)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: kernel/power/memory_pool.c:57:
+		struct page * page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#96: FILE: kernel/power/memory_pool.c:59:
+		int index = 0;
+		suspend_message(SUSPEND_MEM_POOL, SUSPEND_VERBOSE, 1,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#102: FILE: kernel/power/memory_pool.c:65:
+			if (!(index%8))
 			           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: kernel/power/memory_pool.c:67:
+				suspend_message(SUSPEND_MEM_POOL, SUSPEND_VERBOSE, 1,
+					"\n");

ERROR:SPACING: space required before the open parenthesis '('
#128: FILE: kernel/power/memory_pool.c:91:
+#define display_memory_pool_pages() do { } while(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: kernel/power/memory_pool.c:94:
+__init void initialise_pool(struct memory_pool * pool)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: kernel/power/memory_pool.c:119:
+static struct page * get_from_pool(struct memory_pool * pool, int order)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: kernel/power/memory_pool.c:119:
+static struct page * get_from_pool(struct memory_pool * pool, int order)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: kernel/power/memory_pool.c:121:
+	struct page * page;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#172: FILE: kernel/power/memory_pool.c:135:
+		printk("Error getting page %p from memory pool. "

WARNING:SPLIT_STRING: quoted string split across lines
#173: FILE: kernel/power/memory_pool.c:136:
+		printk("Error getting page %p from memory pool. "
+			"Page count is %d (should be 1).\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: kernel/power/memory_pool.c:140:
+	BUG_ON(PageLRU(page) || PageActive(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: kernel/power/memory_pool.c:157:
+static void add_to_pool(struct memory_pool * pool, int order, struct page * this)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: kernel/power/memory_pool.c:157:
+static void add_to_pool(struct memory_pool * pool, int order, struct page * this)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/power/memory_pool.c:165:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: kernel/power/memory_pool.c:195:
+ * ^I^Ifirst instance, or grabbed pages if that fails.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: kernel/power/memory_pool.c:196:
+ * ^I^IWe allocate @sizesought order 0 pages, plus 1 each$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: kernel/power/memory_pool.c:197:
+ * ^I^Iof the higher order allocations.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: kernel/power/memory_pool.c:203:
+^Iint i = 0, order, orig_state = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: kernel/power/memory_pool.c:218:
+^I^Ifor (i = normal_pool.level[order]; $

CHECK:SPACING: No space is necessary after a cast
#257: FILE: kernel/power/memory_pool.c:220:
+			this = (unsigned long *) get_grabbed_pages(order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: kernel/power/memory_pool.c:223:
+				suspend_message(SUSPEND_MEM_POOL, SUSPEND_ERROR, 1,
+					"%d order %d pages wanted for suspend "

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: kernel/power/memory_pool.c:224:
+					"%d order %d pages wanted for suspend "
+					"memory pool, got %d.\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: kernel/power/memory_pool.c:246:
+void __empty_suspend_memory_pool(struct memory_pool * pool)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: kernel/power/memory_pool.c:249:
+	struct page * this;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: kernel/power/memory_pool.c:256:
+	suspend_message(SUSPEND_MEM_POOL, SUSPEND_LOW, 1,
+		"Min pool level was %d/%d.\n", min_pool_level, suspend_pool_level_limit[0]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: kernel/power/memory_pool.c:266:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: kernel/power/memory_pool.c:272:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: kernel/power/memory_pool.c:277:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: kernel/power/memory_pool.c:279:
+ * ^I^IMay be called from interrupt context.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#318: FILE: kernel/power/memory_pool.c:281:
+ * ^I^I^I^IWe're giving normal zone pages regardless.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: kernel/power/memory_pool.c:282:
+ * ^I^Iorder:^I^IThe number of pages (1 << order) wanted.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: kernel/power/memory_pool.c:285:
+struct page * get_suspend_pool_pages(unsigned int gfp_mask, unsigned int order)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#325: FILE: kernel/power/memory_pool.c:288:
+	struct page * page;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: kernel/power/memory_pool.c:293:
+			printk("No order %d allocation available.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: kernel/power/memory_pool.c:294:
+			printk("No order %d allocation available.\n",
+					order);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#333: FILE: kernel/power/memory_pool.c:296:
+			spin_unlock_irqrestore(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!normal_pool.level[order]'
#342: FILE: kernel/power/memory_pool.c:305:
+	if ((!normal_pool.level[order]) && (!(gfp_mask & __GFP_WAIT))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: kernel/power/memory_pool.c:312:
+	while(!normal_pool.level[order]) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: kernel/power/memory_pool.c:325:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#366: FILE: kernel/power/memory_pool.c:329:
+		printk("Normal pool empty.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: kernel/power/memory_pool.c:332:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#376: FILE: kernel/power/memory_pool.c:339:
+ * ^I^IHighMem pages do still get freed to the normal pool because they$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: kernel/power/memory_pool.c:340:
+ * ^I^Iaren't going to affect the consistency of our image - worse case,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: kernel/power/memory_pool.c:341:
+ * ^I^Iwe write a few free pages.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: kernel/power/memory_pool.c:343:
+ * ^I^IUnsigned int:^ISize of allocation being freed.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#386: FILE: kernel/power/memory_pool.c:349:
+	struct memory_pool * pool = &normal_pool;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: kernel/power/memory_pool.c:351:
+^Isuspend_message(SUSPEND_MEM_POOL, SUSPEND_VERBOSE, 1, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: kernel/power/memory_pool.c:352:
+	suspend_message(SUSPEND_MEM_POOL, SUSPEND_VERBOSE, 1, 
+		"Freeing page %p (%p), order %d.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: kernel/power/memory_pool.c:354:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: kernel/power/memory_pool.c:365:
+		char * address = page_address(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: kernel/power/memory_pool.c:366:
+		char * address = page_address(page);
+		for (i = 0; i < (1 << order); i++) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#413: FILE: kernel/power/memory_pool.c:376:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#415: FILE: kernel/power/memory_pool.c:378:
+EXPORT_SYMBOL(suspend_memory_pool_level);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 23 warnings, 9 checks, 378 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
