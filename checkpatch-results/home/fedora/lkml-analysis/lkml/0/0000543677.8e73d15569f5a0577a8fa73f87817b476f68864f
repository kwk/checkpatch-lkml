ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#65: FILE: :385:
exec_mmap(void)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#68: FILE: :388:
+	struct

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#70: FILE: :389:
+	unsigned long reserved = 0;

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#74: FILE: :391:
+	old_mm = tsk->mm;

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#77: FILE: :393:
+	        /* Keep old stack

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#85: FILE: :399:
+	reserved =

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#87: FILE: :400:
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#89: FILE: :401:
+	if(!reserved)

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#90: FILE: :402:
+	        return -ENOMEM;

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#91: FILE: :403:
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#97: FILE: :406:
+		struct mm_struct *active_mm

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#101: FILE: :408:
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#113: FILE: :433:
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#114: FILE: :434:
+	vm_release_memory(reserved);

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/proc/proc_misc.c:178:
+                "SwapFree:  %8lu kB\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/proc/proc_misc.c:178:
+                "SwapFree:  %8lu kB\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: fs/proc/proc_misc.c:180:
+                "VMReserved:%8lu kB\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: fs/proc/proc_misc.c:180:
+                "VMReserved:%8lu kB\n",$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: fs/proc/proc_misc.c:196:
+                K(vm_total()), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: fs/proc/proc_misc.c:196:
+                K(vm_total()), $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/proc/proc_misc.c:196:
+                K(vm_total()), $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#189: FILE: fs/proc/proc_misc.c:455:
+extern long

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#191: FILE: fs/proc/proc_misc.c:456:
+extern inline void vm_release_memory(long

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/proc/proc_misc.c:457:
+       int flags;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: fs/proc/proc_misc.c:458:
+       int flags;
+       spin_lock_irqsave(&vm_lock, flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/proc/proc_misc.c:458:
+       spin_lock_irqsave(&vm_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/proc/proc_misc.c:460:
+       spin_unlock_irqrestore(&vm_lock, flags);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#244: FILE: fs/proc/proc_misc.c:310:
+		/* Only release stack if
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: fs/proc/proc_misc.c:311:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 24)
#280: FILE: fs/proc/proc_misc.c:148:
	if((mpnt->vm_flags & (VM_GROWSDOWN | VM_WRITE | VM_SHARED)) ==
[...]
+			unsigned long npages = mpnt->vm_end -

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 0)
#286: FILE: fs/proc/proc_misc.c:151:
+			if(!reserved)
[...]
	goto fail_nomem;

ERROR:SPACING: space required before the open parenthesis '('
#286: FILE: fs/proc/proc_misc.c:151:
+			if(!reserved)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#289: FILE: fs/proc/proc_misc.c:153:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: fs/proc/proc_misc.c:1063:
+       struct task_struct$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#412: FILE: mm/mmap.c:42:
+/* Unfortunately these need to be longs
+unsigned long vm_reserved = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: mm/mmap.c:50:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: mm/mmap.c:67:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#493: FILE: mm/mmap.c:92:
 	
+

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: mm/mmap.c:93:
+	if(sysctl_overcommit_memory

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#498: FILE: mm/mmap.c:95:
+	else {
[...]
	free = atomic_read(&buffermem_pages);

CHECK:BRACES: Unbalanced braces around else statement
#498: FILE: mm/mmap.c:95:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#499: FILE: mm/mmap.c:96:
+	else {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#506: FILE: mm/mmap.c:100:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#522: FILE: mm/mmap.c:110:
+	if(current->mm)
[...]
free -= (current->mm->total_vm / 4);

ERROR:SPACING: space required before the open parenthesis '('
#522: FILE: mm/mmap.c:110:
+	if(current->mm)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#527: FILE: mm/mmap.c:114:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#528: FILE: mm/mmap.c:114:
	if(pages > free)
+		if( !(sysctl_overcommit_memory ==

ERROR:SPACING: space prohibited after that open parenthesis '('
#529: FILE: mm/mmap.c:115:
+		if( !(sysctl_overcommit_memory ==

ERROR:SPACING: space required before the open parenthesis '('
#529: FILE: mm/mmap.c:115:
+		if( !(sysctl_overcommit_memory ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#531: FILE: mm/mmap.c:116:
+		if( !(sysctl_overcommit_memory ==
+				&&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#535: FILE: mm/mmap.c:119:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: mm/mmap.c:121:
+	spin_unlock_irqrestore(&vm_lock,
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: mm/mmap.c:373:
+           !(reserved =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: mm/mmap.c:423:
+       vm_release_memory(reserved);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: mm/mmap.c:872:
 
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: mm/mmap.c:169:
+       unsigned long$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#762: FILE: mm/oom_kill.c:81:
+	/* Long-running processes are
+	points /=

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#775: FILE: mm/oom_kill.c:99:
+	/* Much the same goes for
+	if(p->uid < 100 || p->euid < 100)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#778: FILE: mm/oom_kill.c:101:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#808: FILE: mm/oom_kill.c:212:
+	/* Buffers and caches can be freed up (Jonathan
+	free += atomic_read(&buffermem_pages);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#853: FILE: mm/oom_kill.c:21:
+extern

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#882: FILE: mm/oom_kill.c:456:
+       /* Don't allow removal of
+       spin_lock_irqsave(&vm_lock,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: mm/oom_kill.c:457:
+       if ((sysctl_overcommit_memory < 0) && $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#887: FILE: mm/oom_kill.c:459:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: mm/oom_kill.c:460:
+               err = -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: mm/oom_kill.c:462:
+               spin_unlock_irqrestore(&vm_lock, flags);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000543677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 37 warnings, 15 checks, 573 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000543677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
