WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
I have verified and am sure that this patch works. The priority of this patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: dev.c:1659:
+       struct net_device *dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: dev.c:1660:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: dev.c:1661:
+       unsigned int total;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: dev.c:1663:
+       total = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: dev.c:1665:
+        * May be introducing something like for_each_netdev(dev)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: dev.c:1666:
+        * on the lines of for_each_pci_dev would be useful here.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: dev.c:1667:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: dev.c:1668:
+       for (dev = dev_base; dev != NULL; dev = dev->next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#63: FILE: dev.c:1668:
+       for (dev = dev_base; dev != NULL; dev = dev->next) {
+               for (i = 0; i < NPROTO; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#63: FILE: dev.c:1668:
+       for (dev = dev_base; dev != NULL; dev = dev->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: dev.c:1669:
+               for (i = 0; i < NPROTO; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: dev.c:1669:
+               for (i = 0; i < NPROTO; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#64: FILE: dev.c:1669:
+               for (i = 0; i < NPROTO; i++) {
+                       if (gifconf_list[i]) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: dev.c:1670:
+                       if (gifconf_list[i]) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: dev.c:1670:
+                       if (gifconf_list[i]) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#65: FILE: dev.c:1670:
+                       if (gifconf_list[i]) {
+                               int done;

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: dev.c:1671:
+                               int done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: dev.c:1671:
+                               int done;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: dev.c:1673:
+                               done = gifconf_list[i](dev, NULL, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: dev.c:1673:
+                               done = gifconf_list[i](dev, NULL, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: dev.c:1674:
+                               if (done < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: dev.c:1674:
+                               if (done < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#69: FILE: dev.c:1674:
+                               if (done < 0)
+                                       return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: dev.c:1675:
+                                       return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: dev.c:1675:
+                                       return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: dev.c:1676:
+                               total++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: dev.c:1676:
+                               total++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: dev.c:1677:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: dev.c:1677:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: dev.c:1678:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: dev.c:1678:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: dev.c:1679:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: dev.c:1681:
+       if (copy_to_user(arg, &total, sizeof(int)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#76: FILE: dev.c:1681:
+       if (copy_to_user(arg, &total, sizeof(int)))
+               return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: dev.c:1682:
+               return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: dev.c:1682:
+               return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: dev.c:1684:
+       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: dev.c:2257:
+        * We do not need an exclusive lock for returning the count,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: dev.c:2258:
+        * shared lock is fine with us.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: dev.c:2259:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: dev.c:2260:
+       if (cmd == SIOCGIFCOUNT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#95: FILE: dev.c:2260:
+       if (cmd == SIOCGIFCOUNT) {
+               rtnl_shlock();

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: dev.c:2261:
+               rtnl_shlock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: dev.c:2261:
+               rtnl_shlock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: dev.c:2262:
+               ret = dev_ifcount((char *)arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: dev.c:2262:
+               ret = dev_ifcount((char *)arg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: dev.c:2263:
+               rtnl_shunlock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: dev.c:2263:
+               rtnl_shunlock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: dev.c:2264:
+               return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: dev.c:2264:
+               return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: dev.c:2265:
+       }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000508270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 31 warnings, 1 checks, 58 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000508270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
