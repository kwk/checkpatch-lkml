WARNING:TYPO_SPELLING: 'notfication' may be misspelled - perhaps 'notification'?
#38: 
processes/threads at the kernel level.  It would use a notfication 
                                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
process.  Events which do no match the filter get dropped.  In the case when

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#147: 
--- a/Documentation/ioctl-number.txt    2004-06-14 11:24:08 -07:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#151: FILE: Documentation/ioctl-number.txt:189:
0xDD    00-3F    ZFCP device driver    see drivers/s390/scsi/

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: Documentation/kmonitor.txt:3:
+The kmonitor driver implements a kernel level non-intrusive +mechanism $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: Documentation/kmonitor.txt:8:
+monitoring process(es) of the events via a signal that the monitor $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: Documentation/kmonitor.txt:21:
+      * KMONITOR_PROCESS_EXIT, on one process, then we already +      * $

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#184: FILE: Documentation/kmonitor.txt:24:
+      * info might be usefull:
                       ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: Documentation/kmonitor.txt:31:
+      * will do cleanup when we close the file descriptor for +      * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: Documentation/kmonitor.txt:73:
+     * NOTE: The 'type' field in the structure is actually +     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: Documentation/kmonitor.txt:76:
+         *       #define KMONITOR_THREAD_CREATE 0x01 +         *       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: Documentation/kmonitor.txt:78:
+         *       #define KMONITOR_PROCESS_ABORT 0x10 +         *       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: Documentation/kmonitor.txt:88:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: Documentation/kmonitor.txt:90:
+     * In this very simple example all we need to do is wait +     * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: Documentation/kmonitor.txt:94:
+    sigsuspend(&empty_mask);   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: Documentation/kmonitor.txt:97:
+     * kmonitor will perform a cleanup of all request a given +     * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: Documentation/kmonitor.txt:980:
+      The kmonitor driver implements a kernel level non-intrusive $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#290: FILE: Documentation/kmonitor.txt:983:
+      info see Documentation/kmonitor.txt +

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#310: FILE: drivers/char/kmonitor.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#325: FILE: drivers/char/kmonitor.c:16:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: drivers/char/kmonitor.c:21:
+ * The kmonitor driver implements a kernel level non-intrusive + * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#348: FILE: drivers/char/kmonitor.c:38:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#349: FILE: drivers/char/kmonitor.c:39:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: drivers/char/kmonitor.c:56:
+ * list of resources in each bucket, the less likely a processor will + $

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#370: FILE: drivers/char/kmonitor.c:59:
+struct kmonitor_bucket +{
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: drivers/char/kmonitor.c:60:
+    struct list_head list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: drivers/char/kmonitor.c:61:
+    rwlock_t lock;$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#377: FILE: drivers/char/kmonitor.c:66:
+struct kmonitor_bucket kmonitor_resources[1<<KMONITOR_BITS];
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: drivers/char/kmonitor.c:70:
+    return hash_long((unsigned long)target, KMONITOR_BITS);$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#385: FILE: drivers/char/kmonitor.c:74:
+struct kmonitor_res
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: drivers/char/kmonitor.c:75:
+    struct list_head rlist;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: drivers/char/kmonitor.c:76:
+    pid_t target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: drivers/char/kmonitor.c:77:
+    pid_t monitor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: drivers/char/kmonitor.c:78:
+    int signal;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: drivers/char/kmonitor.c:79:
+    __u32 event_mask;$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#393: FILE: drivers/char/kmonitor.c:82:
+#define to_kmonitor_res(r) \
+        container_of(r, struct kmonitor_res, rlist);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: drivers/char/kmonitor.c:83:
+        container_of(r, struct kmonitor_res, rlist);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: drivers/char/kmonitor.c:83:
+        container_of(r, struct kmonitor_res, rlist);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: drivers/char/kmonitor.c:95:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#406: FILE: drivers/char/kmonitor.c:95:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , 

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#406: FILE: drivers/char/kmonitor.c:95:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , 
                                                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#406: FILE: drivers/char/kmonitor.c:95:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#406: FILE: drivers/char/kmonitor.c:95:
+#define DBG(format, arg...) printk("%s: " format "\n", __FUNCTION__ , 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: drivers/char/kmonitor.c:96:
+#define TRACE(format, arg...) printk("%s(" format ")\n", __FUNCTION__, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#408: FILE: drivers/char/kmonitor.c:96:
+#define TRACE(format, arg...) printk("%s(" format ")\n", __FUNCTION__, 

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#408: FILE: drivers/char/kmonitor.c:96:
+#define TRACE(format, arg...) printk("%s(" format ")\n", __FUNCTION__, 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#408: FILE: drivers/char/kmonitor.c:96:
+#define TRACE(format, arg...) printk("%s(" format ")\n", __FUNCTION__, 

ERROR:SPACING: space required before the open parenthesis '('
#411: FILE: drivers/char/kmonitor.c:98:
+#define DBG(format, arg...) do {} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#411: FILE: drivers/char/kmonitor.c:98:
+#define DBG(format, arg...) do {} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required before the open parenthesis '('
#412: FILE: drivers/char/kmonitor.c:99:
+#define TRACE(arg...) do {} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#412: FILE: drivers/char/kmonitor.c:99:
+#define TRACE(arg...) do {} while(0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: drivers/char/kmonitor.c:104:
+    struct kmonitor_res *r;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/char/kmonitor.c:105:
+    struct list_head *tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: drivers/char/kmonitor.c:106:
+    unsigned long bucket = khash(target);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: drivers/char/kmonitor.c:108:
+    TRACE("%i, %i, %i", target, type, signal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: drivers/char/kmonitor.c:109:
+    read_lock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/char/kmonitor.c:110:
+    list_for_each(tmp, &kmonitor_resources[bucket].list) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: drivers/char/kmonitor.c:111:
+        r = to_kmonitor_res(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: drivers/char/kmonitor.c:111:
+        r = to_kmonitor_res(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: drivers/char/kmonitor.c:112:
+        if (r->monitor == current->pid && r->target == target) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/char/kmonitor.c:112:
+        if (r->monitor == current->pid && r->target == target) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 1)
#425: FILE: drivers/char/kmonitor.c:112:
+        if (r->monitor == current->pid && r->target == target) {
[...]
a bit in the event mask indicating that +             * this monitor 

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: drivers/char/kmonitor.c:113:
+            /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: drivers/char/kmonitor.c:114:
+             * There is an existing resource for this$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: drivers/char/kmonitor.c:115:
+             * target/monitor combination so just flip +             * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: drivers/char/kmonitor.c:115:
+             * target/monitor combination so just flip +             * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: drivers/char/kmonitor.c:116:
+             */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: drivers/char/kmonitor.c:117:
+            r->event_mask |= type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/char/kmonitor.c:117:
+            r->event_mask |= type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: drivers/char/kmonitor.c:118:
+            r->signal = signal;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: drivers/char/kmonitor.c:118:
+            r->signal = signal;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: drivers/char/kmonitor.c:119:
+            DBG("Added %i to existing res", type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: drivers/char/kmonitor.c:119:
+            DBG("Added %i to existing res", type);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: drivers/char/kmonitor.c:120:
+            read_unlock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: drivers/char/kmonitor.c:120:
+            read_unlock(&kmonitor_resources[bucket].lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: drivers/char/kmonitor.c:121:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: drivers/char/kmonitor.c:121:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: drivers/char/kmonitor.c:122:
+        } +    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: drivers/char/kmonitor.c:122:
+        } +    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: drivers/char/kmonitor.c:123:
+    read_unlock(&kmonitor_resources[bucket].lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: drivers/char/kmonitor.c:126:
+     * This is the first event registered for this target +     * on $

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: drivers/char/kmonitor.c:128:
+         * Note: There is no race condition between the top half & the$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#445: FILE: drivers/char/kmonitor.c:128:
+     *
+         * Note: There is no race condition between the top half & the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: drivers/char/kmonitor.c:129:
+         * bottom part of this function as if multiple monitors are $

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: drivers/char/kmonitor.c:129:
+         * bottom part of this function as if multiple monitors are $

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: drivers/char/kmonitor.c:130:
+         * each will have a unique resource for itself. So, the function$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: drivers/char/kmonitor.c:131:
+         * is SMP safe.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: drivers/char/kmonitor.c:132:
+         */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: drivers/char/kmonitor.c:133:
+    r = kmem_cache_alloc(kmonitor_cache, SLAB_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: drivers/char/kmonitor.c:134:
+    if (!r)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: drivers/char/kmonitor.c:135:
+        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: drivers/char/kmonitor.c:135:
+        return -ENOMEM;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: drivers/char/kmonitor.c:136:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: drivers/char/kmonitor.c:136:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: drivers/char/kmonitor.c:137:
+    r->target = target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: drivers/char/kmonitor.c:138:
+    r->monitor = current->pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: drivers/char/kmonitor.c:139:
+    r->event_mask = type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: drivers/char/kmonitor.c:140:
+    r->signal = signal;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: drivers/char/kmonitor.c:141:
+    write_lock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: drivers/char/kmonitor.c:142:
+    list_add(&r->rlist, &kmonitor_resources[bucket].list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: drivers/char/kmonitor.c:143:
+    write_unlock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: drivers/char/kmonitor.c:144:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: drivers/char/kmonitor.c:149:
+    struct list_head *tmp, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: drivers/char/kmonitor.c:150:
+    int ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: drivers/char/kmonitor.c:151:
+    int bucket = khash(target);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: drivers/char/kmonitor.c:153:
+    TRACE("%i, %i", target, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: drivers/char/kmonitor.c:155:
+    write_lock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: drivers/char/kmonitor.c:156:
+    list_for_each_safe(tmp, next, &kmonitor_resources[bucket].list) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: drivers/char/kmonitor.c:157:
+        struct kmonitor_res *r = to_kmonitor_res(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: drivers/char/kmonitor.c:157:
+        struct kmonitor_res *r = to_kmonitor_res(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: drivers/char/kmonitor.c:158:
+        if (r->monitor == current->pid && r->target == target) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#476: FILE: drivers/char/kmonitor.c:158:
+        struct kmonitor_res *r = to_kmonitor_res(tmp);
+        if (r->monitor == current->pid && r->target == target) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: drivers/char/kmonitor.c:158:
+        if (r->monitor == current->pid && r->target == target) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#476: FILE: drivers/char/kmonitor.c:158:
+        if (r->monitor == current->pid && r->target == target) {
+            r->event_mask &= ~type;

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: drivers/char/kmonitor.c:159:
+            r->event_mask &= ~type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: drivers/char/kmonitor.c:159:
+            r->event_mask &= ~type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: drivers/char/kmonitor.c:160:
+            if (!r->event_mask) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: drivers/char/kmonitor.c:160:
+            if (!r->event_mask) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: drivers/char/kmonitor.c:161:
+                /* No more events so go ahead and cleanup */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: drivers/char/kmonitor.c:162:
+                list_del(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: drivers/char/kmonitor.c:162:
+                list_del(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: drivers/char/kmonitor.c:163:
+                kmem_cache_free(kmonitor_cache, r);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: drivers/char/kmonitor.c:163:
+                kmem_cache_free(kmonitor_cache, r);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: drivers/char/kmonitor.c:164:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: drivers/char/kmonitor.c:164:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: drivers/char/kmonitor.c:165:
+            ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: drivers/char/kmonitor.c:165:
+            ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: drivers/char/kmonitor.c:166:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: drivers/char/kmonitor.c:166:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: drivers/char/kmonitor.c:167:
+        } +    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: drivers/char/kmonitor.c:167:
+        } +    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/char/kmonitor.c:169:
+    write_unlock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: drivers/char/kmonitor.c:170:
+    return ret;$

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#491: FILE: drivers/char/kmonitor.c:173:
+void __kmonitor_notify_event(struct task_struct *tsk, int type) +{
                                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: drivers/char/kmonitor.c:174:
+    struct siginfo info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: drivers/char/kmonitor.c:175:
+    struct list_head *tmp, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: drivers/char/kmonitor.c:176:
+    int bucket = khash(current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: drivers/char/kmonitor.c:178:
+    read_lock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: drivers/char/kmonitor.c:179:
+    list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#497: FILE: drivers/char/kmonitor.c:179:
+    list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#497: FILE: drivers/char/kmonitor.c:179:
+    list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {
                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#497: FILE: drivers/char/kmonitor.c:179:
+    list_for_each_safe(tmp,next,&kmonitor_resources[bucket].list) {
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: drivers/char/kmonitor.c:180:
+        struct kmonitor_res *r = to_kmonitor_res(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: drivers/char/kmonitor.c:180:
+        struct kmonitor_res *r = to_kmonitor_res(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: drivers/char/kmonitor.c:181:
+        if (r->target == current->pid && type & r->event_mask) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: drivers/char/kmonitor.c:181:
+        struct kmonitor_res *r = to_kmonitor_res(tmp);
+        if (r->target == current->pid && type & r->event_mask) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: drivers/char/kmonitor.c:181:
+        if (r->target == current->pid && type & r->event_mask) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#499: FILE: drivers/char/kmonitor.c:181:
+        if (r->target == current->pid && type & r->event_mask) {
+            info.si_signo = r->signal;

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: drivers/char/kmonitor.c:182:
+            info.si_signo = r->signal;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: drivers/char/kmonitor.c:182:
+            info.si_signo = r->signal;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: drivers/char/kmonitor.c:183:
+            info.si_code = SI_QUEUE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/char/kmonitor.c:183:
+            info.si_code = SI_QUEUE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: drivers/char/kmonitor.c:184:
+            info.si_int = type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: drivers/char/kmonitor.c:184:
+            info.si_int = type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#503: FILE: drivers/char/kmonitor.c:185:
+            info.si_pid = tsk->pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: drivers/char/kmonitor.c:185:
+            info.si_pid = tsk->pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: drivers/char/kmonitor.c:186:
+            info.si_uid = tsk->uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: drivers/char/kmonitor.c:186:
+            info.si_uid = tsk->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: drivers/char/kmonitor.c:187:
+            kill_proc_info(r->signal, &info, r->monitor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: drivers/char/kmonitor.c:187:
+            kill_proc_info(r->signal, &info, r->monitor);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: drivers/char/kmonitor.c:188:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/char/kmonitor.c:188:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: drivers/char/kmonitor.c:189:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: drivers/char/kmonitor.c:190:
+    read_unlock(&kmonitor_resources[bucket].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: drivers/char/kmonitor.c:195:
+    atomic_inc(&kmonitor_active);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: drivers/char/kmonitor.c:196:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: drivers/char/kmonitor.c:201:
+    struct list_head *tmp, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: drivers/char/kmonitor.c:202:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: drivers/char/kmonitor.c:204:
+    TRACE("%p, %p", inode, file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: drivers/char/kmonitor.c:205:
+    atomic_dec(&kmonitor_active);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/char/kmonitor.c:210:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#528: FILE: drivers/char/kmonitor.c:210:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#528: FILE: drivers/char/kmonitor.c:210:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#528: FILE: drivers/char/kmonitor.c:210:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: drivers/char/kmonitor.c:211:
+        write_lock(&kmonitor_resources[i].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/char/kmonitor.c:211:
+        write_lock(&kmonitor_resources[i].lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: drivers/char/kmonitor.c:212:
+        list_for_each_safe(tmp, next, &kmonitor_resources[i].list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/char/kmonitor.c:212:
+        list_for_each_safe(tmp, next, &kmonitor_resources[i].list) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#530: FILE: drivers/char/kmonitor.c:212:
+        list_for_each_safe(tmp, next, &kmonitor_resources[i].list) {
+            struct kmonitor_res *r = to_kmonitor_res(tmp);

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: drivers/char/kmonitor.c:213:
+            struct kmonitor_res *r = to_kmonitor_res(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: drivers/char/kmonitor.c:213:
+            struct kmonitor_res *r = to_kmonitor_res(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: drivers/char/kmonitor.c:214:
+            if (r->monitor == current->pid) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: drivers/char/kmonitor.c:214:
+            struct kmonitor_res *r = to_kmonitor_res(tmp);
+            if (r->monitor == current->pid) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: drivers/char/kmonitor.c:214:
+            if (r->monitor == current->pid) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: drivers/char/kmonitor.c:215:
+                list_del(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: drivers/char/kmonitor.c:215:
+                list_del(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: drivers/char/kmonitor.c:216:
+                kmem_cache_free(kmonitor_cache, r);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: drivers/char/kmonitor.c:216:
+                kmem_cache_free(kmonitor_cache, r);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: drivers/char/kmonitor.c:217:
+            } +        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: drivers/char/kmonitor.c:217:
+            } +        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: drivers/char/kmonitor.c:218:
+        write_unlock(&kmonitor_resources[i].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: drivers/char/kmonitor.c:218:
+        write_unlock(&kmonitor_resources[i].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: drivers/char/kmonitor.c:219:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/char/kmonitor.c:221:
+    return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: drivers/char/kmonitor.c:225:
+              unsigned int cmd, unsigned long arg)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/char/kmonitor.c:225:
+static int kmonitor_ioctl(struct inode *inode, struct file *file,
+              unsigned int cmd, unsigned long arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: drivers/char/kmonitor.c:225:
+              unsigned int cmd, unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/char/kmonitor.c:227:
+    struct kmonitor_cmd hdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: drivers/char/kmonitor.c:229:
+    TRACE("%p, %p, %i, %i", inode, file, (int)cmd, (int)arg);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: drivers/char/kmonitor.c:230:
+    if (copy_from_user((struct kmonitor_cmd *)&hdr, +               $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/char/kmonitor.c:230:
+    if (copy_from_user((struct kmonitor_cmd *)&hdr, +               $

ERROR:CODE_INDENT: code indent should use tabs where possible
#550: FILE: drivers/char/kmonitor.c:231:
+        return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: drivers/char/kmonitor.c:231:
+        return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: drivers/char/kmonitor.c:233:
+    switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: drivers/char/kmonitor.c:234:
+    case KMONITOR_IOW_REGISTER:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: drivers/char/kmonitor.c:235:
+        return kmonitor_add(hdr.pid, hdr.type, hdr.signal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: drivers/char/kmonitor.c:235:
+        return kmonitor_add(hdr.pid, hdr.type, hdr.signal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: drivers/char/kmonitor.c:236:
+    case KMONITOR_IOW_DEREGISTER:$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: drivers/char/kmonitor.c:237:
+        return kmonitor_remove(hdr.pid, hdr.type);       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: drivers/char/kmonitor.c:237:
+        return kmonitor_remove(hdr.pid, hdr.type);       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: drivers/char/kmonitor.c:237:
+        return kmonitor_remove(hdr.pid, hdr.type);       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: drivers/char/kmonitor.c:238:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: drivers/char/kmonitor.c:240:
+    DBG("Unexpected ioctl, %i", cmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: drivers/char/kmonitor.c:241:
+    return -EINVAL;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#563: FILE: drivers/char/kmonitor.c:244:
+static struct file_operations kmonitor_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: drivers/char/kmonitor.c:245:
+    .owner        = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: drivers/char/kmonitor.c:246:
+    .llseek        = no_llseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: drivers/char/kmonitor.c:247:
+    .open           = kmonitor_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: drivers/char/kmonitor.c:248:
+    .release    = kmonitor_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: drivers/char/kmonitor.c:249:
+    .ioctl          = kmonitor_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: drivers/char/kmonitor.c:253:
+    .minor        = KMONITOR_MINOR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: drivers/char/kmonitor.c:254:
+    .name        = "kmonitor",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: drivers/char/kmonitor.c:255:
+    .fops        = &kmonitor_fops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: drivers/char/kmonitor.c:260:
+    int ret, i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: drivers/char/kmonitor.c:262:
+    TRACE("void");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: drivers/char/kmonitor.c:264:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#583: FILE: drivers/char/kmonitor.c:264:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#583: FILE: drivers/char/kmonitor.c:264:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#583: FILE: drivers/char/kmonitor.c:264:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: drivers/char/kmonitor.c:265:
+        INIT_LIST_HEAD(&kmonitor_resources[i].list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: drivers/char/kmonitor.c:265:
+        INIT_LIST_HEAD(&kmonitor_resources[i].list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: drivers/char/kmonitor.c:266:
+        kmonitor_resources[i].lock = RW_LOCK_UNLOCKED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: drivers/char/kmonitor.c:266:
+        kmonitor_resources[i].lock = RW_LOCK_UNLOCKED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: drivers/char/kmonitor.c:267:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: drivers/char/kmonitor.c:269:
+    ret = misc_register(&kmonitor_miscdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: drivers/char/kmonitor.c:270:
+    if (ret) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: drivers/char/kmonitor.c:271:
+        printk(KERN_ERR "unable to register kmonitor misc device\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: drivers/char/kmonitor.c:271:
+        printk(KERN_ERR "unable to register kmonitor misc device\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#590: FILE: drivers/char/kmonitor.c:271:
+        printk(KERN_ERR "unable to register kmonitor misc device\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: drivers/char/kmonitor.c:272:
+        goto error_misc_drvr_register;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: drivers/char/kmonitor.c:272:
+        goto error_misc_drvr_register;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: drivers/char/kmonitor.c:273:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: drivers/char/kmonitor.c:275:
+    kmonitor_cache = kmem_cache_create("kmonitor_res", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: drivers/char/kmonitor.c:275:
+    kmonitor_cache = kmem_cache_create("kmonitor_res", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: drivers/char/kmonitor.c:276:
+                       sizeof(struct kmonitor_res), 0, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: drivers/char/kmonitor.c:276:
+                       sizeof(struct kmonitor_res), 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: drivers/char/kmonitor.c:276:
+    kmonitor_cache = kmem_cache_create("kmonitor_res", 
+                       sizeof(struct kmonitor_res), 0, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: drivers/char/kmonitor.c:276:
+                       sizeof(struct kmonitor_res), 0, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: drivers/char/kmonitor.c:277:
+                       SLAB_HWCACHE_ALIGN,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: drivers/char/kmonitor.c:277:
+                       SLAB_HWCACHE_ALIGN,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: drivers/char/kmonitor.c:278:
+                       NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: drivers/char/kmonitor.c:278:
+                       NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: drivers/char/kmonitor.c:279:
+    if (!kmonitor_cache) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: drivers/char/kmonitor.c:280:
+        printk(KERN_ERR "unable to allocate kmonitor_cache\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: drivers/char/kmonitor.c:280:
+        printk(KERN_ERR "unable to allocate kmonitor_cache\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#599: FILE: drivers/char/kmonitor.c:280:
+        printk(KERN_ERR "unable to allocate kmonitor_cache\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: drivers/char/kmonitor.c:281:
+        ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: drivers/char/kmonitor.c:281:
+        ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: drivers/char/kmonitor.c:282:
+        goto error_in_kmonitor_cache;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: drivers/char/kmonitor.c:282:
+        goto error_in_kmonitor_cache;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/char/kmonitor.c:283:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/char/kmonitor.c:285:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: drivers/char/kmonitor.c:288:
+    misc_deregister(&kmonitor_miscdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: drivers/char/kmonitor.c:290:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: drivers/char/kmonitor.c:295:
+    struct list_head *tmp, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: drivers/char/kmonitor.c:296:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: drivers/char/kmonitor.c:298:
+    TRACE("void");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: drivers/char/kmonitor.c:299:
+    misc_deregister(&kmonitor_miscdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: drivers/char/kmonitor.c:300:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#619: FILE: drivers/char/kmonitor.c:300:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#619: FILE: drivers/char/kmonitor.c:300:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#619: FILE: drivers/char/kmonitor.c:300:
+    for (i=0; i<(1<<KMONITOR_BITS); i++) {
                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: drivers/char/kmonitor.c:301:
+        write_lock(&kmonitor_resources[i].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: drivers/char/kmonitor.c:301:
+        write_lock(&kmonitor_resources[i].lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: drivers/char/kmonitor.c:302:
+        list_for_each_safe(tmp, next, &kmonitor_resources[i].list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: drivers/char/kmonitor.c:302:
+        list_for_each_safe(tmp, next, &kmonitor_resources[i].list) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#621: FILE: drivers/char/kmonitor.c:302:
+        list_for_each_safe(tmp, next, &kmonitor_resources[i].list) {
+            struct kmonitor_res *r = to_kmonitor_res(tmp);

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: drivers/char/kmonitor.c:303:
+            struct kmonitor_res *r = to_kmonitor_res(tmp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: drivers/char/kmonitor.c:303:
+            struct kmonitor_res *r = to_kmonitor_res(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: drivers/char/kmonitor.c:304:
+            list_del(tmp);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#623: FILE: drivers/char/kmonitor.c:304:
+            struct kmonitor_res *r = to_kmonitor_res(tmp);
+            list_del(tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: drivers/char/kmonitor.c:304:
+            list_del(tmp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: drivers/char/kmonitor.c:305:
+            kmem_cache_free(kmonitor_cache, r);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: drivers/char/kmonitor.c:305:
+            kmem_cache_free(kmonitor_cache, r);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: drivers/char/kmonitor.c:306:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: drivers/char/kmonitor.c:306:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: drivers/char/kmonitor.c:307:
+        write_unlock(&kmonitor_resources[i].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: drivers/char/kmonitor.c:307:
+        write_unlock(&kmonitor_resources[i].lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: drivers/char/kmonitor.c:308:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: drivers/char/kmonitor.c:309:
+    kmem_cache_destroy(kmonitor_cache);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#653: FILE: fs/exec.c:1148:
+        kmonitor_notify_event(current, KMONITOR_PROCESS_EXEC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: fs/exec.c:1148:
+        kmonitor_notify_event(current, KMONITOR_PROCESS_EXEC);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#661: FILE: include/linux/kmonitor.h:1:
+/* + *

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#676: FILE: include/linux/kmonitor.h:16:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#680: FILE: include/linux/kmonitor.h:20:
+ *               + */

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#684: FILE: include/linux/kmonitor.h:24:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: include/linux/kmonitor.h:26:
+#define KMONITOR_THREAD_CREATE 0x01 +#define KMONITOR_THREAD_ABORT  $

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#686: FILE: include/linux/kmonitor.h:26:
+#define KMONITOR_THREAD_CREATE 0x01 +#define KMONITOR_THREAD_ABORT  
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#686: FILE: include/linux/kmonitor.h:26:
+#define KMONITOR_THREAD_CREATE 0x01 +#define KMONITOR_THREAD_ABORT  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#689: FILE: include/linux/kmonitor.h:28:
+#define KMONITOR_PROCESS_ABORT 0x10 +#define KMONITOR_PROCESS_EXEC  $

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#689: FILE: include/linux/kmonitor.h:28:
+#define KMONITOR_PROCESS_ABORT 0x10 +#define KMONITOR_PROCESS_EXEC  
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#689: FILE: include/linux/kmonitor.h:28:
+#define KMONITOR_PROCESS_ABORT 0x10 +#define KMONITOR_PROCESS_EXEC  

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#692: FILE: include/linux/kmonitor.h:30:
+struct kmonitor_cmd +{
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: include/linux/kmonitor.h:31:
+    pid_t pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: include/linux/kmonitor.h:32:
+    int type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: include/linux/kmonitor.h:33:
+    int signal;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#705: FILE: include/linux/kmonitor.h:43:
+extern void __kmonitor_notify_event(struct task_struct *tsk, int type);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: include/linux/kmonitor.h:45:
+static inline void kmonitor_notify_event( struct task_struct *tsk, int $

ERROR:SPACING: space prohibited after that open parenthesis '('
#707: FILE: include/linux/kmonitor.h:45:
+static inline void kmonitor_notify_event( struct task_struct *tsk, int 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: include/linux/kmonitor.h:47:
+#ifdef CONFIG_KMONITOR   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: include/linux/kmonitor.h:48:
+    if (atomic_read(&kmonitor_active))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: include/linux/kmonitor.h:49:
+        __kmonitor_notify_event(tsk, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: include/linux/kmonitor.h:49:
+        __kmonitor_notify_event(tsk, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: kernel/exit.c:753:
+    if (tsk->pid == tsk->tgid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: kernel/exit.c:754:
+        kmonitor_notify_event(tsk, KMONITOR_PROCESS_EXIT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: kernel/exit.c:754:
+        kmonitor_notify_event(tsk, KMONITOR_PROCESS_EXIT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: kernel/exit.c:755:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: kernel/exit.c:756:
+        kmonitor_notify_event(tsk, KMONITOR_THREAD_EXIT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: kernel/exit.c:756:
+        kmonitor_notify_event(tsk, KMONITOR_THREAD_EXIT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: kernel/fork.c:1172:
+                if (p->pid == p->tgid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: kernel/fork.c:1172:
+                if (p->pid == p->tgid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: kernel/fork.c:1173:
+                        kmonitor_notify_event(p, KMONITOR_PROCESS_FORK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: kernel/fork.c:1173:
+                        kmonitor_notify_event(p, KMONITOR_PROCESS_FORK);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: kernel/fork.c:1174:
+                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: kernel/fork.c:1174:
+                else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: kernel/fork.c:1175:
+                        kmonitor_notify_event(p, KMONITOR_THREAD_CREATE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: kernel/fork.c:1175:
+                        kmonitor_notify_event(p, KMONITOR_THREAD_CREATE);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274882.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 126 errors, 189 warnings, 12 checks, 601 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274882.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
