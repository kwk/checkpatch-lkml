WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -Nru a/arch/ppc/platforms/85xx/Makefile b/arch/ppc/platforms/85xx/Makefile

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#39: 
--- a/arch/ppc/platforms/85xx/Makefile	2004-12-08 22:22:37 -06:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:CAMELCASE: Avoid CamelCase: <interruptPHY>
#66: FILE: arch/ppc/platforms/85xx/mpc8540_ads.c:60:
+	.interruptPHY = MPC85xx_IRQ_EXT5,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: arch/ppc/platforms/85xx/mpc85xx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#89: FILE: arch/ppc/platforms/85xx/mpc85xx.c:2:
+ * arch/ppc/platforms/85xx/mpc85xx.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#122: FILE: arch/ppc/platforms/85xx/mpc85xx.c:35:
+		.flags	= GIANFAR_HAS_GIGABIT | GIANFAR_HAS_MULTI_INTR | GIANFAR_HAS_RMON | GIANFAR_HAS_COALESCE,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: arch/ppc/platforms/85xx/mpc85xx.c:37:
+^I^I.dev.platform_data = &mpc85xx_gianfar1_def, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#154: FILE: arch/ppc/platforms/85xx/mpc85xx.c:67:
+		.flags	= GIANFAR_HAS_GIGABIT | GIANFAR_HAS_MULTI_INTR | GIANFAR_HAS_RMON | GIANFAR_HAS_COALESCE,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: arch/ppc/platforms/85xx/mpc85xx.c:212:
+	struct resource * r;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: arch/ppc/platforms/85xx/mpc85xx.c:227:
+	phys_addr_t ccsr = CCSRBAR;
+	platform_device_register(&m_dev[MPC85xx_TSEC1]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#315: FILE: arch/ppc/platforms/85xx/mpc85xx.c:228:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/base/platform.c:68:
+platform_get_resource_byname(struct platform_device *dev, unsigned int type,
+		      char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: drivers/base/platform.c:68:
+		      char * name)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#352: FILE: drivers/base/platform.c:75:
+		if ((r->flags & (IORESOURCE_IO|IORESOURCE_MEM|
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#352: FILE: drivers/base/platform.c:75:
+		if ((r->flags & (IORESOURCE_IO|IORESOURCE_MEM|
 		                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#353: FILE: drivers/base/platform.c:76:
+				 IORESOURCE_IRQ|IORESOURCE_DMA))
 				               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: drivers/base/platform.c:89:
+int platform_get_irq_byname(struct platform_device *dev, char * name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r->name"
#382: FILE: drivers/base/platform.c:142:
+		if (r->name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#392: FILE: drivers/base/platform.c:349:
+EXPORT_SYMBOL_GPL(platform_get_resource_byname);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#416: FILE: drivers/net/gianfar.c:135:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#429: FILE: drivers/net/gianfar.c:157:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#461: FILE: drivers/net/gianfar.c:368:
+	pdinfo = (struct gianfar_platform_data *) pdev->dev.platform_data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdinfo"
#463: FILE: drivers/net/gianfar.c:370:
+	if (pdinfo == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#464: FILE: drivers/net/gianfar.c:371:
+		printk(KERN_ERR "gfar %d: Missing additional data!\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: drivers/net/gianfar.c:376:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#472: FILE: drivers/net/gianfar.c:379:
+	 * get the device which has those regs */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: drivers/net/gianfar.c:380:
+^Iif ((pdinfo->phyregidx >= 0) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdinfo->phyregidx >= 0'
#473: FILE: drivers/net/gianfar.c:380:
+	if ((pdinfo->phyregidx >= 0) && 
+			(pdinfo->phyregidx != pdev->id)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdinfo->phyregidx != pdev->id'
#473: FILE: drivers/net/gianfar.c:380:
+	if ((pdinfo->phyregidx >= 0) && 
+			(pdinfo->phyregidx != pdev->id)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: drivers/net/gianfar.c:381:
+	if ((pdinfo->phyregidx >= 0) && 
+			(pdinfo->phyregidx != pdev->id)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#475: FILE: drivers/net/gianfar.c:382:
+			(pdinfo->phyregidx != pdev->id)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#483: FILE: drivers/net/gianfar.c:390:
+		 * up, wait for it to come up */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdiodev"
#484: FILE: drivers/net/gianfar.c:391:
+		if (mdiodev == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#491: FILE: drivers/net/gianfar.c:398:
+	dev = alloc_etherdev(sizeof (*priv));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#493: FILE: drivers/net/gianfar.c:400:
+	if (dev == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <interruptTransmit>
#501: FILE: drivers/net/gianfar.c:408:
+		priv->interruptTransmit = platform_get_irq_byname(pdev, "tx");

CHECK:CAMELCASE: Avoid CamelCase: <interruptReceive>
#502: FILE: drivers/net/gianfar.c:409:
+		priv->interruptReceive = platform_get_irq_byname(pdev, "rx");

CHECK:CAMELCASE: Avoid CamelCase: <interruptError>
#503: FILE: drivers/net/gianfar.c:410:
+		priv->interruptError = platform_get_irq_byname(pdev, "error");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#515: FILE: drivers/net/gianfar.c:422:
+		ioremap(r->start, sizeof (struct gfar));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->regs"
#517: FILE: drivers/net/gianfar.c:424:
+	if (priv->regs == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#525: FILE: drivers/net/gianfar.c:432:
+	    ioremap(r->start, sizeof (struct gfar));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->phyregs"
#527: FILE: drivers/net/gianfar.c:434:
+	if (priv->phyregs == NULL) {

CHECK:SPACING: No space is necessary after a cast
#568: FILE: drivers/net/gianfar.c:475:
+	dev->base_addr = (unsigned long) (priv->regs);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#589: FILE: drivers/net/gianfar.c:496:
+	 * ops to catch all 4 possibilities */

ERROR:SPACING: space required before the open parenthesis '('
#590: FILE: drivers/net/gianfar.c:497:
+	if((priv->einfo->flags & GFAR_HAS_RMON) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#593: FILE: drivers/net/gianfar.c:500:
+	if((priv->einfo->flags & GFAR_HAS_COALESCE) == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#615: FILE: drivers/net/gianfar.c:522:
+		printk(KERN_ERR "%s: Cannot register net device, aborting.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: drivers/net/gianfar.c:523:
+		printk(KERN_ERR "%s: Cannot register net device, aborting.\n",
+				dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#621: FILE: drivers/net/gianfar.c:528:
+	printk(KERN_INFO DEVICE_NAME, dev->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#623: FILE: drivers/net/gianfar.c:530:
+		printk("%2.2x%c", dev->dev_addr[idx], idx == 5 ? ' ' : ':');

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#624: FILE: drivers/net/gianfar.c:531:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#630: FILE: drivers/net/gianfar.c:537:
+	printk(KERN_INFO "%s: Running with NAPI enabled\n", dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#632: FILE: drivers/net/gianfar.c:539:
+	printk(KERN_INFO "%s: Running with NAPI disabled\n", dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#634: FILE: drivers/net/gianfar.c:541:
+	printk(KERN_INFO "%s: %d/%d RX/TX BD ring size\n",

CHECK:SPACING: No space is necessary after a cast
#640: FILE: drivers/net/gianfar.c:547:
+	iounmap((void *) priv->phyregs);

CHECK:SPACING: No space is necessary after a cast
#642: FILE: drivers/net/gianfar.c:549:
+	iounmap((void *) priv->regs);

CHECK:SPACING: No space is necessary after a cast
#656: FILE: drivers/net/gianfar.c:563:
+	iounmap((void *) priv->regs);

CHECK:SPACING: No space is necessary after a cast
#657: FILE: drivers/net/gianfar.c:564:
+	iounmap((void *) priv->phyregs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: drivers/net/gianfar.c:1775:
+^I^Iif (request_irq(priv->pdinfo->interruptPHY, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: drivers/net/gianfar.c:1776:
+		if (request_irq(priv->pdinfo->interruptPHY, 
 					phy_interrupt,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#776: FILE: drivers/net/gianfar.c:2055:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#784: FILE: drivers/net/gianfar.c:2090:
+#endif $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#874: FILE: include/linux/device.h:386:
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#874: FILE: include/linux/device.h:386:
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct platform_device *' should also have an identifier name
#874: FILE: include/linux/device.h:386:
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#874: FILE: include/linux/device.h:386:
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#874: FILE: include/linux/device.h:386:
+extern struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: include/linux/device.h:387:
+extern int platform_get_irq_byname(struct platform_device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct platform_device *' should also have an identifier name
#875: FILE: include/linux/device.h:387:
+extern int platform_get_irq_byname(struct platform_device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#875: FILE: include/linux/device.h:387:
+extern int platform_get_irq_byname(struct platform_device *, char *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#883: FILE: include/linux/fsl_devices.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#884: FILE: include/linux/fsl_devices.h:2:
+ * include/linux/fsl_devices.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: include/linux/fsl_devices.h:4:
+ * Definitions for any platform device related flags or structures for $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#912: FILE: include/linux/fsl_devices.h:30:
+	char * phydevice;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 33 warnings, 28 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
