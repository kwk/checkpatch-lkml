WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
--- linux-2.6.12-rc4-mm2-seclvl.orig/security/seclvl.c	2005-05-16 14:52:41.000000000 -0500

WARNING:LINE_SPACING: Missing a blank line after declarations
#63: FILE: security/seclvl.c:107:
+	va_list args;
+	va_start(args, fmt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#67: FILE: security/seclvl.c:111:
+		unsigned long _now = jiffies;
+		if ((_now - _prior) > HZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#67: FILE: security/seclvl.c:111:
+		if ((_now - _prior) > HZ) {
+			vprintk(fmt, args);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: missing space after return type
#83: FILE: security/seclvl.c:139:
+	 ssize_t(*show) (struct seclvl_obj *, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#83: FILE: security/seclvl.c:139:
+	 ssize_t(*show) (struct seclvl_obj *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seclvl_obj *' should also have an identifier name
#83: FILE: security/seclvl.c:139:
+	 ssize_t(*show) (struct seclvl_obj *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#83: FILE: security/seclvl.c:139:
+	 ssize_t(*show) (struct seclvl_obj *, char *);

WARNING:SPACING: missing space after return type
#84: FILE: security/seclvl.c:140:
+	 ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#84: FILE: security/seclvl.c:140:
+	 ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seclvl_obj *' should also have an identifier name
#84: FILE: security/seclvl.c:140:
+	 ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#84: FILE: security/seclvl.c:140:
+	 ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#84: FILE: security/seclvl.c:140:
+	 ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:SPLIT_STRING: quoted string split across lines
#95: FILE: security/seclvl.c:200:
+		seclvl_printk(1, KERN_WARNING "%s: Attempt to set seclvl out "
+			      "of range: [%d]\n", __FUNCTION__, reqlvl);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#95: FILE: security/seclvl.c:200:
+			      "of range: [%d]\n", __FUNCTION__, reqlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#104: FILE: security/seclvl.c:207:
+		seclvl_printk(1, KERN_WARNING "%s: Attempt to lower seclvl to "
+			      "[%d]\n", __FUNCTION__, reqlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#104: FILE: security/seclvl.c:207:
+			      "[%d]\n", __FUNCTION__, reqlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#115: FILE: security/seclvl.c:232:
+		seclvl_printk(1, KERN_WARNING "%s: Cannot advance to seclvl "
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#115: FILE: security/seclvl.c:232:
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#122: FILE: security/seclvl.c:237:
+		seclvl_printk(1, KERN_WARNING "%s: Cannot advance to seclvl "
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#122: FILE: security/seclvl.c:237:
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#129: FILE: security/seclvl.c:242:
+		seclvl_printk(1, KERN_WARNING "%s: Not allowed to advance to "
+			      "seclvl [%d]\n", __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#129: FILE: security/seclvl.c:242:
+			      "seclvl [%d]\n", __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#140: FILE: security/seclvl.c:259:
+		seclvl_printk(1, KERN_WARNING "%s: Invalid value passed to "
+			      "seclvl: [%s]\n", __FUNCTION__, buff);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#140: FILE: security/seclvl.c:259:
+			      "seclvl: [%s]\n", __FUNCTION__, buff);

WARNING:SPLIT_STRING: quoted string split across lines
#148: FILE: security/seclvl.c:265:
+		seclvl_printk(1, KERN_WARNING "%s: Illegal secure level "
+			      "requested: [%d]\n", __FUNCTION__, (int)val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#148: FILE: security/seclvl.c:265:
+			      "requested: [%d]\n", __FUNCTION__, (int)val);

WARNING:SPLIT_STRING: quoted string split across lines
#155: FILE: security/seclvl.c:270:
+		seclvl_printk(0, KERN_ERR "%s: Failure advancing security "
+			      "level to [%lu]\n", __FUNCTION__, val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#155: FILE: security/seclvl.c:270:
+			      "level to [%lu]\n", __FUNCTION__, val);

WARNING:SPLIT_STRING: quoted string split across lines
#167: FILE: security/seclvl.c:318:
+		seclvl_printk(0, KERN_ERR "%s: Plaintext password too large "
+			      "(%d characters).  Largest possible is %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#168: FILE: security/seclvl.c:319:
+			      "(%d characters).  Largest possible is %lu "
+			      "bytes.\n", __FUNCTION__, len, PAGE_SIZE);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#168: FILE: security/seclvl.c:319:
+			      "bytes.\n", __FUNCTION__, len, PAGE_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#176: FILE: security/seclvl.c:325:
+		seclvl_printk(0, KERN_ERR "%s: Failed to load transform for "
+			      "SHA1\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#176: FILE: security/seclvl.c:325:
+			      "SHA1\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#192: FILE: security/seclvl.c:361:
 			      "this part of the module; please tell a "
+			      "maintainer about this event.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#192: FILE: security/seclvl.c:361:
+			      "maintainer about this event.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#203: FILE: security/seclvl.c:372:
+		seclvl_printk(0, KERN_ERR "%s: Error hashing password: rc = "
+			      "[%d]\n", __FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#203: FILE: security/seclvl.c:372:
+			      "[%d]\n", __FUNCTION__, rc);

WARNING:SPLIT_STRING: quoted string split across lines
#214: FILE: security/seclvl.c:381:
+	seclvl_printk(0, KERN_INFO "%s: Password accepted; seclvl reduced to "
+		      "0.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#214: FILE: security/seclvl.c:381:
+		      "0.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#226: FILE: security/seclvl.c:400:
 				      "the init process dissallowed in "
+				      "secure level %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#226: FILE: security/seclvl.c:400:
+				      "secure level %d\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#241: FILE: security/seclvl.c:427:
 				      "and/or APPEND extended attribute set "
+				      "denied in seclvl [%d]\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#241: FILE: security/seclvl.c:427:
+				      "denied in seclvl [%d]\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#249: FILE: security/seclvl.c:433:
 				      "raw I/O while in secure level [%d] "
+				      "denied\n", __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#249: FILE: security/seclvl.c:433:
+				      "denied\n", __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#256: FILE: security/seclvl.c:438:
 				      "network administrative task while "
+				      "in secure level [%d] denied\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#257: FILE: security/seclvl.c:439:
+				      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#264: FILE: security/seclvl.c:444:
+				      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#271: FILE: security/seclvl.c:449:
+				      __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#277: FILE: security/seclvl.c:453:
 				      "a module operation while in secure "
+				      "level [%d] denied\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#278: FILE: security/seclvl.c:454:
+				      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#287: FILE: security/seclvl.c:464:
+	seclvl_printk(1, KERN_WARNING "%s: Capability denied\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#299: FILE: security/seclvl.c:479:
+			seclvl_printk(1, KERN_WARNING "%s: Attempt to "
+				      "decrement time in secure level %d "

WARNING:SPLIT_STRING: quoted string split across lines
#300: FILE: security/seclvl.c:480:
+				      "decrement time in secure level %d "
+				      "denied: current->pid = [%d], "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#303: FILE: security/seclvl.c:482:
+				      __FUNCTION__, seclvl, current->pid,

WARNING:SPLIT_STRING: quoted string split across lines
#314: FILE: security/seclvl.c:533:
+			seclvl_printk(1, KERN_WARNING "%s: Write to block "
+				      "device denied in secure level [%d]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#315: FILE: security/seclvl.c:534:
+				      __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#324: FILE: security/seclvl.c:539:
+				seclvl_printk(1, KERN_WARNING "%s: Write to "
+					      "mounted block device denied in "

WARNING:SPLIT_STRING: quoted string split across lines
#325: FILE: security/seclvl.c:540:
+					      "mounted block device denied in "
+					      "secure level [%d]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#326: FILE: security/seclvl.c:541:
+					      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#339: FILE: security/seclvl.c:561:
+					      __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#350: FILE: security/seclvl.c:590:
+		seclvl_printk(1, KERN_WARNING "%s: Attempt to unmount in "
+			      "secure level [%d]\n", __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#350: FILE: security/seclvl.c:590:
+			      "secure level [%d]\n", __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#363: FILE: security/seclvl.c:618:
 				      "were set, but they are mutually "
+				      "exclusive.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#363: FILE: security/seclvl.c:618:
+				      "exclusive.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#371: FILE: security/seclvl.c:624:
+			seclvl_printk(0, KERN_ERR "%s: Error: SHA1 support "
+				      "not in kernel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#371: FILE: security/seclvl.c:624:
+				      "not in kernel\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#384: FILE: security/seclvl.c:636:
 				      "representation of the SHA1 hash of "
+				      "the password.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#384: FILE: security/seclvl.c:636:
+				      "the password.\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#395: FILE: security/seclvl.c:660:
+		seclvl_printk(0, KERN_WARNING "Error [%d] registering seclvl "
+			      "subsystem\n", __FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#395: FILE: security/seclvl.c:660:
+			      "subsystem\n", __FUNCTION__, rc);

WARNING:SPLIT_STRING: quoted string split across lines
#406: FILE: security/seclvl.c:687:
+		seclvl_printk(0, KERN_ERR "%s: Error: bad initial securelevel "
+			      "[%d].\n", __FUNCTION__, initlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#406: FILE: security/seclvl.c:687:
+			      "[%d].\n", __FUNCTION__, initlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#415: FILE: security/seclvl.c:694:
+		seclvl_printk(0, KERN_ERR "%s: Error processing the password "
+			      "module parameter(s): rc = [%d]\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#415: FILE: security/seclvl.c:694:
+			      "module parameter(s): rc = [%d]\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#425: FILE: security/seclvl.c:701:
+		seclvl_printk(0, KERN_ERR "%s: seclvl: Failure registering "
+			      "with the kernel.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#425: FILE: security/seclvl.c:701:
+			      "with the kernel.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#433: FILE: security/seclvl.c:707:
 				      "registering with primary security "
+				      "module.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#433: FILE: security/seclvl.c:707:
+				      "module.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#441: FILE: security/seclvl.c:714:
+			      __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#447: FILE: security/seclvl.c:718:
+		      __FUNCTION__);

WARNING:INDENTED_LABEL: labels should not be indented
#448: FILE: security/seclvl.c:719:
+      exit:

WARNING:SPLIT_STRING: quoted string split across lines
#460: FILE: security/seclvl.c:742:
+		seclvl_printk(0, KERN_INFO "%s: seclvl: Failure unregistering "
+			      "with the kernel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#460: FILE: security/seclvl.c:742:
+			      "with the kernel\n", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 85 warnings, 0 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
