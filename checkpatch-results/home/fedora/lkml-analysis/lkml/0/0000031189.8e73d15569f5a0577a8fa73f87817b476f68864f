WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/net/vioc/vioc_vnic.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: drivers/net/vioc/vioc_vnic.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: drivers/net/vioc/vioc_vnic.h:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#80: FILE: drivers/net/vioc/vioc_vnic.h:39:
+/*
+ * VIOC PCI constants

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#103: FILE: drivers/net/vioc/vioc_vnic.h:62:
+/*
+ * VIOC device state

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: drivers/net/vioc/vioc_vnic.h:68:
+#define RX_DESC_SIZE   sizeof (struct rx_pktBufDesc_Phys_w)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <rx_pktBufDesc_Phys_w>
#109: FILE: drivers/net/vioc/vioc_vnic.h:68:
+#define RX_DESC_SIZE   sizeof (struct rx_pktBufDesc_Phys_w)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#109: FILE: drivers/net/vioc/vioc_vnic.h:68:
+#define RX_DESC_SIZE   sizeof (struct rx_pktBufDesc_Phys_w)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#110: FILE: drivers/net/vioc/vioc_vnic.h:69:
+#define RX_DESC_QUANT  (4096/RX_DESC_SIZE)
                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: drivers/net/vioc/vioc_vnic.h:71:
+#define RXC_DESC_SIZE  sizeof (struct rxc_pktDesc_Phys_w)

CHECK:CAMELCASE: Avoid CamelCase: <rxc_pktDesc_Phys_w>
#112: FILE: drivers/net/vioc/vioc_vnic.h:71:
+#define RXC_DESC_SIZE  sizeof (struct rxc_pktDesc_Phys_w)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#112: FILE: drivers/net/vioc/vioc_vnic.h:71:
+#define RXC_DESC_SIZE  sizeof (struct rxc_pktDesc_Phys_w)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#113: FILE: drivers/net/vioc/vioc_vnic.h:72:
+#define RXC_DESC_QUANT (4096/RXC_DESC_SIZE)
                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: drivers/net/vioc/vioc_vnic.h:74:
+#define TX_DESC_SIZE   sizeof (struct tx_pktBufDesc_Phys_w)

CHECK:CAMELCASE: Avoid CamelCase: <tx_pktBufDesc_Phys_w>
#115: FILE: drivers/net/vioc/vioc_vnic.h:74:
+#define TX_DESC_SIZE   sizeof (struct tx_pktBufDesc_Phys_w)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#115: FILE: drivers/net/vioc/vioc_vnic.h:74:
+#define TX_DESC_SIZE   sizeof (struct tx_pktBufDesc_Phys_w)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#116: FILE: drivers/net/vioc/vioc_vnic.h:75:
+#define TX_DESC_QUANT  (4096/TX_DESC_SIZE)
                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#118: FILE: drivers/net/vioc/vioc_vnic.h:77:
+#define RXS_DESC_SIZE  sizeof (struct rxc_pktStatusBlock_w)

CHECK:CAMELCASE: Avoid CamelCase: <rxc_pktStatusBlock_w>
#118: FILE: drivers/net/vioc/vioc_vnic.h:77:
+#define RXS_DESC_SIZE  sizeof (struct rxc_pktStatusBlock_w)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#118: FILE: drivers/net/vioc/vioc_vnic.h:77:
+#define RXS_DESC_SIZE  sizeof (struct rxc_pktStatusBlock_w)

CHECK:SPACING: No space is necessary after a cast
#126: FILE: drivers/net/vioc/vioc_vnic.h:85:
+#define VIOC_NONE_TO_HW			(u32) -1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#126: FILE: drivers/net/vioc/vioc_vnic.h:85:
+#define VIOC_NONE_TO_HW			(u32) -1

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#129: FILE: drivers/net/vioc/vioc_vnic.h:88:
+/*
+ * Status of the Rx operation as reflected in Rx Completion Descriptor

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rxcd' - possible side-effects?
#131: FILE: drivers/net/vioc/vioc_vnic.h:90:
+#define GET_VNIC_RXC_STATUS(rxcd)      (\
+       GET_VNIC_RXC_BADCRC(rxcd) |\
+       GET_VNIC_RXC_BADLENGTH(rxcd) |\
+       GET_VNIC_RXC_BADSMPARITY(rxcd) |\
+       GET_VNIC_RXC_PKTABORT(rxcd)\
+       )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/net/vioc/vioc_vnic.h:91:
+       GET_VNIC_RXC_BADCRC(rxcd) |\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: drivers/net/vioc/vioc_vnic.h:92:
+       GET_VNIC_RXC_BADLENGTH(rxcd) |\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: drivers/net/vioc/vioc_vnic.h:93:
+       GET_VNIC_RXC_BADSMPARITY(rxcd) |\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: drivers/net/vioc/vioc_vnic.h:94:
+       GET_VNIC_RXC_PKTABORT(rxcd)\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: drivers/net/vioc/vioc_vnic.h:95:
+       )$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: drivers/net/vioc/vioc_vnic.h:99:
+               VNIC_RXC_ISBADLENGTH_W | \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: drivers/net/vioc/vioc_vnic.h:99:
+               VNIC_RXC_ISBADLENGTH_W | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: drivers/net/vioc/vioc_vnic.h:100:
+               VNIC_RXC_ISBADCRC_W | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/net/vioc/vioc_vnic.h:100:
+               VNIC_RXC_ISBADCRC_W | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: drivers/net/vioc/vioc_vnic.h:101:
+               VNIC_RXC_ISBADSMPARITY_W | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/net/vioc/vioc_vnic.h:101:
+               VNIC_RXC_ISBADSMPARITY_W | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: drivers/net/vioc/vioc_vnic.h:102:
+               VNIC_RXC_ISPKTABORT_W \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: drivers/net/vioc/vioc_vnic.h:102:
+               VNIC_RXC_ISPKTABORT_W \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: drivers/net/vioc/vioc_vnic.h:103:
+       )$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#146: FILE: drivers/net/vioc/vioc_vnic.h:105:
+#define VIOC_IRQ_PARAM_VIOC_ID(param)  \
+       (int) (((u64) param >> 28) & 0xf)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#146: FILE: drivers/net/vioc/vioc_vnic.h:105:
+#define VIOC_IRQ_PARAM_VIOC_ID(param)  \
+       (int) (((u64) param >> 28) & 0xf)

CHECK:SPACING: No space is necessary after a cast
#147: FILE: drivers/net/vioc/vioc_vnic.h:106:
+       (int) (((u64) param >> 28) & 0xf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: drivers/net/vioc/vioc_vnic.h:106:
+       (int) (((u64) param >> 28) & 0xf)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#148: FILE: drivers/net/vioc/vioc_vnic.h:107:
+#define VIOC_IRQ_PARAM_INTR_ID(param)  \
+       (int) ((u64) param & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#148: FILE: drivers/net/vioc/vioc_vnic.h:107:
+#define VIOC_IRQ_PARAM_INTR_ID(param)  \
+       (int) ((u64) param & 0xffff)

CHECK:SPACING: No space is necessary after a cast
#149: FILE: drivers/net/vioc/vioc_vnic.h:108:
+       (int) ((u64) param & 0xffff)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/net/vioc/vioc_vnic.h:108:
+       (int) ((u64) param & 0xffff)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#150: FILE: drivers/net/vioc/vioc_vnic.h:109:
+#define VIOC_IRQ_PARAM_PARAM_ID(param) \
+       (int) (((u64) param >> 16) & 0xff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#150: FILE: drivers/net/vioc/vioc_vnic.h:109:
+#define VIOC_IRQ_PARAM_PARAM_ID(param) \
+       (int) (((u64) param >> 16) & 0xff)

CHECK:SPACING: No space is necessary after a cast
#151: FILE: drivers/net/vioc/vioc_vnic.h:110:
+       (int) (((u64) param >> 16) & 0xff)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/net/vioc/vioc_vnic.h:110:
+       (int) (((u64) param >> 16) & 0xff)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vioc' may be better as '(vioc)' to avoid precedence issues
#153: FILE: drivers/net/vioc/vioc_vnic.h:112:
+#define VIOC_IRQ_PARAM_SET(vioc, intr, param) \
+               ((((u64) vioc & 0xf) << 28) | \
+               (((u64) param & 0xff) << 16) | \
+               ((u64) intr & 0xffff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'intr' may be better as '(intr)' to avoid precedence issues
#153: FILE: drivers/net/vioc/vioc_vnic.h:112:
+#define VIOC_IRQ_PARAM_SET(vioc, intr, param) \
+               ((((u64) vioc & 0xf) << 28) | \
+               (((u64) param & 0xff) << 16) | \
+               ((u64) intr & 0xffff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#153: FILE: drivers/net/vioc/vioc_vnic.h:112:
+#define VIOC_IRQ_PARAM_SET(vioc, intr, param) \
+               ((((u64) vioc & 0xf) << 28) | \
+               (((u64) param & 0xff) << 16) | \
+               ((u64) intr & 0xffff))

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/net/vioc/vioc_vnic.h:113:
+               ((((u64) vioc & 0xf) << 28) | \$

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/net/vioc/vioc_vnic.h:113:
+               ((((u64) vioc & 0xf) << 28) | \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/net/vioc/vioc_vnic.h:113:
+               ((((u64) vioc & 0xf) << 28) | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/net/vioc/vioc_vnic.h:114:
+               (((u64) param & 0xff) << 16) | \$

CHECK:SPACING: No space is necessary after a cast
#155: FILE: drivers/net/vioc/vioc_vnic.h:114:
+               (((u64) param & 0xff) << 16) | \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/net/vioc/vioc_vnic.h:114:
+               (((u64) param & 0xff) << 16) | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: drivers/net/vioc/vioc_vnic.h:115:
+               ((u64) intr & 0xffff))$

CHECK:SPACING: No space is necessary after a cast
#156: FILE: drivers/net/vioc/vioc_vnic.h:115:
+               ((u64) intr & 0xffff))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/net/vioc/vioc_vnic.h:115:
+               ((u64) intr & 0xffff))$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#158: FILE: drivers/net/vioc/vioc_vnic.h:117:
+/*
+ * Return status codes

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#177: FILE: drivers/net/vioc/vioc_vnic.h:136:
+/*
+ * From the HW statnd point, every VNIC has 4 RxQ - receive queues.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: drivers/net/vioc/vioc_vnic.h:138:
+ * and RxC queue (a ring with descriptors that reflect the status of the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#180: FILE: drivers/net/vioc/vioc_vnic.h:138:
receive.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: drivers/net/vioc/vioc_vnic.h:139:
+ * I.e. when VIOC receives the packet on any of the 4 RxQ, it would use the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: drivers/net/vioc/vioc_vnic.h:140:
+ * to get buffer for the packet (RxDQ) and where to post the result of the $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#222: FILE: drivers/net/vioc/vioc_vnic.h:178:
+/*
+ * Wrapper around a pointer to a socket buffer

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#225: FILE: drivers/net/vioc/vioc_vnic.h:181:
+	volatile struct sk_buff *skb;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#226: FILE: drivers/net/vioc/vioc_vnic.h:182:
+	volatile dma_addr_t dma;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#227: FILE: drivers/net/vioc/vioc_vnic.h:183:
+	volatile u32 length;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#228: FILE: drivers/net/vioc/vioc_vnic.h:184:
+	volatile u32 special;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#229: FILE: drivers/net/vioc/vioc_vnic.h:185:
+	volatile unsigned long time_stamp;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#236: FILE: drivers/net/vioc/vioc_vnic.h:192:
+	volatile u8 enabled;	/* if 0, Rx resource are not available */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#237: FILE: drivers/net/vioc/vioc_vnic.h:193:
+	volatile u8 stopped;	/* if 1, NAPI has stopped servicing set */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#247: FILE: drivers/net/vioc/vioc_vnic.h:203:
+	spinlock_t lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#276: FILE: drivers/net/vioc/vioc_vnic.h:232:
+	volatile u32 fence;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#278: FILE: drivers/net/vioc/vioc_vnic.h:234:
+	volatile u32 skip_fence_run;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#279: FILE: drivers/net/vioc/vioc_vnic.h:235:
+	volatile u32 run_to_end;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#280: FILE: drivers/net/vioc/vioc_vnic.h:236:
+	volatile u32 to_hw;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#281: FILE: drivers/net/vioc/vioc_vnic.h:237:
+	volatile u32 starvations;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#295: FILE: drivers/net/vioc/vioc_vnic.h:251:
+	/*
+	 * Shadow of the TxD Control Register, keep it here, so we do

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#300: FILE: drivers/net/vioc/vioc_vnic.h:256:
+	/*
+	 * Address of the TxD Control Register when we ring the

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#305: FILE: drivers/net/vioc/vioc_vnic.h:261:
+	/*
+	 * pointer to the Tx Buffer Descriptor queue memory

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#316: FILE: drivers/net/vioc/vioc_vnic.h:272:
+	volatile u32 next_to_use;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#318: FILE: drivers/net/vioc/vioc_vnic.h:274:
+	volatile u32 next_to_clean;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#320: FILE: drivers/net/vioc/vioc_vnic.h:276:
+	volatile u32 frags;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#322: FILE: drivers/net/vioc/vioc_vnic.h:278:
+	volatile u32 empty;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#333: FILE: drivers/net/vioc/vioc_vnic.h:289:
+typedef enum { RX_WDOG_DISABLED, RX_WDOG_EXPECT_PKT,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: drivers/net/vioc/vioc_vnic.h:314:
+       void __iomem *virt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: drivers/net/vioc/vioc_vnic.h:315:
+       unsigned long long phy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: drivers/net/vioc/vioc_vnic.h:316:
+       unsigned long len;$

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#377: FILE: drivers/net/vioc/vioc_vnic.h:333:
+	struct vioc_ba ba;	/* VIOC PCI Dev Base Address: virtual and phy */
 	               ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#382: FILE: drivers/net/vioc/vioc_vnic.h:338:
+	/*
+	 * An array of pointers to net_device structures for

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#387: FILE: drivers/net/vioc/vioc_vnic.h:343:
+	/*
+	 * An array describing all Rx Completion Descriptor Queues in VIOC

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#392: FILE: drivers/net/vioc/vioc_vnic.h:348:
+	/*
+	 * An array describing all Rx Descriptor Queues in VIOC

WARNING:TYPO_SPELLING: 'Round-robbin' may be misspelled - perhaps 'Round-robin'?
#401: FILE: drivers/net/vioc/vioc_vnic.h:357:
+	/* * Round-robbin over Rx Completion queues */
 	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Round-robbin' may be misspelled - perhaps 'Round-robin'?
#403: FILE: drivers/net/vioc/vioc_vnic.h:359:
+	/* Round-robbin over RxDQs, when checking them out */
 	   ^^^^^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#420: FILE: drivers/net/vioc/vioc_vnic.h:376:
+#define VIOC_BMC_INTR0 (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#421: FILE: drivers/net/vioc/vioc_vnic.h:377:
+#define VIOC_BMC_INTR1 (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#422: FILE: drivers/net/vioc/vioc_vnic.h:378:
+#define VIOC_BMC_INTR2 (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#423: FILE: drivers/net/vioc/vioc_vnic.h:379:
+#define VIOC_BMC_INTR3 (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#424: FILE: drivers/net/vioc/vioc_vnic.h:380:
+#define VIOC_BMC_INTR4 (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#425: FILE: drivers/net/vioc/vioc_vnic.h:381:
+#define VIOC_BMC_INTR5 (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#426: FILE: drivers/net/vioc/vioc_vnic.h:382:
+#define VIOC_BMC_INTR6 (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#427: FILE: drivers/net/vioc/vioc_vnic.h:383:
+#define VIOC_BMC_INTR7 (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#428: FILE: drivers/net/vioc/vioc_vnic.h:384:
+#define VIOC_BMC_INTR8 (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#429: FILE: drivers/net/vioc/vioc_vnic.h:385:
+#define VIOC_BMC_INTR9 (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#430: FILE: drivers/net/vioc/vioc_vnic.h:386:
+#define VIOC_BMC_INTR10        (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#431: FILE: drivers/net/vioc/vioc_vnic.h:387:
+#define VIOC_BMC_INTR11        (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#432: FILE: drivers/net/vioc/vioc_vnic.h:388:
+#define VIOC_BMC_INTR12        (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#433: FILE: drivers/net/vioc/vioc_vnic.h:389:
+#define VIOC_BMC_INTR13        (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#434: FILE: drivers/net/vioc/vioc_vnic.h:390:
+#define VIOC_BMC_INTR14        (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#435: FILE: drivers/net/vioc/vioc_vnic.h:391:
+#define VIOC_BMC_INTR15        (1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#436: FILE: drivers/net/vioc/vioc_vnic.h:392:
+#define VIOC_BMC_INTR16        (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#437: FILE: drivers/net/vioc/vioc_vnic.h:393:
+#define VIOC_BMC_INTR17        (1 << 17)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#439: FILE: drivers/net/vioc/vioc_vnic.h:395:
+#define VNIC_NEXT_IDX(i, count) ((count == 0) ? 0: (((i) + 1) % (count)))
                                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#439: FILE: drivers/net/vioc/vioc_vnic.h:395:
+#define VNIC_NEXT_IDX(i, count) ((count == 0) ? 0: (((i) + 1) % (count)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'count' may be better as '(count)' to avoid precedence issues
#439: FILE: drivers/net/vioc/vioc_vnic.h:395:
+#define VNIC_NEXT_IDX(i, count) ((count == 0) ? 0: (((i) + 1) % (count)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: drivers/net/vioc/vioc_vnic.h:396:
+#define VNIC_PREV_IDX(i, count) ((count == 0) ? 0: ((((i) == 0) ? ((count) - $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#440: FILE: drivers/net/vioc/vioc_vnic.h:396:
+#define VNIC_PREV_IDX(i, count) ((count == 0) ? 0: ((((i) == 0) ? ((count) - 
                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#440: FILE: drivers/net/vioc/vioc_vnic.h:396:
+#define VNIC_PREV_IDX(i, count) ((count == 0) ? 0: ((((i) == 0) ? ((count) - 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#440: FILE: drivers/net/vioc/vioc_vnic.h:396:
+#define VNIC_PREV_IDX(i, count) ((count == 0) ? 0: ((((i) == 0) ? ((count) - 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'count' may be better as '(count)' to avoid precedence issues
#440: FILE: drivers/net/vioc/vioc_vnic.h:396:
+#define VNIC_PREV_IDX(i, count) ((count == 0) ? 0: ((((i) == 0) ? ((count) - 

CHECK:CAMELCASE: Avoid CamelCase: <rxc_pktBufDesc_Phys_w>
#452: FILE: drivers/net/vioc/vioc_vnic.h:407:
+#define RXC_PTR(R, i)          GET_DESC_PTR(R, i, rxc_pktBufDesc_Phys_w)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: drivers/net/vioc/vioc_vnic.h:430:
+extern int vioc_vnic_init(struct net_device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#475: FILE: drivers/net/vioc/vioc_vnic.h:430:
+extern int vioc_vnic_init(struct net_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: drivers/net/vioc/vioc_vnic.h:431:
+extern void vioc_tx_timer(unsigned long data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: drivers/net/vioc/vioc_vnic.h:434:
+extern struct vioc_device *vioc_viocdev(u32 vioc_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#480: FILE: drivers/net/vioc/vioc_vnic.h:435:
+extern struct net_device *vioc_alloc_vnicdev(struct vioc_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vioc_device *' should also have an identifier name
#480: FILE: drivers/net/vioc/vioc_vnic.h:435:
+extern struct net_device *vioc_alloc_vnicdev(struct vioc_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#480: FILE: drivers/net/vioc/vioc_vnic.h:435:
+extern struct net_device *vioc_alloc_vnicdev(struct vioc_device *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#483: FILE: drivers/net/vioc/vioc_vnic.h:438:
+extern int vioc_irq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#484: FILE: drivers/net/vioc/vioc_vnic.h:439:
+extern void vioc_irq_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#485: FILE: drivers/net/vioc/vioc_vnic.h:440:
+extern void vioc_free_irqs(u32 viocdev_idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#486: FILE: drivers/net/vioc/vioc_vnic.h:441:
+extern int vioc_request_irqs(u32 viocdev_idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#488: FILE: drivers/net/vioc/vioc_vnic.h:443:
+extern int vioc_set_intr_func_param(int viocdev_idx, int intr_idx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#491: FILE: drivers/net/vioc/vioc_vnic.h:446:
+extern void vioc_rxc_interrupt(void *input_param);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#492: FILE: drivers/net/vioc/vioc_vnic.h:447:
+extern void vioc_tx_interrupt(void *input_param);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#493: FILE: drivers/net/vioc/vioc_vnic.h:448:
+extern void vioc_bmc_interrupt(void *input_param);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#496: FILE: drivers/net/vioc/vioc_vnic.h:451:
+extern int vioc_rx_poll(struct net_device *dev, int *budget);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#497: FILE: drivers/net/vioc/vioc_vnic.h:452:
+extern int vioc_next_fence_run(struct rxdq *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxdq *' should also have an identifier name
#497: FILE: drivers/net/vioc/vioc_vnic.h:452:
+extern int vioc_next_fence_run(struct rxdq *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: drivers/net/vioc/vioc_vnic.h:455:
+extern int spp_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#501: FILE: drivers/net/vioc/vioc_vnic.h:456:
+extern void spp_terminate(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#502: FILE: drivers/net/vioc/vioc_vnic.h:457:
+extern void spp_msg_from_sim(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#502: FILE: drivers/net/vioc/vioc_vnic.h:457:
+extern void spp_msg_from_sim(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: drivers/net/vioc/vioc_vnic.h:460:
+extern int spp_vnic_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: drivers/net/vioc/vioc_vnic.h:461:
+extern void spp_vnic_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: drivers/net/vioc/vioc_vnic.h:464:
+extern void vioc_vnic_prov(int, u32, u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#509: FILE: drivers/net/vioc/vioc_vnic.h:464:
+extern void vioc_vnic_prov(int, u32, u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#509: FILE: drivers/net/vioc/vioc_vnic.h:464:
+extern void vioc_vnic_prov(int, u32, u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#509: FILE: drivers/net/vioc/vioc_vnic.h:464:
+extern void vioc_vnic_prov(int, u32, u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#509: FILE: drivers/net/vioc/vioc_vnic.h:464:
+extern void vioc_vnic_prov(int, u32, u32, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#510: FILE: drivers/net/vioc/vioc_vnic.h:465:
+extern struct vnic_prov_def **vioc_prov_get(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#510: FILE: drivers/net/vioc/vioc_vnic.h:465:
+extern struct vnic_prov_def **vioc_prov_get(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#511: FILE: drivers/net/vioc/vioc_vnic.h:466:
+extern void vioc_hb_to_bmc(int vioc_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: drivers/net/vioc/vioc_vnic.h:467:
+extern int vioc_handle_reset_request(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#512: FILE: drivers/net/vioc/vioc_vnic.h:467:
+extern int vioc_handle_reset_request(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: drivers/net/vioc/vioc_vnic.h:468:
+extern void vioc_os_reset_notifier_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#514: FILE: drivers/net/vioc/vioc_vnic.h:469:
+extern void vioc_os_reset_notifier_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: drivers/net/vioc/vioc_vnic.h:471:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: drivers/net/vioc/vioc_vnic.h:488:
+#define POLL_WEIGHT ^I^I32$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#551: FILE: drivers/net/vioc/vioc_driver.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#566: FILE: drivers/net/vioc/vioc_driver.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#567: FILE: drivers/net/vioc/vioc_driver.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#599: FILE: drivers/net/vioc/vioc_driver.c:49:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#601: FILE: drivers/net/vioc/vioc_driver.c:51:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#612: FILE: drivers/net/vioc/vioc_driver.c:62:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#620: FILE: drivers/net/vioc/vioc_driver.c:70:
+/*
+ * Standard parameters for ring provisioning.  Single TxQ per VNIC.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: drivers/net/vioc/vioc_driver.c:89:
+#define RXC_SIZE^I^I^I$

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#643: FILE: drivers/net/vioc/vioc_driver.c:92:
+static struct pci_device_id vioc_pci_tbl[] __devinitdata = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#652: FILE: drivers/net/vioc/vioc_driver.c:101:
+static unsigned vioc_idx = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#652: FILE: drivers/net/vioc/vioc_driver.c:101:
+static unsigned vioc_idx = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*viocdev)...) over kmalloc(sizeof(struct vioc_device)...)
#663: FILE: drivers/net/vioc/vioc_driver.c:112:
+	viocdev = kmalloc(sizeof(struct vioc_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#680: FILE: drivers/net/vioc/vioc_driver.c:129:
+	for (k = 0; k < VIOC_MAX_VNICS; k++) {
+		viocdev->vnic_netdev[k] = NULL;	/* spp */
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#690: FILE: drivers/net/vioc/vioc_driver.c:139:
+/*
+ * Remove all Rx descriptors from the queue.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rxdq->vbuf"
#699: FILE: drivers/net/vioc/vioc_driver.c:148:
+	if (rxdq->vbuf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#704: FILE: drivers/net/vioc/vioc_driver.c:153:
+		struct rx_pktBufDesc_Phys_w *rxd;
+		if (rxdq->vbuf[j].skb) {

CHECK:SPACING: No space is necessary after a cast
#710: FILE: drivers/net/vioc/vioc_driver.c:159:
+			rxdq->vbuf[j].dma = (dma_addr_t) NULL;

WARNING:MEMORY_BARRIER: memory barrier without comment
#713: FILE: drivers/net/vioc/vioc_driver.c:162:
+		wmb();

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#719: FILE: drivers/net/vioc/vioc_driver.c:168:
+/*
+ * Refill an empty Rx queue with Rx with Rx buffers

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#735: FILE: drivers/net/vioc/vioc_driver.c:184:
+	BUG_ON(ret != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#742: FILE: drivers/net/vioc/vioc_driver.c:191:
+		BUG_ON(viocdev_idx >= vioc_idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#746: FILE: drivers/net/vioc/vioc_driver.c:195:
+	BUG_ON(vioc_devices[viocdev_idx] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vioc_devices[viocdev_idx]"
#746: FILE: drivers/net/vioc/vioc_driver.c:195:
+	BUG_ON(vioc_devices[viocdev_idx] == NULL);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#752: FILE: drivers/net/vioc/vioc_driver.c:201:
+{
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#759: FILE: drivers/net/vioc/vioc_driver.c:208:
+	/*
+	 * Send Heartbeat message to BMC

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#764: FILE: drivers/net/vioc/vioc_driver.c:213:
+	/*
+	 * Reset the timer

WARNING:RETURN_VOID: void function return statements are not generally useful
#769: FILE: drivers/net/vioc/vioc_driver.c:218:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: drivers/net/vioc/vioc_driver.c:220:
+static int extract_vnic_prov(struct vioc_device *viocdev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: drivers/net/vioc/vioc_driver.c:221:
+static int extract_vnic_prov(struct vioc_device *viocdev, 
+									struct vnic_device *vnicdev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vr"
#778: FILE: drivers/net/vioc/vioc_driver.c:227:
+	if (vr == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: drivers/net/vioc/vioc_driver.c:229:
+		dev_err(&viocdev->pdev->dev, "vioc %d: vnic %d No provisioning set\n",
+		       viocdev->viocdev_idx, vnicdev->vnic_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: drivers/net/vioc/vioc_driver.c:235:
+		dev_err(&viocdev->pdev->dev, "vioc %d: vnic %d Tx ring not provisioned\n",
+		       viocdev->viocdev_idx, vnicdev->vnic_id);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!viocdev->rxc_p[vr->rxc_id]"
#790: FILE: drivers/net/vioc/vioc_driver.c:239:
+	if (viocdev->rxc_p[vr->rxc_id] == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: drivers/net/vioc/vioc_driver.c:241:
+		dev_err(&viocdev->pdev->dev,
+		       "vioc %d: vnic %d RxC ring %d  not provisioned\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: drivers/net/vioc/vioc_driver.c:248:
+		dev_err(&viocdev->pdev->dev, "vioc %d: vnic %d IRQ %d INVALID (max %d)\n",
+		       viocdev->viocdev_idx, vnicdev->vnic_id,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!viocdev->rxd_p[ring->id]"
#814: FILE: drivers/net/vioc/vioc_driver.c:263:
+		if (viocdev->rxd_p[ring->id] == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/net/vioc/vioc_driver.c:265:
+			dev_err(&viocdev->pdev->dev,
+			       "vioc %d: vnic %d RxD ring %d  not provisioned\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#825: FILE: drivers/net/vioc/vioc_driver.c:274:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: drivers/net/vioc/vioc_driver.c:287:
+struct net_device *vioc_alloc_vnicdev(struct vioc_device *viocdev, int $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#845: FILE: drivers/net/vioc/vioc_driver.c:293:
+	if (!netdev) {
+		return NULL;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: drivers/net/vioc/vioc_driver.c:323:
+		struct rxc *rxc = viocdev->rxc_p[i];
+		if (rxc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rxc"
#875: FILE: drivers/net/vioc/vioc_driver.c:323:
+		if (rxc == NULL)

WARNING:TYPO_SPELLING: 'didn;t' may be misspelled - perhaps 'didn't'?
#892: FILE: drivers/net/vioc/vioc_driver.c:340:
+				/* Looks like NAPI didn;t get to run.
 				                   ^^^^^^

CHECK:SPACING: No space is necessary after a cast
#904: FILE: drivers/net/vioc/vioc_driver.c:352:
+			rxc->dma = (dma_addr_t) NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: drivers/net/vioc/vioc_driver.c:358:
+		struct rxdq *rxdq = viocdev->rxd_p[i];
+		if (rxdq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rxdq"
#910: FILE: drivers/net/vioc/vioc_driver.c:358:
+		if (rxdq == NULL)

CHECK:SPACING: No space is necessary after a cast
#928: FILE: drivers/net/vioc/vioc_driver.c:376:
+			rxdq->dma = (dma_addr_t) NULL;

CHECK:SPACING: No space is necessary after a cast
#939: FILE: drivers/net/vioc/vioc_driver.c:387:
+		viocdev->rxcstat.dma = (dma_addr_t) NULL;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#942: FILE: drivers/net/vioc/vioc_driver.c:390:
+
+}

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#945: FILE: drivers/net/vioc/vioc_driver.c:393:
+/*
+ * Initialize rxsets - RxS, RxCs and RxDs and push to VIOC.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#956: FILE: drivers/net/vioc/vioc_driver.c:404:
+	dev_err(&viocdev->pdev->dev, "vioc%d: ENTER %s\n", viocidx, __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vr"
#978: FILE: drivers/net/vioc/vioc_driver.c:426:
+		if (vr == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: drivers/net/vioc/vioc_driver.c:428:
+			dev_err(&viocdev->pdev->dev,
+			       "vioc %d: vnic %d No provisioning set\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: drivers/net/vioc/vioc_driver.c:435:
+			dev_err(&viocdev->pdev->dev, "vioc%d: INVALID RxC %d provisioned\n",
+			       viocidx, vr->rxc_id);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rxc"
#991: FILE: drivers/net/vioc/vioc_driver.c:439:
+		if (rxc == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: drivers/net/vioc/vioc_driver.c:455:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Can't allocate RxC ring %d for %d entries\n",

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1015: FILE: drivers/net/vioc/vioc_driver.c:463:
+			    (&viocdev->ba)->virt + GETRELADDR(VIOC_IHCU, 0,
 			               ^^

CHECK:SPACING: space preferred before that '+' (ctx:ExE)
#1017: FILE: drivers/net/vioc/vioc_driver.c:465:
+							       +
 							       ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rxc->interrupt_id'
#1019: FILE: drivers/net/vioc/vioc_driver.c:467:
+							       (rxc->
+								interrupt_id <<

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1023: FILE: drivers/net/vioc/vioc_driver.c:471:
+			    (&viocdev->ba)->virt + GETRELADDR(VIOC_IHCU, 0,
 			               ^^

CHECK:SPACING: space preferred before that '+' (ctx:ExE)
#1025: FILE: drivers/net/vioc/vioc_driver.c:473:
+							       +
 							       ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rxc->interrupt_id'
#1027: FILE: drivers/net/vioc/vioc_driver.c:475:
+							       (rxc->
+								interrupt_id <<

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1030: FILE: drivers/net/vioc/vioc_driver.c:478:
+			    (&viocdev->ba)->virt + GETRELADDR(VIOC_IHCU, 0,
 			               ^^

CHECK:SPACING: space preferred before that '+' (ctx:ExE)
#1032: FILE: drivers/net/vioc/vioc_driver.c:480:
+							       +
 							       ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rxc->interrupt_id'
#1034: FILE: drivers/net/vioc/vioc_driver.c:482:
+							       (rxc->
+								interrupt_id <<

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: drivers/net/vioc/vioc_driver.c:490:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Could not set PARAM for INTR ID %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1051: FILE: drivers/net/vioc/vioc_driver.c:499:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Could not set RxC %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: drivers/net/vioc/vioc_driver.c:526:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: BAD Provisioning request for RXD %d\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rxdq"
#1084: FILE: drivers/net/vioc/vioc_driver.c:532:
+			if (rxdq != NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1101: FILE: drivers/net/vioc/vioc_driver.c:549:
+			if (!rxdq->vbuf) {
+				dev_err(&viocdev->pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: drivers/net/vioc/vioc_driver.c:550:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Can't allocate RxD vbuf (%d entries)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: drivers/net/vioc/vioc_driver.c:563:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Can't allocate RxD ring (%d entries)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: drivers/net/vioc/vioc_driver.c:575:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Could not allocate dmap\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: drivers/net/vioc/vioc_driver.c:584:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Could not fill rxdq%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1146: FILE: drivers/net/vioc/vioc_driver.c:594:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Could not set rxdq%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1154: FILE: drivers/net/vioc/vioc_driver.c:602:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: Could not enable rxdq%d\n",

WARNING:INDENTED_LABEL: labels should not be indented
#1163: FILE: drivers/net/vioc/vioc_driver.c:611:
+      error:

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1198: FILE: drivers/net/vioc/vioc_driver.c:646:
+	if (viocdev->num_irqs > 4) {
[...]
+	} else {
[...]

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1207: FILE: drivers/net/vioc/vioc_driver.c:655:
+	iounmap(viocdev->ba.virt);
 	                 ^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1219: FILE: drivers/net/vioc/vioc_driver.c:667:
+/*
+ * vioc_probe - Device Initialization Routine

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1226: FILE: drivers/net/vioc/vioc_driver.c:674:
+static int __devinit vioc_probe(struct pci_dev *pdev, const

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1238: FILE: drivers/net/vioc/vioc_driver.c:686:
+		BUG_ON(viocdev != NULL);	/* should not happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "viocdev"
#1238: FILE: drivers/net/vioc/vioc_driver.c:686:
+		BUG_ON(viocdev != NULL);	/* should not happen */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1245: FILE: drivers/net/vioc/vioc_driver.c:693:
+			BUG_ON(viocdev == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!viocdev"
#1245: FILE: drivers/net/vioc/vioc_driver.c:693:
+			BUG_ON(viocdev == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1249: FILE: drivers/net/vioc/vioc_driver.c:697:
+			dev_err(&pdev->dev,
+			       "vioc_id %d > maximum supported, aborting.\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1257: FILE: drivers/net/vioc/vioc_driver.c:705:
+	if ((ret = pci_enable_device(pdev))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: drivers/net/vioc/vioc_driver.c:707:
+		dev_err(&pdev->dev, "vioc%d: Cannot enable PCI device\n",
+		       cur_vioc_idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1265: FILE: drivers/net/vioc/vioc_driver.c:713:
+		dev_err(&pdev->dev, "vioc%d: Cannot find PCI device base address\n",
+		       cur_vioc_idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1270: FILE: drivers/net/vioc/vioc_driver.c:718:
+^I/* Initialize interrupts: get number if Rx IRQs, 2 or 16 are valid returns $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1272: FILE: drivers/net/vioc/vioc_driver.c:719:
+	/* Initialize interrupts: get number if Rx IRQs, 2 or 16 are valid returns 
+	viocdev->num_rx_irqs = vioc_request_irqs(cur_vioc_idx);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1282: FILE: drivers/net/vioc/vioc_driver.c:729:
+	if ((ret = pci_set_dma_mask(pdev, DMA_64BIT_MASK))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1283: FILE: drivers/net/vioc/vioc_driver.c:730:
+		if ((ret = pci_set_dma_mask(pdev, DMA_32BIT_MASK))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: drivers/net/vioc/vioc_driver.c:732:
+			dev_err(&pdev->dev, "vioc%d: No usable DMA configuration\n",
+			       cur_vioc_idx);

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1295: FILE: drivers/net/vioc/vioc_driver.c:742:
+	viocdev->ba.virt = ioremap(mmio_start, mmio_len);
 	         ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1296: FILE: drivers/net/vioc/vioc_driver.c:743:
+	viocdev->ba.phy = mmio_start;
 	         ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1297: FILE: drivers/net/vioc/vioc_driver.c:744:
+	viocdev->ba.len = mmio_len;
 	         ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1306: FILE: drivers/net/vioc/vioc_driver.c:753:
+		dev_err(&pdev->dev, "VIOC version %x not supported, aborting\n",
+		       viocdev->vioc_bits_version);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1312: FILE: drivers/net/vioc/vioc_driver.c:759:
+	dev_info(&pdev->dev, "vioc%d: Detected VIOC version %x.%x\n",
+	       cur_vioc_idx,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1318: FILE: drivers/net/vioc/vioc_driver.c:765:
+	if ((ret = vioc_alloc_resources(viocdev, cur_vioc_idx))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1320: FILE: drivers/net/vioc/vioc_driver.c:767:
+		dev_err(&pdev->dev, "vioc%d: Could not allocate resources\n",
+		       cur_vioc_idx);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1325: FILE: drivers/net/vioc/vioc_driver.c:772:
+	/*
+	 * Initialize heartbeat (watchdog) timer:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1329: FILE: drivers/net/vioc/vioc_driver.c:776:
+		 * partition */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1342: FILE: drivers/net/vioc/vioc_driver.c:789:
+	/*
+	 * Initialize tx_timer (tx watchdog) timer:

WARNING:INDENTED_LABEL: labels should not be indented
#1362: FILE: drivers/net/vioc/vioc_driver.c:809:
+      vioc_probe_err:

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1368: FILE: drivers/net/vioc/vioc_driver.c:815:
+/*
+ * Set up "version" as a driver attribute.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1376: FILE: drivers/net/vioc/vioc_driver.c:823:
+static DRIVER_ATTR(version, S_IRUGO, show_version, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#1397: FILE: drivers/net/vioc/vioc_driver.c:844:
+	if (ret) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1398: FILE: drivers/net/vioc/vioc_driver.c:845:
+		printk(KERN_ERR "%s: pci_module_init() -> %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1398: FILE: drivers/net/vioc/vioc_driver.c:845:
+		printk(KERN_ERR "%s: pci_module_init() -> %d\n", __FUNCTION__,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1402: FILE: drivers/net/vioc/vioc_driver.c:849:
+		return ret;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1402: FILE: drivers/net/vioc/vioc_driver.c:849:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 118 warnings, 122 checks, 1377 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
