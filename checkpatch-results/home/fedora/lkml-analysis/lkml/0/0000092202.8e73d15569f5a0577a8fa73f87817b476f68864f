WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
I've now prototyped a module to do local caching of network filesystems using

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#53: 
     Note that this is with dir_index and user_xattrs turned on on the

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#200: FILE: fs/Kconfig:543:
+config CACHEFILES
+	tristate "Filesystem caching on files"
+	depends on FSCACHE
+	help
+	  This permits use of a mounted filesystem as a cache for other
+	  filesystems - primarily networking filesystems - thus allowing fast
+	  local disk to enhance the speed of slower devices.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#224: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: fs/cachefiles/cf-interface.c:1:
+/* cf-interface.c: CacheFiles to FS-Cache interface

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#315: FILE: fs/cachefiles/cf-interface.c:68:
+	sprintf(key, "%02x/", (unsigned) csum);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#315: FILE: fs/cachefiles/cf-interface.c:68:
+	sprintf(key, "%02x/", (unsigned) csum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: fs/cachefiles/cf-interface.c:92:
+		BUG_ON(len >= max);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#353: FILE: fs/cachefiles/cf-interface.c:106:
+static struct fscache_object *cachefiles_lookup_object(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#360: FILE: fs/cachefiles/cf-interface.c:113:
+	unsigned keylen;

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#458: FILE: fs/cachefiles/cf-interface.c:211:
+ * lock the semaphore on an object object

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#478: FILE: fs/cachefiles/cf-interface.c:231:
+ * unlock the semaphore on an object object

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#493: FILE: fs/cachefiles/cf-interface.c:246:
+ * update the auxilliary data for an object object on disk
               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#493: FILE: fs/cachefiles/cf-interface.c:246:
+ * update the auxilliary data for an object object on disk

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#511: FILE: fs/cachefiles/cf-interface.c:264:
+ * dispose of a reference to an object object

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#573: FILE: fs/cachefiles/cf-interface.c:326:
+	 * written to disc */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#650: FILE: fs/cachefiles/cf-interface.c:403:
+static int cachefiles_read_waiter(wait_queue_t *wait, unsigned mode,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#724: FILE: fs/cachefiles/cf-interface.c:477:
+			cookie->def->mark_pages_cached(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#821: FILE: fs/cachefiles/cf-interface.c:574:
+		 * to the LRU list and start it reading */

WARNING:INDENTED_LABEL: labels should not be indented
#822: FILE: fs/cachefiles/cf-interface.c:575:
+	installed_new_backing_page:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#837: FILE: fs/cachefiles/cf-interface.c:590:
+		 * monitor to transfer the data across */

WARNING:INDENTED_LABEL: labels should not be indented
#838: FILE: fs/cachefiles/cf-interface.c:591:
+	monitor_backing_page:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#872: FILE: fs/cachefiles/cf-interface.c:625:
+		 * ensure that we do get one in such a case */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#884: FILE: fs/cachefiles/cf-interface.c:637:
+		 * three states: read in progress, read failed or read okay */

WARNING:INDENTED_LABEL: labels should not be indented
#885: FILE: fs/cachefiles/cf-interface.c:638:
+	backing_page_already_present:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#897: FILE: fs/cachefiles/cf-interface.c:650:
+		 * page to the pagecache and LRU and copy the data across */

WARNING:INDENTED_LABEL: labels should not be indented
#898: FILE: fs/cachefiles/cf-interface.c:651:
+	backing_page_already_uptodate:

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#899: FILE: fs/cachefiles/cf-interface.c:652:
+		_debug("- uptodate");
 		          ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#979: FILE: fs/cachefiles/cf-interface.c:732:
+					  unsigned *nr_pages,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#991: FILE: fs/cachefiles/cf-interface.c:744:
+	unsigned shift, e3nrpages;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1038: FILE: fs/cachefiles/cf-interface.c:791:
+			 * backing fs */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1043: FILE: fs/cachefiles/cf-interface.c:796:
+		}
+		else if (pagevec_add(&pagevec, page) == 0) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: fs/cachefiles/cf-interface.c:875:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1135: FILE: fs/cachefiles/cf-interface.c:888:
+		ret = generic_file_buffered_write_one_kernel_page(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1199: FILE: fs/cachefiles/cf-interface.c:952:
+#if 0 // set to 1 for deferred writing

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1288: FILE: fs/cachefiles/cf-main.c:1:
+/* cf-main.c: network filesystem caching backend to use cache files on a

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1311: FILE: fs/cachefiles/cf-main.c:24:
+int cachefiles_debug = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1332: FILE: fs/cachefiles/cf-main.c:45:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1366: FILE: fs/cachefiles/cf-main.c:79:
+	struct nameidata nd;
 	                 ^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1369: FILE: fs/cachefiles/cf-main.c:82:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1370: FILE: fs/cachefiles/cf-main.c:83:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1371: FILE: fs/cachefiles/cf-main.c:84:
+	printk("----------------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1372: FILE: fs/cachefiles/cf-main.c:85:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1375: FILE: fs/cachefiles/cf-main.c:88:
+		printk(KERN_ERR "CacheFiles: no cache directory specified\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1380: FILE: fs/cachefiles/cf-main.c:93:
+		printk(KERN_ERR "CacheFiles: empty tag specified\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1395: FILE: fs/cachefiles/cf-main.c:108:
+		printk(KERN_NOTICE

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1414: FILE: fs/cachefiles/cf-main.c:127:
+	memset(&nd, 0, sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1414: FILE: fs/cachefiles/cf-main.c:127:
+	memset(&nd, 0, sizeof(nd));
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1416: FILE: fs/cachefiles/cf-main.c:129:
+	ret = path_lookup(cachefiles_cache.rootdirname, LOOKUP_DIRECTORY, &nd);
 	                                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1420: FILE: fs/cachefiles/cf-main.c:133:
+	cachefiles_cache.mnt = mntget(nd.mnt);
 	                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1421: FILE: fs/cachefiles/cf-main.c:134:
+	fsdef->dentry = dget(nd.dentry);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1422: FILE: fs/cachefiles/cf-main.c:135:
+	path_release(&nd);
 	              ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1454: FILE: fs/cachefiles/cf-main.c:167:
+	printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1467: FILE: fs/cachefiles/cf-main.c:180:
+	printk(KERN_ERR "CacheFiles: failed to register: %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1478: FILE: fs/cachefiles/cf-main.c:191:
+	printk(KERN_INFO

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1494: FILE: fs/cachefiles/cf-main.c:207:
+#if 0

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1495: FILE: fs/cachefiles/cf-main.c:208:
+void __cyg_profile_func_enter (void *this_fn, void *call_site)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1498: FILE: fs/cachefiles/cf-main.c:211:
+void __cyg_profile_func_enter (void *this_fn, void *call_site)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1500: FILE: fs/cachefiles/cf-main.c:213:
+       asm volatile("  movl    %%esp,%%edi     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1500: FILE: fs/cachefiles/cf-main.c:213:
+       asm volatile("  movl    %%esp,%%edi     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1501: FILE: fs/cachefiles/cf-main.c:214:
+                    "  andl    %0,%%edi        \n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1501: FILE: fs/cachefiles/cf-main.c:214:
+                    "  andl    %0,%%edi        \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1501: FILE: fs/cachefiles/cf-main.c:214:
+                    "  andl    %0,%%edi        \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1502: FILE: fs/cachefiles/cf-main.c:215:
+                    "  addl    %1,%%edi        \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1502: FILE: fs/cachefiles/cf-main.c:215:
+                    "  addl    %1,%%edi        \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1502: FILE: fs/cachefiles/cf-main.c:215:
+                    "  addl    %1,%%edi        \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1503: FILE: fs/cachefiles/cf-main.c:216:
+                    "  movl    %%esp,%%ecx     \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1503: FILE: fs/cachefiles/cf-main.c:216:
+                    "  movl    %%esp,%%ecx     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1503: FILE: fs/cachefiles/cf-main.c:216:
+                    "  movl    %%esp,%%ecx     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1504: FILE: fs/cachefiles/cf-main.c:217:
+                    "  subl    %%edi,%%ecx     \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1504: FILE: fs/cachefiles/cf-main.c:217:
+                    "  subl    %%edi,%%ecx     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1504: FILE: fs/cachefiles/cf-main.c:217:
+                    "  subl    %%edi,%%ecx     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1505: FILE: fs/cachefiles/cf-main.c:218:
+                    "  shrl    $2,%%ecx        \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1505: FILE: fs/cachefiles/cf-main.c:218:
+                    "  shrl    $2,%%ecx        \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1505: FILE: fs/cachefiles/cf-main.c:218:
+                    "  shrl    $2,%%ecx        \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1506: FILE: fs/cachefiles/cf-main.c:219:
+                    "  movl    $0xedededed,%%eax     \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1506: FILE: fs/cachefiles/cf-main.c:219:
+                    "  movl    $0xedededed,%%eax     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1506: FILE: fs/cachefiles/cf-main.c:219:
+                    "  movl    $0xedededed,%%eax     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1507: FILE: fs/cachefiles/cf-main.c:220:
+                    "  rep stosl               \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1507: FILE: fs/cachefiles/cf-main.c:220:
+                    "  rep stosl               \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1507: FILE: fs/cachefiles/cf-main.c:220:
+                    "  rep stosl               \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1508: FILE: fs/cachefiles/cf-main.c:221:
+                    :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1508: FILE: fs/cachefiles/cf-main.c:221:
+                    :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1509: FILE: fs/cachefiles/cf-main.c:222:
+                    : "i"(~(THREAD_SIZE-1)), "i"(sizeof(struct thread_info))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1509: FILE: fs/cachefiles/cf-main.c:222:
+                    : "i"(~(THREAD_SIZE-1)), "i"(sizeof(struct thread_info))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1509: FILE: fs/cachefiles/cf-main.c:222:
+                    : "i"(~(THREAD_SIZE-1)), "i"(sizeof(struct thread_info))
                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1510: FILE: fs/cachefiles/cf-main.c:223:
+                    : "eax", "ecx", "edi", "memory", "cc"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1510: FILE: fs/cachefiles/cf-main.c:223:
+                    : "eax", "ecx", "edi", "memory", "cc"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1511: FILE: fs/cachefiles/cf-main.c:224:
+                    );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1511: FILE: fs/cachefiles/cf-main.c:224:
+                    );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1519: FILE: fs/cachefiles/cf-main.c:232:
+       asm volatile("  movl    %%esp,%%edi     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1519: FILE: fs/cachefiles/cf-main.c:232:
+       asm volatile("  movl    %%esp,%%edi     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1520: FILE: fs/cachefiles/cf-main.c:233:
+                    "  andl    %0,%%edi        \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1520: FILE: fs/cachefiles/cf-main.c:233:
+                    "  andl    %0,%%edi        \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1520: FILE: fs/cachefiles/cf-main.c:233:
+                    "  andl    %0,%%edi        \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1521: FILE: fs/cachefiles/cf-main.c:234:
+                    "  addl    %1,%%edi        \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1521: FILE: fs/cachefiles/cf-main.c:234:
+                    "  addl    %1,%%edi        \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1521: FILE: fs/cachefiles/cf-main.c:234:
+                    "  addl    %1,%%edi        \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1522: FILE: fs/cachefiles/cf-main.c:235:
+                    "  movl    %%esp,%%ecx     \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1522: FILE: fs/cachefiles/cf-main.c:235:
+                    "  movl    %%esp,%%ecx     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1522: FILE: fs/cachefiles/cf-main.c:235:
+                    "  movl    %%esp,%%ecx     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1523: FILE: fs/cachefiles/cf-main.c:236:
+                    "  subl    %%edi,%%ecx     \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1523: FILE: fs/cachefiles/cf-main.c:236:
+                    "  subl    %%edi,%%ecx     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1523: FILE: fs/cachefiles/cf-main.c:236:
+                    "  subl    %%edi,%%ecx     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1524: FILE: fs/cachefiles/cf-main.c:237:
+                    "  shrl    $2,%%ecx        \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1524: FILE: fs/cachefiles/cf-main.c:237:
+                    "  shrl    $2,%%ecx        \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1524: FILE: fs/cachefiles/cf-main.c:237:
+                    "  shrl    $2,%%ecx        \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1525: FILE: fs/cachefiles/cf-main.c:238:
+                    "  movl    $0xdadadada,%%eax     \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1525: FILE: fs/cachefiles/cf-main.c:238:
+                    "  movl    $0xdadadada,%%eax     \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1525: FILE: fs/cachefiles/cf-main.c:238:
+                    "  movl    $0xdadadada,%%eax     \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1526: FILE: fs/cachefiles/cf-main.c:239:
+                    "  rep stosl               \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1526: FILE: fs/cachefiles/cf-main.c:239:
+                    "  rep stosl               \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1526: FILE: fs/cachefiles/cf-main.c:239:
+                    "  rep stosl               \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1527: FILE: fs/cachefiles/cf-main.c:240:
+                    :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1527: FILE: fs/cachefiles/cf-main.c:240:
+                    :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1528: FILE: fs/cachefiles/cf-main.c:241:
+                    : "i"(~(THREAD_SIZE-1)), "i"(sizeof(struct thread_info))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1528: FILE: fs/cachefiles/cf-main.c:241:
+                    : "i"(~(THREAD_SIZE-1)), "i"(sizeof(struct thread_info))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1528: FILE: fs/cachefiles/cf-main.c:241:
+                    : "i"(~(THREAD_SIZE-1)), "i"(sizeof(struct thread_info))
                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1529: FILE: fs/cachefiles/cf-main.c:242:
+                    : "eax", "ecx", "edi", "memory", "cc"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1529: FILE: fs/cachefiles/cf-main.c:242:
+                    : "eax", "ecx", "edi", "memory", "cc"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1530: FILE: fs/cachefiles/cf-main.c:243:
+                    );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1530: FILE: fs/cachefiles/cf-main.c:243:
+                    );$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1539: FILE: fs/cachefiles/cf-pathwalk.c:1:
+/* cf-pathwalk.c: CacheFiles pathwalk

CHECK:SPACING: No space is necessary after a cast
#1593: FILE: fs/cachefiles/cf-pathwalk.c:55:
+		name.len = key - (char *) name.name;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1596: FILE: fs/cachefiles/cf-pathwalk.c:58:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1596: FILE: fs/cachefiles/cf-pathwalk.c:58:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1670: FILE: fs/cachefiles/cf-pathwalk.c:132:
+			printk(KERN_ERR

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1677: FILE: fs/cachefiles/cf-pathwalk.c:139:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1677: FILE: fs/cachefiles/cf-pathwalk.c:139:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1694: FILE: fs/cachefiles/cf-pathwalk.c:156:
+		 * file */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1698: FILE: fs/cachefiles/cf-pathwalk.c:160:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1700: FILE: fs/cachefiles/cf-pathwalk.c:162:
+			       "CacheFiles:"
+			       " inode %lu is not a file or directory\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1740: FILE: fs/cachefiles/cf-pathwalk.c:202:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1740: FILE: fs/cachefiles/cf-pathwalk.c:202:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1741: FILE: fs/cachefiles/cf-pathwalk.c:203:
+			BUG(); // TODO: open file in data-class subdir

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1780: FILE: fs/cachefiles/cf-xattr.c:1:
+/* cf-xattr.c: CacheFiles extended attribute management

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1840: FILE: fs/cachefiles/cf-xattr.c:61:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1853: FILE: fs/cachefiles/cf-xattr.c:74:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1874: FILE: fs/cachefiles/cf-xattr.c:95:
+	printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1882: FILE: fs/cachefiles/cf-xattr.c:103:
+	printk(KERN_ERR

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1895: FILE: fs/cachefiles/internal.h:1:
+/* internal.h: general netfs cache on cache files internal defs

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1942: FILE: fs/cachefiles/internal.h:48:
+	uint8_t				type;		/* object type */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1954: FILE: fs/cachefiles/internal.h:60:
+extern int cachefiles_walk_to_object(struct cachefiles_object *parent,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1958: FILE: fs/cachefiles/internal.h:64:
+extern int cachefiles_check_object_type(struct cachefiles_object *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1959: FILE: fs/cachefiles/internal.h:65:
+extern void cachefiles_read_copier_work(void *_object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1960: FILE: fs/cachefiles/internal.h:66:
+extern void cachefiles_write_work(void *_object);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2003: FILE: fs/cachefiles/internal.h:109:
+#define dbgprintk(FMT,...) \
                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2004: FILE: fs/cachefiles/internal.h:110:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2004: FILE: fs/cachefiles/internal.h:110:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)
 	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2004: FILE: fs/cachefiles/internal.h:110:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2004: FILE: fs/cachefiles/internal.h:110:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)
 	                                        ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2004: FILE: fs/cachefiles/internal.h:110:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2005: FILE: fs/cachefiles/internal.h:111:
+#define _dbprintk(FMT,...) do { } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#2005: FILE: fs/cachefiles/internal.h:111:
+#define _dbprintk(FMT,...) do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2007: FILE: fs/cachefiles/internal.h:113:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2007: FILE: fs/cachefiles/internal.h:113:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2007: FILE: fs/cachefiles/internal.h:113:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2007: FILE: fs/cachefiles/internal.h:113:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2007: FILE: fs/cachefiles/internal.h:113:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2007: FILE: fs/cachefiles/internal.h:113:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2008: FILE: fs/cachefiles/internal.h:114:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2008: FILE: fs/cachefiles/internal.h:114:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2008: FILE: fs/cachefiles/internal.h:114:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2008: FILE: fs/cachefiles/internal.h:114:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2008: FILE: fs/cachefiles/internal.h:114:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2008: FILE: fs/cachefiles/internal.h:114:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2009: FILE: fs/cachefiles/internal.h:115:
+#define kdebug(FMT,...)	dbgprintk(FMT ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2009: FILE: fs/cachefiles/internal.h:115:
+#define kdebug(FMT,...)	dbgprintk(FMT ,##__VA_ARGS__)
                        	              ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2009: FILE: fs/cachefiles/internal.h:115:
+#define kdebug(FMT,...)	dbgprintk(FMT ,##__VA_ARGS__)
                        	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2011: FILE: fs/cachefiles/internal.h:117:
+#define kjournal(FMT,...) _dbprintk(FMT ,##__VA_ARGS__)
                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2011: FILE: fs/cachefiles/internal.h:117:
+#define kjournal(FMT,...) _dbprintk(FMT ,##__VA_ARGS__)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2011: FILE: fs/cachefiles/internal.h:117:
+#define kjournal(FMT,...) _dbprintk(FMT ,##__VA_ARGS__)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2013: FILE: fs/cachefiles/internal.h:119:
+#define dbgfree(ADDR)  _dbprintk("%p:%d: FREEING %p",__FILE__,__LINE__,ADDR)
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2013: FILE: fs/cachefiles/internal.h:119:
+#define dbgfree(ADDR)  _dbprintk("%p:%d: FREEING %p",__FILE__,__LINE__,ADDR)
                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2013: FILE: fs/cachefiles/internal.h:119:
+#define dbgfree(ADDR)  _dbprintk("%p:%d: FREEING %p",__FILE__,__LINE__,ADDR)
                                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'PAGE' - possible side-effects?
#2015: FILE: fs/cachefiles/internal.h:121:
+#define dbgpgalloc(PAGE)						\
+do {									\
+	_dbprintk("PGALLOC %s:%d: %p {%lx,%lu}\n",			\
+		  __FILE__,__LINE__,					\
+		  (PAGE),(PAGE)->mapping->host->i_ino,(PAGE)->index	\
+		  );							\
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2015: FILE: fs/cachefiles/internal.h:121:
+#define dbgpgalloc(PAGE)						\
+do {									\
+	_dbprintk("PGALLOC %s:%d: %p {%lx,%lu}\n",			\
+		  __FILE__,__LINE__,					\
+		  (PAGE),(PAGE)->mapping->host->i_ino,(PAGE)->index	\
+		  );							\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2018: FILE: fs/cachefiles/internal.h:124:
+		  __FILE__,__LINE__,					\
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2019: FILE: fs/cachefiles/internal.h:125:
+		  (PAGE),(PAGE)->mapping->host->i_ino,(PAGE)->index	\
 		        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2019: FILE: fs/cachefiles/internal.h:125:
+		  (PAGE),(PAGE)->mapping->host->i_ino,(PAGE)->index	\
 		                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#2021: FILE: fs/cachefiles/internal.h:127:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'PAGE' - possible side-effects?
#2023: FILE: fs/cachefiles/internal.h:129:
+#define dbgpgfree(PAGE)						\
+do {								\
+	if ((PAGE))						\
+		_dbprintk("PGFREE %s:%d: %p {%lx,%lu}\n",	\
+			  __FILE__,__LINE__,			\
+			  (PAGE),				\
+			  (PAGE)->mapping->host->i_ino,		\
+			  (PAGE)->index				\
+			  );					\
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2027: FILE: fs/cachefiles/internal.h:133:
+			  __FILE__,__LINE__,			\
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#2032: FILE: fs/cachefiles/internal.h:138:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2035: FILE: fs/cachefiles/internal.h:141:
+#define _enter(FMT,...)	kenter(FMT,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2035: FILE: fs/cachefiles/internal.h:141:
+#define _enter(FMT,...)	kenter(FMT,##__VA_ARGS__)
                        	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2036: FILE: fs/cachefiles/internal.h:142:
+#define _leave(FMT,...)	kleave(FMT,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2036: FILE: fs/cachefiles/internal.h:142:
+#define _leave(FMT,...)	kleave(FMT,##__VA_ARGS__)
                        	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2037: FILE: fs/cachefiles/internal.h:143:
+#define _debug(FMT,...)	kdebug(FMT,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2037: FILE: fs/cachefiles/internal.h:143:
+#define _debug(FMT,...)	kdebug(FMT,##__VA_ARGS__)
                        	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2039: FILE: fs/cachefiles/internal.h:145:
+#define _enter(FMT,...)	do { } while(0)
                   ^

ERROR:SPACING: space required before the open parenthesis '('
#2039: FILE: fs/cachefiles/internal.h:145:
+#define _enter(FMT,...)	do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2040: FILE: fs/cachefiles/internal.h:146:
+#define _leave(FMT,...)	do { } while(0)
                   ^

ERROR:SPACING: space required before the open parenthesis '('
#2040: FILE: fs/cachefiles/internal.h:146:
+#define _leave(FMT,...)	do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2041: FILE: fs/cachefiles/internal.h:147:
+#define _debug(FMT,...)	do { } while(0)
                   ^

ERROR:SPACING: space required before the open parenthesis '('
#2041: FILE: fs/cachefiles/internal.h:147:
+#define _debug(FMT,...)	do { } while(0)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#2044: FILE: fs/cachefiles/internal.h:150:
+#if 1 // defined(__KDEBUGALL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2049: FILE: fs/cachefiles/internal.h:155:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2050: FILE: fs/cachefiles/internal.h:156:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2051: FILE: fs/cachefiles/internal.h:157:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2053: FILE: fs/cachefiles/internal.h:159:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#2055: FILE: fs/cachefiles/internal.h:161:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#2055: FILE: fs/cachefiles/internal.h:161:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2057: FILE: fs/cachefiles/internal.h:163:
+	if (unlikely(!((X) OP (Y)))) {					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2058: FILE: fs/cachefiles/internal.h:164:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2059: FILE: fs/cachefiles/internal.h:165:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2060: FILE: fs/cachefiles/internal.h:166:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2062: FILE: fs/cachefiles/internal.h:168:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2064: FILE: fs/cachefiles/internal.h:170:
+} while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2069: FILE: fs/cachefiles/internal.h:175:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2070: FILE: fs/cachefiles/internal.h:176:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2071: FILE: fs/cachefiles/internal.h:177:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2073: FILE: fs/cachefiles/internal.h:179:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#2075: FILE: fs/cachefiles/internal.h:181:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#2075: FILE: fs/cachefiles/internal.h:181:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2077: FILE: fs/cachefiles/internal.h:183:
+	if (unlikely((C) && !((X) OP (Y)))) {				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2078: FILE: fs/cachefiles/internal.h:184:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2079: FILE: fs/cachefiles/internal.h:185:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2080: FILE: fs/cachefiles/internal.h:186:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2082: FILE: fs/cachefiles/internal.h:188:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2084: FILE: fs/cachefiles/internal.h:190:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2090: FILE: fs/cachefiles/internal.h:196:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2094: FILE: fs/cachefiles/internal.h:200:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2098: FILE: fs/cachefiles/internal.h:204:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2102: FILE: fs/cachefiles/internal.h:208:
+} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2164: FILE: include/linux/fs.h:1575:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2164: FILE: include/linux/fs.h:1575:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#2164: FILE: include/linux/fs.h:1575:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2164: FILE: include/linux/fs.h:1575:
+extern int generic_file_buffered_write_one_kernel_page(struct file *, pgoff_t, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2178: FILE: include/linux/pagemap.h:220:
+extern void install_page_waitqueue_monitor(struct page *page,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2203: FILE: mm/filemap.c:507:
+EXPORT_SYMBOL_GPL(install_page_waitqueue_monitor);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#2218: FILE: mm/filemap.c:2133:
+	struct address_space_operations *a_ops = mapping->a_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2228: FILE: mm/filemap.c:2143:
+		BUG_ON(cached_page);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2284: FILE: mm/filemap.c:2199:
+			status = generic_osync_inode(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2287: FILE: mm/filemap.c:2202:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2287: FILE: mm/filemap.c:2202:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2287: FILE: mm/filemap.c:2202:
+  ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2288: FILE: mm/filemap.c:2203:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092202.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 79 errors, 131 warnings, 28 checks, 2049 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092202.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
