WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
If compiled as a module, the module is called 'autofsng'. NOTE: It may prove

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: fs/autofsng/init.c:1:
+/* -*- linux-c -*- --------------------------------------------------------- *

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: fs/autofsng/init.c:12:
+ * ------------------------------------------------------------------------- */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: fs/autofsng/init.c:19:
+static struct super_block *autofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data)

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: fs/autofsng/init.c:34:
+        ret = register_filesystem(&autofsng_fs_type);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: fs/autofsng/init.c:34:
+        ret = register_filesystem(&autofsng_fs_type);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: fs/autofsng/init.c:44:
+                                                                                $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: fs/autofsng/init.c:44:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: fs/autofsng/init.c:44:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/autofsng/init.c:47:
+        unregister_filesystem(&autofsng_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/autofsng/init.c:47:
+        unregister_filesystem(&autofsng_fs_type);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: fs/autofsng/init.c:50:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: fs/autofsng/init.c:50:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/autofsng/init.c:50:
+                                                                                $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: fs/autofsng/direct.c:1:
+#include <linux/sched.h>

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/autofsng/direct.c:4:
+static int autofs_direct_follow_link(struct dentry *dentry, struct nameidata *nd) 
                                                                               ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: fs/autofsng/direct.c:4:
+static int autofs_direct_follow_link(struct dentry *dentry, struct nameidata *nd) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/autofsng/direct.c:12:
+	dprintk("\tdentry=%08x, nd->dentry=%08x, nd->mnt=%08x\n",
+			(unsigned)dentry, (unsigned)nd->dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: fs/autofsng/direct.c:12:
+			(unsigned)dentry, (unsigned)nd->dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: fs/autofsng/direct.c:12:
+			(unsigned)dentry, (unsigned)nd->dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: fs/autofsng/direct.c:13:
+			(unsigned)nd->mnt);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#164: FILE: fs/autofsng/direct.c:15:
+	/* Set the nd up to point to the current directory, ->mnt is setup by
 	           ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: fs/autofsng/direct.c:16:
+	 * the VFS layer. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#168: FILE: fs/autofsng/direct.c:19:
+	ret = request_mount(nd, nd->mnt->mnt_devname, sbi->mapkey, 
 	                    ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: fs/autofsng/direct.c:19:
+^Iret = request_mount(nd, nd->mnt->mnt_devname, sbi->mapkey, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/autofsng/direct.c:20:
+	ret = request_mount(nd, nd->mnt->mnt_devname, sbi->mapkey, 
+			sbi->mapoffset, sbi->mapoptions);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#174: FILE: fs/autofsng/direct.c:25:
+		path_release(nd);
 		             ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: fs/autofsng/direct.c:30:
+	 * critical for the open path when follow_link is hit. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#186: FILE: fs/autofsng/direct.c:37:
+*dentry, struct nameidata *nd)
                            ^^

WARNING:TYPO_SPELLING: 'overlayed' may be misspelled - perhaps 'overlaid'?
#191: FILE: fs/autofsng/direct.c:42:
+/* If readdir is ever called, it's cause we didn't get an overlayed mount */
                                                           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#192: FILE: fs/autofsng/direct.c:43:
+static int autofs_direct_readdir(struct file *filp, void *dirent, filldir_t filldir) {
                                               ^^^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#192: FILE: fs/autofsng/direct.c:43:
+static int autofs_direct_readdir(struct file *filp, void *dirent, filldir_t filldir) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/autofsng/direct.c:44:
+        off_t nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/autofsng/direct.c:44:
+        off_t nr;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/autofsng/direct.c:45:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: fs/autofsng/direct.c:45:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/autofsng/direct.c:45:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/autofsng/direct.c:46:
+        nr = filp->f_pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/autofsng/direct.c:46:
+        nr = filp->f_pos;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/autofsng/direct.c:47:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/autofsng/direct.c:47:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/autofsng/direct.c:47:
+                                                                                $

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#197: FILE: fs/autofsng/direct.c:48:
+        dprintk("autofs(%x): readdir called on a direct mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/autofsng/direct.c:48:
+        dprintk("autofs(%x): readdir called on a direct mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/autofsng/direct.c:48:
+        dprintk("autofs(%x): readdir called on a direct mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: fs/autofsng/direct.c:48:
+        dprintk("autofs(%x): readdir called on a direct mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/autofsng/direct.c:49:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/autofsng/direct.c:49:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/autofsng/direct.c:49:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/autofsng/direct.c:50:
+        switch(nr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/autofsng/direct.c:50:
+        switch(nr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#199: FILE: fs/autofsng/direct.c:50:
+        switch(nr)
+        {

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: fs/autofsng/direct.c:50:
+        switch(nr)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/autofsng/direct.c:51:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/autofsng/direct.c:51:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: fs/autofsng/direct.c:52:
+        case 0:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: fs/autofsng/direct.c:52:
+        case 0:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: fs/autofsng/direct.c:53:
+                if (filldir(dirent, ".", 1, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/autofsng/direct.c:53:
+                if (filldir(dirent, ".", 1, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/autofsng/direct.c:54:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/autofsng/direct.c:54:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: fs/autofsng/direct.c:55:
+                filp->f_pos = ++nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/autofsng/direct.c:55:
+                filp->f_pos = ++nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: fs/autofsng/direct.c:56:
+                /* fall through */$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#205: FILE: fs/autofsng/direct.c:56:
+                /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: fs/autofsng/direct.c:57:
+        case 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: fs/autofsng/direct.c:57:
+        case 1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: fs/autofsng/direct.c:58:
+                if (filldir(dirent, "..", 2, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: fs/autofsng/direct.c:58:
+                if (filldir(dirent, "..", 2, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: fs/autofsng/direct.c:59:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: fs/autofsng/direct.c:59:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/autofsng/direct.c:60:
+                filp->f_pos = ++nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/autofsng/direct.c:60:
+                filp->f_pos = ++nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: fs/autofsng/direct.c:61:
+                /* fall through */$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#210: FILE: fs/autofsng/direct.c:61:
+                /* fall through */

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: fs/autofsng/direct.c:62:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: fs/autofsng/direct.c:62:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: fs/autofsng/direct.c:63:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: fs/autofsng/direct.c:63:
+        return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: fs/autofsng/direct.c:66:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: fs/autofsng/direct.c:68:
+ * look like a directory, hence the dummy .lookup. */

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#218: FILE: fs/autofsng/direct.c:69:
+struct inode_operations autofs_direct_root_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#223: FILE: fs/autofsng/direct.c:74:
+struct file_operations autofs_direct_root_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#231: FILE: fs/autofsng/autofs.h:1:
+#include <linux/fs.h>

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#236: FILE: fs/autofsng/autofs.h:6:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: fs/autofsng/autofs.h:14:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#255: FILE: fs/autofsng/autofs.h:25:
+	unsigned hash;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#266: FILE: fs/autofsng/autofs.h:36:
+	unsigned nentries;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sb' may be better as '(sb)' to avoid precedence issues
#270: FILE: fs/autofsng/autofs.h:40:
+#define autofs_sbi(sb) ((struct autofs_sb_info *)(sb->s_fs_info))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#276: FILE: fs/autofsng/autofs.h:46:
+extern struct inode_operations autofs_direct_root_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#277: FILE: fs/autofsng/autofs.h:47:
+extern struct file_operations autofs_direct_root_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#278: FILE: fs/autofsng/autofs.h:48:
+extern struct inode_operations autofs_indirect_root_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#279: FILE: fs/autofsng/autofs.h:49:
+extern struct file_operations autofs_indirect_root_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#280: FILE: fs/autofsng/autofs.h:50:
+extern struct inode_operations autofs_indirect_dir_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#281: FILE: fs/autofsng/autofs.h:51:
+extern struct file_operations autofs_indirect_dir_operations;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#282: FILE: fs/autofsng/autofs.h:52:
+extern struct dentry_operations autofs_indirect_dir_d_operations;

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#286: FILE: fs/autofsng/autofs.h:56:
+int request_mount(struct nameidata *mounton, const char *map, const char *key, const char *offset, const char *options);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: fs/autofsng/autofs.h:58:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: fs/autofsng/autofs.h:79:
+struct mapcache_entry *new_entry(const char *name, unsigned hash, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#309: FILE: fs/autofsng/autofs.h:79:
+struct mapcache_entry *new_entry(const char *name, unsigned hash, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: fs/autofsng/autofs.h:80:
+struct mapcache_entry *new_entry(const char *name, unsigned hash, 
+		struct mapcache_tree *oldtree);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: fs/autofsng/autofs.h:82:
+struct mapcache_entry *find_entry(struct mapcache_tree *tree, const char *name,
+		unsigned hash);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#312: FILE: fs/autofsng/autofs.h:82:
+		unsigned hash);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#315: FILE: fs/autofsng/autofs.h:85:
+unsigned entry_hash(const char *name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: fs/autofsng/autofs.h:90:
+#define dprintk(format, args...) printk(format, ##args)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#322: FILE: fs/autofsng/autofs.h:92:
+#define dprintk(format, args...) (void)(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#341: FILE: fs/autofsng/super.c:1:
+#include <linux/parser.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: fs/autofsng/super.c:4:
+enum {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: fs/autofsng/super.c:5:
+^IOpt_err, $

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#345: FILE: fs/autofsng/super.c:5:
+	Opt_err, 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: fs/autofsng/super.c:6:
+^IOpt_mapkey, Opt_mapoffset, $

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mapkey>
#346: FILE: fs/autofsng/super.c:6:
+	Opt_mapkey, Opt_mapoffset, 

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mapoffset>
#346: FILE: fs/autofsng/super.c:6:
+	Opt_mapkey, Opt_mapoffset, 

CHECK:CAMELCASE: Avoid CamelCase: <Opt_direct>
#347: FILE: fs/autofsng/super.c:7:
+	Opt_direct, Opt_indirect,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_indirect>
#347: FILE: fs/autofsng/super.c:7:
+	Opt_direct, Opt_indirect,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_browse>
#348: FILE: fs/autofsng/super.c:8:
+	Opt_browse, Opt_nobrowse,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nobrowse>
#348: FILE: fs/autofsng/super.c:8:
+	Opt_browse, Opt_nobrowse,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_opt>
#349: FILE: fs/autofsng/super.c:9:
+	Opt_opt,

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: fs/autofsng/super.c:25:
+        struct inode * root_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: fs/autofsng/super.c:25:
+        struct inode * root_inode;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: fs/autofsng/super.c:25:
+        struct inode * root_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: fs/autofsng/super.c:26:
+        struct dentry * root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: fs/autofsng/super.c:26:
+        struct dentry * root;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: fs/autofsng/super.c:26:
+        struct dentry * root;

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: fs/autofsng/super.c:27:
+        struct autofs_sb_info *sbi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: fs/autofsng/super.c:27:
+        struct autofs_sb_info *sbi;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: fs/autofsng/super.c:29:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: fs/autofsng/super.c:29:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: fs/autofsng/super.c:29:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: fs/autofsng/super.c:31:
+        sbi = kmalloc(sizeof(*sbi), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: fs/autofsng/super.c:31:
+        sbi = kmalloc(sizeof(*sbi), GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: fs/autofsng/super.c:32:
+        if ( !sbi )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: fs/autofsng/super.c:32:
+        if ( !sbi )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#372: FILE: fs/autofsng/super.c:32:
+        if ( !sbi )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#372: FILE: fs/autofsng/super.c:32:
+        if ( !sbi )

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: fs/autofsng/super.c:33:
+                goto fail_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: fs/autofsng/super.c:33:
+                goto fail_unlock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: fs/autofsng/super.c:34:
+        dprintk("autofs: starting up, sbi = %p\n",sbi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: fs/autofsng/super.c:34:
+        dprintk("autofs: starting up, sbi = %p\n",sbi);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#374: FILE: fs/autofsng/super.c:34:
+        dprintk("autofs: starting up, sbi = %p\n",sbi);
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: fs/autofsng/super.c:38:
+        err = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: fs/autofsng/super.c:38:
+        err = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: fs/autofsng/super.c:39:
+        if ( parse_options(data, sbi) ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: fs/autofsng/super.c:39:
+        if ( parse_options(data, sbi) ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#379: FILE: fs/autofsng/super.c:39:
+        if ( parse_options(data, sbi) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#379: FILE: fs/autofsng/super.c:39:
+        if ( parse_options(data, sbi) ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: fs/autofsng/super.c:40:
+                printk("autofs: called with bogus options\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: fs/autofsng/super.c:40:
+                printk("autofs: called with bogus options\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#380: FILE: fs/autofsng/super.c:40:
+                printk("autofs: called with bogus options\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: fs/autofsng/super.c:41:
+                goto fail_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: fs/autofsng/super.c:41:
+                goto fail_free;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: fs/autofsng/super.c:42:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: fs/autofsng/super.c:42:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: fs/autofsng/super.c:43:
+                                                                       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: fs/autofsng/super.c:43:
+                                                                       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: fs/autofsng/super.c:43:
+                                                                       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: fs/autofsng/super.c:44:
+        s->s_fs_info = sbi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: fs/autofsng/super.c:44:
+        s->s_fs_info = sbi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: fs/autofsng/super.c:50:
+        s->s_blocksize = 1024;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: fs/autofsng/super.c:50:
+        s->s_blocksize = 1024;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: fs/autofsng/super.c:51:
+        s->s_blocksize_bits = 10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: fs/autofsng/super.c:51:
+        s->s_blocksize_bits = 10;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: fs/autofsng/super.c:52:
+        s->s_magic = AUTOFSNG_SUPER_MAGIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: fs/autofsng/super.c:52:
+        s->s_magic = AUTOFSNG_SUPER_MAGIC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: fs/autofsng/super.c:53:
+        s->s_op = &autofs_sops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: fs/autofsng/super.c:53:
+        s->s_op = &autofs_sops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: fs/autofsng/super.c:54:
+        root_inode = iget(s, AUTOFSNG_ROOT_INO);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: fs/autofsng/super.c:54:
+        root_inode = iget(s, AUTOFSNG_ROOT_INO);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: fs/autofsng/super.c:57:
+        root = d_alloc_root(root_inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: fs/autofsng/super.c:57:
+        root = d_alloc_root(root_inode);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: fs/autofsng/super.c:58:
+        if (!root)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: fs/autofsng/super.c:58:
+        if (!root)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: fs/autofsng/super.c:59:
+                goto fail_iput;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: fs/autofsng/super.c:59:
+                goto fail_iput;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: fs/autofsng/super.c:60:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: fs/autofsng/super.c:60:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: fs/autofsng/super.c:60:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: fs/autofsng/super.c:62:
+         * Success! Install the root dentry now to indicate completion.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/autofsng/super.c:63:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: fs/autofsng/super.c:64:
+        s->s_root = root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: fs/autofsng/super.c:64:
+        s->s_root = root;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: fs/autofsng/super.c:69:
+        printk("autofs: get root dentry failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: fs/autofsng/super.c:69:
+        printk("autofs: get root dentry failed\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: fs/autofsng/super.c:69:
+        printk("autofs: get root dentry failed\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#410: FILE: fs/autofsng/super.c:70:
+        iput(root_inode);
         ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: fs/autofsng/super.c:70:
+        iput(root_inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: fs/autofsng/super.c:70:
+        iput(root_inode);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: fs/autofsng/super.c:78:
+        kfree(sbi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: fs/autofsng/super.c:78:
+        kfree(sbi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: fs/autofsng/super.c:80:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: fs/autofsng/super.c:80:
+        return err;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: fs/autofsng/super.c:86:
+	struct autofs_sb_info *sbi = autofs_sbi(inode->i_sb);
+	if (sbi->flags & AUTOFSNG_FDIRECT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: fs/autofsng/super.c:98:
+	struct autofs_sb_info *sbi = autofs_sbi(inode->i_sb);
+	if (sbi->flags & AUTOFSNG_FDIRECT) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: fs/autofsng/super.c:99:
+		printk("autofs_read_dir_inode called in a direct mount!");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'autofs_read_dir_inode', this function's name, in a string
#439: FILE: fs/autofsng/super.c:99:
+		printk("autofs_read_dir_inode called in a direct mount!");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: fs/autofsng/super.c:110:
+^I$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#454: FILE: fs/autofsng/super.c:114:
+	inode->i_mode = S_IFDIR | S_IRUGO | S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#456: FILE: fs/autofsng/super.c:116:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#460: FILE: fs/autofsng/super.c:120:
+	if (ino == AUTOFSNG_ROOT_INO) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: fs/autofsng/super.c:137:
+		int token;
+		if (!*p)

ERROR:SPACING: space required before the open parenthesis '('
#481: FILE: fs/autofsng/super.c:141:
+		switch(token) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: fs/autofsng/super.c:156:
+				printk("autofs: mapkey specified twice\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: fs/autofsng/super.c:165:
+				printk("autofs: mapoffset specified twice\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#514: FILE: fs/autofsng/super.c:174:
+				printk("autofs: opt specified twice\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: fs/autofsng/super.c:189:
+			printk("autofs: mapkey option required for "

WARNING:SPLIT_STRING: quoted string split across lines
#530: FILE: fs/autofsng/super.c:190:
+			printk("autofs: mapkey option required for "
+					"direct mounts\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: fs/autofsng/super.c:194:
+			printk("autofs: mapoffset option required for "

WARNING:SPLIT_STRING: quoted string split across lines
#535: FILE: fs/autofsng/super.c:195:
+			printk("autofs: mapoffset option required for "
+					"direct mounts\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#540: FILE: fs/autofsng/super.c:200:
+			printk("autofs: indirect mounts do not accept the "

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: fs/autofsng/super.c:201:
+			printk("autofs: indirect mounts do not accept the "
+					"mapkey and mapoffset options\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: fs/autofsng/super.c:205:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: fs/autofsng/super.c:208:
+	printk("autofs: couldn't allocate memory while parsing "

WARNING:SPLIT_STRING: quoted string split across lines
#549: FILE: fs/autofsng/super.c:209:
+	printk("autofs: couldn't allocate memory while parsing "
+			"mount options\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#563: FILE: fs/autofsng/super.c:223:
+	struct autofs_sb_info *sbi = autofs_sbi(sb);
+	mapcache_destroy(sb);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#580: FILE: fs/autofsng/request.c:1:
+#include <linux/sched.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#581: FILE: fs/autofsng/request.c:2:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#603: FILE: fs/autofsng/request.c:24:
+};
+#define BUFSIZE (PAGE_SIZE - sizeof(struct req))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#659: FILE: fs/autofsng/request.c:80:
+static int try_to_follow(struct nameidata *nd)
                                            ^^

ERROR:SPACING: space required before the open parenthesis '('
#668: FILE: fs/autofsng/request.c:89:
+		while(d_mountpoint(nd->dentry) && follow_down(&nd->mnt, &nd->dentry))

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#676: FILE: fs/autofsng/request.c:97:
+			dprintk("autofs: followed a link on ->mnt=%d, ->dentry=%d\n", (unsigned)nd->mnt, (unsigned)nd->dentry);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#676: FILE: fs/autofsng/request.c:97:
+			dprintk("autofs: followed a link on ->mnt=%d, ->dentry=%d\n", (unsigned)nd->mnt, (unsigned)nd->dentry);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#676: FILE: fs/autofsng/request.c:97:
+			dprintk("autofs: followed a link on ->mnt=%d, ->dentry=%d\n", (unsigned)nd->mnt, (unsigned)nd->dentry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#678: FILE: fs/autofsng/request.c:99:
+			rv = d->d_inode->i_op->follow_link(d, nd);
 			                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#682: FILE: fs/autofsng/request.c:103:
+				path_release(nd);
 				             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#686: FILE: fs/autofsng/request.c:107:
+			 * XXX: We should never see a link path in nd.  This is
 			                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#692: FILE: fs/autofsng/request.c:113:
+			BUG_ON(nd_get_link(nd) != NULL);
 			                   ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: fs/autofsng/request.c:113:
+			BUG_ON(nd_get_link(nd) != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nd_get_link"
#692: FILE: fs/autofsng/request.c:113:
+			BUG_ON(nd_get_link(nd) != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#700: FILE: fs/autofsng/request.c:121:
+		path_release(nd);
 		             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: fs/autofsng/request.c:128:
+static int wait_for_request(struct req *req, struct nameidata *nd)
                                                                ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#711: FILE: fs/autofsng/request.c:132:
+	 * follow_link dentry */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#712: FILE: fs/autofsng/request.c:133:
+	return try_to_follow(nd);
 	                     ^^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#715: FILE: fs/autofsng/request.c:136:
+#define do_envp(index, name, value) \
+	count = snprintf(p, left, (name), (value)); 		\
+	if (count < 0)						\
+		return -ENOMEM;					\
+	envp[(index)] = p;					\
+	p += count + 1;						\
+	left -= count + 1;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#715: FILE: fs/autofsng/request.c:136:
+#define do_envp(index, name, value) \
+	count = snprintf(p, left, (name), (value)); 		\
+	if (count < 0)						\
+		return -ENOMEM;					\
+	envp[(index)] = p;					\
+	p += count + 1;						\
+	left -= count + 1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#715: FILE: fs/autofsng/request.c:136:
+#define do_envp(index, name, value) \
+	count = snprintf(p, left, (name), (value)); 		\
+	if (count < 0)						\
+		return -ENOMEM;					\
+	envp[(index)] = p;					\
+	p += count + 1;						\
+	left -= count + 1;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: fs/autofsng/request.c:137:
+^Icount = snprintf(p, left, (name), (value)); ^I^I\$

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#727: FILE: fs/autofsng/request.c:148:
+	char *argv[] = { AGENT_PATH, "lookup", NULL };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#735: FILE: fs/autofsng/request.c:156:
+	p[BUFSIZE-1] = '\0';
 	         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: fs/autofsng/request.c:163:
+	dprintk("req->file is %08x\n", (unsigned)req->file);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: fs/autofsng/request.c:175:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: fs/autofsng/request.c:178:
+^I * likely a rootfs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: fs/autofsng/request.c:184:
+^Iif (ret) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: fs/autofsng/request.c:207:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#794: FILE: fs/autofsng/request.c:215:
+static int issue_request(struct req *req, struct nameidata *nd)
                                                             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#798: FILE: fs/autofsng/request.c:219:
+	struct nameidata follownd;
+	dprintk("in issue_request\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'issue_request', this function's name, in a string
#798: FILE: fs/autofsng/request.c:219:
+	dprintk("in issue_request\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#802: FILE: fs/autofsng/request.c:223:
+		printk("dentry_open failed (%ld)\n", PTR_ERR(req->file));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#812: FILE: fs/autofsng/request.c:233:
+		printk("call_usermodehelper_cb errored out with returned %d\n", ret);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#813: FILE: fs/autofsng/request.c:234:
+		/* fallthrough and try anyway */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#827: FILE: fs/autofsng/request.c:248:
+		path_release(nd);
 		             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#828: FILE: fs/autofsng/request.c:249:
+		/* move the references in follownd over to nd */
 		                                           ^^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#841: FILE: fs/autofsng/request.c:262:
+int request_mount(struct nameidata *mounton, const char *map, const char *key, const char *offset, const char *options)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#917: FILE: fs/autofsng/indirect.c:1:
+#include <linux/sched.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#924: FILE: fs/autofsng/indirect.c:8:
+};
+struct cursor_data {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#931: FILE: fs/autofsng/indirect.c:15:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#935: FILE: fs/autofsng/indirect.c:19:
+static int autofs_indirect_dir_revalidate(struct dentry *dentry, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#936: FILE: fs/autofsng/indirect.c:20:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#936: FILE: fs/autofsng/indirect.c:20:
+static int autofs_indirect_dir_revalidate(struct dentry *dentry, 
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#943: FILE: fs/autofsng/indirect.c:27:
+	if (nd == NULL) {
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#943: FILE: fs/autofsng/indirect.c:27:
+	if (nd == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#958: FILE: fs/autofsng/indirect.c:42:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: fs/autofsng/indirect.c:44:
+^I * If it's not in the cache when we are browsing, we have to try and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: fs/autofsng/indirect.c:45:
+^I * mount. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: fs/autofsng/indirect.c:52:
+^I^Ifound = snapshot_exists(snapshot, dentry->d_name.name);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#974: FILE: fs/autofsng/indirect.c:58:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#975: FILE: fs/autofsng/indirect.c:59:
+^I^I * we have to try and get something mounted on us.  $

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#976: FILE: fs/autofsng/indirect.c:60:
+		 * fall through to the nobrowse case.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#983: FILE: fs/autofsng/indirect.c:67:
+^Ierr = request_mount(&testnd, testnd.mnt->mnt_devname, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#984: FILE: fs/autofsng/indirect.c:68:
+	err = request_mount(&testnd, testnd.mnt->mnt_devname, 
+			dentry->d_name.name, dentry->d_name.name,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#993: FILE: fs/autofsng/indirect.c:77:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: fs/autofsng/indirect.c:78:
+ * Indirect mounts work as follows:  $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1002: FILE: fs/autofsng/indirect.c:86:
+		*dentry, struct nameidata *nd)
 		                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1008: FILE: fs/autofsng/indirect.c:92:
+	/* if nd is null, then this lookup is looking for a negative dentry
 	      ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1009: FILE: fs/autofsng/indirect.c:93:
+	 * (from lookup_hash). */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1010: FILE: fs/autofsng/indirect.c:94:
+	if (nd == NULL)
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#1010: FILE: fs/autofsng/indirect.c:94:
+	if (nd == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1033: FILE: fs/autofsng/indirect.c:117:
+	ret = autofs_indirect_dir_revalidate(dentry, nd);
 	                                             ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: fs/autofsng/indirect.c:122:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: fs/autofsng/indirect.c:128:
+^I^I/* TODO: check locking */^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: fs/autofsng/indirect.c:142:
+static struct dentry *autofs_indirect_dir_lookup(struct inode *dir, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1059: FILE: fs/autofsng/indirect.c:143:
+		struct dentry *dentry, struct nameidata *nd)
 		                                         ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: fs/autofsng/indirect.c:143:
+static struct dentry *autofs_indirect_dir_lookup(struct inode *dir, 
+		struct dentry *dentry, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'overlayed' may be misspelled - perhaps 'overlaid'?
#1064: FILE: fs/autofsng/indirect.c:148:
+/* If readdir is ever called, it's cause we didn't get an overlayed mount */
                                                           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1065: FILE: fs/autofsng/indirect.c:149:
+static int autofs_indirect_dir_readdir(struct file *filp, void *dirent, filldir_t filldir) {
                                                     ^^^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1065: FILE: fs/autofsng/indirect.c:149:
+static int autofs_indirect_dir_readdir(struct file *filp, void *dirent, filldir_t filldir) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: fs/autofsng/indirect.c:150:
+        off_t nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: fs/autofsng/indirect.c:150:
+        off_t nr;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: fs/autofsng/indirect.c:151:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1067: FILE: fs/autofsng/indirect.c:151:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: fs/autofsng/indirect.c:151:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1068: FILE: fs/autofsng/indirect.c:152:
+        nr = filp->f_pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: fs/autofsng/indirect.c:152:
+        nr = filp->f_pos;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1069: FILE: fs/autofsng/indirect.c:153:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1069: FILE: fs/autofsng/indirect.c:153:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: fs/autofsng/indirect.c:153:
+                                                                                $

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#1070: FILE: fs/autofsng/indirect.c:154:
+        dprintk("autofs(%x): readdir called on a indirect mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1070: FILE: fs/autofsng/indirect.c:154:
+        dprintk("autofs(%x): readdir called on a indirect mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: fs/autofsng/indirect.c:154:
+        dprintk("autofs(%x): readdir called on a indirect mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1070: FILE: fs/autofsng/indirect.c:154:
+        dprintk("autofs(%x): readdir called on a indirect mount. (pid=%d)\n", (unsigned)autofs_sbi(filp->f_vfsmnt->mnt_sb), current->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1071: FILE: fs/autofsng/indirect.c:155:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1071: FILE: fs/autofsng/indirect.c:155:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: fs/autofsng/indirect.c:155:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1072: FILE: fs/autofsng/indirect.c:156:
+        switch(nr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: fs/autofsng/indirect.c:156:
+        switch(nr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1072: FILE: fs/autofsng/indirect.c:156:
+        switch(nr)
+        {

ERROR:SPACING: space required before the open parenthesis '('
#1072: FILE: fs/autofsng/indirect.c:156:
+        switch(nr)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1073: FILE: fs/autofsng/indirect.c:157:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: fs/autofsng/indirect.c:157:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1074: FILE: fs/autofsng/indirect.c:158:
+        case 0:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: fs/autofsng/indirect.c:158:
+        case 0:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1075: FILE: fs/autofsng/indirect.c:159:
+                if (filldir(dirent, ".", 1, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: fs/autofsng/indirect.c:159:
+                if (filldir(dirent, ".", 1, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1076: FILE: fs/autofsng/indirect.c:160:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/autofsng/indirect.c:160:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1077: FILE: fs/autofsng/indirect.c:161:
+                filp->f_pos = ++nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: fs/autofsng/indirect.c:161:
+                filp->f_pos = ++nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1078: FILE: fs/autofsng/indirect.c:162:
+                /* fall through */$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1078: FILE: fs/autofsng/indirect.c:162:
+                /* fall through */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1079: FILE: fs/autofsng/indirect.c:163:
+        case 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: fs/autofsng/indirect.c:163:
+        case 1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1080: FILE: fs/autofsng/indirect.c:164:
+                if (filldir(dirent, "..", 2, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: fs/autofsng/indirect.c:164:
+                if (filldir(dirent, "..", 2, nr, AUTOFSNG_ROOT_INO, DT_DIR) < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1081: FILE: fs/autofsng/indirect.c:165:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: fs/autofsng/indirect.c:165:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1082: FILE: fs/autofsng/indirect.c:166:
+                filp->f_pos = ++nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: fs/autofsng/indirect.c:166:
+                filp->f_pos = ++nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1083: FILE: fs/autofsng/indirect.c:167:
+                /* fall through */$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1083: FILE: fs/autofsng/indirect.c:167:
+                /* fall through */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1084: FILE: fs/autofsng/indirect.c:168:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1084: FILE: fs/autofsng/indirect.c:168:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1085: FILE: fs/autofsng/indirect.c:169:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1085: FILE: fs/autofsng/indirect.c:169:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1088: FILE: fs/autofsng/indirect.c:172:
+static int autofs_indirect_dir_follow_link(struct dentry *dentry, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1089: FILE: fs/autofsng/indirect.c:173:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1089: FILE: fs/autofsng/indirect.c:173:
+static int autofs_indirect_dir_follow_link(struct dentry *dentry, 
+		struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: fs/autofsng/indirect.c:184:
+	dprintk("\tdentry=%08x, nd->dentry=%08x, nd->mnt=%08x\n",
+			(unsigned)dentry, (unsigned)nd->dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1100: FILE: fs/autofsng/indirect.c:184:
+			(unsigned)dentry, (unsigned)nd->dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1100: FILE: fs/autofsng/indirect.c:184:
+			(unsigned)dentry, (unsigned)nd->dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1101: FILE: fs/autofsng/indirect.c:185:
+			(unsigned)nd->mnt);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1103: FILE: fs/autofsng/indirect.c:187:
+	/* Set the nd up to point to the current directory, ->mnt is setup by
 	           ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1104: FILE: fs/autofsng/indirect.c:188:
+	 * the VFS layer. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1107: FILE: fs/autofsng/indirect.c:191:
+	ret = request_mount(nd, nd->mnt->mnt_devname, dentry->d_name.name,
 	                    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: fs/autofsng/indirect.c:192:
+	ret = request_mount(nd, nd->mnt->mnt_devname, dentry->d_name.name,
+			dentry->d_name.name, sbi->mapoptions);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1111: FILE: fs/autofsng/indirect.c:195:
+^I^I/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1117: FILE: fs/autofsng/indirect.c:201:
+			struct mapcache_tree *snapshot;
+			snapshot = get_snapshot(dentry->d_sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1118: FILE: fs/autofsng/indirect.c:202:
+			snapshot = get_snapshot(dentry->d_sb,
+					nd->mnt->mnt_devname);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1128: FILE: fs/autofsng/indirect.c:212:
+		path_release(nd);
 		             ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1132: FILE: fs/autofsng/indirect.c:216:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1134: FILE: fs/autofsng/indirect.c:218:
+^I^I * mounted on them. $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1137: FILE: fs/autofsng/indirect.c:221:
+		path_release(nd);
 		             ^^

WARNING:TYPO_SPELLING: 'somthing' may be misspelled - perhaps 'something'?
#1139: FILE: fs/autofsng/indirect.c:223:
+		/* We succeeded in mounting somthing.  We set LAST_BIND as the
 		                            ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1140: FILE: fs/autofsng/indirect.c:224:
+		 * open path requires it */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1146: FILE: fs/autofsng/indirect.c:230:
+	dprintk("out of follow_link: nd->mnt: %d nd->dentry: %d\n",
+			atomic_read(&nd->mnt->mnt_count),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1153: FILE: fs/autofsng/indirect.c:237:
+ * the readdir */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1162: FILE: fs/autofsng/indirect.c:246:
+	cd = kmalloc(sizeof (*cd), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: fs/autofsng/indirect.c:254:
+		cd->snapshot = get_snapshot(inode->i_sb,
+				file->f_vfsmnt->mnt_devname);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: fs/autofsng/indirect.c:283:
+static loff_t autofs_indirect_root_lseek(struct file *file, loff_t offset, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: fs/autofsng/indirect.c:284:
+static loff_t autofs_indirect_root_lseek(struct file *file, loff_t offset, 
+		int origin)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1206: FILE: fs/autofsng/indirect.c:290:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#1230: FILE: fs/autofsng/indirect.c:314:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1240: FILE: fs/autofsng/indirect.c:324:
+^I^I^I$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1260: FILE: fs/autofsng/indirect.c:344:
+struct inode_operations autofs_indirect_root_inode_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1276: FILE: fs/autofsng/indirect.c:360:
+static int autofs_indirect_root_readdir(struct file * filp, void * dirent, 
                                                       ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1276: FILE: fs/autofsng/indirect.c:360:
+static int autofs_indirect_root_readdir(struct file * filp, void * dirent, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: fs/autofsng/indirect.c:360:
+static int autofs_indirect_root_readdir(struct file * filp, void * dirent, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: fs/autofsng/indirect.c:360:
+static int autofs_indirect_root_readdir(struct file * filp, void * dirent, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: fs/autofsng/indirect.c:361:
+static int autofs_indirect_root_readdir(struct file * filp, void * dirent, 
+		filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1287: FILE: fs/autofsng/indirect.c:371:
+	switch (i) {
+		case 0:
[...]
+		case 1:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1294: FILE: fs/autofsng/indirect.c:378:
+			/* fallthrough */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1301: FILE: fs/autofsng/indirect.c:385:
+			/* fallthrough */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1309: FILE: fs/autofsng/indirect.c:393:
+		for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1309: FILE: fs/autofsng/indirect.c:393:
+		for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 		                                          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1311: FILE: fs/autofsng/indirect.c:395:
+			struct nameidata nd;
 			                 ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1313: FILE: fs/autofsng/indirect.c:397:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: fs/autofsng/indirect.c:401:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1321: FILE: fs/autofsng/indirect.c:405:
+^I^I^I/* is this node from the cache, if so we don't $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1322: FILE: fs/autofsng/indirect.c:406:
+			 * display it */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1324: FILE: fs/autofsng/indirect.c:408:
+			if (sbi->flags & AUTOFSNG_BROWSE
+			    && snapshot_exists(cd->snapshot, next->d_name.name))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1326: FILE: fs/autofsng/indirect.c:410:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1328: FILE: fs/autofsng/indirect.c:412:
+			memset(&nd, 0, sizeof (nd));
 			        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1328: FILE: fs/autofsng/indirect.c:412:
+			memset(&nd, 0, sizeof (nd));
 			                       ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1328: FILE: fs/autofsng/indirect.c:412:
+			memset(&nd, 0, sizeof (nd));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1329: FILE: fs/autofsng/indirect.c:413:
+			nd.mnt    = mntget(filp->f_vfsmnt);
 			^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1330: FILE: fs/autofsng/indirect.c:414:
+			nd.dentry = dget(next);
 			^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1332: FILE: fs/autofsng/indirect.c:416:
+^I^I^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1334: FILE: fs/autofsng/indirect.c:418:
+			if (d_mountpoint(nd.dentry) 
 			                 ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: fs/autofsng/indirect.c:418:
+^I^I^Iif (d_mountpoint(nd.dentry) $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1335: FILE: fs/autofsng/indirect.c:419:
+				&& follow_down(&nd.mnt, &nd.dentry))
 				                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1335: FILE: fs/autofsng/indirect.c:419:
+				&& follow_down(&nd.mnt, &nd.dentry))
 				                         ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1335: FILE: fs/autofsng/indirect.c:419:
+			if (d_mountpoint(nd.dentry) 
+				&& follow_down(&nd.mnt, &nd.dentry))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1337: FILE: fs/autofsng/indirect.c:421:
+			dput(nd.dentry);
 			     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1338: FILE: fs/autofsng/indirect.c:422:
+			_mntput(nd.mnt);
 			        ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1343: FILE: fs/autofsng/indirect.c:427:
+^I$

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1344: FILE: fs/autofsng/indirect.c:428:
+			if (filldir(dirent, next->d_name.name, next->d_name.len, filp->f_pos, next->d_inode->i_ino, dt_type(next->d_inode)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1367: FILE: fs/autofsng/indirect.c:451:
+			ret = filldir(dirent, entry->name, strlen(entry->name),
+						filp->f_pos, 1, DT_DIR);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1379: FILE: fs/autofsng/indirect.c:463:
+struct file_operations autofs_indirect_root_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1387: FILE: fs/autofsng/indirect.c:471:
+struct inode_operations autofs_indirect_dir_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1392: FILE: fs/autofsng/indirect.c:476:
+struct file_operations autofs_indirect_dir_operations = {

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1396: FILE: fs/autofsng/indirect.c:480:
+struct dentry_operations autofs_indirect_dir_d_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1404: FILE: fs/autofsng/mapcache.c:1:
+#include <linux/pagemap.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1421: FILE: fs/autofsng/mapcache.c:18:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1440: FILE: fs/autofsng/mapcache.c:37:
+^Iunsigned long lastupdate;         /* time of last update */    $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1443: FILE: fs/autofsng/mapcache.c:40:
+	unsigned hits;			  /* count of hits when updating */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1446: FILE: fs/autofsng/mapcache.c:43:
+	struct mapcache_update *update;   /* refreshing task sets this
+					     while others wait for refresh */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1446: FILE: fs/autofsng/mapcache.c:43:
+					     while others wait for refresh */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1449: FILE: fs/autofsng/mapcache.c:46:
+/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1471: FILE: fs/autofsng/mapcache.c:68:
+static struct super_block *mapcache_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1491: FILE: fs/autofsng/mapcache.c:88:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1514: FILE: fs/autofsng/mapcache.c:111:
+	struct mapcache_file_buffer *buffer = file->private_data;
+	free_mapcache_file_buffer(buffer);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1521: FILE: fs/autofsng/mapcache.c:118:
+	unsigned hash;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1534: FILE: fs/autofsng/mapcache.c:131:
+	if (ret == 0) {
[...]
+	} else if (ret == 1) {
[...]
+	} else if (ret < 0) {
[...]
+	} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: fs/autofsng/mapcache.c:142:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#1545: FILE: fs/autofsng/mapcache.c:142:
+	} else 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1546: FILE: fs/autofsng/mapcache.c:143:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1550: FILE: fs/autofsng/mapcache.c:147:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1554: FILE: fs/autofsng/mapcache.c:151:
+ * text $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: fs/autofsng/mapcache.c:154:
+static ssize_t mapcache_fill_write_buffer(struct mapcache_file_buffer *buffer,
+		const char __user *buf, ssize_t count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1571: FILE: fs/autofsng/mapcache.c:168:
+/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: fs/autofsng/mapcache.c:175:
+static ssize_t mapcache_flush_write_buffer(struct mapcache_file_buffer *buffer,
+		ssize_t new)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1587: FILE: fs/autofsng/mapcache.c:184:
+			int ret;
+			if (buffer->skip) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1604: FILE: fs/autofsng/mapcache.c:201:
+		if (*p == '/' || *p == '*' || *p == '\0') {
+			buffer->skip = 1;
+		}

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1609: FILE: fs/autofsng/mapcache.c:206:
+		if (p == &buffer->buffer[BUFFSIZE -1]) {
 		                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1623: FILE: fs/autofsng/mapcache.c:220:
+static ssize_t mapcache_file_write(struct file *file, const char __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1624: FILE: fs/autofsng/mapcache.c:221:
+static ssize_t mapcache_file_write(struct file *file, const char __user *buf, 
+		size_t count, loff_t *ppos)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1632: FILE: fs/autofsng/mapcache.c:229:
+	ret = filled = mapcache_fill_write_buffer(buffer, buf, count);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1635: FILE: fs/autofsng/mapcache.c:232:
+	ret = flusheduntil = mapcache_flush_write_buffer(buffer, filled);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1644: FILE: fs/autofsng/mapcache.c:241:
+static struct file_operations mapcache_file_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#1653: FILE: fs/autofsng/mapcache.c:250:
+	inode->i_mode = S_IFREG | S_IRUGO | S_IXUGO;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1655: FILE: fs/autofsng/mapcache.c:252:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1677: FILE: fs/autofsng/mapcache.c:274:
+		int err = PTR_ERR(inode);
+		dput(dentry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1704: FILE: fs/autofsng/mapcache.c:301:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1716: FILE: fs/autofsng/mapcache.c:313:
+	 * other readers of the rbtree */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1737: FILE: fs/autofsng/mapcache.c:334:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1755: FILE: fs/autofsng/mapcache.c:352:
+	BUG_ON(mapcache->update);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1764: FILE: fs/autofsng/mapcache.c:361:
+	struct mapcache_update *update = mapcache->update;
+	BUG_ON(!mapcache->update);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1764: FILE: fs/autofsng/mapcache.c:361:
+	BUG_ON(!mapcache->update);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1772: FILE: fs/autofsng/mapcache.c:369:
+	BUG_ON(!mapcache->update);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1786: FILE: fs/autofsng/mapcache.c:383:
+	if (atomic_dec_and_test(&update->count)) {
+		kfree(update);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1794: FILE: fs/autofsng/mapcache.c:391:
+	int err;
+	err = register_filesystem(&mapcache_fs_type);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1814: FILE: fs/autofsng/mapcache.c:411:
+#define do_envp(index, name, value) \
+	count = snprintf(p, left, (name), (value)); 		\
+	if (count < 0)						\
+		return -ENOMEM;					\
+	envp[(index)] = p;					\
+	p += count + 1;						\
+	left -= count + 1;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1814: FILE: fs/autofsng/mapcache.c:411:
+#define do_envp(index, name, value) \
+	count = snprintf(p, left, (name), (value)); 		\
+	if (count < 0)						\
+		return -ENOMEM;					\
+	envp[(index)] = p;					\
+	p += count + 1;						\
+	left -= count + 1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1814: FILE: fs/autofsng/mapcache.c:411:
+#define do_envp(index, name, value) \
+	count = snprintf(p, left, (name), (value)); 		\
+	if (count < 0)						\
+		return -ENOMEM;					\
+	envp[(index)] = p;					\
+	p += count + 1;						\
+	left -= count + 1;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1815: FILE: fs/autofsng/mapcache.c:412:
+^Icount = snprintf(p, left, (name), (value)); ^I^I\$

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1826: FILE: fs/autofsng/mapcache.c:423:
+	char *argv[] = { AGENT_PATH, "list", NULL };

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1833: FILE: fs/autofsng/mapcache.c:430:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1844: FILE: fs/autofsng/mapcache.c:441:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1858: FILE: fs/autofsng/mapcache.c:455:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1859: FILE: fs/autofsng/mapcache.c:456:
+^I * We can safely pass info from our stack because we are waiting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1860: FILE: fs/autofsng/mapcache.c:457:
+^I * for the usermode helper to return. $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1864: FILE: fs/autofsng/mapcache.c:461:
+		printk("autofs mapcache: call_usermodehelper_cb errored out"

WARNING:SPLIT_STRING: quoted string split across lines
#1865: FILE: fs/autofsng/mapcache.c:462:
+		printk("autofs mapcache: call_usermodehelper_cb errored out"
+				" with ret = %d\n", ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1872: FILE: fs/autofsng/mapcache.c:469:
+^Istruct mapcache *mapcache;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1886: FILE: fs/autofsng/mapcache.c:483:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1904: FILE: fs/autofsng/mapcache.c:501:
+	switch (mapcache->state) {
+		case MC_REFRESH:
[...]
+		case MC_OK:
[...]
+		case MC_UPDATING:
[...]
+		default:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1910: FILE: fs/autofsng/mapcache.c:507:
+			BUG_ON(mapcache->oldtree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapcache->oldtree"
#1910: FILE: fs/autofsng/mapcache.c:507:
+			BUG_ON(mapcache->oldtree != NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1921: FILE: fs/autofsng/mapcache.c:518:
+^I^I^I^Iif (mapcache->tree) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1924: FILE: fs/autofsng/mapcache.c:521:
+^I^I^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1928: FILE: fs/autofsng/mapcache.c:525:
+				 * tree if possible */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1942: FILE: fs/autofsng/mapcache.c:539:
+^I^I^I^Iif (mapcache->tree) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1950: FILE: fs/autofsng/mapcache.c:547:
+				 * if possible */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1953: FILE: fs/autofsng/mapcache.c:550:
+^I^I^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1956: FILE: fs/autofsng/mapcache.c:553:
+			if (mapcache->oldtree
+			    && mapcache->oldtree->nentries ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1958: FILE: fs/autofsng/mapcache.c:555:
+				mapcache->tree->nentries
+			    && mapcache->hits == mapcache->tree->nentries) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1964: FILE: fs/autofsng/mapcache.c:561:
+			} else {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1965: FILE: fs/autofsng/mapcache.c:562:
+^I^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1966: FILE: fs/autofsng/mapcache.c:563:
+^I^I^I^I * free up the old tree we aren't $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1967: FILE: fs/autofsng/mapcache.c:564:
+^I^I^I^I * using anymore $

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1978: FILE: fs/autofsng/mapcache.c:575:
+			/* fall through */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1988: FILE: fs/autofsng/mapcache.c:585:
+^I^I^Iput_update(update); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1998: FILE: fs/autofsng/mapcache.c:595:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2000: FILE: fs/autofsng/mapcache.c:597:
+	BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#2012: FILE: fs/autofsng/mapcache.c:609:
+	struct rb_node *node;
+	node = rb_first(&tree->root);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2021: FILE: fs/autofsng/mapcache.c:618:
+	struct rb_node *nextnode;
+	nextnode = rb_next(&node->node);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2029: FILE: fs/autofsng/mapcache.c:626:
+	unsigned hash = entry_hash(name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2030: FILE: fs/autofsng/mapcache.c:627:
+	unsigned hash = entry_hash(name);
+	return find_entry(tree, name, hash) ? 1 : 0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2047: FILE: fs/autofsng/cachetree.c:1:
+#include "autofs.h"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2049: FILE: fs/autofsng/cachetree.c:3:
+static int __node_is_left(const char *namea, unsigned hasha, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2049: FILE: fs/autofsng/cachetree.c:3:
+static int __node_is_left(const char *namea, unsigned hasha, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2050: FILE: fs/autofsng/cachetree.c:4:
+			  const char *nameb, unsigned hashb)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2059: FILE: fs/autofsng/cachetree.c:13:
+static int __node_is_right(const char *namea, unsigned hasha,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2060: FILE: fs/autofsng/cachetree.c:14:
+^I^I           const char *nameb, unsigned hashb)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2060: FILE: fs/autofsng/cachetree.c:14:
+static int __node_is_right(const char *namea, unsigned hasha,
+		           const char *nameb, unsigned hashb)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2060: FILE: fs/autofsng/cachetree.c:14:
+		           const char *nameb, unsigned hashb)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2065: FILE: fs/autofsng/cachetree.c:19:
+static int node_is_left(struct mapcache_treenode *a, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2066: FILE: fs/autofsng/cachetree.c:20:
+static int node_is_left(struct mapcache_treenode *a, 
+		struct mapcache_treenode *b)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2068: FILE: fs/autofsng/cachetree.c:22:
+^Ireturn __node_is_left(a->entry->name, a->entry->hash, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2073: FILE: fs/autofsng/cachetree.c:27:
+static int node_is_right(struct mapcache_treenode *a,
+		struct mapcache_treenode *b)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2079: FILE: fs/autofsng/cachetree.c:33:
+struct mapcache_entry *find_entry(struct mapcache_tree *tree, const char *name,
+		unsigned hash)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2079: FILE: fs/autofsng/cachetree.c:33:
+		unsigned hash)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2088: FILE: fs/autofsng/cachetree.c:42:
+		if (__node_is_left(name, hash, node->entry->name,
+					node->entry->hash))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2091: FILE: fs/autofsng/cachetree.c:45:
+		else if (__node_is_right(name, hash, node->entry->name,
+					node->entry->hash))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2093: FILE: fs/autofsng/cachetree.c:47:
+^I^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2096: FILE: fs/autofsng/cachetree.c:50:
+^Ireturn NULL; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2100: FILE: fs/autofsng/cachetree.c:54:
+ * oldtree if available (reference required) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2101: FILE: fs/autofsng/cachetree.c:55:
+struct mapcache_entry *new_entry(const char *name, unsigned hash, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2101: FILE: fs/autofsng/cachetree.c:55:
+struct mapcache_entry *new_entry(const char *name, unsigned hash, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2102: FILE: fs/autofsng/cachetree.c:56:
+struct mapcache_entry *new_entry(const char *name, unsigned hash, 
+		struct mapcache_tree *oldtree)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2126: FILE: fs/autofsng/cachetree.c:80:
+	if (atomic_dec_and_test(&entry->count)) {
+		kfree(entry);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2134: FILE: fs/autofsng/cachetree.c:88:
+	struct mapcache_treenode *node;
+	node = kmalloc(sizeof(*node), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2140: FILE: fs/autofsng/cachetree.c:94:
+	BUG_ON(!node);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2145: FILE: fs/autofsng/cachetree.c:99:
+static struct mapcache_treenode *__add_node_to_tree(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2156: FILE: fs/autofsng/cachetree.c:110:
+^I^Iif (node_is_left(node, curnode)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2160: FILE: fs/autofsng/cachetree.c:114:
+^I^Ielse $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2169: FILE: fs/autofsng/cachetree.c:123:
+static int add_node_to_tree(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2182: FILE: fs/autofsng/cachetree.c:136:
+/* $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "root"
#2216: FILE: fs/autofsng/cachetree.c:170:
+	while (*root != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2217: FILE: fs/autofsng/cachetree.c:171:
+^I^Istruct mapcache_treenode *node = rb_entry(*root, $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2229: FILE: fs/autofsng/cachetree.c:183:
+	if (atomic_dec_and_test(&tree->count)) {
+		release_tree(tree);
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2238: FILE: fs/autofsng/cachetree.c:192:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#2249: FILE: fs/autofsng/cachetree.c:203:
+		h = (h + (unsigned int) *name++) * hash_mult;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237707.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 186 errors, 260 warnings, 65 checks, 2119 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237707.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
