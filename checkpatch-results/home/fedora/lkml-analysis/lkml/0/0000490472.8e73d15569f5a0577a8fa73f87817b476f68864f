WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
     register_dynamic_syscall("attrctl", DYNAMIC_SYSCALL_FUNC(sys_attrctl)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: fs/proc/proc_misc.c:325:
+static int dynamic_syscalls_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: fs/proc/proc_misc.c:328:
+	int len = get_dynamic_syscalls_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: kernel/dynamic_syscalls.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#131: FILE: kernel/dynamic_syscalls.c:2:
+ *  kernel/dynamic_syscalls.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#159: FILE: kernel/dynamic_syscalls.c:30:
+static const char *dynamic_syscalls_name[DYNAMIC_SYSCALL_LAST-DYNAMIC_SYSCALL_FIRST+1];
                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#159: FILE: kernel/dynamic_syscalls.c:30:
+static const char *dynamic_syscalls_name[DYNAMIC_SYSCALL_LAST-DYNAMIC_SYSCALL_FIRST+1];
                                                                                    ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#160: FILE: kernel/dynamic_syscalls.c:31:
+extern DYNAMIC_SYSCALL_T sys_call_table[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: kernel/dynamic_syscalls.c:44:
+	int i, len;
+	len = sprintf(page, "Dynamic syscall numbers:\n");

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(dynamic_syscalls_name)
#175: FILE: kernel/dynamic_syscalls.c:46:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#175: FILE: kernel/dynamic_syscalls.c:46:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#177: FILE: kernel/dynamic_syscalls.c:48:
+			len += sprintf(page+len, "%d %s 0x%" DYNAMIC_SYSCALL_FMT "x\n",
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: kernel/dynamic_syscalls.c:49:
+				i+DYNAMIC_SYSCALL_FIRST,
 				 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#180: FILE: kernel/dynamic_syscalls.c:51:
+				sys_call_table[i+DYNAMIC_SYSCALL_FIRST]);
 				                ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#198: FILE: kernel/dynamic_syscalls.c:69:
+ * Returns: < 0, an error occured, the return value is the error number.
                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: kernel/dynamic_syscalls.c:76:
+	int i, ret = -EBUSY;
+	write_lock(&dynamic_syscalls_lock);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(dynamic_syscalls_name)
#206: FILE: kernel/dynamic_syscalls.c:77:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#206: FILE: kernel/dynamic_syscalls.c:77:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {
 	                                             ^

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#207: FILE: kernel/dynamic_syscalls.c:78:
+		if (dynamic_syscalls_name[i] == NULL && sys_call_table[i+DYNAMIC_SYSCALL_FIRST] == DYNAMIC_SYSCALL_EMPTY) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#207: FILE: kernel/dynamic_syscalls.c:78:
+		if (dynamic_syscalls_name[i] == NULL && sys_call_table[i+DYNAMIC_SYSCALL_FIRST] == DYNAMIC_SYSCALL_EMPTY) {
 		                                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dynamic_syscalls_name[i]"
#207: FILE: kernel/dynamic_syscalls.c:78:
+		if (dynamic_syscalls_name[i] == NULL && sys_call_table[i+DYNAMIC_SYSCALL_FIRST] == DYNAMIC_SYSCALL_EMPTY) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#209: FILE: kernel/dynamic_syscalls.c:80:
+			sys_call_table[i+DYNAMIC_SYSCALL_FIRST] = DYNAMIC_SYSCALL_FUNCADDR(func);
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: kernel/dynamic_syscalls.c:81:
+			ret = i+DYNAMIC_SYSCALL_FIRST+DYNAMIC_SYSCALL_OFFSET;
 			       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: kernel/dynamic_syscalls.c:81:
+			ret = i+DYNAMIC_SYSCALL_FIRST+DYNAMIC_SYSCALL_OFFSET;
 			                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: kernel/dynamic_syscalls.c:90:
+ * modules.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: include/linux/dynamic_syscalls.h:1:
+#ifndef _LINUX_DYNAMIC_SYSCALLS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/linux/dynamic_syscalls.h:4:
+extern int get_dynamic_syscalls_list(char *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/dynamic_syscalls.h:5:
+extern int register_dynamic_syscall(const char *name, void (*func)(void));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#233: FILE: include/linux/dynamic_syscalls.h:7:
+#define DYNAMIC_SYSCALL_FUNC(f) (void (*)(void))(&f)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#233: FILE: include/linux/dynamic_syscalls.h:7:
+#define DYNAMIC_SYSCALL_FUNC(f) (void (*)(void))(&f)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#240: FILE: include/asm-ia64/dynamic_syscalls.h:1:
+#ifndef _ASM_DYNAMIC_SYSCALLS_H

ERROR:SPACING: space required after that ';' (ctx:VxV)
#259: FILE: include/asm-ia64/dynamic_syscalls.h:20:
+#define DYNAMIC_SYSCALL_FUNCADDR(f)	({DYNAMIC_SYSCALL_T *fp = (DYNAMIC_SYSCALL_T *)(f); fp[0];})
                                    	                                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: include/asm-ia64/dynamic_syscalls.h:24:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1
                             		           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#263: FILE: include/asm-ia64/dynamic_syscalls.h:24:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/asm-ia64/dynamic_syscalls.h:26:
+extern long ia64_ni_syscall(void);	/* No need to define parameters */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#272: FILE: include/asm-i386/dynamic_syscalls.h:1:
+#ifndef _ASM_DYNAMIC_SYSCALLS_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#284: FILE: include/asm-i386/dynamic_syscalls.h:13:
+#define DYNAMIC_SYSCALL_FUNCADDR(f)	(DYNAMIC_SYSCALL_T)(f)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#288: FILE: include/asm-i386/dynamic_syscalls.h:17:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1
                             		           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#288: FILE: include/asm-i386/dynamic_syscalls.h:17:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/asm-i386/dynamic_syscalls.h:19:
+extern long sys_ni_syscall(void);	/* No need to define parameters */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000490472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 14 warnings, 20 checks, 186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000490472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
