WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
During execve(), we seem to have a window between flush_thread() and start_thread() where %gs = 0x33, but cpu_gdt_table[cpu][6] == 0. This causes an unnecessary #GP fault on __switch_to() if there is a context switch during the window. But most people are not noticing it because of the fixup in loadsegment().

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#41: FILE: i386/kernel/process.c:766:
        if (unlikely(prev->fs | prev->gs | next->fs | next->gs)) {
[...]
+                if ((next->gs == 0x33)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#42: FILE: i386/kernel/process.c:767:
+#if 1

ERROR:CODE_INDENT: code indent should use tabs where possible
#43: FILE: i386/kernel/process.c:768:
+                if ((next->gs == 0x33)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#43: FILE: i386/kernel/process.c:768:
+                if ((next->gs == 0x33)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next->gs == 0x33'
#43: FILE: i386/kernel/process.c:768:
+                if ((next->gs == 0x33)
+                        && (cpu_gdt_table[cpu][6].a == 0)
+                        && (cpu_gdt_table[cpu][6].b == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_gdt_table[cpu][6].a == 0'
#43: FILE: i386/kernel/process.c:768:
+                if ((next->gs == 0x33)
+                        && (cpu_gdt_table[cpu][6].a == 0)
+                        && (cpu_gdt_table[cpu][6].b == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_gdt_table[cpu][6].b == 0'
#43: FILE: i386/kernel/process.c:768:
+                if ((next->gs == 0x33)
+                        && (cpu_gdt_table[cpu][6].a == 0)
+                        && (cpu_gdt_table[cpu][6].b == 0))

ERROR:CODE_INDENT: code indent should use tabs where possible
#44: FILE: i386/kernel/process.c:769:
+                        && (cpu_gdt_table[cpu][6].a == 0)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#44: FILE: i386/kernel/process.c:769:
+                if ((next->gs == 0x33)
+                        && (cpu_gdt_table[cpu][6].a == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#44: FILE: i386/kernel/process.c:769:
+                        && (cpu_gdt_table[cpu][6].a == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#45: FILE: i386/kernel/process.c:770:
+                        && (cpu_gdt_table[cpu][6].b == 0))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#45: FILE: i386/kernel/process.c:770:
+                        && (cpu_gdt_table[cpu][6].a == 0)
+                        && (cpu_gdt_table[cpu][6].b == 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#45: FILE: i386/kernel/process.c:770:
+                        && (cpu_gdt_table[cpu][6].b == 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#46: FILE: i386/kernel/process.c:771:
+                        BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#46: FILE: i386/kernel/process.c:771:
+                        BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#46: FILE: i386/kernel/process.c:771:
+                        BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218622.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 5 checks, 12 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218622.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
