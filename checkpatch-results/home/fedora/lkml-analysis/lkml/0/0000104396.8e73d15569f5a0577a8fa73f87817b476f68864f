WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#106: FILE: fs/mpage.c:184:
+	unsigned nblocks, i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#122: FILE: fs/mpage.c:200:
+		unsigned map_offset = block_in_file - *first_logical_block;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: fs/mpage.c:201:
+		unsigned last = nblocks - map_offset;

CHECK:BRACES: braces {} should be used on all arms of this statement
#126: FILE: fs/mpage.c:204:
+			if (i == last) {
[...]
+			} else if (page_block == blocks_per_page)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#186: FILE: fs/mpage.c:257:
+		if (page_block && blocks[page_block-1] != map_bh->b_blocknr-1)
 		                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#186: FILE: fs/mpage.c:257:
+		if (page_block && blocks[page_block-1] != map_bh->b_blocknr-1)
 		                                                           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#192: FILE: fs/mpage.c:261:
+			if (i == nblocks) {
[...]
+			} else if (page_block == blocks_per_page)
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'first_hole != blocks_per_page'
#210: FILE: fs/mpage.c:309:
+	if (buffer_boundary(map_bh) || (first_hole != blocks_per_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: fs/mpage.c:424:
+	bio = do_mpage_readpage(bio, page, 1, &last_block_in_bio,
+			&map_bh, &first_logical_block, &map_valid,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104396.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 3 warnings, 6 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104396.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
