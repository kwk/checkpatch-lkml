WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#23: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#	           ChangeSet	1.612   -> 1.613  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
#	        kernel/sys.c	1.28    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#	     kernel/sysctl.c	1.30    -> 1.31   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#	include/linux/security.h	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	       mm/swapfile.c	1.56    -> 1.57   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	    security/dummy.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	       kernel/time.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	security/capability.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	arch/i386/kernel/ioport.c	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	       mm/oom_kill.c	1.16    -> 1.17   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	arch/ia64/ia32/sys_ia32.c	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	     kernel/printk.c	1.14    -> 1.15   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# 02/09/26	sds@tislabs.com	1.613

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# [PATCH] LSM: misc hooks addition

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# The patch below (relative to the LSM IPC hooks patch) adds the LSM hooks

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# for miscellaneous system operations (module_*, sethostname, setdomainname,

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# reboot, ioperm/iopl, sysctl, swapon/swapoff, syslog, settime).  It also

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# replaces the hardcoded capability tests in the OOM killer code with

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# appropriate calls to the LSM capable hook, preserving the original behavior

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# as long as the capabilities module is enabled.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#54: 
--- a/arch/i386/kernel/ioport.c	Thu Sep 26 13:23:55 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: arch/i386/kernel/ioport.c:66:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/i386/kernel/ioport.c:66:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/i386/kernel/ioport.c:67:
+ ^Iret = security_ops->ioperm(from, num, turn_on);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: arch/i386/kernel/ioport.c:67:
+ ^Iret = security_ops->ioperm(from, num, turn_on);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/i386/kernel/ioport.c:67:
+ ^Iret = security_ops->ioperm(from, num, turn_on);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: arch/i386/kernel/ioport.c:68:
+ ^Iif (ret) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#71: FILE: arch/i386/kernel/ioport.c:68:
+ ^Iif (ret) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: arch/i386/kernel/ioport.c:68:
+ ^Iif (ret) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#71: FILE: arch/i386/kernel/ioport.c:68:
+ 	if (ret) {
+ 		return ret;
+ 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: arch/i386/kernel/ioport.c:69:
+ ^I^Ireturn ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#72: FILE: arch/i386/kernel/ioport.c:69:
+ ^I^Ireturn ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/i386/kernel/ioport.c:69:
+ ^I^Ireturn ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: arch/i386/kernel/ioport.c:70:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#73: FILE: arch/i386/kernel/ioport.c:70:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/i386/kernel/ioport.c:70:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: arch/i386/kernel/ioport.c:71:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/i386/kernel/ioport.c:71:
+ $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#91: FILE: arch/i386/kernel/ioport.c:135:
+	if (retval) {
+		return retval;
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: arch/ia64/ia32/sys_ia32.c:3198:
+	retval = security_ops->iopl(old,level);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#122: FILE: arch/ia64/ia32/sys_ia32.c:3199:
+	if (retval) {
+		return retval;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: include/linux/security.h:585:
+ * ^ICheck permission before initializing a module.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: include/linux/security.h:586:
+ * ^I@mod contains a pointer to the module being initialized.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: include/linux/security.h:592:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: include/linux/security.h:881:
+ *^ISee the syslog(2) manual page for an explanation of the @type values.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: include/linux/security.h:885:
+ *      Check permission to change the system time. $

WARNING:SPACING: Unnecessary space before function pointer arguments
#270: FILE: include/linux/security.h:903:
+	int (*sethostname) (char *hostname);

WARNING:SPACING: Unnecessary space before function pointer arguments
#271: FILE: include/linux/security.h:904:
+	int (*setdomainname) (char *domainname);

WARNING:SPACING: Unnecessary space before function pointer arguments
#272: FILE: include/linux/security.h:905:
+	int (*reboot) (unsigned int cmd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#273: FILE: include/linux/security.h:906:
+	int (*ioperm) (unsigned long from, unsigned long num, int turn_on);

WARNING:SPACING: Unnecessary space before function pointer arguments
#274: FILE: include/linux/security.h:907:
+	int (*iopl) (unsigned int old, unsigned int level);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: include/linux/security.h:921:
+	int (*sysctl) (ctl_table * table, int op);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#282: FILE: include/linux/security.h:921:
+	int (*sysctl) (ctl_table * table, int op);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: include/linux/security.h:925:
+	int (*swapon) (struct swap_info_struct * swap);

WARNING:SPACING: Unnecessary space before function pointer arguments
#286: FILE: include/linux/security.h:925:
+	int (*swapon) (struct swap_info_struct * swap);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: include/linux/security.h:926:
+	int (*swapoff) (struct swap_info_struct * swap);

WARNING:SPACING: Unnecessary space before function pointer arguments
#287: FILE: include/linux/security.h:926:
+	int (*swapoff) (struct swap_info_struct * swap);

WARNING:SPACING: Unnecessary space before function pointer arguments
#290: FILE: include/linux/security.h:929:
+	int (*syslog) (int type);

WARNING:SPACING: Unnecessary space before function pointer arguments
#291: FILE: include/linux/security.h:930:
+	int (*settime) (struct timeval *tv, struct timezone *tz);

WARNING:SPACING: Unnecessary space before function pointer arguments
#300: FILE: include/linux/security.h:1044:
+	int (*module_create) (const char *name, size_t size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#301: FILE: include/linux/security.h:1045:
+	int (*module_initialize) (struct module * mod);

WARNING:SPACING: Unnecessary space before function pointer arguments
#301: FILE: include/linux/security.h:1045:
+	int (*module_initialize) (struct module * mod);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#302: FILE: include/linux/security.h:1046:
+	int (*module_delete) (const struct module * mod);

WARNING:SPACING: Unnecessary space before function pointer arguments
#302: FILE: include/linux/security.h:1046:
+	int (*module_delete) (const struct module * mod);

ERROR:SPACING: space prohibited after that open parenthesis '('
#314: FILE: kernel/printk.c:179:
+	if( error )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#314: FILE: kernel/printk.c:179:
+	if( error )

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: kernel/printk.c:179:
+	if( error )

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#345: FILE: kernel/sys.c:1139:
+	char nodename[__NEW_UTS_LEN+1];
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: kernel/sys.c:1146:
+^Iif (copy_from_user(nodename, name, len)) $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#366: FILE: kernel/sys.c:1155:
+	memcpy(system_utsname.nodename, nodename, len+1);
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#374: FILE: kernel/sys.c:1183:
+	char domainname[__NEW_UTS_LEN+1];
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: kernel/sys.c:1190:
+^Iif (copy_from_user(domainname, name, len)) $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#395: FILE: kernel/sys.c:1199:
+	memcpy(system_utsname.domainname, domainname, len+1);
 	                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: kernel/sysctl.c:431:
+	int error;
+	error = security_ops->sysctl(table, op);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: kernel/sysctl.c:432:
+	if(error) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#408: FILE: kernel/sysctl.c:432:
+	if(error) {
+		return error;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: kernel/time.c:156:
+        error = security_ops->settime(tv, tz);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: kernel/time.c:156:
+        error = security_ops->settime(tv, tz);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: kernel/time.c:157:
+        if (error)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: kernel/time.c:157:
+        if (error)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: kernel/time.c:158:
+                return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: kernel/time.c:158:
+                return error;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: mm/oom_kill.c:91:
+	if (!security_ops->capable(p,CAP_SYS_ADMIN) ||
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: mm/oom_kill.c:92:
+	if (!security_ops->capable(p,CAP_SYS_ADMIN) ||
 				p->uid == 0 || p->euid == 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#457: FILE: mm/oom_kill.c:101:
+	if (!security_ops->capable(p,CAP_SYS_RAWIO))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#466: FILE: mm/oom_kill.c:152:
+	if (!security_ops->capable(p,CAP_SYS_RAWIO)) {
 	                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: security/capability.c:25:
+static int cap_sethostname (char *hostname)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#509: FILE: security/capability.c:30:
+static int cap_setdomainname (char *domainname)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#514: FILE: security/capability.c:35:
+static int cap_reboot (unsigned int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#519: FILE: security/capability.c:40:
+static int cap_ioperm (unsigned long from, unsigned long num, int turn_on)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#524: FILE: security/capability.c:45:
+static int cap_iopl (unsigned int old, unsigned int level)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#536: FILE: security/capability.c:65:
+static int cap_swapon (struct swap_info_struct *swap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: security/capability.c:70:
+static int cap_swapoff (struct swap_info_struct *swap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#553: FILE: security/capability.c:85:
+static int cap_syslog (int type)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#558: FILE: security/capability.c:90:
+static int cap_settime (struct timeval *tv, struct timezone *tz)

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: security/capability.c:92:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: security/capability.c:92:
+        return 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#570: FILE: security/capability.c:158:
+static int cap_sysctl (ctl_table * table, int op)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#570: FILE: security/capability.c:158:
+static int cap_sysctl (ctl_table * table, int op)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#582: FILE: security/capability.c:732:
+static int cap_module_create (const char *name_user, size_t size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#587: FILE: security/capability.c:737:
+static int cap_module_initialize (struct module *mod_user)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#592: FILE: security/capability.c:742:
+static int cap_module_delete (const struct module *mod)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#644: FILE: security/dummy.c:22:
+static int dummy_sethostname (char *hostname)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#649: FILE: security/dummy.c:27:
+static int dummy_setdomainname (char *domainname)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#654: FILE: security/dummy.c:32:
+static int dummy_reboot (unsigned int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#659: FILE: security/dummy.c:37:
+static int dummy_ioperm (unsigned long from, unsigned long num, int turn_on)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#664: FILE: security/dummy.c:42:
+static int dummy_iopl (unsigned int old, unsigned int level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#676: FILE: security/dummy.c:89:
+static int dummy_sysctl (ctl_table * table, int op)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#676: FILE: security/dummy.c:89:
+static int dummy_sysctl (ctl_table * table, int op)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#687: FILE: security/dummy.c:100:
+static int dummy_swapon (struct swap_info_struct *swap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#692: FILE: security/dummy.c:105:
+static int dummy_swapoff (struct swap_info_struct *swap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#704: FILE: security/dummy.c:120:
+static int dummy_syslog (int type)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#709: FILE: security/dummy.c:125:
+static int dummy_settime (struct timeval *tv, struct timezone *tz)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#721: FILE: security/dummy.c:546:
+static int dummy_module_create (const char *name_user, size_t size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#726: FILE: security/dummy.c:551:
+static int dummy_module_initialize (struct module *mod_user)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#731: FILE: security/dummy.c:556:
+static int dummy_module_delete (const struct module *mod)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429506.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 91 warnings, 5 checks, 649 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429506.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
