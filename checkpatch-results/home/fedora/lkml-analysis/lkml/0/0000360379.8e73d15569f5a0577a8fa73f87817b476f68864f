WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .15772-linux-2.5.73/arch/i386/vmlinux.lds.S .15772-linux-2.5.73.updated/arch/i386/vmlinux.lds.S

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: arch/i386/vmlinux.lds.S:72:
+^I*(.initcall.init) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#96: FILE: include/linux/init.h:71:
+struct module_init_exit
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#103: FILE: include/linux/init.h:78:
+struct kernel_init
+{

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#114: FILE: include/linux/init.h:88:
+#define __exitcall(fn)							\
+static inline exitcall_t __unique_id(exit_test)(void) { return fn; }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#135: FILE: include/linux/init.h:92:
+/* Pair of calls: one called at boot, one at exit (ie. never, when not
+   a module).  Unlike module_init, you can have any number of these.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#142: FILE: include/linux/init.h:99:
+	 __attribute__((unused,__section__ (".initcall.init")))	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#142: FILE: include/linux/init.h:99:
+	 __attribute__((unused,__section__ (".initcall.init")))	\
 	                      ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".initcall.init") over __attribute__((__section__(".initcall.init")))
#142: FILE: include/linux/init.h:99:
+	 __attribute__((unused,__section__ (".initcall.init")))	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#142: FILE: include/linux/init.h:99:
+	 __attribute__((unused,__section__ (".initcall.init")))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#143: FILE: include/linux/init.h:100:
+	 __attribute__((unused,__section__ (".initcall.init")))	\
+	= { prio, initfn }

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#193: FILE: include/linux/init.h:167:
+#define module_init(initfn)						\
+	static struct module_init_exit module_init			\
+	 __attribute__ ((unused,__section__ ("__initexit")))	\
+	= { 0, initfn, NULL };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#195: FILE: include/linux/init.h:169:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/linux/init.h:169:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\
 	                       ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__initexit") over __attribute__((__section__("__initexit")))
#195: FILE: include/linux/init.h:169:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#195: FILE: include/linux/init.h:169:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#196: FILE: include/linux/init.h:170:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\
+	= { 0, initfn, NULL };

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#204: FILE: include/linux/init.h:173:
+#define module_exit(exitfn)						\
+	static struct module_init_exit module_exit			\
+	 __attribute__ ((unused,__section__ ("__initexit")))	\
+	= { 0, NULL, exitfn };

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#206: FILE: include/linux/init.h:175:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: include/linux/init.h:175:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\
 	                       ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__initexit") over __attribute__((__section__("__initexit")))
#206: FILE: include/linux/init.h:175:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#206: FILE: include/linux/init.h:175:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#207: FILE: include/linux/init.h:176:
+	 __attribute__ ((unused,__section__ ("__initexit")))	\
+	= { 0, NULL, exitfn };

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#212: FILE: include/linux/init.h:181:
+/* Pair of calls: one called at init, one at exit.  Unlike
+   module_init/module_exit, you can have any number of these: ordering is

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: include/linux/init.h:182:
+   controlled by priority, in ascending order: module_init is 0. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#216: FILE: include/linux/init.h:185:
+	 __attribute__ ((unused,__section__ ("__initexit")))		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: include/linux/init.h:185:
+	 __attribute__ ((unused,__section__ ("__initexit")))		\
 	                       ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__initexit") over __attribute__((__section__("__initexit")))
#216: FILE: include/linux/init.h:185:
+	 __attribute__ ((unused,__section__ ("__initexit")))		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#216: FILE: include/linux/init.h:185:
+	 __attribute__ ((unused,__section__ ("__initexit")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#217: FILE: include/linux/init.h:186:
+	 __attribute__ ((unused,__section__ ("__initexit")))		\
+	= { prio, initfn, exitfn }

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: init/main.c:491:
+		printk("calling initcall 0x%p %s\n", *call,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: init/main.c:504:
+		printk("error in initcall at 0x%p %s: "

WARNING:SPLIT_STRING: quoted string split across lines
#312: FILE: init/main.c:505:
+		printk("error in initcall at 0x%p %s: "
+		       "returned with %s\n", *call,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#342: FILE: init/main.c:522:
+		if (i->prio >= min_prio_todo
+		    && (!best || i->prio < best->prio))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#356: FILE: init/main.c:536:
+			printk("Doing priority %i initcalls:\n", next->prio);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#362: FILE: init/main.c:542:
+		min_prio_todo = next->prio+1;
 		                          ^

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#429: FILE: kernel/module.c:714:
+	/* Final destruction now noone is using it, reverse priority order. */
 	                         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#456: FILE: kernel/module.c:1361:
+		for (j = i; j+1 < num; j++) {
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#457: FILE: kernel/module.c:1362:
+			if (ie_pairs[j].prio > ie_pairs[j+1].prio) {
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#459: FILE: kernel/module.c:1364:
+				ie_pairs[j] = ie_pairs[j+1];
 				                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#460: FILE: kernel/module.c:1365:
+				ie_pairs[j+1] = tmp;
 				          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#544: FILE: kernel/module.c:1750:
+	/* Init routine failed: abort.  Try to protect us from
+	   buggy refcounters. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#544: FILE: kernel/module.c:1750:
+	   buggy refcounters. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#549: FILE: kernel/module.c:1755:
+		printk(KERN_ERR "%s: module is now stuck!\n", mod->name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360379.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 27 warnings, 10 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360379.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
