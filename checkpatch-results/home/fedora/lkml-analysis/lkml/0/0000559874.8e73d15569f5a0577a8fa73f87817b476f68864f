WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#66: FILE: fs/buffer.c:101:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;
                                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: fs/buffer.c:101:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#66: FILE: fs/buffer.c:101:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#68: FILE: fs/buffer.c:103:
+static struct address_space_operations anon_space_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#69: FILE: fs/buffer.c:104:
+	writepage: block_write_anon_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#70: FILE: fs/buffer.c:105:
+	sync_page: block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#70: FILE: fs/buffer.c:105:
+	sync_page: block_sync_page,

WARNING:SPACING: space prohibited before semicolon
#71: FILE: fs/buffer.c:106:
+} ;

WARNING:INDENTED_LABEL: labels should not be indented
#73: FILE: fs/buffer.c:108:
+	pages: { &anon_space_mapping.pages, &anon_space_mapping.pages },

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#74: FILE: fs/buffer.c:109:
+	a_ops: &anon_space_ops,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#74: FILE: fs/buffer.c:109:
+	a_ops: &anon_space_ops,

WARNING:SPACING: space prohibited before semicolon
#75: FILE: fs/buffer.c:110:
+} ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#84: FILE: fs/buffer.c:176:
+/* just for use with anon pages, or pages that don't provide their own
+** writepage func.  We just want to write bh, not the whole page, so we

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#87: FILE: fs/buffer.c:179:
+static int __dirty_list_writepage(struct page *page, struct buffer_head *bh) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#88: FILE: fs/buffer.c:180:
+	int other_dirty = 0 ;

WARNING:SPACING: space prohibited before semicolon
#89: FILE: fs/buffer.c:181:
+	struct buffer_head *cur ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#92: FILE: fs/buffer.c:184:
+	/* check for other dirty buffers on this page.  If there are none,
+	** clear the page dirty bit

WARNING:SPACING: space prohibited before semicolon
#94: FILE: fs/buffer.c:186:
+	cur = bh->b_this_page ;

ERROR:SPACING: space required before the open parenthesis '('
#95: FILE: fs/buffer.c:187:
+	while(cur != bh) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: fs/buffer.c:188:
+^I^Iother_dirty += buffer_dirty(cur) ;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#96: FILE: fs/buffer.c:188:
+		other_dirty += buffer_dirty(cur) ;	

WARNING:SPACING: space prohibited before semicolon
#97: FILE: fs/buffer.c:189:
+		cur = cur->b_this_page ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: fs/buffer.c:190:
+^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#99: FILE: fs/buffer.c:191:
+	if (other_dirty == 0) {
+		ClearPageDirty(page) ;
+	} 

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#100: FILE: fs/buffer.c:192:
+		ClearPageDirty(page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: fs/buffer.c:193:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: fs/buffer.c:195:
+^I/* we want the page available for locking again right away.  $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#104: FILE: fs/buffer.c:196:
+	/* we want the page available for locking again right away.  
+	** someone walking the dirty buffer list might find another

WARNING:SPACING: space prohibited before semicolon
#108: FILE: fs/buffer.c:200:
+	atomic_inc(&bh->b_count) ;

WARNING:SPACING: space prohibited before semicolon
#109: FILE: fs/buffer.c:201:
+	ll_rw_block(WRITE, 1, &bh) ;

WARNING:SPACING: space prohibited before semicolon
#110: FILE: fs/buffer.c:202:
+	atomic_dec(&bh->b_count) ;

WARNING:SPACING: space prohibited before semicolon
#111: FILE: fs/buffer.c:203:
+	UnlockPage(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#111: FILE: fs/buffer.c:203:
+	UnlockPage(page) ;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited before semicolon
#112: FILE: fs/buffer.c:204:
+	return 0 ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#116: FILE: fs/buffer.c:208:
+/*
+** util function for sync_buffers and flush_dirty_buffers

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#120: FILE: fs/buffer.c:212:
+static int dirty_list_writepage(struct page *page, struct buffer_head *bh) {

CHECK:SPACING: No space is necessary after a cast
#121: FILE: fs/buffer.c:213:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#121: FILE: fs/buffer.c:213:
+	int (*writepage)(struct page *)  ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#121: FILE: fs/buffer.c:213:
+	int (*writepage)(struct page *)  ;

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited before semicolon
#122: FILE: fs/buffer.c:214:
+	int ret ;

WARNING:SPACING: space prohibited before semicolon
#126: FILE: fs/buffer.c:218:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#127: FILE: fs/buffer.c:219:
+		return 0 ;

WARNING:SPACING: space prohibited before semicolon
#129: FILE: fs/buffer.c:221:
+	writepage = page->mapping->a_ops->writepage ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#132: FILE: fs/buffer.c:224:
+	/* For anon pages, and pages that don't have a writepage
+	** func, just write this one dirty buffer.  __dirty_list_writepage

WARNING:SPACING: space prohibited before semicolon
#137: FILE: fs/buffer.c:229:
+		writepage = anon_space_ops.writepage ;

WARNING:SPACING: space prohibited before semicolon
#138: FILE: fs/buffer.c:230:
+		return __dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#141: FILE: fs/buffer.c:233:
+	ClearPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#142: FILE: fs/buffer.c:234:
+	ret = writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#144: FILE: fs/buffer.c:236:
+		SetPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#145: FILE: fs/buffer.c:237:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#147: FILE: fs/buffer.c:239:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#157: FILE: fs/buffer.c:256:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#166: FILE: fs/buffer.c:312:
+			page = bh->b_page ;

WARNING:SPACING: space prohibited before semicolon
#167: FILE: fs/buffer.c:313:
+			page_cache_get(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#168: FILE: fs/buffer.c:314:
+			if (TryLockPage(page)) {

WARNING:SPACING: space prohibited before semicolon
#170: FILE: fs/buffer.c:316:
+					retry = 1 ;

WARNING:SPACING: space prohibited before semicolon
#171: FILE: fs/buffer.c:317:
+					continue ;

WARNING:SPACING: space prohibited before semicolon
#174: FILE: fs/buffer.c:320:
+				wait_on_page(page) ;

WARNING:SPACING: space prohibited before semicolon
#175: FILE: fs/buffer.c:321:
+				page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#176: FILE: fs/buffer.c:322:
+				goto repeat ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/buffer.c:326:
+^I^I^I/* if the writepage func returns 1, it is $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#183: FILE: fs/buffer.c:327:
+			/* if the writepage func returns 1, it is 
+			** responsible for marking the buffers dirty

WARNING:SPACING: space prohibited before semicolon
#187: FILE: fs/buffer.c:331:
+			dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#188: FILE: fs/buffer.c:332:
+			page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#206: FILE: fs/buffer.c:951:
+	struct inode tmp ;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: fs/buffer.c:953:
+	struct page * page ;

WARNING:SPACING: space prohibited before semicolon
#208: FILE: fs/buffer.c:953:
+	struct page * page ;

WARNING:SPACING: space prohibited before semicolon
#209: FILE: fs/buffer.c:954:
+	int ret ;

WARNING:SPACING: space prohibited before semicolon
#223: FILE: fs/buffer.c:968:
+				page = bh->b_page ;

WARNING:SPACING: space prohibited before semicolon
#224: FILE: fs/buffer.c:969:
+				page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#229: FILE: fs/buffer.c:972:
+				LockPage(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <LockPage>
#229: FILE: fs/buffer.c:972:
+				LockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#230: FILE: fs/buffer.c:973:
+				ret = dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#231: FILE: fs/buffer.c:974:
+				page_cache_release(page) ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#236: FILE: fs/buffer.c:979:
+				/* if the writepage func decided to skip
+				** this page, we have to put it back onto

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: fs/buffer.c:980:
+^I^I^I^I** the dirty buffer list.  we add onto the $

WARNING:SPACING: space prohibited before semicolon
#242: FILE: fs/buffer.c:985:
+					list_del(&bh->b_inode_buffers) ;

WARNING:SPACING: space prohibited before semicolon
#244: FILE: fs/buffer.c:987:
+						      &inode->i_dirty_buffers) ;

WARNING:SPACING: space prohibited before semicolon
#245: FILE: fs/buffer.c:988:
+					bh->b_inode = inode ;

WARNING:SPACING: space prohibited before semicolon
#257: FILE: fs/buffer.c:1220:
+		SetPageDirty(bh->b_page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: fs/buffer.c:1597:
+static int block_write_anon_page(struct page *page) $

WARNING:SPACING: space prohibited before semicolon
#269: FILE: fs/buffer.c:1600:
+	int i, nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#270: FILE: fs/buffer.c:1601:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#271: FILE: fs/buffer.c:1602:
+	int ret = 0 ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#274: FILE: fs/buffer.c:1605:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#277: FILE: fs/buffer.c:1608:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#277: FILE: fs/buffer.c:1608:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#287: FILE: fs/buffer.c:1618:
+				clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#289: FILE: fs/buffer.c:1620:
+				arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#291: FILE: fs/buffer.c:1622:
+				partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#292: FILE: fs/buffer.c:1623:
+				unlock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#295: FILE: fs/buffer.c:1626:
+			partial = 1 ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#301: FILE: fs/buffer.c:1632:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#302: FILE: fs/buffer.c:1633:
+		submit_bh(WRITE, arr[i]) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#307: FILE: fs/buffer.c:1638:
+	if (nr == 0) {
+		UnlockPage(page) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#308: FILE: fs/buffer.c:1639:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#310: FILE: fs/buffer.c:1641:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#320: FILE: fs/buffer.c:1653:
+	int nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#321: FILE: fs/buffer.c:1654:
+	struct buffer_head *arr[MAX_BUF_PER_PAGE] ;

WARNING:SPACING: space prohibited before semicolon
#322: FILE: fs/buffer.c:1655:
+	int page_ok = Page_Uptodate(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#322: FILE: fs/buffer.c:1655:
+	int page_ok = Page_Uptodate(page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: fs/buffer.c:1691:
+^I^I^Iarr[nr++] = bh ; $

WARNING:SPACING: space prohibited before semicolon
#349: FILE: fs/buffer.c:1691:
+			arr[nr++] = bh ; 

WARNING:SPACING: space prohibited before semicolon
#351: FILE: fs/buffer.c:1693:
+			partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#360: FILE: fs/buffer.c:1701:
+		bh = arr[i] ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: fs/buffer.c:1707:
+^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#375: FILE: fs/buffer.c:1709:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#376: FILE: fs/buffer.c:1710:
+		submit_bh(WRITE, arr[i]) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: fs/buffer.c:1713:
+^Iif (nr == 0) $

WARNING:SPACING: space prohibited before semicolon
#380: FILE: fs/buffer.c:1714:
+		UnlockPage(page) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: fs/buffer.c:1842:
+static int __block_dirty_range(struct inode *inode, struct page *page,
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#397: FILE: fs/buffer.c:1842:
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#397: FILE: fs/buffer.c:1842:
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#399: FILE: fs/buffer.c:1844:
+	unsigned block_start, block_end;

WARNING:SPACING: space prohibited before semicolon
#400: FILE: fs/buffer.c:1845:
+	int partial = 0 ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#401: FILE: fs/buffer.c:1846:
+	unsigned blocksize;

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: fs/buffer.c:1851:
+	for(bh = head = page->buffers, block_start = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#408: FILE: fs/buffer.c:1853:
+	    block_start=block_end, bh = bh->b_this_page) {
 	               ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#415: FILE: fs/buffer.c:1860:
+			if (!atomic_set_buffer_dirty(bh)) {
+				buffer_insert_inode_queue(bh, inode);
+			}

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#422: FILE: fs/buffer.c:1867:
+	 * uptodate then we can optimize away a bogus readpage() for
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#423: FILE: fs/buffer.c:1868:
+	 * the next read(). Here we 'discover' wether the page went
 	                                       ^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#424: FILE: fs/buffer.c:1869:
+	 * uptodate as a result of this (potentially partial) write.
 	   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#442: FILE: fs/buffer.c:2168:
+		/* this will just set the dirty bits for block_write_full_page
+		** it is only safe because we have the page locked and

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: fs/buffer.c:2174:
+		__block_dirty_range(inode,page,0,offset);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: fs/buffer.c:2174:
+		__block_dirty_range(inode,page,0,offset);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: fs/buffer.c:2174:
+		__block_dirty_range(inode,page,0,offset);
 		                                ^

WARNING:SPACING: space prohibited before semicolon
#450: FILE: fs/buffer.c:2176:
+		err = __block_write_full_page(inode, page, get_block) ;

WARNING:SPACING: space prohibited before semicolon
#466: FILE: fs/buffer.c:2473:
+	unsigned long index ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#475: FILE: fs/buffer.c:2490:
+	/* don't put this buffer head on the free list until the
+	** page is setup.  Is there a better index to use?  Would 0

WARNING:SPACING: space prohibited before semicolon
#479: FILE: fs/buffer.c:2494:
+	index = atomic_read(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#481: FILE: fs/buffer.c:2496:
+	add_to_page_cache_locked(page, &anon_space_mapping, index) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#516: FILE: fs/buffer.c:2553:
+		if (buffer_locked(p) && wait > 1) {
+			__wait_on_buffer(p);
+		} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: fs/buffer.c:2555:
+^I^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#526: FILE: fs/buffer.c:2618:
+	if (page->mapping == &anon_space_mapping) {
+		atomic_dec(&buffermem_pages) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#527: FILE: fs/buffer.c:2619:
+		atomic_dec(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#536: FILE: fs/buffer.c:2799:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#545: FILE: fs/buffer.c:2817:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#560: FILE: fs/buffer.c:2830:
+		page = bh->b_page ;

WARNING:SPACING: space prohibited before semicolon
#561: FILE: fs/buffer.c:2831:
+		page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#563: FILE: fs/buffer.c:2833:
+			page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#564: FILE: fs/buffer.c:2834:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#566: FILE: fs/buffer.c:2836:
+		spin_unlock(&lru_list_lock) ;

WARNING:SPACING: space prohibited before semicolon
#567: FILE: fs/buffer.c:2837:
+		dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#568: FILE: fs/buffer.c:2838:
+		page_cache_release(page) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 115 warnings, 6 checks, 539 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
