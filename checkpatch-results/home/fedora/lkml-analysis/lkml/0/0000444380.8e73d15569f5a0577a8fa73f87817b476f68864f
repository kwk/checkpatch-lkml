WARNING:TYPO_SPELLING: 'lastest' may be misspelled - perhaps 'latest'?
#22: 
Here's the lastest version of the lockassert patch.  It includes:
           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'arcitectures' may be misspelled - perhaps 'architectures'?
#26: 
  o MUST_HOLD_RWSEM for arcitectures that use rwsem-spinlock.h
                        ^^^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -Naur -X /home/jbarnes/dontdiff linux-2.5.28/fs/inode.c linux-2.5.28-lockassert/fs/inode.c

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#68: FILE: include/asm-ia64/semaphore.h:31:
+# define MUST_HOLD_SEM(sem)		do { BUG_ON(atomic_read(sem->count)); } while(0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#68: FILE: include/asm-ia64/semaphore.h:31:
+# define MUST_HOLD_SEM(sem)		do { BUG_ON(atomic_read(sem->count)); } while(0);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sem' may be better as '(sem)' to avoid precedence issues
#68: FILE: include/asm-ia64/semaphore.h:31:
+# define MUST_HOLD_SEM(sem)		do { BUG_ON(atomic_read(sem->count)); } while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#68: FILE: include/asm-ia64/semaphore.h:31:
+# define MUST_HOLD_SEM(sem)		do { BUG_ON(atomic_read(sem->count)); } while(0);

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#68: FILE: include/asm-ia64/semaphore.h:31:
+# define MUST_HOLD_SEM(sem)		do { BUG_ON(atomic_read(sem->count)); } while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: include/asm-ia64/semaphore.h:33:
+# define MUST_HOLD_SEM(sem)		do { } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#81: FILE: include/asm-ia64/spinlock.h:112:
+#define rwlock_is_locked(x) ((x)->read_counter != 0 || (x)->write_lock != 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: include/linux/rwsem-spinlock.h:50:
+#define MUST_HOLD_RWSEM(sem)		BUG_ON(!sem->activity))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#93: FILE: include/linux/rwsem-spinlock.h:50:
+#define MUST_HOLD_RWSEM(sem)		BUG_ON(!sem->activity))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sem' may be better as '(sem)' to avoid precedence issues
#93: FILE: include/linux/rwsem-spinlock.h:50:
+#define MUST_HOLD_RWSEM(sem)		BUG_ON(!sem->activity))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#127: FILE: include/linux/spinlock.h:127:
+#define MUST_HOLD(lock)			BUG_ON(!spin_is_locked(lock))

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#127: FILE: include/linux/spinlock.h:127:
+#define MUST_HOLD(lock)			BUG_ON(!spin_is_locked(lock))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: include/linux/spinlock.h:128:
+#define MUST_HOLD_RW(lock)		BUG_ON(!rwlock_is_locked(lock))

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: include/linux/spinlock.h:130:
+#define MUST_HOLD(lock)			do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#131: FILE: include/linux/spinlock.h:131:
+#define MUST_HOLD_RW(lock)		do { } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 10 warnings, 3 checks, 73 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
