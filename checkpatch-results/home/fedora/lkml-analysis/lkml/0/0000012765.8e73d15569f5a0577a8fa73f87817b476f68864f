WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This patch contains helper functions used through the rest of the code which

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/unionfs/commonfops.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: fs/unionfs/commonfops.c:42:
+	sprintf(name, ".unionfs%*.*lx",
+			i_inosize, i_inosize, hidden_dentry->d_inode->i_ino);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#95: FILE: fs/unionfs/commonfops.c:52:
+		printk(KERN_DEBUG "unionfs: trying to rename %s to %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: fs/unionfs/commonfops.c:53:
+		printk(KERN_DEBUG "unionfs: trying to rename %s to %s\n",
+				dentry->d_name.name, name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp_dentry->d_inode"
#104: FILE: fs/unionfs/commonfops.c:61:
+	} while (tmp_dentry->d_inode != NULL);	/* need negative dentry */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#122: FILE: fs/unionfs/commonfops.c:79:
+ * array */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: fs/unionfs/commonfops.c:122:
+		hidden_file = dentry_open(hidden_dentry,
+				unionfs_lower_mnt_idx(dentry, bindex),

CHECK:BRACES: braces {} should be used on all arms of this statement
#167: FILE: fs/unionfs/commonfops.c:124:
+		if (IS_ERR(hidden_file)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#170: FILE: fs/unionfs/commonfops.c:127:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: fs/unionfs/commonfops.c:158:
+		atomic_set(&UNIONFS_F(file)->generation,
+			atomic_read(&UNIONFS_I(dentry->d_inode)->generation));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: fs/unionfs/commonfops.c:166:
+	hidden_file = dentry_open(hidden_dentry,
+			unionfs_lower_mnt_idx(dentry, bstart), file->f_flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: fs/unionfs/commonfops.c:189:
+	BUG_ON(!S_ISREG(file->f_dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: fs/unionfs/commonfops.c:194:
+			err = copyup_file(parent_inode, file, bstart,
+					bindex, inode_size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bstart > fbstart(file)'
#244: FILE: fs/unionfs/commonfops.c:201:
+	if (!err && (bstart > fbstart(file))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'stuct' may be misspelled - perhaps 'struct'?
#258: FILE: fs/unionfs/commonfops.c:215:
+/* revalidate the stuct file */
                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: fs/unionfs/commonfops.c:239:
+	BUG_ON(sbgen > dgen);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#287: FILE: fs/unionfs/commonfops.c:244:
+	 * things. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#324: FILE: fs/unionfs/commonfops.c:281:
+		printk(KERN_DEBUG "Doing delayed copyup of a read-write "

WARNING:SPLIT_STRING: quoted string split across lines
#325: FILE: fs/unionfs/commonfops.c:282:
+		printk(KERN_DEBUG "Doing delayed copyup of a read-write "
+				  "file on a read-only branch.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: fs/unionfs/commonfops.c:310:
+		hidden_file = dentry_open(hidden_dentry,
+				unionfs_lower_mnt_idx(file->f_dentry, bindex),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#361: FILE: fs/unionfs/commonfops.c:318:
+		 * we would miss the reference on release. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#387: FILE: fs/unionfs/commonfops.c:344:
+		if (hidden_flags & O_TRUNC) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/unionfs/commonfops.c:351:
+				err = copyup_file(file->f_dentry->d_parent->d_inode,
+						file, bstart, bindex, size);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#399: FILE: fs/unionfs/commonfops.c:356:
+			return err;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: fs/unionfs/commonfops.c:356:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*file->private_data)...) over kzalloc(sizeof(struct unionfs_file_info)...)
#429: FILE: fs/unionfs/commonfops.c:386:
+	file->private_data = kzalloc(sizeof(struct unionfs_file_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#457: FILE: fs/unionfs/commonfops.c:414:
+	 * these hidden file structs */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#516: FILE: fs/unionfs/commonfops.c:473:
+		printk(KERN_DEBUG "Saving rdstate with cookie %u [%d.%lld]\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#564: FILE: fs/unionfs/commonfops.c:521:
+	if ((err = unionfs_file_revalidate(file, 1)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#568: FILE: fs/unionfs/commonfops.c:525:
+	switch (cmd) {
+		case UNIONFS_IOCTL_INCGEN:
[...]
+		case UNIONFS_IOCTL_QUERYFILE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#599: FILE: fs/unionfs/commonfops.c:556:
+	if ((err = unionfs_file_revalidate(file, 1)))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#623: FILE: fs/unionfs/commonfops.c:580:
+
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012765.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 15 warnings, 16 checks, 587 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012765.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
