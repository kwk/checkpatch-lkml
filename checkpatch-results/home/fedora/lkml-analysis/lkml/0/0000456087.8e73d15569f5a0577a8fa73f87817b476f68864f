WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#45: FILE: fs/mpage.c:65:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#54: FILE: fs/mpage.c:74:
+		if (!uptodate)
 		     ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: fs/mpage.c:305:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: fs/mpage.c:312:
+mpage_writepage(struct bio *bio, struct page *page, get_block_t get_block,
+			sector_t *last_block_in_bio, int *ret)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#97: FILE: fs/mpage.c:315:
+	const unsigned blkbits = inode->i_blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#99: FILE: fs/mpage.c:317:
+	const unsigned blocks_per_page = PAGE_CACHE_SIZE >> blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#104: FILE: fs/mpage.c:322:
+	unsigned page_block;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#105: FILE: fs/mpage.c:323:
+	unsigned first_unmapped = blocks_per_page;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#116: FILE: fs/mpage.c:334:
+			BUG_ON(buffer_locked(bh));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#135: FILE: fs/mpage.c:353:
+				if (bh->b_blocknr != blocks[page_block-1] + 1)
 				                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: fs/mpage.c:376:
+	BUG_ON(!PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/mpage.c:387:
+			unmap_underlying_metadata(map_bh.b_bdev,
+						map_bh.b_blocknr);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#171: FILE: fs/mpage.c:389:
+			if (map_bh.b_blocknr != blocks[page_block-1] + 1)
 			                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#188: FILE: fs/mpage.c:406:
+		unsigned offset = inode->i_size & (PAGE_CACHE_SIZE - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: fs/mpage.c:421:
+	if (bio && (bio->bi_idx == bio->bi_vcnt ||
+				*last_block_in_bio != blocks[0] - 1))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#206: FILE: fs/mpage.c:424:
+	if (bio == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#207: FILE: fs/mpage.c:425:
+		unsigned nr_bvecs = MPAGE_BIO_MAX_SIZE / PAGE_CACHE_SIZE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: fs/mpage.c:428:
+		bio = mpage_alloc(bdev, blocks[0] << (blkbits - 9),
+					nr_bvecs, GFP_NOFS);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#211: FILE: fs/mpage.c:429:
+		if (bio == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#222: FILE: fs/mpage.c:440:
+		unsigned buffer_counter = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: fs/mpage.c:455:
+	BUG_ON(PageWriteback(page));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'first_unmapped != blocks_per_page'
#240: FILE: fs/mpage.c:458:
+	if (boundary || (first_unmapped != blocks_per_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: fs/mpage.c:490:
+        while (!list_empty(&mapping->io_pages) && !done) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: fs/mpage.c:490:
+        while (!list_empty(&mapping->io_pages) && !done) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: fs/mpage.c:514:
+		if (page->mapping && TestClearPageDirty(page) &&
+					!PageWriteback(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: fs/mpage.c:525:
+			bio = mpage_writepage(bio, page, get_block,
+					&last_block_in_bio, &ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: include/linux/mpage.h:17:
+int mpage_writeback_mapping(struct address_space *mapping,
+		int *nr_to_write, get_block_t get_block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: fs/buffer.c:1552:
+				unmap_underlying_metadata(bh->b_bdev,
+							bh->b_blocknr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: fs/buffer.c:1694:
+				unmap_underlying_metadata(bh->b_bdev,
+							bh->b_blocknr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: fs/buffer.c:2197:
+				unmap_underlying_metadata(bh.b_bdev,
+							bh.b_blocknr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456087.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 13 warnings, 15 checks, 350 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456087.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
