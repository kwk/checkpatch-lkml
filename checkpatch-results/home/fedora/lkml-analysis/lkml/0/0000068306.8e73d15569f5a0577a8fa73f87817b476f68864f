WARNING:TYPO_SPELLING: 'affinitied' may be misspelled - perhaps 'affinities'?
#158: FILE: Documentation/RCU/torture.txt:39:
+		The number of seconds to keep the test threads affinitied
 		                                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#249: FILE: include/linux/srcu.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#263: FILE: include/linux/srcu.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#264: FILE: include/linux/srcu.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: include/linux/srcu.h:23:
+ * ^I^IDocumentation/RCU/ *.txt$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#282: FILE: include/linux/srcu.h:34:
+	struct mutex mutex;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#367: FILE: kernel/rcutorture.c:74:
+	do { printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#370: FILE: kernel/rcutorture.c:76:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#373: FILE: kernel/rcutorture.c:78:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG "!!! " s "\n", torture_type); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#373: FILE: kernel/rcutorture.c:78:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG "!!! " s "\n", torture_type); } while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#424: FILE: kernel/rcutorture.c:190:
+};
+static struct rcu_torture_ops *cur_ops = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#424: FILE: kernel/rcutorture.c:190:
+static struct rcu_torture_ops *cur_ops = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#502: FILE: kernel/rcutorture.c:272:
+	call_rcu_bh(&p->rtort_rcu, rcu_torture_cb);

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#546: FILE: kernel/rcutorture.c:307:
+	return (srcu_read_lock(&srcu_ctl));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#595: FILE: kernel/rcutorture.c:354:
+	return (cnt);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#610: FILE: kernel/rcutorture.c:369:
+static struct rcu_torture_ops *torture_ops[] =
+	{ &rcu_ops, &rcu_bh_ops, &srcu_ops, NULL };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->stats"
#714: FILE: kernel/rcutorture.c:523:
+	if (cur_ops->stats != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#724: FILE: kernel/rcutorture.c:626:
+	printk(KERN_ALERT "%s" TORTURE_FLAG "--- %s: nreaders=%d "

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->cleanup"
#739: FILE: kernel/rcutorture.c:676:
+	if (cur_ops->cleanup != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops"
#748: FILE: kernel/rcutorture.c:693:
+	for (i = 0; cur_ops = torture_ops[i], cur_ops != NULL; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#750: FILE: kernel/rcutorture.c:695:
+		if (strcmp(torture_type, cur_ops->name) == 0) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur_ops"
#754: FILE: kernel/rcutorture.c:699:
+	if (cur_ops == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#755: FILE: kernel/rcutorture.c:700:
+		printk(KERN_ALERT "rcutorture: invalid torture type: \"%s\"\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->init"
#759: FILE: kernel/rcutorture.c:704:
+	if (cur_ops->init != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#769: FILE: kernel/srcu.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#783: FILE: kernel/srcu.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#784: FILE: kernel/srcu.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#791: FILE: kernel/srcu.c:23:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#817: FILE: kernel/srcu.c:49:
+	sp->per_cpu_ref = (struct srcu_struct_array *)
+			  kmalloc(NR_CPUS * sizeof(*sp->per_cpu_ref),
+				  GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#818: FILE: kernel/srcu.c:50:
+			  kmalloc(NR_CPUS * sizeof(*sp->per_cpu_ref),

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#901: FILE: kernel/srcu.c:133:
+	synchronize_sched();  /* forces memory barriers all around. */

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#918: FILE: kernel/srcu.c:150:
+	synchronize_sched();  /* forces memory barriers all around. */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#933: FILE: kernel/srcu.c:165:
+	return (sp->completed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#936: FILE: kernel/srcu.c:168:
+EXPORT_SYMBOL_GPL(init_srcu_struct);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#937: FILE: kernel/srcu.c:169:
+EXPORT_SYMBOL_GPL(cleanup_srcu_struct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#938: FILE: kernel/srcu.c:170:
+EXPORT_SYMBOL_GPL(srcu_read_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#939: FILE: kernel/srcu.c:171:
+EXPORT_SYMBOL_GPL(srcu_read_unlock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#940: FILE: kernel/srcu.c:172:
+EXPORT_SYMBOL_GPL(synchronize_srcu);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#941: FILE: kernel/srcu.c:173:
+EXPORT_SYMBOL_GPL(srcu_batches_completed);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000068306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 23 warnings, 7 checks, 787 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000068306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
