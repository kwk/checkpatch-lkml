WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
> > > > This leads me to the question, if there are any plans to include the 

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#89: FILE: arch/frv/mb93090-mb00/pci-dma-nommu.c:115:
+EXPORT_SYMBOL(dma_mmap_coherent);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#115: FILE: arch/frv/mb93090-mb00/pci-dma.c:53:
+EXPORT_SYMBOL(dma_mmap_coherent);

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: arch/mips/mm/dma-coherent.c:66:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#138: FILE: arch/mips/mm/dma-coherent.c:72:
+EXPORT_SYMBOL(dma_mmap_noncoherent);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("dma_mmap_noncoherent") over __attribute__((alias("dma_mmap_noncoherent")))
#142: FILE: arch/mips/mm/dma-coherent.c:76:
+	__attribute__((alias("dma_mmap_noncoherent")));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#144: FILE: arch/mips/mm/dma-coherent.c:78:
+EXPORT_SYMBOL(dma_mmap_coherent);

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: arch/mips/mm/dma-ip27.c:71:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#167: FILE: arch/mips/mm/dma-ip27.c:77:
+EXPORT_SYMBOL(dma_mmap_noncoherent);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#176: FILE: arch/mips/mm/dma-ip27.c:86:
+EXPORT_SYMBOL(dma_mmap_coherent);

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: arch/mips/mm/dma-ip32.c:102:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#199: FILE: arch/mips/mm/dma-ip32.c:108:
+EXPORT_SYMBOL(dma_mmap_noncoherent);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#210: FILE: arch/mips/mm/dma-ip32.c:119:
+EXPORT_SYMBOL(dma_mmap_coherent);

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: arch/mips/mm/dma-noncoherent.c:86:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#233: FILE: arch/mips/mm/dma-noncoherent.c:92:
+EXPORT_SYMBOL(dma_mmap_noncoherent);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#244: FILE: arch/mips/mm/dma-noncoherent.c:103:
+EXPORT_SYMBOL(dma_mmap_coherent);

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: arch/parisc/kernel/pci-dma.c:403:
+	unsigned long pfn = (unsigned long)handle >> PAGE_SHIFT;
+	return remap_pfn_range(vma, vma->vm_start,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: arch/sparc/kernel/ioport.c:526:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: include/asm-alpha/dma-mapping.h:58:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:LINE_SPACING: Missing a blank line after declarations
#483: FILE: include/asm-cris/dma-mapping.h:29:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: include/asm-cris/dma-mapping.h:55:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#541: FILE: include/asm-generic/dma-mapping-broken.h:26:
+	BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: include/asm-generic/dma-mapping.h:62:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#588: FILE: include/asm-generic/dma-mapping.h:201:
+	BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: include/asm-i386/dma-mapping.h:26:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:LINE_SPACING: Missing a blank line after declarations
#647: FILE: include/asm-ia64/dma-mapping.h:21:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#686: FILE: include/asm-m32r/dma-mapping.h:1:
+#include <asm-generic/dma-mapping-broken.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: include/asm-powerpc/dma-mapping.h:175:
+	unsigned long pfn = page_to_pfn(virt_to_page(cpu_addr));
+	return remap_pfn_range(vma, vma->vm_start,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#778: FILE: include/asm-sh/dma-mapping.h:15:
+extern int consistent_mmap(struct vm_area_struct *vma, void *vaddr, size_t size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#807: FILE: include/asm-sh64/dma-mapping.h:14:
+extern int consistent_mmap(struct vm_area_struct *vma, void *vaddr,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#829: FILE: include/asm-sh64/dma-mapping.h:54:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: include/asm-x86_64/dma-mapping.h:76:
+extern int dma_mmap_coherent(struct device *dev, struct vm_area_struct *vma,

WARNING:LINE_SPACING: Missing a blank line after declarations
#926: FILE: include/asm-xtensa/dma-mapping.h:41:
+	struct page *page = virt_to_page(bus_to_virt(handle));
+	return remap_pfn_range(vma, vma->vm_start,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000069837.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 28 warnings, 5 checks, 695 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000069837.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
