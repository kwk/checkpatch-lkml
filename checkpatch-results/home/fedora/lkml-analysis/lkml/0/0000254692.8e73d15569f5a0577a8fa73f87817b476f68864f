WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
> Incremental atop the fastcall and wait_on_bit_lock()/test_and_set_bit() fixes.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/fs-writeback.c:261:
+			__wait_on_bit(wqh, &wq, inode_wait,
+							TASK_UNINTERRUPTIBLE);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#77: FILE: include/linux/wait.h:143:
+int FASTCALL(__wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#77: FILE: include/linux/wait.h:143:
+int FASTCALL(__wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'wait_queue_head_t *' should also have an identifier name
#77: FILE: include/linux/wait.h:143:
+int FASTCALL(__wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct wait_bit_queue *' should also have an identifier name
#77: FILE: include/linux/wait.h:143:
+int FASTCALL(__wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#77: FILE: include/linux/wait.h:143:
+int FASTCALL(__wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#78: FILE: include/linux/wait.h:144:
+int FASTCALL(__wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#78: FILE: include/linux/wait.h:144:
+int FASTCALL(__wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'wait_queue_head_t *' should also have an identifier name
#78: FILE: include/linux/wait.h:144:
+int FASTCALL(__wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct wait_bit_queue *' should also have an identifier name
#78: FILE: include/linux/wait.h:144:
+int FASTCALL(__wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#78: FILE: include/linux/wait.h:144:
+int FASTCALL(__wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#93: FILE: kernel/wait.c:155:
+			int (*action)(void *), unsigned mode)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->key.flags'
#126: FILE: kernel/wait.c:186:
+			if ((ret = (*action)(q->key.flags)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#126: FILE: kernel/wait.c:186:
+			if ((ret = (*action)(q->key.flags)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: mm/filemap.c:381:
+		__wait_on_bit(page_waitqueue(page), &wait, sync_page,
+							TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: mm/filemap.c:440:
+	__wait_on_bit_lock(page_waitqueue(page), &wait, sync_page,
+							TASK_UNINTERRUPTIBLE);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 4 checks, 94 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
