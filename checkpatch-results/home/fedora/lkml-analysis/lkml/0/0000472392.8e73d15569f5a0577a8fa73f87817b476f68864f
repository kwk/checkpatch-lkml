WARNING:TYPO_SPELLING: 'trigerring' may be misspelled - perhaps 'triggering'?
#38: 
 3. Only edge trigerring is supported. Actually, I don't think
              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#include <stdio.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#include <sys/ioctl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#include <errno.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#include <string.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#include <linux/sysevq.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#include <sys/socket.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#include <netinet/in.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#define pd(args...)	printf(args)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#define NR_EVS		64

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#104: 
	if ((rv = bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr))) < 0) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: fs/fcntl.c:146:
+	if (evq) sysevq_down(evq);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#258: FILE: fs/fcntl.c:178:
+	if (tofree && evq) sysevq_notify_close(newfd, &rev, &wev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: fs/fcntl.c:187:
+		if (rev) free_sysev(rev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: fs/fcntl.c:188:
+		if (wev) free_sysev(wev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#279: FILE: fs/fcntl.c:200:
+	if (evq) sysevq_up(evq);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#286: FILE: fs/fcntl.c:207:
+	if (evq) sysevq_up(evq);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#312: FILE: fs/open.c:841:
+	if (evq) sysevq_down(evq);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#322: FILE: fs/open.c:851:
+	if (evq) sysevq_notify_close(fd, &rev, &wev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#331: FILE: fs/open.c:860:
+		if (rev) free_sysev(rev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#332: FILE: fs/open.c:861:
+		if (wev) free_sysev(wev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#340: FILE: fs/open.c:869:
+	if (evq) sysevq_up(evq);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/asm-i386/unistd.h:359:
+static inline _syscall2(int,sysevq,unsigned int,cmd,unsigned long,arg)
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/asm-i386/unistd.h:359:
+static inline _syscall2(int,sysevq,unsigned int,cmd,unsigned long,arg)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/asm-i386/unistd.h:359:
+static inline _syscall2(int,sysevq,unsigned int,cmd,unsigned long,arg)
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/asm-i386/unistd.h:359:
+static inline _syscall2(int,sysevq,unsigned int,cmd,unsigned long,arg)
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/asm-i386/unistd.h:359:
+static inline _syscall2(int,sysevq,unsigned int,cmd,unsigned long,arg)
                                                                  ^

WARNING:TYPO_SPELLING: 'Inofficial' may be misspelled - perhaps 'Unofficial'?
#371: FILE: include/linux/major.h:145:
+#define SYSEVQ_MAJOR	164	/* Inofficial */
                     	   	   ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#400: FILE: include/linux/sysevq.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#421: FILE: include/linux/sysevq.h:22:
+typedef struct sysev {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#423: FILE: include/linux/sysevq.h:24:
+	unsigned		flags;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#429: FILE: include/linux/sysevq.h:30:
+typedef struct sysevq_ioctl_arg {

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#430: FILE: include/linux/sysevq.h:31:
+	struct sysev *		in_evs;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#432: FILE: include/linux/sysevq.h:33:
+	struct sysev *		out_evs;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: include/linux/sysevq.h:51:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#458: FILE: include/linux/sysevq.h:59:
+#include <asm/bitops.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#463: FILE: include/linux/sysevq.h:64:
+#define _pdsysevq(args...)	printk(args)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#467: FILE: include/linux/sysevq.h:68:
+#define pdsysevq(args...)	_pdsysevq(__FUNCTION__ ": " args)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#471: FILE: include/linux/sysevq.h:72:
+#define SYSEV_INPUT_MASK	(SYSEV_OP_MASK|SYSEV_PERSIST)
                         	              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#472: FILE: include/linux/sysevq.h:73:
+#define SYSEV_OUTPUT_MASK	(SYSEV_INPUT_MASK|SYSEV_EOF)
                          	                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#481: FILE: include/linux/sysevq.h:82:
+	unsigned		sync_flags;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#482: FILE: include/linux/sysevq.h:83:
+	struct sysevq *		evq;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#483: FILE: include/linux/sysevq.h:84:
+	struct sysev_ops *	ops;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#490: FILE: include/linux/sysevq.h:91:
+	void *			source_data;	/* Source specific data */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#523: FILE: include/linux/sysevq.h:124:
+struct ksysev * alloc_sysev(void);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#554: FILE: include/net/sock.h:685:
+	spinlock_t		sysev_spin;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#569: FILE: include/net/tcp.h:725:
+extern void			tcp_state_change(struct sock *sk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#570: FILE: include/net/tcp.h:726:
+extern void			tcp_data_ready(struct sock *sk, int bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#571: FILE: include/net/tcp.h:727:
+extern void			tcp_error_report(struct sock *sk);

WARNING:LINE_SPACING: Missing a blank line after declarations
#609: FILE: kernel/exit.c:199:
+				struct file *file = files->fd[i];
+				if (file) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: kernel/exit.c:201:
+					struct ksysev *rev, *wev;
+					if (current->sysevq) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#613: FILE: kernel/exit.c:203:
+						if (rev) free_sysev(rev);

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#613: FILE: kernel/exit.c:203:
+						if (rev) free_sysev(rev);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#614: FILE: kernel/exit.c:204:
+						if (wev) free_sysev(wev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#614: FILE: kernel/exit.c:204:
+						if (wev) free_sysev(wev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#681: FILE: kernel/sysevq.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#699: FILE: kernel/sysevq.c:19:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#700: FILE: kernel/sysevq.c:20:
+#include <asm/atomic.h>

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#704: FILE: kernel/sysevq.c:24:
+	struct ksysev *		read_sysev;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#705: FILE: kernel/sysevq.c:25:
+	struct ksysev *		write_sysev;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#712: FILE: kernel/sysevq.c:32:
+	struct evtbl_entry *	evtbl;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#720: FILE: kernel/sysevq.c:40:
+	unsigned		flags;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#726: FILE: kernel/sysevq.c:46:
+static kmem_cache_t *ksysev_cache = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#744: FILE: kernel/sysevq.c:64:
+static struct file_operations sysevq_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#745: FILE: kernel/sysevq.c:65:
+	ioctl:		sysevq_ioctl,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: kernel/sysevq.c:76:
+static struct sysev_ops * sysev_ops[] = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#771: FILE: kernel/sysevq.c:91:
+	printk("sysevq: TeJun Huh / Aratech, Inc. <tejun@aratech.co.kr>\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#775: FILE: kernel/sysevq.c:95:
+__initcall(sysevq_init_once);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#777: FILE: kernel/sysevq.c:97:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#788: FILE: kernel/sysevq.c:108:
+	if ((evq = kmalloc(sizeof(struct sysevq), GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*evq)...) over kmalloc(sizeof(struct sysevq)...)
#788: FILE: kernel/sysevq.c:108:
+	if ((evq = kmalloc(sizeof(struct sysevq), GFP_KERNEL)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#791: FILE: kernel/sysevq.c:111:
+	if ((evtbl = vmalloc(DFL_EVTBL_NR_BYTES)) == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: kernel/sysevq.c:142:
+		DECLARE_WAITQUEUE(wait, current);
+		__set_current_state(TASK_UNINTERRUPTIBLE);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#834: FILE: kernel/sysevq.c:154:
+	oevtbl_sz = evtbl_sz = evq->evtbl_sz;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: kernel/sysevq.c:221:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#906: FILE: kernel/sysevq.c:226:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#911: FILE: kernel/sysevq.c:231:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#926: FILE: kernel/sysevq.c:246:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#931: FILE: kernel/sysevq.c:251:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#936: FILE: kernel/sysevq.c:256:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#947: FILE: kernel/sysevq.c:267:
+	int err;
+	list_add(&ev->all_list, ev->evq->all_head.prev);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#982: FILE: kernel/sysevq.c:302:
+		if ((err = __copy_from_user(&uev, &in_evs[i], sizeof(uev))) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1001: FILE: kernel/sysevq.c:321:
+		if ((err = find_sysev(&uev, &ev, &hint)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1014: FILE: kernel/sysevq.c:334:
+			if ((err = __enq_sysev(ev)) < 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1019: FILE: kernel/sysevq.c:339:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1019: FILE: kernel/sysevq.c:339:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1064: FILE: kernel/sysevq.c:384:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1067: FILE: kernel/sysevq.c:387:
+		int err = 0, i = 0;
+		spin_unlock_bh(&evq->pending_spin);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1079: FILE: kernel/sysevq.c:399:
+				if (test_bit(SYSEV_EOF_NOTIFIED_BIT, &ev->sync_flags)
+				    && !(ev->uev.flags & SYSEV_EOF))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1096: FILE: kernel/sysevq.c:416:
+	}
+	else if (first && !nblk) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1098: FILE: kernel/sysevq.c:418:
+		DECLARE_WAITQUEUE(wait, current);
+		first = 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1109: FILE: kernel/sysevq.c:429:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1109: FILE: kernel/sysevq.c:429:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: kernel/sysevq.c:439:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1162: FILE: kernel/sysevq.c:482:
+	struct sysevq *evq = current->sysevq;
+	pdsysevq("evq=%p fd=%d\n", evq, fd);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1194: FILE: kernel/sysevq.c:514:
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->sysevq"
#1194: FILE: kernel/sysevq.c:514:
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1207: FILE: kernel/sysevq.c:527:
+		    verify_area(VERIFY_WRITE, arg->out_evs, arg->out_cnt * sizeof(struct sysev)) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1240: FILE: kernel/sysevq.c:560:
+	printk(KERN_ERR "This function should never be called\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1241: FILE: kernel/sysevq.c:561:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1244: FILE: kernel/sysevq.c:564:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1248: FILE: kernel/sysevq.c:568:
+struct ksysev * alloc_sysev(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1261: FILE: kernel/sysevq.c:581:
+	int err;
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1261: FILE: kernel/sysevq.c:581:
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->sysevq"
#1261: FILE: kernel/sysevq.c:581:
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ev->evq"
#1263: FILE: kernel/sysevq.c:583:
+	if (ev->evq == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1299: FILE: kernel/sysevq.c:619:
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->sysevq"
#1299: FILE: kernel/sysevq.c:619:
+	if (current->sysevq == NULL && (err = init_sysevq()) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1327: FILE: kernel/sysevq.c:647:
+	/* No need to grab spins at this point. We're the only thread
+	   messing with this sysevq, and type handlers don't access

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1328: FILE: kernel/sysevq.c:648:
+	   all_list. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1332: FILE: kernel/sysevq.c:652:
+		if (ev->uev.flags & SYSEV_PERSIST
+		    || !test_bit(SYSEV_PENDING_BIT, &ev->sync_flags))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1367: FILE: net/core/sock.c:622:
+		printk(KERN_ERR "sk_free: sysev_head's are not empty. sk=%p\n", sk);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1368: FILE: net/core/sock.c:623:
+		BUG();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1384: FILE: net/ipv4/tcp.c:465:
+	if (sk->sleep && waitqueue_active(sk->sleep))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1394: FILE: net/ipv4/tcp.c:475:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1394: FILE: net/ipv4/tcp.c:475:
+	else {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1405: FILE: net/ipv4/tcp.c:486:
+	if (sk->sleep && waitqueue_active(sk->sleep))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: net/ipv4/tcp.c:488:
+^Isk_wake_async(sk,0,POLL_ERR); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1407: FILE: net/ipv4/tcp.c:488:
+	sk_wake_async(sk,0,POLL_ERR); 
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1407: FILE: net/ipv4/tcp.c:488:
+	sk_wake_async(sk,0,POLL_ERR); 
 	                  ^

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1421: FILE: net/ipv4/tcp.c:502:
+	if (sk->sleep && waitqueue_active(sk->sleep))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1423: FILE: net/ipv4/tcp.c:504:
+	sk_wake_async(sk,1,POLL_IN);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1423: FILE: net/ipv4/tcp.c:504:
+	sk_wake_async(sk,1,POLL_IN);
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1520: FILE: net/ipv4/udp.c:1038:
+	init:		udp_v4_init_sock,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1520: FILE: net/ipv4/udp.c:1038:
+	init:		udp_v4_init_sock,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1558: FILE: net/socket.c:1793:
+		mm_segment_t old_fs;
+		old_fs = get_fs();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1560: FILE: net/socket.c:1795:
+		if ((rv = sock->ops->ioctl(sock, FIONREAD, (unsigned long)&bytes_readable)) < 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1570: FILE: net/socket.c:1805:
+	if (read_eof)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1572: FILE: net/socket.c:1807:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1574: FILE: net/socket.c:1809:
+		if (mask & (POLLERR|POLLHUP))
 		                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1576: FILE: net/socket.c:1811:
+		else if ((is_read && (mask & (POLLIN|POLLRDNORM)))
 		                                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1577: FILE: net/socket.c:1812:
+		else if ((is_read && (mask & (POLLIN|POLLRDNORM)))
+			 || (!is_read && (mask & (POLLOUT|POLLWRNORM))))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1577: FILE: net/socket.c:1812:
+			 || (!is_read && (mask & (POLLOUT|POLLWRNORM))))
 			                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472392.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 60 warnings, 26 checks, 1333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472392.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
