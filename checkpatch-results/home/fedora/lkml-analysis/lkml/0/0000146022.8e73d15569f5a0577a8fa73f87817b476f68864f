WARNING:TYPO_SPELLING: 'retreiving' may be misspelled - perhaps 'retrieving'?
#12: 
Subject: [PATCH] ppc64: Support retreiving missing SMU partitions
                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#26: 
The SMU chip has an EEPROM that contains various informations about the
                                                 ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'mecanism' may be misspelled - perhaps 'mechanism'?
#29: 
and publish them in the device-tree. This patch adds a mecanism to
                                                       ^^^^^^^^

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#30: 
retreive the missing ones which is necessary for the upcoming thermal
^^^^^^^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#53: FILE: drivers/macintosh/smu.c:56:
+#define DPRINTK(fmt, args...) do { udbg_printf(KERN_DEBUG fmt , ##args); } while (0)
                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#53: FILE: drivers/macintosh/smu.c:56:
+#define DPRINTK(fmt, args...) do { udbg_printf(KERN_DEBUG fmt , ##args); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#85: FILE: drivers/macintosh/smu.c:443:
+int __init smu_init (void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#133: FILE: drivers/macintosh/smu.c:887:
+			printk(KERN_DEBUG "SMU: short read in "

WARNING:SPLIT_STRING: quoted string split across lines
#134: FILE: drivers/macintosh/smu.c:888:
+			printk(KERN_DEBUG "SMU: short read in "
+			       "smu_read_datablock, got: %d, want: %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smu_read_datablock', this function's name, in a string
#134: FILE: drivers/macintosh/smu.c:888:
+			       "smu_read_datablock, got: %d, want: %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#172: FILE: drivers/macintosh/smu.c:926:
+	if (prop == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#183: FILE: drivers/macintosh/smu.c:937:
+		printk(KERN_DEBUG "SMU: datablock read failed while reading "

WARNING:SPLIT_STRING: quoted string split across lines
#184: FILE: drivers/macintosh/smu.c:938:
+		printk(KERN_DEBUG "SMU: datablock read failed while reading "
+		       "partition %02x !\n", id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#190: FILE: drivers/macintosh/smu.c:944:
+		printk(KERN_DEBUG "SMU: Reading partition %02x and got "

WARNING:SPLIT_STRING: quoted string split across lines
#191: FILE: drivers/macintosh/smu.c:945:
+		printk(KERN_DEBUG "SMU: Reading partition %02x and got "
+		       "%02x !\n", id, hdr->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#195: FILE: drivers/macintosh/smu.c:949:
+		printk(KERN_DEBUG "SMU: Failed creating sdb-partition-%02x "

WARNING:SPLIT_STRING: quoted string split across lines
#196: FILE: drivers/macintosh/smu.c:950:
+		printk(KERN_DEBUG "SMU: Failed creating sdb-partition-%02x "
+		       "property !\n", id);

CHECK:BRACES: braces {} should be used on all arms of this statement
#221: FILE: drivers/macintosh/smu.c:974:
+	if (interruptible) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: drivers/macintosh/smu.c:976:
+		int rc;
+		rc = down_interruptible(&smu_part_access);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#226: FILE: drivers/macintosh/smu.c:979:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part"
#231: FILE: drivers/macintosh/smu.c:984:
+	if (part == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "part"
#233: FILE: drivers/macintosh/smu.c:986:
+		if (part != NULL && size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: drivers/macintosh/smu.c:1073:
+		struct smu_sdbp_header *part;
+		part = __smu_get_sdb_partition(hdr.cmd, NULL, 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part"
#253: FILE: drivers/macintosh/smu.c:1074:
+		if (part == NULL)

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#270: FILE: include/asm-ppc64/smu.h:23:
+ * These commands are used to retreive the sdb-partition-XX datas from
                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'datas' may be misspelled - perhaps 'data'?
#270: FILE: include/asm-ppc64/smu.h:23:
+ * These commands are used to retreive the sdb-partition-XX datas from
                                                             ^^^^^

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#271: FILE: include/asm-ppc64/smu.h:24:
+ * the SMU. The lenght is always 2. First byte is the subcommand code
                 ^^^^^^

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#298: FILE: include/asm-ppc64/smu.h:195:
+ * usage to retreive partition data. In order to do that, you have to
             ^^^^^^^^

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#347: FILE: include/asm-ppc64/smu.h:455:
+ * The special SMU_CMDTYPE_GET_PARTITION command can be used to retreive
                                                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#359: FILE: include/asm-ppc64/smu.h:467:
+#define SMU_CMDTYPE_GET_PARTITION	2	/* retreive an sdb partition */
                                  	 	   ^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#436: FILE: fs/proc/proc_devtree.c:65:
+				     ? S_IRUGO : S_IRUSR, de,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#436: FILE: fs/proc/proc_devtree.c:65:
+				     ? S_IRUGO : S_IRUSR, de,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#438: FILE: fs/proc/proc_devtree.c:67:
+	if (ent == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#449: FILE: fs/proc/proc_devtree.c:78:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ent"
#486: FILE: fs/proc/proc_devtree.c:115:
+		for (ent = de->subdir; ent != NULL; ent = ent->next)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#526: FILE: include/asm-ppc/prom.h:96:
+extern int prom_add_property(struct device_node* np, struct property* prop);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#526: FILE: include/asm-ppc/prom.h:96:
+extern int prom_add_property(struct device_node* np, struct property* prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/asm-ppc/prom.h:96:
+extern int prom_add_property(struct device_node* np, struct property* prop);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#539: FILE: include/asm-ppc64/prom.h:204:
+extern int prom_add_property(struct device_node* np, struct property* prop);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#539: FILE: include/asm-ppc64/prom.h:204:
+extern int prom_add_property(struct device_node* np, struct property* prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: include/asm-ppc64/prom.h:204:
+extern int prom_add_property(struct device_node* np, struct property* prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: include/linux/proc_fs.h:147:
+extern void proc_device_tree_add_prop(struct proc_dir_entry *pde, struct property *prop);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146022.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 25 warnings, 12 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146022.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
