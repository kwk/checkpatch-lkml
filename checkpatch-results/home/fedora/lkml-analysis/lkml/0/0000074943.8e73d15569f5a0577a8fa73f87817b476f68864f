WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
> > > +#define kmap_record_action(nr, action, refcount, retaddr) do {} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: mm/highmem.c:51:
+static inline void kmap_record_action(unsigned int nr,
+				int refcount, void *retaddr)

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: mm/highmem.c:62:
+#define kmap_record_action(nr, refcount, retaddr) do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: mm/highmem.c:198:
+	kmap_record_action(PKMAP_NR(vaddr),
+			pkmap_count[PKMAP_NR(vaddr)], retaddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: mm/highmem.c:222:
+	kmap_record_action(PKMAP_NR(vaddr),
+			pkmap_count[nr], retaddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/highmem.c:688:
+		name = kallsyms_lookup(act->caller, &size, &offset,
+			&modname, namebuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: mm/highmem.c:697:
+		seq_printf(seq, "%u\t%u\t%c\t%s\t%d\t%lu\n",
+				kh - &khbase[0], ind,

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#279: FILE: mm/highmem.c:711:
+static struct seq_operations kmap_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: mm/highmem.c:719:
+static int kmap_shared_open(struct inode *inode, struct file *file,
+			  struct kmap_hist *source)

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: mm/highmem.c:726:
+		struct seq_file *seq = file->private_data;
+		seq->private = source;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#314: FILE: mm/highmem.c:746:
+struct file_operations kmap_running_seq_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: mm/highmem.c:759:
+	kmap_history_file = debugfs_create_file("kmap-history", 0644, NULL,
+			kh_running, &kmap_running_seq_fops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: include/asm-i386/highmem.h:67:
+extern void *FASTCALL(kmap_high(struct page *page));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#407: FILE: include/asm-i386/highmem.h:84:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: include/asm-i386/highmem.h:90:
+extern void *FASTCALL(kmap_high(struct page *page, void *retaddr));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: include/asm-i386/highmem.h:91:
+extern void FASTCALL(kunmap_high(struct page *page, void *retaddr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: include/asm-i386/highmem.h:107:
+		BUG();

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#446: FILE: arch/i386/Kconfig.debug:54:
+config DEBUG_KMAP
+	bool "Keep history of kmap/kunmap actions"
+	depends on DEBUG_KERNEL && HIGHMEM
+	help
+	  Keep a table of kmap/kunmap actions for developer debugging.
+	  This table is accessible via debugfs, file "kmap-history".
+	  The data in it can be cleared (reset) by any write to it.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 7 warnings, 10 checks, 321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
