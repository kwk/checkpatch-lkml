WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
This patch depends on the three patches that I just sent out (modularization 

WARNING:TYPO_SPELLING: 'memeory' may be misspelled - perhaps 'memory'?
#54: 
        - 8 proc NUMA box with 8GB memeory (CONFIG_X86_NUMAQ=y, 
                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: Documentation/Configure.help:235:
+  Choose this to see more system support and feature options for $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: arch/i386/kernel/numaq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/i386/kernel/numaq.c:6:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#149: FILE: arch/i386/kernel/numaq.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#150: FILE: arch/i386/kernel/numaq.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:SPACING: space required before the open parenthesis '('
#180: FILE: arch/i386/kernel/numaq.c:51:
+	for(node = 0; node < MAX_NUMNODES; node++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#181: FILE: arch/i386/kernel/numaq.c:52:
+		if(scd->quads_present31_0 & (1 << node)) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#212: FILE: arch/i386/kernel/numaq.c:83:
+#define MB_TO_ELEMENT(x) (x >> ELEMENT_REPRESENTS)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: arch/i386/kernel/numaq.c:84:
+#define PA_TO_MB(pa) (pa >> 20) ^I/* assumption: a physical address is in bytes */$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pa' may be better as '(pa)' to avoid precedence issues
#213: FILE: arch/i386/kernel/numaq.c:84:
+#define PA_TO_MB(pa) (pa >> 20) 	/* assumption: a physical address is in bytes */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: arch/i386/kernel/numaq.c:89:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: arch/i386/kernel/numaq.c:94:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: arch/i386/kernel/numaq.c:115:
+ * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: arch/i386/kernel/numaq.c:122:
+ ^Istruct sys_cfg_data *scd =$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: arch/i386/kernel/numaq.c:122:
+ ^Istruct sys_cfg_data *scd =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: arch/i386/kernel/numaq.c:122:
+ ^Istruct sys_cfg_data *scd =$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: arch/i386/kernel/numaq.c:125:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#254: FILE: arch/i386/kernel/numaq.c:125:
+
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: arch/i386/kernel/numaq.c:126:
+	for(nid = 0; nid < numnodes; nid++) {

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: arch/i386/kernel/numaq.c:127:
+		if(scd->quads_present31_0 & (1 << nid)) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#374: FILE: arch/i386/mm/discontig.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: arch/i386/mm/discontig.c:6:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#393: FILE: arch/i386/mm/discontig.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#394: FILE: arch/i386/mm/discontig.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#419: FILE: arch/i386/mm/discontig.c:46:
+extern unsigned long find_max_low_pfn(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#420: FILE: arch/i386/mm/discontig.c:47:
+extern void find_max_pfn(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#421: FILE: arch/i386/mm/discontig.c:48:
+extern void one_highpage_init(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#421: FILE: arch/i386/mm/discontig.c:48:
+extern void one_highpage_init(struct page *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#421: FILE: arch/i386/mm/discontig.c:48:
+extern void one_highpage_init(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#421: FILE: arch/i386/mm/discontig.c:48:
+extern void one_highpage_init(struct page *, int, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: arch/i386/mm/discontig.c:49:
+extern inline int page_is_ram (unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#422: FILE: arch/i386/mm/discontig.c:49:
+extern inline int page_is_ram (unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#424: FILE: arch/i386/mm/discontig.c:51:
+extern u64 nodes_mem_start[], nodes_mem_size[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#425: FILE: arch/i386/mm/discontig.c:52:
+extern struct e820map e820;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#426: FILE: arch/i386/mm/discontig.c:53:
+extern char _end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#427: FILE: arch/i386/mm/discontig.c:54:
+extern unsigned long highend_pfn, highstart_pfn;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#428: FILE: arch/i386/mm/discontig.c:55:
+extern unsigned long max_low_pfn;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#429: FILE: arch/i386/mm/discontig.c:56:
+extern unsigned long totalram_pages;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#430: FILE: arch/i386/mm/discontig.c:57:
+extern unsigned long totalhigh_pages;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#440: FILE: arch/i386/mm/discontig.c:67:
+	start = plat_node_bootpfns[nid].start_pfn = PFN_UP(nodes_mem_start[nid]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#443: FILE: arch/i386/mm/discontig.c:70:
+	if (start >= end) {
+		BUG();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: arch/i386/mm/discontig.c:71:
+		BUG();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#446: FILE: arch/i386/mm/discontig.c:73:
+	if (end > max_pfn) {
+		end = max_pfn;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#507: FILE: arch/i386/mm/discontig.c:134:
+	system_start_pfn = min_low_pfn = PFN_UP(__pa(&_end));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#510: FILE: arch/i386/mm/discontig.c:137:
+	system_max_low_pfn = max_low_pfn = find_max_low_pfn();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#513: FILE: arch/i386/mm/discontig.c:140:
+		highstart_pfn = highend_pfn = max_pfn;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#514: FILE: arch/i386/mm/discontig.c:141:
+		if (max_pfn > system_max_low_pfn) {
+			highstart_pfn = system_max_low_pfn;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#517: FILE: arch/i386/mm/discontig.c:144:
+		printk(KERN_NOTICE "%ldMB HIGHMEM available.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#520: FILE: arch/i386/mm/discontig.c:147:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: arch/i386/mm/discontig.c:148:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n",
+			pages_to_mb(system_max_low_pfn));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: arch/i386/mm/discontig.c:149:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#523: FILE: arch/i386/mm/discontig.c:150:
+	for (nid = 0; nid < numnodes; nid++)
+	{	

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: arch/i386/mm/discontig.c:151:
+^I{^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#527: FILE: arch/i386/mm/discontig.c:154:
+
+	}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#545: FILE: arch/i386/mm/discontig.c:172:
+		 bootmap_size + PAGE_SIZE-1) - (HIGH_MEMORY));
 		                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: arch/i386/mm/discontig.c:193:
+^Ifor (nid = 1; nid < numnodes; nid++){       $

ERROR:SPACING: space required before the open brace '{'
#566: FILE: arch/i386/mm/discontig.c:193:
+	for (nid = 1; nid < numnodes; nid++){       

ERROR:TRAILING_WHITESPACE: trailing whitespace
#570: FILE: arch/i386/mm/discontig.c:197:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/i386/mm/discontig.c:197:
+       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#571: FILE: arch/i386/mm/discontig.c:198:
+       
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#578: FILE: arch/i386/mm/discontig.c:205:
+			initrd_end = initrd_start+INITRD_SIZE;
 			                         ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#580: FILE: arch/i386/mm/discontig.c:207:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#580: FILE: arch/i386/mm/discontig.c:207:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#581: FILE: arch/i386/mm/discontig.c:208:
+			printk(KERN_ERR "initrd extends beyond end of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#582: FILE: arch/i386/mm/discontig.c:209:
+			printk(KERN_ERR "initrd extends beyond end of memory "
+			    "(0x%08lx > 0x%08lx)\ndisabling initrd\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#603: FILE: arch/i386/mm/discontig.c:230:
+^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#606: FILE: arch/i386/mm/discontig.c:233:
+		if (start > low) {
[...]
+		  zones_size[ZONE_HIGHMEM] = high - start;

CHECK:BRACES: braces {} should be used on all arms of this statement
#611: FILE: arch/i386/mm/discontig.c:238:
+			if (low < max_dma)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#613: FILE: arch/i386/mm/discontig.c:240:
+			else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#625: FILE: arch/i386/mm/discontig.c:252:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#628: FILE: arch/i386/mm/discontig.c:255:
+	extern int ppro_with_ram_bug(void);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#643: FILE: arch/i386/mm/discontig.c:270:
+		if (page_is_ram(pfn) && PageReserved(mem_map+pfn))
 		                                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#648: FILE: arch/i386/mm/discontig.c:275:
+		struct page * zone_mem_map;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: arch/i386/mm/discontig.c:276:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#654: FILE: arch/i386/mm/discontig.c:281:
+		printk("Initializing highpages for node %d\n", nid);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#677: FILE: arch/i386/mm/discontig.c:304:
+		if (lmax_mapnr > max_mapnr) {
+			max_mapnr = lmax_mapnr;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: arch/i386/mm/discontig.c:308:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#683: FILE: arch/i386/mm/discontig.c:310:
+	max_mapnr = num_mappedpages = num_physpages = max_low_pfn;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#760: FILE: arch/i386/mm/init.c:491:
+extern void __init set_max_mapnr_init(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#772: FILE: include/asm-i386/e820.h:39:
+static inline int page_is_ram (unsigned long pagenr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#786: FILE: include/asm-i386/e820.h:53:
+		addr = (e820.map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#786: FILE: include/asm-i386/e820.h:53:
+		addr = (e820.map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#787: FILE: include/asm-i386/e820.h:54:
+		end = (e820.map[i].addr+e820.map[i].size) >> PAGE_SHIFT;
 		                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pagenr >= addr'
#788: FILE: include/asm-i386/e820.h:55:
+		if  ((pagenr >= addr) && (pagenr < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pagenr < end'
#788: FILE: include/asm-i386/e820.h:55:
+		if  ((pagenr >= addr) && (pagenr < end))

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#807: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	((u64)((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn)<<PAGE_SHIFT)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#807: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	((u64)((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn)<<PAGE_SHIFT)
                           	                                                                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#807: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	((u64)((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn)<<PAGE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#807: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	((u64)((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn)<<PAGE_SHIFT)

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#816: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)	(((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn) << PAGE_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#816: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)	(((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn) << PAGE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#816: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)	(((page - page_zone(page)->zone_mem_map) + page_zone(page)->zone_start_pfn) << PAGE_SHIFT)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#826: FILE: include/asm-i386/mmzone.h:1:
+/*

WARNING:TYPO_SPELLING: 'implmentation' may be misspelled - perhaps 'implementation'?
#885: FILE: include/asm-i386/mmzone.h:60:
+ * Following are macros that each numa implmentation must define.
                                        ^^^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#905: FILE: include/asm-i386/mmzone.h:80:
+ * and returns the the mem_map of that node.

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#915: FILE: include/asm-i386/mmzone.h:90:
+#define LOCAL_BASE_ADDR(kaddr)	((unsigned long)__va(NODE_DATA(KVADDR_TO_NID(kaddr))->node_start_pfn << PAGE_SHIFT))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kvaddr' - possible side-effects?
#917: FILE: include/asm-i386/mmzone.h:92:
+#define LOCAL_MAP_NR(kvaddr) \
+	(((unsigned long)(kvaddr)-LOCAL_BASE_ADDR(kvaddr)) >> PAGE_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#918: FILE: include/asm-i386/mmzone.h:93:
+	(((unsigned long)(kvaddr)-LOCAL_BASE_ADDR(kvaddr)) >> PAGE_SHIFT)
 	                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kaddr' - possible side-effects?
#920: FILE: include/asm-i386/mmzone.h:95:
+#define kern_addr_valid(kaddr)	test_bit(LOCAL_MAP_NR(kaddr), \
+					 NODE_DATA(KVADDR_TO_NID(kaddr))->valid_addr_bitmap)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kaddr' - possible side-effects?
#923: FILE: include/asm-i386/mmzone.h:98:
+#define virt_to_page(kaddr)	(ADDR_TO_MAPBASE(kaddr) + LOCAL_MAP_NR(kaddr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#932: FILE: include/asm-i386/numaq.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#937: FILE: include/asm-i386/numaq.h:6:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#951: FILE: include/asm-i386/numaq.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#952: FILE: include/asm-i386/numaq.h:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: include/asm-i386/numaq.h:47:
+extern int numaqpa_to_nid(u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#978: FILE: include/asm-i386/numaq.h:47:
+extern int numaqpa_to_nid(u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#979: FILE: include/asm-i386/numaq.h:48:
+extern int numaqpfn_to_nid(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#979: FILE: include/asm-i386/numaq.h:48:
+extern int numaqpfn_to_nid(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#980: FILE: include/asm-i386/numaq.h:49:
+extern void get_memcfg_numaq(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: include/asm-i386/numaq.h:161:
+^Iunsigned int^Isplit_mem_enbl; /* 0 for no low shared memory */ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: include/asm-i386/numaq.h:174:
+        struct^Ieachquadmem eq[MAX_NUMNODES];^I/* indexed by quad id */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: include/asm-i386/numaq.h:174:
+        struct^Ieachquadmem eq[MAX_NUMNODES];^I/* indexed by quad id */$

WARNING:LONG_LINE: line length of 177 exceeds 100 columns
#1134: FILE: include/asm-i386/pgtable-2level.h:65:
+#define pte_page(x)		(NODE_MEM_MAP(PHYSADDR_TO_NID((x).pte_low)) + PLAT_NODE_DATA_LOCALNR(((unsigned long)((x).pte_low >> PAGE_SHIFT)), PHYSADDR_TO_NID((x).pte_low)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1134: FILE: include/asm-i386/pgtable-2level.h:65:
+#define pte_page(x)		(NODE_MEM_MAP(PHYSADDR_TO_NID((x).pte_low)) + PLAT_NODE_DATA_LOCALNR(((unsigned long)((x).pte_low >> PAGE_SHIFT)), PHYSADDR_TO_NID((x).pte_low)))

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#1135: FILE: include/asm-i386/pgtable-2level.h:66:
+#define __pmd_page(x)		(NODE_MEM_MAP(PHYSADDR_TO_NID((x).pmd_low)) + PLAT_NODE_DATA_LOCALNR((((x).pmd_low >> PAGE_SHIFT)), PHYSADDR_TO_NID((x).pmd_low)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1135: FILE: include/asm-i386/pgtable-2level.h:66:
+#define __pmd_page(x)		(NODE_MEM_MAP(PHYSADDR_TO_NID((x).pmd_low)) + PLAT_NODE_DATA_LOCALNR((((x).pmd_low >> PAGE_SHIFT)), PHYSADDR_TO_NID((x).pmd_low)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1151: FILE: include/asm-i386/pgtable-3level.h:96:
+#define pte_pfn(x) ^I(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - PAGE_SHIFT)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1151: FILE: include/asm-i386/pgtable-3level.h:96:
+#define pte_pfn(x) 	(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - PAGE_SHIFT)))

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1152: FILE: include/asm-i386/pgtable-3level.h:97:
+#define pte_page(x)	(NODE_MEM_MAP(PFN_TO_NID(pte_pfn(x))) + PLAT_NODE_DATA_LOCALNR(pte_pfn(x), PFN_TO_NID(pte_pfn(x))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1152: FILE: include/asm-i386/pgtable-3level.h:97:
+#define pte_page(x)	(NODE_MEM_MAP(PFN_TO_NID(pte_pfn(x))) + PLAT_NODE_DATA_LOCALNR(pte_pfn(x), PFN_TO_NID(pte_pfn(x))))

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1168: FILE: include/asm-i386/pgtable.h:303:
+#define mk_pte(page, pgprot)	__mk_pte(((page) - page_zone(page)->zone_mem_map + (page_zone(page)->zone_start_pfn)), (pgprot))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1168: FILE: include/asm-i386/pgtable.h:303:
+#define mk_pte(page, pgprot)	__mk_pte(((page) - page_zone(page)->zone_mem_map + (page_zone(page)->zone_start_pfn)), (pgprot))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1170: FILE: include/asm-i386/pgtable.h:305:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: include/asm-i386/pgtable.h:305:
+ $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1196: FILE: include/asm-i386/setup.h:4:
+#define PFN_UP(x)	(((x) + PAGE_SIZE-1) >> PAGE_SHIFT)
                  	                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1204: FILE: include/asm-i386/setup.h:12:
+#define MAX_NONPAE_PFN	(1 << 20)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: No space is necessary after a cast
#1210: FILE: include/asm-i386/setup.h:18:
+#define SCREEN_INFO (*(struct screen_info *) (PARAM+0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: include/asm-i386/setup.h:18:
+#define SCREEN_INFO (*(struct screen_info *) (PARAM+0))
                                                    ^

CHECK:SPACING: No space is necessary after a cast
#1211: FILE: include/asm-i386/setup.h:19:
+#define EXT_MEM_K (*(unsigned short *) (PARAM+2))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1211: FILE: include/asm-i386/setup.h:19:
+#define EXT_MEM_K (*(unsigned short *) (PARAM+2))
                                              ^

CHECK:SPACING: No space is necessary after a cast
#1212: FILE: include/asm-i386/setup.h:20:
+#define ALT_MEM_K (*(unsigned long *) (PARAM+0x1e0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1212: FILE: include/asm-i386/setup.h:20:
+#define ALT_MEM_K (*(unsigned long *) (PARAM+0x1e0))
                                             ^

CHECK:SPACING: No space is necessary after a cast
#1213: FILE: include/asm-i386/setup.h:21:
+#define E820_MAP_NR (*(char*) (PARAM+E820NR))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1213: FILE: include/asm-i386/setup.h:21:
+#define E820_MAP_NR (*(char*) (PARAM+E820NR))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1213: FILE: include/asm-i386/setup.h:21:
+#define E820_MAP_NR (*(char*) (PARAM+E820NR))
                                     ^

CHECK:SPACING: No space is necessary after a cast
#1214: FILE: include/asm-i386/setup.h:22:
+#define E820_MAP    ((struct e820entry *) (PARAM+E820MAP))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1214: FILE: include/asm-i386/setup.h:22:
+#define E820_MAP    ((struct e820entry *) (PARAM+E820MAP))
                                                 ^

CHECK:SPACING: No space is necessary after a cast
#1215: FILE: include/asm-i386/setup.h:23:
+#define APM_BIOS_INFO (*(struct apm_bios_info *) (PARAM+0x40))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1215: FILE: include/asm-i386/setup.h:23:
+#define APM_BIOS_INFO (*(struct apm_bios_info *) (PARAM+0x40))
                                                        ^

CHECK:SPACING: No space is necessary after a cast
#1216: FILE: include/asm-i386/setup.h:24:
+#define DRIVE_INFO (*(struct drive_info_struct *) (PARAM+0x80))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1216: FILE: include/asm-i386/setup.h:24:
+#define DRIVE_INFO (*(struct drive_info_struct *) (PARAM+0x80))
                                                         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1217: FILE: include/asm-i386/setup.h:25:
+#define SYS_DESC_TABLE (*(struct sys_desc_table_struct*)(PARAM+0xa0))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1217: FILE: include/asm-i386/setup.h:25:
+#define SYS_DESC_TABLE (*(struct sys_desc_table_struct*)(PARAM+0xa0))
                                                               ^

CHECK:SPACING: No space is necessary after a cast
#1218: FILE: include/asm-i386/setup.h:26:
+#define MOUNT_ROOT_RDONLY (*(unsigned short *) (PARAM+0x1F2))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1218: FILE: include/asm-i386/setup.h:26:
+#define MOUNT_ROOT_RDONLY (*(unsigned short *) (PARAM+0x1F2))
                                                      ^

CHECK:SPACING: No space is necessary after a cast
#1219: FILE: include/asm-i386/setup.h:27:
+#define RAMDISK_FLAGS (*(unsigned short *) (PARAM+0x1F8))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1219: FILE: include/asm-i386/setup.h:27:
+#define RAMDISK_FLAGS (*(unsigned short *) (PARAM+0x1F8))
                                                  ^

CHECK:SPACING: No space is necessary after a cast
#1220: FILE: include/asm-i386/setup.h:28:
+#define ORIG_ROOT_DEV (*(unsigned short *) (PARAM+0x1FC))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1220: FILE: include/asm-i386/setup.h:28:
+#define ORIG_ROOT_DEV (*(unsigned short *) (PARAM+0x1FC))
                                                  ^

CHECK:SPACING: No space is necessary after a cast
#1221: FILE: include/asm-i386/setup.h:29:
+#define AUX_DEVICE_INFO (*(unsigned char *) (PARAM+0x1FF))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1221: FILE: include/asm-i386/setup.h:29:
+#define AUX_DEVICE_INFO (*(unsigned char *) (PARAM+0x1FF))
                                                   ^

CHECK:SPACING: No space is necessary after a cast
#1222: FILE: include/asm-i386/setup.h:30:
+#define LOADER_TYPE (*(unsigned char *) (PARAM+0x210))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1222: FILE: include/asm-i386/setup.h:30:
+#define LOADER_TYPE (*(unsigned char *) (PARAM+0x210))
                                               ^

CHECK:SPACING: No space is necessary after a cast
#1223: FILE: include/asm-i386/setup.h:31:
+#define KERNEL_START (*(unsigned long *) (PARAM+0x214))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1223: FILE: include/asm-i386/setup.h:31:
+#define KERNEL_START (*(unsigned long *) (PARAM+0x214))
                                                ^

CHECK:SPACING: No space is necessary after a cast
#1224: FILE: include/asm-i386/setup.h:32:
+#define INITRD_START (*(unsigned long *) (PARAM+0x218))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1224: FILE: include/asm-i386/setup.h:32:
+#define INITRD_START (*(unsigned long *) (PARAM+0x218))
                                                ^

CHECK:SPACING: No space is necessary after a cast
#1225: FILE: include/asm-i386/setup.h:33:
+#define INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1225: FILE: include/asm-i386/setup.h:33:
+#define INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))
                                               ^

CHECK:SPACING: No space is necessary after a cast
#1226: FILE: include/asm-i386/setup.h:34:
+#define COMMAND_LINE ((char *) (PARAM+2048))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1226: FILE: include/asm-i386/setup.h:34:
+#define COMMAND_LINE ((char *) (PARAM+2048))
                                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1240: FILE: include/linux/bootmem.h:38:
+extern void __init reserve_bootmem (unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1240: FILE: include/linux/bootmem.h:38:
+extern void __init reserve_bootmem (unsigned long addr, unsigned long size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438739.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 55 warnings, 76 checks, 1136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438739.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
