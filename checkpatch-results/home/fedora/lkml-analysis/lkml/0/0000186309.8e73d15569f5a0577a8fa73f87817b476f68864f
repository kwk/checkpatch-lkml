WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#280: FILE: include/asm-um/elf-i386.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#302: FILE: include/asm-um/elf-i386.h:23:
+typedef unsigned long elf_greg_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: include/asm-um/elf-i386.h:25:
+#define ELF_NGREG (sizeof (struct user_regs_struct) / sizeof(elf_greg_t))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#305: FILE: include/asm-um/elf-i386.h:26:
+typedef elf_greg_t elf_gregset_t[ELF_NGREG];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#307: FILE: include/asm-um/elf-i386.h:28:
+typedef struct user_i387_struct elf_fpregset_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#312: FILE: include/asm-um/elf-i386.h:33:
+#define elf_check_arch(x) \
+	(((x)->e_machine == EM_386) || ((x)->e_machine == EM_486))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#319: FILE: include/asm-um/elf-i386.h:40:
+#define ELF_PLAT_INIT(regs, load_addr) do { \
+	PT_REGS_EBX(regs) = 0; \
+	PT_REGS_ECX(regs) = 0; \
+	PT_REGS_EDX(regs) = 0; \
+	PT_REGS_ESI(regs) = 0; \
+	PT_REGS_EDI(regs) = 0; \
+	PT_REGS_EBP(regs) = 0; \
+	PT_REGS_EAX(regs) = 0; \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: include/asm-um/elf-i386.h:48:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pr_reg' - possible side-effects?
#336: FILE: include/asm-um/elf-i386.h:57:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) do {	\
+	pr_reg[0] = PT_REGS_EBX(regs);		\
+	pr_reg[1] = PT_REGS_ECX(regs);		\
+	pr_reg[2] = PT_REGS_EDX(regs);		\
+	pr_reg[3] = PT_REGS_ESI(regs);		\
+	pr_reg[4] = PT_REGS_EDI(regs);		\
+	pr_reg[5] = PT_REGS_EBP(regs);		\
+	pr_reg[6] = PT_REGS_EAX(regs);		\
+	pr_reg[7] = PT_REGS_DS(regs);		\
+	pr_reg[8] = PT_REGS_ES(regs);		\
+	/* fake once used fs and gs selectors? */	\
+	pr_reg[9] = PT_REGS_DS(regs);		\
+	pr_reg[10] = PT_REGS_DS(regs);		\
+	pr_reg[11] = PT_REGS_SYSCALL_NR(regs);	\
+	pr_reg[12] = PT_REGS_IP(regs);		\
+	pr_reg[13] = PT_REGS_CS(regs);		\
+	pr_reg[14] = PT_REGS_EFLAGS(regs);	\
+	pr_reg[15] = PT_REGS_SP(regs);		\
+	pr_reg[16] = PT_REGS_SS(regs);		\
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#336: FILE: include/asm-um/elf-i386.h:57:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) do {	\
+	pr_reg[0] = PT_REGS_EBX(regs);		\
+	pr_reg[1] = PT_REGS_ECX(regs);		\
+	pr_reg[2] = PT_REGS_EDX(regs);		\
+	pr_reg[3] = PT_REGS_ESI(regs);		\
+	pr_reg[4] = PT_REGS_EDI(regs);		\
+	pr_reg[5] = PT_REGS_EBP(regs);		\
+	pr_reg[6] = PT_REGS_EAX(regs);		\
+	pr_reg[7] = PT_REGS_DS(regs);		\
+	pr_reg[8] = PT_REGS_ES(regs);		\
+	/* fake once used fs and gs selectors? */	\
+	pr_reg[9] = PT_REGS_DS(regs);		\
+	pr_reg[10] = PT_REGS_DS(regs);		\
+	pr_reg[11] = PT_REGS_SYSCALL_NR(regs);	\
+	pr_reg[12] = PT_REGS_IP(regs);		\
+	pr_reg[13] = PT_REGS_CS(regs);		\
+	pr_reg[14] = PT_REGS_EFLAGS(regs);	\
+	pr_reg[15] = PT_REGS_SP(regs);		\
+	pr_reg[16] = PT_REGS_SS(regs);		\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#336: FILE: include/asm-um/elf-i386.h:57:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) do {	\
+	pr_reg[0] = PT_REGS_EBX(regs);		\
+	pr_reg[1] = PT_REGS_ECX(regs);		\
+	pr_reg[2] = PT_REGS_EDX(regs);		\
+	pr_reg[3] = PT_REGS_ESI(regs);		\
+	pr_reg[4] = PT_REGS_EDI(regs);		\
+	pr_reg[5] = PT_REGS_EBP(regs);		\
+	pr_reg[6] = PT_REGS_EAX(regs);		\
+	pr_reg[7] = PT_REGS_DS(regs);		\
+	pr_reg[8] = PT_REGS_ES(regs);		\
+	/* fake once used fs and gs selectors? */	\
+	pr_reg[9] = PT_REGS_DS(regs);		\
+	pr_reg[10] = PT_REGS_DS(regs);		\
+	pr_reg[11] = PT_REGS_SYSCALL_NR(regs);	\
+	pr_reg[12] = PT_REGS_IP(regs);		\
+	pr_reg[13] = PT_REGS_CS(regs);		\
+	pr_reg[14] = PT_REGS_EFLAGS(regs);	\
+	pr_reg[15] = PT_REGS_SP(regs);		\
+	pr_reg[16] = PT_REGS_SS(regs);		\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: include/asm-um/elf-i386.h:76:
+} while(0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: include/asm-um/elf-i386.h:81:
+extern char * elf_aux_platform;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: include/asm-um/elf-i386.h:84:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#363: FILE: include/asm-um/elf-i386.h:84:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:SPACING: space prohibited after that open parenthesis '('
#388: FILE: include/asm-um/elf-i386.h:109:
+	if ( vsyscall_ehdr ) {					\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#388: FILE: include/asm-um/elf-i386.h:109:
+	if ( vsyscall_ehdr ) {					\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#403: FILE: include/asm-um/elf-i386.h:124:
+	(vsyscall_ehdr ? (((struct elfhdr *)vsyscall_ehdr)->e_phnum) : 0 )

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#405: FILE: include/asm-um/elf-i386.h:126:
+#define ELF_CORE_WRITE_EXTRA_PHDRS					      \
+if ( vsyscall_ehdr ) {							      \
+	const struct elfhdr *const ehdrp = (struct elfhdr *)vsyscall_ehdr;    \
+	const struct elf_phdr *const phdrp =				      \
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \
+	int i;								      \
+	Elf32_Off ofs = 0;						      \
+	for (i = 0; i < ehdrp->e_phnum; ++i) {				      \
+		struct elf_phdr phdr = phdrp[i];			      \
+		if (phdr.p_type == PT_LOAD) {				      \
+			ofs = phdr.p_offset = offset;			      \
+			offset += phdr.p_filesz;			      \
+		}							      \
+		else							      \
+			phdr.p_offset += ofs;				      \
+		phdr.p_paddr = 0; /* match other core phdrs */		      \
+		DUMP_WRITE(&phdr, sizeof(phdr));			      \
+	}								      \
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#406: FILE: include/asm-um/elf-i386.h:127:
+if ( vsyscall_ehdr ) {							      \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#406: FILE: include/asm-um/elf-i386.h:127:
+if ( vsyscall_ehdr ) {							      \

CHECK:SPACING: No space is necessary after a cast
#409: FILE: include/asm-um/elf-i386.h:130:
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Off>
#411: FILE: include/asm-um/elf-i386.h:132:
+	Elf32_Off ofs = 0;						      \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#415: FILE: include/asm-um/elf-i386.h:136:
+			ofs = phdr.p_offset = offset;			      \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#424: FILE: include/asm-um/elf-i386.h:145:
+}
+#define ELF_CORE_WRITE_EXTRA_DATA					      \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#424: FILE: include/asm-um/elf-i386.h:145:
+#define ELF_CORE_WRITE_EXTRA_DATA					      \
+if ( vsyscall_ehdr ) {							      \
+	const struct elfhdr *const ehdrp = (struct elfhdr *)vsyscall_ehdr;    \
+	const struct elf_phdr *const phdrp =				      \
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \
+	int i;								      \
+	for (i = 0; i < ehdrp->e_phnum; ++i) {				      \
+		if (phdrp[i].p_type == PT_LOAD)				      \
+			DUMP_WRITE((void *) phdrp[i].p_vaddr,		      \
+				   phdrp[i].p_filesz);			      \
+	}								      \
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#425: FILE: include/asm-um/elf-i386.h:146:
+if ( vsyscall_ehdr ) {							      \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#425: FILE: include/asm-um/elf-i386.h:146:
+if ( vsyscall_ehdr ) {							      \

CHECK:SPACING: No space is necessary after a cast
#428: FILE: include/asm-um/elf-i386.h:149:
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \

CHECK:SPACING: No space is necessary after a cast
#432: FILE: include/asm-um/elf-i386.h:153:
+			DUMP_WRITE((void *) phdrp[i].p_vaddr,		      \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: include/asm-um/elf-ppc.h:1:
+#ifndef __UM_ELF_PPC_H

ERROR:SPACING: space required before the open parenthesis '('
#462: FILE: include/asm-um/elf-ppc.h:9:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#462: FILE: include/asm-um/elf-ppc.h:9:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#497: FILE: include/asm-um/elf-ppc.h:44:
+typedef unsigned long elf_greg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#498: FILE: include/asm-um/elf-ppc.h:45:
+typedef elf_greg_t elf_gregset_t[ELF_NGREG];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#501: FILE: include/asm-um/elf-ppc.h:48:
+typedef double elf_fpreg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#502: FILE: include/asm-um/elf-ppc.h:49:
+typedef elf_fpreg_t elf_fpregset_t[ELF_NFPREG];

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#513: FILE: include/asm-um/elf-x86_64.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/user.h> instead of <asm/user.h>
#521: FILE: include/asm-um/elf-x86_64.h:9:
+#include <asm/user.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#523: FILE: include/asm-um/elf-x86_64.h:11:
+typedef unsigned long elf_greg_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#525: FILE: include/asm-um/elf-x86_64.h:13:
+#define ELF_NGREG (sizeof (struct user_regs_struct) / sizeof(elf_greg_t))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#526: FILE: include/asm-um/elf-x86_64.h:14:
+typedef elf_greg_t elf_gregset_t[ELF_NGREG];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#528: FILE: include/asm-um/elf-x86_64.h:16:
+typedef struct { } elf_fpregset_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#540: FILE: include/asm-um/elf-x86_64.h:28:
+#define ELF_PLAT_INIT(regs, load_addr)    do { \
+	PT_REGS_RBX(regs) = 0; \
+	PT_REGS_RCX(regs) = 0; \
+	PT_REGS_RDX(regs) = 0; \
+	PT_REGS_RSI(regs) = 0; \
+	PT_REGS_RDI(regs) = 0; \
+	PT_REGS_RBP(regs) = 0; \
+	PT_REGS_RAX(regs) = 0; \
+	PT_REGS_R8(regs) = 0; \
+	PT_REGS_R9(regs) = 0; \
+	PT_REGS_R10(regs) = 0; \
+	PT_REGS_R11(regs) = 0; \
+	PT_REGS_R12(regs) = 0; \
+	PT_REGS_R13(regs) = 0; \
+	PT_REGS_R14(regs) = 0; \
+	PT_REGS_R15(regs) = 0; \
+} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: include/asm-um/elf-x86_64.h:47:
+        clear_thread_flag(TIF_IA32); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: include/asm-um/elf-x86_64.h:47:
+        clear_thread_flag(TIF_IA32); \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#559: FILE: include/asm-um/elf-x86_64.h:47:
+        clear_thread_flag(TIF_IA32); \

ERROR:SPACING: space required before the open parenthesis '('
#572: FILE: include/asm-um/elf-x86_64.h:60:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#572: FILE: include/asm-um/elf-x86_64.h:60:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#593: FILE: include/asm-um/elf.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#627: FILE: include/asm-um/elf.h:23:
+typedef unsigned long elf_greg_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#629: FILE: include/asm-um/elf.h:25:
+#define ELF_NGREG (sizeof (struct user_regs_struct) / sizeof(elf_greg_t))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#630: FILE: include/asm-um/elf.h:26:
+typedef elf_greg_t elf_gregset_t[ELF_NGREG];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#632: FILE: include/asm-um/elf.h:28:
+typedef struct user_i387_struct elf_fpregset_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#637: FILE: include/asm-um/elf.h:33:
+#define elf_check_arch(x) \
+	(((x)->e_machine == EM_386) || ((x)->e_machine == EM_486))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#644: FILE: include/asm-um/elf.h:40:
+#define ELF_PLAT_INIT(regs, load_addr) do { \
+	PT_REGS_EBX(regs) = 0; \
+	PT_REGS_ECX(regs) = 0; \
+	PT_REGS_EDX(regs) = 0; \
+	PT_REGS_ESI(regs) = 0; \
+	PT_REGS_EDI(regs) = 0; \
+	PT_REGS_EBP(regs) = 0; \
+	PT_REGS_EAX(regs) = 0; \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#652: FILE: include/asm-um/elf.h:48:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pr_reg' - possible side-effects?
#661: FILE: include/asm-um/elf.h:57:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) do {	\
+	pr_reg[0] = PT_REGS_EBX(regs);		\
+	pr_reg[1] = PT_REGS_ECX(regs);		\
+	pr_reg[2] = PT_REGS_EDX(regs);		\
+	pr_reg[3] = PT_REGS_ESI(regs);		\
+	pr_reg[4] = PT_REGS_EDI(regs);		\
+	pr_reg[5] = PT_REGS_EBP(regs);		\
+	pr_reg[6] = PT_REGS_EAX(regs);		\
+	pr_reg[7] = PT_REGS_DS(regs);		\
+	pr_reg[8] = PT_REGS_ES(regs);		\
+	/* fake once used fs and gs selectors? */	\
+	pr_reg[9] = PT_REGS_DS(regs);		\
+	pr_reg[10] = PT_REGS_DS(regs);		\
+	pr_reg[11] = PT_REGS_SYSCALL_NR(regs);	\
+	pr_reg[12] = PT_REGS_IP(regs);		\
+	pr_reg[13] = PT_REGS_CS(regs);		\
+	pr_reg[14] = PT_REGS_EFLAGS(regs);	\
+	pr_reg[15] = PT_REGS_SP(regs);		\
+	pr_reg[16] = PT_REGS_SS(regs);		\
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#661: FILE: include/asm-um/elf.h:57:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) do {	\
+	pr_reg[0] = PT_REGS_EBX(regs);		\
+	pr_reg[1] = PT_REGS_ECX(regs);		\
+	pr_reg[2] = PT_REGS_EDX(regs);		\
+	pr_reg[3] = PT_REGS_ESI(regs);		\
+	pr_reg[4] = PT_REGS_EDI(regs);		\
+	pr_reg[5] = PT_REGS_EBP(regs);		\
+	pr_reg[6] = PT_REGS_EAX(regs);		\
+	pr_reg[7] = PT_REGS_DS(regs);		\
+	pr_reg[8] = PT_REGS_ES(regs);		\
+	/* fake once used fs and gs selectors? */	\
+	pr_reg[9] = PT_REGS_DS(regs);		\
+	pr_reg[10] = PT_REGS_DS(regs);		\
+	pr_reg[11] = PT_REGS_SYSCALL_NR(regs);	\
+	pr_reg[12] = PT_REGS_IP(regs);		\
+	pr_reg[13] = PT_REGS_CS(regs);		\
+	pr_reg[14] = PT_REGS_EFLAGS(regs);	\
+	pr_reg[15] = PT_REGS_SP(regs);		\
+	pr_reg[16] = PT_REGS_SS(regs);		\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#661: FILE: include/asm-um/elf.h:57:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) do {	\
+	pr_reg[0] = PT_REGS_EBX(regs);		\
+	pr_reg[1] = PT_REGS_ECX(regs);		\
+	pr_reg[2] = PT_REGS_EDX(regs);		\
+	pr_reg[3] = PT_REGS_ESI(regs);		\
+	pr_reg[4] = PT_REGS_EDI(regs);		\
+	pr_reg[5] = PT_REGS_EBP(regs);		\
+	pr_reg[6] = PT_REGS_EAX(regs);		\
+	pr_reg[7] = PT_REGS_DS(regs);		\
+	pr_reg[8] = PT_REGS_ES(regs);		\
+	/* fake once used fs and gs selectors? */	\
+	pr_reg[9] = PT_REGS_DS(regs);		\
+	pr_reg[10] = PT_REGS_DS(regs);		\
+	pr_reg[11] = PT_REGS_SYSCALL_NR(regs);	\
+	pr_reg[12] = PT_REGS_IP(regs);		\
+	pr_reg[13] = PT_REGS_CS(regs);		\
+	pr_reg[14] = PT_REGS_EFLAGS(regs);	\
+	pr_reg[15] = PT_REGS_SP(regs);		\
+	pr_reg[16] = PT_REGS_SS(regs);		\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#680: FILE: include/asm-um/elf.h:76:
+} while(0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#685: FILE: include/asm-um/elf.h:81:
+extern char * elf_aux_platform;

ERROR:SPACING: space required before the open parenthesis '('
#688: FILE: include/asm-um/elf.h:84:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#688: FILE: include/asm-um/elf.h:84:
+#define SET_PERSONALITY(ex, ibcs2) do ; while(0)

ERROR:SPACING: space prohibited after that open parenthesis '('
#713: FILE: include/asm-um/elf.h:109:
+	if ( vsyscall_ehdr ) {					\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#713: FILE: include/asm-um/elf.h:109:
+	if ( vsyscall_ehdr ) {					\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#728: FILE: include/asm-um/elf.h:124:
+	(vsyscall_ehdr ? (((struct elfhdr *)vsyscall_ehdr)->e_phnum) : 0 )

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#730: FILE: include/asm-um/elf.h:126:
+#define ELF_CORE_WRITE_EXTRA_PHDRS					      \
+if ( vsyscall_ehdr ) {							      \
+	const struct elfhdr *const ehdrp = (struct elfhdr *)vsyscall_ehdr;    \
+	const struct elf_phdr *const phdrp =				      \
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \
+	int i;								      \
+	Elf32_Off ofs = 0;						      \
+	for (i = 0; i < ehdrp->e_phnum; ++i) {				      \
+		struct elf_phdr phdr = phdrp[i];			      \
+		if (phdr.p_type == PT_LOAD) {				      \
+			ofs = phdr.p_offset = offset;			      \
+			offset += phdr.p_filesz;			      \
+		}							      \
+		else							      \
+			phdr.p_offset += ofs;				      \
+		phdr.p_paddr = 0; /* match other core phdrs */		      \
+		DUMP_WRITE(&phdr, sizeof(phdr));			      \
+	}								      \
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#731: FILE: include/asm-um/elf.h:127:
+if ( vsyscall_ehdr ) {							      \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#731: FILE: include/asm-um/elf.h:127:
+if ( vsyscall_ehdr ) {							      \

CHECK:SPACING: No space is necessary after a cast
#734: FILE: include/asm-um/elf.h:130:
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#740: FILE: include/asm-um/elf.h:136:
+			ofs = phdr.p_offset = offset;			      \

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#749: FILE: include/asm-um/elf.h:145:
+}
+#define ELF_CORE_WRITE_EXTRA_DATA					      \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#749: FILE: include/asm-um/elf.h:145:
+#define ELF_CORE_WRITE_EXTRA_DATA					      \
+if ( vsyscall_ehdr ) {							      \
+	const struct elfhdr *const ehdrp = (struct elfhdr *)vsyscall_ehdr;    \
+	const struct elf_phdr *const phdrp =				      \
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \
+	int i;								      \
+	for (i = 0; i < ehdrp->e_phnum; ++i) {				      \
+		if (phdrp[i].p_type == PT_LOAD)				      \
+			DUMP_WRITE((void *) phdrp[i].p_vaddr,		      \
+				   phdrp[i].p_filesz);			      \
+	}								      \
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#750: FILE: include/asm-um/elf.h:146:
+if ( vsyscall_ehdr ) {							      \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#750: FILE: include/asm-um/elf.h:146:
+if ( vsyscall_ehdr ) {							      \

CHECK:SPACING: No space is necessary after a cast
#753: FILE: include/asm-um/elf.h:149:
+		(const struct elf_phdr *) (vsyscall_ehdr + ehdrp->e_phoff);   \

CHECK:SPACING: No space is necessary after a cast
#757: FILE: include/asm-um/elf.h:153:
+			DUMP_WRITE((void *) phdrp[i].p_vaddr,		      \

WARNING:INCLUDE_LINUX: Use #include <linux/elf.h> instead of <asm/elf.h>
#782: FILE: include/asm-um/fixmap.h:7:
+#include <asm/elf.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 26 warnings, 20 checks, 704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
