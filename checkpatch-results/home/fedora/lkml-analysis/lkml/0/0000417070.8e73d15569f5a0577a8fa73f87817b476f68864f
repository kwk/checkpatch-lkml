WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> Note that the reason I personally really want initramfs is not to make the

WARNING:TYPO_SPELLING: 'additonally' may be misspelled - perhaps 'additionally'?
#43: 
It additonally cleans do_mounts, and rewrites the legacy initrd system. 
   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'additonal' may be misspelled - perhaps 'additional'?
#49: 
With your acceptance an additonal patch will be forthcoming making
                        ^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#79: FILE: drivers/block/Kconfig:334:
+config BLK_DEV_INITRD_UNTAR
+	bool "Initial RAM disk untar support (requires TMPFS)"
+	depends on BLK_DEV_INITRD && TMPFS
+	help
+	  Untar support to a tmpfs root. Say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#85: FILE: drivers/block/Kconfig:340:
+config BLK_DEV_INITRD_GUNZIP
+	bool "Initial RAM disk gunzip support"
+	depends on BLK_DEV_INITRD
+	help
+	  Use gzip compressed images/archives with initrd. Say Y.
+

CHECK:CAMELCASE: Avoid CamelCase: <Root_TMPFS>
#101: FILE: include/linux/root_dev.h:6:
+	Root_TMPFS = MKDEV(UNNAMED_MAJOR, 12),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#139: FILE: init/do_mounts.c:45:
+static unsigned long __initdata tmpfs_root_fssize = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MISPLACED_INIT: __initdata should be placed after tmpfs_root_fssize
#139: FILE: init/do_mounts.c:45:
+static unsigned long __initdata tmpfs_root_fssize = 0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: init/do_mounts.c:252:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#197: FILE: init/do_mounts.c:256:
+	printk ("VFS: Cannot open root device \"%s\" or %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: init/do_mounts.c:256:
+	printk ("VFS: Cannot open root device \"%s\" or %s\n",

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#198: FILE: init/do_mounts.c:257:
+		root_device_name, kdevname (to_kdev_t(ROOT_DEV)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#199: FILE: init/do_mounts.c:258:
+	printk ("Please append a correct \"root=\" boot option\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: init/do_mounts.c:258:
+	printk ("Please append a correct \"root=\" boot option\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: init/do_mounts.c:260:
+	panic("VFS: Unable to mount root fs on %s",
+		kdevname(to_kdev_t(ROOT_DEV)));

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#232: FILE: init/do_mounts.c:296:
+	if (ROOT_DEV != Root_TMPFS)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: init/do_mounts.c:298:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#235: FILE: init/do_mounts.c:299:
+	printk(KERN_ERR "VFS: Kernel does not support root fs on tmpfs.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: init/do_mounts.c:304:
+^I$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#241: FILE: init/do_mounts.c:305:
+	if (ROOT_DEV != Root_TMPFS)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: init/do_mounts.c:307:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: init/do_mounts.c:311:
+	if (sys_mount(name,"/root","tmpfs",root_mountflags & ~MS_RDONLY,data) == 0) {
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: init/do_mounts.c:311:
+	if (sys_mount(name,"/root","tmpfs",root_mountflags & ~MS_RDONLY,data) == 0) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: init/do_mounts.c:311:
+	if (sys_mount(name,"/root","tmpfs",root_mountflags & ~MS_RDONLY,data) == 0) {
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: init/do_mounts.c:311:
+	if (sys_mount(name,"/root","tmpfs",root_mountflags & ~MS_RDONLY,data) == 0) {
 	                                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: init/do_mounts.c:314:
+		printk("VFS: Mounted root (tmpfs filesystem). [");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: init/do_mounts.c:315:
+		if (tmpfs_root_fssize) printk("%luKB",tmpfs_root_fssize); else printk("No");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#251: FILE: init/do_mounts.c:315:
+		if (tmpfs_root_fssize) printk("%luKB",tmpfs_root_fssize); else printk("No");
 		                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#251: FILE: init/do_mounts.c:315:
+		if (tmpfs_root_fssize) printk("%luKB",tmpfs_root_fssize); else printk("No");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#252: FILE: init/do_mounts.c:316:
+		printk(" Ceiling]\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#255: FILE: init/do_mounts.c:319:
+	printk(KERN_ERR "VFS: Unable to mount root fs on tmpfs.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: init/do_mounts.c:323:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: init/do_mounts.c:323:
+ $

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#263: FILE: init/do_mounts.c:327:
+	if (ROOT_DEV != Root_NFS)

CHECK:CAMELCASE: Avoid CamelCase: <Root_NFS>
#263: FILE: init/do_mounts.c:327:
+	if (ROOT_DEV != Root_NFS)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: init/do_mounts.c:329:
+^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#266: FILE: init/do_mounts.c:330:
+	printk(KERN_ERR "VFS: Kernel does not support root fs via NFS.\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#273: FILE: init/do_mounts.c:336:
+	if (ROOT_DEV != Root_NFS)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: init/do_mounts.c:339:
+	if (data && sys_mount("/dev/root","/root","nfs",root_mountflags,data) == 0) {
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: init/do_mounts.c:339:
+	if (data && sys_mount("/dev/root","/root","nfs",root_mountflags,data) == 0) {
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: init/do_mounts.c:339:
+	if (data && sys_mount("/dev/root","/root","nfs",root_mountflags,data) == 0) {
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: init/do_mounts.c:339:
+	if (data && sys_mount("/dev/root","/root","nfs",root_mountflags,data) == 0) {
 	                                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: init/do_mounts.c:342:
+		printk("VFS: Mounted root (nfs filesystem).\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: init/do_mounts.c:345:
+	printk(KERN_ERR "VFS: Unable to mount root fs via NFS, trying initrd.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: init/do_mounts.c:372:
+#ifdef CONFIG_BLK_DEV_INITRD $

ERROR:SPACING: space required after that ';' (ctx:VxV)
#476: FILE: init/do_mounts.c:375:
+static int __init initrd_mount(void) { return 0;}
                                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#690: FILE: init/do_mounts.c:382:
+	if (mount_nfs_root())	return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: init/do_mounts.c:383:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#692: FILE: init/do_mounts.c:384:
+	if (initrd_mount())	return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: init/do_mounts.c:385:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: init/do_mounts.c:423:
+#ifdef CONFIG_BLK_DEV_INITRD $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#898: FILE: init/initrd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: init/initrd.c:7:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: init/initrd.c:7:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: init/initrd.c:8:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#906: FILE: init/initrd.c:9:
+/* 
+DOCS:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'excuting' may be misspelled - perhaps 'executing'?
#919: FILE: init/initrd.c:22:
+Try to execute /linuxrc. After excuting /linuxrc pivot to root= device
                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'excuting' may be misspelled - perhaps 'executing'?
#925: FILE: init/initrd.c:28:
+After excuting /linuxrc pivot to root= device and remount /dev/ram0
       ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#929: FILE: init/initrd.c:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'specificed' may be misspelled - perhaps 'specified'?
#933: FILE: init/initrd.c:36:
+specificed, the root will have a ceiling of that size.
 ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'sequencially' may be misspelled - perhaps 'sequentially'?
#937: FILE: init/initrd.c:40:
+Extract tar.gz archives sequencially.to the root.
                         ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'sequencially' may be misspelled - perhaps 'sequentially'?
#944: FILE: init/initrd.c:47:
+sequencially into the initrd memory space. If your boot loader
 ^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#949: FILE: init/initrd.c:52:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: init/initrd.c:55:
+Mount /dev/tmpfs as the primary root. $

WARNING:TYPO_SPELLING: 'excuting' may be misspelled - perhaps 'executing'?
#956: FILE: init/initrd.c:59:
+Try to execute /linuxrc. After excuting /linuxrc pivot to root= device
                                ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#962: FILE: init/initrd.c:65:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#970: FILE: init/initrd.c:73:
+extern asmlinkage long sys_access(const char * filename, int mode);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __initdata should be placed after mount_initrd
#974: FILE: init/initrd.c:77:
+static int __initdata mount_initrd = 1;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#975: FILE: init/initrd.c:78:
+static int __initdata initrd_from_floppy = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after initrd_from_floppy
#975: FILE: init/initrd.c:78:
+static int __initdata initrd_from_floppy = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#976: FILE: init/initrd.c:79:
+static unsigned long __initdata initrd_fssize = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after initrd_fssize
#976: FILE: init/initrd.c:79:
+static unsigned long __initdata initrd_fssize = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#978: FILE: init/initrd.c:81:
+static int __initdata initrd_tmpfs_fssize_speced = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after initrd_tmpfs_fssize_speced
#978: FILE: init/initrd.c:81:
+static int __initdata initrd_tmpfs_fssize_speced = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#981: FILE: init/initrd.c:84:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#984: FILE: init/initrd.c:87:
+^IGZIPPED^I^I= 2<<0,^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#984: FILE: init/initrd.c:87:
+	GZIPPED		= 2<<0,	
 	       		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#985: FILE: init/initrd.c:88:
+	TAR		= 2<<1,
 	   		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#986: FILE: init/initrd.c:89:
+	IMAGE		= 2<<2,
 	     		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#987: FILE: init/initrd.c:90:
+	ROMFS		= 2<<3,
 	     		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#988: FILE: init/initrd.c:91:
+	EXT2		= 2<<4,
 	    		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#989: FILE: init/initrd.c:92:
+	MINIX		= 2<<5
 	     		   ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#997: FILE: init/initrd.c:100:
+__setup("noinitrd", no_initrd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#999: FILE: init/initrd.c:102:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1003: FILE: init/initrd.c:106:
+	rd_prompt = simple_strtol(str,NULL,0) & 1;
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1003: FILE: init/initrd.c:106:
+	rd_prompt = simple_strtol(str,NULL,0) & 1;
 	                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1003: FILE: init/initrd.c:106:
+	rd_prompt = simple_strtol(str,NULL,0) & 1;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1006: FILE: init/initrd.c:109:
+__setup("prompt_ramdisk=", prompt_ramdisk);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1013: FILE: init/initrd.c:116:
+__setup("initrd_from_floppy",load_floppy);
                             ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1013: FILE: init/initrd.c:116:
+__setup("initrd_from_floppy",load_floppy);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1017: FILE: init/initrd.c:120:
+	rd_image_start = simple_strtol(str,NULL,0);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1017: FILE: init/initrd.c:120:
+	rd_image_start = simple_strtol(str,NULL,0);
 	                                       ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1017: FILE: init/initrd.c:120:
+	rd_image_start = simple_strtol(str,NULL,0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1020: FILE: init/initrd.c:123:
+__setup("ramdisk_start=", ramdisk_start_setup);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1029: FILE: init/initrd.c:132:
+	va_list args;
+	va_start(args, fmt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1037: FILE: init/initrd.c:140:
+	printk(KERN_NOTICE "VFS: Insert %s and press ENTER\n", buf);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1060: FILE: init/initrd.c:163:
+ * ^Iminix$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1061: FILE: init/initrd.c:164:
+ * ^Iext2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1063: FILE: init/initrd.c:166:
+ * ^Igzip$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: init/initrd.c:178:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0213'
#1093: FILE: init/initrd.c:196:
+	if (buf[0] == 037 && ((buf[1] == 0213) || (buf[1] == 0236))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0236'
#1093: FILE: init/initrd.c:196:
+	if (buf[0] == 037 && ((buf[1] == 0213) || (buf[1] == 0236))) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1106: FILE: init/initrd.c:209:
+		gunzip_load(in_fd, buf_fd, ((start_block+1) * BLOCK_SIZE) + size);
 		                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: init/initrd.c:216:
+^I/* tar archive */^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1114: FILE: init/initrd.c:217:
+	if (strncmp(&buf[257],"ustar",5) == 0) {
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1114: FILE: init/initrd.c:217:
+	if (strncmp(&buf[257],"ustar",5) == 0) {
 	                             ^

CHECK:SPACING: No space is necessary after a cast
#1120: FILE: init/initrd.c:223:
+	romfsb = (struct romfs_super_block *) buf;

CHECK:SPACING: No space is necessary after a cast
#1121: FILE: init/initrd.c:224:
+	minixsb = (struct minix_super_block *) buf;

CHECK:SPACING: No space is necessary after a cast
#1122: FILE: init/initrd.c:225:
+	ext2sb = (struct ext2_super_block *) buf;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1127: FILE: init/initrd.c:230:
+		*nblocks = (ntohl(romfsb->size)+BLOCK_SIZE-1)>>BLOCK_SIZE_BITS;
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1127: FILE: init/initrd.c:230:
+		*nblocks = (ntohl(romfsb->size)+BLOCK_SIZE-1)>>BLOCK_SIZE_BITS;
 		                                          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1127: FILE: init/initrd.c:230:
+		*nblocks = (ntohl(romfsb->size)+BLOCK_SIZE-1)>>BLOCK_SIZE_BITS;
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1135: FILE: init/initrd.c:238:
+	lseek(fd, (start_block+1) * BLOCK_SIZE, 0);
 	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1166: FILE: init/initrd.c:269:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1170: FILE: init/initrd.c:273:
+
+

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1180: FILE: init/initrd.c:283:
+	char rotator[4] = { '|' , '/' , '-' , '\\' };
 	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1180: FILE: init/initrd.c:283:
+	char rotator[4] = { '|' , '/' , '-' , '\\' };
 	                              ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1180: FILE: init/initrd.c:283:
+	char rotator[4] = { '|' , '/' , '-' , '\\' };
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1187: FILE: init/initrd.c:290:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1190: FILE: init/initrd.c:293:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1211: FILE: init/initrd.c:314:
+		printk("INITRD: image too big! (%d/%d blocks)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: init/initrd.c:318:
+^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1221: FILE: init/initrd.c:324:
+		printk(KERN_ERR "INITRD: could not allocate buffer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1235: FILE: init/initrd.c:338:
+		printk(KERN_ERR "INITRD: could not determine device size\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1239: FILE: init/initrd.c:342:
+^Iprintk(KERN_NOTICE "INITRD: Loading %d blocks [%d disk%s] into ram disk... ", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1239: FILE: init/initrd.c:342:
+	printk(KERN_NOTICE "INITRD: Loading %d blocks [%d disk%s] into ram disk... ", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: init/initrd.c:343:
+	printk(KERN_NOTICE "INITRD: Loading %d blocks [%d disk%s] into ram disk... ", 
+		nblocks, ((nblocks-1)/devblocks)+1, nblocks>devblocks ? "s" : "");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1240: FILE: init/initrd.c:343:
+		nblocks, ((nblocks-1)/devblocks)+1, nblocks>devblocks ? "s" : "");
 		                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1240: FILE: init/initrd.c:343:
+		nblocks, ((nblocks-1)/devblocks)+1, nblocks>devblocks ? "s" : "");
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1240: FILE: init/initrd.c:343:
+		nblocks, ((nblocks-1)/devblocks)+1, nblocks>devblocks ? "s" : "");
 		                                ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1240: FILE: init/initrd.c:343:
+		nblocks, ((nblocks-1)/devblocks)+1, nblocks>devblocks ? "s" : "");
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1241: FILE: init/initrd.c:344:
+	for (i=0; i < nblocks; i++) {
 	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1243: FILE: init/initrd.c:346:
+			printk("done disk #%d.\n", i/devblocks);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1243: FILE: init/initrd.c:346:
+			printk("done disk #%d.\n", i/devblocks);
 			                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1246: FILE: init/initrd.c:349:
+				printk("Error closing the disk.\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1249: FILE: init/initrd.c:352:
+			change_floppy("disk #%d", i/devblocks+1);
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1249: FILE: init/initrd.c:352:
+			change_floppy("disk #%d", i/devblocks+1);
 			                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1252: FILE: init/initrd.c:355:
+				printk("Error opening disk.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1255: FILE: init/initrd.c:358:
+			printk("Loading disk #%d... ", i/devblocks+1);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1255: FILE: init/initrd.c:358:
+			printk("Loading disk #%d... ", i/devblocks+1);
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1255: FILE: init/initrd.c:358:
+			printk("Loading disk #%d... ", i/devblocks+1);
 			                                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1261: FILE: init/initrd.c:364:
+			printk("%c\b", rotator[rotate & 0x3]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1266: FILE: init/initrd.c:369:
+	printk("done.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1279: FILE: init/initrd.c:382:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1283: FILE: init/initrd.c:386:
+	int fd = open(dev, O_RDWR, 0);
+	if (fd >= 0) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1292: FILE: init/initrd.c:395:
+	initrd_fssize = simple_strtoul(str,NULL,10);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1292: FILE: init/initrd.c:395:
+	initrd_fssize = simple_strtoul(str,NULL,10);
 	                                       ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1292: FILE: init/initrd.c:395:
+	initrd_fssize = simple_strtoul(str,NULL,10);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1297: FILE: init/initrd.c:400:
+__setup("initrd_tmpfs_size=", initrd_tmpfs_setup);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1301: FILE: init/initrd.c:404:
+static int do_linuxrc(void * shell)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1303: FILE: init/initrd.c:406:
+	static char *argv[] = { "linuxrc", NULL, };

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1304: FILE: init/initrd.c:407:
+	extern char * envp_init[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1304: FILE: init/initrd.c:407:
+	extern char * envp_init[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1306: FILE: init/initrd.c:409:
+	close(initrd_fd);close(root_fd);
 	                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1307: FILE: init/initrd.c:410:
+	close(0);close(1);close(2);
 	        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1307: FILE: init/initrd.c:410:
+	close(0);close(1);close(2);
 	                 ^

CHECK:SPACING: No space is necessary after a cast
#1309: FILE: init/initrd.c:412:
+	(void) open("/dev/console",O_RDWR,0);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: init/initrd.c:412:
+	(void) open("/dev/console",O_RDWR,0);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: init/initrd.c:412:
+	(void) open("/dev/console",O_RDWR,0);
 	                                 ^

CHECK:SPACING: No space is necessary after a cast
#1310: FILE: init/initrd.c:413:
+	(void) dup(0);

CHECK:SPACING: No space is necessary after a cast
#1311: FILE: init/initrd.c:414:
+	(void) dup(0);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1322: FILE: init/initrd.c:425:
+	if (ROOT_DEV == real_root_dev && !sys_access("./linuxrc",1))
 	                                                        ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1322: FILE: init/initrd.c:425:
+	if (ROOT_DEV == real_root_dev && !sys_access("./linuxrc",1))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1331: FILE: init/initrd.c:434:
+^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1336: FILE: init/initrd.c:439:
+	mount_devfs_fs ();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1338: FILE: init/initrd.c:441:
+	printk(KERN_NOTICE "INITRD: Executing /linuxrc.\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1342: FILE: init/initrd.c:445:
+			yield();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1344: FILE: init/initrd.c:447:
+	printk(KERN_NOTICE "INITRD: Exiting /linuxrc.\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1347: FILE: init/initrd.c:450:
+	if (ROOT_DEV != real_root_dev) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1351: FILE: init/initrd.c:454:
+^I$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1359: FILE: init/initrd.c:462:
+	if (ROOT_DEV == real_root_dev) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1365: FILE: init/initrd.c:468:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: init/initrd.c:470:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1374: FILE: init/initrd.c:477:
+	printk(KERN_NOTICE "INITRD: Moving initrd root to /initrd...");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1377: FILE: init/initrd.c:480:
+		printk("done.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1379: FILE: init/initrd.c:482:
+		printk("failed!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1403: FILE: init/initrd.c:506:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1406: FILE: init/initrd.c:509:
+	printk(KERN_NOTICE "INITRD: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1407: FILE: init/initrd.c:510:
+	if (initrd_type & GZIPPED)		printk("Compressed ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1407: FILE: init/initrd.c:510:
+	if (initrd_type & GZIPPED)		printk("Compressed ");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1408: FILE: init/initrd.c:511:
+^I$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1409: FILE: init/initrd.c:512:
+	if (initrd_type & TAR)			printk("Tar archive found at block %d.\n",rd_image_start);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1409: FILE: init/initrd.c:512:
+	if (initrd_type & TAR)			printk("Tar archive found at block %d.\n",rd_image_start);
+		

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1409: FILE: init/initrd.c:512:
+	if (initrd_type & TAR)			printk("Tar archive found at block %d.\n",rd_image_start);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1409: FILE: init/initrd.c:512:
+	if (initrd_type & TAR)			printk("Tar archive found at block %d.\n",rd_image_start);
 	                      			                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1409: FILE: init/initrd.c:512:
+	if (initrd_type & TAR)			printk("Tar archive found at block %d.\n",rd_image_start);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1410: FILE: init/initrd.c:513:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1411: FILE: init/initrd.c:514:
+	if (initrd_type & ROMFS)		printk("RomFS");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1411: FILE: init/initrd.c:514:
+	if (initrd_type & ROMFS)		printk("RomFS");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1412: FILE: init/initrd.c:515:
+	if (initrd_type & EXT2)			printk("EXT2");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1412: FILE: init/initrd.c:515:
+	if (initrd_type & EXT2)			printk("EXT2");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1413: FILE: init/initrd.c:516:
+	if (initrd_type & MINIX)		printk("Minix");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1413: FILE: init/initrd.c:516:
+	if (initrd_type & MINIX)		printk("Minix");

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1415: FILE: init/initrd.c:518:
+	if (initrd_type & IMAGE)		printk(" filesystem found at block %d. %d blocks.\n",rd_image_start, nblocks);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1415: FILE: init/initrd.c:518:
+	if (initrd_type & IMAGE)		printk(" filesystem found at block %d. %d blocks.\n",rd_image_start, nblocks);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1415: FILE: init/initrd.c:518:
+	if (initrd_type & IMAGE)		printk(" filesystem found at block %d. %d blocks.\n",rd_image_start, nblocks);
 	                        		                                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1415: FILE: init/initrd.c:518:
+	if (initrd_type & IMAGE)		printk(" filesystem found at block %d. %d blocks.\n",rd_image_start, nblocks);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1420: FILE: init/initrd.c:523:
+	extern int rd_size;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: init/initrd.c:531:
+^I/* Don't mount_initrd (noinitrd option)*/^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1430: FILE: init/initrd.c:533:
+^I^Ireturn 0;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1437: FILE: init/initrd.c:540:
+		printk(KERN_NOTICE "INITRD: Could not open initrd. (This is an error if you loaded one...)\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1440: FILE: init/initrd.c:543:
+^I$

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1444: FILE: init/initrd.c:547:
+		printk(KERN_ERR "INITRD: Could not find a valid image or archive starting at %d!\n",rd_image_start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1444: FILE: init/initrd.c:547:
+		printk(KERN_ERR "INITRD: Could not find a valid image or archive starting at %d!\n",rd_image_start);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1444: FILE: init/initrd.c:547:
+		printk(KERN_ERR "INITRD: Could not find a valid image or archive starting at %d!\n",rd_image_start);
 		                                                                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1449: FILE: init/initrd.c:552:
+		printk(KERN_ERR "INITRD: Kernel does not support compressed images!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1455: FILE: init/initrd.c:558:
+		printk(KERN_ERR "INITRD: Kernel does not support Tar archives!\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nblocks > rd_size'
#1459: FILE: init/initrd.c:562:
+	if ((initrd_type & IMAGE) && (nblocks > rd_size)) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1460: FILE: init/initrd.c:563:
+		printk(KERN_ERR "INITRD: Image will not fit on ramdisk! (%d vs. %d)\n",nblocks,rd_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1460: FILE: init/initrd.c:563:
+		printk(KERN_ERR "INITRD: Image will not fit on ramdisk! (%d vs. %d)\n",nblocks,rd_size);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1460: FILE: init/initrd.c:563:
+		printk(KERN_ERR "INITRD: Image will not fit on ramdisk! (%d vs. %d)\n",nblocks,rd_size);
 		                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1460: FILE: init/initrd.c:563:
+		printk(KERN_ERR "INITRD: Image will not fit on ramdisk! (%d vs. %d)\n",nblocks,rd_size);
 		                                                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1463: FILE: init/initrd.c:566:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1480: FILE: init/initrd.c:583:
+#endif^I$

ERROR:SPACING: space required before the open parenthesis '('
#1483: FILE: init/initrd.c:586:
+		if(rd_load_image(in_fd, nblocks) == 0)

CHECK:CAMELCASE: Avoid CamelCase: <Root_RAM0>
#1485: FILE: init/initrd.c:588:
+		ROOT_DEV = Root_RAM0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1489: FILE: init/initrd.c:592:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1492: FILE: init/initrd.c:595:
+	sys_mknod("./dev/console", S_IFCHR|0600, MKDEV(TTYAUX_MAJOR, 1));
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1496: FILE: init/initrd.c:599:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1498: FILE: init/initrd.c:601:
+}^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1500: FILE: init/initrd.c:603:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1509: FILE: init/initrd.c:612:
+#define memzero(s, n)     memset ((s), 0, (n))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1509: FILE: init/initrd.c:612:
+#define memzero(s, n)     memset ((s), 0, (n))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1512: FILE: init/initrd.c:615:
+typedef unsigned char  uch;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1513: FILE: init/initrd.c:616:
+typedef unsigned short ush;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1514: FILE: init/initrd.c:617:
+typedef unsigned long  ulg;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1521: FILE: init/initrd.c:624:
+static unsigned insizeT;  /* valid bytes in inbuf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1522: FILE: init/initrd.c:625:
+static unsigned insize;  /* valid bytes in inbuf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1523: FILE: init/initrd.c:626:
+static unsigned inptr;   /* index of next byte to be processed in inbuf */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1529: FILE: init/initrd.c:632:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bytes_out >= bytes_limit'
#1536: FILE: init/initrd.c:639:
+	if ((bytes_out >= bytes_limit) && (bytes_limit > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bytes_limit > 0'
#1536: FILE: init/initrd.c:639:
+	if ((bytes_out >= bytes_limit) && (bytes_limit > 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1538: FILE: init/initrd.c:641:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1540: FILE: init/initrd.c:643:
+	if (insize == 0) return -1;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1550: FILE: init/initrd.c:653:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1554: FILE: init/initrd.c:657:
+static unsigned outcnt;  /* bytes in output buffer */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1559: FILE: init/initrd.c:662:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1561: FILE: init/initrd.c:664:
+#define Assert(cond,msg)
                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Assert>
#1561: FILE: init/initrd.c:664:
+#define Assert(cond,msg)

CHECK:CAMELCASE: Avoid CamelCase: <Trace>
#1562: FILE: init/initrd.c:665:
+#define Trace(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracev>
#1563: FILE: init/initrd.c:666:
+#define Tracev(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracevv>
#1564: FILE: init/initrd.c:667:
+#define Tracevv(x)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1565: FILE: init/initrd.c:668:
+#define Tracec(c,x)
                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracec>
#1565: FILE: init/initrd.c:668:
+#define Tracec(c,x)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1566: FILE: init/initrd.c:669:
+#define Tracecv(c,x)
                  ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracecv>
#1566: FILE: init/initrd.c:669:
+#define Tracecv(c,x)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1598: FILE: init/initrd.c:701:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1606: FILE: init/initrd.c:709:
+	unsigned n;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bytes_limit > 0'
#1609: FILE: init/initrd.c:712:
+	if ((((bytes_out + (ulg)outcnt) > bytes_limit) && (bytes_limit > 0)))

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1610: FILE: init/initrd.c:713:
+		outcnt = bytes_limit - bytes_out;	// dc: FIX ME? We get lazy here and ignore the crc

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1627: FILE: init/initrd.c:730:
+	printk(KERN_ERR "%s", x);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1639: FILE: init/initrd.c:742:
+^Ibytes_out = 0;^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1646: FILE: init/initrd.c:749:
+		printk(KERN_ERR "INITRD: Couldn't allocate gzip buffer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1651: FILE: init/initrd.c:754:
+		printk(KERN_ERR "INITRD: Couldn't allocate gzip window\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1658: FILE: init/initrd.c:761:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1665: FILE: init/initrd.c:768:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <untarPtr>
#1670: FILE: init/initrd.c:773:
+static struct untar_context *untarPtr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1678: FILE: init/initrd.c:781:
+^Ibytes_out = 0;^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1684: FILE: init/initrd.c:787:
+		printk(KERN_ERR "INITRD: Couldn't allocate untar buffer\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1689: FILE: init/initrd.c:792:
+		int count;
+		count = untar_write(untarPtr, inbuf, insize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1697: FILE: init/initrd.c:800:
+			printk(KERN_ERR "INITRD: corrupt tar archive!\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1709: FILE: init/initrd.c:812:
+	return untar_write(untarPtr, (char*)buf, count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1719: FILE: init/initrd.c:822:
+#ifdef CONFIG_BLK_DEV_INITRD_GUNZIP^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*untarPtr)...) over kmalloc(sizeof(struct untar_context)...)
#1723: FILE: init/initrd.c:826:
+	untarPtr = kmalloc(sizeof(struct untar_context), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1725: FILE: init/initrd.c:828:
+		printk(KERN_ERR "INITRD: Couldn't allocate untar buffer\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1734: FILE: init/initrd.c:837:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1738: FILE: init/initrd.c:841:
+	// Open a 'dummy' fd and filp. Replace f_op.write with untar_write_fd()
 	                         ^^^^

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1740: FILE: init/initrd.c:843:
+	untar_fd = open("/dev/null", O_RDWR, 0);	// Opening against '/dev/null' should be safe, no?

ERROR:CODE_INDENT: code indent should use tabs where possible
#1746: FILE: init/initrd.c:849:
+        // Continue for as long as we find magic, for multiple archives.$

ERROR:SPACING: space required after that ';' (ctx:OxV)
#1747: FILE: init/initrd.c:850:
+	for(i = 0;;i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#1747: FILE: init/initrd.c:850:
+	for(i = 0;;i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1750: FILE: init/initrd.c:853:
+^I^Ilseek(in_fd, -1 * size, 1);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1751: FILE: init/initrd.c:854:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1753: FILE: init/initrd.c:856:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0213'
#1755: FILE: init/initrd.c:858:
+		if (buf[0] == 037 && ((buf[1] == 0213) || (buf[1] == 0236)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0236'
#1755: FILE: init/initrd.c:858:
+		if (buf[0] == 037 && ((buf[1] == 0213) || (buf[1] == 0236)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1757: FILE: init/initrd.c:860:
+		if (strncmp(&buf[257],"ustar",5) == 0)
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1757: FILE: init/initrd.c:860:
+		if (strncmp(&buf[257],"ustar",5) == 0)
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1761: FILE: init/initrd.c:864:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1763: FILE: init/initrd.c:866:
+#ifdef CONFIG_BLK_DEV_INITRD_GUNZIP^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1764: FILE: init/initrd.c:867:
+			printk(KERN_NOTICE "INITRD: Extracting TGZ archive[%d]: ",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1764: FILE: init/initrd.c:867:
+			printk(KERN_NOTICE "INITRD: Extracting TGZ archive[%d]: ",i);
 			                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1765: FILE: init/initrd.c:868:
+			err = gunzip_load(in_fd,untar_fd,0);
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1765: FILE: init/initrd.c:868:
+			err = gunzip_load(in_fd,untar_fd,0);
 			                                ^

ERROR:SPACING: space required before the open parenthesis '('
#1766: FILE: init/initrd.c:869:
+			if(err == 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1767: FILE: init/initrd.c:870:
+				printk("done. [%lu bytes]\n", bytes_out);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1769: FILE: init/initrd.c:872:
+			printk(KERN_ERR "INITRD: Kernel does not support compressed Tar archives.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1771: FILE: init/initrd.c:874:
+#endif^I^I       $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1773: FILE: init/initrd.c:876:
+			printk(KERN_NOTICE "INITRD: Extracting Tar archive[%d]: ",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1773: FILE: init/initrd.c:876:
+			printk(KERN_NOTICE "INITRD: Extracting Tar archive[%d]: ",i);
 			                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1774: FILE: init/initrd.c:877:
+			err = untar_load(in_fd,0);
 			                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1775: FILE: init/initrd.c:878:
+			if(err == 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1776: FILE: init/initrd.c:879:
+				printk("done. [%lu bytes]\n", bytes_out);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1777: FILE: init/initrd.c:880:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1778: FILE: init/initrd.c:881:
+			
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1780: FILE: init/initrd.c:883:
+#ifdef CONFIG_BLK_DEV_INITRD_GUNZIP^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1807: FILE: lib/inflate.c:987:
+  } while (!e && !EXIT_CODE);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1816: FILE: lib/inflate.c:1153:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1816: FILE: lib/inflate.c:1153:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1817: FILE: lib/inflate.c:1154:
+    if (EXIT_CODE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1818: FILE: lib/inflate.c:1155:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1818: FILE: lib/inflate.c:1155:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1819: FILE: lib/inflate.c:1156:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1827: FILE: lib/untar.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1829: FILE: lib/untar.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1832: FILE: lib/untar.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1836: FILE: lib/untar.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1837: FILE: lib/untar.c:11:
+ * This version of untar is very limited. It expects a fairly good archive, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1840: FILE: lib/untar.c:14:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1841: FILE: lib/untar.c:15:
+ * ^ILook for a leading '/'$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1842: FILE: lib/untar.c:16:
+ * ^ICheck before making links$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1843: FILE: lib/untar.c:17:
+ * ^ILook at the header checksum$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1844: FILE: lib/untar.c:18:
+ * ^ICheck or create any leading directory structure$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1845: FILE: lib/untar.c:19:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1849: FILE: lib/untar.c:23:
+ * $

WARNING:TYPO_SPELLING: 'mutiple' may be misspelled - perhaps 'multiple'?
#1855: FILE: lib/untar.c:29:
+ * Support extracting mutiple tgz's.
                       ^^^^^^^

WARNING:TYPO_SPELLING: 'Seemless' may be misspelled - perhaps 'Seamless'?
#1863: FILE: lib/untar.c:37:
+ * Seemless operation with archive magic testing. Purged minix support.
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'enhancments' may be misspelled - perhaps 'enhancements'?
#1864: FILE: lib/untar.c:38:
+ * Many untar enhancments.
               ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1871: FILE: lib/untar.c:45:
+#include <linux/stddef.h>  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1884: FILE: lib/untar.c:58:
+extern asmlinkage long sys_write(unsigned int fd, const char * buf,unsigned int count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1884: FILE: lib/untar.c:58:
+extern asmlinkage long sys_write(unsigned int fd, const char * buf,unsigned int count);
                                                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1885: FILE: lib/untar.c:59:
+extern asmlinkage long sys_chmod(const char * filename, mode_t mode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1885: FILE: lib/untar.c:59:
+extern asmlinkage long sys_chmod(const char * filename, mode_t mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1886: FILE: lib/untar.c:60:
+extern asmlinkage long sys_chown(const char * filename, uid_t user, gid_t group);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1886: FILE: lib/untar.c:60:
+extern asmlinkage long sys_chown(const char * filename, uid_t user, gid_t group);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1887: FILE: lib/untar.c:61:
+extern asmlinkage long sys_lchown(const char * filename, uid_t user, gid_t group);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1887: FILE: lib/untar.c:61:
+extern asmlinkage long sys_lchown(const char * filename, uid_t user, gid_t group);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1888: FILE: lib/untar.c:62:
+extern asmlinkage long sys_link(const char * oldname, const char * newname);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1888: FILE: lib/untar.c:62:
+extern asmlinkage long sys_link(const char * oldname, const char * newname);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1888: FILE: lib/untar.c:62:
+extern asmlinkage long sys_link(const char * oldname, const char * newname);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1889: FILE: lib/untar.c:63:
+extern asmlinkage long sys_utime(char * filename, struct utimbuf * times);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1889: FILE: lib/untar.c:63:
+extern asmlinkage long sys_utime(char * filename, struct utimbuf * times);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1889: FILE: lib/untar.c:63:
+extern asmlinkage long sys_utime(char * filename, struct utimbuf * times);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1890: FILE: lib/untar.c:64:
+extern asmlinkage long sys_time(int * tloc);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1890: FILE: lib/untar.c:64:
+extern asmlinkage long sys_time(int * tloc);

CHECK:CAMELCASE: Avoid CamelCase: <TarFileHeader>
#1905: FILE: lib/untar.c:79:
+struct TarFileHeader {		// byte offset

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1942: FILE: lib/untar.c:116:
+typedef union TarInfo {

CHECK:CAMELCASE: Avoid CamelCase: <TarInfo>
#1942: FILE: lib/untar.c:116:
+typedef union TarInfo {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1952: FILE: lib/untar.c:126:
+^ITarInfo^I^I^ItarInfo;^I$

CHECK:CAMELCASE: Avoid CamelCase: <tarInfo>
#1952: FILE: lib/untar.c:126:
+	TarInfo			tarInfo;	

CHECK:CAMELCASE: Avoid CamelCase: <Untar>
#1953: FILE: lib/untar.c:127:
+} *Untar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1955: FILE: lib/untar.c:129:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1959: FILE: lib/untar.c:133:
+ * NOTE: This really should be fixed in: lib/vsprintf.c $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1963: FILE: lib/untar.c:137:
+static unsigned long  __init  simple_strtoul_wrapper( const char *cp, char **endp, unsigned int base)

ERROR:POINTER_LOCATION: "foo  __init  bar" should be "foo  __init bar"
#1963: FILE: lib/untar.c:137:
+static unsigned long  __init  simple_strtoul_wrapper( const char *cp, char **endp, unsigned int base)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1963: FILE: lib/untar.c:137:
+static unsigned long  __init  simple_strtoul_wrapper( const char *cp, char **endp, unsigned int base)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1967: FILE: lib/untar.c:141:
+	return ( simple_strtoul(cp,endp,base) );
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1967: FILE: lib/untar.c:141:
+	return ( simple_strtoul(cp,endp,base) );
 	                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1967: FILE: lib/untar.c:141:
+	return ( simple_strtoul(cp,endp,base) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1967: FILE: lib/untar.c:141:
+	return ( simple_strtoul(cp,endp,base) );

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1967: FILE: lib/untar.c:141:
+	return ( simple_strtoul(cp,endp,base) );

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1967: FILE: lib/untar.c:141:
+	return ( simple_strtoul(cp,endp,base) );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1970: FILE: lib/untar.c:144:
+/* $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1977: FILE: lib/untar.c:151:
+	memset(Untar,0,sizeof(struct untar_context));
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1977: FILE: lib/untar.c:151:
+	memset(Untar,0,sizeof(struct untar_context));
 	              ^

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#1982: FILE: lib/untar.c:156:
+#define Type	Untar->tarInfo.header.typeflag

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#1983: FILE: lib/untar.c:157:
+#define Name	Untar->tarInfo.header.name

CHECK:CAMELCASE: Avoid CamelCase: <LName>
#1984: FILE: lib/untar.c:158:
+#define LName	Untar->tarInfo.header.linkname

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1985: FILE: lib/untar.c:159:
+#define Mode	strtoul(Untar->tarInfo.header.mode,NULL,8)
             	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1985: FILE: lib/untar.c:159:
+#define Mode	strtoul(Untar->tarInfo.header.mode,NULL,8)
             	                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#1985: FILE: lib/untar.c:159:
+#define Mode	strtoul(Untar->tarInfo.header.mode,NULL,8)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1986: FILE: lib/untar.c:160:
+#define Uid	strtoul(Untar->tarInfo.header.uid,NULL,8)
            	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1986: FILE: lib/untar.c:160:
+#define Uid	strtoul(Untar->tarInfo.header.uid,NULL,8)
            	                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Uid>
#1986: FILE: lib/untar.c:160:
+#define Uid	strtoul(Untar->tarInfo.header.uid,NULL,8)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1987: FILE: lib/untar.c:161:
+#define Gid	strtoul(Untar->tarInfo.header.gid,NULL,8)
            	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1987: FILE: lib/untar.c:161:
+#define Gid	strtoul(Untar->tarInfo.header.gid,NULL,8)
            	                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Gid>
#1987: FILE: lib/untar.c:161:
+#define Gid	strtoul(Untar->tarInfo.header.gid,NULL,8)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1988: FILE: lib/untar.c:162:
+#define Size	strtoul(Untar->tarInfo.header.size,NULL,8)
             	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1988: FILE: lib/untar.c:162:
+#define Size	strtoul(Untar->tarInfo.header.size,NULL,8)
             	                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Size>
#1988: FILE: lib/untar.c:162:
+#define Size	strtoul(Untar->tarInfo.header.size,NULL,8)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))
            	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))
            	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))
            	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))
            	                                                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))
            	                                                                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Dev>
#1989: FILE: lib/untar.c:163:
+#define Dev	MKDEV(strtoul(Untar->tarInfo.header.devmajor,NULL,8),strtoul(Untar->tarInfo.header.devminor,NULL,8))

CHECK:CAMELCASE: Avoid CamelCase: <Magic>
#1990: FILE: lib/untar.c:164:
+#define Magic	Untar->tarInfo.header.magic

ERROR:SPACING: space required before the open parenthesis '('
#1997: FILE: lib/untar.c:171:
+	if(Type == LNKTYPE || Type == SYMTYPE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1998: FILE: lib/untar.c:172:
+^I^Ireturn sys_lchown(Name, Uid, Gid);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1999: FILE: lib/untar.c:173:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2002: FILE: lib/untar.c:176:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2003: FILE: lib/untar.c:177:
+	ut.actime=sys_time(NULL);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2004: FILE: lib/untar.c:178:
+	ut.modtime=strtoul(Untar->tarInfo.header.mtime,NULL,8);
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2004: FILE: lib/untar.c:178:
+	ut.modtime=strtoul(Untar->tarInfo.header.mtime,NULL,8);
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2004: FILE: lib/untar.c:178:
+	ut.modtime=strtoul(Untar->tarInfo.header.mtime,NULL,8);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2005: FILE: lib/untar.c:179:
+	err |= sys_utime(Untar->tarInfo.header.name,&ut);
 	                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2005: FILE: lib/untar.c:179:
+	err |= sys_utime(Untar->tarInfo.header.name,&ut);
 	                                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2013: FILE: lib/untar.c:187:
+	int err = 0;
+	switch(Type) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2013: FILE: lib/untar.c:187:
+	switch(Type) {
+		case AREGTYPE : case REGTYPE  :
[...]
+		case LNKTYPE  :
[...]
+		case SYMTYPE  :
[...]
+		case CHRTYPE  :	case BLKTYPE  :	case FIFOTYPE :	
[...]
+		case DIRTYPE  :
[...]
+		default:	//  corrupt tar archive

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#2013: FILE: lib/untar.c:187:
+	switch(Type) {

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2014: FILE: lib/untar.c:188:
+		case AREGTYPE : case REGTYPE  :
 		              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2014: FILE: lib/untar.c:188:
+		case AREGTYPE : case REGTYPE  :
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2015: FILE: lib/untar.c:189:
+			Untar->out_fd = sys_open(Name,O_CREAT|O_WRONLY|O_TRUNC,Mode);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2015: FILE: lib/untar.c:189:
+			Untar->out_fd = sys_open(Name,O_CREAT|O_WRONLY|O_TRUNC,Mode);
 			                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2015: FILE: lib/untar.c:189:
+			Untar->out_fd = sys_open(Name,O_CREAT|O_WRONLY|O_TRUNC,Mode);
 			                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2015: FILE: lib/untar.c:189:
+			Untar->out_fd = sys_open(Name,O_CREAT|O_WRONLY|O_TRUNC,Mode);
 			                                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#2016: FILE: lib/untar.c:190:
+			if(Untar->out_fd == -1) {

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2023: FILE: lib/untar.c:197:
+		case LNKTYPE  :
 		              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2026: FILE: lib/untar.c:200:
+		case SYMTYPE  :
 		              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2029: FILE: lib/untar.c:203:
+^I^Icase CHRTYPE  :^Icase BLKTYPE  :^Icase FIFOTYPE :^I$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2029: FILE: lib/untar.c:203:
+		case CHRTYPE  :	case BLKTYPE  :	case FIFOTYPE :	
 		              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2029: FILE: lib/untar.c:203:
+		case CHRTYPE  :	case BLKTYPE  :	case FIFOTYPE :	
 		               	              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2029: FILE: lib/untar.c:203:
+		case CHRTYPE  :	case BLKTYPE  :	case FIFOTYPE :	
 		               	               	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2030: FILE: lib/untar.c:204:
+			err = sys_mknod(Name,Mode,Dev);
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2030: FILE: lib/untar.c:204:
+			err = sys_mknod(Name,Mode,Dev);
 			                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2031: FILE: lib/untar.c:205:
+   ^I    ^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2031: FILE: lib/untar.c:205:
+   ^I    ^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2031: FILE: lib/untar.c:205:
+   ^I    ^I^Ibreak;$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2032: FILE: lib/untar.c:206:
+		case DIRTYPE  :
 		              ^

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#2033: FILE: lib/untar.c:207:
+			if((Name[0] != '.' && Name[0] != 0) &&	// Skip if dirname is "" "./" "." ".."

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'Name[1] != 0'
#2033: FILE: lib/untar.c:207:
+			if((Name[0] != '.' && Name[0] != 0) &&	// Skip if dirname is "" "./" "." ".."
+			   (Name[1] != '/' && Name[1] != 0) &&	// Yes, Gnu tar can do stupid shit like this.
+			   (Name[1] != 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#2033: FILE: lib/untar.c:207:
+			if((Name[0] != '.' && Name[0] != 0) &&	// Skip if dirname is "" "./" "." ".."

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#2034: FILE: lib/untar.c:208:
+			   (Name[1] != '/' && Name[1] != 0) &&	// Yes, Gnu tar can do stupid shit like this.

ERROR:CODE_INDENT: code indent should use tabs where possible
#2036: FILE: lib/untar.c:210:
+^I^I^I   ^Ierr = sys_mkdir(Name,Mode);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2036: FILE: lib/untar.c:210:
+^I^I^I   ^Ierr = sys_mkdir(Name,Mode);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2036: FILE: lib/untar.c:210:
+			   	err = sys_mkdir(Name,Mode);
 			   	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2045: FILE: lib/untar.c:219:
+^I$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2062: FILE: lib/untar.c:236:
+	char rotator[4] = { '|' , '/' , '-' , '\\' };
 	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2062: FILE: lib/untar.c:236:
+	char rotator[4] = { '|' , '/' , '-' , '\\' };
 	                              ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2062: FILE: lib/untar.c:236:
+	char rotator[4] = { '|' , '/' , '-' , '\\' };
 	                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2064: FILE: lib/untar.c:238:
+	printk("%c\b", rotator[Untar->rotate & 0x3]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2068: FILE: lib/untar.c:242:
+^Iwhile (count) {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2069: FILE: lib/untar.c:243:
+^I^Ierr = 0;^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2070: FILE: lib/untar.c:244:
+		switch (Untar->state) {
+			case READING_HEADER:
[...]
+			case READING_DATA:
[...]
+			case SKIPPING_REST:

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2076: FILE: lib/untar.c:250:
+				to = (char*)&Untar->tarInfo;

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#2081: FILE: lib/untar.c:255:
+				// Tar usually pads the output byte to a multiple of it's block size,

ERROR:SPACING: space required before the open parenthesis '('
#2084: FILE: lib/untar.c:258:
+					if(count < TARBLOCKSIZE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2087: FILE: lib/untar.c:261:
+^I^I^I^I}^I^I^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2091: FILE: lib/untar.c:265:
+				if (strncmp(Magic,TMAGIC,sizeof(TMAGIC) != 0)) {
 				                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2091: FILE: lib/untar.c:265:
+				if (strncmp(Magic,TMAGIC,sizeof(TMAGIC) != 0)) {
 				                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2091: FILE: lib/untar.c:265:
+				if (strncmp(Magic,TMAGIC,sizeof(TMAGIC) != 0)) {
+					return count;
+				}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2096: FILE: lib/untar.c:270:
+^I$

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#2101: FILE: lib/untar.c:275:
+					scoop = Untar->fsize_remaining > TARBLOCKSIZE ? TARBLOCKSIZE : Untar->fsize_remaining;

ERROR:SPACING: space required before the open parenthesis '('
#2102: FILE: lib/untar.c:276:
+					if(sys_write(Untar->out_fd, buf, scoop) < scoop)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2122: FILE: lib/untar.c:296:
+#ifndef DEBUG_UNTAR^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2123: FILE: lib/untar.c:297:
+			printk("!");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2125: FILE: lib/untar.c:299:
+			printk("\nerr=%d, Error making %s", err, Name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2129: FILE: lib/untar.c:303:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2129: FILE: lib/untar.c:303:
+
+	

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2130: FILE: lib/untar.c:304:
+	
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417070.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 212 errors, 144 warnings, 85 checks, 1887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417070.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
