WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: drivers/can/mcp251x.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#125: FILE: drivers/can/mcp251x.c:70:
+#define TXBCTRL(n)  ((n * 0x10) + 0x30)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#129: FILE: drivers/can/mcp251x.c:74:
+ * frame). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#130: FILE: drivers/can/mcp251x.c:75:
+#define SPI_TRANSFER_BUF_LEN (2*(6 + CAN_FRAME_MAX_DATA_LEN))
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#135: FILE: drivers/can/mcp251x.c:80:
+	uint8_t *spi_transfer_buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#149: FILE: drivers/can/mcp251x.c:94:
+	uint8_t *tx_buf, *rx_buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#150: FILE: drivers/can/mcp251x.c:95:
+	uint8_t val;

CHECK:BRACES: braces {} should be used on all arms of this statement
#172: FILE: drivers/can/mcp251x.c:117:
+	if (ret < 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#173: FILE: drivers/can/mcp251x.c:118:
+		dev_dbg(&spi->dev, "%s: failed: ret = %d\n", __FUNCTION__, ret);

CHECK:BRACES: Unbalanced braces around else statement
#175: FILE: drivers/can/mcp251x.c:120:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#196: FILE: drivers/can/mcp251x.c:141:
+		dev_dbg(&spi->dev, "%s: failed: ret = %d\n", __FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#215: FILE: drivers/can/mcp251x.c:160:
+		dev_dbg(&spi->dev, "%s: failed: ret = %d\n", __FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#231: FILE: drivers/can/mcp251x.c:176:
+		dev_dbg(&spi->dev, "%s: failed: ret = %d\n", __FUNCTION__, ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#236: FILE: drivers/can/mcp251x.c:181:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#247: FILE: drivers/can/mcp251x.c:192:
+static ssize_t mcp251x_reg_addr_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#252: FILE: drivers/can/mcp251x.c:197:
+	chip->reg = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0600' used
#255: FILE: drivers/can/mcp251x.c:200:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#267: FILE: drivers/can/mcp251x.c:212:
+static ssize_t mcp251x_reg_data_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#272: FILE: drivers/can/mcp251x.c:217:
+	mcp251x_write_reg(spi, chip->reg, simple_strtoul(buf, NULL, 0));

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0600' used
#275: FILE: drivers/can/mcp251x.c:220:
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: drivers/can/mcp251x.c:226:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#282: FILE: drivers/can/mcp251x.c:227:
+static void __devinit mcp251x_hw_init(struct spi_device *spi)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#299: FILE: drivers/can/mcp251x.c:244:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: drivers/can/mcp251x.c:255:
+	for(brp = 0; brp < 8; brp++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: drivers/can/mcp251x.c:258:
+		if (tqs >= 5 && tqs <= 25
+		    && (pdata->f_osc / (2 * (brp + 1)) / tqs) == bit_rate)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#332: FILE: drivers/can/mcp251x.c:277:
+	propseg = ps1 = ps2 = (tqs - 1) / 3;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#344: FILE: drivers/can/mcp251x.c:289:
+	 * config mode. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#348: FILE: drivers/can/mcp251x.c:293:
+	mcp251x_write_reg(spi, CNF1, ((sjw-1) << 6) | brp);
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#349: FILE: drivers/can/mcp251x.c:294:
+	mcp251x_write_reg(spi, CNF2, CNF2_BTLMODE | ((ps1-1) << 3) | (propseg-1));
 	                                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#349: FILE: drivers/can/mcp251x.c:294:
+	mcp251x_write_reg(spi, CNF2, CNF2_BTLMODE | ((ps1-1) << 3) | (propseg-1));
 	                                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#350: FILE: drivers/can/mcp251x.c:295:
+	mcp251x_write_bits(spi, CNF3, CNF3_PHSEG2_MASK, (ps2-1));
 	                                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#368: FILE: drivers/can/mcp251x.c:313:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#372: FILE: drivers/can/mcp251x.c:317:
+	uint8_t *buf = chip->spi_transfer_buf;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#375: FILE: drivers/can/mcp251x.c:320:
+	dev_dbg(&spi->dev, "%s()\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#390: FILE: drivers/can/mcp251x.c:335:
+		dev_dbg(&spi->dev, "%s: failed: ret = %d\n", __FUNCTION__, ret);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#400: FILE: drivers/can/mcp251x.c:345:
+	uint8_t *buf = chip->spi_transfer_buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#401: FILE: drivers/can/mcp251x.c:346:
+	uint8_t *rx_buf;

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#410: FILE: drivers/can/mcp251x.c:355:
+	if (!skb) {
+		dev_dbg(&spi->dev, "%s: out of memory for Rx'd frame\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#410: FILE: drivers/can/mcp251x.c:355:
+		dev_dbg(&spi->dev, "%s: out of memory for Rx'd frame\n", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#422: FILE: drivers/can/mcp251x.c:367:
+	t.rx_buf = rx_buf = buf + (6 + CAN_FRAME_MAX_DATA_LEN);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#431: FILE: drivers/can/mcp251x.c:376:
+		dev_dbg(&spi->dev, "%s: failed: ret = %d\n", __FUNCTION__, ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#448: FILE: drivers/can/mcp251x.c:393:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#455: FILE: drivers/can/mcp251x.c:400:
+	dev_dbg(&spi->dev, "%s()\n", __FUNCTION__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#467: FILE: drivers/can/mcp251x.c:412:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#472: FILE: drivers/can/mcp251x.c:417:
+	uint8_t intf;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#480: FILE: drivers/can/mcp251x.c:425:
+			(intf & CANINTF_MERRF) ? " MERR":"",
 			                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#481: FILE: drivers/can/mcp251x.c:426:
+			(intf & CANINTF_WAKIF) ? " WAK":"",
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#482: FILE: drivers/can/mcp251x.c:427:
+			(intf & CANINTF_ERRIF) ? " ERR":"",
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#483: FILE: drivers/can/mcp251x.c:428:
+			(intf & CANINTF_TX2IF) ? " TX2":"",
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#484: FILE: drivers/can/mcp251x.c:429:
+			(intf & CANINTF_TX1IF) ? " TX1":"",
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#485: FILE: drivers/can/mcp251x.c:430:
+			(intf & CANINTF_TX0IF) ? " TX0":"",
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#486: FILE: drivers/can/mcp251x.c:431:
+			(intf & CANINTF_RX1IF) ? " RX1":"",
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#487: FILE: drivers/can/mcp251x.c:432:
+			(intf & CANINTF_RX0IF) ? " RX0":"");
 			                               ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#490: FILE: drivers/can/mcp251x.c:435:
+			uint8_t txbnctrl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#497: FILE: drivers/can/mcp251x.c:442:
+			uint8_t eflg = mcp251x_read_reg(spi, EFLG);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#511: FILE: drivers/can/mcp251x.c:456:
+			chip->can->stats.tx_bytes += ((struct can_frame *)(chip->tx_skb->data))->header.dlc;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: drivers/can/mcp251x.c:468:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#530: FILE: drivers/can/mcp251x.c:475:
+	 * handling workqueue. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: drivers/can/mcp251x.c:494:
+	mcp251x_write_reg(spi, CANINTE,
+		  CANINTE_ERRIE

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#605: FILE: drivers/can/mcp251x.c:550:
+	dev_dbg(&spi->dev, "%s: stop\n",  __FUNCTION__);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#619: FILE: drivers/can/mcp251x.c:564:
+static int __devinit mcp251x_probe(struct spi_device *spi)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#625: FILE: drivers/can/mcp251x.c:570:
+	dev_dbg(&spi->dev, "%s: start\n",  __FUNCTION__);

WARNING:INDENTED_LABEL: labels should not be indented
#676: FILE: drivers/can/mcp251x.c:621:
+  error_register:

WARNING:INDENTED_LABEL: labels should not be indented
#678: FILE: drivers/can/mcp251x.c:623:
+  error_irq:

WARNING:INDENTED_LABEL: labels should not be indented
#680: FILE: drivers/can/mcp251x.c:625:
+  error_buf:

WARNING:INDENTED_LABEL: labels should not be indented
#682: FILE: drivers/can/mcp251x.c:627:
+  error_alloc:

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: drivers/can/mcp251x.c:636:
+        if (!netif_running(&chip->can->ndev))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: drivers/can/mcp251x.c:636:
+        if (!netif_running(&chip->can->ndev))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#692: FILE: drivers/can/mcp251x.c:637:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: drivers/can/mcp251x.c:637:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: drivers/can/mcp251x.c:653:
+        if (!netif_running(&chip->can->ndev))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: drivers/can/mcp251x.c:653:
+        if (!netif_running(&chip->can->ndev))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: drivers/can/mcp251x.c:654:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: drivers/can/mcp251x.c:654:
+                return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#720: FILE: drivers/can/mcp251x.c:665:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#747: FILE: drivers/can/mcp251x.c:692:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#755: FILE: include/linux/can/mcp251x.h:1:
+/*

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#789: FILE: drivers/can/Kconfig:17:
+config CAN_MCP251X
+	tristate "MCP251x CAN controller"
+	depends on CAN
+	depends on SPI
+	help
+	  Support for Microchip MCP2510 and MCP2515 CAN controllers.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called mcp251x.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112054.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 35 warnings, 38 checks, 738 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112054.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
