CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_fd"
#55: FILE: arch/um/kernel/irq.c:102:
+		for (irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == IRQ_WRITE'
#67: FILE: arch/um/kernel/irq.c:116:
+		if ((type == IRQ_WRITE) && !pty_output_sigio) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fd"
#94: FILE: arch/um/kernel/irq.c:140:
+	if (new_fd == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_fd"
#112: FILE: arch/um/kernel/irq.c:170:
+	for (irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq_fd->fd == fd'
#113: FILE: arch/um/kernel/irq.c:171:
+		if ((irq_fd->fd == fd) && (irq_fd->type == type)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq_fd->type == type'
#113: FILE: arch/um/kernel/irq.c:171:
+		if ((irq_fd->fd == fd) && (irq_fd->type == type)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq"
#170: FILE: arch/um/kernel/irq.c:279:
+	for (irq = active_fds; irq != NULL; irq = irq->next) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq->fd == fd'
#171: FILE: arch/um/kernel/irq.c:280:
+		if ((irq->fd == fd) && (irq->irq == irqnum))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq->irq == irqnum'
#171: FILE: arch/um/kernel/irq.c:280:
+		if ((irq->fd == fd) && (irq->irq == irqnum))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#176: FILE: arch/um/kernel/irq.c:284:
+	if (irq == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fdi != fd'
#182: FILE: arch/um/kernel/irq.c:289:
+	if ((fdi != -1) && (fdi != fd)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#200: FILE: arch/um/kernel/irq.c:309:
+	if (irq == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#209: FILE: arch/um/kernel/irq.c:330:
+	if (irq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq"
#218: FILE: arch/um/kernel/irq.c:342:
+	for (irq = active_fds; irq != NULL; irq = irq->next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq"
#238: FILE: arch/um/kernel/irq.c:360:
+	for (irq = active_fds; irq != NULL; irq = irq->next) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: arch/um/kernel/irq.c:383:
+       __do_IRQ(irq, (struct pt_regs *)regs);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pollfds"
#359: FILE: arch/um/os-Linux/irq.c:68:
+		if (pollfds != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#372: FILE: arch/um/os-Linux/irq.c:76:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#394: FILE: arch/um/os-Linux/irq.c:94:
+	while (*prev != NULL) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 1 warnings, 18 checks, 367 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
