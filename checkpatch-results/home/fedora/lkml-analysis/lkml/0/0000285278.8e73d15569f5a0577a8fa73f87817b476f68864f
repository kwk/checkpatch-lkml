WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/ckrm_tsk.h:1:
+/* ckrm_tsk.h - No. of tasks resource controller for CKRM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: include/linux/ckrm_tsk.h:4:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: include/linux/ckrm_tsk.h:8:
+ * $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/ckrm_tsk.h:29:
+extern int numtasks_get_ref(void *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/ckrm_tsk.h:30:
+extern int numtasks_get_ref_resid(void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#72: FILE: include/linux/ckrm_tsk.h:30:
+extern int numtasks_get_ref_resid(void *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#72: FILE: include/linux/ckrm_tsk.h:30:
+extern int numtasks_get_ref_resid(void *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#72: FILE: include/linux/ckrm_tsk.h:30:
+extern int numtasks_get_ref_resid(void *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/ckrm_tsk.h:31:
+extern void numtasks_put_ref(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#73: FILE: include/linux/ckrm_tsk.h:31:
+extern void numtasks_put_ref(void *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: kernel/ckrm/ckrm_tasks.c:1:
+/* ckrm_numtasks.c - "Number of tasks" resource controller for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: kernel/ckrm/ckrm_tasks.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: kernel/ckrm/ckrm_tasks.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: kernel/ckrm/ckrm_tasks.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: kernel/ckrm/ckrm_tasks.c:17:
+ * $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#125: FILE: kernel/ckrm/ckrm_tasks.c:38:
+typedef struct ckrm_numtasks {

WARNING:TYPO_SPELLING: 'statictics' may be misspelled - perhaps 'statistics'?
#138: FILE: kernel/ckrm/ckrm_tasks.c:51:
+	// internally maintained statictics to compare with max numbers
 	                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'statictics' may be misspelled - perhaps 'statistics'?
#143: FILE: kernel/ckrm/ckrm_tasks.c:56:
+	// Maximum the specific statictics has reached.
 	                        ^^^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#192: FILE: kernel/ckrm/ckrm_tasks.c:105:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: kernel/ckrm/ckrm_tasks.c:107:
+#if 0^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#194: FILE: kernel/ckrm/ckrm_tasks.c:107:
+#if 0	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: kernel/ckrm/ckrm_tasks.c:113:
+^I/* Write a version which propagates values all the way down $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#201: FILE: kernel/ckrm/ckrm_tasks.c:114:
+	/* Write a version which propagates values all the way down 
+	   and replace rcbs callback with that version */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: kernel/ckrm/ckrm_tasks.c:114:
+	   and replace rcbs callback with that version */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/ckrm/ckrm_tasks.c:115:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#203: FILE: kernel/ckrm/ckrm_tasks.c:116:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#213: FILE: kernel/ckrm/ckrm_tasks.c:126:
+	if ((resid < 0) || (core == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'core == NULL'
#213: FILE: kernel/ckrm/ckrm_tasks.c:126:
+	if ((resid < 0) || (core == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!core"
#213: FILE: kernel/ckrm/ckrm_tasks.c:126:
+	if ((resid < 0) || (core == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: kernel/ckrm/ckrm_tasks.c:130:
+^Iif (res == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#217: FILE: kernel/ckrm/ckrm_tasks.c:130:
+	if (res == NULL) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->parent'
#223: FILE: kernel/ckrm/ckrm_tasks.c:136:
+	if (((res->parent) && (res->cnt_unused == CKRM_SHARE_DONTCARE)) ||
+			(atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->cnt_unused == CKRM_SHARE_DONTCARE'
#223: FILE: kernel/ckrm/ckrm_tasks.c:136:
+	if (((res->parent) && (res->cnt_unused == CKRM_SHARE_DONTCARE)) ||
+			(atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: kernel/ckrm/ckrm_tasks.c:137:
+	if (((res->parent) && (res->cnt_unused == CKRM_SHARE_DONTCARE)) ||
+			(atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#225: FILE: kernel/ckrm/ckrm_tasks.c:138:
+			(atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: kernel/ckrm/ckrm_tasks.c:140:
+^I^Iif (!force && (res->cnt_limit != CKRM_SHARE_DONTCARE) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->cnt_limit != CKRM_SHARE_DONTCARE'
#227: FILE: kernel/ckrm/ckrm_tasks.c:140:
+		if (!force && (res->cnt_limit != CKRM_SHARE_DONTCARE) && 
+				(atomic_read(&res->cnt_cur_alloc) > res->cnt_limit)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: kernel/ckrm/ckrm_tasks.c:141:
+		if (!force && (res->cnt_limit != CKRM_SHARE_DONTCARE) && 
+				(atomic_read(&res->cnt_cur_alloc) > res->cnt_limit)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "res->parent"
#231: FILE: kernel/ckrm/ckrm_tasks.c:144:
+		} else if (res->parent != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#232: FILE: kernel/ckrm/ckrm_tasks.c:145:
+			if ((rc = numtasks_get_ref(res->parent, force)) == 1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#247: FILE: kernel/ckrm/ckrm_tasks.c:160:
+		if (res->max_limit_failures < res->limit_failures) {
+			res->max_limit_failures = res->limit_failures;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#250: FILE: kernel/ckrm/ckrm_tasks.c:163:
+		if (res->max_borrow_sucesses < res->borrow_sucesses) {
+			res->max_borrow_sucesses = res->borrow_sucesses;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#253: FILE: kernel/ckrm/ckrm_tasks.c:166:
+		if (res->max_borrow_failures < res->borrow_failures) {
+			res->max_borrow_failures = res->borrow_failures;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#261: FILE: kernel/ckrm/ckrm_tasks.c:174:
+	if (!rc) {
+		atomic_dec(&res->cnt_cur_alloc);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'core == NULL'
#274: FILE: kernel/ckrm/ckrm_tasks.c:187:
+	if ((resid == -1) || (core == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#274: FILE: kernel/ckrm/ckrm_tasks.c:187:
+	if ((resid == -1) || (core == NULL)) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!core"
#274: FILE: kernel/ckrm/ckrm_tasks.c:187:
+	if ((resid == -1) || (core == NULL)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: kernel/ckrm/ckrm_tasks.c:192:
+^Iif (res == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#279: FILE: kernel/ckrm/ckrm_tasks.c:192:
+	if (res == NULL) 

WARNING:RETURN_VOID: void function return statements are not generally useful
#287: FILE: kernel/ckrm/ckrm_tasks.c:200:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: kernel/ckrm/ckrm_tasks.c:206:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: kernel/ckrm/ckrm_tasks.c:208:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#301: FILE: kernel/ckrm/ckrm_tasks.c:214:
+		if (parent == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#309: FILE: kernel/ckrm/ckrm_tasks.c:222:
+		printk(KERN_ERR "numtasks_res_alloc: failed GFP_ATOMIC alloc\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numtasks_res_alloc', this function's name, in a string
#309: FILE: kernel/ckrm/ckrm_tasks.c:222:
+		printk(KERN_ERR "numtasks_res_alloc: failed GFP_ATOMIC alloc\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#321: FILE: kernel/ckrm/ckrm_tasks.c:234:
+	ckrm_numtasks_t *res = my_res, *parres, *childres;
 	                                         ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: kernel/ckrm/ckrm_tasks.c:238:
+^Iif (!res) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: kernel/ckrm/ckrm_tasks.c:242:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: kernel/ckrm/ckrm_tasks.c:246:
+	if (unlikely(atomic_read(&res->cnt_cur_alloc) != 0 ||
+				atomic_read(&res->cnt_borrowed))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#334: FILE: kernel/ckrm/ckrm_tasks.c:247:
+		printk(KERN_ERR "numtasks_res_free: resource still alloc'd %p\n", res);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numtasks_res_free', this function's name, in a string
#334: FILE: kernel/ckrm/ckrm_tasks.c:247:
+		printk(KERN_ERR "numtasks_res_free: resource still alloc'd %p\n", res);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#335: FILE: kernel/ckrm/ckrm_tasks.c:248:
+		if ((borrowed = atomic_read(&res->cnt_borrowed)) > 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#336: FILE: kernel/ckrm/ckrm_tasks.c:249:
+			for (i = 0; i < borrowed; i++) {
+				numtasks_put_ref(parres->core);
+			}

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#350: FILE: kernel/ckrm/ckrm_tasks.c:263:
+		childres = ckrm_get_res_class(child, resid, ckrm_numtasks_t);
 		^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#351: FILE: kernel/ckrm/ckrm_tasks.c:264:
+		if (maxlimit < childres->shares.my_limit) {
+			maxlimit = childres->shares.my_limit;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#356: FILE: kernel/ckrm/ckrm_tasks.c:269:
+	if (parres->shares.cur_max_limit < maxlimit) {
+		parres->shares.cur_max_limit = maxlimit;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#363: FILE: kernel/ckrm/ckrm_tasks.c:276:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#364: FILE: kernel/ckrm/ckrm_tasks.c:277:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#373: FILE: kernel/ckrm/ckrm_tasks.c:286:
+	ckrm_numtasks_t *childres;
 	                 ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: kernel/ckrm/ckrm_tasks.c:298:
+^I^I^Ires->cnt_guarantee = (self->my_guarantee * parres->cnt_guarantee) $

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#407: FILE: kernel/ckrm/ckrm_tasks.c:320:
+		childres = ckrm_get_res_class(child, resid, ckrm_numtasks_t);
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#410: FILE: kernel/ckrm/ckrm_tasks.c:323:
+		recalc_and_propagate(childres, res);
 		                     ^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#415: FILE: kernel/ckrm/ckrm_tasks.c:328:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: kernel/ckrm/ckrm_tasks.c:337:
+^Iif (!res) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == 0'
#440: FILE: kernel/ckrm/ckrm_tasks.c:353:
+	if ((rc == 0) && parres) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#452: FILE: kernel/ckrm/ckrm_tasks.c:365:
+	if (res->parent) {
+		spin_unlock(&parres->cnt_lock);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: kernel/ckrm/ckrm_tasks.c:371:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: kernel/ckrm/ckrm_tasks.c:377:
+^Iif (!res) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: kernel/ckrm/ckrm_tasks.c:383:
+static int  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: kernel/ckrm/ckrm_tasks.c:388:
+^Iif (!res) $

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#478: FILE: kernel/ckrm/ckrm_tasks.c:391:
+	seq_printf(sfile, "Number of tasks resource:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: kernel/ckrm/ckrm_tasks.c:393:
+	seq_printf(sfile, "Total Over limit failures: %d\n",
+			res->tot_limit_failures);

WARNING:TYPO_SPELLING: 'sucesses' may be misspelled - perhaps 'successes'?
#481: FILE: kernel/ckrm/ckrm_tasks.c:394:
+	seq_printf(sfile, "Total Over guarantee sucesses: %d\n",
 	                                        ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: kernel/ckrm/ckrm_tasks.c:395:
+	seq_printf(sfile, "Total Over guarantee sucesses: %d\n",
+			res->tot_borrow_sucesses);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: kernel/ckrm/ckrm_tasks.c:397:
+	seq_printf(sfile, "Total Over guarantee failures: %d\n",
+			res->tot_borrow_failures);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: kernel/ckrm/ckrm_tasks.c:400:
+	seq_printf(sfile, "Maximum Over limit failures: %d\n",
+			res->max_limit_failures);

WARNING:TYPO_SPELLING: 'sucesses' may be misspelled - perhaps 'successes'?
#488: FILE: kernel/ckrm/ckrm_tasks.c:401:
+	seq_printf(sfile, "Maximum Over guarantee sucesses: %d\n",
 	                                          ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: kernel/ckrm/ckrm_tasks.c:402:
+	seq_printf(sfile, "Maximum Over guarantee sucesses: %d\n",
+			res->max_borrow_sucesses);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: kernel/ckrm/ckrm_tasks.c:404:
+	seq_printf(sfile, "Maximum Over guarantee failures: %d\n",
+			res->max_borrow_failures);

WARNING:SPLIT_STRING: quoted string split across lines
#494: FILE: kernel/ckrm/ckrm_tasks.c:407:
+	seq_printf(sfile, "cur_alloc %d; borrowed %d; cnt_guar %d; cnt_limit %d "
+			"unused_guarantee %d, cur_max_limit %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: kernel/ckrm/ckrm_tasks.c:419:
+static int  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: kernel/ckrm/ckrm_tasks.c:424:
+^Iif (!res) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#514: FILE: kernel/ckrm/ckrm_tasks.c:427:
+	seq_printf(sfile, "res=%s,parameter=somevalue\n",NUMTASKS_NAME);
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: kernel/ckrm/ckrm_tasks.c:431:
+static int  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: kernel/ckrm/ckrm_tasks.c:436:
+^Iif (!res) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#525: FILE: kernel/ckrm/ckrm_tasks.c:438:
+	printk("numtasks config='%s'\n",cfgstr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#525: FILE: kernel/ckrm/ckrm_tasks.c:438:
+	printk("numtasks config='%s'\n",cfgstr);
 	                               ^

CHECK:SPACING: No space is necessary after a cast
#535: FILE: kernel/ckrm/ckrm_tasks.c:448:
+	if (oldres != (void *) -1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: kernel/ckrm/ckrm_tasks.c:450:
+		struct task_struct *tsk = task;
+		if (!oldres) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->parent->taskclass->core
#538: FILE: kernel/ckrm/ckrm_tasks.c:451:
+			struct ckrm_core_class *old_core = &(tsk->parent->taskclass->core);

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: kernel/ckrm/ckrm_tasks.c:452:
+			struct ckrm_core_class *old_core = &(tsk->parent->taskclass->core);
+			oldres = ckrm_get_res_class(old_core, numtasks_rcbs.resid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: kernel/ckrm/ckrm_tasks.c:453:
+			oldres = ckrm_get_res_class(old_core, numtasks_rcbs.resid,
+					ckrm_numtasks_t);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#544: FILE: kernel/ckrm/ckrm_tasks.c:457:
+	if (newres) {
+		(void) numtasks_get_ref(newres->core, 1);
+	}

CHECK:SPACING: No space is necessary after a cast
#545: FILE: kernel/ckrm/ckrm_tasks.c:458:
+		(void) numtasks_get_ref(newres->core, 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#570: FILE: kernel/ckrm/ckrm_tasks.c:483:
+	if (clstype == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#571: FILE: kernel/ckrm/ckrm_tasks.c:484:
+		printk(KERN_INFO " Unknown ckrm classtype<taskclass>");

ERROR:SPACING: space required after that ',' (ctx:VxO)
#576: FILE: kernel/ckrm/ckrm_tasks.c:489:
+		resid = ckrm_register_res_ctlr(clstype,&numtasks_rcbs);
 		                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#576: FILE: kernel/ckrm/ckrm_tasks.c:489:
+		resid = ckrm_register_res_ctlr(clstype,&numtasks_rcbs);
 		                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#577: FILE: kernel/ckrm/ckrm_tasks.c:490:
+		printk("........init_ckrm_numtasks_res -> %d\n",resid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#577: FILE: kernel/ckrm/ckrm_tasks.c:490:
+		printk("........init_ckrm_numtasks_res -> %d\n",resid);
 		                                               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_ckrm_numtasks_res', this function's name, in a string
#577: FILE: kernel/ckrm/ckrm_tasks.c:490:
+		printk("........init_ckrm_numtasks_res -> %d\n",resid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#580: FILE: kernel/ckrm/ckrm_tasks.c:493:
+}^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#592: FILE: kernel/ckrm/ckrm_tasks.c:505:
+EXPORT_SYMBOL(numtasks_get_ref);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#593: FILE: kernel/ckrm/ckrm_tasks.c:506:
+EXPORT_SYMBOL(numtasks_put_ref);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285278.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 47 warnings, 34 checks, 550 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285278.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
