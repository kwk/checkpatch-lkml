WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
1 and 2). To counteract it, a tunable parameter readahead_ratio is introduced

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#90: FILE: include/linux/fs.h:629:
+			uint64_t cache_hits;

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#106: FILE: include/linux/fs.h:645:
+#define RA_FLAG_MMAP		(1UL<<31)	/* mmaped page access */
                     		         	   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#106: FILE: include/linux/fs.h:645:
+#define RA_FLAG_MMAP		(1UL<<31)	/* mmaped page access */
                     		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#106: FILE: include/linux/fs.h:645:
+#define RA_FLAG_MMAP		(1UL<<31)	/* mmaped page access */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#107: FILE: include/linux/fs.h:646:
+#define RA_FLAG_NO_LOOKAHEAD	(1UL<<30)	/* disable look-ahead */
                             	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#107: FILE: include/linux/fs.h:646:
+#define RA_FLAG_NO_LOOKAHEAD	(1UL<<30)	/* disable look-ahead */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#108: FILE: include/linux/fs.h:647:
+#define RA_FLAG_NFSD		(1UL<<29)	/* request from nfsd */
                     		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#108: FILE: include/linux/fs.h:647:
+#define RA_FLAG_NFSD		(1UL<<29)	/* request from nfsd */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/readahead.c:1149:
+static inline void ra_set_size(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#225: FILE: mm/readahead.c:1163:
+			struct address_space *mapping, struct file *filp)
 			                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: mm/readahead.c:1163:
+static int ra_dispatch(struct file_ra_state *ra,
+			struct address_space *mapping, struct file *filp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: mm/readahead.c:1172:
+	BUG_ON(ra_class == 0 || ra_class > RA_CLASS_END);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: mm/readahead.c:1183:
+		if (ra_class == RA_CLASS_CONTEXT_AGGRESSIVE &&
+				eof_index > ra->lookahead_index + 1)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#253: FILE: mm/readahead.c:1191:
+	actual = __do_page_cache_readahead(mapping, filp,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: mm/readahead.c:1192:
+	actual = __do_page_cache_readahead(mapping, filp,
+					ra->ra_index, ra_size, la_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: mm/readahead.c:1206:
+	dprintk("readahead-%s(ino=%lu, index=%lu, ra=%lu+%lu-%lu) = %d\n",
+			ra_class_name[ra_class],

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#280: FILE: mm/readahead.c:1218:
+ *   - Substract ra_size by the old look-ahead to get real safe read-ahead;
        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: mm/readahead.c:1229:
+static inline int adjust_rala(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#295: FILE: mm/readahead.c:1233:
+	if (*ra_size > *la_size)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#297: FILE: mm/readahead.c:1235:
+	else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#340: FILE: mm/readahead.c:1278:
+static inline unsigned long compute_thrashing_threshold(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#348: FILE: mm/readahead.c:1286:
+	uint64_t ll;

CHECK:SPACING: No space is necessary after a cast
#355: FILE: mm/readahead.c:1293:
+	ll = (uint64_t) stream_shift * (global_size >> 9) * readahead_ratio * 5;

CHECK:BRACES: braces {} should be used on all arms of this statement
#359: FILE: mm/readahead.c:1297:
+	if (global_size > global_shift) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#360: FILE: mm/readahead.c:1298:
+		ll = (uint64_t) stream_shift * (global_size - global_shift);

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: mm/readahead.c:1301:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#367: FILE: mm/readahead.c:1305:
+	ddprintk("compute_thrashing_threshold: "
+			"at %lu ra %lu=%lu*%lu/%lu, remain %lu for %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#379: FILE: mm/readahead.c:1317:
+state_based_readahead(struct address_space *mapping, struct file *filp,
                                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: mm/readahead.c:1318:
+state_based_readahead(struct address_space *mapping, struct file *filp,
+			struct file_ra_state *ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#407: FILE: mm/readahead.c:1345:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 9 warnings, 22 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
