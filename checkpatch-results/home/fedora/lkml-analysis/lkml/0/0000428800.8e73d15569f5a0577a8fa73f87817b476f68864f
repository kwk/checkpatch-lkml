WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -X ../KDIFX -burp linux/include/asm-i386/pgalloc.h linux-2.5.39-work/include/asm-i386/pgalloc.h

CHECK:SPACING: No space is necessary after a cast
#51: FILE: include/asm-i386/pgalloc.h:23:
+extern pgd_t *pgd_alloc(struct mm_struct *) malloc_function;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/asm-i386/pgalloc.h:23:
+extern pgd_t *pgd_alloc(struct mm_struct *) malloc_function;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/asm-i386/pgalloc.h:26:
+extern pte_t *pte_alloc_one_kernel(struct mm_struct *, unsigned long) malloc_function;

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#67: FILE: include/linux/bootmem.h:40:
+extern void * __init __alloc_bootmem (unsigned long size, unsigned long align, unsigned long goal) malloc_function;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#67: FILE: include/linux/bootmem.h:40:
+extern void * __init __alloc_bootmem (unsigned long size, unsigned long align, unsigned long goal) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/bootmem.h:40:
+extern void * __init __alloc_bootmem (unsigned long size, unsigned long align, unsigned long goal) malloc_function;

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#76: FILE: include/linux/bootmem.h:58:
+extern void * __init __alloc_bootmem_node (pg_data_t *pgdat, unsigned long size, unsigned long align, unsigned long goal) malloc_function;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: include/linux/bootmem.h:58:
+extern void * __init __alloc_bootmem_node (pg_data_t *pgdat, unsigned long size, unsigned long align, unsigned long goal) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/bootmem.h:58:
+extern void * __init __alloc_bootmem_node (pg_data_t *pgdat, unsigned long size, unsigned long align, unsigned long goal) malloc_function;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: include/linux/dcache.h:176:
+extern struct dentry * d_alloc(struct dentry *, const struct qstr *) malloc_function;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/dcache.h:176:
+extern struct dentry * d_alloc(struct dentry *, const struct qstr *) malloc_function;

CHECK:SPACING: No space is necessary after a cast
#90: FILE: include/linux/dcache.h:177:
+extern struct dentry * d_alloc_anon(struct inode *) malloc_function;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: include/linux/dcache.h:177:
+extern struct dentry * d_alloc_anon(struct inode *) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/dcache.h:177:
+extern struct dentry * d_alloc_anon(struct inode *) malloc_function;

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#103: FILE: include/linux/gfp.h:42:
+extern struct page * FASTCALL(__alloc_pages(unsigned int gfp_mask, unsigned int order, struct zonelist *zonelist)) malloc_function;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: include/linux/gfp.h:42:
+extern struct page * FASTCALL(__alloc_pages(unsigned int gfp_mask, unsigned int order, struct zonelist *zonelist)) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/gfp.h:42:
+extern struct page * FASTCALL(__alloc_pages(unsigned int gfp_mask, unsigned int order, struct zonelist *zonelist)) malloc_function;

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#104: FILE: include/linux/gfp.h:43:
+extern struct page * alloc_pages_node(int nid, unsigned int gfp_mask, unsigned int order) malloc_function;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: include/linux/gfp.h:43:
+extern struct page * alloc_pages_node(int nid, unsigned int gfp_mask, unsigned int order) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/gfp.h:43:
+extern struct page * alloc_pages_node(int nid, unsigned int gfp_mask, unsigned int order) malloc_function;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: include/linux/gfp.h:52:
+static inline malloc_function struct page * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: include/linux/gfp.h:66:
+extern unsigned long FASTCALL(__get_free_pages(unsigned int gfp_mask, unsigned int order)) malloc_function; $

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#124: FILE: include/linux/gfp.h:66:
+extern unsigned long FASTCALL(__get_free_pages(unsigned int gfp_mask, unsigned int order)) malloc_function; 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/gfp.h:66:
+extern unsigned long FASTCALL(__get_free_pages(unsigned int gfp_mask, unsigned int order)) malloc_function; 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/gfp.h:67:
+extern unsigned long FASTCALL(get_zeroed_page(unsigned int gfp_mask)) malloc_function;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: include/linux/jbd.h:57:
+extern void * __jbd_kmalloc (char *where, size_t size, int flags, int retry) malloc_function;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: include/linux/jbd.h:57:
+extern void * __jbd_kmalloc (char *where, size_t size, int flags, int retry) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/jbd.h:57:
+extern void * __jbd_kmalloc (char *where, size_t size, int flags, int retry) malloc_function;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __malloc over __attribute__((malloc))
#150: FILE: include/linux/kernel.h:52:
+#define malloc_function __attribute__((malloc))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer noinline over __attribute__((noinline))
#152: FILE: include/linux/kernel.h:54:
+#define noinline __attribute__((noinline))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: include/linux/mempool.h:27:
+extern void * mempool_alloc(mempool_t *pool, int gfp_mask) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/linux/mempool.h:27:
+extern void * mempool_alloc(mempool_t *pool, int gfp_mask) malloc_function;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: include/linux/mm.h:421:
+pmd_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address) $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/skbuff.h:262:
+extern struct sk_buff *alloc_skb(unsigned int size, int priority) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/linux/skbuff.h:264:
+extern struct sk_buff *skb_clone(struct sk_buff *skb, int priority) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/skbuff.h:265:
+extern struct sk_buff *skb_copy(const struct sk_buff *skb, int priority) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/skbuff.h:266:
+extern struct sk_buff *pskb_copy(struct sk_buff *skb, int gfp_mask) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: include/linux/slab.h:58:
+extern void *kmem_cache_alloc(kmem_cache_t *, int) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/slab.h:62:
+extern void *kmalloc(size_t, int) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/vmalloc.h:24:
+extern void *vmalloc(unsigned long size) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/linux/vmalloc.h:25:
+extern void *vmalloc_32(unsigned long size) malloc_function;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/vmalloc.h:26:
+extern void *__vmalloc(unsigned long size, int gfp_mask, pgprot_t prot) malloc_function;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 23 checks, 152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
