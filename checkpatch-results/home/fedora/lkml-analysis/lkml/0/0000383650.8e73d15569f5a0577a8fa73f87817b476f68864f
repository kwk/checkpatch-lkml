WARNING:LEADING_SPACE: please, no spaces at the start of a line
#44: FILE: drivers/pcmcia/ds.c:81:
+    struct pcmcia_driver^I*driver;$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#53: FILE: drivers/pcmcia/ds.c:120:
+static struct pcmcia_driver *root_driver = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: drivers/pcmcia/ds.c:156:
+ ^Idriver->use_count = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#71: FILE: drivers/pcmcia/ds.c:156:
+ ^Idriver->use_count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: drivers/pcmcia/ds.c:156:
+ ^Idriver->use_count = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: drivers/pcmcia/ds.c:157:
+ ^Idriver->status = init_status;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#72: FILE: drivers/pcmcia/ds.c:157:
+ ^Idriver->status = init_status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: drivers/pcmcia/ds.c:157:
+ ^Idriver->status = init_status;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: drivers/pcmcia/ds.c:179:
+^I^I^I^Iif (b->driver == driver) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#94: FILE: drivers/pcmcia/ds.c:179:
+				if (b->driver == driver) 
+				b->instance = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: drivers/pcmcia/ds.c:181:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: drivers/pcmcia/ds.c:181:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: drivers/pcmcia/ds.c:181:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/pcmcia/ds.c:186:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: drivers/pcmcia/ds.c:186:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#102: FILE: drivers/pcmcia/ds.c:187:
+ 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: drivers/pcmcia/ds.c:192:
+    struct pcmcia_driver *driver;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#115: FILE: drivers/pcmcia/ds.c:198:
+	if (strncmp((char *)dev_info, (char *)driver->drv.name,
[...]
 	    break;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*driver)...) over kmalloc(sizeof(struct pcmcia_driver)...)
#120: FILE: drivers/pcmcia/ds.c:202:
+	driver = kmalloc(sizeof(struct pcmcia_driver), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPLIT_STRING: quoted string split across lines
#138: FILE: drivers/pcmcia/ds.c:220:
 		printk(KERN_NOTICE "ds: unable to create instance "
+		       "of '%s'!\n", driver->drv.name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/pcmcia/ds.c:230:
+    struct pcmcia_driver **d = &root_driver;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/pcmcia/ds.c:234:
+    while ((*d) && (strncmp((*d)->drv.name, (char *)dev_info,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/pcmcia/ds.c:240:
+    pcmcia_unregister_driver(*d);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: drivers/pcmcia/ds.c:241:
+    kfree(*d);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: drivers/pcmcia/ds.c:251:
+    struct pcmcia_driver *d;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/pcmcia/ds.c:400:
+    struct pcmcia_driver *driver;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#203: FILE: drivers/pcmcia/ds.c:409:
+	if (strcmp((char *)driver->drv.name,
[...]
 	    break;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*driver)...) over kmalloc(sizeof(struct pcmcia_driver)...)
#208: FILE: drivers/pcmcia/ds.c:413:
+	driver = kmalloc(sizeof(struct pcmcia_driver), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#226: FILE: drivers/pcmcia/ds.c:431:
+    bind_req.dev_info = (dev_info_t *) driver->drv.name;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/pcmcia/ds.c:431:
+    bind_req.dev_info = (dev_info_t *) driver->drv.name;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#235: FILE: drivers/pcmcia/ds.c:512:
+	if ((strcmp((char *)b->driver->drv.name,
[...]
 	    break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'b->function == bind_info->function'
#235: FILE: drivers/pcmcia/ds.c:512:
+	if ((strcmp((char *)b->driver->drv.name,
 		    (char *)bind_info->dev_info) == 0) &&
 	    (b->function == bind_info->function))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#244: FILE: drivers/pcmcia/ds.c:546:
+	if ((strcmp((char *)(*b)->driver->drv.name,
[...]
 	    break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#251: FILE: drivers/pcmcia/ds.c:559:
 	if (c->driver->use_count == 0) {
+	    struct pcmcia_driver **d;

WARNING:TABSTOP: Statements should start on a tabstop
#253: FILE: drivers/pcmcia/ds.c:560:
+	    struct pcmcia_driver **d;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_link_t *' should also have an identifier name
#271: FILE: include/pcmcia/ds.h:152:
+	void			(*detach)(dev_link_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000383650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 25 warnings, 5 checks, 237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000383650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
