ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#36: 
--- a/drivers/scsi/Config.help	Fri Oct 25 11:26:47 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: drivers/scsi/Config.help:166:
+CONFIG_SCSI_PATH_POLICY_LPU $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: drivers/scsi/Config.help:168:
+  selection policy. $

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#264: FILE: drivers/scsi/hosts.c:788:
+int scsihost_to_node(struct Scsi_Host *host)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: drivers/scsi/hosts.c:790:
+        if (!host) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: drivers/scsi/hosts.c:790:
+        if (!host) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: drivers/scsi/hosts.c:791:
+                printk(KERN_ERR "%s: host NULL\n", __FUNCTION__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/scsi/hosts.c:791:
+                printk(KERN_ERR "%s: host NULL\n", __FUNCTION__);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#267: FILE: drivers/scsi/hosts.c:791:
+                printk(KERN_ERR "%s: host NULL\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#267: FILE: drivers/scsi/hosts.c:791:
+                printk(KERN_ERR "%s: host NULL\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: drivers/scsi/hosts.c:792:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: drivers/scsi/hosts.c:792:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: drivers/scsi/hosts.c:793:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/scsi/hosts.c:793:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: drivers/scsi/hosts.c:794:
+        if(host->pci_dev)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/scsi/hosts.c:794:
+        if(host->pci_dev)$

ERROR:SPACING: space required before the open parenthesis '('
#270: FILE: drivers/scsi/hosts.c:794:
+        if(host->pci_dev)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: drivers/scsi/hosts.c:798:
+                 * return BUS2QUAD(host->pci_dev->bus->number);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: drivers/scsi/hosts.c:799:
+^I^I */ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: drivers/scsi/hosts.c:800:
+                return mp_bus_id_to_node[host->pci_dev->bus->number];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: drivers/scsi/hosts.c:800:
+                return mp_bus_id_to_node[host->pci_dev->bus->number];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: drivers/scsi/hosts.c:802:
+        printk(KERN_INFO "%s: Unable to determine bus type\n", __FUNCTION__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: drivers/scsi/hosts.c:802:
+        printk(KERN_INFO "%s: Unable to determine bus type\n", __FUNCTION__);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#278: FILE: drivers/scsi/hosts.c:802:
+        printk(KERN_INFO "%s: Unable to determine bus type\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#278: FILE: drivers/scsi/hosts.c:802:
+        printk(KERN_INFO "%s: Unable to determine bus type\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: drivers/scsi/hosts.c:803:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: drivers/scsi/hosts.c:803:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: drivers/scsi/hosts.h:595:
+static inline int scsihost_to_node(struct Scsi_Host *host) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: drivers/scsi/hosts.h:596:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: drivers/scsi/hosts.h:597:
+^Ireturn 0; $

WARNING:TYPO_SPELLING: 'interruptable' may be misspelled - perhaps 'interruptible'?
#383: FILE: drivers/scsi/scsi.c:383:
+                                int interruptable, struct scsi_path_id *path_p)
                                     ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: drivers/scsi/scsi.c:383:
+                                int interruptable, struct scsi_path_id *path_p)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: drivers/scsi/scsi.c:383:
+                                int interruptable, struct scsi_path_id *path_p)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: drivers/scsi/scsi.c:394:
+  ^Ihost = path_p->spi_shpnt;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#395: FILE: drivers/scsi/scsi.c:394:
+  ^Ihost = path_p->spi_shpnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: drivers/scsi/scsi.c:394:
+  ^Ihost = path_p->spi_shpnt;$

CHECK:CAMELCASE: Avoid CamelCase: <SDpnt>
#413: FILE: drivers/scsi/scsi.c:416:
+				scsi_for_each_sdev_lun(&strav_hndl, SDpnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/scsi/scsi.c:417:
+				scsi_for_each_sdev_lun(&strav_hndl, SDpnt,
+						host->host_no,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: drivers/scsi/scsi.c:418:
+^I^I^I^I^I^Ipath_p->spi_channel, $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#417: FILE: drivers/scsi/scsi.c:420:
+					if (SDpnt == device) {
  						continue;
 					}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#425: FILE: drivers/scsi/scsi.c:511:
+	scsi_path_set_scmnd_ids(SCpnt, path_p);

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: drivers/scsi/scsi.c:603:
+	if(shpnt && alloc_cmd) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#471: FILE: drivers/scsi/scsi.c:690:
+		printk("%s: unexpected value of reason %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#471: FILE: drivers/scsi/scsi.c:690:
+		printk("%s: unexpected value of reason %d\n", __FUNCTION__,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#516: FILE: drivers/scsi/scsi.c:763:
+	struct Scsi_Host * SHpnt;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <SHpnt>
#516: FILE: drivers/scsi/scsi.c:763:
+	struct Scsi_Host * SHpnt;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: drivers/scsi/scsi.c:777:
+        scsi_queue_next_request(q, NULL, SHpnt); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: drivers/scsi/scsi.c:777:
+        scsi_queue_next_request(q, NULL, SHpnt); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/scsi/scsi.c:777:
+        scsi_queue_next_request(q, NULL, SHpnt); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: drivers/scsi/scsi.c:852:
+^ISCSI_LOG_MLQUEUE(3, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: drivers/scsi/scsi.c:853:
+	SCSI_LOG_MLQUEUE(3, 
+		printk("scsi_dispatch_cmnd (host = %d, channel = %d, target"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: drivers/scsi/scsi.c:853:
+		printk("scsi_dispatch_cmnd (host = %d, channel = %d, target"

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: drivers/scsi/scsi.c:854:
+		printk("scsi_dispatch_cmnd (host = %d, channel = %d, target"
+		       " = %d, lun = %d,\n command = %p, buffer = %p,"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#543: FILE: drivers/scsi/scsi.c:855:
+		       " = %d, lun = %d,\n command = %p, buffer = %p,"
+		       " bufflen = %d, done = %p)\n", SCpnt->host->host_no,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#568: FILE: drivers/scsi/scsi.c:977:
+			 printk("scsi_do_req (buffer =%p, bufflen = %d, done = "

WARNING:SPLIT_STRING: quoted string split across lines
#569: FILE: drivers/scsi/scsi.c:978:
+			 printk("scsi_do_req (buffer =%p, bufflen = %d, done = "
+				" %p, timeout = %d, retries = %d)\n command : ",

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#592: FILE: drivers/scsi/scsi.c:1356:
+				SCSI_LOG_MLCOMPLETE(3, printk("Requeuing IO %d %d 0x%x\n", SCpnt->host->host_busy,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#592: FILE: drivers/scsi/scsi.c:1356:
+				SCSI_LOG_MLCOMPLETE(3, printk("Requeuing IO %d %d 0x%x\n", SCpnt->host->host_busy,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: drivers/scsi/scsi.c:1357:
+				SCSI_LOG_MLCOMPLETE(3, printk("Requeuing IO %d %d 0x%x\n", SCpnt->host->host_busy,
+				SCpnt->host->host_failed, SCpnt->result));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#643: FILE: drivers/scsi/scsi.c:1566:
+	BUG_ON(host == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host"
#643: FILE: drivers/scsi/scsi.c:1566:
+	BUG_ON(host == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: drivers/scsi/scsi.c:1675:
+^I^I^Iprintk(KERN_WARNING); $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#677: FILE: drivers/scsi/scsi.c:1675:
+			printk(KERN_WARNING); 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#679: FILE: drivers/scsi/scsi.c:1677:
+			printk("scsi_adjust_queue_depth, bad queue type, "

WARNING:SPLIT_STRING: quoted string split across lines
#680: FILE: drivers/scsi/scsi.c:1678:
+			printk("scsi_adjust_queue_depth, bad queue type, "
+				"disabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#989: FILE: drivers/scsi/scsi.c:2149:
+	printk(KERN_INFO "h:c:t:l (dev sect nsect cnumsec sg) (ret all flg) (to/cmd to ito) cmd snse result\n");

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#992: FILE: drivers/scsi/scsi.c:2152:
+			/*  (0) h:c:t:l (dev sect nsect cnumsec sg) (ret all flg) (to/cmd to ito) cmd snse result %d %x      */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#993: FILE: drivers/scsi/scsi.c:2153:
+			printk(KERN_INFO "(%3d) %2d:%1d:%2d:%2d (%6s %4llu %4ld %4ld %4x %1d) (%1d %1d 0x%2x) (%4d %4d %4d) 0x%2.2x 0x%2.2x 0x%8.8x\n",

CHECK:SPACING: No space is necessary after a cast
#1076: FILE: drivers/scsi/scsi.c:2447:
+	if ((unsigned char) scsi_path.spi_id != (unsigned char)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1109: FILE: drivers/scsi/scsi.c:2498:
+^ISCpnt->host                    ^I= scsi_path.spi_shpnt;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1114: FILE: drivers/scsi/scsi.c:2500:
+^ISCpnt->target                  ^I= scsi_path.spi_id;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1115: FILE: drivers/scsi/scsi.c:2501:
+^ISCpnt->lun                     ^I= scsi_path.spi_lun;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1116: FILE: drivers/scsi/scsi.c:2502:
+^ISCpnt->channel                 ^I= scsi_path.spi_channel;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1134: FILE: drivers/scsi/scsi.h:143:
+#define REQUEUE  ^I0x2007$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1165: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#1165: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1165: FILE: drivers/scsi/scsi.h:441:
+extern int scsi_check_sense(Scsi_Cmnd * SCpnt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1173: FILE: drivers/scsi/scsi.h:471:
+extern void scsi_cleanup_io(Scsi_Cmnd *SCpnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1187: FILE: drivers/scsi/scsi.h:486:
+extern void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1187: FILE: drivers/scsi/scsi.h:486:
+extern void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1187: FILE: drivers/scsi/scsi.h:486:
+extern void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1188: FILE: drivers/scsi/scsi.h:487:
+				    struct Scsi_Host * SHpnt);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#1191: FILE: drivers/scsi/scsi.h:490:
+extern void scsi_add_scsi_device(Scsi_Device *SDpnt, struct Scsi_Host *SHpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1191: FILE: drivers/scsi/scsi.h:490:
+extern void scsi_add_scsi_device(Scsi_Device *SDpnt, struct Scsi_Host *SHpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1192: FILE: drivers/scsi/scsi.h:491:
+extern void scsi_remove_scsi_device(Scsi_Device *SDpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: drivers/scsi/scsi.h:504:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Device *' should also have an identifier name
#1201: FILE: drivers/scsi/scsi.h:504:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1201: FILE: drivers/scsi/scsi.h:504:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1201: FILE: drivers/scsi/scsi.h:504:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_path_id *' should also have an identifier name
#1201: FILE: drivers/scsi/scsi.h:504:
+extern Scsi_Cmnd *scsi_allocate_device(Scsi_Device *, int, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1210: FILE: drivers/scsi/scsi.h:514:
+extern int scsi_paths_proc_print_paths(Scsi_Device *SDpnt, char *buffer,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1241: FILE: drivers/scsi/scsi.h:589:
+^I * Only the SCSI mid-layer routines should access sdev_next and $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: drivers/scsi/scsi.h:607:
+ ^Ivoid^I*sdev_paths;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1260: FILE: drivers/scsi/scsi.h:607:
+ ^Ivoid^I*sdev_paths;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: drivers/scsi/scsi.h:607:
+ ^Ivoid^I*sdev_paths;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1321: FILE: drivers/scsi/scsi.h:912:
+extern Scsi_Device *scsi_traverse_sdevs(struct scsi_traverse_hndl *handle,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1332: FILE: drivers/scsi/scsi.h:923:
+#define __INIT_TRAVERSE_HNDL(name) \
+	(name)->next_sdev = scsi_sdev_list

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#1340: FILE: drivers/scsi/scsi.h:931:
+#define scsi_for_all_sdevs(hndl, sdev) \
+	for (__INIT_TRAVERSE_HNDL(hndl), sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl); \
+	     sdev != NULL; sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#1340: FILE: drivers/scsi/scsi.h:931:
+#define scsi_for_all_sdevs(hndl, sdev) \
+	for (__INIT_TRAVERSE_HNDL(hndl), sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl); \
+	     sdev != NULL; sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1342: FILE: drivers/scsi/scsi.h:933:
+	     sdev != NULL; sdev = SCSI_TRAVERSE_ALL_SDEVS(hndl))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#1348: FILE: drivers/scsi/scsi.h:939:
+#define scsi_for_each_host_sdev(hndl, sdev, host) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#1348: FILE: drivers/scsi/scsi.h:939:
+#define scsi_for_each_host_sdev(hndl, sdev, host) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#1348: FILE: drivers/scsi/scsi.h:939:
+#define scsi_for_each_host_sdev(hndl, sdev, host) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1350: FILE: drivers/scsi/scsi.h:941:
+	     sdev = SCSI_TRAVERSE_HOST_SDEVS(hndl, host); sdev != NULL; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#1357: FILE: drivers/scsi/scsi.h:948:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#1357: FILE: drivers/scsi/scsi.h:948:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#1357: FILE: drivers/scsi/scsi.h:948:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1357: FILE: drivers/scsi/scsi.h:948:
+#define scsi_for_each_host_chan_sdev(hndl, sdev, host, chan) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_HOST_CHAN_SDEVS(hndl, host, chan))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1360: FILE: drivers/scsi/scsi.h:951:
+	     sdev != NULL; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#1366: FILE: drivers/scsi/scsi.h:957:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#1366: FILE: drivers/scsi/scsi.h:957:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#1366: FILE: drivers/scsi/scsi.h:957:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1366: FILE: drivers/scsi/scsi.h:957:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#1366: FILE: drivers/scsi/scsi.h:957:
+#define scsi_for_each_sdev_lun(hndl, sdev, host, chan, id) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id); \
+	     sdev != NULL; \
+	     sdev = SCSI_TRAVERSE_SDEV_LUNS(hndl, host, chan, id))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1369: FILE: drivers/scsi/scsi.h:960:
+	     sdev != NULL; \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1372: FILE: drivers/scsi/scsi.h:963:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hndl' - possible side-effects?
#1373: FILE: drivers/scsi/scsi.h:964:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); \
+	     sdev != NULL; \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdev' - possible side-effects?
#1373: FILE: drivers/scsi/scsi.h:964:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); \
+	     sdev != NULL; \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#1373: FILE: drivers/scsi/scsi.h:964:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); \
+	     sdev != NULL; \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1373: FILE: drivers/scsi/scsi.h:964:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); \
+	     sdev != NULL; \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#1373: FILE: drivers/scsi/scsi.h:964:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); \
+	     sdev != NULL; \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lun' - possible side-effects?
#1373: FILE: drivers/scsi/scsi.h:964:
+#define scsi_for_each_sdev(hndl, sdev, host, chan, id, lun) \
+	for (__INIT_TRAVERSE_HNDL(hndl), \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun); \
+	     sdev != NULL; \
+	     sdev = scsi_traverse_sdevs(hndl, host, chan, id, lun))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1376: FILE: drivers/scsi/scsi.h:967:
+	     sdev != NULL; \

CHECK:SPACING: No space is necessary after a cast
#1380: FILE: drivers/scsi/scsi.h:971:
+	scsi_traverse_sdevs((struct scsi_traverse_hndl *) NULL, host, chan, \

ERROR:SPACING: space prohibited after that open parenthesis '('
#1392: FILE: drivers/scsi/scsi.h:1069:
+extern int scsi_paths_proc_init( void );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1392: FILE: drivers/scsi/scsi.h:1069:
+extern int scsi_paths_proc_init( void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1392: FILE: drivers/scsi/scsi.h:1069:
+extern int scsi_paths_proc_init( void );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1392: FILE: drivers/scsi/scsi.h:1069:
+extern int scsi_paths_proc_init( void );

ERROR:SPACING: space prohibited after that open parenthesis '('
#1393: FILE: drivers/scsi/scsi.h:1070:
+extern void scsi_paths_proc_cleanup( void );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1393: FILE: drivers/scsi/scsi.h:1070:
+extern void scsi_paths_proc_cleanup( void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1393: FILE: drivers/scsi/scsi.h:1070:
+extern void scsi_paths_proc_cleanup( void );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1393: FILE: drivers/scsi/scsi.h:1070:
+extern void scsi_paths_proc_cleanup( void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1394: FILE: drivers/scsi/scsi.h:1071:
+extern struct Scsi_Host *scsi_get_host(Scsi_Device *SDpnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1395: FILE: drivers/scsi/scsi.h:1072:
+extern int scsi_get_path(Scsi_Device *SDpnt, struct scsi_path_id *pathp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1396: FILE: drivers/scsi/scsi.h:1073:
+extern int scsi_get_best_path(Scsi_Device *SDpnt, struct scsi_path_id *pathp,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1396: FILE: drivers/scsi/scsi.h:1073:
+extern int scsi_get_best_path(Scsi_Device *SDpnt, struct scsi_path_id *pathp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1398: FILE: drivers/scsi/scsi.h:1075:
+extern int scsi_decide_disposition(struct scsi_cmnd *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#1398: FILE: drivers/scsi/scsi.h:1075:
+extern int scsi_decide_disposition(struct scsi_cmnd *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1399: FILE: drivers/scsi/scsi.h:1076:
+extern int scsi_add_path(Scsi_Device *SDpnt, struct Scsi_Host *shpnt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1402: FILE: drivers/scsi/scsi.h:1079:
+extern void  scsi_remove_path(Scsi_Device *SDpnt, unsigned int host_no,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1405: FILE: drivers/scsi/scsi.h:1082:
+extern Scsi_Device *scsi_lookup_id(char *id, Scsi_Device *sdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1406: FILE: drivers/scsi/scsi.h:1083:
+extern void scsi_replace_path(Scsi_Device *sdev, struct Scsi_Host *shost,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: drivers/scsi/scsi.h:1084:
+extern void scsi_replace_path(Scsi_Device *sdev, struct Scsi_Host *shost,
+	unsigned int channel, unsigned int id, unsigned int lun);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1409: FILE: drivers/scsi/scsi.h:1086:
+extern void scsi_paths_printk(Scsi_Device *SDpnt, char *prefix, char *format);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1411: FILE: drivers/scsi/scsi.h:1088:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {^I^I ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'scp' - possible side-effects?
#1411: FILE: drivers/scsi/scsi.h:1088:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'scp' may be better as '(scp)' to avoid precedence issues
#1411: FILE: drivers/scsi/scsi.h:1088:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pathp' - possible side-effects?
#1411: FILE: drivers/scsi/scsi.h:1088:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pathp' may be better as '(pathp)' to avoid precedence issues
#1411: FILE: drivers/scsi/scsi.h:1088:
+#define scsi_path_set_scmnd_ids(scp, pathp) do {		 	\
+	scp->host = pathp->spi_shpnt;			\
+	scp->target = pathp->spi_id;			\
+	scp->lun = pathp->spi_lun; 				\
+	scp->channel = pathp->spi_channel; } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1414: FILE: drivers/scsi/scsi.h:1091:
+^Iscp->lun = pathp->spi_lun; ^I^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#1415: FILE: drivers/scsi/scsi.h:1092:
+	scp->channel = pathp->spi_channel; } while(0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1503: FILE: drivers/scsi/scsi_error.c:191:
+				printk("scsi_eh: device at ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1506: FILE: drivers/scsi/scsi_error.c:194:
+				printk(" cmds failed: %d, timed out: %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1507: FILE: drivers/scsi/scsi_error.c:195:
+^I^I^I^I       cmd_failed, cmd_timed_out); $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1548: FILE: drivers/scsi/scsi_error.c:812:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1575: FILE: drivers/scsi/scsi_error.c:839:
+^I^ISCSI_LOG_TIMEOUT(3, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1576: FILE: drivers/scsi/scsi_error.c:840:
+		SCSI_LOG_TIMEOUT(3, 
+			printk("Requeuing timed out IO host %d channel %d id % d lun %d; result 0x%x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1576: FILE: drivers/scsi/scsi_error.c:840:
+			printk("Requeuing timed out IO host %d channel %d id % d lun %d; result 0x%x\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#1589: FILE: drivers/scsi/scsi_error.c:853:
+	if( scmd->host->eh_wait == NULL ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1589: FILE: drivers/scsi/scsi_error.c:853:
+	if( scmd->host->eh_wait == NULL ) {

ERROR:SPACING: space required before the open parenthesis '('
#1589: FILE: drivers/scsi/scsi_error.c:853:
+	if( scmd->host->eh_wait == NULL ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scmd->host->eh_wait"
#1589: FILE: drivers/scsi/scsi_error.c:853:
+	if( scmd->host->eh_wait == NULL ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1596: FILE: drivers/scsi/scsi_error.c:860:
+	SCSI_LOG_TIMEOUT(3, printk("Command timed out active=%d busy=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#1597: FILE: drivers/scsi/scsi_error.c:861:
+	SCSI_LOG_TIMEOUT(3, printk("Command timed out active=%d busy=%d "
+				   "failed=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1638: FILE: drivers/scsi/scsi_error.c:1064:
+		scsi_for_each_host_chan_sdev(&strav_hndl, sdev,
+		     scmd->host->host_no, scmd->channel) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1665: FILE: drivers/scsi/scsi_error.c:1101:
+		scsi_for_each_host_chan_sdev(&strav_hndl, sdev,
+		     scmd->host->host_no, scmd->channel) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1677: FILE: drivers/scsi/scsi_error.c:1157:
+^I^Irtn = scsi_try_bus_reset(scmd); $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1693: FILE: drivers/scsi/scsi_error.c:1193:
+		printk(KERN_INFO "%s: device at ", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1693: FILE: drivers/scsi/scsi_error.c:1193:
+		printk(KERN_INFO "%s: device at ", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1696: FILE: drivers/scsi/scsi_error.c:1196:
+		printk(" set offline - not ready or command retry"

WARNING:SPLIT_STRING: quoted string split across lines
#1697: FILE: drivers/scsi/scsi_error.c:1197:
+		printk(" set offline - not ready or command retry"
+		       " failed after bus and host reset\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 60 warnings, 67 checks, 1771 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
