WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Adds stacking support to capability module. Without this patch, I have to boot 

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#60: FILE: security/capability.c:28:
+struct security_operations *cap_original_ops = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#61: FILE: security/capability.c:29:
+extern struct security_operations *cap_secondary_ops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: security/capability.c:33:
+  return cap_secondary_ops->bprm_alloc_security(bprm);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: security/capability.c:37:
+{  ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#69: FILE: security/capability.c:37:
+{  ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: security/capability.c:38:
+  return cap_secondary_ops->bprm_free_security(bprm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: security/capability.c:43:
+  return cap_secondary_ops->bprm_post_apply_creds(bprm);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#77: FILE: security/capability.c:45:
+}
+void cap_stack_inode_free_security(struct inode *inode)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: security/capability.c:47:
+  return cap_secondary_ops->inode_free_security(inode);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: security/capability.c:50:
+int cap_stack_inode_getsecurity(struct inode *inode, const char *name, void $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#83: FILE: security/capability.c:50:
*buffer, size_t size, int err)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: security/capability.c:52:
+  return cap_secondary_ops->inode_getsecurity(inode,name,buffer,size,err);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: security/capability.c:52:
+  return cap_secondary_ops->inode_getsecurity(inode,name,buffer,size,err);
                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: security/capability.c:52:
+  return cap_secondary_ops->inode_getsecurity(inode,name,buffer,size,err);
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: security/capability.c:52:
+  return cap_secondary_ops->inode_getsecurity(inode,name,buffer,size,err);
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: security/capability.c:52:
+  return cap_secondary_ops->inode_getsecurity(inode,name,buffer,size,err);
                                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: security/capability.c:55:
+int cap_stack_inode_listsecurity(struct inode *inode, char *buffer, size_t $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: security/capability.c:57:
+  return cap_secondary_ops->inode_listsecurity(inode,buffer,buffer_size);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: security/capability.c:57:
+  return cap_secondary_ops->inode_listsecurity(inode,buffer,buffer_size);
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: security/capability.c:57:
+  return cap_secondary_ops->inode_listsecurity(inode,buffer,buffer_size);
                                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: security/capability.c:60:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#95: FILE: security/capability.c:61:
+int cap_stack_file_receive(struct file* file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: security/capability.c:63:
+  return cap_secondary_ops->file_receive(file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: security/capability.c:68:
+   if(cap_secondary_ops)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 5)
#102: FILE: security/capability.c:68:
+   if(cap_secondary_ops)
+     return cap_secondary_ops->task_alloc_security(task);

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: security/capability.c:68:
+   if(cap_secondary_ops)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: security/capability.c:69:
+     return cap_secondary_ops->task_alloc_security(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: security/capability.c:70:
+   else return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#104: FILE: security/capability.c:70:
+   else return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: security/capability.c:75:
+  return cap_secondary_ops->task_free_security(task);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: security/capability.c:79:
+void cap_stack_socket_post_create(struct socket *sock, int family,
+					 int type, int protocol, int kern)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: security/capability.c:81:
+  return $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: security/capability.c:81:
+  return $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: security/capability.c:86:
+  return cap_secondary_ops->socket_accept(sock,newsock);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: security/capability.c:86:
+  return cap_secondary_ops->socket_accept(sock,newsock);
                                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: security/capability.c:89:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: security/capability.c:91:
+int cap_stack_register_security (const char *name, struct security_operations $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: security/capability.c:91:
+int cap_stack_register_security (const char *name, struct security_operations 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#129: FILE: security/capability.c:93:
+	if (cap_secondary_ops != cap_original_ops)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#131: FILE: security/capability.c:95:
+		printk(KERN_INFO "%s:  There is already a secondary security "

WARNING:SPLIT_STRING: quoted string split across lines
#132: FILE: security/capability.c:96:
+		printk(KERN_INFO "%s:  There is already a secondary security "
+		       "module registered.\n", __FUNCTION__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#132: FILE: security/capability.c:96:
+		       "module registered.\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: security/capability.c:99:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: security/capability.c:101:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#138: FILE: security/capability.c:102:
+	printk(KERN_INFO "%s:  Registering secondary module %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#139: FILE: security/capability.c:103:
+	       __FUNCTION__,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: security/capability.c:105:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: security/capability.c:109:
+static int cap_stack_unregister_security (const char *name, struct $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#145: FILE: security/capability.c:109:
+static int cap_stack_unregister_security (const char *name, struct 

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: security/capability.c:111:
+        if (ops != cap_secondary_ops)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: security/capability.c:111:
+        if (ops != cap_secondary_ops)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#148: FILE: security/capability.c:111:
+        if (ops != cap_secondary_ops)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: security/capability.c:112:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: security/capability.c:112:
+        {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: security/capability.c:113:
+                printk (KERN_INFO "%s:  trying to unregister a security $

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: security/capability.c:113:
+                printk (KERN_INFO "%s:  trying to unregister a security $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: security/capability.c:113:
+                printk (KERN_INFO "%s:  trying to unregister a security $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#150: FILE: security/capability.c:113:
+                printk (KERN_INFO "%s:  trying to unregister a security 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: security/capability.c:113:
+                printk (KERN_INFO "%s:  trying to unregister a security 

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: security/capability.c:114:
+                        "that is not registered.\n", __FUNCTION__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: security/capability.c:114:
+                        "that is not registered.\n", __FUNCTION__);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: security/capability.c:115:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: security/capability.c:115:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: security/capability.c:116:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: security/capability.c:116:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: security/capability.c:118:
+        cap_secondary_ops = cap_original_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: security/capability.c:118:
+        cap_secondary_ops = cap_original_ops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: security/capability.c:120:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: security/capability.c:120:
+        return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: security/capability.c:123:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: security/capability.c:149:
+^I.bprm_alloc_security  ^I= cap_stack_bprm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: security/capability.c:150:
+^I.bprm_free_security  ^I= cap_stack_bprm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: security/capability.c:152:
+^I.inode_free_security ^I= cap_stack_inode_free_security,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: security/capability.c:153:
+    ^I.inode_getsecurity ^I= cap_stack_inode_getsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: security/capability.c:153:
+    ^I.inode_getsecurity ^I= cap_stack_inode_getsecurity,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: security/capability.c:153:
+    ^I.inode_getsecurity ^I= cap_stack_inode_getsecurity,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: security/capability.c:154:
+   ^I.inode_listsecurity ^I= cap_stack_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: security/capability.c:154:
+   ^I.inode_listsecurity ^I= cap_stack_inode_listsecurity,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: security/capability.c:154:
+   ^I.inode_listsecurity ^I= cap_stack_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: security/capability.c:155:
+^I.file_receive ^I^I= cap_stack_file_receive,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: security/capability.c:156:
+^I.task_alloc_security ^I= cap_stack_task_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: security/capability.c:157:
+^I.task_free_security ^I= cap_stack_task_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: security/capability.c:158:
+^I.socket_post_create ^I= cap_stack_socket_post_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: security/capability.c:159:
+^I.socket_accept ^I^I= cap_stack_socket_accept,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: security/capability.c:160:
+^I.register_security ^I= cap_stack_register_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: security/capability.c:161:
+^I.unregister_security ^I= cap_stack_unregister_security,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: security/capability.c:173:
+        cap_original_ops = cap_secondary_ops = security_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: security/capability.c:173:
+        cap_original_ops = cap_secondary_ops = security_ops;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#191: FILE: security/capability.c:173:
+        cap_original_ops = cap_secondary_ops = security_ops;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: security/commoncap.c:28:
 
+

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#210: FILE: security/commoncap.c:29:
+struct security_operations *cap_secondary_ops = NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: security/commoncap.c:141:
+       if(cap_secondary_ops)$

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: security/commoncap.c:141:
+       if(cap_secondary_ops)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: security/commoncap.c:143:
+       else return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#222: FILE: security/commoncap.c:143:
+       else return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: security/commoncap.c:187:
+        if(cap_secondary_ops)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: security/commoncap.c:187:
+        if(cap_secondary_ops)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#230: FILE: security/commoncap.c:187:
+        if(cap_secondary_ops)
+          cap_secondary_ops->bprm_apply_creds(bprm,unsafe);

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: security/commoncap.c:187:
+        if(cap_secondary_ops)

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: security/commoncap.c:188:
+          cap_secondary_ops->bprm_apply_creds(bprm,unsafe);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: security/commoncap.c:188:
+          cap_secondary_ops->bprm_apply_creds(bprm,unsafe);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#231: FILE: security/commoncap.c:188:
+          cap_secondary_ops->bprm_apply_creds(bprm,unsafe);
                                                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086990.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 54 warnings, 7 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086990.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
