WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#115: FILE: fs/namespace.c:625:
+static int do_change_type(struct nameidata *nd, int flag)
                                             ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INDENTED_LABEL: labels should not be indented
#150: FILE: fs/namespace.c:660:
+      out:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: fs/namespace.c:1105:
+		retval = do_change_type(&nd, flags);
 		                         ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#180: FILE: fs/pnode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#181: FILE: fs/pnode.c:2:
+ *  linux/fs/pnode.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#203: FILE: fs/pnode.c:24:
+#include <asm/uaccess.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: fs/pnode.c:64:
+			BUG_ON(peer_mnt->mnt_master);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#244: FILE: fs/pnode.c:65:
+			BUG_ON(!list_empty(&peer_mnt->mnt_slave));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#250: FILE: fs/pnode.c:71:
+	list_for_each_entry_safe(slave_mnt, t_slave_mnt,
[...]
+	    make_slave_of(slave_mnt, master);

WARNING:INDENTED_LABEL: labels should not be indented
#276: FILE: fs/pnode.c:97:
+      out:

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#306: FILE: include/linux/fs.h:105:
+#define MS_PRIVATE	(1<<18)	/* recursively change to private */
                   	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#306: FILE: include/linux/fs.h:105:
+#define MS_PRIVATE	(1<<18)	/* recursively change to private */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#307: FILE: include/linux/fs.h:106:
+#define MS_SLAVE	(1<<19)	/* recursively change to slave */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#307: FILE: include/linux/fs.h:106:
+#define MS_SLAVE	(1<<19)	/* recursively change to slave */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#308: FILE: include/linux/fs.h:107:
+#define MS_SHARED	(1<<20)	/* recursively change to shared */
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#308: FILE: include/linux/fs.h:107:
+#define MS_SHARED	(1<<20)	/* recursively change to shared */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#319: FILE: include/linux/pnode.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#332: FILE: include/linux/pnode.h:14:
+#include <asm/atomic.h>

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#362: FILE: include/linux/pnode.h:44:
+int do_make_slave(struct vfsmount *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#363: FILE: include/linux/pnode.h:45:
+int do_make_shared(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#364: FILE: include/linux/pnode.h:46:
+int do_make_private(struct vfsmount *);

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#383: FILE: include/linux/mount.h:24:
+#define MNT_PNODE_MASK	0x30	/* propogation flag mask */
                       	    	   ^^^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#385: FILE: include/linux/mount.h:26:
+#define IS_MNT_SHARED(mnt) (mnt->mnt_flags & MNT_SHARED)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#386: FILE: include/linux/mount.h:27:
+#define IS_MNT_SLAVE(mnt) (!list_empty(&mnt->mnt_slave))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mnt' - possible side-effects?
#387: FILE: include/linux/mount.h:28:
+#define IS_MNT_PRIVATE(mnt) (!IS_MNT_SLAVE(mnt) && \
+			!(mnt->mnt_flags & MNT_PNODE_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#389: FILE: include/linux/mount.h:30:
+#define IS_MNT_UNCLONABLE(mnt) (mnt->mnt_flags & MNT_UNCLONABLE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#390: FILE: include/linux/mount.h:31:
+#define GET_MNT_TYPE(mnt) (mnt->mnt_flags & MNT_PNODE_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mnt' - possible side-effects?
#391: FILE: include/linux/mount.h:32:
+#define SET_MNT_TYPE(mnt, type) (mnt->mnt_flags &= ~MNT_PNODE_MASK, \
+			mnt->mnt_flags |= (type & MNT_PNODE_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#391: FILE: include/linux/mount.h:32:
+#define SET_MNT_TYPE(mnt, type) (mnt->mnt_flags &= ~MNT_PNODE_MASK, \
+			mnt->mnt_flags |= (type & MNT_PNODE_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#393: FILE: include/linux/mount.h:34:
+#define CLEAR_MNT_SHARED(mnt) (mnt->mnt_flags &= ~(MNT_PNODE_MASK & MNT_SHARED))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 16 warnings, 14 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
