WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This patch adds a "usemap" to the allocator. Each bit in the usemap indicates

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#45: FILE: include/linux/mmzone.h:24:
+#define PAGES_PER_MAXORDER (1 << (MAX_ORDER-1))
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: include/linux/mmzone.h:606:
+static inline unsigned long *pfn_to_usemap(struct zone *zone,
+						unsigned long pfn)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#101: FILE: include/linux/mmzone.h:613:
+	pfn &= (PAGES_PER_SECTION-1);
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#102: FILE: include/linux/mmzone.h:614:
+	return (pfn >> (MAX_ORDER-1));
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: include/linux/mmzone.h:655:
+static inline unsigned long *pfn_to_usemap(struct zone *zone,
+						unsigned long pfn)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#121: FILE: include/linux/mmzone.h:663:
+	return (pfn >> (MAX_ORDER-1));
 	                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: mm/page_alloc.c:74:
+	unsigned long pfn = page_to_pfn(page);
+	return !!test_bit(pfn_to_bitidx(zone, pfn),

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: mm/page_alloc.c:81:
+	unsigned long pfn = page_to_pfn(page);
+	__change_bit(pfn_to_bitidx(zone, pfn), pfn_to_usemap(zone, pfn));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#154: FILE: mm/page_alloc.c:1864:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#154: FILE: mm/page_alloc.c:1864:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#154: FILE: mm/page_alloc.c:1864:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#154: FILE: mm/page_alloc.c:1864:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#154: FILE: mm/page_alloc.c:1864:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#166: FILE: mm/page_alloc.c:1876:
+	usemapsize = usemapsize >> (MAX_ORDER-1);
 	                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: mm/page_alloc.c:1886:
+	unsigned long usemapsize = usemap_size(zonesize);
+	zone->free_area_usemap = alloc_bootmem_node(pgdat, usemapsize);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#178: FILE: mm/page_alloc.c:1888:
+	memset(zone->free_area_usemap, RCLM_NORCLM, usemapsize/2);
 	                                                      ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#181: FILE: mm/page_alloc.c:1891:
+static void inline setup_usemap(struct pglist_data *pgdat,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#181: FILE: mm/page_alloc.c:1891:
+static void inline setup_usemap(struct pglist_data *pgdat,
+				struct zone *zone, unsigned long zonesize) {}

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 13 checks, 143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
