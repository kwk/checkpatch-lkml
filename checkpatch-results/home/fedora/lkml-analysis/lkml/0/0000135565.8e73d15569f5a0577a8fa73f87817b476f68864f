ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: fs/relayfs/inode.c:38:
+ ^I^I^I^I       struct file_operations *fops,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#57: FILE: fs/relayfs/inode.c:38:
+ ^I^I^I^I       struct file_operations *fops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: fs/relayfs/inode.c:38:
+ ^I^I^I^I       struct file_operations *fops,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#57: FILE: fs/relayfs/inode.c:38:
+ 				       struct file_operations *fops,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#84: FILE: fs/relayfs/inode.c:88:
+					   struct file_operations *fops,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#113: FILE: fs/relayfs/inode.c:162:
+				   struct file_operations *fops,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#116: FILE: fs/relayfs/inode.c:165:
+	BUG_ON(!fops);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#215: FILE: fs/relayfs/relay.c:179:
+	dentry = relayfs_create_file(filename, parent, S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/relayfs_fs.h:150:
+extern struct dentry *relayfs_create_file(const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#253: FILE: include/linux/relayfs_fs.h:153:
+					  struct file_operations *fops,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 8 warnings, 1 checks, 180 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
