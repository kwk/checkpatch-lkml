WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
It tries to identify and protect live pages (sequential pages that are going

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#150: FILE: mm/readahead.c:1840:
+ * This function provides safty guarantee for file servers with big
                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'pratical' may be misspelled - perhaps 'practical'?
#170: FILE: mm/readahead.c:1860:
+ * In pratical, the group of pages are fragmented into chunks. To tell whether
       ^^^^^^^^

WARNING:TYPO_SPELLING: 'Sepcial' may be misspelled - perhaps 'Special'?
#174: FILE: mm/readahead.c:1864:
+ * 3) Sepcial case: live head just sits on the boundary of current chunk?
       ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: mm/readahead.c:1893:
+static int save_chunk(struct page *head, struct page *live_head,
+			struct page *tail, struct list_head *save_list)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#215: FILE: mm/readahead.c:1905:
+	static char *zone_names[] = {"DMA", "DMA32", "Normal", "HighMem"};

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: mm/readahead.c:1909:
+^Ido { ^I^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: mm/readahead.c:1911:
+^I^I^Ipat[pidx++] = symbol; ^I^I^I^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: mm/readahead.c:1928:
+	BUG_ON(!mapping); /* QUESTION: in what case mapping will be NULL ? */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: mm/readahead.c:1936:
+	index = radix_tree_lookup_head(&mapping->page_tree,
+					head_index, readahead_live_chunk);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: mm/readahead.c:1941:
+	BUG_ON(!page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/readahead.c:1946:
+	if (head_index - index < readahead_live_chunk &&
+			refcnt > page_refcnt(head)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: mm/readahead.c:1961:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+									index);

CHECK:BRACES: braces {} should be used on all arms of this statement
#281: FILE: mm/readahead.c:1971:
+		if (refcnt == page_refcnt(page))
[...]
+		else if (refcnt < page_refcnt(page))
[...]
+		else if (i < 1)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: mm/readahead.c:1977:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: mm/readahead.c:1993:
+		BUG_ON(PageAnon(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: mm/readahead.c:1994:
+		BUG_ON(PageSwapCache(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: mm/readahead.c:2019:
+		struct page *last_page = prev_page(tail);
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: mm/readahead.c:2020:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+						last_page->index + 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#336: FILE: mm/readahead.c:2026:
+				page = radix_tree_cache_lookup(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_chunk', this function's name, in a string
#375: FILE: mm/readahead.c:2065:
+		ddprintk("save_chunk(ino=%lu, idx=%lu-%lu, %s@%s:%s)"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#376: FILE: mm/readahead.c:2066:
+		ddprintk("save_chunk(ino=%lu, idx=%lu-%lu, %s@%s:%s)"
+				" = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: mm/readahead.c:2142:
+	if (mapping && !PageAnon(chunk_head) &&
+			!PageSwapCache(chunk_head) &&

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 14 warnings, 9 checks, 392 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
