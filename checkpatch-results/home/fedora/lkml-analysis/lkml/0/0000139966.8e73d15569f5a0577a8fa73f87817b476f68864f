WARNING:TYPO_SPELLING: 'imlements' may be misspelled - perhaps 'implements'?
#27: 
Patch imlements full LDT handling in SKAS:
      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: arch/um/kernel/skas/mmu.c:81:
+ ^Istruct mmu_context_skas *from_mm = NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#108: FILE: arch/um/kernel/skas/mmu.c:81:
+ ^Istruct mmu_context_skas *from_mm = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/um/kernel/skas/mmu.c:81:
+ ^Istruct mmu_context_skas *from_mm = NULL;$

ERROR:SPACING: space required before the open brace '{'
#115: FILE: arch/um/kernel/skas/mmu.c:86:
+	if(skas_needs_stub){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: arch/um/kernel/skas/mmu.c:86:
+	if(skas_needs_stub){

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: arch/um/kernel/skas/mmu.c:110:
+	if(current->mm != NULL && current->mm != &init_mm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->mm"
#126: FILE: arch/um/kernel/skas/mmu.c:110:
+	if(current->mm != NULL && current->mm != &init_mm)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: arch/um/kernel/skas/mmu.c:114:
+		if(from_mm)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#135: FILE: arch/um/kernel/skas/mmu.c:116:
+		else from_fd = -1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: arch/um/kernel/skas/mmu.c:127:
+		if(from_mm)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: arch/um/kernel/skas/mmu.c:130:
+		else to_mm->id.u.pid = start_userspace(stack);

ERROR:SPACING: space required before the open brace '{'
#159: FILE: arch/um/kernel/skas/mmu.c:134:
+	if(ret < 0){

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: arch/um/kernel/skas/mmu.c:134:
+	if(ret < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: arch/um/kernel/skas/mmu.c:135:
+		printk("init_new_context_skas - init_ldt"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_new_context_skas', this function's name, in a string
#160: FILE: arch/um/kernel/skas/mmu.c:135:
+		printk("init_new_context_skas - init_ldt"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#161: FILE: arch/um/kernel/skas/mmu.c:136:
+		printk("init_new_context_skas - init_ldt"
+		       " failed, errno = %d\n", ret);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open parenthesis '('
#170: FILE: arch/um/kernel/skas/mmu.c:143:
+	if(to_mm->id.stack != 0)

WARNING:TYPO_SPELLING: 'availabl' may be misspelled - perhaps 'available'?
#187: FILE: arch/um/kernel/skas/process.c:385:
+ * availabl. Opening /proc/mm creates a new mm_context, which lacks
    ^^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: arch/um/kernel/skas/process_kern.c:148:
+	if(skas_needs_stub)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#215: FILE: arch/um/os-Linux/start_up.c:140:
+int skas_needs_stub = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#223: FILE: arch/um/os-Linux/start_up.c:357:
+static int __init noptraceldt_cmd_param(char *str, int* add)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: arch/um/os-Linux/start_up.c:364:
+__uml_setup("noptraceldt", noptraceldt_cmd_param,
+"noptraceldt\n"

CHECK:SPACING: No space is necessary after a cast
#267: FILE: arch/um/os-Linux/start_up.c:412:
+	n = ptrace(PTRACE_LDT, pid, 0, (unsigned long) &ldt_op);

ERROR:SPACING: space required before the open parenthesis '('
#269: FILE: arch/um/os-Linux/start_up.c:414:
+		if(errno == EIO)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#269: FILE: arch/um/os-Linux/start_up.c:414:
+		if(errno == EIO)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#271: FILE: arch/um/os-Linux/start_up.c:416:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#276: FILE: arch/um/os-Linux/start_up.c:421:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: arch/um/os-Linux/start_up.c:421:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: arch/um/os-Linux/start_up.c:422:
+		if(ptrace_ldt)

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: arch/um/os-Linux/start_up.c:461:
+	if(!proc_mm || !ptrace_faultinfo || !ptrace_ldt)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: arch/um/scripts/Makefile.rules:30:
+# so, it's considered to be a path relative to $(srcdir) rather than $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: arch/um/sys-i386/ldt.c:24:
+static long do_modify_ldt_tt(int func, void __user *ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: arch/um/sys-i386/ldt.c:25:
+static long do_modify_ldt_tt(int func, void __user *ptr, 
+			      unsigned long bytecount)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#427: FILE: arch/um/sys-i386/ldt.c:92:
+long write_ldt_entry(struct mm_id * mm_idp, int func, struct user_desc * desc,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#427: FILE: arch/um/sys-i386/ldt.c:92:
+long write_ldt_entry(struct mm_id * mm_idp, int func, struct user_desc * desc,

ERROR:SPACING: space required before the open brace '{'
#432: FILE: arch/um/sys-i386/ldt.c:97:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: arch/um/sys-i386/ldt.c:97:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: arch/um/sys-i386/ldt.c:110:
+		if(!current->active_mm || current->active_mm == &init_mm ||

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: arch/um/sys-i386/ldt.c:115:
+	if(ptrace_ldt) {

ERROR:SPACING: space required before the open parenthesis '('
#458: FILE: arch/um/sys-i386/ldt.c:123:
+		if(!proc_mm)

CHECK:BRACES: braces {} should be used on all arms of this statement
#458: FILE: arch/um/sys-i386/ldt.c:123:
+		if(!proc_mm)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#460: FILE: arch/um/sys-i386/ldt.c:125:
+		else {

CHECK:SPACING: No space is necessary after a cast
#465: FILE: arch/um/sys-i386/ldt.c:130:
+		res = ptrace(PTRACE_LDT, pid, 0, (unsigned long) &ldt_op);

ERROR:SPACING: space required before the open parenthesis '('
#466: FILE: arch/um/sys-i386/ldt.c:131:
+		if(res)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: arch/um/sys-i386/ldt.c:134:
+^I^Iif(proc_mm) $

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: arch/um/sys-i386/ldt.c:134:
+		if(proc_mm) 

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#472: FILE: arch/um/sys-i386/ldt.c:137:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#472: FILE: arch/um/sys-i386/ldt.c:137:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: arch/um/sys-i386/ldt.c:139:
+		void *stub_addr;
+		res = syscall_stub_data(mm_idp, (unsigned long *)desc,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#478: FILE: arch/um/sys-i386/ldt.c:143:
+		if(!res){

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: arch/um/sys-i386/ldt.c:143:
+		if(!res){

ERROR:SPACING: space required before the open brace '{'
#488: FILE: arch/um/sys-i386/ldt.c:153:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#488: FILE: arch/um/sys-i386/ldt.c:153:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#492: FILE: arch/um/sys-i386/ldt.c:157:
+		if(current->active_mm && current->active_mm != &init_mm &&

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#500: FILE: arch/um/sys-i386/ldt.c:165:
+static long read_ldt_from_host(void __user * ptr, unsigned long bytecount)

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#506: FILE: arch/um/sys-i386/ldt.c:171:
+			.ptr = (void *)kmalloc(bytecount, GFP_KERNEL)};

ERROR:SPACING: space required before the open parenthesis '('
#509: FILE: arch/um/sys-i386/ldt.c:174:
+	if(ptrace_ldt.ptr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptrace_ldt.ptr"
#509: FILE: arch/um/sys-i386/ldt.c:174:
+	if(ptrace_ldt.ptr == NULL)

CHECK:SPACING: No space is necessary after a cast
#518: FILE: arch/um/sys-i386/ldt.c:183:
+		     (unsigned long) &ptrace_ldt);

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: arch/um/sys-i386/ldt.c:185:
+	if(res < 0)

ERROR:SPACING: space required before the open parenthesis '('
#524: FILE: arch/um/sys-i386/ldt.c:189:
+	if(n != 0)

WARNING:INDENTED_LABEL: labels should not be indented
#527: FILE: arch/um/sys-i386/ldt.c:192:
+  out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#545: FILE: arch/um/sys-i386/ldt.c:210:
+static int read_ldt(void __user * ptr, unsigned long bytecount)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#549: FILE: arch/um/sys-i386/ldt.c:214:
+	uml_ldt_t * ldt = &current->mm->context.skas.ldt;

ERROR:SPACING: space required before the open parenthesis '('
#551: FILE: arch/um/sys-i386/ldt.c:216:
+	if(!ldt->entry_count)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#553: FILE: arch/um/sys-i386/ldt.c:218:
+	if(bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#553: FILE: arch/um/sys-i386/ldt.c:218:
+	if(bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#554: FILE: arch/um/sys-i386/ldt.c:219:
+		bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;
 		                          ^

ERROR:SPACING: space required before the open brace '{'
#557: FILE: arch/um/sys-i386/ldt.c:222:
+	if(ptrace_ldt){

ERROR:SPACING: space required before the open parenthesis '('
#557: FILE: arch/um/sys-i386/ldt.c:222:
+	if(ptrace_ldt){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#557: FILE: arch/um/sys-i386/ldt.c:222:
+	if(ptrace_ldt){
+		return read_ldt_from_host(ptr, bytecount);
+	}

ERROR:SPACING: space required before the open brace '{'
#562: FILE: arch/um/sys-i386/ldt.c:227:
+	if(ldt->entry_count <= LDT_DIRECT_ENTRIES){

ERROR:SPACING: space required before the open parenthesis '('
#562: FILE: arch/um/sys-i386/ldt.c:227:
+	if(ldt->entry_count <= LDT_DIRECT_ENTRIES){

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#563: FILE: arch/um/sys-i386/ldt.c:228:
+		size = LDT_ENTRY_SIZE*LDT_DIRECT_ENTRIES;
 		                     ^

ERROR:SPACING: space required before the open parenthesis '('
#564: FILE: arch/um/sys-i386/ldt.c:229:
+		if(size > bytecount)

ERROR:SPACING: space required before the open parenthesis '('
#566: FILE: arch/um/sys-i386/ldt.c:231:
+		if(copy_to_user(ptr, ldt->entries, size))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#571: FILE: arch/um/sys-i386/ldt.c:236:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#571: FILE: arch/um/sys-i386/ldt.c:236:
+	else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#572: FILE: arch/um/sys-i386/ldt.c:237:
+		for(i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#572: FILE: arch/um/sys-i386/ldt.c:237:
+		for(i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;
 		          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#572: FILE: arch/um/sys-i386/ldt.c:237:
+		for(i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;
 		                           ^

ERROR:SPACING: space required before the open parenthesis '('
#572: FILE: arch/um/sys-i386/ldt.c:237:
+		for(i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;

ERROR:SPACING: space required before the open parenthesis '('
#575: FILE: arch/um/sys-i386/ldt.c:240:
+			if(size > bytecount)

ERROR:SPACING: space required before the open brace '{'
#577: FILE: arch/um/sys-i386/ldt.c:242:
+			if(copy_to_user(ptr, ldt->pages[i], size)){

ERROR:SPACING: space required before the open parenthesis '('
#577: FILE: arch/um/sys-i386/ldt.c:242:
+			if(copy_to_user(ptr, ldt->pages[i], size)){

ERROR:SPACING: space required before the open parenthesis '('
#587: FILE: arch/um/sys-i386/ldt.c:252:
+	if(bytecount == 0 || err == -EFAULT)

ERROR:SPACING: space required before the open parenthesis '('
#590: FILE: arch/um/sys-i386/ldt.c:255:
+	if(clear_user(ptr, bytecount))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#597: FILE: arch/um/sys-i386/ldt.c:262:
+static int read_default_ldt(void __user * ptr, unsigned long bytecount)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#601: FILE: arch/um/sys-i386/ldt.c:266:
+	if(bytecount > 5*LDT_ENTRY_SIZE)
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: arch/um/sys-i386/ldt.c:266:
+	if(bytecount > 5*LDT_ENTRY_SIZE)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#602: FILE: arch/um/sys-i386/ldt.c:267:
+		bytecount = 5*LDT_ENTRY_SIZE;
 		             ^

ERROR:SPACING: space required before the open parenthesis '('
#609: FILE: arch/um/sys-i386/ldt.c:274:
+	if(clear_user(ptr, bytecount))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#615: FILE: arch/um/sys-i386/ldt.c:280:
+static int write_ldt(void __user * ptr, unsigned long bytecount, int func)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#617: FILE: arch/um/sys-i386/ldt.c:282:
+	uml_ldt_t * ldt = &current->mm->context.skas.ldt;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#618: FILE: arch/um/sys-i386/ldt.c:283:
+	struct mm_id * mm_idp = &current->mm->context.skas.id;

ERROR:SPACING: space required before the open parenthesis '('
#625: FILE: arch/um/sys-i386/ldt.c:290:
+	if(bytecount != sizeof(ldt_info))

ERROR:SPACING: space required before the open parenthesis '('
#628: FILE: arch/um/sys-i386/ldt.c:293:
+	if(copy_from_user(&ldt_info, ptr, sizeof(ldt_info)))

ERROR:SPACING: space required before the open parenthesis '('
#632: FILE: arch/um/sys-i386/ldt.c:297:
+	if(ldt_info.entry_number >= LDT_ENTRIES)

ERROR:SPACING: space required before the open brace '{'
#634: FILE: arch/um/sys-i386/ldt.c:299:
+	if(ldt_info.contents == 3){

ERROR:SPACING: space required before the open parenthesis '('
#634: FILE: arch/um/sys-i386/ldt.c:299:
+	if(ldt_info.contents == 3){

ERROR:CODE_INDENT: code indent should use tabs where possible
#641: FILE: arch/um/sys-i386/ldt.c:306:
+        if(!ptrace_ldt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: arch/um/sys-i386/ldt.c:306:
+        if(!ptrace_ldt)$

ERROR:SPACING: space required before the open parenthesis '('
#641: FILE: arch/um/sys-i386/ldt.c:306:
+        if(!ptrace_ldt)

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: arch/um/sys-i386/ldt.c:307:
+                down(&ldt->semaphore);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: arch/um/sys-i386/ldt.c:307:
+                down(&ldt->semaphore);$

ERROR:SPACING: space required before the open parenthesis '('
#645: FILE: arch/um/sys-i386/ldt.c:310:
+	if(err)

CHECK:BRACES: braces {} should be used on all arms of this statement
#645: FILE: arch/um/sys-i386/ldt.c:310:
+	if(err)
[...]
+        else if(ptrace_ldt) {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: arch/um/sys-i386/ldt.c:312:
+        else if(ptrace_ldt) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/um/sys-i386/ldt.c:312:
+        else if(ptrace_ldt) {$

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: arch/um/sys-i386/ldt.c:312:
+        else if(ptrace_ldt) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#649: FILE: arch/um/sys-i386/ldt.c:314:
+                ldt->entry_count = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: arch/um/sys-i386/ldt.c:314:
+                ldt->entry_count = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#650: FILE: arch/um/sys-i386/ldt.c:315:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/um/sys-i386/ldt.c:315:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: arch/um/sys-i386/ldt.c:316:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/um/sys-i386/ldt.c:316:
+        }$

ERROR:SPACING: space required before the open parenthesis '('
#653: FILE: arch/um/sys-i386/ldt.c:318:
+	if(ldt_info.entry_number >= ldt->entry_count &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#655: FILE: arch/um/sys-i386/ldt.c:320:
+		for(i=ldt->entry_count/LDT_ENTRIES_PER_PAGE;
 		     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#655: FILE: arch/um/sys-i386/ldt.c:320:
+		for(i=ldt->entry_count/LDT_ENTRIES_PER_PAGE;
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: arch/um/sys-i386/ldt.c:320:
+		for(i=ldt->entry_count/LDT_ENTRIES_PER_PAGE;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#656: FILE: arch/um/sys-i386/ldt.c:321:
+		    i*LDT_ENTRIES_PER_PAGE <= ldt_info.entry_number;
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#658: FILE: arch/um/sys-i386/ldt.c:323:
+			if(i == 0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#661: FILE: arch/um/sys-i386/ldt.c:326:
+					__get_free_page(GFP_KERNEL|__GFP_ZERO);
 					                          ^

ERROR:SPACING: space required before the open brace '{'
#662: FILE: arch/um/sys-i386/ldt.c:327:
+			if(!ldt->pages[i]){

ERROR:SPACING: space required before the open parenthesis '('
#662: FILE: arch/um/sys-i386/ldt.c:327:
+			if(!ldt->pages[i]){

ERROR:SPACING: space required before the open parenthesis '('
#669: FILE: arch/um/sys-i386/ldt.c:334:
+			if(i == 0) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#671: FILE: arch/um/sys-i386/ldt.c:336:
+				memcpy(ldt->pages[0]+1, ldt->entries+1,
 				                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#671: FILE: arch/um/sys-i386/ldt.c:336:
+				memcpy(ldt->pages[0]+1, ldt->entries+1,
 				                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#672: FILE: arch/um/sys-i386/ldt.c:337:
+				       sizeof(entry0)*(LDT_DIRECT_ENTRIES-1));
 				                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#672: FILE: arch/um/sys-i386/ldt.c:337:
+				       sizeof(entry0)*(LDT_DIRECT_ENTRIES-1));
 				                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#677: FILE: arch/um/sys-i386/ldt.c:342:
+	if(ldt->entry_count <= ldt_info.entry_number)

ERROR:SPACING: space required before the open parenthesis '('
#680: FILE: arch/um/sys-i386/ldt.c:345:
+	if(ldt->entry_count <= LDT_DIRECT_ENTRIES)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#683: FILE: arch/um/sys-i386/ldt.c:348:
+		ldt_p = ldt->pages[ldt_info.entry_number/LDT_ENTRIES_PER_PAGE] +
 		                                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#684: FILE: arch/um/sys-i386/ldt.c:349:
+			ldt_info.entry_number%LDT_ENTRIES_PER_PAGE;
 			                     ^

ERROR:SPACING: space required before the open parenthesis '('
#686: FILE: arch/um/sys-i386/ldt.c:351:
+	if(ldt_info.base_addr == 0 && ldt_info.limit == 0 &&

ERROR:SPACING: space required before the open brace '{'
#687: FILE: arch/um/sys-i386/ldt.c:352:
+	   (func == 1 || LDT_empty(&ldt_info))){

ERROR:SPACING: space required before the open brace '{'
#691: FILE: arch/um/sys-i386/ldt.c:356:
+	else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#691: FILE: arch/um/sys-i386/ldt.c:356:
+	}
+	else{

CHECK:BRACES: Unbalanced braces around else statement
#691: FILE: arch/um/sys-i386/ldt.c:356:
+	else{

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#693: FILE: arch/um/sys-i386/ldt.c:358:
+			ldt_info.useable = 0;
 			         ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: arch/um/sys-i386/ldt.c:370:
+static long do_modify_ldt_skas(int func, void __user *ptr, $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#708: FILE: arch/um/sys-i386/ldt.c:373:
+	int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#710: FILE: arch/um/sys-i386/ldt.c:375:
+	switch (func) {
+		case 0:
[...]
+		case 1:
+		case 0x11:
[...]
+		case 2:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#726: FILE: arch/um/sys-i386/ldt.c:391:
+short * host_ldt_entries = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: arch/um/sys-i386/ldt.c:391:
+short * host_ldt_entries = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#731: FILE: arch/um/sys-i386/ldt.c:396:
+	struct ldt_entry * ldt;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#734: FILE: arch/um/sys-i386/ldt.c:399:
+	host_ldt_entries = dummy_list+1;
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#736: FILE: arch/um/sys-i386/ldt.c:401:
+	for(i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++);
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#736: FILE: arch/um/sys-i386/ldt.c:401:
+	for(i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++);
 	                              ^

ERROR:SPACING: spaces required around that '>>=' (ctx:VxV)
#736: FILE: arch/um/sys-i386/ldt.c:401:
+	for(i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++);
 	                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#736: FILE: arch/um/sys-i386/ldt.c:401:
+	for(i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#736: FILE: arch/um/sys-i386/ldt.c:401:
+	for(i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#739: FILE: arch/um/sys-i386/ldt.c:404:
+	      __get_free_pages(GFP_KERNEL|__GFP_ZERO, order);
 	                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#740: FILE: arch/um/sys-i386/ldt.c:405:
+	if(ldt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ldt"
#740: FILE: arch/um/sys-i386/ldt.c:405:
+	if(ldt == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#741: FILE: arch/um/sys-i386/ldt.c:406:
+		printk("ldt_get_host_info: couldn't allocate buffer for host ldt\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ldt_get_host_info', this function's name, in a string
#741: FILE: arch/um/sys-i386/ldt.c:406:
+		printk("ldt_get_host_info: couldn't allocate buffer for host ldt\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#745: FILE: arch/um/sys-i386/ldt.c:410:
+	ret = modify_ldt(0, ldt, (1<<order)*PAGE_SIZE);
 	                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#745: FILE: arch/um/sys-i386/ldt.c:410:
+	ret = modify_ldt(0, ldt, (1<<order)*PAGE_SIZE);
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#746: FILE: arch/um/sys-i386/ldt.c:411:
+	if(ret < 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#747: FILE: arch/um/sys-i386/ldt.c:412:
+		printk("ldt_get_host_info: couldn't read host ldt\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ldt_get_host_info', this function's name, in a string
#747: FILE: arch/um/sys-i386/ldt.c:412:
+		printk("ldt_get_host_info: couldn't read host ldt\n");

ERROR:SPACING: space required before the open parenthesis '('
#750: FILE: arch/um/sys-i386/ldt.c:415:
+	if(ret == 0) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#756: FILE: arch/um/sys-i386/ldt.c:421:
+	for(i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++){
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#756: FILE: arch/um/sys-i386/ldt.c:421:
+	for(i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++){
 	             ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#756: FILE: arch/um/sys-i386/ldt.c:421:
+	for(i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++){
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#756: FILE: arch/um/sys-i386/ldt.c:421:
+	for(i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++){
 	                      ^

ERROR:SPACING: space required before the open brace '{'
#756: FILE: arch/um/sys-i386/ldt.c:421:
+	for(i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++){

ERROR:SPACING: space required before the open parenthesis '('
#756: FILE: arch/um/sys-i386/ldt.c:421:
+	for(i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++){

ERROR:SPACING: space required before the open parenthesis '('
#757: FILE: arch/um/sys-i386/ldt.c:422:
+		if(ldt[i].a != 0 || ldt[i].b != 0)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(dummy_list)
#761: FILE: arch/um/sys-i386/ldt.c:426:
+	if(size < sizeof(dummy_list)/sizeof(dummy_list[0])) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#761: FILE: arch/um/sys-i386/ldt.c:426:
+	if(size < sizeof(dummy_list)/sizeof(dummy_list[0])) {
 	                            ^

ERROR:SPACING: space required before the open parenthesis '('
#761: FILE: arch/um/sys-i386/ldt.c:426:
+	if(size < sizeof(dummy_list)/sizeof(dummy_list[0])) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#764: FILE: arch/um/sys-i386/ldt.c:429:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#764: FILE: arch/um/sys-i386/ldt.c:429:
+	else {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#766: FILE: arch/um/sys-i386/ldt.c:431:
+		host_ldt_entries = (short *)kmalloc(size, GFP_KERNEL);

ERROR:SPACING: space required before the open parenthesis '('
#767: FILE: arch/um/sys-i386/ldt.c:432:
+		if(host_ldt_entries == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_ldt_entries"
#767: FILE: arch/um/sys-i386/ldt.c:432:
+		if(host_ldt_entries == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#768: FILE: arch/um/sys-i386/ldt.c:433:
+			printk("ldt_get_host_info: couldn't allocate host ldt list\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ldt_get_host_info', this function's name, in a string
#768: FILE: arch/um/sys-i386/ldt.c:433:
+			printk("ldt_get_host_info: couldn't allocate host ldt list\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#773: FILE: arch/um/sys-i386/ldt.c:438:
+	for(i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++){
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#773: FILE: arch/um/sys-i386/ldt.c:438:
+	for(i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++){
 	          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#773: FILE: arch/um/sys-i386/ldt.c:438:
+	for(i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++){
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#773: FILE: arch/um/sys-i386/ldt.c:438:
+	for(i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++){
 	                   ^

ERROR:SPACING: space required before the open brace '{'
#773: FILE: arch/um/sys-i386/ldt.c:438:
+	for(i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++){

ERROR:SPACING: space required before the open parenthesis '('
#773: FILE: arch/um/sys-i386/ldt.c:438:
+	for(i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++){

ERROR:SPACING: space required before the open parenthesis '('
#774: FILE: arch/um/sys-i386/ldt.c:439:
+		if(ldt[i].a != 0 || ldt[i].b != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#774: FILE: arch/um/sys-i386/ldt.c:439:
+		if(ldt[i].a != 0 || ldt[i].b != 0) {
+			host_ldt_entries[k++] = i;
+		}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#784: FILE: arch/um/sys-i386/ldt.c:449:
+long init_new_ldt(struct mmu_context_skas * new_mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#785: FILE: arch/um/sys-i386/ldt.c:450:
+		  struct mmu_context_skas * from_mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#788: FILE: arch/um/sys-i386/ldt.c:453:
+	short * num_p;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#790: FILE: arch/um/sys-i386/ldt.c:455:
+	long page, err=0;
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#795: FILE: arch/um/sys-i386/ldt.c:460:
+	if(!ptrace_ldt)

ERROR:SPACING: space required before the open brace '{'
#798: FILE: arch/um/sys-i386/ldt.c:463:
+	if(!from_mm){

ERROR:SPACING: space required before the open parenthesis '('
#798: FILE: arch/um/sys-i386/ldt.c:463:
+	if(!from_mm){

ERROR:SPACING: space required before the open parenthesis '('
#802: FILE: arch/um/sys-i386/ldt.c:467:
+		if(proc_mm) {

ERROR:SPACING: space required before the open brace '{'
#813: FILE: arch/um/sys-i386/ldt.c:478:
+		else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#813: FILE: arch/um/sys-i386/ldt.c:478:
+		}
+		else{

CHECK:BRACES: Unbalanced braces around else statement
#813: FILE: arch/um/sys-i386/ldt.c:478:
+		else{

ERROR:SPACING: space required before the open parenthesis '('
#819: FILE: arch/um/sys-i386/ldt.c:484:
+			if(host_ldt_entries == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_ldt_entries"
#819: FILE: arch/um/sys-i386/ldt.c:484:
+			if(host_ldt_entries == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#821: FILE: arch/um/sys-i386/ldt.c:486:
+			for(num_p=host_ldt_entries; *num_p != -1; num_p++){
 			         ^

ERROR:SPACING: space required before the open brace '{'
#821: FILE: arch/um/sys-i386/ldt.c:486:
+			for(num_p=host_ldt_entries; *num_p != -1; num_p++){

ERROR:SPACING: space required before the open parenthesis '('
#821: FILE: arch/um/sys-i386/ldt.c:486:
+			for(num_p=host_ldt_entries; *num_p != -1; num_p++){

ERROR:SPACING: space required before the open parenthesis '('
#825: FILE: arch/um/sys-i386/ldt.c:490:
+				if(err)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#831: FILE: arch/um/sys-i386/ldt.c:496:
+	}
+	else if (!ptrace_ldt) {

ERROR:SPACING: space required before the open brace '{'
#838: FILE: arch/um/sys-i386/ldt.c:503:
+		if(from_mm->ldt.entry_count <= LDT_DIRECT_ENTRIES){

ERROR:SPACING: space required before the open parenthesis '('
#838: FILE: arch/um/sys-i386/ldt.c:503:
+		if(from_mm->ldt.entry_count <= LDT_DIRECT_ENTRIES){

ERROR:SPACING: space required before the open brace '{'
#842: FILE: arch/um/sys-i386/ldt.c:507:
+		else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#842: FILE: arch/um/sys-i386/ldt.c:507:
+		}
+		else{

CHECK:BRACES: Unbalanced braces around else statement
#842: FILE: arch/um/sys-i386/ldt.c:507:
+		else{

ERROR:SPACING: spaces required around that '>' (ctx:OxV)
#844: FILE: arch/um/sys-i386/ldt.c:509:
+			while(i-->0){
 			         ^

ERROR:SPACING: space required before the open brace '{'
#844: FILE: arch/um/sys-i386/ldt.c:509:
+			while(i-->0){

ERROR:SPACING: space required before the open parenthesis '('
#844: FILE: arch/um/sys-i386/ldt.c:509:
+			while(i-->0){

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#845: FILE: arch/um/sys-i386/ldt.c:510:
+				page = __get_free_page(GFP_KERNEL|__GFP_ZERO);
 				                                 ^

ERROR:SPACING: space required before the open brace '{'
#846: FILE: arch/um/sys-i386/ldt.c:511:
+				if (!page){

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#850: FILE: arch/um/sys-i386/ldt.c:515:
+				new_mm->ldt.pages[i] = (struct ldt_entry*)page;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#862: FILE: arch/um/sys-i386/ldt.c:527:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#863: FILE: arch/um/sys-i386/ldt.c:528:
+void free_ldt(struct mmu_context_skas * mm)

ERROR:SPACING: space required before the open brace '{'
#867: FILE: arch/um/sys-i386/ldt.c:532:
+	if(!ptrace_ldt && mm->ldt.entry_count > LDT_DIRECT_ENTRIES){

ERROR:SPACING: space required before the open parenthesis '('
#867: FILE: arch/um/sys-i386/ldt.c:532:
+	if(!ptrace_ldt && mm->ldt.entry_count > LDT_DIRECT_ENTRIES){

ERROR:SPACING: space required before the open brace '{'
#869: FILE: arch/um/sys-i386/ldt.c:534:
+		while(i-- > 0){

ERROR:SPACING: space required before the open parenthesis '('
#869: FILE: arch/um/sys-i386/ldt.c:534:
+		while(i-- > 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#869: FILE: arch/um/sys-i386/ldt.c:534:
+		while(i-- > 0){
+			free_page((long )mm->ldt.pages[i]);
+		}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#870: FILE: arch/um/sys-i386/ldt.c:535:
+			free_page((long )mm->ldt.pages[i]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: arch/um/sys-i386/ldt.c:545:
+^I                        ptr, bytecount));$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1003: FILE: include/asm-um/ldt-i386.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1017: FILE: include/asm-um/ldt-i386.h:15:
+extern void ldt_host_info(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1018: FILE: include/asm-um/ldt-i386.h:16:
+extern long init_new_ldt(struct mmu_context_skas * to_mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1018: FILE: include/asm-um/ldt-i386.h:16:
+extern long init_new_ldt(struct mmu_context_skas * to_mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1019: FILE: include/asm-um/ldt-i386.h:17:
+			 struct mmu_context_skas * from_mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1020: FILE: include/asm-um/ldt-i386.h:18:
+extern void free_ldt(struct mmu_context_skas * mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1020: FILE: include/asm-um/ldt-i386.h:18:
+extern void free_ldt(struct mmu_context_skas * mm);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1023: FILE: include/asm-um/ldt-i386.h:21:
+	((LDT_ENTRIES * LDT_ENTRY_SIZE)/PAGE_SIZE)
 	                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1025: FILE: include/asm-um/ldt-i386.h:23:
+	(PAGE_SIZE/LDT_ENTRY_SIZE)
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1027: FILE: include/asm-um/ldt-i386.h:25:
+	((LDT_PAGES_MAX*sizeof(void *))/LDT_ENTRY_SIZE)
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1027: FILE: include/asm-um/ldt-i386.h:25:
+	((LDT_PAGES_MAX*sizeof(void *))/LDT_ENTRY_SIZE)
 	                               ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1034: FILE: include/asm-um/ldt-i386.h:32:
+typedef struct uml_ldt {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1038: FILE: include/asm-um/ldt-i386.h:36:
+		struct ldt_entry * pages[LDT_PAGES_MAX];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1046: FILE: include/asm-um/ldt-i386.h:44:
+#define LDT_entry_a(info) \
+	((((info)->base_addr & 0x0000ffff) << 16) | ((info)->limit & 0x0ffff))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1049: FILE: include/asm-um/ldt-i386.h:47:
+#define LDT_entry_b(info) \
+	(((info)->base_addr & 0xff000000) | \
+	(((info)->base_addr & 0x00ff0000) >> 16) | \
+	((info)->limit & 0xf0000) | \
+	(((info)->read_exec_only ^ 1) << 9) | \
+	((info)->contents << 10) | \
+	(((info)->seg_not_present ^ 1) << 15) | \
+	((info)->seg_32bit << 22) | \
+	((info)->limit_in_pages << 23) | \
+	((info)->useable << 20) | \
+	0x7000)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1058: FILE: include/asm-um/ldt-i386.h:56:
+	((info)->useable << 20) | \
 	         ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1061: FILE: include/asm-um/ldt-i386.h:59:
+#define LDT_empty(info) (\
+	(info)->base_addr	== 0	&& \
+	(info)->limit		== 0	&& \
+	(info)->contents	== 0	&& \
+	(info)->read_exec_only	== 1	&& \
+	(info)->seg_32bit	== 0	&& \
+	(info)->limit_in_pages	== 0	&& \
+	(info)->seg_not_present	== 1	&& \
+	(info)->useable		== 0	)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1069: FILE: include/asm-um/ldt-i386.h:67:
+	(info)->useable		== 0	)
 	        ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1069: FILE: include/asm-um/ldt-i386.h:67:
+	(info)->useable		== 0	)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1077: FILE: include/asm-um/ldt.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1091: FILE: include/asm-um/ldt.h:15:
+extern void ldt_host_info(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1092: FILE: include/asm-um/ldt.h:16:
+extern long init_new_ldt(struct mmu_context_skas * to_mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1092: FILE: include/asm-um/ldt.h:16:
+extern long init_new_ldt(struct mmu_context_skas * to_mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1093: FILE: include/asm-um/ldt.h:17:
+			 struct mmu_context_skas * from_mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1094: FILE: include/asm-um/ldt.h:18:
+extern void free_ldt(struct mmu_context_skas * mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1094: FILE: include/asm-um/ldt.h:18:
+extern void free_ldt(struct mmu_context_skas * mm);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1097: FILE: include/asm-um/ldt.h:21:
+	((LDT_ENTRIES * LDT_ENTRY_SIZE)/PAGE_SIZE)
 	                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1099: FILE: include/asm-um/ldt.h:23:
+	(PAGE_SIZE/LDT_ENTRY_SIZE)
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1101: FILE: include/asm-um/ldt.h:25:
+	((LDT_PAGES_MAX*sizeof(void *))/LDT_ENTRY_SIZE)
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1101: FILE: include/asm-um/ldt.h:25:
+	((LDT_PAGES_MAX*sizeof(void *))/LDT_ENTRY_SIZE)
 	                               ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1108: FILE: include/asm-um/ldt.h:32:
+typedef struct uml_ldt {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1112: FILE: include/asm-um/ldt.h:36:
+		struct ldt_entry * pages[LDT_PAGES_MAX];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1120: FILE: include/asm-um/ldt.h:44:
+#define LDT_entry_a(info) \
+	((((info)->base_addr & 0x0000ffff) << 16) | ((info)->limit & 0x0ffff))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1123: FILE: include/asm-um/ldt.h:47:
+#define LDT_entry_b(info) \
+	(((info)->base_addr & 0xff000000) | \
+	(((info)->base_addr & 0x00ff0000) >> 16) | \
+	((info)->limit & 0xf0000) | \
+	(((info)->read_exec_only ^ 1) << 9) | \
+	((info)->contents << 10) | \
+	(((info)->seg_not_present ^ 1) << 15) | \
+	((info)->seg_32bit << 22) | \
+	((info)->limit_in_pages << 23) | \
+	((info)->useable << 20) | \
+	0x7000)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1132: FILE: include/asm-um/ldt.h:56:
+	((info)->useable << 20) | \
 	         ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1135: FILE: include/asm-um/ldt.h:59:
+#define LDT_empty(info) (\
+	(info)->base_addr	== 0	&& \
+	(info)->limit		== 0	&& \
+	(info)->contents	== 0	&& \
+	(info)->read_exec_only	== 1	&& \
+	(info)->seg_32bit	== 0	&& \
+	(info)->limit_in_pages	== 0	&& \
+	(info)->seg_not_present	== 1	&& \
+	(info)->useable		== 0	)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1143: FILE: include/asm-um/ldt.h:67:
+	(info)->useable		== 0	)
 	        ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1143: FILE: include/asm-um/ldt.h:67:
+	(info)->useable		== 0	)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139966.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 161 errors, 38 warnings, 66 checks, 1032 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139966.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
