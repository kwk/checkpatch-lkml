WARNING:TYPO_SPELLING: 'calles' may be misspelled - perhaps 'calls'?
#39: 
  order 0 and a fallback to repeated calles to clear_page if an
                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '>' (ctx:WxV)
#60: FILE: mm/page_alloc.c:584:
+				while (n-- >0)
 				           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#62: FILE: mm/page_alloc.c:586:
+			} else
[...]
+			zero_page(page_address(page), order);

CHECK:BRACES: Unbalanced braces around else statement
#62: FILE: mm/page_alloc.c:586:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#81: FILE: mm/page_alloc.c:784:
+		return (unsigned long) page_address(page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: include/asm-ia64/page.h:60:
+extern void zero_page (void *page, int order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: include/asm-ia64/page.h:60:
+extern void zero_page (void *page, int order);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#264: FILE: include/asm-ia64/pgalloc.h:64:
+		pgd = (pgd_t *)__get_free_page(GFP_KERNEL|__GFP_ZERO);
 		                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#273: FILE: include/asm-ia64/pgalloc.h:108:
+	pmd_t *pmd = (pmd_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#273: FILE: include/asm-ia64/pgalloc.h:108:
+	pmd_t *pmd = (pmd_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: include/asm-ia64/pgalloc.h:140:
+	struct page *pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: include/asm-ia64/pgalloc.h:140:
+	struct page *pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#296: FILE: include/asm-ia64/pgalloc.h:148:
+	pte_t *pte = (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#296: FILE: include/asm-ia64/pgalloc.h:148:
+	pte_t *pte = (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#308: FILE: arch/ia64/lib/zero_page.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#420: FILE: include/asm-x86_64/page.h:36:
+void zero_page(void *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#420: FILE: include/asm-x86_64/page.h:36:
+void zero_page(void *, int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: include/asm-sparc/page.h:32:
+#define zero_page(page,order)	 memset((void *)(page), 0, PAGE_SIZE <<(order))
                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#432: FILE: include/asm-sparc/page.h:32:
+#define zero_page(page,order)	 memset((void *)(page), 0, PAGE_SIZE <<(order))
                              	                                     ^

CHECK:SPACING: No space is necessary after a cast
#448: FILE: include/asm-s390/page.h:40:
+	rp.subreg.even = (unsigned long) page;

CHECK:SPACING: No space is necessary after a cast
#449: FILE: include/asm-s390/page.h:41:
+	rp.subreg.odd = (unsigned long) 4096 << order;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long) 4096' could be '4096UL'
#449: FILE: include/asm-s390/page.h:41:
+	rp.subreg.odd = (unsigned long) 4096 << order;

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: include/asm-s390/page.h:42:
+        asm volatile ("   slr  1,1\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: include/asm-s390/page.h:42:
+        asm volatile ("   slr  1,1\n"$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#452: FILE: include/asm-s390/page.h:44:
+		      : "+&a" (rp) : : "memory", "cc", "1" );

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#472: FILE: arch/i386/lib/mmx.c:170:
+	__asm__ __volatile__ (

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)
 	         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)
 	                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)
 	                              ^

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: arch/i386/lib/mmx.c:174:
+	for(i=0;i<((4096/64) << order);i++)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#478: FILE: arch/i386/lib/mmx.c:176:
+		__asm__ __volatile__ (

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#488: FILE: arch/i386/lib/mmx.c:186:
+		page+=64;
 		    ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#493: FILE: arch/i386/lib/mmx.c:191:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#494: FILE: arch/i386/lib/mmx.c:192:
+		"  sfence \n" : :

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#512: FILE: arch/i386/lib/mmx.c:335:
+	__asm__ __volatile__ (

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)
+	{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)
 	         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)
 	                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)
 	                               ^

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: arch/i386/lib/mmx.c:339:
+	for(i=0;i<((4096/128) << order);i++)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#518: FILE: arch/i386/lib/mmx.c:341:
+		__asm__ __volatile__ (

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#536: FILE: arch/i386/lib/mmx.c:359:
+		page+=128;
 		    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#550: FILE: arch/i386/lib/mmx.c:431:
+static void slow_clear_page(void * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#559: FILE: arch/i386/lib/mmx.c:442:
+static void slow_zero_page(void * page, int order)

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: arch/i386/lib/mmx.c:445:
+	int d0, d1;
+	__asm__ __volatile__( \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#566: FILE: arch/i386/lib/mmx.c:449:
+		:"a" (0),"1" (page),"0" (1024 << order)
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: arch/i386/lib/mmx.c:449:
+		:"a" (0),"1" (page),"0" (1024 << order)
 		        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: arch/i386/lib/mmx.c:449:
+		:"a" (0),"1" (page),"0" (1024 << order)
 		                   ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#567: FILE: arch/i386/lib/mmx.c:450:
+		:"memory");
 		^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#579: FILE: arch/i386/lib/mmx.c:461:
+void mmx_zero_page(void * page, int order)

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: arch/i386/lib/mmx.c:463:
+	if(unlikely(in_interrupt()))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#602: FILE: arch/i386/mm/pgtable.c:135:
+	return (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#602: FILE: arch/i386/mm/pgtable.c:135:
+	return (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#611: FILE: arch/i386/mm/pgtable.c:143:
+	pte = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT|__GFP_ZERO, 0);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#611: FILE: arch/i386/mm/pgtable.c:143:
+	pte = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#611: FILE: arch/i386/mm/pgtable.c:143:
+	pte = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#614: FILE: arch/i386/mm/pgtable.c:145:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#614: FILE: arch/i386/mm/pgtable.c:145:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#642: FILE: drivers/block/pktcdvd.c:128:
+	pkt = kmalloc(sizeof(struct packet_data), GFP_KERNEL|__GFP_ZERO);
 	                                                    ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pkt)...) over kmalloc(sizeof(struct packet_data)...)
#642: FILE: drivers/block/pktcdvd.c:128:
+	pkt = kmalloc(sizeof(struct packet_data), GFP_KERNEL|__GFP_ZERO);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#653: FILE: drivers/block/pktcdvd.c:137:
+		pkt->pages[i] = alloc_page(GFP_KERNEL|__GFP_ZERO);
 		                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#667: FILE: arch/x86_64/lib/zero_page.S:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#740: FILE: include/asm-x86_64/mmx.h:12:
+extern void mmx_zero_page(void *page, int order);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221537.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 11 warnings, 31 checks, 586 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221537.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
