WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#308: FILE: include/linux/fs.h:998:
+	void (*truncate_range)(struct inode *, loff_t, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#308: FILE: include/linux/fs.h:998:
+	void (*truncate_range)(struct inode *, loff_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#308: FILE: include/linux/fs.h:998:
+	void (*truncate_range)(struct inode *, loff_t, loff_t);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: include/linux/mm.h:707:
+extern int vmtruncate_range(struct inode * inode, loff_t offset, loff_t end);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/mm.h:707:
+extern int vmtruncate_range(struct inode * inode, loff_t offset, loff_t end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/mm.h:869:
+extern void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#327: FILE: include/linux/mm.h:869:
+extern void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#327: FILE: include/linux/mm.h:869:
+extern void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#327: FILE: include/linux/mm.h:869:
+extern void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: mm/madvise.c:144:
+ * Application wants to free up the pages and associated backing store. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: mm/madvise.c:150:
+static long madvise_free(struct vm_area_struct * vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: mm/madvise.c:151:
+static long madvise_free(struct vm_area_struct * vma,
+			     unsigned long start, unsigned long end)

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: mm/madvise.c:154:
+        loff_t offset, endoff;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: mm/madvise.c:154:
+        loff_t offset, endoff;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: mm/madvise.c:156:
+^Iif (vma->vm_flags & (VM_LOCKED|VM_NONLINEAR|VM_HUGETLB)) $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#351: FILE: mm/madvise.c:156:
+	if (vma->vm_flags & (VM_LOCKED|VM_NONLINEAR|VM_HUGETLB)) 
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#351: FILE: mm/madvise.c:156:
+	if (vma->vm_flags & (VM_LOCKED|VM_NONLINEAR|VM_HUGETLB)) 
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: mm/madvise.c:159:
+^Iif (!vma->vm_file || !vma->vm_file->f_mapping $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#354: FILE: mm/madvise.c:159:
+	if (!vma->vm_file || !vma->vm_file->f_mapping 
[...]
+			return -EINVAL;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#355: FILE: mm/madvise.c:160:
+	if (!vma->vm_file || !vma->vm_file->f_mapping 
+		|| !vma->vm_file->f_mapping->host) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: mm/madvise.c:165:
+	if (mapping == &swapper_space) {
+		return -EINVAL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: mm/madvise.c:169:
+^Ioffset = (loff_t)(start - vma->vm_start) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: mm/madvise.c:171:
+^Iendoff = (loff_t)(end - vma->vm_start - 1) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: mm/memory.c:1600:
+int vmtruncate_range(struct inode * inode, loff_t offset, loff_t end)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: mm/memory.c:1605:
+^I * If the underlying filesystem is not going to provide $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: mm/memory.c:1606:
+^I * a way to truncate a range of blocks (punch a hole) - $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#410: FILE: mm/memory.c:1610:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: mm/memory.c:1611:
+^I^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#424: FILE: mm/memory.c:1624:
+EXPORT_SYMBOL(vmtruncate_range);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: No space is necessary after a cast
#457: FILE: mm/shmem.c:489:
+	if (likely(end == (loff_t) -1)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: mm/shmem.c:588:
+				BUG_ON(subdir->nr_swapped > offset);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: mm/truncate.c:130:
+	BUG_ON((lend & (PAGE_CACHE_SIZE - 1)) != (PAGE_CACHE_SIZE - 1));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139159.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 13 warnings, 7 checks, 420 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139159.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
