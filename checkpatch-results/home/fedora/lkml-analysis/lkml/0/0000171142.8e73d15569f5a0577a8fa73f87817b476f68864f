WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
[PATCH] PCI: acpi tg3 ethernet not coming back properly after S3 suspendon DellM70

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#75: FILE: drivers/pci/pcie/portdrv_core.c:284:
+	if (!(p_ext = kmalloc(sizeof(struct pcie_port_device_ext), GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p_ext)...) over kmalloc(sizeof(struct pcie_port_device_ext)...)
#75: FILE: drivers/pci/pcie/portdrv_core.c:284:
+	if (!(p_ext = kmalloc(sizeof(struct pcie_port_device_ext), GFP_KERNEL)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: drivers/pci/pcie/portdrv_pci.c:38:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: drivers/pci/pcie/portdrv_pci.c:38:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: drivers/pci/pcie/portdrv_pci.c:38:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#104: FILE: drivers/pci/pcie/portdrv_pci.c:38:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: drivers/pci/pcie/portdrv_pci.c:44:
+	pci_read_config_dword(dev, pos + PCI_MSI_ADDRESS_LO,
+		&p_ext->saved_msi_config_space[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: drivers/pci/pcie/portdrv_pci.c:47:
+		pci_read_config_dword(dev, pos + PCI_MSI_ADDRESS_HI,
+			&p_ext->saved_msi_config_space[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/pci/pcie/portdrv_pci.c:49:
+		pci_read_config_dword(dev, pos + PCI_MSI_DATA_64,
+			&p_ext->saved_msi_config_space[i++]);

CHECK:BRACES: Unbalanced braces around else statement
#116: FILE: drivers/pci/pcie/portdrv_pci.c:50:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: drivers/pci/pcie/portdrv_pci.c:52:
+		pci_read_config_dword(dev, pos + PCI_MSI_DATA_32,
+			&p_ext->saved_msi_config_space[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: drivers/pci/pcie/portdrv_pci.c:55:
+		pci_read_config_dword(dev, pos + PCI_MSI_MASK_BIT,
+			&p_ext->saved_msi_config_space[i++]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: drivers/pci/pcie/portdrv_pci.c:64:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: drivers/pci/pcie/portdrv_pci.c:64:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: drivers/pci/pcie/portdrv_pci.c:64:
+   ^Iif ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#130: FILE: drivers/pci/pcie/portdrv_pci.c:64:
+   	if ((pos = pci_find_capability(dev, PCI_CAP_ID_MSI)) <= 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: drivers/pci/pcie/portdrv_pci.c:70:
+	pci_write_config_dword(dev, pos + PCI_MSI_ADDRESS_LO,
+		p_ext->saved_msi_config_space[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/pci/pcie/portdrv_pci.c:73:
+		pci_write_config_dword(dev, pos + PCI_MSI_ADDRESS_HI,
+			p_ext->saved_msi_config_space[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: drivers/pci/pcie/portdrv_pci.c:75:
+		pci_write_config_dword(dev, pos + PCI_MSI_DATA_64,
+			p_ext->saved_msi_config_space[i++]);

CHECK:BRACES: Unbalanced braces around else statement
#142: FILE: drivers/pci/pcie/portdrv_pci.c:76:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: drivers/pci/pcie/portdrv_pci.c:78:
+		pci_write_config_dword(dev, pos + PCI_MSI_DATA_32,
+			p_ext->saved_msi_config_space[i++]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: drivers/pci/pcie/portdrv_pci.c:81:
+		pci_write_config_dword(dev, pos + PCI_MSI_MASK_BIT,
+			p_ext->saved_msi_config_space[i++]);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000171142.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 5 warnings, 13 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000171142.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
