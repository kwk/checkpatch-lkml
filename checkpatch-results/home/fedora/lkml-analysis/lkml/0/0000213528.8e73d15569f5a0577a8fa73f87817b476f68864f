WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> it could become writable in future. If "max nice level" ever becomes rlimit,

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#34: 
> this would be very usefull.
                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#81: FILE: fs/proc/base.c:131:
+	E(PROC_TGID_RLIMIT,    "rlimit",  S_IFREG|S_IRUGO|S_IWUSR),
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#81: FILE: fs/proc/base.c:131:
+	E(PROC_TGID_RLIMIT,    "rlimit",  S_IFREG|S_IRUGO|S_IWUSR),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#81: FILE: fs/proc/base.c:131:
+	E(PROC_TGID_RLIMIT,    "rlimit",  S_IFREG|S_IRUGO|S_IWUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#90: FILE: fs/proc/base.c:157:
+	E(PROC_TID_RLIMIT,     "rlimit",  S_IFREG|S_IRUGO|S_IWUSR),
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#90: FILE: fs/proc/base.c:157:
+	E(PROC_TID_RLIMIT,     "rlimit",  S_IFREG|S_IRUGO|S_IWUSR),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#90: FILE: fs/proc/base.c:157:
+	E(PROC_TID_RLIMIT,     "rlimit",  S_IFREG|S_IRUGO|S_IWUSR),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: fs/proc/base.c:614:
+static ssize_t rlimit_write(struct file * file, const char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: fs/proc/base.c:614:
+static ssize_t rlimit_write(struct file * file, const char * buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: fs/proc/base.c:615:
+                         size_t count, loff_t *ppos)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/proc/base.c:615:
+static ssize_t rlimit_write(struct file * file, const char * buf,
+                         size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: fs/proc/base.c:615:
+                         size_t count, loff_t *ppos)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: fs/proc/base.c:620:
+	char *s, *t, kbuf[MAX_RLIMIT_WRITE+1];
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: fs/proc/base.c:623:
+	if (!capable(CAP_SYS_PTRACE) || security_ptrace(current,task))
 	                                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: fs/proc/base.c:626:
+        if (count > MAX_RLIMIT_WRITE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: fs/proc/base.c:626:
+        if (count > MAX_RLIMIT_WRITE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: fs/proc/base.c:627:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: fs/proc/base.c:627:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: fs/proc/base.c:628:
+        if (copy_from_user(&kbuf, buf, count))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/proc/base.c:628:
+        if (copy_from_user(&kbuf, buf, count))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: fs/proc/base.c:629:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/proc/base.c:629:
+                return -EFAULT;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: fs/proc/base.c:630:
+        kbuf[MAX_RLIMIT_WRITE] = '\0'; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/proc/base.c:630:
+        kbuf[MAX_RLIMIT_WRITE] = '\0'; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/proc/base.c:630:
+        kbuf[MAX_RLIMIT_WRITE] = '\0'; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#138: FILE: fs/proc/base.c:639:
+		if (rlim_name[i] && !strcmp(s,rlim_name[i]))
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#141: FILE: fs/proc/base.c:642:
+		if (!strncmp(s, "rlimit-",7))
 		                         ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#143: FILE: fs/proc/base.c:644:
+		if (sscanf(s, "%u", &i) != 1 || i >= RLIM_NLIMITS)
+			return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: fs/proc/base.c:654:
+^Iif (!strcmp(s, "unlimited")) $

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#155: FILE: fs/proc/base.c:656:
+	else if (sscanf(s, "%lu", &new_rlim.rlim_cur) != 1)
+		return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: fs/proc/base.c:663:
+^Iif (!strcmp(s, "unlimited")) $

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#164: FILE: fs/proc/base.c:665:
+	else if (sscanf(s, "%lu", &new_rlim.rlim_max) != 1)
+		return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: fs/proc/base.c:671:
+        old_rlim = task->signal->rlim + i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/proc/base.c:671:
+        old_rlim = task->signal->rlim + i;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_rlim.rlim_max > old_rlim->rlim_max'
#171: FILE: fs/proc/base.c:672:
+	if ((new_rlim.rlim_max > old_rlim->rlim_max) &&
+	    !capable(CAP_SYS_RESOURCE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: fs/proc/base.c:681:
+        task_lock(task->group_leader);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/proc/base.c:681:
+        task_lock(task->group_leader);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/proc/base.c:682:
+        *old_rlim = new_rlim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/proc/base.c:682:
+        *old_rlim = new_rlim;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: fs/proc/base.c:683:
+        task_unlock(task->group_leader);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: fs/proc/base.c:683:
+        task_unlock(task->group_leader);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213528.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 17 warnings, 7 checks, 122 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213528.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
