WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
> > +extern void fastcall __rt_mutex_init(struct rt_mutex *lock, const char *name);

WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#217: 
isnt modular (but it could be made modular). Should i remove the export?
^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/rtmutex.h:87:
+extern void __rt_mutex_init(struct rt_mutex *lock, const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/rtmutex.h:88:
+extern void rt_mutex_destroy(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: include/linux/rtmutex.h:90:
+extern void rt_mutex_lock(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/rtmutex.h:91:
+extern int rt_mutex_lock_interruptible(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: include/linux/rtmutex.h:92:
+extern int rt_mutex_lock_interruptible(struct rt_mutex *lock,
 						int detect_deadlock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/rtmutex.h:93:
+extern int rt_mutex_timed_lock(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: include/linux/rtmutex.h:94:
+extern int rt_mutex_timed_lock(struct rt_mutex *lock,
 					struct hrtimer_sleeper *timeout,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/rtmutex.h:97:
+extern int rt_mutex_trylock(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: include/linux/rtmutex.h:99:
+extern void rt_mutex_unlock(struct rt_mutex *lock);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: kernel/rtmutex.c:79:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: kernel/rtmutex.c:79:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#657: FILE: kernel/rtmutex.c:79:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#657: FILE: kernel/rtmutex.c:79:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:SPACING: No space is necessary after a cast
#660: FILE: kernel/rtmutex.c:82:
+	unsigned long owner, *p = (unsigned long *) &lock->owner;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: kernel/rtmutex.c:89:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: kernel/rtmutex.c:89:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: kernel/rtmutex.c:859:
+		  int (*slowfn)(struct rt_mutex *lock, int state,
 					 struct hrtimer_sleeper *timeout,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: kernel/rtmutex.c:873:
+			int (*slowfn)(struct rt_mutex *lock, int state,
 					       struct hrtimer_sleeper *timeout,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: kernel/rtmutex.c:929:
+int __sched rt_mutex_lock_interruptible(struct rt_mutex *lock,
 						 int detect_deadlock)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#838: FILE: kernel/rtmutex_common.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#862: FILE: kernel/rtmutex_common.h:25:
+extern void schedule_rt_mutex_test(struct rt_mutex *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: kernel/rtmutex_common.h:28:
+  do {^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: kernel/rtmutex_common.h:33:
+  } while (0)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: kernel/rtmutex_common.h:73:
+	w = plist_first_entry(&lock->wait_list, struct rt_mutex_waiter,
+			       list_entry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#911: FILE: kernel/rtmutex_common.h:74:
+	BUG_ON(w->lock != lock);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#943: FILE: kernel/rtmutex_common.h:106:
+ ^Ireturn (struct task_struct *)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#943: FILE: kernel/rtmutex_common.h:106:
+ ^Ireturn (struct task_struct *)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#943: FILE: kernel/rtmutex_common.h:106:
+ ^Ireturn (struct task_struct *)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: kernel/rtmutex_common.h:118:
+extern struct task_struct *rt_mutex_next_owner(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: kernel/rtmutex_common.h:119:
+extern void rt_mutex_init_proxy_locked(struct rt_mutex *lock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#958: FILE: kernel/rtmutex_common.h:121:
+extern void rt_mutex_proxy_unlock(struct rt_mutex *lock,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090382.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 8 warnings, 20 checks, 465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090382.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
