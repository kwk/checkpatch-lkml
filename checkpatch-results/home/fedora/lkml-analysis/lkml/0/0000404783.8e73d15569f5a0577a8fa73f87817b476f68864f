WARNING:TYPO_SPELLING: 'permenant' may be misspelled - perhaps 'permanent'?
#30: 
Works fine here.  Requires the previous "Overzealous permenant mark
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .1411-2.5.53-embedded-thismodule.pre/include/linux/init.h .1411-2.5.53-embedded-thismodule/include/linux/init.h

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#initfn) over __attribute__((alias(#initfn)))
#56: FILE: include/linux/init.h:150:
+	int init_module(void) __attribute__((alias(#initfn)));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#56: FILE: include/linux/init.h:150:
+	int init_module(void) __attribute__((alias(#initfn)));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#exitfn) over __attribute__((alias(#exitfn)))
#64: FILE: include/linux/init.h:156:
+	void cleanup_module(void) __attribute__((alias(#exitfn)));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#64: FILE: include/linux/init.h:156:
+	void cleanup_module(void) __attribute__((alias(#exitfn)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/module.h:44:
+extern int init_module(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/module.h:45:
+extern void cleanup_module(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".gnu.linkonce.this_module") over __attribute__((section(".gnu.linkonce.this_module")))
#114: FILE: include/linux/module.h:291:
+__attribute__((section(".gnu.linkonce.this_module"))) = {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#177: FILE: kernel/module.c:423:
+	if ((mod->init != init_module && mod->exit == cleanup_module)
+	    || mod->unsafe) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#287: FILE: kernel/module.c:996:
+	symindex = strindex = exindex = modindex = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#313: FILE: kernel/module.c:1048:
+		printk(KERN_WARNING "No module found in object\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#328: FILE: kernel/module.c:1060:
+	args = kmalloc(arglen+1, GFP_KERNEL);
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#335: FILE: kernel/module.c:1065:
+	if (copy_from_user(args, uargs, arglen+1) != 0) {
 	                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: kernel/module.c:1124:
+^I^I^I/* Have we just copied __this_module across? */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000404783.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 8 warnings, 6 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000404783.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
