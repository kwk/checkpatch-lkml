WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
--- 2.6.7-mm5.orig/arch/i386/kernel/numaq.c	2004-07-01 19:30:10.000000000 -0700

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: include/linux/nodemask.h:1:
+#ifndef __LINUX_NODEMASK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#260: FILE: include/linux/nodemask.h:83:
+#include <asm/bug.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#262: FILE: include/linux/nodemask.h:85:
+typedef struct { DECLARE_BITMAP(bits, MAX_NUMNODES); } nodemask_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#266: FILE: include/linux/nodemask.h:89:
+static inline void __node_set(int node, volatile nodemask_t *dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#272: FILE: include/linux/nodemask.h:95:
+static inline void __node_clear(int node, volatile nodemask_t *dstp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: include/linux/nodemask.h:125:
+static inline void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: include/linux/nodemask.h:133:
+static inline void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: include/linux/nodemask.h:141:
+static inline void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: include/linux/nodemask.h:149:
+static inline void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: include/linux/nodemask.h:157:
+static inline void __nodes_complement(nodemask_t *dstp,
+					const nodemask_t *srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: include/linux/nodemask.h:165:
+static inline int __nodes_equal(const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: include/linux/nodemask.h:173:
+static inline int __nodes_intersects(const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: include/linux/nodemask.h:181:
+static inline int __nodes_subset(const nodemask_t *src1p,
+					const nodemask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: include/linux/nodemask.h:207:
+static inline void __nodes_shift_right(nodemask_t *dstp,
+					const nodemask_t *srcp, int n, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: include/linux/nodemask.h:215:
+static inline void __nodes_shift_left(nodemask_t *dstp,
+					const nodemask_t *srcp, int n, int nbits)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#406: FILE: include/linux/nodemask.h:229:
+	return find_next_bit(srcp->bits, nbits, n+1);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#409: FILE: include/linux/nodemask.h:232:
+#define nodemask_of_node(node)						\
+({									\
+	typeof(_unused_nodemask_arg_) m;				\
+	if (sizeof(m) == sizeof(unsigned long)) {			\
+		m.bits[0] = 1UL<<(node);				\
+	} else {							\
+		nodes_clear(m);						\
+		node_set((node), m);					\
+	}								\
+	m;								\
+})

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#413: FILE: include/linux/nodemask.h:236:
+		m.bits[0] = 1UL<<(node);				\
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#427: FILE: include/linux/nodemask.h:250:
+	[BITS_TO_LONGS(MAX_NUMNODES)-1] = NODE_MASK_LAST_WORD		\
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#434: FILE: include/linux/nodemask.h:257:
+	[0 ... BITS_TO_LONGS(MAX_NUMNODES)-2] = ~0UL,			\
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#435: FILE: include/linux/nodemask.h:258:
+	[BITS_TO_LONGS(MAX_NUMNODES)-1] = NODE_MASK_LAST_WORD		\
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#442: FILE: include/linux/nodemask.h:265:
+	[0 ... BITS_TO_LONGS(MAX_NUMNODES)-1] =  0UL			\
 	                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: include/linux/nodemask.h:273:
+static inline int __nodemask_scnprintf(char *buf, int len,
+					const nodemask_t *srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: include/linux/nodemask.h:281:
+static inline int __nodemask_parse(const char __user *buf, int len,
+					nodemask_t *dstp, int nbits)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#464: FILE: include/linux/nodemask.h:287:
+#define for_each_node_mask(node, mask)			\
+	for ((node) = first_node(mask);			\
+		(node) < MAX_NUMNODES;			\
+		(node) = next_node((node), (mask)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#464: FILE: include/linux/nodemask.h:287:
+#define for_each_node_mask(node, mask)			\
+	for ((node) = first_node(mask);			\
+		(node) < MAX_NUMNODES;			\
+		(node) = next_node((node), (mask)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#469: FILE: include/linux/nodemask.h:292:
+#define for_each_node_mask(node, mask) for ((node) = 0; (node) < 1; (node)++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: mm/mempolicy.c:632:
+	BUG_ON(!test_bit(nid, nodes_addr(node_online_map)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: mm/mempolicy.c:1022:
+	if (sys_set_mempolicy(MPOL_INTERLEAVE, nodes_addr(node_online_map),
+							MAX_NUMNODES) < 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270568.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 7 warnings, 23 checks, 480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270568.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
