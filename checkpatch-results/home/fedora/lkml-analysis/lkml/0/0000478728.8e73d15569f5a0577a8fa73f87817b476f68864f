WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
diff -urN linux-2.5.4-pre1/drivers/net/ppp_async.c linux/drivers/net/ppp_async.c

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ap"
#95: FILE: drivers/net/ppp_async.c:129:
+	if (ap != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#150: FILE: drivers/net/ppp_async.c:211:
+	/*
+	 * We have now ensured that nobody can start using ap from now

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'X' may be better as '(X)' to avoid precedence issues
#260: FILE: drivers/net/ppp_generic.c:84:
+#define PF_TO_X(pf, X)		((X *)((char *)(pf) - offsetof(X, file)))

CHECK:CAMELCASE: Avoid CamelCase: <NPmode>
#299: FILE: drivers/net/ppp_generic.c:110:
+	enum NPmode	npmode[NUM_NP];	/* what to do with each net proto 78 */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BIT_MACRO: Prefer using the BIT macro
#339: FILE: drivers/net/ppp_generic.c:181:
+#define CARDMAP_WIDTH	(1U << CARDMAP_ORDER)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#348: FILE: drivers/net/ppp_generic.c:190:
+};
+static void *cardmap_get(struct cardmap *map, unsigned int nr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#354: FILE: drivers/net/ppp_generic.c:196:
+/*
+ * all_ppp_sem protects the all_ppp_units mapping.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#526: FILE: drivers/net/ppp_generic.c:493:
+		/*
+		 * We have to be careful here... if the file descriptor

CHECK:BRACES: Unbalanced braces around else statement
#545: FILE: drivers/net/ppp_generic.c:512:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#546: FILE: drivers/net/ppp_generic.c:513:
+			printk(KERN_DEBUG "PPPIOCDETACH file->f_count=%d\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#667: FILE: drivers/net/ppp_generic.c:935:
+		while (ppp->xmit_pending == 0
+		       && (skb = skb_dequeue(&ppp->file.xq)) != 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#670: FILE: drivers/net/ppp_generic.c:938:
+		/* If there's no work left to do, tell the core net
+		   code that we can accept some more. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: drivers/net/ppp_generic.c:938:
+		   code that we can accept some more. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pch)...) over kmalloc(sizeof(struct channel)...)
#690: FILE: drivers/net/ppp_generic.c:1826:
+	pch = kmalloc(sizeof(struct channel), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#754: FILE: drivers/net/ppp_generic.c:1964:
+	/*
+	 * XXX race: the compressor module could get unloaded between

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ppp)...) over kmalloc(sizeof(struct ppp)...)
#831: FILE: drivers/net/ppp_generic.c:2229:
+	ppp = kmalloc(sizeof(struct ppp), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct net_device)...)
#835: FILE: drivers/net/ppp_generic.c:2232:
+	dev = kmalloc(sizeof(struct net_device), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cardmap_get"
#850: FILE: drivers/net/ppp_generic.c:2242:
+	else if (cardmap_get(all_ppp_units, unit) != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#865: FILE: drivers/net/ppp_generic.c:2270:
+		printk(KERN_ERR "PPP: couldn't register device %s (%d)\n",

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#887: FILE: drivers/net/ppp_generic.c:2286:
+	if (ppp)
+		kfree(ppp);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#889: FILE: drivers/net/ppp_generic.c:2288:
+	if (dev)
+		kfree(dev);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#932: FILE: drivers/net/ppp_generic.c:2332:
+/*
+ * Free the memory used by a ppp unit.  This is only called once

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#942: FILE: drivers/net/ppp_generic.c:2342:
+		printk(KERN_ERR "ppp: destroying ppp struct %p but dead=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: drivers/net/ppp_generic.c:2343:
+		printk(KERN_ERR "ppp: destroying ppp struct %p but dead=%d "
+		       "n_channels=%d !\n", ppp, ppp->file.dead,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1112: FILE: drivers/net/ppp_generic.c:2488:
+		printk(KERN_ERR "ppp: destroying undead channel %p !\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1133: FILE: drivers/net/ppp_generic.c:2509:
+/*
+ * Cardmap implementation.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1140: FILE: drivers/net/ppp_generic.c:2516:
+	for (p = map; p != NULL; ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1141: FILE: drivers/net/ppp_generic.c:2517:
+		if ((i = nr >> p->shift) >= CARDMAP_WIDTH)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1157: FILE: drivers/net/ppp_generic.c:2533:
+	if (p == NULL || (nr >> p->shift) >= CARDMAP_WIDTH) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1161: FILE: drivers/net/ppp_generic.c:2537:
+			struct cardmap *np = kmalloc(sizeof(*np), GFP_KERNEL);
+			memset(np, 0, sizeof(*np));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1163: FILE: drivers/net/ppp_generic.c:2539:
+			if (p != NULL) {
[...]
+			} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1163: FILE: drivers/net/ppp_generic.c:2539:
+			if (p != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1166: FILE: drivers/net/ppp_generic.c:2542:
+			} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->ptr[i]"
#1174: FILE: drivers/net/ppp_generic.c:2550:
+		if (p->ptr[i] == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1176: FILE: drivers/net/ppp_generic.c:2552:
+			struct cardmap *np = kmalloc(sizeof(*np), GFP_KERNEL);
+			memset(np, 0, sizeof(*np));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#1181: FILE: drivers/net/ppp_generic.c:2557:
+		if (ptr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#1187: FILE: drivers/net/ppp_generic.c:2563:
+	if (ptr != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1199: FILE: drivers/net/ppp_generic.c:2575:
+	if ((p = map) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->parent"
#1204: FILE: drivers/net/ppp_generic.c:2580:
+			if (p->parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->ptr[i]"
#1212: FILE: drivers/net/ppp_generic.c:2588:
+		if (p->shift == 0 || p->ptr[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1223: FILE: drivers/net/ppp_generic.c:2599:
+	for (p = *pmap; p != NULL; p = np) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->ptr[i]"
#1226: FILE: drivers/net/ppp_generic.c:2602:
+				if (p->ptr[i] != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ap"
#1305: FILE: drivers/net/ppp_synctty.c:184:
+	if (ap != NULL)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1318: FILE: drivers/net/ppp_synctty.c:197:
+/*
+ * Called when a tty is put into sync-PPP line discipline.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1358: FILE: drivers/net/ppp_synctty.c:264:
+	/*
+	 * We have now ensured that nobody can start using ap from now

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1450: FILE: drivers/net/pppoe.c:279:
+				if (sk->state & (PPPOX_CONNECTED|PPPOX_BOUND)){
 				                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#1450: FILE: drivers/net/pppoe.c:279:
+				if (sk->state & (PPPOX_CONNECTED|PPPOX_BOUND)){

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1475: FILE: drivers/net/pppoe.c:730:
+		if (sk->state & (PPPOX_BOUND|PPPOX_ZOMBIE|PPPOX_DEAD))
 		                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1475: FILE: drivers/net/pppoe.c:730:
+		if (sk->state & (PPPOX_BOUND|PPPOX_ZOMBIE|PPPOX_DEAD))
 		                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1494: FILE: include/linux/if_pppox.h:135:
+    PPPOX_ZOMBIE^I= 8,  /* dead, but still bound to ppp device */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1495: FILE: include/linux/if_pppox.h:136:
+    PPPOX_DEAD^I^I= 16  /* dead, useless, please clean me up!*/$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 22 warnings, 27 checks, 1371 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
