WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
If a page table entry is cleared then a second CPU may generate a page fault

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: mm/rmap.c:594:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#203: FILE: mm/mprotect.c:45:
+		if (!ptep_cmpxchg(mm, addr, pte, ptent, pte_modify(ptent, newprot)))
+				goto redo;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/asm-generic/pgtable.h:127:
+#define ptep_cmpxchg(__mm, __address, __ptep,__oldval,__newval)		\
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/asm-generic/pgtable.h:127:
+#define ptep_cmpxchg(__mm, __address, __ptep,__oldval,__newval)		\
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__oldval' - possible side-effects?
#230: FILE: include/asm-generic/pgtable.h:127:
+#define ptep_cmpxchg(__mm, __address, __ptep,__oldval,__newval)		\
+	(cmpxchg(&pte_val(*(__ptep)),					\
+			pte_val(__oldval),				\
+			pte_val(__newval)				\
+		) == pte_val(__oldval)					\
+	)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#239: FILE: include/asm-generic/pgtable.h:136:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_xchg(__vma, __address, __ptep, __pteval);	\
+	flush_tlb_page(__vma, __address);				\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__address' - possible side-effects?
#239: FILE: include/asm-generic/pgtable.h:136:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_xchg(__vma, __address, __ptep, __pteval);	\
+	flush_tlb_page(__vma, __address);				\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#258: FILE: include/asm-generic/pgtable.h:155:
+#define ptep_xchg(__mm, __address, __ptep, __pteval)			\
+({									\
+	pte_t __pte = ptep_get_and_clear(__mm, __address, __ptep);	\
+	set_pte_at(__mm, __address, __ptep, __pteval);			\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__address' - possible side-effects?
#258: FILE: include/asm-generic/pgtable.h:155:
+#define ptep_xchg(__mm, __address, __ptep, __pteval)			\
+({									\
+	pte_t __pte = ptep_get_and_clear(__mm, __address, __ptep);	\
+	set_pte_at(__mm, __address, __ptep, __pteval);			\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#258: FILE: include/asm-generic/pgtable.h:155:
+#define ptep_xchg(__mm, __address, __ptep, __pteval)			\
+({									\
+	pte_t __pte = ptep_get_and_clear(__mm, __address, __ptep);	\
+	set_pte_at(__mm, __address, __ptep, __pteval);			\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#268: FILE: include/asm-generic/pgtable.h:165:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_clear_flush(__vma, __address, __ptep);	\
+	set_pte_at((__vma)->mm, __address, __ptep, __pteval);		\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__address' - possible side-effects?
#268: FILE: include/asm-generic/pgtable.h:165:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_clear_flush(__vma, __address, __ptep);	\
+	set_pte_at((__vma)->mm, __address, __ptep, __pteval);		\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#268: FILE: include/asm-generic/pgtable.h:165:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_clear_flush(__vma, __address, __ptep);	\
+	set_pte_at((__vma)->mm, __address, __ptep, __pteval);		\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#275: FILE: include/asm-generic/pgtable.h:172:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_xchg((__vma)->mm, __address, __ptep, __pteval);\
+	flush_tlb_page(__vma, __address);				\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__address' - possible side-effects?
#275: FILE: include/asm-generic/pgtable.h:172:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_xchg((__vma)->mm, __address, __ptep, __pteval);\
+	flush_tlb_page(__vma, __address);				\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#293: FILE: include/asm-generic/pgtable.h:190:
+#define ptep_cmpxchg(__mm, __address, __ptep, __old, __new)		\
+({									\
+	pte_t prev = ptep_get_and_clear(__mm, __address, __ptep);	\
+	int r = pte_val(prev) == pte_val(__old);			\
+	set_pte_at(__mm, __address, __ptep, r ? (__new) : prev);	\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__address' - possible side-effects?
#293: FILE: include/asm-generic/pgtable.h:190:
+#define ptep_cmpxchg(__mm, __address, __ptep, __old, __new)		\
+({									\
+	pte_t prev = ptep_get_and_clear(__mm, __address, __ptep);	\
+	int r = pte_val(prev) == pte_val(__old);			\
+	set_pte_at(__mm, __address, __ptep, r ? (__new) : prev);	\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#293: FILE: include/asm-generic/pgtable.h:190:
+#define ptep_cmpxchg(__mm, __address, __ptep, __old, __new)		\
+({									\
+	pte_t prev = ptep_get_and_clear(__mm, __address, __ptep);	\
+	int r = pte_val(prev) == pte_val(__old);			\
+	set_pte_at(__mm, __address, __ptep, r ? (__new) : prev);	\
+	r;								\
+})

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 2 warnings, 15 checks, 225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
