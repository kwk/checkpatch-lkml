WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#55: FILE: drivers/infiniband/core/mad.c:34:
+ * $Id: mad.c 2817 2005-07-07 11:29:26Z halr $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: drivers/infiniband/core/mad.c:695:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/infiniband/core/mad.c:711:
+^I^I^I * Reference MAD agent until receive $

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: drivers/infiniband/core/mad.c:828:
+		struct ib_rmpp_mad *rmpp_mad;
+		rmpp_mad = (struct ib_rmpp_mad *)send_buf->mad;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_send_wr should be sizeof(*mad_send_wr)
#186: FILE: drivers/infiniband/core/mad.c:961:
+		memset(mad_send_wr, 0, sizeof *mad_send_wr);

CHECK:BRACES: Unbalanced braces around else statement
#208: FILE: drivers/infiniband/core/mad.c:989:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/infiniband/core/mad.c:1026:
+	list_for_each_entry_safe(mad_recv_buf, temp_recv_buf,
+					&free_list, list) {

CHECK:BRACES: Unbalanced braces around else statement
#353: FILE: drivers/infiniband/core/mad.c:1844:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: drivers/infiniband/core/mad.c:2238:
+	} else

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#456: FILE: drivers/infiniband/core/mad_priv.h:34:
+ * $Id: mad_priv.h 2730 2005-06-28 16:43:03Z sean.hefty $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#517: FILE: drivers/infiniband/core/mad_rmpp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#549: FILE: drivers/infiniband/core/mad_rmpp.c:33:
+ * $Id: mad_rmpp.c 1921 2005-03-02 22:58:44Z sean.hefty $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#570: FILE: drivers/infiniband/core/mad_rmpp.c:54:
+	spinlock_t lock;

WARNING:SIZEOF_PARENTHESIS: sizeof *rmpp_recv should be sizeof(*rmpp_recv)
#658: FILE: drivers/infiniband/core/mad_rmpp.c:142:
+	rmpp_recv = kmalloc(sizeof *rmpp_recv, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#795: FILE: drivers/infiniband/core/mad_rmpp.c:279:
+	format_ack((struct ib_rmpp_mad *) msg->mad,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#796: FILE: drivers/infiniband/core/mad_rmpp.c:280:
+		   (struct ib_rmpp_mad *) recv_wc->recv_buf.mad, rmpp_recv);

CHECK:SPACING: No space is necessary after a cast
#807: FILE: drivers/infiniband/core/mad_rmpp.c:291:
+	rmpp_mad = (struct ib_rmpp_mad *) seg->mad;

CHECK:SPACING: No space is necessary after a cast
#815: FILE: drivers/infiniband/core/mad_rmpp.c:299:
+	rmpp_mad = (struct ib_rmpp_mad *) seg->mad;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#819: FILE: drivers/infiniband/core/mad_rmpp.c:303:
+static inline struct ib_mad_recv_buf * get_next_seg(struct list_head *rmpp_list,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#833: FILE: drivers/infiniband/core/mad_rmpp.c:317:
+static struct ib_mad_recv_buf * find_seg_location(struct list_head *rmpp_list,

ERROR:CODE_INDENT: code indent should use tabs where possible
#836: FILE: drivers/infiniband/core/mad_rmpp.c:320:
+        struct ib_mad_recv_buf *seg_buf;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: drivers/infiniband/core/mad_rmpp.c:320:
+        struct ib_mad_recv_buf *seg_buf;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: drivers/infiniband/core/mad_rmpp.c:337:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#877: FILE: drivers/infiniband/core/mad_rmpp.c:361:
+static struct ib_mad_recv_wc * complete_rmpp(struct mad_rmpp_recv *rmpp_recv)

CHECK:SPACING: No space is necessary after a cast
#917: FILE: drivers/infiniband/core/mad_rmpp.c:401:
+			data = (void *) rmpp_mad + offset;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#918: FILE: drivers/infiniband/core/mad_rmpp.c:402:
+^I^I^Iif (flags & IB_MGMT_RMPP_FLAG_LAST) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rmpp_recv->state == RMPP_STATE_TIMEOUT'
#948: FILE: drivers/infiniband/core/mad_rmpp.c:432:
+	if ((rmpp_recv->state == RMPP_STATE_TIMEOUT) ||
+	    (seg_num > rmpp_recv->newwin))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg_num > rmpp_recv->newwin'
#948: FILE: drivers/infiniband/core/mad_rmpp.c:432:
+	if ((rmpp_recv->state == RMPP_STATE_TIMEOUT) ||
+	    (seg_num > rmpp_recv->newwin))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg_num <= rmpp_recv->last_ack'
#952: FILE: drivers/infiniband/core/mad_rmpp.c:436:
+	if ((seg_num <= rmpp_recv->last_ack) ||
+	    (rmpp_recv->state == RMPP_STATE_COMPLETE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rmpp_recv->state == RMPP_STATE_COMPLETE'
#952: FILE: drivers/infiniband/core/mad_rmpp.c:436:
+	if ((seg_num <= rmpp_recv->last_ack) ||
+	    (rmpp_recv->state == RMPP_STATE_COMPLETE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad_send_wr->last_ack == mad_send_wr->total_seg'
#1098: FILE: drivers/infiniband/core/mad_rmpp.c:582:
+	if ((mad_send_wr->last_ack == mad_send_wr->total_seg) ||
+	    (!mad_send_wr->timeout) || (mad_send_wr->status != IB_WC_SUCCESS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mad_send_wr->timeout'
#1098: FILE: drivers/infiniband/core/mad_rmpp.c:582:
+	if ((mad_send_wr->last_ack == mad_send_wr->total_seg) ||
+	    (!mad_send_wr->timeout) || (mad_send_wr->status != IB_WC_SUCCESS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad_send_wr->status != IB_WC_SUCCESS'
#1098: FILE: drivers/infiniband/core/mad_rmpp.c:582:
+	if ((mad_send_wr->last_ack == mad_send_wr->total_seg) ||
+	    (!mad_send_wr->timeout) || (mad_send_wr->status != IB_WC_SUCCESS))

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mad_send_wr->send_wr.wr.ud.timeout_ms'
#1129: FILE: drivers/infiniband/core/mad_rmpp.c:613:
+			ib_reset_mad_timeout(mad_send_wr, mad_send_wr->
+					     send_wr.wr.ud.timeout_ms);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1205: FILE: drivers/infiniband/core/mad_rmpp.c:689:
+        mad_send_wr->total_seg = (total_len - mad_send_wr->data_offset) /$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: drivers/infiniband/core/mad_rmpp.c:689:
+        mad_send_wr->total_seg = (total_len - mad_send_wr->data_offset) /$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1226: FILE: drivers/infiniband/core/mad_rmpp.c:710:
+^Iif (!(ib_get_rmpp_flags(&rmpp_mad->rmpp_hdr) & $

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: drivers/infiniband/core/mad_rmpp.c:715:
+		msg = (struct ib_mad_send_buf *) (unsigned long)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: drivers/infiniband/core/mad_rmpp.c:752:
+^Iif (!(ib_get_rmpp_flags(&rmpp_mad->rmpp_hdr) & $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1286: FILE: drivers/infiniband/core/mad_rmpp.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1317: FILE: drivers/infiniband/core/mad_rmpp.h:32:
+ * $Id: mad_rmpp.h 1921 2005-02-25 22:58:44Z sean.hefty $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 12 warnings, 18 checks, 1265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
