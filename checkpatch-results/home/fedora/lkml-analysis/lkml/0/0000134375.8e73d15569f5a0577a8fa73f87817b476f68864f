ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: drivers/char/mem.c:567:
+        int retval = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: drivers/char/mem.c:567:
+        int retval = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: drivers/char/mem.c:569:
+        switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: drivers/char/mem.c:569:
+        switch (cmd) {$

CHECK:SPACING: No space is necessary after a cast
#78: FILE: drivers/char/mem.c:583:
+			get_user(pages, (long *) arg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#78: FILE: drivers/char/mem.c:583:
+			void *pgdir;
+			get_user(pages, (long *) arg);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#79: FILE: drivers/char/mem.c:584:
+			get_user(pgdir, (void **) (arg + 4));

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: drivers/char/mem.c:594:
+        default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: drivers/char/mem.c:595:
+                retval = -ENOTTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: drivers/char/mem.c:595:
+                retval = -ENOTTY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: drivers/char/mem.c:596:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: drivers/char/mem.c:596:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: drivers/char/mem.c:597:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: drivers/char/mem.c:597:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: drivers/char/mem.c:599:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: drivers/char/mem.c:599:
+        return retval;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: drivers/char/mem.c:602:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/suspend.h:99:
+extern int sys_freeze(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/suspend.h:100:
+extern int sys_unfreeze(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/suspend.h:101:
+extern int sys_atomic_snapshot(void **pgdir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/suspend.h:102:
+extern int sys_atomic_restore(void *pgdir, int pages);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: include/linux/suspend.h:104:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: kernel/power/disk.c:152:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#207: FILE: kernel/power/disk.c:261:
+	/* Prepare processes only after swsusp_check; we could do it before,
+	   but it would mean an ugly console switch even in case of normal boot.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#220: FILE: kernel/power/swsusp.c:503:
+		   if we write around 768000 pages, thats ~4GB. */
 		                                    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#220: FILE: kernel/power/swsusp.c:503:
+		/* FIXME: pagedir only has 768 entries. We may overflow it,
+		   if we write around 768000 pages, thats ~4GB. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#220: FILE: kernel/power/swsusp.c:503:
+		   if we write around 768000 pages, thats ~4GB. */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#228: FILE: kernel/power/swsusp.c:543:
+#if 0

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#240: FILE: kernel/power/swsusp.c:1032:
+static int in_suspend __nosavedata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: kernel/power/swsusp.c:1050:
+		int i = 0;
+		for_each_pbe (p, pagedir_nosave)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#258: FILE: kernel/power/swsusp.c:1050:
+		for_each_pbe (p, pagedir_nosave)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#264: FILE: kernel/power/swsusp.c:1056:
+	if (in_suspend == 2) {
+		err = -ENOANO;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#276: FILE: kernel/power/swsusp.c:1068:
+	/* FIXME: we'll probably overwrite pagedir with itself in inconsistent state...
+	 ...no, pagedir is NOSAVE.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#288: FILE: kernel/power/swsusp.c:1080:
+	printk(KERN_CRIT "This should never return\n");

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#292: FILE: usr/swsusp-init

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#292: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#297: FILE: usr/swsusp-init:2:
+#

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: usr/swsusp-init:5:
+/tmp/swsusp /dev/hda1 -r $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#306: FILE: usr/swsusp.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#310: FILE: usr/swsusp.c:1:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#310: FILE: usr/swsusp.c:1:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <Swsusp3>
#312: FILE: usr/swsusp.c:3:
+# Swsusp3 control program

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Copyright>
#314: FILE: usr/swsusp.c:5:
+# Copyright 2005 Pavel Machek <pavel@suse.cz>

CHECK:CAMELCASE: Avoid CamelCase: <Pavel>
#314: FILE: usr/swsusp.c:5:
+# Copyright 2005 Pavel Machek <pavel@suse.cz>

CHECK:CAMELCASE: Avoid CamelCase: <Machek>
#314: FILE: usr/swsusp.c:5:
+# Copyright 2005 Pavel Machek <pavel@suse.cz>

CHECK:CAMELCASE: Avoid CamelCase: <Distribute>
#316: FILE: usr/swsusp.c:7:
+# Distribute under GPLv2

CHECK:CAMELCASE: Avoid CamelCase: <GPLv2>
#316: FILE: usr/swsusp.c:7:
+# Distribute under GPLv2

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp
                                                                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Wall>
#318: FILE: usr/swsusp.c:9:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp; cp -a usr/swsusp-init /tmp

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#335: FILE: usr/swsusp.c:26:
+extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence) __THROW;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#337: FILE: usr/swsusp.c:28:
+typedef long swp_entry_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#342: FILE: usr/swsusp.c:33:
+char forbidden_pages[(0xffffffff / PAGE_SIZE)+1];
                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: usr/swsusp.c:43:
+^Iswp_entry_t swap_address;^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#357: FILE: usr/swsusp.c:48:
+	char data[4096-16];
 	              ^

WARNING:TYPO_SPELLING: 'intial' may be misspelled - perhaps 'initial'?
#366: FILE: usr/swsusp.c:57:
+		fprintf(stderr, "Could not do intial seek to %lx: %m\n", dest);
 		                              ^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'seek', this function's name, in a string
#366: FILE: usr/swsusp.c:57:
+		fprintf(stderr, "Could not do intial seek to %lx: %m\n", dest);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#367: FILE: usr/swsusp.c:58:
+		fprintf(stderr, "lseek64(%d) returned: %lx\n", kmem, (long) lseek64(kmem, dest, SEEK_SET));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#367: FILE: usr/swsusp.c:58:
+		fprintf(stderr, "lseek64(%d) returned: %lx\n", kmem, (long) lseek64(kmem, dest, SEEK_SET));

CHECK:SPACING: No space is necessary after a cast
#382: FILE: usr/swsusp.c:73:
+	seek(pos = (long) r->pagedir);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "w"
#388: FILE: usr/swsusp.c:79:
+		if (w != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#399: FILE: usr/swsusp.c:90:
+		seek(pos = (long) p.next);

CHECK:SPACING: No space is necessary after a cast
#411: FILE: usr/swsusp.c:102:
+	seek(pos = (long) r->pagedir);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w != NULL'
#417: FILE: usr/swsusp.c:108:
+		if ((w != NULL) && !(pos & 0xfff)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "w"
#417: FILE: usr/swsusp.c:108:
+		if ((w != NULL) && !(pos & 0xfff)) {

CHECK:SPACING: No space is necessary after a cast
#426: FILE: usr/swsusp.c:117:
+		seek(pos = (long) p.next);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: usr/swsusp.c:121:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: usr/swsusp.c:124:
+static int write_page(unsigned long addr, swp_entry_t * loc)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: usr/swsusp.c:133:
+		char buf[4096];
+		seek(addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: usr/swsusp.c:156:
+	int error;
+	if (!(i%mod))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#465: FILE: usr/swsusp.c:156:
+	if (!(i%mod))
 	       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#466: FILE: usr/swsusp.c:157:
+		printf( "\b\b\b\b%3d%%", i / mod );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#466: FILE: usr/swsusp.c:157:
+		printf( "\b\b\b\b%3d%%", i / mod );

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->swap_address
#467: FILE: usr/swsusp.c:158:
+	if ((error = write_page(p->address, &(p->swap_address))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#467: FILE: usr/swsusp.c:158:
+	if ((error = write_page(p->address, &(p->swap_address))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#472: FILE: usr/swsusp.c:163:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4096) over __attribute__((aligned(4096)))
#478: FILE: usr/swsusp.c:169:
+} __attribute__((aligned(4096)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#488: FILE: usr/swsusp.c:179:
+	int error = 0;
+	mod = resume.nr_copy_pages / 100;

ERROR:SPACING: space prohibited after that open parenthesis '('
#493: FILE: usr/swsusp.c:184:
+	printf( "Writing data to swap (%d pages)...     ", resume.nr_copy_pages );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#493: FILE: usr/swsusp.c:184:
+	printf( "Writing data to swap (%d pages)...     ", resume.nr_copy_pages );

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#499: FILE: usr/swsusp.c:190:
+unsigned n = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#499: FILE: usr/swsusp.c:190:
+unsigned n = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: usr/swsusp.c:195:
+	int error;
+	if ((error = write_page((unsigned long)pbe, &swsusp_info.pagedir[n++])))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#504: FILE: usr/swsusp.c:195:
+	if ((error = write_page((unsigned long)pbe, &swsusp_info.pagedir[n++])))

ERROR:SPACING: space prohibited after that open parenthesis '('
#518: FILE: usr/swsusp.c:209:
+	printf( "Writing pagedir...");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: usr/swsusp.c:217:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#535: FILE: usr/swsusp.c:226:
+	if ((error = data_write()))

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#536: FILE: usr/swsusp.c:227:
+		goto Done;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#538: FILE: usr/swsusp.c:229:
+	if ((error = write_pagedir()))

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#584: FILE: usr/swsusp.c:275:
+	printf("Snapshotted, have %d pages, pagedir at %lx\n", resume.nr_copy_pages, (long) resume.pagedir);

CHECK:SPACING: No space is necessary after a cast
#584: FILE: usr/swsusp.c:275:
+	printf("Snapshotted, have %d pages, pagedir at %lx\n", resume.nr_copy_pages, (long) resume.pagedir);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#591: FILE: usr/swsusp.c:282:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#593: FILE: usr/swsusp.c:284:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: usr/swsusp.c:307:
+^I} while(forbidden_pages[ret/PAGE_SIZE]);^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#616: FILE: usr/swsusp.c:307:
+	} while(forbidden_pages[ret/PAGE_SIZE]);	
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#616: FILE: usr/swsusp.c:307:
+	} while(forbidden_pages[ret/PAGE_SIZE]);	

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#634: FILE: usr/swsusp.c:325:
+static struct pbe * alloc_pagedir(unsigned nr_pages)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#634: FILE: usr/swsusp.c:325:
+static struct pbe * alloc_pagedir(unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#636: FILE: usr/swsusp.c:327:
+	unsigned num;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_pagedir', this function's name, in a string
#641: FILE: usr/swsusp.c:332:
+	printf("alloc_pagedir(): nr_pages = %d\n", nr_pages);

CHECK:SPACING: No space is necessary after a cast
#642: FILE: usr/swsusp.c:333:
+	resume.pagedir = pblist = (struct pbe *) get_page();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#642: FILE: usr/swsusp.c:333:
+	resume.pagedir = pblist = (struct pbe *) get_page();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: usr/swsusp.c:335:
+        ^I^Inr_pages -= PBES_PER_PAGE) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#644: FILE: usr/swsusp.c:335:
+        ^I^Inr_pages -= PBES_PER_PAGE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: usr/swsusp.c:335:
+        ^I^Inr_pages -= PBES_PER_PAGE) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#645: FILE: usr/swsusp.c:336:
+        		nr_pages -= PBES_PER_PAGE) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#646: FILE: usr/swsusp.c:337:
+		for (i=0; i<PBES_PER_PAGE-1; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#646: FILE: usr/swsusp.c:337:
+		for (i=0; i<PBES_PER_PAGE-1; i++)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#646: FILE: usr/swsusp.c:337:
+		for (i=0; i<PBES_PER_PAGE-1; i++)
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#647: FILE: usr/swsusp.c:338:
+			buf[i].next = &pblist[i+1];
 			                       ^

CHECK:SPACING: No space is necessary after a cast
#648: FILE: usr/swsusp.c:339:
+		buf[PBES_PER_PAGE-1].next = (struct pbe *) get_page();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#648: FILE: usr/swsusp.c:339:
+		buf[PBES_PER_PAGE-1].next = (struct pbe *) get_page();
 		                 ^

CHECK:SPACING: No space is necessary after a cast
#650: FILE: usr/swsusp.c:341:
+		seek((long) pblist);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#652: FILE: usr/swsusp.c:343:
+		pblist = buf[PBES_PER_PAGE-1].next;
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#655: FILE: usr/swsusp.c:346:
+	for (i=0; i<nr_pages-1; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#655: FILE: usr/swsusp.c:346:
+	for (i=0; i<nr_pages-1; i++)
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#655: FILE: usr/swsusp.c:346:
+	for (i=0; i<nr_pages-1; i++)
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#656: FILE: usr/swsusp.c:347:
+		buf[i].next = &pblist[i+1];
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#657: FILE: usr/swsusp.c:348:
+	buf[nr_pages-1].next = 0;
 	            ^

CHECK:SPACING: No space is necessary after a cast
#659: FILE: usr/swsusp.c:350:
+	seek((long) pblist);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#664: FILE: usr/swsusp.c:355:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#666: FILE: usr/swsusp.c:357:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#676: FILE: usr/swsusp.c:367:
+	unsigned long offset = swsusp_info.pagedir[pos/PBES_PER_PAGE];
 	                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#685: FILE: usr/swsusp.c:376:
+	for (i=0; i<PBES_PER_PAGE; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#685: FILE: usr/swsusp.c:376:
+	for (i=0; i<PBES_PER_PAGE; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#695: FILE: usr/swsusp.c:386:
+
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#747: FILE: usr/swsusp.c:438:
+	printf("Got image, %d pages, signature [%s]\n", resume.nr_copy_pages, swsusp_info.signature);

CHECK:SPACING: No space is necessary after a cast
#752: FILE: usr/swsusp.c:443:
+	walk_pages_chain(&resume, (void *) read_pagedir_one);

CHECK:SPACING: No space is necessary after a cast
#759: FILE: usr/swsusp.c:450:
+	walk_pages_chain(&resume, (void *) read_pagedir_one);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: usr/swsusp.c:460:
+	printf("swsusp: Reading image data (%d pages):     ",
+			swsusp_info.nr_copy_pages);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#778: FILE: usr/swsusp.c:469:
+	if (ioctl(kmem, IOCTL_ATOMIC_RESTORE, &resume)) {
+		fprintf(stderr, "Could not restore system: %m\n");
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#782: FILE: usr/swsusp.c:473:
+	/* Ouch, at this point we'll appear in ATOMIC_SNAPSHOT syscall, if
+	   things went ok... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#782: FILE: usr/swsusp.c:473:
+	   things went ok... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#788: FILE: usr/swsusp.c:479:
+/*
+#define  LINUX_REBOOT_CMD_RESTART        0x01234567

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#818: FILE: usr/swsusp.c:509:
+	while (argv[2]) {
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134375.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 44 warnings, 67 checks, 757 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134375.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
