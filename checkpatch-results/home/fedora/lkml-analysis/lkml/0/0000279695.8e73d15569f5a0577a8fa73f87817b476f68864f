CHECK:BRACES: Unbalanced braces around else statement
#96: FILE: arch/ppc64/kernel/irq.c:565:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#127: FILE: arch/ppc64/kernel/irq.c:1005:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#206: FILE: arch/ppc64/kernel/process.c:470:
+	stack_page = (unsigned long) hardirq_ctx[task_cpu(p)];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#208: FILE: arch/ppc64/kernel/process.c:472:
+	if (sp >= stack_page + sizeof(struct thread_struct)
+	    && sp <= stack_page + THREAD_SIZE - nbytes)

CHECK:SPACING: No space is necessary after a cast
#211: FILE: arch/ppc64/kernel/process.c:475:
+	stack_page = (unsigned long) softirq_ctx[task_cpu(p)];

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#213: FILE: arch/ppc64/kernel/process.c:477:
+	if (sp >= stack_page + sizeof(struct thread_struct)
+	    && sp <= stack_page + THREAD_SIZE - nbytes)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#233: FILE: arch/ppc64/kernel/setup.c:581:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:INLINE: plain inline is preferred over __inline__
#263: FILE: include/asm-ppc64/bitops.h:157:
+static __inline__ void set_bits(unsigned long mask, unsigned long *addr)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#267: FILE: include/asm-ppc64/bitops.h:161:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#268: FILE: include/asm-ppc64/bitops.h:162:
+"1:	ldarx	%0,0,%3		# set_bit\n\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#296: FILE: include/asm-ppc64/irq.h:81:
+int handle_irq_event(int, struct pt_regs *, struct irqaction *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#296: FILE: include/asm-ppc64/irq.h:81:
+int handle_irq_event(int, struct pt_regs *, struct irqaction *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irqaction *' should also have an identifier name
#296: FILE: include/asm-ppc64/irq.h:81:
+int handle_irq_event(int, struct pt_regs *, struct irqaction *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/asm-ppc64/irq.h:90:
+extern void irq_ctx_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/asm-ppc64/irq.h:91:
+extern void call_do_softirq(struct thread_info *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: include/asm-ppc64/irq.h:92:
+extern int call_handle_irq_event(int irq, struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: include/asm-ppc64/irq.h:93:
+extern int call_handle_irq_event(int irq, struct pt_regs *regs,
+			struct irqaction *action, struct thread_info *tp);

ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAS_DO_SOFTIRQ' is wrong - use Kconfig variables or standard guards instead
#310: FILE: include/asm-ppc64/irq.h:95:
+#define __ARCH_HAS_DO_SOFTIRQ

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000279695.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 7 warnings, 10 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000279695.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
