ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: arch/arm/kernel/dma.c:77:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: arch/arm/kernel/dma.c:149:
+ ^Idma->sg = &dma->buf;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#67: FILE: arch/arm/kernel/dma.c:149:
+ ^Idma->sg = &dma->buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/arm/kernel/dma.c:149:
+ ^Idma->sg = &dma->buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: arch/arm/kernel/dma.c:150:
+ ^Idma->sgcount = 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: arch/arm/kernel/dma.c:150:
+ ^Idma->sgcount = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: arch/arm/kernel/dma.c:150:
+ ^Idma->sgcount = 1;$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#94: FILE: drivers/amba/Kconfig:33:
+config ARM_AMBA_DMA
+	bool "AMBA DMA support" if(ARCH_VERSATILE_PB || MACH_VERSATILE_AB)
+	depends on ARM_AMBA
+	select ISA_DMA_API
+	---help---
+	 Select to build ARM AMBA DMA support into the kernel.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#134: FILE: drivers/amba/bus.c:249:
called

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: space required before the open brace '{'
#136: FILE: drivers/amba/bus.c:251:
+		if(dev->board_ops){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: drivers/amba/bus.c:251:
+		if(dev->board_ops){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#136: FILE: drivers/amba/bus.c:251:
+		if(dev->board_ops){
+			amba_set_ops(dev->board_ops);
+		} 

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: drivers/amba/bus.c:253:
+^I^I} $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#159: FILE: drivers/amba/bus.c:344:
+typedef struct _query_data {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: drivers/amba/bus.c:345:
+	struct amba_device * ad;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: drivers/amba/bus.c:346:
+	char * name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/amba/bus.c:349:
+static int match_name(struct device * dev, void * data){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/amba/bus.c:349:
+static int match_name(struct device * dev, void * data){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#164: FILE: drivers/amba/bus.c:349:
+static int match_name(struct device * dev, void * data){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#164: FILE: drivers/amba/bus.c:349:
+static int match_name(struct device * dev, void * data){

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#165: FILE: drivers/amba/bus.c:350:
+	query_data * d = (query_data*)data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: drivers/amba/bus.c:350:
+	query_data * d = (query_data*)data;

ERROR:SPACING: space required before the open brace '{'
#168: FILE: drivers/amba/bus.c:353:
+	if(dev && data){

ERROR:SPACING: space required before the open parenthesis '('
#168: FILE: drivers/amba/bus.c:353:
+	if(dev && data){

ERROR:SPACING: space required before the open brace '{'
#169: FILE: drivers/amba/bus.c:354:
+		if(dev->driver){

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: drivers/amba/bus.c:354:
+		if(dev->driver){

ERROR:SPACING: space required before the open brace '{'
#170: FILE: drivers/amba/bus.c:355:
+			if(dev->driver->name){

ERROR:SPACING: space required before the open parenthesis '('
#170: FILE: drivers/amba/bus.c:355:
+			if(dev->driver->name){

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#171: FILE: drivers/amba/bus.c:356:
+				if(0 == strncmp(dev->driver->name, (const

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required before the open parenthesis '('
#171: FILE: drivers/amba/bus.c:356:
+				if(0 == strncmp(dev->driver->name, (const

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#178: FILE: drivers/amba/bus.c:362:
+				printk(KERN_ERR "amba.c::match_name() - no

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: drivers/amba/bus.c:374:
+struct amba_device * amba_get_device_with_name(char * name){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: drivers/amba/bus.c:374:
+struct amba_device * amba_get_device_with_name(char * name){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#193: FILE: drivers/amba/bus.c:374:
+struct amba_device * amba_get_device_with_name(char * name){

ERROR:SPACING: space required before the open brace '{'
#193: FILE: drivers/amba/bus.c:374:
+struct amba_device * amba_get_device_with_name(char * name){

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#194: FILE: drivers/amba/bus.c:375:
+struct amba_device * amba_get_device_with_name(char * name){
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#216: FILE: drivers/amba/dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#217: FILE: drivers/amba/dma.c:2:
+ * drivers/amba/dma.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#238: FILE: drivers/amba/dma.c:23:
+#include <asm/io.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#245: FILE: drivers/amba/dma.c:30:
+struct dma_ops * board_ops = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: drivers/amba/dma.c:30:
+struct dma_ops * board_ops = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: drivers/amba/dma.c:32:
+static dma_t * chans;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: drivers/amba/dma.c:34:
+void amba_set_ops(struct dma_ops * ops){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#249: FILE: drivers/amba/dma.c:34:
+void amba_set_ops(struct dma_ops * ops){

ERROR:SPACING: space required before the open brace '{'
#249: FILE: drivers/amba/dma.c:34:
+void amba_set_ops(struct dma_ops * ops){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#254: FILE: drivers/amba/dma.c:39:
+void __init arch_dma_init(dma_t *dma){

ERROR:SPACING: space required before the open brace '{'
#254: FILE: drivers/amba/dma.c:39:
+void __init arch_dma_init(dma_t *dma){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: drivers/amba/dma.c:43:
+dma_t * amba_get_chans(void){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#258: FILE: drivers/amba/dma.c:43:
+dma_t * amba_get_chans(void){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: drivers/amba/dma.c:52:
+static int	amba_request(dmach_t chan_num, dma_t * chan_data)

ERROR:SPACING: space required before the open brace '{'
#271: FILE: drivers/amba/dma.c:56:
+	if((board_ops) && (board_ops->request)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'board_ops->request'
#271: FILE: drivers/amba/dma.c:56:
+	if((board_ops) && (board_ops->request)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#271: FILE: drivers/amba/dma.c:56:
+	if((board_ops) && (board_ops->request)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#271: FILE: drivers/amba/dma.c:56:
+	if((board_ops) && (board_ops->request)){
+		status = board_ops->request(chan_num, chan_data);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: drivers/amba/dma.c:63:
+static void	amba_free(dmach_t chan_num, dma_t * chan_data)

ERROR:SPACING: space required before the open brace '{'
#280: FILE: drivers/amba/dma.c:65:
+	if((board_ops) && (board_ops->free)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'board_ops->free'
#280: FILE: drivers/amba/dma.c:65:
+	if((board_ops) && (board_ops->free)){

ERROR:SPACING: space required before the open parenthesis '('
#280: FILE: drivers/amba/dma.c:65:
+	if((board_ops) && (board_ops->free)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#280: FILE: drivers/amba/dma.c:65:
+	if((board_ops) && (board_ops->free)){
+		board_ops->free(chan_num, chan_data);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: drivers/amba/dma.c:70:
+static void	amba_enable(dmach_t chan_num, dma_t * chan_data)

ERROR:SPACING: space required before the open brace '{'
#287: FILE: drivers/amba/dma.c:72:
+	if((board_ops) && (board_ops->enable)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'board_ops->enable'
#287: FILE: drivers/amba/dma.c:72:
+	if((board_ops) && (board_ops->enable)){

ERROR:SPACING: space required before the open parenthesis '('
#287: FILE: drivers/amba/dma.c:72:
+	if((board_ops) && (board_ops->enable)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#287: FILE: drivers/amba/dma.c:72:
+	if((board_ops) && (board_ops->enable)){
+		board_ops->enable(chan_num, chan_data);
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: drivers/amba/dma.c:77:
+static void ^Iamba_disable(dmach_t chan_num, dma_t * chan_data)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#292: FILE: drivers/amba/dma.c:77:
+static void 	amba_disable(dmach_t chan_num, dma_t * chan_data)

ERROR:SPACING: space required before the open brace '{'
#294: FILE: drivers/amba/dma.c:79:
+	if((board_ops) && (board_ops->disable)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'board_ops->disable'
#294: FILE: drivers/amba/dma.c:79:
+	if((board_ops) && (board_ops->disable)){

ERROR:SPACING: space required before the open parenthesis '('
#294: FILE: drivers/amba/dma.c:79:
+	if((board_ops) && (board_ops->disable)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#294: FILE: drivers/amba/dma.c:79:
+	if((board_ops) && (board_ops->disable)){
+		board_ops->disable(chan_num, chan_data);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: drivers/amba/dma.c:85:
+static int	amba_residue(dmach_t chan_num, dma_t * chan_data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: drivers/amba/dma.c:88:
+	int res = 0;
+	if((board_ops) && (board_ops->residue)){

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#303: FILE: drivers/amba/dma.c:88:
+	if((board_ops) && (board_ops->residue)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'board_ops->residue'
#303: FILE: drivers/amba/dma.c:88:
+	if((board_ops) && (board_ops->residue)){

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: drivers/amba/dma.c:88:
+	if((board_ops) && (board_ops->residue)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#303: FILE: drivers/amba/dma.c:88:
+	if((board_ops) && (board_ops->residue)){
+		res = board_ops->residue(chan_num, chan_data);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: drivers/amba/dma.c:94:
+static int	amba_setspeed(dmach_t chan_num, dma_t * chan_data, int

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: drivers/amba/dma.c:97:
+	int new_speed = 0;
+	if((board_ops) && (board_ops->setspeed)){

ERROR:SPACING: space required before the open brace '{'
#313: FILE: drivers/amba/dma.c:97:
+	if((board_ops) && (board_ops->setspeed)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'board_ops->setspeed'
#313: FILE: drivers/amba/dma.c:97:
+	if((board_ops) && (board_ops->setspeed)){

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: drivers/amba/dma.c:97:
+	if((board_ops) && (board_ops->setspeed)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#313: FILE: drivers/amba/dma.c:97:
+	if((board_ops) && (board_ops->setspeed)){
+		new_speed = board_ops->setspeed(chan_num, chan_data, speed);
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: drivers/amba/dma.c:108:
+^Iamba_free, ^I/* optional */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: drivers/amba/dma.c:109:
+^Iamba_enable, ^I/* mandatory */$

ERROR:SPACING: space required before the open brace '{'
#339: FILE: drivers/amba/dma.c:123:
+	for(i = 0; i < MAX_DMA_CHANNELS; i++){

ERROR:SPACING: space required before the open parenthesis '('
#339: FILE: drivers/amba/dma.c:123:
+	for(i = 0; i < MAX_DMA_CHANNELS; i++){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: drivers/amba/dma.c:141:
+
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#365: FILE: include/asm-arm/arch-versatile/dma.h:18:
  * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#366: FILE: include/asm-arm/arch-versatile/dma.h:19:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: include/asm-arm/mach/dma.h:28:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: include/asm-arm/mach/dma.h:29:
+^I * Extra operations required by some particular AMBA DMA controller $

ERROR:POINTER_LOCATION: "foo    * bar" should be "foo    *bar"
#395: FILE: include/asm-arm/mach/dma.h:32:
+	void    * extra_ops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#431: FILE: include/linux/amba/bus.h:29:
+^Istruct dma_ops * ^Iboard_ops;$

ERROR:POINTER_LOCATION: "foo * 	bar" should be "foo *bar"
#431: FILE: include/linux/amba/bus.h:29:
+	struct dma_ops * 	board_ops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: include/linux/amba/bus.h:30:
+^Istruct dma_ops * ^Idmac_ops;$

ERROR:POINTER_LOCATION: "foo * 	bar" should be "foo *bar"
#432: FILE: include/linux/amba/bus.h:30:
+	struct dma_ops * 	dmac_ops;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#433: FILE: include/linux/amba/bus.h:31:
+	dma_t *			chans;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: include/linux/amba/bus.h:50:
+^Istruct dma_ops * ^Idmac_ops;$

ERROR:POINTER_LOCATION: "foo * 	bar" should be "foo *bar"
#444: FILE: include/linux/amba/bus.h:50:
+	struct dma_ops * 	dmac_ops;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#454: FILE: include/linux/amba/bus.h:66:
+struct amba_device * amba_get_device_with_name(char * name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#454: FILE: include/linux/amba/bus.h:66:
+struct amba_device * amba_get_device_with_name(char * name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: include/linux/amba/bus.h:74:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: include/linux/amba/bus.h:75:
+ * AMBA ARM PrimeCell peripheral ids $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#490: FILE: include/linux/amba/dma.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#491: FILE: include/linux/amba/dma.h:2:
+ *  linux/include/linux/amba/dma.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#512: FILE: include/linux/amba/dma.h:22:
+	int  (*irq_ignore)(dmach_t chan);	/* Requesting device should
+	void (*irq_pre)   (dmach_t chan);	/* Any necessary DMA

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#514: FILE: include/linux/amba/dma.h:23:
+	void (*irq_pre)   (dmach_t chan);	/* Any necessary DMA
+	void (*irq_post)  (dmach_t chan);	/* Clear the interrupt and

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#516: FILE: include/linux/amba/dma.h:24:
+	void (*irq_post)  (dmach_t chan);	/* Clear the interrupt and
+	unsigned int packet_size;		/* Size, in bytes, of each

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: include/linux/amba/dma.h:25:
+^Ivoid * dmac_data; ^I^I^I/* DMA controller specific$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#518: FILE: include/linux/amba/dma.h:25:
+	unsigned int packet_size;		/* Size, in bytes, of each
+	void * dmac_data; 			/* DMA controller specific

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#520: FILE: include/linux/amba/dma.h:26:
+	void * dmac_data; 			/* DMA controller specific
+};

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: include/linux/amba/dma.h:35:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000023497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 69 errors, 34 warnings, 9 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000023497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
