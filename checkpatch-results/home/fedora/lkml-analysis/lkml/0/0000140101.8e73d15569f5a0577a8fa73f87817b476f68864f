WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
The __GFP_EASYRCLM and __GFP_KERNRCLM bits are used to enumerate three allocation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/mm.h:536:
+extern int get_pageblock_type(struct zone *zone, struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#72: FILE: include/linux/mmzone.h:24:
+#define PAGES_PER_MAXORDER (1 << (MAX_ORDER-1))
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/mmzone.h:612:
+static inline unsigned long *pfn_to_usemap(struct zone *zone,
+						unsigned long pfn)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#135: FILE: include/linux/mmzone.h:619:
+	pfn &= (PAGES_PER_SECTION-1);
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#136: FILE: include/linux/mmzone.h:620:
+	return (pfn >> (MAX_ORDER-1)) * BITS_PER_RCLM_TYPE;
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: include/linux/mmzone.h:661:
+static inline unsigned long *pfn_to_usemap(struct zone *zone,
+						unsigned long pfn)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#155: FILE: include/linux/mmzone.h:669:
+	return (pfn >> (MAX_ORDER-1)) * BITS_PER_RCLM_TYPE;
 	                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#190: FILE: mm/page_alloc.c:95:
+		printk(KERN_WARNING "Multiple RCLM GFP flags specified\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/page_alloc.c:116:
+static inline void copy_bits(unsigned long *dstaddr,
+		unsigned long *srcaddr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: mm/page_alloc.c:127:
+		int bit = test_bit(sindex_src + nr, srcaddr);
+		if (bit)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: mm/page_alloc.c:151:
+static inline void set_pageblock_type(struct zone *zone, struct page *page,
+					int type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: mm/page_alloc.c:595:
+static struct page *__rmqueue(struct zone *zone, unsigned int order,
+					int alloctype)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#282: FILE: mm/page_alloc.c:616:
+		if (current_order == MAX_ORDER-1)
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#343: FILE: mm/page_alloc.c:1979:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#343: FILE: mm/page_alloc.c:1979:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#343: FILE: mm/page_alloc.c:1979:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#343: FILE: mm/page_alloc.c:1979:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#343: FILE: mm/page_alloc.c:1979:
+#define roundup(x, y) ((((x)+((y)-1))/(y))*(y))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#355: FILE: mm/page_alloc.c:1991:
+	usemapsize = usemapsize >> (MAX_ORDER-1);
 	                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: mm/page_alloc.c:2002:
+	unsigned long usemapsize = usemap_size(zonesize);
+	zone->free_area_usemap = alloc_bootmem_node(pgdat, usemapsize);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#370: FILE: mm/page_alloc.c:2006:
+static void inline setup_usemap(struct pglist_data *pgdat,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#370: FILE: mm/page_alloc.c:2006:
+static void inline setup_usemap(struct pglist_data *pgdat,
+				struct zone *zone, unsigned long zonesize) {}

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140101.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 17 checks, 310 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140101.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
