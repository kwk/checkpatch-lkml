Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -urN fat_utf8_oops-2.5.18/fs/fat/inode.c fat_parse_opt-2.5.18/fs/fat/inode.c

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#38: FILE: fs/fat/inode.c:206:
+	printk(KERN_NOTICE "FAT: Invalid %s option: %s\n", option, value);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#45: FILE: fs/fat/inode.c:213:
+		printk(KERN_NOTICE "FAT: the %s option needs an argument\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#56: FILE: fs/fat/inode.c:224:
+	char *endp;
+	if (want_value(value, option))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#58: FILE: fs/fat/inode.c:226:
+	*number = simple_strtoul(value, &endp, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#60: FILE: fs/fat/inode.c:228:
+		printk(KERN_NOTICE "FAT: Invalid %s argument: %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v"
#79: FILE: fs/fat/inode.c:247:
+	if (v == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#87: FILE: fs/fat/inode.c:254:
+	if (!strcmp(v, "1") || !strcmp(v, "yes") || !strcmp(v, "true"))
[...]
+	else if (!strcmp(v, "0") || !strcmp(v, "no") || !strcmp(v, "false"))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#91: FILE: fs/fat/inode.c:258:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#121: FILE: fs/fat/inode.c:279:
+		opts->shortname = VFAT_SFN_DISPLAY_LOWER|VFAT_SFN_CREATE_WIN95;
 		                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#124: FILE: fs/fat/inode.c:282:
+	opts->quiet = opts->showexec = opts->sys_immutable = opts->dotsOK =  0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <dotsOK>
#124: FILE: fs/fat/inode.c:282:
+	opts->quiet = opts->showexec = opts->sys_immutable = opts->dotsOK =  0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#126: FILE: fs/fat/inode.c:284:
+	opts->utf8 = opts->unicode_xlate = opts->posixfs = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#143: FILE: fs/fat/inode.c:294:
+		if ((value = strchr(this_char, '=')) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#149: FILE: fs/fat/inode.c:297:
+		if (!strcmp(this_char, "debug"))
[...]
+		else if (!strcmp(this_char, "uid")) {
[...]
+		else if (!strcmp(this_char, "gid")) {
[...]
+		else if (!strcmp(this_char, "umask")) {
[...]
+		else if (!strcmp(this_char, "codepage")) {
[...]
+		else if (!strcmp(this_char, "check")) {
[...]
-			else ret = 0;
[...]
-			else if (!strcmp(value,"text"))
[...]
 				opts->conversion = 't';
[...]
+			else if (!strcmp(value, "auto"))
[...]
-			else ret = 0;
[...]
-		}
[...]
-		else if (!strcmp(this_char,"showexec")) {
[...]
 			opts->showexec = 1;
[...]
-		}
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#156: FILE: fs/fat/inode.c:304:
+		}
+		else if (!strcmp(this_char, "gid")) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#161: FILE: fs/fat/inode.c:309:
+		}
+		else if (!strcmp(this_char, "umask")) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#164: FILE: fs/fat/inode.c:312:
+			opts->fs_umask = val & S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#166: FILE: fs/fat/inode.c:314:
+		}
+		else if (!strcmp(this_char, "codepage")) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#171: FILE: fs/fat/inode.c:319:
+		}
+		else if (!strcmp(this_char, "check")) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#191: FILE: fs/fat/inode.c:333:
 		}
+		else if (!strcmp(this_char, "conv")) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#219: FILE: fs/fat/inode.c:347:
 		}
+		else if (!strcmp(this_char, "quiet"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: fs/fat/inode.c:351:
+		else if (!strcmp(this_char,"sys_immutable"))
 		                          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#248: FILE: fs/fat/inode.c:354:
+			if (!is_vfat)
[...]
 			else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#264: FILE: fs/fat/inode.c:362:
 		}
+		else if (!strcmp(this_char, "fat")) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#265: FILE: fs/fat/inode.c:363:
+			printk(KERN_NOTICE "FAT: fat option is obsolete, "

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#274: FILE: fs/fat/inode.c:366:
 		}
+		else if (!strcmp(this_char, "blocksize")) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#275: FILE: fs/fat/inode.c:367:
+			printk(KERN_NOTICE "FAT: blocksize option is obsolete, "

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#316: FILE: fs/fat/inode.c:370:
 		}
+		else if (!strcmp(this_char, "cvf_format")) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#322: FILE: fs/fat/inode.c:376:
+		}
+		else if (!strcmp(this_char, "cvf_options")) {

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#333: FILE: fs/fat/inode.c:383:
+		/* msdos specific */
 		   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "opts->iocharset"
#348: FILE: fs/fat/inode.c:398:
+			if (opts->iocharset != NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#350: FILE: fs/fat/inode.c:400:
+			opts->iocharset = kmalloc(strlen(value)+1, GFP_KERNEL);
 			                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opts->iocharset"
#351: FILE: fs/fat/inode.c:401:
+			if (opts->iocharset == NULL)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#355: FILE: fs/fat/inode.c:405:
+		}
+		else if (is_vfat && !strcmp(this_char, "utf8")) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: fs/fat/inode.c:417:
+		} else if (is_vfat && !strcmp(this_char,"nonumtail")) {
 		                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#389: FILE: fs/fat/inode.c:439:
+			printk(KERN_NOTICE

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: fs/fat/inode.c:450:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#462: FILE: fs/fat/inode.c:1011:
+		printk(KERN_INFO "VFS: Can't find a valid FAT filesystem"

WARNING:SPLIT_STRING: quoted string split across lines
#463: FILE: fs/fat/inode.c:1012:
+		printk(KERN_INFO "VFS: Can't find a valid FAT filesystem"
+		       " on dev %s.\n", sb->s_id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 13 warnings, 12 checks, 567 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
