WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
> > O'Quin, selectively grants realtime capabilities to specific user groups

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#44: 
Signed-Off-By: Lee Revell <rlrevell@joe-job.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#133: FILE: security/realtime.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: security/realtime.c:35:
+MODULE_INFO(vermagic,VERMAGIC_STRING);
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#170: FILE: security/realtime.c:38:
+static int any = 0;			/* if TRUE, any process is realtime */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#182: FILE: security/realtime.c:50:
+static int allcaps = 0;			/* enable all capabilities */

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#201: FILE: security/realtime.c:69:
+	 *  groups, we grant realtime capabilites.
 	                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#205: FILE: security/realtime.c:73:
+	if (any || (gid != -1)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gid != bprm->e_gid'
#209: FILE: security/realtime.c:77:
+		if ((gid != -1) &&
+		    (gid != bprm->e_gid) &&
+		    (gid != current->gid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gid != current->gid'
#209: FILE: security/realtime.c:77:
+		if ((gid != -1) &&
+		    (gid != bprm->e_gid) &&
+		    (gid != current->gid)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#213: FILE: security/realtime.c:81:
+			int i;
+			rt_ok = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: security/realtime.c:86:
+ ^I^I^I^I^Irt_ok = 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: security/realtime.c:86:
+ ^I^I^I^I^Irt_ok = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: security/realtime.c:86:
+ ^I^I^I^I^Irt_ok = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: security/realtime.c:87:
+ ^I^I^I^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: security/realtime.c:87:
+ ^I^I^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: security/realtime.c:87:
+ ^I^I^I^I^Ibreak;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: security/realtime.c:88:
+ ^I^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: security/realtime.c:88:
+ ^I^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: security/realtime.c:88:
+ ^I^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: security/realtime.c:89:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: security/realtime.c:89:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: security/realtime.c:89:
+ ^I^I^I}$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: security/realtime.c:116:
+		cap_set_full (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#249: FILE: security/realtime.c:117:
+		cap_set_full (bprm->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: security/realtime.c:120:
+		cap_set_full (bprm->cap_effective);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#279: FILE: security/realtime.c:147:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#284: FILE: security/realtime.c:152:
+	if (register_security(&capability_ops)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#287: FILE: security/realtime.c:155:
+			printk(KERN_INFO RT_ERR "Failure registering "

WARNING:SPLIT_STRING: quoted string split across lines
#288: FILE: security/realtime.c:156:
+			printk(KERN_INFO RT_ERR "Failure registering "
+			       "capabilities with primary security module.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#289: FILE: security/realtime.c:157:
+			printk(KERN_INFO RT_ERR "Is kernel configured "

WARNING:SPLIT_STRING: quoted string split across lines
#290: FILE: security/realtime.c:158:
+			printk(KERN_INFO RT_ERR "Is kernel configured "
+			       "with CONFIG_SECURITY_CAPABILITIES=m?\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#299: FILE: security/realtime.c:167:
+		printk(KERN_INFO RT_LSM "enabling all capabilities\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#303: FILE: security/realtime.c:171:
+		printk(KERN_INFO RT_LSM

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#306: FILE: security/realtime.c:174:
+		printk(KERN_INFO RT_LSM

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#309: FILE: security/realtime.c:177:
+		printk(KERN_INFO RT_LSM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: security/realtime.c:179:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#322: FILE: security/realtime.c:190:
+			printk(KERN_INFO RT_ERR "Failure unregistering "

WARNING:SPLIT_STRING: quoted string split across lines
#323: FILE: security/realtime.c:191:
+			printk(KERN_INFO RT_ERR "Failure unregistering "
+				"capabilities with primary module.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#326: FILE: security/realtime.c:194:
+		printk(KERN_INFO RT_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#329: FILE: security/realtime.c:197:
+	printk(KERN_INFO "Realtime Capability LSM exiting\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250284.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 28 warnings, 5 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250284.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
