WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
operations are separated to to the input module. This includes handling effect

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#25: 
operations are separated to to the input module. This includes handling effect

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#63: FILE: drivers/input/Kconfig:27:
+config INPUT_FF_EFFECTS
+	bool "Force feedback effects"
+	help
+	  Say Y here if you want to be able to play force feedback effects.
+
 comment "Userland interfaces"
 

Kconfig symbols should have a help text which fully describes
it.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#95: FILE: include/linux/input.h:870:
+	struct mutex ff_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#107: FILE: include/linux/input.h:1010:
+	/* In case of devices with effect memory, upload() is called with the
+	   effect to be uploaded into the device. old is the effect this

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#112: FILE: include/linux/input.h:1015:
+	   called in atomic context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#139: FILE: include/linux/input.h:1042:
+	/* flags has the same values as ffbit, but the capabilities declared
+	   here are really implemented by the driver, not by conversion etc */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#139: FILE: include/linux/input.h:1042:
+	   here are really implemented by the driver, not by conversion etc */

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#155: FILE: include/linux/input.h:1058:
+static inline int input_ff_register(struct input_dev *dev, struct ff_driver *driver) { return -EPERM; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#156: FILE: include/linux/input.h:1059:
+static inline int input_ff_upload(struct input_dev *dev, struct ff_effect *effect, struct file *file) { return -EINVAL; }

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#157: FILE: include/linux/input.h:1060:
+static inline int input_ff_erase(struct input_dev *dev, int effect_id, struct file *file) { return -EINVAL; }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: include/linux/input.h:1063:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: drivers/input/input-core.c:739:
+		struct ff_device *ff = dev->ff;
+		clear_bit(EV_FF, dev->evbit);

CHECK:SPACING: No space is necessary after a cast
#249: FILE: drivers/input/evdev.c:473:
+			return input_ff_erase(dev, (int)(unsigned long) p,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: drivers/input/input-ff.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#277: FILE: drivers/input/input-ff.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#278: FILE: drivers/input/input-ff.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#299: FILE: drivers/input/input-ff.c:41:
+EXPORT_SYMBOL_GPL(input_ff_allocate);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#300: FILE: drivers/input/input-ff.c:42:
+EXPORT_SYMBOL_GPL(input_ff_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#301: FILE: drivers/input/input-ff.c:43:
+EXPORT_SYMBOL_GPL(input_ff_upload);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#302: FILE: drivers/input/input-ff.c:44:
+EXPORT_SYMBOL_GPL(input_ff_erase);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#326: FILE: drivers/input/input-ff.c:68:
+	if (effect_id >= dev->ff_effects_max || effect_id < 0
+	    || !test_bit(FF_EFFECT_USED, ff->effects[effect_id].flags))

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: drivers/input/input-ff.c:89:
+	unsigned long fade_start;
+	if (!envelope)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#351: FILE: drivers/input/input-ff.c:93:
+	if (envelope->attack_length
+	    && time_after(effect->play_at +

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: drivers/input/input-ff.c:130:
+	unsigned long next_time = 0;
+	debug("calculating next timer");

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: drivers/input/input-ff.c:137:
+			if (test_bit(FF_EFFECT_PLAYING, ff->effects[i].flags)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#396: FILE: drivers/input/input-ff.c:138:
+				event_time = ff->effects[i].stop_at = jiffies;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: drivers/input/input-ff.c:140:
+			} else

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i].effect.u.periodic.envelope'
#408: FILE: drivers/input/input-ff.c:150:
+					    &ff->effects[i].effect.u.periodic.
+					    envelope;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i].effect.u.constant.envelope'
#413: FILE: drivers/input/input-ff.c:155:
+					    &ff->effects[i].effect.u.constant.
+					    envelope;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#420: FILE: drivers/input/input-ff.c:162:
+				if (!event_set
+				    && ff->effects[i].effect.replay.length) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#435: FILE: drivers/input/input-ff.c:177:
+		if (events == 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#437: FILE: drivers/input/input-ff.c:179:
+		else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#475: FILE: drivers/input/input-ff.c:217:
+	if (envelope->attack_length
+	    && time_after(effect->play_at +

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#486: FILE: drivers/input/input-ff.c:228:
+	} else if (envelope->fade_length && effect->effect.replay.length
+		   && time_after(current_time,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#489: FILE: drivers/input/input-ff.c:231:
+				 msecs_to_jiffies(envelope->fade_length))
+		   && time_after(effect->stop_at, current_time)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#523: FILE: drivers/input/input-ff.c:265:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#530: FILE: drivers/input/input-ff.c:272:
+	printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'input_ff_emu_effect_type', this function's name, in a string
#531: FILE: drivers/input/input-ff.c:273:
+	       "input-ff: invalid type in input_ff_emu_effect_type()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: drivers/input/input-ff.c:288:
+	int c;
+	if (!a)

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: drivers/input/input-ff.c:302:
+	int c;
+	c = input_ff_safe_sum(a, b, 0x7f);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#595: FILE: drivers/input/input-ff.c:337:
+	printk(KERN_ERR

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: drivers/input/input-ff.c:356:
+	fixp_t level;
+	switch (new->effect.type) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#627: FILE: drivers/input/input-ff.c:369:
+		/* If in future any driver wants something else than
+		   x and y in s8, this should be changed to something more generic */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#627: FILE: drivers/input/input-ff.c:369:
+		   x and y in s8, this should be changed to something more generic */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#663: FILE: drivers/input/input-ff.c:405:
+	printk(KERN_ERR "input-ff: invalid type in input_ff_sum_effect()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'input_ff_sum_effect', this function's name, in a string
#663: FILE: drivers/input/input-ff.c:405:
+	printk(KERN_ERR "input-ff: invalid type in input_ff_sum_effect()\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#693: FILE: drivers/input/input-ff.c:435:
+			printk(KERN_ERR

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#695: FILE: drivers/input/input-ff.c:437:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#701: FILE: drivers/input/input-ff.c:443:
+		for (i = 0; i < dev->ff_effects_max; i++) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i]'
#713: FILE: drivers/input/input-ff.c:455:
+								     ff->
+								     effects[i].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'effects[i].effect'
#714: FILE: drivers/input/input-ff.c:456:
+								     effects[i].
+								     effect.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'effect.type'
#715: FILE: drivers/input/input-ff.c:457:
+								     effect.
+								     type);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i].effect.type'
#724: FILE: drivers/input/input-ff.c:466:
+							     ff->effects[i].
+							     effect.type)) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i].effect.type'
#743: FILE: drivers/input/input-ff.c:485:
+						     ff->effects[i].effect.
+						     type);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#755: FILE: drivers/input/input-ff.c:497:
+			if (ff->effects[i].effect.replay.length
+			    && time_after_eq(jiffies, ff->effects[i].stop_at)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#756: FILE: drivers/input/input-ff.c:498:
+			    && time_after_eq(jiffies, ff->effects[i].stop_at)) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i].effect.replay'
#769: FILE: drivers/input/input-ff.c:511:
+					    msecs_to_jiffies(ff->effects[i].
+							     effect.replay.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'effect.replay.delay'
#770: FILE: drivers/input/input-ff.c:512:
+							     effect.replay.
+							     delay);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ff->effects[i].effect.replay'
#774: FILE: drivers/input/input-ff.c:516:
+					    msecs_to_jiffies(ff->effects[i].
+							     effect.replay.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'effect.replay.length'
#775: FILE: drivers/input/input-ff.c:517:
+							     effect.replay.
+							     length);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#794: FILE: drivers/input/input-ff.c:536:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: drivers/input/input-ff.c:551:
+	int ret = input_ff_effect_access(dev, effect_id, file);
+	if (ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: drivers/input/input-ff.c:577:
+	int ret;
+	if (!test_bit(EV_FF, dev->evbit))

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: drivers/input/input-ff.c:596:
+	int i;
+	debug("flushing now");

WARNING:LINE_SPACING: Missing a blank line after declarations
#873: FILE: drivers/input/input-ff.c:615:
+	int i;
+	if (value < 0)

WARNING:INDENTED_LABEL: labels should not be indented
#932: FILE: drivers/input/input-ff.c:674:
+      out:

WARNING:RETURN_VOID: void function return statements are not generally useful
#935: FILE: drivers/input/input-ff.c:677:
+	return;
+}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#979: FILE: drivers/input/input-ff.c:721:
+		for (id = 0;
[...]
+		     && test_bit(FF_EFFECT_USED, ff->effects[id].flags); id++) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#981: FILE: drivers/input/input-ff.c:723:
+		     id < dev->ff_effects_max
+		     && test_bit(FF_EFFECT_USED, ff->effects[id].flags); id++) ;

WARNING:SPACING: space prohibited before semicolon
#981: FILE: drivers/input/input-ff.c:723:
+		     && test_bit(FF_EFFECT_USED, ff->effects[id].flags); id++) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#993: FILE: drivers/input/input-ff.c:735:
+		if (ff->driver->playback) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1000: FILE: drivers/input/input-ff.c:742:
+		} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1014: FILE: drivers/input/input-ff.c:756:
+		    (effect->type == FF_PERIODIC
+		     && effect->u.periodic.waveform !=

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1035: FILE: drivers/input/input-ff.c:777:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1072: FILE: drivers/input/input-ff.c:814:
+	int i;
+	debug("registering device");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1074: FILE: drivers/input/input-ff.c:816:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1079: FILE: drivers/input/input-ff.c:821:
+		printk(KERN_ERR

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1153: FILE: drivers/input/input-ff.h:1:
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1173: FILE: drivers/input/input-ff.h:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1174: FILE: drivers/input/input-ff.h:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1177: FILE: drivers/input/input-ff.h:25:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074072.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 52 warnings, 25 checks, 1093 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074072.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
