WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
 > that it can cause applications to get uninterruptibly stuck in the kernel

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#108: 
Signed-off-by: Jörn Engel <joern@wohnheim.fh-wedel.de>
                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#125: FILE: include/linux/fs.h:1505:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#157: FILE: mm/filemap.c:1108:
+EXPORT_SYMBOL(generic_file_sendpage);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: mm/filemap.c:1741:
+			 const char *buf, unsigned bytes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: mm/filemap.c:1916:
+	struct address_space * mapping = file->f_mapping;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#204: FILE: mm/filemap.c:1917:
+	struct address_space_operations *a_ops = mapping->a_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: mm/filemap.c:1918:
+^Istruct inode ^I*inode = mapping->host;$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#250: FILE: mm/filemap.c:1963:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#256: FILE: mm/filemap.c:1969:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#256: FILE: mm/filemap.c:1969:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#256: FILE: mm/filemap.c:1969:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#256: FILE: mm/filemap.c:1969:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#256: FILE: mm/filemap.c:1969:
+		page = __grab_cache_page(mapping,index,&cached_page,&lru_pvec);
 		                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: mm/filemap.c:1975:
+		status = a_ops->prepare_write(file, page, offset, offset+bytes);
 		                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#278: FILE: mm/filemap.c:1991:
+		status = a_ops->commit_write(file, page, offset, offset+bytes);
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: mm/filemap.c:2025:
+			status = generic_osync_inode(inode, mapping,
+					OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#312: FILE: mm/filemap.c:2025:
+					OSYNC_METADATA|OSYNC_DATA);
 					              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000167329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 11 warnings, 7 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000167329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
