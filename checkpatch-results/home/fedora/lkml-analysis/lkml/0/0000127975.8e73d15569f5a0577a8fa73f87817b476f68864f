CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/notifier.h:27:
+extern int notifier_chain_register_lockfree(struct notifier_block **list, struct notifier_block *n);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/notifier.h:28:
+extern int notifier_chain_unregister_lockfree(struct notifier_block **nl, struct notifier_block *n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/notifier.h:29:
+extern int notifier_call_chain_lockfree(struct notifier_block **n, unsigned long val, void *v);

WARNING:LINE_SPACING: Missing a blank line after declarations
#129: FILE: kernel/sys.c:232:
+	struct notifier_block_copy *nbc, *c, *prev = NULL;
+	nbc = kmalloc(sizeof(*nbc), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#140: FILE: kernel/sys.c:243:
+		if (nbc->nb.priority > c->nb.priority
+		    && atomic_read(&c->deleted) == 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around c->nb.next
#143: FILE: kernel/sys.c:246:
+		list = &(c->nb.next);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:MEMORY_BARRIER: memory barrier without comment
#149: FILE: kernel/sys.c:252:
+		smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#155: FILE: kernel/sys.c:258:
+		smp_wmb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#162: FILE: kernel/sys.c:265:
+EXPORT_SYMBOL(notifier_chain_register_lockfree);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: kernel/sys.c:288:
+	struct notifier_block_copy *c;
+	write_lock(&notifier_lock);

WARNING:MEMORY_BARRIER: memory barrier without comment
#190: FILE: kernel/sys.c:293:
+			smp_wmb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around c->nb.next
#196: FILE: kernel/sys.c:299:
+		list = &(c->nb.next);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#202: FILE: kernel/sys.c:305:
+EXPORT_SYMBOL(notifier_chain_unregister_lockfree);

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: kernel/sys.c:338:
+	struct notifier_block_copy *c;
+	c = (struct notifier_block_copy *)*list;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#251: FILE: kernel/sys.c:354:
+EXPORT_SYMBOL(notifier_call_chain_lockfree);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127975.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 9 warnings, 6 checks, 181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127975.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
