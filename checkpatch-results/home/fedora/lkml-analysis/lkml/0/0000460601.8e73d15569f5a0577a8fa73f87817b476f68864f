WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
I have tried to implement the "initramfs buffer spec -- third draft" by hpa 

WARNING:TYPO_SPELLING: 'similary' may be misspelled - perhaps 'similarly'?
#50: 
closing the last used file", similary to how autofs does it ?
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#51: 
This could also be usefull for removal media.
                   ^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: include/linux/initramfs.h:1:
+#ifndef _LINUX_INITRAMFS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#120: FILE: init/do_mounts.c:39:
+static off_t initramfs_size = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: init/do_mounts.c:427:
+	int i;
+	for(i=0;i<8;i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#135: FILE: init/do_mounts.c:427:
+	for(i=0;i<8;i++) {
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#135: FILE: init/do_mounts.c:427:
+	for(i=0;i<8;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#135: FILE: init/do_mounts.c:427:
+	for(i=0;i<8;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#135: FILE: init/do_mounts.c:427:
+	for(i=0;i<8;i++) {
 	           ^

ERROR:SPACING: space required before the open parenthesis '('
#135: FILE: init/do_mounts.c:427:
+	for(i=0;i<8;i++) {

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: init/do_mounts.c:428:
+		if(ascii[i] >= '0' && ascii[i] <= '9')

CHECK:BRACES: braces {} should be used on all arms of this statement
#136: FILE: init/do_mounts.c:428:
+		if(ascii[i] >= '0' && ascii[i] <= '9')
[...]
+		else if(ascii[i] >= 'a' && ascii[i] <= 'f')
[...]
+		else if(ascii[i] >= 'A' && ascii[i] <= 'F')
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: init/do_mounts.c:429:
+			res += (ascii[i] - '0') << (4 * (7-i));
 			                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: init/do_mounts.c:430:
+		else if(ascii[i] >= 'a' && ascii[i] <= 'f')

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#139: FILE: init/do_mounts.c:431:
+			res += (ascii[i] - 'a' + 10) << (4 * (7-i));
 			                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#140: FILE: init/do_mounts.c:432:
+		else if(ascii[i] >= 'A' && ascii[i] <= 'F')

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#141: FILE: init/do_mounts.c:433:
+			res += (ascii[i] - 'A' + 10) << (4 * (7-i));
 			                                       ^

CHECK:BRACES: Unbalanced braces around else statement
#142: FILE: init/do_mounts.c:434:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#143: FILE: init/do_mounts.c:435:
+			printk("INITRAMFS: ASCII field in CPIO header contains illegar char!\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: init/do_mounts.c:451:
+	if (!strncmp(header->c_magic,CPIO_MAGIC,strlen(CPIO_MAGIC)))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: init/do_mounts.c:451:
+	if (!strncmp(header->c_magic,CPIO_MAGIC,strlen(CPIO_MAGIC)))
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: init/do_mounts.c:453:
+	if (!strncmp(header->c_magic,CPIO_MAGIC,strlen(CPIO_MAGIC_CRC))) {
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: init/do_mounts.c:453:
+	if (!strncmp(header->c_magic,CPIO_MAGIC,strlen(CPIO_MAGIC_CRC))) {
 	                                       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#161: FILE: init/do_mounts.c:453:
+	if (!strncmp(header->c_magic,CPIO_MAGIC,strlen(CPIO_MAGIC_CRC))) {
+		return 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#175: FILE: init/do_mounts.c:467:
+	if (in_fd < 0) {
+		return 0;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#186: FILE: init/do_mounts.c:478:
+	while(cur < initramfs_size) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#195: FILE: init/do_mounts.c:487:
+		if(read(in_fd, (void *)&header, sizeof (struct cpio_header)) <= 0) {

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: init/do_mounts.c:487:
+		if(read(in_fd, (void *)&header, sizeof (struct cpio_header)) <= 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#196: FILE: init/do_mounts.c:488:
+			printk(KERN_NOTICE "INITRAMFS: EOF reached aborting extraction!\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: init/do_mounts.c:491:
+		cur += sizeof (struct cpio_header);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#202: FILE: init/do_mounts.c:494:
+			printk(KERN_NOTICE "INITRAMFS: No valid CPIO header found aborting extraction!\n");

ERROR:SPACING: space required before the open parenthesis '('
#210: FILE: init/do_mounts.c:502:
+		if(read(in_fd, filename, ascii2int(header.c_namesize)) <= 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#211: FILE: init/do_mounts.c:503:
+			printk(KERN_NOTICE "INITRAMFS: EOF reached aborting extraction!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: init/do_mounts.c:508:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: init/do_mounts.c:509:
+		printk("INITRAMFS: FileName: %s Size:%ld\n",filename,filesize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: init/do_mounts.c:509:
+		printk("INITRAMFS: FileName: %s Size:%ld\n",filename,filesize);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: init/do_mounts.c:509:
+		printk("INITRAMFS: FileName: %s Size:%ld\n",filename,filesize);
 		                                                    ^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#224: FILE: init/do_mounts.c:516:
+				out_fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, ascii2int(header.c_mode));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: init/do_mounts.c:518:
+					printk("INITRAMFS: Error opening out file %d\n",out_fd);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: init/do_mounts.c:518:
+					printk("INITRAMFS: Error opening out file %d\n",out_fd);
 					                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: init/do_mounts.c:522:
+				while(filesize) {

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#231: FILE: init/do_mounts.c:523:
+					bytes_read = read(in_fd, buf, (filesize < BLOCK_SIZE) ? filesize : BLOCK_SIZE);

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: init/do_mounts.c:524:
+					if(bytes_read < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#233: FILE: init/do_mounts.c:525:
+						printk(KERN_NOTICE "INITRAMFS: EOF reached aborting extraction!\n");

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#248: FILE: init/do_mounts.c:540:
+				bytes_read = read(in_fd, buf, (filesize < BLOCK_SIZE) ? filesize : BLOCK_SIZE);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: init/do_mounts.c:542:
+				sys_symlink(buf,filename);
 				               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: init/do_mounts.c:546:
+				if(strcmp(filename,CPIO_TRAILER) == 0)
 				                  ^

ERROR:SPACING: space required before the open parenthesis '('
#254: FILE: init/do_mounts.c:546:
+				if(strcmp(filename,CPIO_TRAILER) == 0)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#255: FILE: init/do_mounts.c:547:
+					while((read(in_fd, buf, 1) == 1) && (*buf == 0) && (cur < initramfs_size))

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: init/do_mounts.c:547:
+					while((read(in_fd, buf, 1) == 1) && (*buf == 0) && (cur < initramfs_size))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: init/do_mounts.c:562:
+	int pid,i,fd;
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: init/do_mounts.c:562:
+	int pid,i,fd;
 	         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#288: FILE: init/do_mounts.c:580:
+	printk("INITRAMFS: CPIO Image found starting extraction....\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#294: FILE: init/do_mounts.c:586:
+			yield();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#311: FILE: init/do_mounts.c:654:
+		printk(KERN_NOTICE

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#314: FILE: init/do_mounts.c:657:
+		nblocks = (initrd_end - initrd_start)>>BLOCK_SIZE_BITS;
 		                                     ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#336: FILE: init/do_mounts.c:947:
+	if(!initramfs_load_image("/dev/root.old"))
 	mount_block_root("/dev/root.old", root_mountflags & ~MS_RDONLY);

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: init/do_mounts.c:947:
+	if(!initramfs_load_image("/dev/root.old"))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460601.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 24 warnings, 7 checks, 258 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460601.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
