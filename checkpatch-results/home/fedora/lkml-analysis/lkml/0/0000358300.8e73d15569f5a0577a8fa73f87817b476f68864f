WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
diff -urN linux-2.5/arch/s390/kernel/compat_linux.c linux-2.5-s390/arch/s390/kernel/compat_linux.c

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#44: FILE: arch/s390/kernel/compat_linux.c:376:
+extern int sem_ctls[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#49: FILE: arch/s390/kernel/compat_linux.c:381:
+do_sys32_semtimedop (int semid, struct sembuf *tsops, int nsops,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#62: FILE: arch/s390/kernel/compat_linux.c:394:
+	if (nsops <= SEMOPM_FAST)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#64: FILE: arch/s390/kernel/compat_linux.c:396:
+	else {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#65: FILE: arch/s390/kernel/compat_linux.c:397:
+		sops = kmalloc(nsops * sizeof(*sops), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sops"
#66: FILE: arch/s390/kernel/compat_linux.c:398:
+		if (sops == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#72: FILE: arch/s390/kernel/compat_linux.c:404:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: arch/s390/kernel/compat_linux.c:804:
+asmlinkage int sys32_ipc (u32 call, int first, int second, int third, u32 ptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: arch/s390/kernel/compat_linux.c:819:
+				err = do_sys32_semtimedop(first,
+					(struct sembuf *)AA(ptr),

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#116: FILE: arch/s390/kernel/compat_linux.c:825:
+			/* else fall through for normal semop() */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: arch/s390/kernel/compat_linux.c:828:
+			err = sys_semtimedop (first, (struct sembuf *)AA(ptr),

CHECK:SPACING: No space is necessary after a cast
#144: FILE: arch/s390/kernel/sys_s390.c:197:
+		return sys_semtimedop (first, (struct sembuf *) ptr, second,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#144: FILE: arch/s390/kernel/sys_s390.c:197:
+		return sys_semtimedop (first, (struct sembuf *) ptr, second,

CHECK:SPACING: No space is necessary after a cast
#145: FILE: arch/s390/kernel/sys_s390.c:198:
+				       (const struct timespec *) third);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000358300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 7 checks, 107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000358300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
