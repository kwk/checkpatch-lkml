WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# mount -t raw /dev/sda1 /dev/<whatever>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Actual IO code is pretty much copied from old driver.  The main differences:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: fs/raw.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#109: FILE: fs/raw.c:2:
+ * fs/raw.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#135: FILE: fs/raw.c:28:
+static int raw_open(struct inode *inode, struct file *filp)
                                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: fs/raw.c:47:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>>=' (ctx:VxV)
#160: FILE: fs/raw.c:53:
+		for (bits = 0; !(sector_size & 1); sector_size>>=1, bits++)
 		                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#169: FILE: fs/raw.c:62:
+static int raw_release(struct inode *inode, struct file *filp)
                                                          ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: fs/raw.c:65:
+	struct raw_dev *p = raw_dev(inode->i_sb);
+	spin_lock(&count_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#179: FILE: fs/raw.c:72:
+static ssize_t rw_raw_dev(int rw, struct file *filp, char *buf, 
                                                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: fs/raw.c:72:
+static ssize_t rw_raw_dev(int rw, struct file *filp, char *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: fs/raw.c:73:
+static ssize_t rw_raw_dev(int rw, struct file *filp, char *buf, 
+			   size_t size, loff_t *offp)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: fs/raw.c:86:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/raw.c:88:
+^I * First, a few checks on device size limits $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/raw.c:101:
+^I$

CHECK:SPACING: No space is necessary after a cast
#229: FILE: fs/raw.c:122:
+		err = map_user_kiobuf(rw, iobuf, (unsigned long) buf, iosize);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: fs/raw.c:130:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: fs/raw.c:144:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: fs/raw.c:155:
+out:^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#266: FILE: fs/raw.c:159:
+static ssize_t raw_read(struct file *filp, char * buf, 
                                      ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: fs/raw.c:159:
+static ssize_t raw_read(struct file *filp, char * buf, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: fs/raw.c:159:
+static ssize_t raw_read(struct file *filp, char * buf, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: fs/raw.c:160:
+static ssize_t raw_read(struct file *filp, char * buf, 
+		 size_t size, loff_t *offp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#269: FILE: fs/raw.c:162:
+	return rw_raw_dev(READ, filp, buf, size, offp);
 	                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#272: FILE: fs/raw.c:165:
+static ssize_t raw_write(struct file *filp, const char *buf, 
                                       ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: fs/raw.c:165:
+static ssize_t raw_write(struct file *filp, const char *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: fs/raw.c:166:
+static ssize_t raw_write(struct file *filp, const char *buf, 
+		  size_t size, loff_t *offp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#275: FILE: fs/raw.c:168:
+	return rw_raw_dev(WRITE, filp, (char *) buf, size, offp);
 	                         ^^^^

CHECK:SPACING: No space is necessary after a cast
#275: FILE: fs/raw.c:168:
+	return rw_raw_dev(WRITE, filp, (char *) buf, size, offp);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#278: FILE: fs/raw.c:171:
+static struct file_operations raw_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#279: FILE: fs/raw.c:172:
+	open:		raw_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#280: FILE: fs/raw.c:173:
+	release:	raw_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#280: FILE: fs/raw.c:173:
+	release:	raw_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#281: FILE: fs/raw.c:174:
+	read:		raw_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#281: FILE: fs/raw.c:174:
+	read:		raw_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#282: FILE: fs/raw.c:175:
+	write:		raw_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#282: FILE: fs/raw.c:175:
+	write:		raw_write,

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: fs/raw.c:181:
+	dev_t dev = raw_dev(mnt->mnt_sb)->bdev->bd_dev;
+	seq_printf(m, " dev=%d:%d", MAJOR(dev), MINOR(dev));

WARNING:INDENTED_LABEL: labels should not be indented
#293: FILE: fs/raw.c:186:
+	statfs:		simple_statfs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#294: FILE: fs/raw.c:187:
+	show_options:	raw_show_options,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#294: FILE: fs/raw.c:187:
+	show_options:	raw_show_options,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: fs/raw.c:191:
+static struct super_block *raw_get_sb(struct file_system_type *fs_type,
+	int flags, char *dev_name, void *data)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#302: FILE: fs/raw.c:195:
+	struct nameidata nd;
 	                 ^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct raw_dev)...)
#303: FILE: fs/raw.c:196:
+	struct raw_dev *p = kmalloc(sizeof(struct raw_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#315: FILE: fs/raw.c:208:
+	error = path_lookup(dev_name, LOOKUP_FOLLOW, &nd);
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#320: FILE: fs/raw.c:213:
+	inode = nd.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#327: FILE: fs/raw.c:220:
+	if (nd.mnt->mnt_flags & MNT_NODEV)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#339: FILE: fs/raw.c:232:
+		path_release(&nd);
 		              ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#360: FILE: fs/raw.c:253:
+	root->i_mode = S_IFREG | (inode->i_mode & S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#365: FILE: fs/raw.c:258:
+	root->i_atime = root->i_mtime = root->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#373: FILE: fs/raw.c:266:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#377: FILE: fs/raw.c:270:
+	iput(root);
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#382: FILE: fs/raw.c:275:
+	path_release(&nd);
 	              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: fs/raw.c:285:
+	struct raw_dev *p = raw_dev(s);
+	kill_anon_super(s);

WARNING:INDENTED_LABEL: labels should not be indented
#398: FILE: fs/raw.c:291:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#399: FILE: fs/raw.c:292:
+	name:		"raw",
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#399: FILE: fs/raw.c:292:
+	name:		"raw",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#400: FILE: fs/raw.c:293:
+	get_sb:		raw_get_sb,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#400: FILE: fs/raw.c:293:
+	get_sb:		raw_get_sb,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#401: FILE: fs/raw.c:294:
+	kill_sb:	raw_kill_sb,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#401: FILE: fs/raw.c:294:
+	kill_sb:	raw_kill_sb,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 34 warnings, 8 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
