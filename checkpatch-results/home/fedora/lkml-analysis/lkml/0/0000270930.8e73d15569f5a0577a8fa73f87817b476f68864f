WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
need for a userspace daemon. It also adds support for such mountpoints to be

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#45: FILE: fs/namei.c:281:
+void path_release_on_umount(struct nameidata *nd)
                                               ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#131: FILE: fs/namespace.c:485:
+	path_release_on_umount(&nd);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: fs/namespace.c:666:
+static int do_remount(struct nameidata *nd, int flags, int mnt_flags,
                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: fs/namespace.c:752:
+static int do_new_mount(struct nameidata *nd, char *type, int flags,
                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#186: FILE: fs/namespace.c:768:
+	return do_add_mount(mnt, nd, mnt_flags, NULL);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#189: FILE: fs/namespace.c:771:
+int do_add_mount(struct vfsmount *newmnt, struct nameidata *nd,
                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#213: FILE: fs/namespace.c:795:
+	err = graft_tree(newmnt, nd);
 	                         ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#229: FILE: fs/namespace.c:809:
+EXPORT_SYMBOL_GPL(do_add_mount);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#293: FILE: fs/namespace.c:873:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#293: FILE: fs/namespace.c:873:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#309: FILE: fs/namespace.c:889:
+EXPORT_SYMBOL_GPL(mark_mounts_for_expiry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: fs/namespace.c:985:
+		retval = do_new_mount(&nd, type_page, flags, mnt_flags,
 		                       ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#362: FILE: fs/super.c:808:
+EXPORT_SYMBOL_GPL(do_kern_mount);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#421: FILE: include/linux/mount.h:71:
+extern int do_add_mount(struct vfsmount *newmnt, struct nameidata *nd,
                                                                    ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/linux/mount.h:71:
+extern int do_add_mount(struct vfsmount *newmnt, struct nameidata *nd,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/linux/mount.h:74:
+extern void mark_mounts_for_expiry(struct list_head *mounts);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/namei.h:60:
+extern void path_release_on_umount(struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#436: FILE: include/linux/namei.h:60:
+extern void path_release_on_umount(struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/namespace.h:17:
+extern void __put_namespace(struct namespace *namespace);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270930.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 14 warnings, 5 checks, 369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270930.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
