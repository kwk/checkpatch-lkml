WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: include/linux/cpuset.h:1:
+#ifndef _LINUX_CPUSET_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/cpuset.h:16:
+extern int cpuset_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/cpuset.h:17:
+extern void cpuset_fork(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/linux/cpuset.h:18:
+extern void cpuset_exit(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: include/linux/cpuset.h:19:
+extern const cpumask_t cpuset_cpus_allowed(const struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/linux/cpuset.h:20:
+extern const nodemask_t cpuset_mems_allowed(const struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/cpuset.h:21:
+extern int proc_pid_cspath(struct task_struct *p, char *buf, int len);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#288: FILE: kernel/cpuset.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#289: FILE: kernel/cpuset.c:2:
+ *  kernel/cpuset.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#333: FILE: kernel/cpuset.c:46:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#334: FILE: kernel/cpuset.c:47:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: kernel/cpuset.c:50:
+#define CPUSET_SUPER_MAGIC ^I^I0x27e0eb$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#355: FILE: kernel/cpuset.c:68:
+typedef enum {

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#400: FILE: kernel/cpuset.c:113:
+static struct super_block *cpuset_sb = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: kernel/cpuset.c:131:
+static int create_dir(struct cpuset *cs, struct dentry *p, const char *n,
+						struct dentry **d, int mode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: kernel/cpuset.c:141:
+	struct inode *inode = new_inode(cpuset_sb);
+	if (inode) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#434: FILE: kernel/cpuset.c:147:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: kernel/cpuset.c:158:
+		struct cpuset *cs = (struct cpuset *)dentry->d_fsdata;
+		BUG_ON(!(is_removed(cs)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: kernel/cpuset.c:158:
+		BUG_ON(!(is_removed(cs)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#448: FILE: kernel/cpuset.c:161:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#451: FILE: kernel/cpuset.c:164:
+static struct dentry_operations cpuset_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#478: FILE: kernel/cpuset.c:191:
+static void use_cpuset(struct cpuset * cs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: kernel/cpuset.c:216:
+		struct dentry *d = list_entry(node, struct dentry, d_child);
+		list_del_init(node);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: kernel/cpuset.c:257:
+ *^Ics: ^I^Ithe cpuset to check and maybe delete.$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#589: FILE: kernel/cpuset.c:302:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#593: FILE: kernel/cpuset.c:306:
+	iput(inodep);
 	^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#646: FILE: kernel/cpuset.c:359:
+static struct inode_operations cpuset_dir_inode_operations = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#654: FILE: kernel/cpuset.c:367:
+ *^Ics: ^Ithe cpuset we create the directory for.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: kernel/cpuset.c:406:
+static int cpuset_fill_super(struct super_block *sb, void *unused_data,
+							int unused_silent)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO | S_IWUSR' are not preferred. Consider using octal permissions '0755'.
#704: FILE: kernel/cpuset.c:417:
+	inode = cpuset_new_inode(S_IFDIR | S_IRUGO | S_IXUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#716: FILE: kernel/cpuset.c:429:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: kernel/cpuset.c:437:
+static struct super_block *cpuset_get_sb(struct file_system_type *fs_type,
+					int flags, const char *unused_dev_name,

WARNING:SPACING: Unnecessary space before function pointer arguments
#752: FILE: kernel/cpuset.c:465:
+	int (*open) (struct inode *inode, struct file *file);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#753: FILE: kernel/cpuset.c:466:
+	ssize_t (*read) (struct file *file, char __user *buf, size_t nbytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: kernel/cpuset.c:467:
+	ssize_t (*read) (struct file *file, char __user *buf, size_t nbytes,
+							loff_t *ppos);

WARNING:SPACING: Unnecessary space before function pointer arguments
#755: FILE: kernel/cpuset.c:468:
+	int (*write) (struct file *file, const char *buf, size_t nbytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: kernel/cpuset.c:469:
+	int (*write) (struct file *file, const char *buf, size_t nbytes,
+							loff_t *ppos);

WARNING:SPACING: Unnecessary space before function pointer arguments
#757: FILE: kernel/cpuset.c:470:
+	int (*release) (struct inode *inode, struct file *file);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#953: FILE: kernel/cpuset.c:666:
+	turning_on = (simple_strtoul(buf, NULL, 10) != 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#980: FILE: kernel/cpuset.c:693:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid'
#1001: FILE: kernel/cpuset.c:714:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->uid'
#1001: FILE: kernel/cpuset.c:714:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->suid'
#1001: FILE: kernel/cpuset.c:714:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1002: FILE: kernel/cpuset.c:715:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1033: FILE: kernel/cpuset.c:746:
+	int conv = sscanf(buf, "%d", &pid);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1051: FILE: kernel/cpuset.c:764:
+typedef enum {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1072: FILE: kernel/cpuset.c:785:
+	if (nbytes > 100 + 6 * NR_CPUS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1076: FILE: kernel/cpuset.c:789:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1116: FILE: kernel/cpuset.c:829:
+static ssize_t cpuset_file_write(struct file *file, const char *buf,
+						size_t nbytes, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1120: FILE: kernel/cpuset.c:833:
+	struct cftype *cft = __d_cft(file->f_dentry);
+	if (!cft)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i < max'
#1140: FILE: kernel/cpuset.c:853:
+		if ((i < max) && (test_bit(i, mask))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p > 1'
#1149: FILE: kernel/cpuset.c:862:
+			if (f && (p > 1))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1159: FILE: kernel/cpuset.c:872:
+	return cpuset_sprintf_list(page, cpus_addr(mask), NR_CPUS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: kernel/cpuset.c:881:
+static ssize_t cpuset_common_file_read(struct file *file, char __user *buf,
+				size_t nbytes, loff_t *ppos)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1179: FILE: kernel/cpuset.c:892:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: kernel/cpuset.c:930:
+static ssize_t cpuset_file_read(struct file *file, char *buf, size_t nbytes,
+								loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1221: FILE: kernel/cpuset.c:934:
+	struct cftype *cft = __d_cft(file->f_dentry);
+	if (!cft)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1256: FILE: kernel/cpuset.c:969:
+	struct cftype *cft = __d_cft(file->f_dentry);
+	if (cft->release)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1261: FILE: kernel/cpuset.c:974:
+static struct file_operations cpuset_file_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: kernel/cpuset.c:990:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1285: FILE: kernel/cpuset.c:998:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: kernel/cpuset.c:1012:
+static int create_dir(struct cpuset *cs, struct dentry *p, const char *n,
+						struct dentry **d, int mode)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1304: FILE: kernel/cpuset.c:1017:
+	if (!IS_ERR(*d)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1311: FILE: kernel/cpuset.c:1024:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1324: FILE: kernel/cpuset.c:1037:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1329: FILE: kernel/cpuset.c:1042:
+	} else

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1377: FILE: kernel/cpuset.c:1090:
+	array = kmalloc(max * sizeof(pid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1392: FILE: kernel/cpuset.c:1105:
+	}
+	while_each_thread(g, p);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1401: FILE: kernel/cpuset.c:1114:
+				pid_t tmp = array[j];
+				array[j] = array[j + 1];

CHECK:BRACES: braces {} should be used on all arms of this statement
#1416: FILE: kernel/cpuset.c:1129:
+		if (curr - last == 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1421: FILE: kernel/cpuset.c:1134:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: kernel/cpuset.c:1169:
+static ssize_t cpuset_tasks_read(struct file *file, char __user *buf,
+						size_t nbytes, loff_t *ppos)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1473: FILE: kernel/cpuset.c:1186:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1539: FILE: kernel/cpuset.c:1252:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1568: FILE: kernel/cpuset.c:1281:
+ *	dput(dentry)->iput(inode)->kfree().
   	              ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1571: FILE: kernel/cpuset.c:1284:
+ * ^Icpuset_destroy MUST be called with:$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1646: FILE: kernel/cpuset.c:1359:
+	if ((err = cpuset_add_file(cs_dentry, &cft_cpus)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1648: FILE: kernel/cpuset.c:1361:
+	if ((err = cpuset_add_file(cs_dentry, &cft_mems)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1650: FILE: kernel/cpuset.c:1363:
+	if ((err = cpuset_add_file(cs_dentry, &cft_cpustrict)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1652: FILE: kernel/cpuset.c:1365:
+	if ((err = cpuset_add_file(cs_dentry, &cft_memstrict)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1654: FILE: kernel/cpuset.c:1367:
+	if ((err = cpuset_add_file(cs_dentry, &cft_autoclean)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1656: FILE: kernel/cpuset.c:1369:
+	if ((err = cpuset_add_file(cs_dentry, &cft_tasks)) < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1682: FILE: kernel/cpuset.c:1395:
+		printk(KERN_ERR "cpuset: could not mount!\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1794: FILE: kernel/cpuset.c:1507:
+	bottomcs = cs = tsk->cpuset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1800: FILE: kernel/cpuset.c:1513:
+		int l = cs->dentry->d_name.len;
+		start -= l;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 39 warnings, 32 checks, 1753 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
