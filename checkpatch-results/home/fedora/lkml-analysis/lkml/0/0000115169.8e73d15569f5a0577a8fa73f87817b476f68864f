WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: arch/um/include/longjmp.h:1:
+#ifndef __UML_LONGJMP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#64: FILE: arch/um/include/longjmp.h:7:
+#define UML_SIGLONGJMP(buf, val) do { \
+	siglongjmp(*buf, val);		\
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#64: FILE: arch/um/include/longjmp.h:7:
+#define UML_SIGLONGJMP(buf, val) do { \
+	siglongjmp(*buf, val);		\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#66: FILE: arch/um/include/longjmp.h:9:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#68: FILE: arch/um/include/longjmp.h:11:
+#define UML_SIGSETJMP(buf, enable) ({ \
+	int n; \
+	enable = get_signals(); \
+	n = sigsetjmp(*buf, 1); \
+	if(n != 0) \
+		set_signals(enable); \
+	n; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'enable' - possible side-effects?
#68: FILE: arch/um/include/longjmp.h:11:
+#define UML_SIGSETJMP(buf, enable) ({ \
+	int n; \
+	enable = get_signals(); \
+	n = sigsetjmp(*buf, 1); \
+	if(n != 0) \
+		set_signals(enable); \
+	n; })

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: arch/um/include/longjmp.h:15:
+	if(n != 0) \

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: arch/um/os-Linux/process.c:214:
+	if(n != 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#146: FILE: arch/um/os-Linux/process.c:217:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:BIT_MACRO: Prefer using the BIT macro
#163: FILE: arch/um/os-Linux/signal.c:30:
+#define SIGIO_MASK (1 << SIGIO_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#166: FILE: arch/um/os-Linux/signal.c:33:
+#define SIGVTALRM_MASK (1 << SIGVTALRM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#169: FILE: arch/um/os-Linux/signal.c:36:
+#define SIGALRM_MASK (1 << SIGALRM_BIT)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#172: FILE: arch/um/os-Linux/signal.c:39:
+static int pending = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required before the open brace '{'
#187: FILE: arch/um/os-Linux/signal.c:54:
+	if(!enabled && (sig == SIGIO)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGIO'
#187: FILE: arch/um/os-Linux/signal.c:54:
+	if(!enabled && (sig == SIGIO)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: arch/um/os-Linux/signal.c:54:
+	if(!enabled && (sig == SIGIO)){

ERROR:SPACING: space required before the open brace '{'
#209: FILE: arch/um/os-Linux/signal.c:71:
+	if(!timer_irq_inited){

ERROR:SPACING: space required before the open parenthesis '('
#209: FILE: arch/um/os-Linux/signal.c:71:
+	if(!timer_irq_inited){

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#221: FILE: arch/um/os-Linux/signal.c:85:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#231: FILE: arch/um/os-Linux/signal.c:95:
+	if(!signals_enabled){

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: arch/um/os-Linux/signal.c:95:
+	if(!signals_enabled){

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: arch/um/os-Linux/signal.c:96:
+		if(sig == SIGVTALRM)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#234: FILE: arch/um/os-Linux/signal.c:98:
+		else pending |= SIGALRM_MASK;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open brace '{'
#255: FILE: arch/um/os-Linux/signal.c:119:
+	if(!enabled){

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: arch/um/os-Linux/signal.c:119:
+	if(!enabled){

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: arch/um/os-Linux/signal.c:120:
+		if(sig == SIGVTALRM)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#258: FILE: arch/um/os-Linux/signal.c:122:
+		else pending |= SIGALRM_MASK;

ERROR:SPACING: space required before the open parenthesis '('
#286: FILE: arch/um/os-Linux/signal.c:173:
+	if(sigprocmask(SIG_UNBLOCK, &sig_mask, NULL) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: arch/um/os-Linux/signal.c:196:
+	if(signals_enabled == 1)

ERROR:SPACING: space required before the open brace '{'
#341: FILE: arch/um/os-Linux/signal.c:203:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#341: FILE: arch/um/os-Linux/signal.c:203:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: arch/um/os-Linux/signal.c:210:
+		if(save_pending == 0)

ERROR:SPACING: space required before the open parenthesis '('
#364: FILE: arch/um/os-Linux/signal.c:226:
+		if(save_pending & SIGIO_MASK)

ERROR:SPACING: space required before the open parenthesis '('
#372: FILE: arch/um/os-Linux/signal.c:230:
+		if(save_pending & SIGALRM_MASK)

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: arch/um/os-Linux/signal.c:233:
+		if(save_pending & SIGVTALRM_MASK)

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: arch/um/os-Linux/signal.c:246:
+	if(signals_enabled == enable)

ERROR:SPACING: space required before the open parenthesis '('
#422: FILE: arch/um/os-Linux/signal.c:250:
+	if(enable)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#424: FILE: arch/um/os-Linux/signal.c:252:
+	else block_signals();

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: arch/um/os-Linux/skas/process.c:452:
+	if(UML_SIGSETJMP(&fork_buf, enable) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: arch/um/os-Linux/skas/process.c:467:
+	if(UML_SIGSETJMP(&buf, enable) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#481: FILE: arch/um/os-Linux/skas/process.c:477:
+	if(UML_SIGSETJMP(&my_buf, enable) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#532: FILE: arch/um/os-Linux/skas/process.c:532:
+	if(UML_SIGSETJMP(&here, enable) == 0)

ERROR:SPACING: space required before the open brace '{'
#593: FILE: arch/um/os-Linux/uaccess.c:21:
+	if(UML_SIGSETJMP(&jbuf, enable) == 0){

ERROR:SPACING: space required before the open parenthesis '('
#593: FILE: arch/um/os-Linux/uaccess.c:21:
+	if(UML_SIGSETJMP(&jbuf, enable) == 0){

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 2 warnings, 8 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
