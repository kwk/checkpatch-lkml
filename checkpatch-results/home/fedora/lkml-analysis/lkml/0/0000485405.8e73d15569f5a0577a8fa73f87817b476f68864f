ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#54: FILE: drivers/net/natsemi.c:104:
+	version 1.0.14:
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#55: FILE: drivers/net/natsemi.c:105:
+		* OOM error handling.
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#56: FILE: drivers/net/natsemi.c:106:
+		* reinit_ring() instead of {drain,init}_ring().
 		                                 ^

ERROR:SPACING: space required after that close brace '}'
#56: FILE: drivers/net/natsemi.c:106:
+		* reinit_ring() instead of {drain,init}_ring().

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#57: FILE: drivers/net/natsemi.c:107:
+		* Rx status FIFO overrun bug fixed:
 		                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <Rx>
#57: FILE: drivers/net/natsemi.c:107:
+		* Rx status FIFO overrun bug fixed:

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: drivers/net/natsemi.c:108:
+^I^I^IThe nic sets that bit instead of IntrRxDone, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <The>
#58: FILE: drivers/net/natsemi.c:108:
+			The nic sets that bit instead of IntrRxDone, 

CHECK:CAMELCASE: Avoid CamelCase: <IntrRxDone>
#58: FILE: drivers/net/natsemi.c:108:
+			The nic sets that bit instead of IntrRxDone, 

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#147: FILE: drivers/net/natsemi.c:1263:
+		if (!np->oom) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <RxOn>
#148: FILE: drivers/net/natsemi.c:1264:
+			writel(RxOn, dev->base_addr + ChipCmd);

CHECK:CAMELCASE: Avoid CamelCase: <ChipCmd>
#148: FILE: drivers/net/natsemi.c:1264:
+			writel(RxOn, dev->base_addr + ChipCmd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: drivers/net/natsemi.c:1344:
+		int entry = np->dirty_rx % RX_RING_SIZE;
+		if (np->rx_skbuff[entry] == NULL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!np->rx_skbuff[entry]"
#177: FILE: drivers/net/natsemi.c:1344:
+		if (np->rx_skbuff[entry] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#180: FILE: drivers/net/natsemi.c:1347:
+			if (skb == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/net/natsemi.c:1351:
+			np->rx_dma[entry] = pci_map_single(np->pci_dev,
+							skb->data, skb->len, PCI_DMA_FROMDEVICE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#192: FILE: drivers/net/natsemi.c:1359:
+			printk(KERN_INFO "%s: going OOM.\n", dev->name);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#206: FILE: drivers/net/natsemi.c:1371:
+	np->dirty_tx = np->cur_tx = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#210: FILE: drivers/net/natsemi.c:1375:
+					+sizeof(struct netdev_desc)
 					^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#211: FILE: drivers/net/natsemi.c:1376:
+					 *((i+1)%TX_RING_SIZE+RX_RING_SIZE));
 					 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: drivers/net/natsemi.c:1376:
+					 *((i+1)%TX_RING_SIZE+RX_RING_SIZE));
 					     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#211: FILE: drivers/net/natsemi.c:1376:
+					 *((i+1)%TX_RING_SIZE+RX_RING_SIZE));
 					        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: drivers/net/natsemi.c:1376:
+					 *((i+1)%TX_RING_SIZE+RX_RING_SIZE));
 					                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/net/natsemi.c:1409:
+			pci_unmap_single(np->pci_dev,
+						np->rx_dma[i],

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#289: FILE: drivers/net/natsemi.c:1446:
+	np->dirty_tx = np->cur_tx = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#290: FILE: drivers/net/natsemi.c:1447:
+	for (i=0;i<TX_RING_SIZE;i++)
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#290: FILE: drivers/net/natsemi.c:1447:
+	for (i=0;i<TX_RING_SIZE;i++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#290: FILE: drivers/net/natsemi.c:1447:
+	for (i=0;i<TX_RING_SIZE;i++)
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#290: FILE: drivers/net/natsemi.c:1447:
+	for (i=0;i<TX_RING_SIZE;i++)
 	                       ^

CHECK:CAMELCASE: Avoid CamelCase: <DescOwn>
#299: FILE: drivers/net/natsemi.c:1456:
+		np->rx_ring[i].cmd_status = cpu_to_le32(DescOwn);

CHECK:CAMELCASE: Avoid CamelCase: <IntrRxIntr>
#310: FILE: drivers/net/natsemi.c:1586:
+		if (intr_status & (IntrRxDone | IntrRxIntr |  RxStatusFIFOOver))

CHECK:CAMELCASE: Avoid CamelCase: <RxStatusFIFOOver>
#310: FILE: drivers/net/natsemi.c:1586:
+		if (intr_status & (IntrRxDone | IntrRxIntr |  RxStatusFIFOOver))

CHECK:CAMELCASE: Avoid CamelCase: <WOLPkt>
#352: FILE: drivers/net/natsemi.c:2397:
+		writel(WOLPkt, ioaddr + IntrMask);

CHECK:CAMELCASE: Avoid CamelCase: <IntrMask>
#352: FILE: drivers/net/natsemi.c:2397:
+		writel(WOLPkt, ioaddr + IntrMask);

CHECK:CAMELCASE: Avoid CamelCase: <IntrEnable>
#353: FILE: drivers/net/natsemi.c:2398:
+		writel(1, ioaddr + IntrEnable);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485405.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 3 warnings, 22 checks, 346 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485405.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
