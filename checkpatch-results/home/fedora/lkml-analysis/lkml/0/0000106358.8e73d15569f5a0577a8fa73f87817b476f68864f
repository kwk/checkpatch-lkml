WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: kernel/ckrm/ckrm_cpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#42: FILE: kernel/ckrm/ckrm_cpu.c:2:
+ *  kernel/ckrm/ckrm_cpu.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: kernel/ckrm/ckrm_cpu.c:26:
+^Iint ^Icnt_total_guarantee; ^I/* total guarantee behind the class */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!class"
#77: FILE: kernel/ckrm/ckrm_cpu.c:37:
+	if (unlikely(class == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#82: FILE: kernel/ckrm/ckrm_cpu.c:42:
+	if (unlikely(res == NULL))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: kernel/ckrm/ckrm_cpu.c:55:
+static void cpu_res_initcls_one(struct ckrm_cpu * res)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#112: FILE: kernel/ckrm/ckrm_cpu.c:72:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: kernel/ckrm/ckrm_cpu.c:75:
+static void *cpu_res_alloc(struct ckrm_class *class,
+				struct ckrm_class *parent)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct ckrm_cpu)...)
#119: FILE: kernel/ckrm/ckrm_cpu.c:79:
+	res = kmalloc(sizeof(struct ckrm_cpu), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#133: FILE: kernel/ckrm/ckrm_cpu.c:93:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpu_res_alloc', this function's name, in a string
#134: FILE: kernel/ckrm/ckrm_cpu.c:94:
+		       "cpu_res_alloc: failed GFP_ATOMIC alloc\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#152: FILE: kernel/ckrm/ckrm_cpu.c:112:
+		temp = (u64) parres->shares.unused_guarantee

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#165: FILE: kernel/ckrm/ckrm_cpu.c:125:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: kernel/ckrm/ckrm_cpu.c:128:
+recalc_and_propagate(struct ckrm_cpu * res)

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#171: FILE: kernel/ckrm/ckrm_cpu.c:131:
+	struct ckrm_cpu *parres, *childres;
 	                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'currnet' may be misspelled - perhaps 'current'?
#180: FILE: kernel/ckrm/ckrm_cpu.c:140:
+		/* calculate total and currnet guarantee */
 		                       ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#182: FILE: kernel/ckrm/ckrm_cpu.c:142:
+			cnt_total = (u64) self->my_guarantee

CHECK:SPACING: No space is necessary after a cast
#185: FILE: kernel/ckrm/ckrm_cpu.c:145:
+			cnt_guar = (u64) self->unused_guarantee * cnt_total;

CHECK:SPACING: No space is necessary after a cast
#188: FILE: kernel/ckrm/ckrm_cpu.c:148:
+		cpu_rc_set_guarantee(res, (int) cnt_guar);

CHECK:SPACING: No space is necessary after a cast
#189: FILE: kernel/ckrm/ckrm_cpu.c:149:
+		res->cnt_total_guarantee = (int ) cnt_total;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#189: FILE: kernel/ckrm/ckrm_cpu.c:149:
+		res->cnt_total_guarantee = (int ) cnt_total;

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#195: FILE: kernel/ckrm/ckrm_cpu.c:155:
+		childres =
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#197: FILE: kernel/ckrm/ckrm_cpu.c:157:
+		if (childres) {
 		    ^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#197: FILE: kernel/ckrm/ckrm_cpu.c:157:
+		if (childres) {
+		    spin_lock(&childres->cnt_lock);

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#199: FILE: kernel/ckrm/ckrm_cpu.c:159:
+		    recalc_and_propagate(childres);
 		                         ^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#205: FILE: kernel/ckrm/ckrm_cpu.c:165:
+	return;
+}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#230: FILE: kernel/ckrm/ckrm_cpu.c:190:
+	new->my_limit = new->max_limit = CKRM_SHARE_UNCHANGED;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#240: FILE: kernel/ckrm/ckrm_cpu.c:200:
+			temp = (u64) par->unused_guarantee

CHECK:SPACING: No space is necessary after a cast
#247: FILE: kernel/ckrm/ckrm_cpu.c:207:
+		temp = (u64) cur->unused_guarantee

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: kernel/ckrm/ckrm_cpu.c:242:
+	i = sprintf(buf, "cpu:effective_guarantee=%d, load=%d\n",
+			res->cpu_rc.guarantee, load);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#307: FILE: kernel/ckrm/ckrm_cpu.c:267:
+	if (res == NULL)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#315: FILE: kernel/ckrm/ckrm_cpu.c:275:
+static int __devinit ckrm_cpu_notify(struct notifier_block *self,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: kernel/ckrm/ckrm_cpu.c:276:
+static int __devinit ckrm_cpu_notify(struct notifier_block *self,
+				unsigned long action, void *hcpu)

CHECK:SPACING: No space is necessary after a cast
#321: FILE: kernel/ckrm/ckrm_cpu.c:281:
+	int	cpu = (long) hcpu;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#324: FILE: kernel/ckrm/ckrm_cpu.c:284:
+	switch (action)	{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: kernel/ckrm/ckrm_cpu.c:291:
+			res = ckrm_get_res_class(child, rcbs.resid,
+							struct ckrm_cpu);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#337: FILE: kernel/ckrm/ckrm_cpu.c:297:
+		/* FALL THROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#357: FILE: kernel/ckrm/ckrm_cpu.c:317:
+		printk(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_ckrm_cpu_res', this function's name, in a string
#358: FILE: kernel/ckrm/ckrm_cpu.c:318:
+			 "init_ckrm_cpu_res %d cpus available\n", grcd.numcpus);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#383: FILE: init/Kconfig:200:
+config CKRM_RES_CPU
+	bool "CPU Resource Controller"
+	select CPU_RC
+	depends on CKRM
+	default y
+	help
+	  Provides a CPU Resource Controller for CKRM.
+
+	  Say N if unsure, Y to use the feature.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'followings' may be misspelled - perhaps 'following'?
#439: FILE: Documentation/ckrm/cpurc:30:
+for each class. The followings is an example of class/guarantee settings
                     ^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000106358.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 20 warnings, 18 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000106358.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
