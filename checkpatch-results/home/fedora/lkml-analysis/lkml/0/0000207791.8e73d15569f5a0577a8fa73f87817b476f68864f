WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
- Change some u32 to long in acpi, to prevent invalid assembly code on x86-64.

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: arch/ppc/kernel/time.c:190:
+^I^I  ^Iif (ppc_md.set_rtc_time(xtime.tv_sec+1 + ppc_time_offset) == 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: arch/ppc/kernel/time.c:190:
+^I^I  ^Iif (ppc_md.set_rtc_time(xtime.tv_sec+1 + ppc_time_offset) == 0)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#137: FILE: arch/ppc/kernel/time.c:190:
+		  	if (ppc_md.set_rtc_time(xtime.tv_sec+1 + ppc_time_offset) == 0)
 		  	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: arch/ppc/kernel/time.c:300:
+                ppc_time_offset = ppc_md.time_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: arch/ppc/kernel/time.c:300:
+                ppc_time_offset = ppc_md.time_init();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: arch/ppc/kernel/time.c:347:
+        if (ppc_time_offset) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: arch/ppc/kernel/time.c:347:
+        if (ppc_time_offset) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: arch/ppc/kernel/time.c:349:
+        ^Itz.tz_minuteswest = -ppc_time_offset / 60;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: arch/ppc/kernel/time.c:349:
+        ^Itz.tz_minuteswest = -ppc_time_offset / 60;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/ppc/kernel/time.c:349:
+        ^Itz.tz_minuteswest = -ppc_time_offset / 60;$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#232: FILE: drivers/usb/inode.c:44:
+static struct inode_operations usbdevfs_bus_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#233: FILE: drivers/usb/inode.c:45:
+static struct file_operations usbdevfs_bus_file_operations;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#254: FILE: fs/hfs/trans.c:82:
+static inline __attribute_const__ unsigned char dehex(char c) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INLINE: plain inline is preferred over __inline__
#274: FILE: include/asm-i386/byteorder.h:14:
+static __inline__ __attribute_const__ __u32 ___arch__swab32(__u32 x)

WARNING:INLINE: plain inline is preferred over __inline__
#283: FILE: include/asm-i386/byteorder.h:30:
+static __inline__ __attribute_const__ __u16 ___arch__swab16(__u16 x)

WARNING:INLINE: plain inline is preferred over __inline__
#303: FILE: include/asm-ppc/byteorder.h:54:
+static __inline__ __attribute_const__ __u16 ___arch__swab16(__u16 value)

WARNING:INLINE: plain inline is preferred over __inline__
#312: FILE: include/asm-ppc/byteorder.h:62:
+static __inline__ __attribute_const__ __u32 ___arch__swab32(__u32 value)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#343: FILE: include/asm-ppc/time.h:61:
+extern __inline__ int __attribute_const__ __USE_RTC(void) {

WARNING:INLINE: plain inline is preferred over __inline__
#343: FILE: include/asm-ppc/time.h:61:
+extern __inline__ int __attribute_const__ __USE_RTC(void) {

WARNING:INLINE: plain inline is preferred over __inline__
#359: FILE: include/asm-x86_64/byteorder.h:9:
+static __inline__ __attribute_const__ __u64 ___arch__swab64(__u64 x)

WARNING:INLINE: plain inline is preferred over __inline__
#366: FILE: include/asm-x86_64/byteorder.h:15:
+static __inline__ __attribute_const__ __u32 ___arch__swab32(__u32 x)

WARNING:INLINE: plain inline is preferred over __inline__
#387: FILE: include/linux/byteorder/swab.h:161:
+static __inline__ __attribute_const__ __u16 __fswab16(__u16 x)

WARNING:INLINE: plain inline is preferred over __inline__
#396: FILE: include/linux/byteorder/swab.h:174:
+static __inline__ __attribute_const__ __u32 __fswab24(__u32 x)

WARNING:INLINE: plain inline is preferred over __inline__
#405: FILE: include/linux/byteorder/swab.h:187:
+static __inline__ __attribute_const__ __u32 __fswab32(__u32 x)

WARNING:INLINE: plain inline is preferred over __inline__
#414: FILE: include/linux/byteorder/swab.h:201:
+static __inline__ __attribute_const__ __u64 __fswab64(__u64 x)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __attribute_const__ over __attribute__((__const__))
#426: FILE: include/linux/compiler.h:31:
+#define __attribute_const__	__attribute__((__const__))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207791.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 20 warnings, 1 checks, 351 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207791.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
