WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
--- tmp/linux/Documentation/i386/kgdb/kgdb.txt	2004-01-09 19:04:43.000000000 +0100

WARNING:SPACING: space prohibited before semicolon
#1393: FILE: arch/i386/kernel/kgdb_stub.c:1382:
+	while (1) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1393: FILE: arch/i386/kernel/kgdb_stub.c:1382:
+	while (1) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1431: FILE: drivers/net/kgdb_eth.c:47:
+extern void	set_debug_traps(void);		/* GDB routine */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#1441: FILE: drivers/net/kgdb_eth.c:482:
+	if(outgoing_queue == ETH_QUEUE_SIZE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1441: FILE: drivers/net/kgdb_eth.c:482:
+	if(outgoing_queue == ETH_QUEUE_SIZE) {
 		eth_flushDebugChar();
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1452: FILE: include/asm-i386/kgdb_local.h:86:
+extern void put_debug_char(int);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1461: FILE: include/asm-i386/kgdb_local.h:101:
+#define INIT_KDEBUG put_debug_char("+");	/* WTF is this? it expects integer! */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2342: FILE: kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'initilization' may be misspelled - perhaps 'initialization'?
#2382: FILE: kernel/kgdb.c:41:
+ *  Changes to allow auto initilization.  All that is needed is that it
                           ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Function>
#2450: FILE: kernel/kgdb.c:109:
+typedef void (*Function) (void);	/* pointer to a function */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2453: FILE: kernel/kgdb.c:112:
+typedef unsigned char threadref[8];

CHECK:CAMELCASE: Avoid CamelCase: <tty_putDebugChar>
#2455: FILE: kernel/kgdb.c:114:
+extern int tty_putDebugChar(int);     /* write a single character      */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2455: FILE: kernel/kgdb.c:114:
+extern int tty_putDebugChar(int);     /* write a single character      */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2455: FILE: kernel/kgdb.c:114:
+extern int tty_putDebugChar(int);     /* write a single character      */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <tty_getDebugChar>
#2456: FILE: kernel/kgdb.c:115:
+extern int tty_getDebugChar(void);    /* read and return a single char */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2456: FILE: kernel/kgdb.c:115:
+extern int tty_getDebugChar(void);    /* read and return a single char */

CHECK:CAMELCASE: Avoid CamelCase: <tty_flushDebugChar>
#2457: FILE: kernel/kgdb.c:116:
+extern void tty_flushDebugChar(void); /* flush pending characters      */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2457: FILE: kernel/kgdb.c:116:
+extern void tty_flushDebugChar(void); /* flush pending characters      */

CHECK:CAMELCASE: Avoid CamelCase: <eth_putDebugChar>
#2458: FILE: kernel/kgdb.c:117:
+extern int eth_putDebugChar(int);     /* write a single character      */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2458: FILE: kernel/kgdb.c:117:
+extern int eth_putDebugChar(int);     /* write a single character      */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2458: FILE: kernel/kgdb.c:117:
+extern int eth_putDebugChar(int);     /* write a single character      */

CHECK:CAMELCASE: Avoid CamelCase: <eth_getDebugChar>
#2459: FILE: kernel/kgdb.c:118:
+extern int eth_getDebugChar(void);    /* read and return a single char */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2459: FILE: kernel/kgdb.c:118:
+extern int eth_getDebugChar(void);    /* read and return a single char */

CHECK:CAMELCASE: Avoid CamelCase: <eth_flushDebugChar>
#2460: FILE: kernel/kgdb.c:119:
+extern void eth_flushDebugChar(void); /* flush pending characters      */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2460: FILE: kernel/kgdb.c:119:
+extern void eth_flushDebugChar(void); /* flush pending characters      */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2461: FILE: kernel/kgdb.c:120:
+extern void kgdb_eth_set_trapmode(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2461: FILE: kernel/kgdb.c:120:
+extern void kgdb_eth_set_trapmode(int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2462: FILE: kernel/kgdb.c:121:
+extern void kgdb_eth_reply_arp(void);   /* send arp request */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2463: FILE: kernel/kgdb.c:122:
+extern volatile int kgdb_eth_is_initializing;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2463: FILE: kernel/kgdb.c:122:
+extern volatile int kgdb_eth_is_initializing;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2465: FILE: kernel/kgdb.c:124:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2475: FILE: kernel/kgdb.c:134:
+int debug_regs = 0;		/* set to non-zero to print registers */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2482: FILE: kernel/kgdb.c:141:
+
+

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#2489: FILE: kernel/kgdb.c:148:
+ * This will allow him to seperate out the various possible entries.
                           ^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2507: FILE: kernel/kgdb.c:166:
+#define hold_init hold_on_sstep: 1,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2508: FILE: kernel/kgdb.c:167:
+#define MAX_CPU_MASK (unsigned long)((1LL << MAX_NO_CPUS) - 1LL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2517: FILE: kernel/kgdb.c:176:
+#define NOCPU (struct task_struct *)0xbad1fbad

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2529: FILE: kernel/kgdb.c:188:
+		volatile struct task_struct *task;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2535: FILE: kernel/kgdb.c:194:
+} kgdb_info = { hold_init print_debug_info:REMOTE_DEBUG, vector:-1 };
                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#2535: FILE: kernel/kgdb.c:194:
+} kgdb_info = { hold_init print_debug_info:REMOTE_DEBUG, vector:-1 };
                                                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#2535: FILE: kernel/kgdb.c:194:
+} kgdb_info = { hold_init print_debug_info:REMOTE_DEBUG, vector:-1 };
                                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2553: FILE: kernel/kgdb.c:212:
+#define END_OF_LOOKASIDE  &fn_call_lookaside[trap_cpu].array[LOOKASIDE_SIZE]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2555: FILE: kernel/kgdb.c:214:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2556: FILE: kernel/kgdb.c:215:
+#define MALLOC_ROUND 8-1
                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2556: FILE: kernel/kgdb.c:215:
+#define MALLOC_ROUND 8-1

WARNING:LINE_SPACING: Missing a blank line after declarations
#2570: FILE: kernel/kgdb.c:229:
+		int old_used = kgdb_info.used_malloc;
+		kgdb_info.used_malloc += ((size + MALLOC_ROUND) & (~MALLOC_ROUND));

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2585: FILE: kernel/kgdb.c:244:
+	if (kgdb_eth == -1) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2595: FILE: kernel/kgdb.c:254:
+	if (kgdb_eth == -1) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2605: FILE: kernel/kgdb.c:264:
+	if (kgdb_eth == -1) {
[...]
+	} else {
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2620: FILE: kernel/kgdb.c:279:
+    {[0 ... MAX_NO_CPUS - 1] = SPIN_LOCK_UNLOCKED };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2620: FILE: kernel/kgdb.c:279:
+static spinlock_t waitlocks[MAX_NO_CPUS] =
+    {[0 ... MAX_NO_CPUS - 1] = SPIN_LOCK_UNLOCKED };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2625: FILE: kernel/kgdb.c:284:
+volatile int in_kgdb_entry_log[MAX_NO_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2626: FILE: kernel/kgdb.c:285:
+volatile struct pt_regs *in_kgdb_here_log[MAX_NO_CPUS];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2628: FILE: kernel/kgdb.c:287:
+/*
+static spinlock_t continuelocks[MAX_NO_CPUS];

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2633: FILE: kernel/kgdb.c:292:
+static int spinlock_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2634: FILE: kernel/kgdb.c:293:
+static int spinlock_cpu = 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#2642: FILE: kernel/kgdb.c:301:
+#define KGDB_SPIN_LOCK(x) if (spinlock_count == 0 || \
+			      spinlock_cpu != smp_processor_id()) {\
+				      atomic_inc(&spinlock_waiters); \
+				      while (! spin_trylock(x)) {\
+					    in_kgdb(&regs);\
+				      }\
+				      atomic_dec(&spinlock_waiters); \
+				      spinlock_count = 1; \
+				      spinlock_cpu = smp_processor_id(); \
+			  }else{  \
+				      spinlock_count++; \
+			  }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TABSTOP: Statements should start on a tabstop
#2645: FILE: kernel/kgdb.c:304:
+				      while (! spin_trylock(x)) {\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (38, 44)
#2645: FILE: kernel/kgdb.c:304:
+				      while (! spin_trylock(x)) {\
+					    in_kgdb(&regs);\

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2645: FILE: kernel/kgdb.c:304:
+				      while (! spin_trylock(x)) {\
 				             ^

ERROR:SPACING: space required after that close brace '}'
#2647: FILE: kernel/kgdb.c:306:
+				      }\

WARNING:TABSTOP: Statements should start on a tabstop
#2651: FILE: kernel/kgdb.c:310:
+			  }else{  \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (26, 38)
#2651: FILE: kernel/kgdb.c:310:
+			  }else{  \
+				      spinlock_count++; \

ERROR:SPACING: space required before the open brace '{'
#2651: FILE: kernel/kgdb.c:310:
+			  }else{  \

ERROR:SPACING: space required after that close brace '}'
#2651: FILE: kernel/kgdb.c:310:
+			  }else{  \

WARNING:TABSTOP: Statements should start on a tabstop
#2653: FILE: kernel/kgdb.c:312:
+			  }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#2654: FILE: kernel/kgdb.c:313:
+#define KGDB_SPIN_UNLOCK(x) if (--spinlock_count == 0) spin_unlock(x)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2656: FILE: kernel/kgdb.c:315:
+unsigned kgdb_spinlock = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2656: FILE: kernel/kgdb.c:315:
+unsigned kgdb_spinlock = 0;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2657: FILE: kernel/kgdb.c:316:
+#define KGDB_SPIN_LOCK(x) --*x

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2657: FILE: kernel/kgdb.c:316:
+#define KGDB_SPIN_LOCK(x) --*x

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2658: FILE: kernel/kgdb.c:317:
+#define KGDB_SPIN_UNLOCK(x) ++*x

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2658: FILE: kernel/kgdb.c:317:
+#define KGDB_SPIN_UNLOCK(x) ++*x

WARNING:SPACING: space prohibited before semicolon
#2685: FILE: kernel/kgdb.c:344:
+		while ((ch = (get_debug_char() & 0x7f)) != '$') ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2685: FILE: kernel/kgdb.c:344:
+		while ((ch = (get_debug_char() & 0x7f)) != '$') ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'checksum != xmitcsum'
#2705: FILE: kernel/kgdb.c:364:
+			if ((remote_debug) && (checksum != xmitcsum)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#2713: FILE: kernel/kgdb.c:372:
+			else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2729: FILE: kernel/kgdb.c:388:
+		printk("R:%s\n", buffer);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2747: FILE: kernel/kgdb.c:406:
+				printk("T:%s\n", buffer);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2777: FILE: kernel/kgdb.c:436:
+				printk("T:%s\n", buffer);

ERROR:SPACING: space required before the open parenthesis '('
#2784: FILE: kernel/kgdb.c:443:
+					for(i = 0; i < MAX_SEND_COUNT; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2784: FILE: kernel/kgdb.c:443:
+					for(i = 0; i < MAX_SEND_COUNT; i++) {
+						put_debug_char(send_buf[i]);
+					}

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#2792: FILE: kernel/kgdb.c:451:
+					count ++;
 					      ^

ERROR:SPACING: space required before the open parenthesis '('
#2796: FILE: kernel/kgdb.c:455:
+			for(i = 0; i < send_count; i++)

CHECK:CAMELCASE: Avoid CamelCase: <remcomInBuffer>
#2806: FILE: kernel/kgdb.c:465:
+static char remcomInBuffer[BUFMAX];

CHECK:CAMELCASE: Avoid CamelCase: <remcomOutBuffer>
#2807: FILE: kernel/kgdb.c:466:
+static char remcomOutBuffer[BUFMAX];

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#2811: FILE: kernel/kgdb.c:470:
+debug_error(char *format, char *parm)
                                 ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#2814: FILE: kernel/kgdb.c:473:
+		printk(format, parm);
 		               ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2814: FILE: kernel/kgdb.c:473:
+		printk(format, parm);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2818: FILE: kernel/kgdb.c:477:
+extern void scheduling_functions_end_here(void);

CHECK:SPACING: No space is necessary after a cast
#2819: FILE: kernel/kgdb.c:478:
+#define first_sched	((unsigned long) scheduling_functions_start_here)

CHECK:SPACING: No space is necessary after a cast
#2820: FILE: kernel/kgdb.c:479:
+#define last_sched	((unsigned long) scheduling_functions_end_here)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2823: FILE: kernel/kgdb.c:482:
+/* Indicate to caller of mem2hex or hex2mem that there has been an
+   error.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2823: FILE: kernel/kgdb.c:482:
+   error.  */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2824: FILE: kernel/kgdb.c:483:
+static volatile int mem_err = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2824: FILE: kernel/kgdb.c:483:
+static volatile int mem_err = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2825: FILE: kernel/kgdb.c:484:
+static volatile int mem_err_expected = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2825: FILE: kernel/kgdb.c:484:
+static volatile int mem_err_expected = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2826: FILE: kernel/kgdb.c:485:
+static volatile int mem_err_cnt = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2826: FILE: kernel/kgdb.c:485:
+static volatile int mem_err_cnt = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2841: FILE: kernel/kgdb.c:500:
+/* If MAY_FAULT is non-zero, then we should set mem_err in response to
+   a fault; if zero treat a fault like any other fault in the stub.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2841: FILE: kernel/kgdb.c:500:
+   a fault; if zero treat a fault like any other fault in the stub.  */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2860: FILE: kernel/kgdb.c:519:
+				printk("Mem fault fetching from addr %lx\n",

CHECK:SPACING: No space is necessary after a cast
#2861: FILE: kernel/kgdb.c:520:
+				       (long) (mem - 1));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2863: FILE: kernel/kgdb.c:522:
+			return (buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2871: FILE: kernel/kgdb.c:530:
+	return (buf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2896: FILE: kernel/kgdb.c:555:
+				printk("Mem fault storing to addr %lx\n",

CHECK:SPACING: No space is necessary after a cast
#2897: FILE: kernel/kgdb.c:556:
+				       (long) (mem - 1));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2898: FILE: kernel/kgdb.c:557:
+			return (mem);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2903: FILE: kernel/kgdb.c:562:
+	return (mem);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2908: FILE: kernel/kgdb.c:567:
+ * return number of chars processed^I     $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <hexToInt>
#2911: FILE: kernel/kgdb.c:570:
+hexToInt(char **ptr, int *intValue)

CHECK:CAMELCASE: Avoid CamelCase: <intValue>
#2911: FILE: kernel/kgdb.c:570:
+hexToInt(char **ptr, int *intValue)

CHECK:CAMELCASE: Avoid CamelCase: <numChars>
#2913: FILE: kernel/kgdb.c:572:
+	int numChars = 0;

CHECK:CAMELCASE: Avoid CamelCase: <hexValue>
#2914: FILE: kernel/kgdb.c:573:
+	int hexValue;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2920: FILE: kernel/kgdb.c:579:
+		if (hexValue >= 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2923: FILE: kernel/kgdb.c:582:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2962: FILE: kernel/kgdb.c:621:
+pack_threadid(char *pkt, threadref * id)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#2967: FILE: kernel/kgdb.c:626:
+	altid = (unsigned char *) id;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2983: FILE: kernel/kgdb.c:642:
+unpack_threadid(char *inbuf, threadref * id)

CHECK:SPACING: No space is necessary after a cast
#2989: FILE: kernel/kgdb.c:648:
+	altref = (char *) id;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3001: FILE: kernel/kgdb.c:660:
+int_to_threadref(threadref * id, int value)

CHECK:SPACING: No space is necessary after a cast
#3005: FILE: kernel/kgdb.c:664:
+	scan = (unsigned char *) id;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3008: FILE: kernel/kgdb.c:667:
+		int i = 4;
+		while (i--)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3018: FILE: kernel/kgdb.c:677:
+int_to_hex_v(unsigned char * id, int value)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id != start'
#3025: FILE: kernel/kgdb.c:684:
+		if ((ch = (value >> shift) & 0xf) || (id != start)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3025: FILE: kernel/kgdb.c:684:
+		if ((ch = (value >> shift) & 0xf) || (id != start)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3035: FILE: kernel/kgdb.c:694:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3038: FILE: kernel/kgdb.c:697:
+threadref_to_int(threadref * ref)

CHECK:SPACING: No space is necessary after a cast
#3043: FILE: kernel/kgdb.c:702:
+	scan = (char *) ref;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3066: FILE: kernel/kgdb.c:725:
+extern int kgdb_pid_init_done;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3072: FILE: kernel/kgdb.c:731:
+	struct task_struct *thread;
+	if (pid >= PID_MAX && pid <= (PID_MAX + MAX_NO_CPUS)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3073: FILE: kernel/kgdb.c:732:
+	if (pid >= PID_MAX && pid <= (PID_MAX + MAX_NO_CPUS)) {
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3075: FILE: kernel/kgdb.c:734:
+		return idle_task(pid - PID_MAX);
+	} else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3085: FILE: kernel/kgdb.c:744:
+			if (thread) {
+				return thread;
+			}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000313002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 60 warnings, 36 checks, 2127 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000313002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
