WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -Nur --exclude=SCCS --exclude=BitKeeper --exclude=ChangeSet linux-2.5/Documentation/i386/zero-page.txt linux-2.5-edd/Documentation/i386/zero-page.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: arch/i386/boot/setup.S:47:
+ *    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: arch/i386/boot/setup.S:49:
+ * by Matt Domsch <Matt_Domsch@dell.com> September 2002 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: arch/i386/boot/setup.S:59:
+#include <asm/edd.h>    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: arch/i386/boot/setup.S:553:
+edd_start:  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: arch/i386/boot/setup.S:557:
+^I^I^I^I^I^I# kept just before that    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: arch/i386/boot/setup.S:574:
+        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: arch/i386/boot/setup.S:575:
+edd_get_device_params:  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/i386/boot/setup.S:589:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: arch/i386/boot/setup.S:590:
+edd_done:   $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#180: FILE: arch/i386/kernel/edd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#181: FILE: arch/i386/kernel/edd.c:2:
+ * linux/arch/i386/kernel/edd.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Parametes' may be misspelled - perhaps 'Parameters'?
#191: FILE: arch/i386/kernel/edd.c:12:
+ * fn48 - Get Device Parametes with EDD extensions
                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#254: FILE: arch/i386/kernel/edd.c:75:
+	.mode = (S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: arch/i386/kernel/edd.c:87:
+	ssize_t(*show) (struct edd_device * edev, char *buf, size_t count,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: missing space after return type
#266: FILE: arch/i386/kernel/edd.c:87:
+	ssize_t(*show) (struct edd_device * edev, char *buf, size_t count,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#266: FILE: arch/i386/kernel/edd.c:87:
+	ssize_t(*show) (struct edd_device * edev, char *buf, size_t count,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: arch/i386/kernel/edd.c:98:
+#define EDD_DEVICE_ATTR(_name,_mode,_show) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: arch/i386/kernel/edd.c:98:
+#define EDD_DEVICE_ATTR(_name,_mode,_show) \
                                    ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#277: FILE: arch/i386/kernel/edd.c:98:
+#define EDD_DEVICE_ATTR(_name,_mode,_show) \
+struct edd_attribute edd_attr_##_name = { 	\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.show	= _show,				\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: arch/i386/kernel/edd.c:99:
+struct edd_attribute edd_attr_##_name = { ^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#288: FILE: arch/i386/kernel/edd.c:109:
+}
+static inline void

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: arch/i386/kernel/edd.c:115:
+#define to_edd_attr(_attr) container_of(_attr,struct edd_attribute,attr)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: arch/i386/kernel/edd.c:115:
+#define to_edd_attr(_attr) container_of(_attr,struct edd_attribute,attr)
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: arch/i386/kernel/edd.c:116:
+#define to_edd_device(_dir) container_of(_dir,struct edd_device,dir)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: arch/i386/kernel/edd.c:116:
+#define to_edd_device(_dir) container_of(_dir,struct edd_device,dir)
                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: arch/i386/kernel/edd.c:144:
+	const char maxcolumn = 16;
+	while (length_printed < length) {

CHECK:SPACING: No space is necessary after a cast
#328: FILE: arch/i386/kernel/edd.c:149:
+			b1 += sprintf(b1, "%02x ", (unsigned char) *p);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: arch/i386/kernel/edd.c:176:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#360: FILE: arch/i386/kernel/edd.c:181:
+		if (isprint(info->params.host_bus_type[i])) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#399: FILE: arch/i386/kernel/edd.c:220:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#404: FILE: arch/i386/kernel/edd.c:225:
+		if (isprint(info->params.interface_type[i])) {
[...]
+		} else {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#459: FILE: arch/i386/kernel/edd.c:280:
+		len = sizeof (*edd) - 4, found_pci=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#459: FILE: arch/i386/kernel/edd.c:280:
+		len = sizeof (*edd) - 4, found_pci=0;
 		                                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#460: FILE: arch/i386/kernel/edd.c:281:
+	uint8_t checksum = 0, c = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: arch/i386/kernel/edd.c:283:
+	struct pci_dev *pci_dev=NULL;
 	                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#464: FILE: arch/i386/kernel/edd.c:285:
+	struct scsi_device *sd;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#464: FILE: arch/i386/kernel/edd.c:285:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

CHECK:SPACING: No space is necessary after a cast
#472: FILE: arch/i386/kernel/edd.c:293:
+	p += edd_dump_raw_data(p, ((char *) edd) + 4, len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#475: FILE: arch/i386/kernel/edd.c:296:
+	/* Spec violation.  Adaptec AIC7899 returns 0xDDBE
+	   here, when it should be 0xBEDD.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#484: FILE: arch/i386/kernel/edd.c:305:
+	if (!(info->params.key == 0xBEDD || info->params.key == 0xDDBE)) {
+		goto out;
+	}

CHECK:SPACING: No space is necessary after a cast
#489: FILE: arch/i386/kernel/edd.c:310:
+		c = *(((uint8_t *) edd) + i + 4);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#508: FILE: arch/i386/kernel/edd.c:329:
+		if (!isprint(info->params.host_bus_type[i])) {
+			warn_padding++;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#513: FILE: arch/i386/kernel/edd.c:334:
+		if (!isprint(info->params.interface_type[i])) {
+			warn_padding++;
+		}

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->params.interface_path.pci.slot'
#528: FILE: arch/i386/kernel/edd.c:349:
+					PCI_DEVFN(info->params.interface_path.
+						  pci.slot,

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->params.interface_path.pci.function'
#530: FILE: arch/i386/kernel/edd.c:351:
+						  info->params.interface_path.
+						  pci.function));

WARNING:LONG_LINE_STRING: line length of 108 exceeds 100 columns
#532: FILE: arch/i386/kernel/edd.c:353:
+			p += sprintf(p, "Error: BIOS says this is a PCI device, but the OS doesn't know\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#539: FILE: arch/i386/kernel/edd.c:360:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#539: FILE: arch/i386/kernel/edd.c:360:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: arch/i386/kernel/edd.c:390:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#569: FILE: arch/i386/kernel/edd.c:390:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: arch/i386/kernel/edd.c:404:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#583: FILE: arch/i386/kernel/edd.c:404:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#587: FILE: arch/i386/kernel/edd.c:408:
+	if (info->interface_support & EDD_EXT_FIXED_DISK_ACCESS) {
+		p += sprintf(p, "Fixed disk access\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#590: FILE: arch/i386/kernel/edd.c:411:
+	if (info->interface_support & EDD_EXT_DEVICE_LOCKING_AND_EJECTING) {
+		p += sprintf(p, "Device locking and ejecting\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#593: FILE: arch/i386/kernel/edd.c:414:
+	if (info->interface_support & EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT) {
+		p += sprintf(p, "Enhanced Disk Drive support\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#596: FILE: arch/i386/kernel/edd.c:417:
+	if (info->interface_support & EDD_EXT_64BIT_EXTENSIONS) {
+		p += sprintf(p, "64-bit extensions\n");
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: arch/i386/kernel/edd.c:429:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#608: FILE: arch/i386/kernel/edd.c:429:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#613: FILE: arch/i386/kernel/edd.c:434:
+		p += sprintf(p, "DMA boundry error transparent\n");
 		                     ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#637: FILE: arch/i386/kernel/edd.c:458:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#637: FILE: arch/i386/kernel/edd.c:458:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: arch/i386/kernel/edd.c:472:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#651: FILE: arch/i386/kernel/edd.c:472:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: arch/i386/kernel/edd.c:486:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#665: FILE: arch/i386/kernel/edd.c:486:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: arch/i386/kernel/edd.c:499:
+	char *p = buf;
+	if (!edev || !info || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#678: FILE: arch/i386/kernel/edd.c:499:
+	if (!edev || !info || !buf || off) {
+		return 0;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#714: FILE: arch/i386/kernel/edd.c:535:
+	int (*test) (struct edd_device * edev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#714: FILE: arch/i386/kernel/edd.c:535:
+	int (*test) (struct edd_device * edev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#721: FILE: arch/i386/kernel/edd.c:542:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: arch/i386/kernel/edd.c:551:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: arch/i386/kernel/edd.c:560:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#754: FILE: arch/i386/kernel/edd.c:575:
+	if (!(info->params.key == 0xBEDD || info->params.key == 0xDDBE)) {
+		return 1;
+	}

CHECK:SPACING: No space is necessary after a cast
#759: FILE: arch/i386/kernel/edd.c:580:
+		c = *(((uint8_t *) edd) + i + 4);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#765: FILE: arch/i386/kernel/edd.c:586:
+	if (!nonzero_path) {
+		return 1;
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#788: FILE: arch/i386/kernel/edd.c:609:
+	{.attr = NULL,.test = NULL},
 	             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#792: FILE: arch/i386/kernel/edd.c:613:
+/* edd_get_devpath_length(), edd_fill_devpath(), and edd_device_link()
+   were taken from linux/drivers/base/fs/device.c.  When these

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#848: FILE: arch/i386/kernel/edd.c:669:
+	if (!(path = kmalloc(length, GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#873: FILE: arch/i386/kernel/edd.c:694:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->params.interface_path.pci.function'
#902: FILE: arch/i386/kernel/edd.c:723:
+				       info->params.interface_path.pci.
+				       function));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#908: FILE: arch/i386/kernel/edd.c:729:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: arch/i386/kernel/edd.c:731:
+	struct pci_dev *pci_dev = edd_get_pci_dev(edev);
+	if (!pci_dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: arch/i386/kernel/edd.c:740:
+ * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->channel == info->params.interface_path.pci.channel'
#930: FILE: arch/i386/kernel/edd.c:751:
+	if ((sd->channel == info->params.interface_path.pci.channel) &&
+	    (sd->id == info->params.device_path.scsi.id) &&
+	    (sd->lun == info->params.device_path.scsi.lun)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->id == info->params.device_path.scsi.id'
#930: FILE: arch/i386/kernel/edd.c:751:
+	if ((sd->channel == info->params.interface_path.pci.channel) &&
+	    (sd->id == info->params.device_path.scsi.id) &&
+	    (sd->lun == info->params.device_path.scsi.lun)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->lun == info->params.device_path.scsi.lun'
#930: FILE: arch/i386/kernel/edd.c:751:
+	if ((sd->channel == info->params.interface_path.pci.channel) &&
+	    (sd->id == info->params.device_path.scsi.id) &&
+	    (sd->lun == info->params.device_path.scsi.lun)) {

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#952: FILE: arch/i386/kernel/edd.c:773:
+	container_of(d, struct Scsi_Host, host_driverfs_dev)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#953: FILE: arch/i386/kernel/edd.c:774:
+#define children_to_dev(n) container_of(n,struct device,node)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#953: FILE: arch/i386/kernel/edd.c:774:
+#define children_to_dev(n) container_of(n,struct device,node)
                                                        ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1002: FILE: arch/i386/kernel/edd.c:823:
+{
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->params.interface_path.pci.function'
#1015: FILE: arch/i386/kernel/edd.c:836:
+					  info->params.interface_path.pci.
+					  function));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1055: FILE: arch/i386/kernel/edd.c:876:
+			if ((error = edd_create_file(edev, s->attr))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1055: FILE: arch/i386/kernel/edd.c:876:
+			if ((error = edd_create_file(edev, s->attr))) {
+				break;
+			}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#1076: FILE: arch/i386/kernel/edd.c:897:
+	edev->dir.mode = (S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1092: FILE: arch/i386/kernel/edd.c:913:
+	memset(edev, 0, sizeof (*edev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1113: FILE: arch/i386/kernel/edd.c:934:
+	printk(KERN_INFO "BIOS EDD facility v%s, %d devices found\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1117: FILE: arch/i386/kernel/edd.c:938:
+		printk(KERN_INFO "EDD information not available.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1126: FILE: arch/i386/kernel/edd.c:947:
+		edev = kmalloc(sizeof (*edev), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1153: FILE: arch/i386/kernel/edd.c:974:
+		if ((edev = edd_devices[i])) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1182: FILE: arch/i386/kernel/i386_ksyms.c:189:
+EXPORT_SYMBOL(eddnr);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1199: FILE: arch/i386/kernel/setup.c:470:
+#if defined(CONFIG_EDD) || defined(CONFIG_EDD_MODULE)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1208: FILE: arch/i386/kernel/setup.c:479:
+     eddnr = EDD_NR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1209: FILE: arch/i386/kernel/setup.c:480:
+     memcpy(edd, EDD_BUF, sizeof(edd));$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1230: FILE: include/asm-i386/edd.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1231: FILE: include/asm-i386/edd.h:2:
+ * linux/include/asm-i386/edd.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1263: FILE: include/asm-i386/edd.h:34:
+#define EDDNR 0x1e9		/* addr of number of edd_info structs at EDDBUF
+				   in empty_zero_block - treat this as 1 byte  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1263: FILE: include/asm-i386/edd.h:34:
+				   in empty_zero_block - treat this as 1 byte  */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1271: FILE: include/asm-i386/edd.h:42:
+#define EDD_EXT_FIXED_DISK_ACCESS           (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1272: FILE: include/asm-i386/edd.h:43:
+#define EDD_EXT_DEVICE_LOCKING_AND_EJECTING (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1273: FILE: include/asm-i386/edd.h:44:
+#define EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1274: FILE: include/asm-i386/edd.h:45:
+#define EDD_EXT_64BIT_EXTENSIONS            (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1276: FILE: include/asm-i386/edd.h:47:
+#define EDD_INFO_DMA_BOUNDRY_ERROR_TRANSPARENT (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1277: FILE: include/asm-i386/edd.h:48:
+#define EDD_INFO_GEOMETRY_VALID                (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1278: FILE: include/asm-i386/edd.h:49:
+#define EDD_INFO_REMOVABLE                     (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1279: FILE: include/asm-i386/edd.h:50:
+#define EDD_INFO_WRITE_VERIFY                  (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1280: FILE: include/asm-i386/edd.h:51:
+#define EDD_INFO_MEDIA_CHANGE_NOTIFICATION     (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1281: FILE: include/asm-i386/edd.h:52:
+#define EDD_INFO_LOCKABLE                      (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1282: FILE: include/asm-i386/edd.h:53:
+#define EDD_INFO_NO_MEDIA_PRESENT              (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1283: FILE: include/asm-i386/edd.h:54:
+#define EDD_INFO_USE_INT13_FN50                (1 << 7)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1305: FILE: include/asm-i386/edd.h:76:
+		} __attribute__ ((packed)) isa;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1312: FILE: include/asm-i386/edd.h:83:
+		} __attribute__ ((packed)) pci;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1316: FILE: include/asm-i386/edd.h:87:
+		} __attribute__ ((packed)) ibnd;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1319: FILE: include/asm-i386/edd.h:90:
+		} __attribute__ ((packed)) xprs;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1322: FILE: include/asm-i386/edd.h:93:
+		} __attribute__ ((packed)) htpt;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1325: FILE: include/asm-i386/edd.h:96:
+		} __attribute__ ((packed)) unknown;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1334: FILE: include/asm-i386/edd.h:105:
+		} __attribute__ ((packed)) ata;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1342: FILE: include/asm-i386/edd.h:113:
+		} __attribute__ ((packed)) atapi;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1348: FILE: include/asm-i386/edd.h:119:
+		} __attribute__ ((packed)) scsi;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1352: FILE: include/asm-i386/edd.h:123:
+		} __attribute__ ((packed)) usb;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1356: FILE: include/asm-i386/edd.h:127:
+		} __attribute__ ((packed)) i1394;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1360: FILE: include/asm-i386/edd.h:131:
+		} __attribute__ ((packed)) fibre;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1364: FILE: include/asm-i386/edd.h:135:
+		} __attribute__ ((packed)) i2o;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1376: FILE: include/asm-i386/edd.h:147:
+		} __attribute__ ((packed)) sata;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1380: FILE: include/asm-i386/edd.h:151:
+		} __attribute__ ((packed)) unknown;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1384: FILE: include/asm-i386/edd.h:155:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1391: FILE: include/asm-i386/edd.h:162:
+} __attribute__ ((packed));

CHECK:SPACING: No space is necessary after a cast
#1405: FILE: include/asm-i386/setup.h:40:
+#define EDD_NR     (*(unsigned char *) (PARAM+EDDNR))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1405: FILE: include/asm-i386/setup.h:40:
+#define EDD_NR     (*(unsigned char *) (PARAM+EDDNR))
                                              ^

CHECK:SPACING: No space is necessary after a cast
#1406: FILE: include/asm-i386/setup.h:41:
+#define EDD_BUF     ((struct edd_info *) (PARAM+EDDBUF))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1406: FILE: include/asm-i386/setup.h:41:
+#define EDD_BUF     ((struct edd_info *) (PARAM+EDDBUF))
                                                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424753.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 85 warnings, 29 checks, 1325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424753.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
