WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
  timer interrupt, but is otherwise not utilized by any other subsystem yet.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: include/linux/hrtimer.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#45: FILE: include/linux/hrtimer.h:2:
+ *  include/linux/hrtimer.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#112: FILE: include/linux/hrtimer.h:69:
+	int			(*function)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#131: FILE: include/linux/hrtimer.h:88:
+	spinlock_t		lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/hrtimer.h:99:
+extern void hrtimer_init(struct hrtimer *timer, const clockid_t which_clock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/hrtimer.h:100:
+extern void hrtimer_rebase(struct hrtimer *timer, const clockid_t which_clock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#145: FILE: include/linux/hrtimer.h:102:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/hrtimer.h:104:
+extern int hrtimer_start(struct hrtimer *timer, ktime_t tim,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/hrtimer.h:106:
+extern int hrtimer_cancel(struct hrtimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/linux/hrtimer.h:107:
+extern int hrtimer_try_to_cancel(struct hrtimer *timer);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'timer' - possible side-effects?
#152: FILE: include/linux/hrtimer.h:109:
+#define hrtimer_restart(timer) hrtimer_start((timer), (timer)->expires, HRTIMER_ABS)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/hrtimer.h:112:
+extern ktime_t hrtimer_get_remaining(const struct hrtimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/hrtimer.h:113:
+extern int hrtimer_get_res(const clockid_t which_clock, struct timespec *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/hrtimer.h:121:
+extern unsigned long hrtimer_forward(struct hrtimer *timer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/hrtimer.h:125:
+extern void hrtimer_run_queues(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: include/linux/hrtimer.h:128:
+extern void __init hrtimers_init(void);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#188: FILE: include/linux/ktime.h:275:
+#define KTIME_REALTIME_RES	(NSEC_PER_SEC/HZ)
                           	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#189: FILE: include/linux/ktime.h:276:
+#define KTIME_MONOTONIC_RES	(NSEC_PER_SEC/HZ)
                            	             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/ktime.h:279:
+extern void ktime_get_ts(struct timespec *ts);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#229: FILE: kernel/hrtimer.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#230: FILE: kernel/hrtimer.c:2:
+ *  linux/kernel/hrtimer.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#263: FILE: kernel/hrtimer.c:35:
+#include <asm/uaccess.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: kernel/hrtimer.c:65:
+EXPORT_SYMBOL_GPL(ktime_get_real);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#302: FILE: kernel/hrtimer.c:74:
+static DEFINE_PER_CPU(struct hrtimer_base, hrtimer_bases[MAX_HRTIMER_BASES]) =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#346: FILE: kernel/hrtimer.c:118:
+#define set_curr_timer(b, t)		do { (b)->curr_timer = (t); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base"
#367: FILE: kernel/hrtimer.c:139:
+		if (likely(base != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#469: FILE: kernel/hrtimer.c:241:
+	dclc = dns = ktime_to_ns(kt);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#477: FILE: kernel/hrtimer.c:249:
+	do_div(dclc, (unsigned long) div);

CHECK:SPACING: No space is necessary after a cast
#479: FILE: kernel/hrtimer.c:251:
+	return (unsigned long) dclc;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#483: FILE: kernel/hrtimer.c:255:
+# define ktime_divns(kt, div)		(unsigned long)((kt).tv64 / (div))

CHECK:BRACES: braces {} should be used on all arms of this statement
#558: FILE: kernel/hrtimer.c:330:
+		if (timer->expires.tv64 < entry->expires.tv64)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: kernel/hrtimer.c:332:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: kernel/hrtimer.c:348:
+
+

WARNING:TYPO_SPELLING: 'excuting' may be misspelled - perhaps 'executing'?
#650: FILE: kernel/hrtimer.c:422:
+ * -1 when the timer is currently excuting the callback function and
                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#668: FILE: kernel/hrtimer.c:440:
+
+}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#764: FILE: kernel/hrtimer.c:536:
+		int (*fn)(void *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#782: FILE: kernel/hrtimer.c:554:
+		if (!fn) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#785: FILE: kernel/hrtimer.c:557:
+		} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#814: FILE: kernel/hrtimer.c:586:
+static void __devinit init_hrtimers_cpu(int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: kernel/hrtimer.c:601:
+static void migrate_hrtimer_list(struct hrtimer_base *old_base,
+				struct hrtimer_base *new_base)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#847: FILE: kernel/hrtimer.c:619:
+	BUG_ON(cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#854: FILE: kernel/hrtimer.c:626:
+	for (i = 0; i < MAX_HRTIMER_BASES; i++) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#858: FILE: kernel/hrtimer.c:630:
+		BUG_ON(old_base->curr_timer);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#873: FILE: kernel/hrtimer.c:645:
+static int __devinit hrtimer_cpu_notify(struct notifier_block *self,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#879: FILE: kernel/hrtimer.c:651:
+	switch (action) {
+

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#897: FILE: kernel/hrtimer.c:669:
+static struct notifier_block __devinitdata hrtimers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after hrtimers_nb
#897: FILE: kernel/hrtimer.c:669:
+static struct notifier_block __devinitdata hrtimers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: kernel/hrtimer.c:676:
+	hrtimer_cpu_notify(&hrtimers_nb, (unsigned long)CPU_UP_PREPARE,
+			  (void *)(long)smp_processor_id());

ERROR:CODE_INDENT: code indent should use tabs where possible
#916: FILE: kernel/timer.c:860:
+ ^Ihrtimer_run_queues();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#916: FILE: kernel/timer.c:860:
+ ^Ihrtimer_run_queues();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: kernel/timer.c:860:
+ ^Ihrtimer_run_queues();$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000128473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 19 warnings, 30 checks, 851 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000128473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
