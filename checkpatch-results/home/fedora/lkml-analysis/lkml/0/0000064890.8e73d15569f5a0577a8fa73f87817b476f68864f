CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#47: FILE: kernel/power/proc.c:108:
+static int suspend_write_proc(struct file *file, const char *buffer,
+		unsigned long count, void *data)

CHECK:SPACING: No space is necessary after a cast
#49: FILE: kernel/power/proc.c:110:
+	struct suspend_proc_data *proc_data = (struct suspend_proc_data *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#50: FILE: kernel/power/proc.c:111:
+	char *my_buf = (char *) get_zeroed_page(GFP_ATOMIC);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: kernel/power/proc.c:122:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#70: FILE: kernel/power/proc.c:131:
+	switch (proc_data->type) {
+		case SUSPEND_PROC_DATA_CUSTOM:
[...]
+		case SUSPEND_PROC_DATA_BIT:
[...]
+		case SUSPEND_PROC_DATA_INTEGER:
[...]
+		case SUSPEND_PROC_DATA_LONG:
[...]
+		case SUSPEND_PROC_DATA_UL:
[...]
+		case SUSPEND_PROC_DATA_STRING:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#74: FILE: kernel/power/proc.c:135:
+				write_proc_t *write_proc = proc_data->data.special.write_proc;
+				result = write_proc(file, buffer, count, data);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#79: FILE: kernel/power/proc.c:140:
+			int value = simple_strtoul(my_buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: kernel/power/proc.c:141:
+			int value = simple_strtoul(my_buf, NULL, 0);
+			if (value)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: kernel/power/proc.c:142:
+^I^I^I^Iset_bit(proc_data->data.bit.bit, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: kernel/power/proc.c:146:
+				clear_bit(proc_data->data.bit.bit,
+					(proc_data->data.bit.bit_vector));

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#93: FILE: kernel/power/proc.c:154:
+				*variable = simple_strtol(my_buf, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#107: FILE: kernel/power/proc.c:168:
+				*variable = simple_strtol(my_buf, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#121: FILE: kernel/power/proc.c:182:
+				*variable = simple_strtoul(my_buf, NULL, 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'copy_len > proc_data->data.string.max_length'
#137: FILE: kernel/power/proc.c:198:
+				if (proc_data->data.string.max_length &&
+				    (copy_len > proc_data->data.string.max_length))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#143: FILE: kernel/power/proc.c:204:
+						variable = (char *) get_zeroed_page(GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: kernel/power/proc.c:209:
+				if ((copy_len) &&
+					 (my_buf[copy_len - 1] == '\n'))

CHECK:SPACING: No space is necessary after a cast
#154: FILE: kernel/power/proc.c:215:
+	free_page((unsigned long) my_buf);

CHECK:SPACING: No space is necessary after a cast
#161: FILE: kernel/power/proc.c:222:
+		free_page((unsigned long) proc_data->data.string.variable);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: kernel/power/proc.c:230:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064890.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 6 warnings, 9 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064890.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
