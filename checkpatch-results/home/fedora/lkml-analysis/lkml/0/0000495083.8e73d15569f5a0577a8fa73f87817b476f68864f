WARNING:TYPO_SPELLING: 'controle' may be misspelled - perhaps 'control'?
#32: 
	- Config.in to controle CONFIG_IPC_DEV.
	               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'methode' may be misspelled - perhaps 'method'?
#35: 
	- read methode to replace msgrcv() ?
	       ^^^^^^^

WARNING:TYPO_SPELLING: 'methode' may be misspelled - perhaps 'method'?
#36: 
	- write methode to replace msgsnd() ?
	        ^^^^^^^

WARNING:PATCH_PREFIX: patch prefix 'ipc' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'methode' may be misspelled - perhaps 'method'?
#71: FILE: msg.c:89:
+       wait_queue_head_t ipc_dev_wait; /* For the poll methode */
                                                        ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: msg.c:89:
+       wait_queue_head_t ipc_dev_wait; /* For the poll methode */$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#79: FILE: msg.c:122:
sysvipc_msg_read_proc, NULL);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: msg.c:125:
+       devfs_mk_dir(NULL, "ipc", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: msg.c:132:
+       int msqid=(int)file->private_data;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#89: FILE: msg.c:132:
+       int msqid=(int)file->private_data;
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: msg.c:133:
+       struct msg_queue *msq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: msg.c:134:
+       unsigned int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: msg.c:136:
+       msq = msg_lock(msqid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: msg.c:137:
+       if(msq==NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#94: FILE: msg.c:137:
+       if(msq==NULL)
+               return -EINVAL;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#94: FILE: msg.c:137:
+       if(msq==NULL)
              ^

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: msg.c:137:
+       if(msq==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#94: FILE: msg.c:137:
+       if(msq==NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: msg.c:138:
+               return -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: msg.c:138:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: msg.c:139:
+       ret = -EIDRM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: msg.c:140:
+       if (msg_checkid(msq,msqid))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#97: FILE: msg.c:140:
+       if (msg_checkid(msq,msqid))
+               goto out_unlock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: msg.c:140:
+       if (msg_checkid(msq,msqid))
                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: msg.c:141:
+               goto out_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: msg.c:141:
+               goto out_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: msg.c:142:
+       ret = -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: msg.c:143:
+       if (ipcperms (&msq->q_perm, S_IRUGO))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#100: FILE: msg.c:143:
+       if (ipcperms (&msq->q_perm, S_IRUGO))
+               goto out_unlock;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: msg.c:143:
+       if (ipcperms (&msq->q_perm, S_IRUGO))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#100: FILE: msg.c:143:
+       if (ipcperms (&msq->q_perm, S_IRUGO))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: msg.c:144:
+               goto out_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: msg.c:144:
+               goto out_unlock;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: msg.c:145:
+        $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: msg.c:145:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: msg.c:145:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: msg.c:146:
+       poll_wait(file, &msq->ipc_dev_wait, wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: msg.c:148:
+       ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: msg.c:149:
+       if(msq->q_qnum)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#106: FILE: msg.c:149:
+       if(msq->q_qnum)
+               ret = POLLIN | POLLRDNORM;

ERROR:SPACING: space required before the open parenthesis '('
#106: FILE: msg.c:149:
+       if(msq->q_qnum)

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: msg.c:150:
+               ret = POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: msg.c:150:
+               ret = POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: msg.c:153:
+       msg_unlock(msqid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: msg.c:154:
+       return ret;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#114: FILE: msg.c:157:
+static struct file_operations ipc_dev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#115: FILE: msg.c:158:
+       poll:    ipc_dev_poll,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: msg.c:166:
+       int msgid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: msg.c:167:
+       char name[32];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: msg.c:191:
+       init_waitqueue_head(&msq->ipc_dev_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: msg.c:196:
+       msgid = msg_buildid(id,msq->q_perm.seq);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: msg.c:196:
+       msgid = msg_buildid(id,msq->q_perm.seq);
                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: msg.c:197:
+       sprintf(name, "ipc/%d", msgid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: msg.c:198:
+       devfs_register(NULL, name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: msg.c:199:
+                       DEVFS_FL_DEFAULT, 0, 0, S_IFREG | S_IRUSR,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: msg.c:199:
+       devfs_register(NULL, name,
+                       DEVFS_FL_DEFAULT, 0, 0, S_IFREG | S_IRUSR,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: msg.c:199:
+                       DEVFS_FL_DEFAULT, 0, 0, S_IFREG | S_IRUSR,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#142: FILE: msg.c:199:
+                       DEVFS_FL_DEFAULT, 0, 0, S_IFREG | S_IRUSR,

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: msg.c:200:
+                       &ipc_dev_fops, (void*)msgid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: msg.c:200:
+                       &ipc_dev_fops, (void*)msgid);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#143: FILE: msg.c:200:
+                       &ipc_dev_fops, (void*)msgid);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: msg.c:201:
+       return msgid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: msg.c:751:
+       wake_up_interruptible_sync(&msq->ipc_dev_wait);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495083.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 45 warnings, 2 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495083.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
