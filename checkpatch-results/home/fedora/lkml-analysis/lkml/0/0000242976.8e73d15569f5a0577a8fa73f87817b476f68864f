WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
                                                                                

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#93: 
--- a/arch/i386/kernel/apic.c	2004-10-08 22:39:58.000000000 +0400

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#446: FILE: arch/i386/kernel/timers/timer_pit.c:20:
+extern _spinlock_t i8253_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#473: FILE: arch/i386/kernel/timers/timer_pit.c:165:
+	extern _spinlock_t i8253_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#496: FILE: arch/i386/kernel/timers/timer_tsc.c:38:
+extern _spinlock_t i8253_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#612: FILE: arch/i386/lib/dec_and_lock.c:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#650: FILE: arch/i386/mach-voyager/voyager_basic.c:34:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: drivers/ide/ide-io.c:1013:
+        /* XXX: emints: since irqs in threads patch is employed only routines $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#923: FILE: drivers/ide/ide-io.c:1013:
+        /* XXX: emints: since irqs in threads patch is employed only routines $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#924: FILE: drivers/ide/ide-io.c:1014:
+         * executed from do_IRQ() are executed from a real interrupt context. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#924: FILE: drivers/ide/ide-io.c:1014:
+         * executed from do_IRQ() are executed from a real interrupt context. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: drivers/ide/ide-io.c:1015:
+         * For others holding a lock should be enough. Thus while irqs in $

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: drivers/ide/ide-io.c:1015:
+         * For others holding a lock should be enough. Thus while irqs in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#926: FILE: drivers/ide/ide-io.c:1016:
+         * threads, !irqs_disabled() doesn't a sign that we are not protected $

ERROR:CODE_INDENT: code indent should use tabs where possible
#926: FILE: drivers/ide/ide-io.c:1016:
+         * threads, !irqs_disabled() doesn't a sign that we are not protected $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: drivers/ide/ide-io.c:1017:
+         * properly. May be substituted by checking corresponding lock later $

ERROR:CODE_INDENT: code indent should use tabs where possible
#927: FILE: drivers/ide/ide-io.c:1017:
+         * properly. May be substituted by checking corresponding lock later $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#928: FILE: drivers/ide/ide-io.c:1018:
+         * if paranoja.  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: drivers/ide/ide-io.c:1018:
+         * if paranoja.  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#929: FILE: drivers/ide/ide-io.c:1019:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: drivers/ide/legacy/hd.c:163:
+        extern _spinlock_t i8253_lock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: drivers/ide/legacy/hd.c:163:
+        extern _spinlock_t i8253_lock;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#945: FILE: drivers/ide/legacy/hd.c:163:
+        extern _spinlock_t i8253_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#969: FILE: drivers/input/gameport/gameport.c:24:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#978: FILE: drivers/input/gameport/gameport.c:48:
+	extern _spinlock_t i8253_lock;

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1012: FILE: drivers/media/video/saa5249.c:15:
+ * $Id$

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1044: FILE: drivers/mtd/mtd_blkdevs.c:2:
+ * $Id$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1123: FILE: fs/aio.c:575:
+        local_irq_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: fs/aio.c:575:
+        local_irq_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: fs/aio.c:583:
+       local_irq_enable();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1300: FILE: fs/buffer.c:1430:
+#ifdef irqs_disabled $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1305: FILE: fs/buffer.c:1435:
+		printk("buffer.c/check_irqs_on %d\n", irqs_disabled());

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1458: FILE: fs/jffs/intrep.c:13:
+ * $Id$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1771: FILE: include/asm-i386/spinlock.h:32:
+#define _SPIN_LOCK_UNLOCKED (_spinlock_t) { 1 SPINLOCK_MAGIC_INIT }

ERROR:SPACING: space required before the open parenthesis '('
#1774: FILE: include/asm-i386/spinlock.h:34:
+#define _spin_lock_init(x)	do { *(x) = _SPIN_LOCK_UNLOCKED; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1774: FILE: include/asm-i386/spinlock.h:34:
+#define _spin_lock_init(x)	do { *(x) = _SPIN_LOCK_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1784: FILE: include/asm-i386/spinlock.h:43:
+#define _spin_is_locked(x)	(*(volatile signed char *)(&(x)->lock) <= 0)

ERROR:SPACING: space required before the open parenthesis '('
#1785: FILE: include/asm-i386/spinlock.h:44:
+#define _spin_unlock_wait(x)	do { barrier(); } while(_spin_is_locked(x))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1799: FILE: include/asm-i386/spinlock.h:90:
+	BUG_ON(!_spin_is_locked(lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1814: FILE: include/asm-i386/spinlock.h:109:
+	BUG_ON(!_spin_is_locked(lock));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1841: FILE: include/asm-i386/spinlock.h:141:
+static inline void _raw_spin_lock_flags (_spinlock_t *lock, unsigned long flags)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1880: FILE: include/linux/init_task.h:41:
+^I.page_table_lock =  _SPIN_LOCK_UNLOCKED, ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1889: FILE: include/linux/init_task.h:58:
+^I.siglock^I= _SPIN_LOCK_UNLOCKED, ^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1913: FILE: include/linux/mmzone.h:133:
+^I_spinlock_t^I^Ilru_lock;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1926: FILE: include/linux/preempt.h:49:
+        dec_preempt_count(); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1926: FILE: include/linux/preempt.h:49:
+        dec_preempt_count(); \$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1977: FILE: include/linux/sched.h:993:
+static inline void _cond_resched_lock(_spinlock_t * lock)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1998: FILE: include/linux/seqlock.h:33:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1999: FILE: include/linux/seqlock.h:34:
+ * this type of lock is used from timer interrupt handler which is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2000: FILE: include/linux/seqlock.h:35:
+ * implemented in interrupt context $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2005: FILE: include/linux/seqlock.h:39:
+^I_spinlock_t lock; $

CHECK:SPACING: No space is necessary after a cast
#2015: FILE: include/linux/seqlock.h:47:
+#define seqlock_init(x)	  do { *(x) = (seqlock_t) SEQLOCK_UNLOCKED; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2015: FILE: include/linux/seqlock.h:47:
+#define seqlock_init(x)	  do { *(x) = (seqlock_t) SEQLOCK_UNLOCKED; } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2063: FILE: include/linux/smp_lock.h:20:
+   extern _spinlock_t kernel_flag;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2154: FILE: kernel/exit.c:859:
+	if (!_spin_is_locked(&p->sighand->siglock) &&
 				!rwlock_is_locked(&tasklist_lock))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2361: FILE: kernel/fork.c:477:
+	if (_atomic_dec_and_lock(&mm->mm_users, &mmlist_lock)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2374: FILE: kernel/fork.c:487:
+EXPORT_SYMBOL_GPL(mmput);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2375: FILE: kernel/fork.c:488:
+                                                                                             $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2375: FILE: kernel/fork.c:488:
+                                                                                             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2375: FILE: kernel/fork.c:488:
+                                                                                             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2384: FILE: kernel/fork.c:504:
+       struct mm_struct *mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2398: FILE: kernel/fork.c:506:
+       task_lock(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2399: FILE: kernel/fork.c:507:
+       mm = task->mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2400: FILE: kernel/fork.c:508:
+       if (mm) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2400: FILE: kernel/fork.c:508:
+       if (mm) {
+               _spin_lock(&mmlist_lock);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2401: FILE: kernel/fork.c:509:
+               _spin_lock(&mmlist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2401: FILE: kernel/fork.c:509:
+               _spin_lock(&mmlist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2402: FILE: kernel/fork.c:510:
+               if (!atomic_read(&mm->mm_users))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2402: FILE: kernel/fork.c:510:
+               if (!atomic_read(&mm->mm_users))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2402: FILE: kernel/fork.c:510:
+               if (!atomic_read(&mm->mm_users))
+                       mm = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2403: FILE: kernel/fork.c:511:
+                       mm = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2403: FILE: kernel/fork.c:511:
+                       mm = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2404: FILE: kernel/fork.c:512:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2404: FILE: kernel/fork.c:512:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2404: FILE: kernel/fork.c:512:
+               else
+                       atomic_inc(&mm->mm_users);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2405: FILE: kernel/fork.c:513:
+                       atomic_inc(&mm->mm_users);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2405: FILE: kernel/fork.c:513:
+                       atomic_inc(&mm->mm_users);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2406: FILE: kernel/fork.c:514:
+               _spin_unlock(&mmlist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2406: FILE: kernel/fork.c:514:
+               _spin_unlock(&mmlist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2407: FILE: kernel/fork.c:515:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2408: FILE: kernel/fork.c:516:
+       task_unlock(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2409: FILE: kernel/fork.c:517:
+        return mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2409: FILE: kernel/fork.c:517:
+        return mm;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2413: FILE: kernel/fork.c:521:
 
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2509: FILE: include/linux/spinlock.h:73:
+#define _spin_lock_irqsave(lock, flags)  flags = __spin_lock_irqsave(lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2510: FILE: include/linux/spinlock.h:74:
+#define read_lock_irqsave(lock, flags)  flags = _read_lock_irqsave(lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2511: FILE: include/linux/spinlock.h:75:
+#define write_lock_irqsave(lock, flags)  flags = _write_lock_irqsave(lock)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2512: FILE: include/linux/spinlock.h:76:
+                                                                                             $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2512: FILE: include/linux/spinlock.h:76:
+                                                                                             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2512: FILE: include/linux/spinlock.h:76:
+                                                                                             $

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2523: FILE: include/linux/spinlock.h:97:
+#define _SPIN_LOCK_UNLOCKED (_spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}
                                                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2523: FILE: include/linux/spinlock.h:97:
+#define _SPIN_LOCK_UNLOCKED (_spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2526: FILE: include/linux/spinlock.h:99:
+#define _spin_lock_init(x) \
 	do { \
 		(x)->magic = SPINLOCK_MAGIC; \
 		(x)->lock = 0; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2535: FILE: include/linux/spinlock.h:133:
+#define _spin_is_locked(x) \
 	({ \
 	 	CHECK_LOCK(x); \
 		if ((x)->lock&&(x)->babble) { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2544: FILE: include/linux/spinlock.h:162:
+#define _spin_unlock_wait(x)	\
 	do { \
 	 	CHECK_LOCK(x); \
 		if ((x)->lock&&(x)->babble) { \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2554: FILE: include/linux/spinlock.h:188:
+  typedef struct { } _spinlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2554: FILE: include/linux/spinlock.h:188:
+  typedef struct { } _spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2555: FILE: include/linux/spinlock.h:189:
+  #define _SPIN_LOCK_UNLOCKED (_spinlock_t) { }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2559: FILE: include/linux/spinlock.h:191:
+  typedef struct { int gcc_is_buggy; } _spinlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2559: FILE: include/linux/spinlock.h:191:
+  typedef struct { int gcc_is_buggy; } _spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2560: FILE: include/linux/spinlock.h:192:
+  #define _SPIN_LOCK_UNLOCKED (_spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#2567: FILE: include/linux/spinlock.h:198:
+#define _spin_lock_init(lock)	do { (void)(lock); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2567: FILE: include/linux/spinlock.h:198:
+#define _spin_lock_init(lock)	do { (void)(lock); } while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2573: FILE: include/linux/spinlock.h:202:
+#define _spin_unlock_wait(lock)	(void)(lock);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2573: FILE: include/linux/spinlock.h:202:
+#define _spin_unlock_wait(lock)	(void)(lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2591: FILE: include/linux/spinlock.h:404:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2600: FILE: include/linux/spinlock.h:414:
+#define spinlock_t^I^I^I_spinlock_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2608: FILE: include/linux/spinlock.h:422:
+# define SPIN_LOCK_UNLOCKED^I^I_SPIN_LOCK_UNLOCKED  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2609: FILE: include/linux/spinlock.h:423:
+                                                                                                            $

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#2609: FILE: include/linux/spinlock.h:423:
+                                                                                                            

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#2609: FILE: include/linux/spinlock.h:423:
+                                                                                                            $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2609: FILE: include/linux/spinlock.h:423:
+                                                                                                            $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2640: FILE: include/linux/spinlock.h:464:
+#define atomic_dec_and_lock  ^I^I_atomic_dec_and_lock$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2646: FILE: include/linux/spinlock.h:467:
+extern void _metered_spin_lock   (_spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2646: FILE: include/linux/spinlock.h:467:
+extern void _metered_spin_lock   (_spinlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2647: FILE: include/linux/spinlock.h:468:
+extern void _metered_spin_unlock (_spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2647: FILE: include/linux/spinlock.h:468:
+extern void _metered_spin_unlock (_spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2648: FILE: include/linux/spinlock.h:469:
+extern int  _metered_spin_trylock(_spinlock_t *lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2664: FILE: include/linux/spinlock.h:485:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2664: FILE: include/linux/spinlock.h:485:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2664: FILE: include/linux/spinlock.h:485:
+                                                                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2673: FILE: include/linux/spinlock.h:494:
+^I ^I} while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2673: FILE: include/linux/spinlock.h:494:
+^I ^I} while (0)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2674: FILE: include/linux/spinlock.h:495:
+                                             $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2674: FILE: include/linux/spinlock.h:495:
+                                             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2674: FILE: include/linux/spinlock.h:495:
+                                             $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2683: FILE: include/linux/spinlock.h:504:
+                                                         $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2683: FILE: include/linux/spinlock.h:504:
+                                                         $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2683: FILE: include/linux/spinlock.h:504:
+                                                         $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2685: FILE: include/linux/spinlock.h:506:
+                                                                 $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2685: FILE: include/linux/spinlock.h:506:
+                                                                 $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2685: FILE: include/linux/spinlock.h:506:
+                                                                 $

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#2688: FILE: include/linux/spinlock.h:509:
+# define spin_is_locked(lock)		kmutex_is_locked(lock)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2692: FILE: include/linux/spinlock.h:513:
+extern int  atomic_dec_and_kmutex_lock(atomic_t *atomic, struct kmutex *mtx);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2696: FILE: include/linux/spinlock.h:517:
+#define  cond_resched_lock(lock) ^Icond_resched()$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2704: FILE: include/linux/spinlock.h:525:
+#define read_lock_irqsave(lock, flags)	flags = _read_lock_irqsave(lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2705: FILE: include/linux/spinlock.h:526:
+#define write_lock_irqsave(lock, flags)	flags = _write_lock_irqsave(lock)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2728: FILE: include/linux/spinlock.h:548:
+extern int _atomic_dec_and_lock(atomic_t *atomic, _spinlock_t *lock);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000242976.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 62 errors, 60 warnings, 16 checks, 2242 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000242976.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
