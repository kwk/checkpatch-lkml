WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
 arch/ppc/kernel/ppc-stub.c              |  867 --------------------------------

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: arch/ppc/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#119: FILE: arch/ppc/kernel/kgdb.c:2:
+ * arch/ppc/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#143: FILE: arch/ppc/kernel/kgdb.c:26:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'alingment' may be misspelled - perhaps 'alignment'?
#178: FILE: arch/ppc/kernel/kgdb.c:61:
+	{ 0x0600, 0x0a /* SIGBUS */ },		/* alingment */
 	                              		   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#191: FILE: arch/ppc/kernel/kgdb.c:74:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <computeSignal>
#193: FILE: arch/ppc/kernel/kgdb.c:76:
+static int computeSignal(unsigned int tt)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#217: FILE: arch/ppc/kernel/kgdb.c:100:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->nip'
#217: FILE: arch/ppc/kernel/kgdb.c:100:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&arch_kgdb_ops.gdb_bpt_instr'
#217: FILE: arch/ppc/kernel/kgdb.c:100:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#386: FILE: arch/ppc/kernel/kgdb.c:269:
+ * This function does PoerPC specific procesing for interfacing to gdb.
                                       ^^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#395: FILE: arch/ppc/kernel/kgdb.c:278:
+	switch (remcom_in_buffer[0])
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: arch/ppc/kernel/kgdb.c:293:
+#if defined (CONFIG_40x) || defined(CONFIG_BOOKE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: arch/ppc/kernel/kgdb.c:303:
+					atomic_set(&cpu_doing_single_step,
+							smp_processor_id());

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#431: FILE: arch/ppc/kernel/kgdb.c:314:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1650: FILE: arch/ppc/platforms/85xx/sbc8560.c:73:
+		printk("Early serial init of port 0 failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1674: FILE: arch/ppc/platforms/85xx/sbc8560.c:90:
+		printk("Early serial init of port 1 failed\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1967: FILE: arch/ppc/syslib/mv64x60.c:1445:
+		if (mv64x60_pd_devs[i]) {
+			ret = platform_device_register(mv64x60_pd_devs[i]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1991: FILE: arch/ppc/syslib/mv64x60.c:1469:
+	for (i = 0; i <ARRAY_SIZE(mv64x60_pd_devs); i++) {
 	              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1992: FILE: arch/ppc/syslib/mv64x60.c:1470:
+		if ((pdev = mv64x60_pd_devs[i]) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1993: FILE: arch/ppc/syslib/mv64x60.c:1471:
+		if ((pdev = mv64x60_pd_devs[i]) &&
+			pdev->id == id &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2011: FILE: arch/ppc/syslib/mv64x60.c:1814:
+	if ((r = platform_get_resource(&mpsc1_device, IORESOURCE_IRQ, 1))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2028: FILE: arch/ppc/syslib/mv64x60_dbg.c:39:
+	mv64x60_dbg_bh.v_base = (void*)base;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2144: FILE: drivers/serial/mpsc_kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2145: FILE: drivers/serial/mpsc_kgdb.c:2:
+ * drivers/serial/mpsc_kgdb.c

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#2166: FILE: drivers/serial/mpsc_kgdb.c:23:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#2167: FILE: drivers/serial/mpsc_kgdb.c:24:
+#include <asm/delay.h>

CHECK:CAMELCASE: Avoid CamelCase: <kgdbmpsc_ttyMM>
#2175: FILE: drivers/serial/mpsc_kgdb.c:32:
+static int kgdbmpsc_ttyMM = CONFIG_KGDB_PORT_NUM;

WARNING:MEMORY_BARRIER: memory barrier without comment
#2196: FILE: drivers/serial/mpsc_kgdb.c:53:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2200: FILE: drivers/serial/mpsc_kgdb.c:57:
+	mb();

WARNING:SPACING: space prohibited before semicolon
#2202: FILE: drivers/serial/mpsc_kgdb.c:59:
+	while (readl(mpsc_base + MPSC_CHR_2) & MPSC_CHR_2_TTCS) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2202: FILE: drivers/serial/mpsc_kgdb.c:59:
+	while (readl(mpsc_base + MPSC_CHR_2) & MPSC_CHR_2_TTCS) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2209: FILE: drivers/serial/mpsc_kgdb.c:66:
+	while (!(readl(sdma_base + MPSC_INTR_REG_SELECT(MPSC_INTR_CAUSE)) &
+		 MPSC_INTR_CAUSE_RCC)) ;

WARNING:SPACING: space prohibited before semicolon
#2210: FILE: drivers/serial/mpsc_kgdb.c:67:
+		 MPSC_INTR_CAUSE_RCC)) ;

WARNING:MEMORY_BARRIER: memory barrier without comment
#2213: FILE: drivers/serial/mpsc_kgdb.c:70:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2215: FILE: drivers/serial/mpsc_kgdb.c:72:
+	mb();

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2218: FILE: drivers/serial/mpsc_kgdb.c:75:
+	return (c);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2292: FILE: drivers/serial/mpsc_kgdb.c:149:
+	udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2302: FILE: drivers/serial/mpsc_kgdb.c:159:
+	if ((r = platform_get_resource(pd, IORESOURCE_MEM, num)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2309: FILE: drivers/serial/mpsc_kgdb.c:166:
+			void __iomem * base)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2321: FILE: drivers/serial/mpsc_kgdb.c:178:
+	if ((r = platform_get_resource(pd, IORESOURCE_MEM, num)))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2373: FILE: drivers/serial/mpsc_kgdb.c:230:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2408: FILE: drivers/serial/mpsc_kgdb.c:265:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2424: FILE: drivers/serial/mpsc_kgdb.c:281:
+	unsigned int msk;
+	if (!request_irq(mpsc_irq, kgdbmpsc_interrupt, 0, "kgdb mpsc", NULL)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2437: FILE: drivers/serial/mpsc_kgdb.c:294:
+struct kgdb_io kgdb_io_ops = {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2466: FILE: drivers/serial/mpsc.h:213:
+#define MPSC_INTR_CAUSE_RCC		(1<<6)
                            		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2466: FILE: drivers/serial/mpsc.h:213:
+#define MPSC_INTR_CAUSE_RCC		(1<<6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2504: FILE: include/asm-ppc/kgdb.h:19:
+#define MAXREG			(PT_FPSCR+1)
               			         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2507: FILE: include/asm-ppc/kgdb.h:22:
+#define MAXREG                 ((32*2)+6+2+1)
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2507: FILE: include/asm-ppc/kgdb.h:22:
+#define MAXREG                 ((32*2)+6+2+1)
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2507: FILE: include/asm-ppc/kgdb.h:22:
+#define MAXREG                 ((32*2)+6+2+1)
                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2507: FILE: include/asm-ppc/kgdb.h:22:
+#define MAXREG                 ((32*2)+6+2+1)
                                           ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2514: FILE: include/asm-ppc/kgdb.h:29:
+#define BREAKPOINT()		asm(".long 0x7d821008"); /* twge r2, r2 */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2581: FILE: include/asm-ppc/mv64x60.h:350:
+struct platform_device * mv64x60_early_get_pdev_data(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2582: FILE: include/asm-ppc/mv64x60.h:351:
+struct platform_device * mv64x60_early_get_pdev_data(const char *name,
+		int id, int remove);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2612: FILE: lib/Kconfig.debug:235:
+config KGDB_MPSC
+	bool "KGDB on MV64x60 MPSC"
+	depends on SERIAL_MPSC
+	help
+	  Uses a Marvell GT64260B or MV64x60 Multi-Purpose Serial
+	  Controller (MPSC) channel. Note that the GT64260A is not
+	  supported.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2620: FILE: lib/Kconfig.debug:243:
+config KGDB_CPM_UART
+ 	bool "KGDB: On CPM UART"
+	depends on PPC && (CPM2 || 8xx)
+ 	help
+ 	  Uses CPM UART to communicate with the host GDB.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2661: FILE: drivers/serial/cpm_uart/cpm_uart.h:61:
+#define KGDB_PINFO_INDEX ^IUART_SCC1$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2685: FILE: drivers/serial/cpm_uart/cpm_uart.h:113:
+int cpm_uart_early_setup(int index,int early);
                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2708: FILE: drivers/serial/cpm_uart/cpm_uart.h:142:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2748: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:983:
+void cpm_uart_early_write(int index, const char *s,
 				   u_int count)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2757: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:990:
+	BUG_ON(index>UART_NR);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2757: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:990:
+	BUG_ON(index>UART_NR);
 	            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2782: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1062:
+	BUG_ON(index>UART_NR);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2782: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1062:
+	BUG_ON(index>UART_NR);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2840: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1106:
+	cpm_uart_early_write(cpm_uart_port_map[co->index],s,count);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2840: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1106:
+	cpm_uart_early_write(cpm_uart_port_map[co->index],s,count);
 	                                                   ^

CHECK:SPACING: No space is necessary after a cast
#2865: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1131:
+		bd_t *bd = (bd_t *) __res;

ERROR:SPACING: space required before the open parenthesis '('
#2874: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1140:
+	if(ret)

ERROR:SPACING: space required before the open parenthesis '('
#2885: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1205:
+		if(con == KGDB_PINFO_INDEX)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2899: FILE: drivers/serial/cpm_uart/cpm_uart_cpm2.c:265:
+	/* Check if we have called this yet. This may happen if early kgdb
+	breakpoint is on */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2899: FILE: drivers/serial/cpm_uart/cpm_uart_cpm2.c:265:
+	breakpoint is on */

ERROR:SPACING: space required before the open parenthesis '('
#2900: FILE: drivers/serial/cpm_uart/cpm_uart_cpm2.c:266:
+	if(cpm_uart_nr)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2910: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2911: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:2:
+ * drivers/serial/cpm_uart/cpm_uart_kgdb.c

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#2935: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:26:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2942: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:33:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2957: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:48:
+	volatile	cbd_t		*bdp;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2965: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:56:
+	while (bdp->cbd_sc & BD_SC_EMPTY);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2973: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:64:
+		i = c = bdp->cbd_datlen;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2974: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:65:
+		while (i-- > 0)
+		{

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2983: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:74:
+	if (bdp->cbd_sc & BD_SC_WRAP) {
[...]
+	} else {
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2990: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:81:
+	return((int)c);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2993: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:84:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3001: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:92:
+	static char ch[2];
+	ch[0]=(char)chr;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3001: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:92:
+	ch[0]=(char)chr;
 	     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3005: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:96:
+
+

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3013: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:104:
+	if (kgdb_chars<=0) {
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3023: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:114:
+static void termios_set_options(int index,
+		 int baud, int parity, int bits, int flow)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3029: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:120:
+	BUG_ON(index>UART_NR);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3029: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:120:
+	BUG_ON(index>UART_NR);
 	            ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3055: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:146:
+		/*fall through*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3078: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:169:
+	if(!cpm_uart_nr)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#3078: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:169:
+	if(!cpm_uart_nr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3089: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:180:
+	termios_set_options(KGDB_PINFO_INDEX, KGDB_BAUD,'n',8,'n');
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3089: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:180:
+	termios_set_options(KGDB_PINFO_INDEX, KGDB_BAUD,'n',8,'n');
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3089: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:180:
+	termios_set_options(KGDB_PINFO_INDEX, KGDB_BAUD,'n',8,'n');
 	                                                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3094: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:185:
+
+

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#3095: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:186:
+struct kgdb_io kgdb_io_ops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 40 warnings, 28 checks, 1816 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
