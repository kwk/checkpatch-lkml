WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: mm/nonresident.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#40: FILE: mm/nonresident.c:2:
+ * mm/nonresident.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#44: FILE: mm/nonresident.c:6:
+ * Adapted by Peter Zijlstra <a.p.zijlstra@chello.nl> for use by ARC
                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#90: FILE: mm/nonresident.c:52:
+#define NR_CACHELINES  (TARGET_SLOTS*sizeof(u32) / L1_CACHE_BYTES)
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#91: FILE: mm/nonresident.c:53:
+#define NR_SLOTS	(((NR_CACHELINES * L1_CACHE_BYTES) - sizeof(spinlock_t) - 2*sizeof(u16)) / sizeof(u32))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#91: FILE: mm/nonresident.c:53:
+#define NR_SLOTS	(((NR_CACHELINES * L1_CACHE_BYTES) - sizeof(spinlock_t) - 2*sizeof(u16)) / sizeof(u32))
                 	                                                           ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#92: FILE: mm/nonresident.c:54:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#104: FILE: mm/nonresident.c:66:
+#define LISTID_SHIFT		(sizeof(u32)*8 - LISTID_BITS)
                     		            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#107: FILE: mm/nonresident.c:69:
+#define SET_LISTID(x, flg)	((x) = ((x) & ~LISTID_MASK) | ((flg) << LISTID_SHIFT))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#114: FILE: mm/nonresident.c:76:
+#define SET_INDEX(x, idx)	((x) = ((x) & ~INDEX_MASK) | ((idx) << INDEX_SHIFT))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#117: FILE: mm/nonresident.c:79:
+#define COOKIE_MASK		BUILD_MASK(sizeof(u32)*8 - LISTID_BITS - INDEX_BITS, 0)
                    		                      ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#120: FILE: mm/nonresident.c:82:
+struct nr_bucket
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#121: FILE: mm/nonresident.c:83:
+	spinlock_t lock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: mm/nonresident.c:89:
+static struct nr_bucket * nonres_table;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: mm/nonresident.c:94:
+static struct nr_bucket * nr_hash(void * mapping, unsigned long index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: mm/nonresident.c:94:
+static struct nr_bucket * nr_hash(void * mapping, unsigned long index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: mm/nonresident.c:106:
+static u32 nr_cookie(struct address_space * mapping, unsigned long index)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#153: FILE: mm/nonresident.c:115:
+	return hash_long(hash, sizeof(u32)*8 - LISTID_BITS - INDEX_BITS);
 	                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: mm/nonresident.c:138:
+static u32 * __nonresident_del(struct nr_bucket *nr_bucket, int listid, u8 pos, u32 *slot)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#181: FILE: mm/nonresident.c:143:
+	if (slot == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: mm/nonresident.c:163:
+	BUG_ON(GET_INDEX(*next) != next_pos);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: mm/nonresident.c:167:
+static inline u32 * __nonresident_pop(struct nr_bucket *nr_bucket, int listid)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#257: FILE: mm/nonresident.c:219:
+int nonresident_put(struct address_space * mapping, unsigned long index, int listid, int listid_evict)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: mm/nonresident.c:219:
+int nonresident_put(struct address_space * mapping, unsigned long index, int listid, int listid_evict)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: mm/nonresident.c:243:
+	BUG_ON(!slot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: mm/nonresident.c:260:
+int nonresident_find(struct address_space * mapping, unsigned long index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: mm/nonresident.c:262:
+	struct nr_bucket * nr_bucket;

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: mm/nonresident.c:281:
+			u32 *slot = &nr_bucket->slot[j];
+			if (GET_LISTID(*slot) != i)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __initdata should be placed after nonresident_factor
#362: FILE: mm/nonresident.c:324:
+static __initdata unsigned long nonresident_factor = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: mm/nonresident.c:338:
+	nonres_table = alloc_large_system_hash("Non-resident page tracking",
+					sizeof(struct nr_bucket),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: mm/nonresident.c:355:
+				SET_INDEX(nonres_table[i].slot[j], j+1);
 				                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#400: FILE: mm/nonresident.c:362:
+		for (j=0; j<4; ++j)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#400: FILE: mm/nonresident.c:362:
+		for (j=0; j<4; ++j)
 		           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#405: FILE: mm/nonresident.c:367:
+static int __init set_nonresident_factor(char * str)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#409: FILE: mm/nonresident.c:371:
+	nonresident_factor = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#413: FILE: mm/nonresident.c:375:
+__setup("nonresident_factor=", set_nonresident_factor);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: include/linux/swap.h:166:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: include/linux/swap.h:167:
+extern int nonresident_put(struct address_space *, unsigned long, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#432: FILE: include/linux/swap.h:167:
+extern int nonresident_put(struct address_space *, unsigned long, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#432: FILE: include/linux/swap.h:167:
+extern int nonresident_put(struct address_space *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#432: FILE: include/linux/swap.h:167:
+extern int nonresident_put(struct address_space *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#432: FILE: include/linux/swap.h:167:
+extern int nonresident_put(struct address_space *, unsigned long, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/linux/swap.h:168:
+extern int nonresident_find(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#433: FILE: include/linux/swap.h:168:
+extern int nonresident_find(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#433: FILE: include/linux/swap.h:168:
+extern int nonresident_find(struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/swap.h:169:
+extern unsigned int nonresident_count(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#434: FILE: include/linux/swap.h:169:
+extern unsigned int nonresident_count(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#435: FILE: include/linux/swap.h:170:
+extern unsigned int nonresident_total(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/swap.h:171:
+extern void nonresident_init(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: include/linux/swap.h:312:
+#define nonresident_put(w,x,y,z) 0
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: include/linux/swap.h:312:
+#define nonresident_put(w,x,y,z) 0
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: include/linux/swap.h:312:
+#define nonresident_put(w,x,y,z) 0
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: include/linux/swap.h:313:
+#define nonresident_find(x,y) 0
                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 18 warnings, 18 checks, 433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
