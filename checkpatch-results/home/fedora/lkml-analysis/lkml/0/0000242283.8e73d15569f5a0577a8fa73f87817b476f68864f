WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#### AUTHOR dtor_core@ameritech.net

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#### COMMENT START

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
### Comments for ChangeSet

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#108: FILE: drivers/base/bus.c:71:
+extern struct attribute * drv_default_attrs[];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#128: FILE: drivers/base/bus.c:311:
+		struct device_driver * drv = to_drv(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#129: FILE: drivers/base/bus.c:312:
+		struct device_driver * drv = to_drv(entry);
+		if (!drv->manual_bind) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: drivers/base/interface.c:3:
+ * ^Ithe world for all devices and drivers.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: drivers/base/interface.c:25:
+static ssize_t dev_bind_mode_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: drivers/base/interface.c:25:
+static ssize_t dev_bind_mode_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: drivers/base/interface.c:30:
+static ssize_t dev_bind_mode_store(struct device * dev, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: drivers/base/interface.c:30:
+static ssize_t dev_bind_mode_store(struct device * dev, const char * buf, size_t count)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#190: FILE: drivers/base/interface.c:34:
+	if (!strncmp(buf, "manual", count)) {
[...]
+	} else if (!strncmp(buf, "auto", count)) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: drivers/base/interface.c:45:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: drivers/base/interface.c:59:
+static ssize_t dev_detach_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: drivers/base/interface.c:59:
+static ssize_t dev_detach_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: drivers/base/interface.c:64:
+static ssize_t dev_detach_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: drivers/base/interface.c:64:
+static ssize_t dev_detach_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: drivers/base/interface.c:83:
+static ssize_t dev_driver_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: drivers/base/interface.c:83:
+static ssize_t dev_driver_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#232: FILE: drivers/base/interface.c:88:
+static ssize_t dev_driver_store(struct device * dev, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#232: FILE: drivers/base/interface.c:88:
+static ssize_t dev_driver_store(struct device * dev, const char * buf, size_t count)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dev_detach_show' to 'detach_state_show' 'dev_detach_store' to 'detach_state_store'
#243: FILE: drivers/base/interface.c:103:
+static DEVICE_ATTR(detach_state, 0644, dev_detach_show, dev_detach_store);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dev_driver_show' to 'driver_show' 'dev_driver_store' to 'driver_store'
#244: FILE: drivers/base/interface.c:104:
+static DEVICE_ATTR(driver, 0644, dev_driver_show, dev_driver_store);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: drivers/base/interface.c:121:
+static ssize_t drv_bind_mode_show(struct device_driver * drv, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: drivers/base/interface.c:121:
+static ssize_t drv_bind_mode_show(struct device_driver * drv, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: drivers/base/interface.c:126:
+static ssize_t drv_bind_mode_store(struct device_driver * drv, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: drivers/base/interface.c:126:
+static ssize_t drv_bind_mode_store(struct device_driver * drv, const char * buf, size_t count)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#270: FILE: drivers/base/interface.c:130:
+	if (!strncmp(buf, "manual", count)) {
[...]
+	} else if (!strncmp(buf, "auto", count)) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: drivers/base/interface.c:143:
+struct attribute * drv_default_attrs[] = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#433: FILE: include/linux/device.h:271:
+	unsigned int manual_bind;	/* indicates whether the core will
+					   try to find a driver for the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#434: FILE: include/linux/device.h:272:
+					   device automatically */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000242283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 11 warnings, 1 checks, 320 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000242283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
