WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
grouping related allocation types together. The idea is that large groups of

WARNING:TYPO_SPELLING: 'superflous' may be misspelled - perhaps 'superfluous'?
#29: 
This section of the patch looks superflous but it is to surpress a compiler
                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'surpress' may be misspelled - perhaps 'suppress'?
#29: 
This section of the patch looks superflous but it is to surpress a compiler
                                                        ^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#45: FILE: include/linux/mmzone.h:36:
+#define for_each_rclmtype_order(type, order) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'order' - possible side-effects?
#45: FILE: include/linux/mmzone.h:36:
+#define for_each_rclmtype_order(type, order) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: mm/page_alloc.c:358:
+static inline struct free_area *__page_find_freelist(struct zone *zone,
+							struct page *page)

ERROR:SPACING: space required before the open parenthesis '('
#144: FILE: mm/page_alloc.c:612:
+	for(i = 0; i < RCLM_TYPES; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#148: FILE: mm/page_alloc.c:616:
+		area = &zone->free_area_lists[i][MAX_ORDER-1];
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: mm/page_alloc.c:633:
+remove_page(struct zone *zone, struct page *page, unsigned int order,
+		unsigned int current_order, struct free_area *area)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: mm/page_alloc.c:648:
+	struct free_area * area = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#210: FILE: mm/page_alloc.c:664:
+	if (page != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#211: FILE: mm/page_alloc.c:665:
+		return remove_page(zone, page, order, MAX_ORDER-1, area);
 		                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#237: FILE: mm/page_alloc.c:763:
+		list_for_each(curr,&zone->free_area_lists[t][order].free_list) {
 		                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#237: FILE: mm/page_alloc.c:763:
+		list_for_each(curr,&zone->free_area_lists[t][order].free_list) {
 		                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: mm/page_alloc.c:1630:
+ ^I^Iunsigned long nr = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: mm/page_alloc.c:1630:
+ ^I^Iunsigned long nr = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: mm/page_alloc.c:1630:
+ ^I^Iunsigned long nr = 0;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: mm/page_alloc.c:1632:
+		unsigned long flags,order;
 		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: mm/page_alloc.c:1650:
+			if (type == RCLM_TYPES-1) {
 			                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#313: FILE: mm/page_alloc.c:1651:
+				printk("%lu*%lukB ", nr, K(1UL) << order);

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#329: FILE: mm/page_alloc.c:1967:
+	/* Initialse the three size ordered lists of free_areas */
 	   ^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order]
#331: FILE: mm/page_alloc.c:1969:
+		area = &(zone->free_area_lists[type][order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[t][order]
#356: FILE: mm/page_alloc.c:2395:
+			area = &(zone->free_area_lists[t][order]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#359: FILE: mm/page_alloc.c:2398:
+			if (t == RCLM_TYPES-1) {
 			                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 7 warnings, 10 checks, 305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
