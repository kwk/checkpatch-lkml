WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/rename.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#83: FILE: fs/unionfs/rename.c:41:
+			printk(KERN_DEBUG "error creating directory tree for"

WARNING:SPLIT_STRING: quoted string split across lines
#84: FILE: fs/unionfs/rename.c:42:
+			printk(KERN_DEBUG "error creating directory tree for"
+					  " rename, bindex = %d, err = %ld\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: fs/unionfs/rename.c:43:
+^I^I^I^I          bindex, PTR_ERR(hidden_new_dentry));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: fs/unionfs/rename.c:56:
+	hidden_wh_dentry = lookup_one_len(wh_name, hidden_new_dentry->d_parent,
+				new_dentry->d_name.len + UNIONFS_WHLEN);

CHECK:BRACES: braces {} should be used on all arms of this statement
#104: FILE: fs/unionfs/rename.c:62:
+	if (hidden_wh_dentry->d_inode) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#107: FILE: fs/unionfs/rename.c:65:
+			printk(KERN_WARNING "Both a whiteout and a dentry"

WARNING:SPLIT_STRING: quoted string split across lines
#108: FILE: fs/unionfs/rename.c:66:
+			printk(KERN_WARNING "Both a whiteout and a dentry"
+					" exist when doing a rename!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#116: FILE: fs/unionfs/rename.c:74:
+		if (!(err = is_robranch_super(old_dentry->d_sb, bindex)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/unionfs/rename.c:76:
+			err = vfs_unlink(hidden_wh_dir_dentry->d_inode,
+					       hidden_wh_dentry);

CHECK:BRACES: Unbalanced braces around else statement
#124: FILE: fs/unionfs/rename.c:82:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: fs/unionfs/rename.c:96:
+	 * whiteout, and must dput(*wh_old) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: fs/unionfs/rename.c:99:
+		char *whname;
+		whname = alloc_whname(old_dentry->d_name.name,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: fs/unionfs/rename.c:139:
+static int do_unionfs_rename(struct inode *old_dir,
+				   struct dentry *old_dentry,

CHECK:BRACES: braces {} should be used on all arms of this statement
#207: FILE: fs/unionfs/rename.c:165:
+	if (err) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: fs/unionfs/rename.c:169:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#226: FILE: fs/unionfs/rename.c:184:
+		if (!(err = is_robranch_super(old_dir->i_sb, bindex)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: fs/unionfs/rename.c:186:
+			err = vfs_unlink(unlink_dir_dentry->d_inode,
+				       unlink_dentry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: fs/unionfs/rename.c:189:
+		fsstack_copy_attr_times(new_dentry->d_parent->d_inode,
+				     unlink_dir_dentry->d_inode);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_bstart != old_bend'
#277: FILE: fs/unionfs/rename.c:235:
+	if ((old_bstart != old_bend) || (do_copyup != -1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/unionfs/rename.c:237:
+		struct dentry *hidden_parent;
+		BUG_ON(!wh_old || wh_old->d_inode || bwh_old < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#279: FILE: fs/unionfs/rename.c:237:
+		BUG_ON(!wh_old || wh_old->d_inode || bwh_old < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#281: FILE: fs/unionfs/rename.c:239:
+		local_err = vfs_create(hidden_parent->d_inode, wh_old, S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#284: FILE: fs/unionfs/rename.c:242:
+		if (!local_err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#286: FILE: fs/unionfs/rename.c:244:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#288: FILE: fs/unionfs/rename.c:246:
+			printk(KERN_ERR "We can't create a whiteout for the "

WARNING:SPLIT_STRING: quoted string split across lines
#289: FILE: fs/unionfs/rename.c:247:
+			printk(KERN_ERR "We can't create a whiteout for the "
+					"source in rename!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#302: FILE: fs/unionfs/rename.c:260:
+		printk(KERN_WARNING "Revert failed in rename: the new refresh "

WARNING:SPLIT_STRING: quoted string split across lines
#303: FILE: fs/unionfs/rename.c:261:
+		printk(KERN_WARNING "Revert failed in rename: the new refresh "
+				"failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#309: FILE: fs/unionfs/rename.c:267:
+		printk(KERN_WARNING "Revert failed in rename: the old refresh "

WARNING:SPLIT_STRING: quoted string split across lines
#310: FILE: fs/unionfs/rename.c:268:
+		printk(KERN_WARNING "Revert failed in rename: the old refresh "
+				"failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#317: FILE: fs/unionfs/rename.c:275:
+		printk(KERN_WARNING "Revert failed in rename: the object "

WARNING:SPLIT_STRING: quoted string split across lines
#318: FILE: fs/unionfs/rename.c:276:
+		printk(KERN_WARNING "Revert failed in rename: the object "
+				"disappeared from under us!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#325: FILE: fs/unionfs/rename.c:283:
+		printk(KERN_WARNING "Revert failed in rename: the object was "

WARNING:SPLIT_STRING: quoted string split across lines
#326: FILE: fs/unionfs/rename.c:284:
+		printk(KERN_WARNING "Revert failed in rename: the object was "
+				"created underneath us!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: fs/unionfs/rename.c:290:
+	local_err = do_rename(new_dir, new_dentry, old_dir, old_dentry, old_bstart,
+					NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#336: FILE: fs/unionfs/rename.c:294:
+		printk(KERN_WARNING "Revert failed in rename!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/unionfs/rename.c:331:
+		wh_dentry = lookup_one_len(whname, hidden_parent,
+				   dentry->d_name.len + UNIONFS_WHLEN);

CHECK:BRACES: braces {} should be used on all arms of this statement
#397: FILE: fs/unionfs/rename.c:355:
+	if (err == -ENOTEMPTY) {
[...]
+	} else if (err)
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#440: FILE: fs/unionfs/rename.c:398:
+	if (!IS_ERR(wh_dentry))
[...]
+	else if (new_dentry->d_inode) {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: fs/unionfs/rename.c:434:
+		/* force re-lookup since the dir on ro branch is not renamed,
+		   and hidden dentries still indicate the un-renamed ones. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#476: FILE: fs/unionfs/rename.c:434:
+		   and hidden dentries still indicate the un-renamed ones. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012766.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 24 warnings, 16 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012766.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
