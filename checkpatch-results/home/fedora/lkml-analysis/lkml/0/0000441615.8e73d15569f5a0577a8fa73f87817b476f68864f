WARNING:TYPO_SPELLING: 'interresting' may be misspelled - perhaps 'interesting'?
#29: 
OK now an interresting part.
          ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#35: 
   docu states cleanly that all SG list entires should be double word
                                        ^^^^^^^

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#49: 
   independant from the generic code. We don't have anything chipset
   ^^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
diff -durNp -X /tmp/diff.hDAz3d linux-2.5.30/drivers/ide/alim15x3.c linux/drivers/ide/alim15x3.c

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm5229_revision < 0x20'
#67: FILE: drivers/ide/alim15x3.c:365:
+	if (dmabase && (m5229_revision < 0x20))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#95: FILE: drivers/ide/cmd640.c:385:
+static void cmd640_dump_regs (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#163: FILE: drivers/ide/cmd64x.c:33:
+# define cmdprintk(x...)	printk(##x)

CHECK:BRACES: Unbalanced braces around else statement
#243: FILE: drivers/ide/hpt34x.c:200:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#490: FILE: drivers/ide/pcidma.c:308:
+		printk("ATA: received %d phys segments, build %d\n", rq->nr_phys_segments, nents);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#497: FILE: drivers/ide/pcidma.c:315:
+	i = ch->sg_nents = pci_map_sg(ch->pci_dev, sg, nents, ch->sg_dma_direction);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#565: FILE: drivers/ide/pcidma.c:426:
+	printk(", BIOS settings: %s:%s, %s:%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: drivers/ide/pcidma.c:427:
+	printk(", BIOS settings: %s:%s, %s:%s\n",
+			ch->drives[0].name, (stat & 0x20) ? "DMA" : "pio",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#594: FILE: drivers/ide/pcidma.c:454:
+	printk("ATA: error unable to allocate BM-DMA PRD-tables\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#669: FILE: drivers/ide/piix.c:383:
 	if (((piix_enabled >> ch->unit) & 1)
+			&& !(piix_config->flags & PIIX_NODMA))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#749: FILE: drivers/ide/trm290.c:154:
+		outb(0x51|(ch->unit<<3), ch->config_data+1);	/* set PIO/DMA */
 		         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#749: FILE: drivers/ide/trm290.c:154:
+		outb(0x51|(ch->unit<<3), ch->config_data+1);	/* set PIO/DMA */
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#749: FILE: drivers/ide/trm290.c:154:
+		outb(0x51|(ch->unit<<3), ch->config_data+1);	/* set PIO/DMA */
 		                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#758: FILE: drivers/ide/trm290.c:160:
+		reg = inw(ch->config_data+3) & 0x13;
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#760: FILE: drivers/ide/trm290.c:162:
+		outw(reg, ch->config_data+3);
 		                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#783: FILE: drivers/ide/trm290.c:203:
+		printk("ATA: received %d phys segments, build %d\n", rq->nr_phys_segments, nents);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#790: FILE: drivers/ide/trm290.c:210:
+	i = ch->sg_nents = pci_map_sg(ch->pci_dev, sg, nents, ch->sg_dma_direction);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#794: FILE: drivers/ide/trm290.c:214:
+	BUG_ON(i > PRD_ENTRIES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#817: FILE: drivers/ide/trm290.c:255:
+	if (!(count = trm290_new_table(drive, rq))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#855: FILE: drivers/ide/trm290.c:300:
+		printk("TRM290: chip config base at 0x%04lx\n", ch->config_data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#860: FILE: drivers/ide/trm290.c:303:
+		printk("TRM290: using default config base at 0x%04lx\n", ch->config_data);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#873: FILE: drivers/ide/trm290.c:311:
+	reg = inb(ch->config_data+3);			/* get IRQ info */
 	                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#876: FILE: drivers/ide/trm290.c:313:
+	outb(reg, ch->config_data+3);
 	                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#909: FILE: drivers/ide/trm290.c:334:
+		printk(KERN_ERR "ATA: ERROR: BM DMA portst already in use!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#913: FILE: drivers/ide/trm290.c:338:
+	printk(KERN_INFO"    %s: BM-DMA at 0x%04lx-0x%04lx\n", ch->name, dma_base, dma_base + 7);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#913: FILE: drivers/ide/trm290.c:338:
+	printk(KERN_INFO"    %s: BM-DMA at 0x%04lx-0x%04lx\n", ch->name, dma_base, dma_base + 7);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: drivers/ide/trm290.c:341:
+	ch->dmatable_cpu = pci_alloc_consistent(ch->pci_dev,
+			PRD_ENTRIES * PRD_BYTES, &ch->dmatable_dma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: drivers/ide/trm290.c:348:
+		pci_free_consistent(ch->pci_dev, PRD_ENTRIES * PRD_BYTES,
+				ch->dmatable_cpu, ch->dmatable_dma);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#937: FILE: drivers/ide/trm290.c:362:
+	printk("ATA: error unable to allocate BM-DMA PRD-tables\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#956: FILE: drivers/ide/trm290.c:376:
+		outb(0x54|(ch->unit<<3), ch->config_data+1);
 		         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#956: FILE: drivers/ide/trm290.c:376:
+		outb(0x54|(ch->unit<<3), ch->config_data+1);
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#956: FILE: drivers/ide/trm290.c:376:
+		outb(0x54|(ch->unit<<3), ch->config_data+1);
 		                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#964: FILE: drivers/ide/trm290.c:381:
+			outw(compat|1, ch->config_data);
 			           ^

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#965: FILE: drivers/ide/trm290.c:382:
+			printk("%s: control basereg workaround: old=0x%04x, new=0x%04x\n", ch->name, old, inw(ch->config_data) & ~1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#965: FILE: drivers/ide/trm290.c:382:
+			printk("%s: control basereg workaround: old=0x%04x, new=0x%04x\n", ch->name, old, inw(ch->config_data) & ~1);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1025: FILE: include/linux/ide.h:1251:
+extern void ata_release_dma(struct ata_channel *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_channel *' should also have an identifier name
#1025: FILE: include/linux/ide.h:1251:
+extern void ata_release_dma(struct ata_channel *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441615.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 19 warnings, 21 checks, 873 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441615.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
