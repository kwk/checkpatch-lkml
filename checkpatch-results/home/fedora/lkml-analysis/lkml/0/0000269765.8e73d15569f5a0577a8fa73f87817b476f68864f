WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Though developed on i386, This patch may be benefeciary for ia64 systems as well.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/ext3/inode.c:908:
+				sector_t block, int create, int * errp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: fs/ext3/inode.c:2559:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: fs/ext3/inode.c:2650:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: fs/ext3/inode.c:2664:
+^I^I$

WARNING:LONG_LINE: line length of 163 exceeds 100 columns
#156: FILE: fs/ext3/inode.c:2667:
+			if (!EXT3_HAS_RO_COMPAT_FEATURE(sb, EXT3_FEATURE_RO_COMPAT_4TB_FILE) || EXT3_SB(sb)->s_es->s_rev_level == cpu_to_le32(EXT3_GOOD_OLD_REV)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: fs/ext3/inode.c:2667:
+			struct super_block *sb = inode->i_sb;
+			if (!EXT3_HAS_RO_COMPAT_FEATURE(sb, EXT3_FEATURE_RO_COMPAT_4TB_FILE) || EXT3_SB(sb)->s_es->s_rev_level == cpu_to_le32(EXT3_GOOD_OLD_REV)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/ext3/inode.c:2672:
+				err = ext3_journal_get_write_access(handle,
+						EXT3_SB(sb)->s_sbh);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: fs/ext3/inode.c:2676:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: fs/ext3/inode.c:2677:
+^I^I^I^Iif (!EXT3_HAS_RO_COMPAT_FEATURE(sb, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: fs/ext3/inode.c:2678:
+				if (!EXT3_HAS_RO_COMPAT_FEATURE(sb, 
+							EXT3_FEATURE_RO_COMPAT_LARGE_FILE))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: fs/ext3/inode.c:2679:
+^I^I^I^I^IEXT3_SET_RO_COMPAT_FEATURE(sb, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: fs/ext3/inode.c:2680:
+^I^I^I^I^I^I^IEXT3_FEATURE_RO_COMPAT_LARGE_FILE);^I^I^I^I$

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#169: FILE: fs/ext3/inode.c:2680:
+							EXT3_FEATURE_RO_COMPAT_LARGE_FILE);				

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/ext3/inode.c:2680:
+					EXT3_SET_RO_COMPAT_FEATURE(sb, 
+							EXT3_FEATURE_RO_COMPAT_LARGE_FILE);				

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: fs/ext3/inode.c:2684:
+				err = ext3_journal_dirty_metadata(handle,EXT3_SB(sb)->s_sbh);
 				                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: fs/ext3/inode.c:2685:
+^I^I^I} $

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/ext3/super.c:1175:
+        if (res > (1024LL << 32) - (1 << bits))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/ext3/super.c:1175:
+        if (res > (1024LL << 32) - (1 << bits))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: fs/ext3/super.c:1176:
+                res = (1024LL << 32) - (1 << bits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/ext3/super.c:1176:
+                res = (1024LL << 32) - (1 << bits);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: fs/Kconfig:129:
+^I^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#244: FILE: include/linux/ext3_fs.h:526:
+					 EXT3_FEATURE_RO_COMPAT_4TB_FILE| \
 					                                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#254: FILE: include/linux/ext3_fs.h:727:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, sector_t, int, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#255: FILE: include/linux/ext3_fs.h:728:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, sector_t, int, int *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269765.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 18 warnings, 7 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269765.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
