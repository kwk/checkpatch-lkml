WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#   2004/08/11 16:54:23-05:00 pfg@sgi.com 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#   code clean up

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#   ran thru Lindent

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#   changes needed for new I/O structure

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#   update copyright

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# arch/ia64/sn/kernel/setup.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#   2004/08/11 16:53:27-05:00 pfg@sgi.com +174 -159

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# arch/ia64/sn/kernel/irq.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#   2004/08/11 16:53:26-05:00 pfg@sgi.com +210 -226

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/arch/ia64/sn/kernel/irq.c	2004-08-11 16:55:17 -05:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#111: FILE: arch/ia64/sn/kernel/irq.c:28:
+extern int sn_force_interrupt_flag;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#154: FILE: arch/ia64/sn/kernel/irq.c:50:
+	uint64_t event_occurred, mask = 0;

CHECK:SPACING: No space is necessary after a cast
#161: FILE: arch/ia64/sn/kernel/irq.c:56:
+	    HUB_L((uint64_t *) GLOBAL_MMR_ADDR(nasid, SH_EVENT_OCCURRED));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#170: FILE: arch/ia64/sn/kernel/irq.c:69:
+	HUB_S((uint64_t *) GLOBAL_MMR_ADDR(nasid, SH_EVENT_OCCURRED_ALIAS),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#185: FILE: arch/ia64/sn/kernel/irq.c:78:
+	uint64_t event_occurred;

CHECK:SPACING: No space is necessary after a cast
#194: FILE: arch/ia64/sn/kernel/irq.c:83:
+		event_occurred = HUB_L((uint64_t *) GLOBAL_MMR_ADDR

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: arch/ia64/sn/kernel/irq.c:85:
+^I^I/* If the UART bit is set here, we may have received an $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#258: FILE: arch/ia64/sn/kernel/irq.c:120:
+			uint64_t xtalk_addr = new_sn_irq_info->irq_xtalkaddr;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_sn_irq_info->irq_bridge != NULL'
#269: FILE: arch/ia64/sn/kernel/irq.c:131:
+			if (IS_PCI_BRIDGE_ASIC(bridge_type) &&
+			    (new_sn_irq_info->irq_bridge != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_sn_irq_info->irq_bridge"
#270: FILE: arch/ia64/sn/kernel/irq.c:132:
+			    (new_sn_irq_info->irq_bridge != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#372: FILE: arch/ia64/sn/kernel/irq.c:205:
+	if (pdacpu(cpu)->sn_first_irq == 0 || pdacpu(cpu)->sn_first_irq > irq) {
+		pdacpu(cpu)->sn_first_irq = irq;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#410: FILE: arch/ia64/sn/kernel/irq.c:228:
+			if (foundmatch) {
+				break;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#445: FILE: arch/ia64/sn/kernel/irq.c:246:
+			if (foundmatch) {
+				break;
+			}

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: arch/ia64/sn/kernel/irq.c:268:
+			int cpu = nasid_slice_to_cpuid(nasid, slice);
+			sn_irq_info->irq_cpuid = cpu;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sn_irq_info->irq_bridge != NULL'
#496: FILE: arch/ia64/sn/kernel/irq.c:280:
+		if (IS_PCI_BRIDGE_ASIC(sn_irq_info->irq_bridge_type) &&
+		    (sn_irq_info->irq_bridge != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sn_irq_info->irq_bridge"
#497: FILE: arch/ia64/sn/kernel/irq.c:281:
+		    (sn_irq_info->irq_bridge != NULL)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#528: FILE: arch/ia64/sn/kernel/irq.c:299:
+	uint64_t regval;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#532: FILE: arch/ia64/sn/kernel/irq.c:302:
+	uint64_t irr_reg;

CHECK:SPACING: No space is necessary after a cast
#540: FILE: arch/ia64/sn/kernel/irq.c:310:
+	pcibus_info = (struct pcibus_info *) pcidev_info->pdi_pcibus_info;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sn_irq_info->irq_int_bit'
#587: FILE: arch/ia64/sn/kernel/irq.c:337:
+					    ~(sn_irq_info->
+					      irq_int_bit & regval);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:LINE_SPACING: Missing a blank line after declarations
#617: FILE: arch/ia64/sn/kernel/irq.c:354:
+		struct sn_irq_info *sn_irq_info = sn_irq[i];
+		while (sn_irq_info) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sn_irq_info->irq_bridge != NULL'
#619: FILE: arch/ia64/sn/kernel/irq.c:356:
+			if (IS_PCI_BRIDGE_ASIC(sn_irq_info->irq_bridge_type) &&
+			    (sn_irq_info->irq_bridge != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sn_irq_info->irq_bridge"
#620: FILE: arch/ia64/sn/kernel/irq.c:357:
+			    (sn_irq_info->irq_bridge != NULL)) {

CHECK:BIT_MACRO: Prefer using the BIT macro
#661: FILE: arch/ia64/sn/kernel/setup.c:53:
+#define MAX_PHYS_MEMORY		(1UL << 49)	/* 1 TB */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#666: FILE: arch/ia64/sn/kernel/setup.c:57:
+extern hubdev_init_node(nodepda_t *, cnodeid_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#667: FILE: arch/ia64/sn/kernel/setup.c:58:
+extern void bte_init_node(nodepda_t *, cnodeid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nodepda_t *' should also have an identifier name
#667: FILE: arch/ia64/sn/kernel/setup.c:58:
+extern void bte_init_node(nodepda_t *, cnodeid_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cnodeid_t' should also have an identifier name
#667: FILE: arch/ia64/sn/kernel/setup.c:58:
+extern void bte_init_node(nodepda_t *, cnodeid_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#668: FILE: arch/ia64/sn/kernel/setup.c:59:
+extern void bte_init_cpu(void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#673: FILE: arch/ia64/sn/kernel/setup.c:62:
+extern void (*ia64_mark_idle) (int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#673: FILE: arch/ia64/sn/kernel/setup.c:62:
+extern void (*ia64_mark_idle) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#673: FILE: arch/ia64/sn/kernel/setup.c:62:
+extern void (*ia64_mark_idle) (int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#680: FILE: arch/ia64/sn/kernel/setup.c:68:
+EXPORT_SYMBOL(sn_rtc_cycles_per_second);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:CAMELCASE: Avoid CamelCase: <orig_video_isVGA>
#729: FILE: arch/ia64/sn/kernel/setup.c:109:
+	.orig_video_isVGA = 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#779: FILE: arch/ia64/sn/kernel/setup.c:159:
+	void ia64_sal_handler_init(void *entry_point, void *gpval);

CHECK:SPACING: No space is necessary after a cast
#794: FILE: arch/ia64/sn/kernel/setup.c:174:
+	efi_systab = (efi_system_table_t *) __va(ia64_boot_param->efi_systab);

CHECK:SPACING: No space is necessary after a cast
#824: FILE: arch/ia64/sn/kernel/setup.c:197:
+		    (u64) REMOTE_HUB(get_nasid(), SH_JUNK_BUS_UART0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#825: FILE: arch/ia64/sn/kernel/setup.c:198:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#937: FILE: arch/ia64/sn/kernel/setup.c:303:
+		printk(KERN_WARNING

CHECK:BRACES: Unbalanced braces around else statement
#944: FILE: arch/ia64/sn/kernel/setup.c:307:
+	} else

CHECK:SPACING: No space is necessary after a cast
#956: FILE: arch/ia64/sn/kernel/setup.c:314:
+		    (u64) REMOTE_HUB(get_nasid(), SH_JUNK_BUS_UART0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#957: FILE: arch/ia64/sn/kernel/setup.c:315:
+		printk(KERN_DEBUG

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#1010: FILE: arch/ia64/sn/kernel/setup.c:366:
+	 * Allocate & initalize the nodepda for each node.
 	              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#1025: FILE: arch/ia64/sn/kernel/setup.c:377:
+	for (cnode = numnodes; cnode < numionodes; cnode ++) {
 	                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: arch/ia64/sn/kernel/setup.c:399:
+^I * Initialize the per node hubdev.  This includes IO Nodes and $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1052: FILE: arch/ia64/sn/kernel/setup.c:402:
+	for (cnode = 0; cnode < numionodes; cnode++) {
+		hubdev_init_node(nodepdaindr[cnode], cnode);
 	}

CHECK:SPACING: No space is necessary after a cast
#1086: FILE: arch/ia64/sn/kernel/setup.c:441:
+	    (typeof(pda->led_address)) (LED0 + (slice << LED_CPU_SHIFT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1137: FILE: arch/ia64/sn/kernel/setup.c:479:
+		int buddy_nasid;
+		buddy_nasid =

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1141: FILE: arch/ia64/sn/kernel/setup.c:483:
+		    (volatile unsigned long *)GLOBAL_MMR_ADDR(nasid,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1177: FILE: arch/ia64/sn/kernel/setup.c:513:
+			BUG();	/* All nodes must have klconfig tables! */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#1224: FILE: arch/ia64/sn/kernel/setup.c:555:
+	for (nasid = 0; nasid < MAX_PHYSNODE_ID; nasid +=2) {
 	                                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1226: FILE: arch/ia64/sn/kernel/setup.c:557:
+		if (physical_node_map[nasid] == -1) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 42 warnings, 22 checks, 1168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
