WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
It does this by creating each superblock with a false root and returning the

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#98: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: fs/nfs/internal.h:1:
+/* internal.h: internal NFS definitions

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: fs/nfs/internal.h:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: fs/nfs/internal.h:20:
+extern struct dentry *nfs_get_root(struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: fs/nfs/internal.h:26:
+extern struct dentry *nfs4_get_root(struct super_block *sb,

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/nfs/dir.c:844:
+ ^Iint found_alias = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: fs/nfs/dir.c:844:
+ ^Iint found_alias = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/nfs/dir.c:844:
+ ^Iint found_alias = 0;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#203: FILE: fs/nfs/dir.c:875:
+	if (S_ISDIR(inode->i_mode) && (anon = d_find_alias(inode))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#217: FILE: fs/nfs/dir.c:889:
+			iput(inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: fs/nfs/getroot.c:1:
+/* getroot.c: get the root dentry for an NFS mount

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#269: FILE: fs/nfs/getroot.c:38:
+#include <asm/uaccess.h>

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#303: FILE: fs/nfs/getroot.c:72:
+		fattr.mode = S_IFDIR | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#311: FILE: fs/nfs/getroot.c:80:
+			iput(iroot);
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_get_root', this function's name, in a string
#323: FILE: fs/nfs/getroot.c:92:
+		dprintk("nfs_get_root: getattr error = %d\n", -error);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_get_root', this function's name, in a string
#329: FILE: fs/nfs/getroot.c:98:
+		dprintk("nfs_get_root: get root inode failed\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#334: FILE: fs/nfs/getroot.c:103:
+	 * dentry tree reaches them */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#337: FILE: fs/nfs/getroot.c:106:
+		iput(inode);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_get_root', this function's name, in a string
#338: FILE: fs/nfs/getroot.c:107:
+		dprintk("nfs_get_root: get root dentry failed\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#362: FILE: fs/nfs/getroot.c:131:
+	struct nameidata nd;
 	                 ^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs4_get_root', this function's name, in a string
#383: FILE: fs/nfs/getroot.c:152:
+			dprintk("nfs4_get_root: getroot error = %d\n", -ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: fs/nfs/getroot.c:155:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs4_get_root', this function's name, in a string
#389: FILE: fs/nfs/getroot.c:158:
+			dprintk("nfs4_get_root: get root inode failed\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#395: FILE: fs/nfs/getroot.c:164:
+			iput(inode);
 			^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#424: FILE: fs/nfs/getroot.c:193:
+	nd.last_type = LAST_ROOT;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#425: FILE: fs/nfs/getroot.c:194:
+	nd.flags = LOOKUP_FOLLOW | LOOKUP_DIRECTORY | LOOKUP_ACCESS;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#426: FILE: fs/nfs/getroot.c:195:
+	nd.depth = 0;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#428: FILE: fs/nfs/getroot.c:197:
+	nd.mnt = mntget(namespace->root);
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#429: FILE: fs/nfs/getroot.c:198:
+	nd.dentry = dget(nd.mnt->mnt_root);
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#429: FILE: fs/nfs/getroot.c:198:
+	nd.dentry = dget(nd.mnt->mnt_root);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#433: FILE: fs/nfs/getroot.c:202:
+	ret = link_path_walk(mntpath, &nd);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#440: FILE: fs/nfs/getroot.c:209:
+	mntput(nd.mnt);
 	       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#441: FILE: fs/nfs/getroot.c:210:
+	mntroot = nd.dentry;
 	          ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#956: FILE: fs/namei.c:995:
+EXPORT_SYMBOL_GPL(link_path_walk);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#968: FILE: fs/namespace.c:89:
+EXPORT_SYMBOL_GPL(alloc_vfsmnt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#976: FILE: fs/namespace.c:97:
+EXPORT_SYMBOL_GPL(free_vfsmnt);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 31 warnings, 3 checks, 803 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
