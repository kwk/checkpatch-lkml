WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#42: 
funny things happend ;)
             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
diff -urpN linux-2.6.18/Documentation/ABI/testing/debugfs-pktcdvd pktcdvd-patch-2.6.18/Documentation/ABI/testing/debugfs-pktcdvd

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: Documentation/ABI/testing/sysfs-class-pktcdvd:29:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: Documentation/cdrom/packet-writing.txt:146:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: drivers/block/Kconfig:446:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: drivers/block/Kconfig:473:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: drivers/block/Kconfig:475:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: drivers/block/pktcdvd.c:79:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#354: FILE: drivers/block/pktcdvd.c:96:
+static int pktdev_major = 0; /* default: dynamic major number */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#365: FILE: drivers/block/pktcdvd.c:105:
+static struct class	*class_pktcdvd = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#366: FILE: drivers/block/pktcdvd.c:106:
+static struct dentry	*pkt_debugfs_root = NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#368: FILE: drivers/block/pktcdvd.c:108:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#380: FILE: drivers/block/pktcdvd.c:120:
+static struct pktcdvd_device *pkt_find_dev(dev_t devid, int* pidx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: drivers/block/pktcdvd.c:123:
+	int idx;
+	for (idx = 0; idx < MAX_WRITERS; idx++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: drivers/block/pktcdvd.c:125:
+		struct pktcdvd_device *pd = pkt_devs[idx];
+		if (pd && (pd->pkt_dev == devid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pd->pkt_dev == devid'
#385: FILE: drivers/block/pktcdvd.c:125:
+		if (pd && (pd->pkt_dev == devid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#396: FILE: drivers/block/pktcdvd.c:136:
+static struct pktcdvd_device *pkt_find_dev_bdev(dev_t bdevid, int* pidx)

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: drivers/block/pktcdvd.c:139:
+	int idx;
+	for (idx = 0; idx < MAX_WRITERS; idx++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: drivers/block/pktcdvd.c:141:
+		struct pktcdvd_device *pd = pkt_devs[idx];
+		if (pd && pd->bdev && (pd->bdev->bd_dev == bdevid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pd->bdev->bd_dev == bdevid'
#401: FILE: drivers/block/pktcdvd.c:141:
+		if (pd && pd->bdev && (pd->bdev->bd_dev == bdevid)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#412: FILE: drivers/block/pktcdvd.c:152:
+static void init_congestion(int* lo, int* hi)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#412: FILE: drivers/block/pktcdvd.c:152:
+static void init_congestion(int* lo, int* hi)

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: drivers/block/pktcdvd.c:157:
+		if (*lo <= 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#419: FILE: drivers/block/pktcdvd.c:159:
+		else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#421: FILE: drivers/block/pktcdvd.c:161:
+			*lo = max(*lo, PKT_WRITE_CONGESTION_MIN/4);
 			                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#459: FILE: drivers/block/pktcdvd.c:199:
+#define PRINT	n += scnprintf

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#460: FILE: drivers/block/pktcdvd.c:200:
+#define BC	buf+n, blen-n
           	   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#460: FILE: drivers/block/pktcdvd.c:200:
+#define BC	buf+n, blen-n
           	           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#460: FILE: drivers/block/pktcdvd.c:200:
+#define BC	buf+n, blen-n

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: drivers/block/pktcdvd.c:202:
+^I^I   ^I^Ibdevname(pd->bdev, bdev_buf));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: drivers/block/pktcdvd.c:202:
+^I^I   ^I^Ibdevname(pd->bdev, bdev_buf));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/block/pktcdvd.c:202:
+	PRINT(BC, "Writer %s mapped to %s:\n", pd->name,
+		   		bdevname(pd->bdev, bdev_buf));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/block/pktcdvd.c:246:
+	PRINT(BC, "\tcurrent sector:\t\t0x%llx\n",
+					(unsigned long long)pd->current_sector);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/block/pktcdvd.c:251:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/block/pktcdvd.c:253:
+	PRINT(BC, "\twrite congestion marks:\toff=%d on=%d\n",
+			pd->write_congestion_off,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#517: FILE: drivers/block/pktcdvd.c:257:
+	buf[blen-1] = 0;
 	        ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#521: FILE: drivers/block/pktcdvd.c:261:
+static struct pktcdvd_dev_kobj* pkt_kobj_create(struct pktcdvd_device *pd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/block/pktcdvd.c:262:
+static struct pktcdvd_dev_kobj* pkt_kobj_create(struct pktcdvd_device *pd,
+				const char* name,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#522: FILE: drivers/block/pktcdvd.c:262:
+				const char* name,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#523: FILE: drivers/block/pktcdvd.c:263:
+				struct kobject* parent,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#524: FILE: drivers/block/pktcdvd.c:264:
+				struct kobj_type* ktype)

WARNING:LINE_SPACING: Missing a blank line after declarations
#527: FILE: drivers/block/pktcdvd.c:267:
+	struct pktcdvd_dev_kobj *p;
+	p = kzalloc(sizeof(*p), GFP_KERNEL);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#538: FILE: drivers/block/pktcdvd.c:278:
+}
+static void pkt_kobj_remove(struct pktcdvd_dev_kobj *p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#543: FILE: drivers/block/pktcdvd.c:283:
+}
+static void pkt_kobj_release(struct kobject *kobj)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#555: FILE: drivers/block/pktcdvd.c:295:
+#define DEF_ATTR(_obj,_name,_mode) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#555: FILE: drivers/block/pktcdvd.c:295:
+#define DEF_ATTR(_obj,_name,_mode) \
                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#560: FILE: drivers/block/pktcdvd.c:300:
+static int pkt_setup_dev(dev_t dev, dev_t* pkt_dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#564: FILE: drivers/block/pktcdvd.c:304:
+/**********************************************************
+  /sys/class/pktcdvd/pktcdvd[0-7]/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: drivers/block/pktcdvd.c:305:
+                     write_queue/size$

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: drivers/block/pktcdvd.c:306:
+                     write_queue/congestion_off$

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: drivers/block/pktcdvd.c:307:
+                     write_queue/congestion_on$

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: drivers/block/pktcdvd.c:308:
+                     stat/reset$

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: drivers/block/pktcdvd.c:309:
+                     stat/packets_started$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: drivers/block/pktcdvd.c:310:
+                     stat/packets_finished$

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: drivers/block/pktcdvd.c:311:
+                     stat/kb_written$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: drivers/block/pktcdvd.c:312:
+                     stat/kb_read$

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: drivers/block/pktcdvd.c:313:
+                     stat/kb_read_gather$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: drivers/block/pktcdvd.c:344:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_dbuf' - possible side-effects?
#605: FILE: drivers/block/pktcdvd.c:345:
+#define DECLARE_BUF_AS_STRING(_dbuf, _b, _l) \
+	char _dbuf[64]; int dlen = (_l) < 0 ? 0 : (_l); \
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \
+	memcpy(_dbuf, _b, dlen); _dbuf[dlen] = 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_l' - possible side-effects?
#605: FILE: drivers/block/pktcdvd.c:345:
+#define DECLARE_BUF_AS_STRING(_dbuf, _b, _l) \
+	char _dbuf[64]; int dlen = (_l) < 0 ? 0 : (_l); \
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \
+	memcpy(_dbuf, _b, dlen); _dbuf[dlen] = 0

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#607: FILE: drivers/block/pktcdvd.c:347:
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \
 	                                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#607: FILE: drivers/block/pktcdvd.c:347:
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: drivers/block/pktcdvd.c:349:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#610: FILE: drivers/block/pktcdvd.c:350:
+	
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: drivers/block/pktcdvd.c:352:
+static ssize_t kobj_pkt_show(struct kobject *kobj,
+			struct attribute *attr, char *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: drivers/block/pktcdvd.c:375:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: drivers/block/pktcdvd.c:381:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: drivers/block/pktcdvd.c:398:
+static ssize_t kobj_pkt_store(struct kobject *kobj,
+			struct attribute *attr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: drivers/block/pktcdvd.c:413:
+^I^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#675: FILE: drivers/block/pktcdvd.c:415:
+	} else if (strcmp(attr->name, "congestion_off") == 0
+		   && sscanf(dbuf, "%d", &val) == 1) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#675: FILE: drivers/block/pktcdvd.c:415:
+		   && sscanf(dbuf, "%d", &val) == 1) {
+		spin_lock(&pd->lock);
+		pd->write_congestion_off = val;
+		init_congestion(&pd->write_congestion_off,
+				&pd->write_congestion_on);
+		spin_unlock(&pd->lock);
+	} else if (strcmp(attr->name, "congestion_on") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#682: FILE: drivers/block/pktcdvd.c:422:
+	} else if (strcmp(attr->name, "congestion_on") == 0
+		   && sscanf(dbuf, "%d", &val) == 1) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#682: FILE: drivers/block/pktcdvd.c:422:
+		   && sscanf(dbuf, "%d", &val) == 1) {
+		spin_lock(&pd->lock);
+		pd->write_congestion_on = val;
+		init_congestion(&pd->write_congestion_off,
+				&pd->write_congestion_on);
+		spin_unlock(&pd->lock);
+	}

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#693: FILE: drivers/block/pktcdvd.c:433:
+static struct sysfs_ops kobj_pkt_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#697: FILE: drivers/block/pktcdvd.c:437:
+};
+static struct kobj_type kobj_pkt_type_stat = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#702: FILE: drivers/block/pktcdvd.c:442:
+};
+static struct kobj_type kobj_pkt_type_wqueue = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#708: FILE: drivers/block/pktcdvd.c:448:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: drivers/block/pktcdvd.c:453:
+		pd->clsdev = class_device_create(class_pktcdvd,
+					NULL, pd->pkt_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: drivers/block/pktcdvd.c:460:
+		pd->kobj_stat = pkt_kobj_create(pd, "stat",
+					&pd->clsdev->kobj,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: drivers/block/pktcdvd.c:463:
+		pd->kobj_wqueue = pkt_kobj_create(pd, "write_queue",
+					&pd->clsdev->kobj,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#736: FILE: drivers/block/pktcdvd.c:476:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#738: FILE: drivers/block/pktcdvd.c:478:
+/********************************************************************
+  /sys/class/pktcdvd/

ERROR:CODE_INDENT: code indent should use tabs where possible
#739: FILE: drivers/block/pktcdvd.c:479:
+                     add            map block device$

ERROR:CODE_INDENT: code indent should use tabs where possible
#740: FILE: drivers/block/pktcdvd.c:480:
+                     remove         unmap packet dev$

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: drivers/block/pktcdvd.c:481:
+                     device_map     show mappings$

ERROR:CODE_INDENT: code indent should use tabs where possible
#742: FILE: drivers/block/pktcdvd.c:482:
+                     packet_buffers number of packet buffers per dev$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#749: FILE: drivers/block/pktcdvd.c:489:
+}
+static ssize_t class_pktcdvd_show_map(struct class *c, char *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: drivers/block/pktcdvd.c:493:
+	int idx;
+	data[0] = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#757: FILE: drivers/block/pktcdvd.c:497:
+		struct pktcdvd_device *pd = pkt_devs[idx];
+		if (!pd)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#759: FILE: drivers/block/pktcdvd.c:499:
+		n += sprintf(data+n, "%s %u:%u %u:%u\n",
 		                 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#768: FILE: drivers/block/pktcdvd.c:508:
+}
+static ssize_t class_pktcdvd_show_pb(struct class *c, char *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: drivers/block/pktcdvd.c:512:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: drivers/block/pktcdvd.c:514:
+static ssize_t class_pktcdvd_store_add(struct class *c, const char *buf,
+					size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#778: FILE: drivers/block/pktcdvd.c:518:
+	DECLARE_BUF_AS_STRING(dbuf, buf, count);
+	if (sscanf(dbuf, "%u:%u", &major, &minor) == 2) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#784: FILE: drivers/block/pktcdvd.c:524:
+}
+static ssize_t class_pktcdvd_store_remove(struct class *c, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: drivers/block/pktcdvd.c:525:
+static ssize_t class_pktcdvd_store_remove(struct class *c, const char *buf,
+					size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: drivers/block/pktcdvd.c:529:
+	DECLARE_BUF_AS_STRING(dbuf, buf, count);
+	if (sscanf(dbuf, "%u:%u", &major, &minor) == 2) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#795: FILE: drivers/block/pktcdvd.c:535:
+}
+static ssize_t class_pktcdvd_store_pb(struct class *c, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: drivers/block/pktcdvd.c:536:
+static ssize_t class_pktcdvd_store_pb(struct class *c, const char *buf,
+					size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#800: FILE: drivers/block/pktcdvd.c:540:
+	DECLARE_BUF_AS_STRING(dbuf, buf, count);
+	if (sscanf(dbuf, "%d", &val) == 1) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#800: FILE: drivers/block/pktcdvd.c:540:
+	if (sscanf(dbuf, "%d", &val) == 1) {
+		mutex_lock_nested(&ctl_mutex, SINGLE_DEPTH_NESTING);
+		init_packet_buffers(&val);
+		packet_buffers = val;
+		mutex_unlock(&ctl_mutex);
+		return count;
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: drivers/block/pktcdvd.c:551:
+ __ATTR(add,            0200, NULL, class_pktcdvd_store_add),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: drivers/block/pktcdvd.c:552:
+ __ATTR(remove,         0200, NULL, class_pktcdvd_store_remove),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: drivers/block/pktcdvd.c:553:
+ __ATTR(device_map,     0444, class_pktcdvd_show_map, NULL),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: drivers/block/pktcdvd.c:554:
+ __ATTR(packet_buffers, 0644, class_pktcdvd_show_pb, class_pktcdvd_store_pb),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: drivers/block/pktcdvd.c:555:
+ __ATTR_NULL$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#818: FILE: drivers/block/pktcdvd.c:558:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: drivers/block/pktcdvd.c:562:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#838: FILE: drivers/block/pktcdvd.c:578:
+		printk(DRIVER_NAME ": failed to create class pktcdvd\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#852: FILE: drivers/block/pktcdvd.c:592:
+/********************************************************************
+  entries in debugfs

ERROR:TRAILING_WHITESPACE: trailing whitespace
#862: FILE: drivers/block/pktcdvd.c:602:
+^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#873: FILE: drivers/block/pktcdvd.c:613:
+static struct file_operations debug_fops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#890: FILE: drivers/block/pktcdvd.c:630:
+	pd->dfs_f_info = debugfs_create_file("info", S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: drivers/block/pktcdvd.c:631:
+	pd->dfs_f_info = debugfs_create_file("info", S_IRUGO,
+				pd->dfs_d_root, pd, &debug_fops);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#897: FILE: drivers/block/pktcdvd.c:637:
+}
+static void pkt_debugfs_dev_remove(struct pktcdvd_device *pd)

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#902: FILE: drivers/block/pktcdvd.c:642:
+	if (pd->dfs_f_info)
+		debugfs_remove(pd->dfs_f_info);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#905: FILE: drivers/block/pktcdvd.c:645:
+	if (pd->dfs_d_root)
+		debugfs_remove(pd->dfs_d_root);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#908: FILE: drivers/block/pktcdvd.c:648:
+}
+static void pkt_debugfs_init(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#916: FILE: drivers/block/pktcdvd.c:656:
+}
+static void pkt_debugfs_cleanup(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#924: FILE: drivers/block/pktcdvd.c:664:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#934: FILE: drivers/block/pktcdvd.c:674:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: drivers/block/pktcdvd.c:681:
+^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#952: FILE: drivers/block/pktcdvd.c:692:
+static struct file_operations pkt_proc_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#959: FILE: drivers/block/pktcdvd.c:699:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: drivers/block/pktcdvd.c:705:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: drivers/block/pktcdvd.c:707:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#977: FILE: drivers/block/pktcdvd.c:717:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: drivers/block/pktcdvd.c:722:
+static int pkt_ctl_ioctl(struct inode *inode, struct file *file,
+			unsigned int cmd, unsigned long arg)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1019: FILE: drivers/block/pktcdvd.c:759:
+static struct file_operations pkt_ctl_fops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1023: FILE: drivers/block/pktcdvd.c:763:
+};
+static struct miscdevice pkt_misc = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1024: FILE: drivers/block/pktcdvd.c:764:
+^I.minor ^I^I= MISC_DYNAMIC_MINOR,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1025: FILE: drivers/block/pktcdvd.c:765:
+^I.name  ^I^I= DRIVER_NAME,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1026: FILE: drivers/block/pktcdvd.c:766:
+^I.fops  ^I^I= &pkt_ctl_fops$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1031: FILE: drivers/block/pktcdvd.c:771:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1049: FILE: drivers/block/pktcdvd.c:1090:
+	printk(DRIVER_NAME ":");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1076: FILE: drivers/block/pktcdvd.c:1290:
+		printk(DRIVER_NAME ": cdrom max_phys_segments too small\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1093: FILE: drivers/block/pktcdvd.c:1655:
+	/* check write congestion marks, and if bio_queue_size is
+	   below, wake up any waiters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1093: FILE: drivers/block/pktcdvd.c:1655:
+	   below, wake up any waiters */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1095: FILE: drivers/block/pktcdvd.c:1657:
+^I ^I^I&& pd->bio_queue_size <= pd->write_congestion_off$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1095: FILE: drivers/block/pktcdvd.c:1657:
+^I ^I^I&& pd->bio_queue_size <= pd->write_congestion_off$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1095: FILE: drivers/block/pktcdvd.c:1657:
+	wakeup = (pd->write_congestion_on > 0
+	 		&& pd->bio_queue_size <= pd->write_congestion_off

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1096: FILE: drivers/block/pktcdvd.c:1658:
+	 		&& pd->bio_queue_size <= pd->write_congestion_off
+			&& waitqueue_active(&pd->write_congestion_wqueue));

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1096: FILE: drivers/block/pktcdvd.c:1658:
+			&& waitqueue_active(&pd->write_congestion_wqueue));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1139: FILE: drivers/block/pktcdvd.c:1969:
+	printk(DRIVER_NAME ": %s packets, ", pd->settings.fp ? "Fixed" : "Variable");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1148: FILE: drivers/block/pktcdvd.c:2154:
+		printk(DRIVER_NAME ": write mode wrong %d\n", wp->data_block_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1157: FILE: drivers/block/pktcdvd.c:2198:
+	printk(DRIVER_NAME ": bad state %d-%d-%d\n", ti->rt, ti->blank, ti->packet);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1167: FILE: drivers/block/pktcdvd.c:2217:
+			VPRINTK(DRIVER_NAME ": Wrong disc profile (%x)\n",
+							pd->mmc3_profile);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1176: FILE: drivers/block/pktcdvd.c:2226:
+		printk(DRIVER_NAME ": Unknown disc. No track?\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1182: FILE: drivers/block/pktcdvd.c:2231:
+		printk(DRIVER_NAME ": Wrong disc type (%x)\n", di->disc_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1188: FILE: drivers/block/pktcdvd.c:2236:
+		printk(DRIVER_NAME ": Disc not erasable\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1194: FILE: drivers/block/pktcdvd.c:2241:
+		printk(DRIVER_NAME ": Can't write to last track (reserved)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1203: FILE: drivers/block/pktcdvd.c:2277:
+		printk(DRIVER_NAME ": failed get_track\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1209: FILE: drivers/block/pktcdvd.c:2282:
+		printk(DRIVER_NAME ": can't write to this track\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1218: FILE: drivers/block/pktcdvd.c:2292:
+		printk(DRIVER_NAME ": detected zero packet size!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1223: FILE: drivers/block/pktcdvd.c:2296:
+		printk(DRIVER_NAME ": packet size is too big\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1232: FILE: drivers/block/pktcdvd.c:2338:
+			printk(DRIVER_NAME ": unknown data mode\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1241: FILE: drivers/block/pktcdvd.c:2372:
+		printk(DRIVER_NAME ": write caching control failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1245: FILE: drivers/block/pktcdvd.c:2375:
+		printk(DRIVER_NAME ": enabled write caching on %s\n", pd->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1254: FILE: drivers/block/pktcdvd.c:2489:
+		printk(DRIVER_NAME ": Disc type is not CD-RW\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1259: FILE: drivers/block/pktcdvd.c:2493:
+		printk(DRIVER_NAME ": A1 values on media are not valid, maybe not CDRW?\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1268: FILE: drivers/block/pktcdvd.c:2513:
+			printk(DRIVER_NAME ": Unknown disc sub-type %d\n",st);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1268: FILE: drivers/block/pktcdvd.c:2513:
+			printk(DRIVER_NAME ": Unknown disc sub-type %d\n",st);
 			                                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1273: FILE: drivers/block/pktcdvd.c:2517:
+		printk(DRIVER_NAME ": Max. media speed: %d\n",*speed);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1273: FILE: drivers/block/pktcdvd.c:2517:
+		printk(DRIVER_NAME ": Max. media speed: %d\n",*speed);
 		                                             ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1273: FILE: drivers/block/pktcdvd.c:2517:
+		printk(DRIVER_NAME ": Max. media speed: %d\n",*speed);
 		                                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1432: FILE: drivers/block/pktcdvd.c:2520:
+		printk(DRIVER_NAME ": Unknown speed %d for sub-type %d\n",sp,st);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1432: FILE: drivers/block/pktcdvd.c:2520:
+		printk(DRIVER_NAME ": Unknown speed %d for sub-type %d\n",sp,st);
 		                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1432: FILE: drivers/block/pktcdvd.c:2520:
+		printk(DRIVER_NAME ": Unknown speed %d for sub-type %d\n",sp,st);
 		                                                            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1438: FILE: drivers/block/pktcdvd.c:2525:
+static int pkt_perform_opc(struct pktcdvd_device *pd)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1451: FILE: drivers/block/pktcdvd.c:2535:
+	cgc.timeout = 60*HZ;
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1454: FILE: drivers/block/pktcdvd.c:2538:
+	if ((ret = pkt_generic_packet(pd, &cgc)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1460: FILE: drivers/block/pktcdvd.c:2543:
+static int pkt_open_write(struct pktcdvd_device *pd)
  {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1473: FILE: drivers/block/pktcdvd.c:2548:
+	if ((ret = pkt_probe_settings(pd))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1495: FILE: drivers/block/pktcdvd.c:2553:
+	if ((ret = pkt_set_write_settings(pd))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1511: FILE: drivers/block/pktcdvd.c:2560:
+	if ((ret = pkt_get_max_speed(pd, &write_speed)))

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1513: FILE: drivers/block/pktcdvd.c:2562:
+	switch (pd->mmc3_profile) {
+		case 0x13: /* DVD-RW */
+		case 0x1a: /* DVD+RW */
+		case 0x12: /* DVD-RAM */
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1520: FILE: drivers/block/pktcdvd.c:2569:
+			if ((ret = pkt_media_speed(pd, &media_write_speed)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1532: FILE: drivers/block/pktcdvd.c:2577:
+	if ((ret = pkt_set_speed(pd, write_speed, read_speed))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1545: FILE: drivers/block/pktcdvd.c:2584:
+	if ((ret = pkt_perform_opc(pd))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1545: FILE: drivers/block/pktcdvd.c:2584:
+	if ((ret = pkt_perform_opc(pd))) {
+		DPRINTK(DRIVER_NAME ": %s Optimum Power Calibration failed\n", pd->name);
  	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1571: FILE: drivers/block/pktcdvd.c:2622:
+		printk(DRIVER_NAME ": %s incorrect request queue\n", bdevname(bio->bi_bdev, b));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1580: FILE: drivers/block/pktcdvd.c:2644:
+		printk(DRIVER_NAME ": WRITE for ro device %s (%llu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1581: FILE: drivers/block/pktcdvd.c:2645:
+		printk(DRIVER_NAME ": WRITE for ro device %s (%llu)\n",
  			pd->name, (unsigned long long)bio->bi_sector);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1587: FILE: drivers/block/pktcdvd.c:2650:
+		printk(DRIVER_NAME ": wrong bio size\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1604: FILE: drivers/block/pktcdvd.c:2720:
+	if (pd->write_congestion_on > 0
+	     && pd->bio_queue_size >= pd->write_congestion_on) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1610: FILE: drivers/block/pktcdvd.c:2726:
+			prepare_to_wait_exclusive(&pd->write_congestion_wqueue,
+					&wait, TASK_UNINTERRUPTIBLE);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1613: FILE: drivers/block/pktcdvd.c:2729:
+			/* if we are here, bio_queue_size should be below
+			   congestion_off, but be sure and do a test */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1613: FILE: drivers/block/pktcdvd.c:2729:
+			   congestion_off, but be sure and do a test */

ERROR:SPACING: space required before the open parenthesis '('
#1615: FILE: drivers/block/pktcdvd.c:2731:
+		} while(pd->bio_queue_size > pd->write_congestion_off);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1642: FILE: drivers/block/pktcdvd.c:2790:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1646: FILE: drivers/block/pktcdvd.c:2794:
+static int pkt_open_dev(struct pktcdvd_device *pd, int write)
  {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1664: FILE: drivers/block/pktcdvd.c:2806:
+	if ((ret = blkdev_get(pd->bdev, FMODE_READ, O_RDONLY)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1667: FILE: drivers/block/pktcdvd.c:2809:
+	if ((ret = bd_claim(pd->bdev, pd)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1670: FILE: drivers/block/pktcdvd.c:2812:
+	if ((ret = pkt_get_last_written(pd, &lba))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1671: FILE: drivers/block/pktcdvd.c:2813:
+		printk(DRIVER_NAME ": pkt_get_last_written failed\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1681: FILE: drivers/block/pktcdvd.c:2823:
+		if ((ret = pkt_open_write(pd)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1696: FILE: drivers/block/pktcdvd.c:2838:
+	if ((ret = pkt_set_segment_merging(pd, q)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1701: FILE: drivers/block/pktcdvd.c:2843:
+			printk(DRIVER_NAME ": not enough memory for buffers\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1705: FILE: drivers/block/pktcdvd.c:2847:
+		printk(DRIVER_NAME ": %lukB available on disc\n", lba << 1);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1723: FILE: drivers/block/pktcdvd.c:2864:
+static void pkt_release_dev(struct pktcdvd_device *pd, int flush)
  {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1750: FILE: drivers/block/pktcdvd.c:2878:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1771: FILE: drivers/block/pktcdvd.c:2899:
+	BUG_ON(pd->refcnt < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1809: FILE: drivers/block/pktcdvd.c:2937:
+	BUG_ON(pd->refcnt < 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1812: FILE: drivers/block/pktcdvd.c:2940:
+		int flush = test_bit(PACKET_WRITABLE, &pd->flags);
+		pkt_release_dev(pd, flush);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1821: FILE: drivers/block/pktcdvd.c:2947:
+static int pkt_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+			unsigned long arg)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_ioctl', this function's name, in a string
#1826: FILE: drivers/block/pktcdvd.c:2951:
+	VPRINTK("pkt_ioctl: cmd %x, dev %d:%d\n", cmd, imajor(inode), iminor(inode));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1886: FILE: drivers/block/pktcdvd.c:2981:
+static int pkt_media_changed(struct gendisk *disk)
  {

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#1907: FILE: drivers/block/pktcdvd.c:2996:
+static struct block_device_operations pktcdvd_ops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1925: FILE: drivers/block/pktcdvd.c:3014:
+ static void pkt_init_queue(struct pktcdvd_device *pd)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1935: FILE: drivers/block/pktcdvd.c:3024:
+}
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1948: FILE: drivers/block/pktcdvd.c:3035:
+		printk(DRIVER_NAME ": Recursive setup not allowed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1957: FILE: drivers/block/pktcdvd.c:3043:
+			printk(DRIVER_NAME ": %s already setup\n", bdevname(pd2->bdev, b));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1962: FILE: drivers/block/pktcdvd.c:3047:
+			printk(DRIVER_NAME ": Can't chain pktcdvd devices\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1971: FILE: drivers/block/pktcdvd.c:3058:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1976: FILE: drivers/block/pktcdvd.c:3063:
+	/* the block device must have a queue ! else many of the
+	   pktcdvd code breaks. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1976: FILE: drivers/block/pktcdvd.c:3063:
+	   pktcdvd code breaks. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1978: FILE: drivers/block/pktcdvd.c:3065:
+		printk(DRIVER_NAME ": block device %s has no request queue, aborting\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1979: FILE: drivers/block/pktcdvd.c:3066:
+		printk(DRIVER_NAME ": block device %s has no request queue, aborting\n",
+			bdevname(bdev, b));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1992: FILE: drivers/block/pktcdvd.c:3079:
+		printk(DRIVER_NAME ": can't start kernel thread\n");

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2082: FILE: drivers/block/pktcdvd.c:3108:
+static int pkt_setup_dev(dev_t dev, dev_t* pkt_dev)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2082: FILE: drivers/block/pktcdvd.c:3108:
+static int pkt_setup_dev(dev_t dev, dev_t* pkt_dev)
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2089: FILE: drivers/block/pktcdvd.c:3114:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2098: FILE: drivers/block/pktcdvd.c:3121:
+		printk(DRIVER_NAME ": max %d writers supported\n", MAX_WRITERS);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2108: FILE: drivers/block/pktcdvd.c:3129:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2119: FILE: drivers/block/pktcdvd.c:3134:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2153: FILE: drivers/block/pktcdvd.c:3169:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2162: FILE: drivers/block/pktcdvd.c:3177:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2171: FILE: drivers/block/pktcdvd.c:3189:
+out_mutex:^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2173: FILE: drivers/block/pktcdvd.c:3191:
+	printk(DRIVER_NAME ": setup of pktcdvd device failed\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2182: FILE: drivers/block/pktcdvd.c:3199:
+static int pkt_remove_dev(dev_t pkt_dev)
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2188: FILE: drivers/block/pktcdvd.c:3204:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2219: FILE: drivers/block/pktcdvd.c:3224:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2225: FILE: drivers/block/pktcdvd.c:3230:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2298: FILE: drivers/block/pktcdvd.c:3247:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2340: FILE: drivers/block/pktcdvd.c:3276:
+		printk(DRIVER_NAME ": Unable to register block device\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2357: FILE: drivers/block/pktcdvd.c:3289:
+		printk(DRIVER_NAME ": Unable to register misc device\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2376: FILE: drivers/block/pktcdvd.c:3303:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2390: FILE: drivers/block/pktcdvd.c:3315:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2407: FILE: drivers/block/pktcdvd.c:3330:
+              "Thomas Maier <balagi@justmail.de>");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2407: FILE: drivers/block/pktcdvd.c:3330:
+              "Thomas Maier <balagi@justmail.de>");$

WARNING:SPLIT_STRING: quoted string split across lines
#2407: FILE: drivers/block/pktcdvd.c:3330:
+MODULE_AUTHOR("Jens Axboe <axboe@suse.de>,Peter Osterlund <petero2@telia.com>,"
+              "Thomas Maier <balagi@justmail.de>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2453: FILE: include/linux/pktcdvd.h:38:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2455: FILE: include/linux/pktcdvd.h:40:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2502: FILE: include/linux/pktcdvd.h:77:
+#define PKT_WRITE_CONGESTION_MAX (1024*1024)
                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2506: FILE: include/linux/pktcdvd.h:81:
+
+

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#2535: FILE: include/linux/pktcdvd.h:136:
+ * able to sucessfully recover with this option (drive will return good
            ^^^^^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2559: FILE: include/linux/pktcdvd.h:277:
+struct pktcdvd_dev_kobj
+{

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2563: FILE: include/linux/pktcdvd.h:281:
+};
+#define to_pktdevkobj(_k) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2564: FILE: include/linux/pktcdvd.h:282:
+  ((struct pktcdvd_dev_kobj*)container_of(_k,struct pktcdvd_dev_kobj,kobj))$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2564: FILE: include/linux/pktcdvd.h:282:
+  ((struct pktcdvd_dev_kobj*)container_of(_k,struct pktcdvd_dev_kobj,kobj))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2564: FILE: include/linux/pktcdvd.h:282:
+  ((struct pktcdvd_dev_kobj*)container_of(_k,struct pktcdvd_dev_kobj,kobj))
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2564: FILE: include/linux/pktcdvd.h:282:
+  ((struct pktcdvd_dev_kobj*)container_of(_k,struct pktcdvd_dev_kobj,kobj))
                                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2573: FILE: include/linux/pktcdvd.h:314:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2581: FILE: include/linux/pktcdvd.h:322:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035405.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 96 errors, 90 warnings, 68 checks, 2458 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035405.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
