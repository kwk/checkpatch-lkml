WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
as mentioned a few days ago I was going to try to implement a swap prefetch=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#86: FILE: arch/i386/Kconfig:374:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#87: FILE: arch/i386/Kconfig:375:
+config SWAP_PREFETCH
+	tristate "Prefetch swapped memory"
+	depends on SWAP
+	help
+	  This option enables the kernel to prefetch swapped memory pages
+	  when idle.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/swap.h:158:
+extern unsigned int nr_avail_buffer_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/swap.h:159:
+extern unsigned int nr_avail_pagecache_pages(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: include/linux/swap_prefetch.h:1:
+#ifndef _LINUX_SWAP_PREFETCH_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#128: FILE: include/linux/swap_prefetch.h:13:
+	spinlock_t lock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: include/linux/swap_prefetch.h:22:
+	struct swapped_entry_t * swapped_entry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#140: FILE: include/linux/swap_prefetch.h:25:
+	swapped_entry =3D kmalloc(sizeof(*swapped_entry), GFP_ATOMIC);
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#141: FILE: include/linux/swap_prefetch.h:26:
+	if(swapped_entry) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#142: FILE: include/linux/swap_prefetch.h:27:
+		swapped_entry->entry =3D entry;
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#144: FILE: include/linux/swap_prefetch.h:29:
+		ret =3D radix_tree_insert(&swapped_root.tree, entry.val, swapped_entry);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#145: FILE: include/linux/swap_prefetch.h:30:
+		if(ret =3D=3D 0)
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: include/linux/swap_prefetch.h:30:
+		if(ret =3D=3D 0)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#145: FILE: include/linux/swap_prefetch.h:30:
+		if(ret =3D=3D 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#145: FILE: include/linux/swap_prefetch.h:30:
+		if(ret =3D=3D 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#155: FILE: include/linux/swap_prefetch.h:40:
+	struct swapped_entry_t * swapped_entry;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#158: FILE: include/linux/swap_prefetch.h:43:
+	swapped_entry =3D radix_tree_lookup(&swapped_root.tree, entry.val);
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: include/linux/swap_prefetch.h:44:
+	if(swapped_entry) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#186: FILE: kernel/ksyms.c:76:
+EXPORT_SYMBOL(nr_avail_pagecache_pages);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#187: FILE: kernel/ksyms.c:77:
+EXPORT_SYMBOL(read_swap_cache_async);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#210: FILE: mm/page_alloc.c:792:
+	unsigned long avail =3D 0;
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#213: FILE: mm/page_alloc.c:795:
+		struct zonelist *zonelist =3D pgdat->node_zonelists + offset;
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#214: FILE: mm/page_alloc.c:796:
+		struct zone **zonep =3D zonelist->zones;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#216: FILE: mm/page_alloc.c:798:
+		unsigned long low =3D 0;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#218: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#218: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#218: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#218: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#219: FILE: mm/page_alloc.c:801:
+			unsigned long local_free =3D zone->free_pages;
 			                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#220: FILE: mm/page_alloc.c:802:
+			unsigned long local_low  =3D zone->pages_low;
 			                         ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#221: FILE: mm/page_alloc.c:803:
+			unsigned long local_low  =3D zone->pages_low;
+		=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#221: FILE: mm/page_alloc.c:803:
+		=09
 		^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#222: FILE: mm/page_alloc.c:804:
+			low +=3D local_low;
 			    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#223: FILE: mm/page_alloc.c:805:
+			if (local_free > low) {
+				avail =3D max(avail, local_free - low);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#224: FILE: mm/page_alloc.c:806:
+				avail =3D max(avail, local_free - low);
 				      ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#226: FILE: mm/page_alloc.c:808:
+			low +=3D local_low * sysctl_lower_zone_protection;
 			    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#257: FILE: mm/swap_prefetch.c:1:
+#include <linux/module.h>

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#263: FILE: mm/swap_prefetch.c:7:
+static int interval       =3D INTERVAL;
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: mm/swap_prefetch.c:9:
+MODULE_PARM(interval,"i");
                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: mm/swap_prefetch.c:11:
+MODULE_PARM_DESC(interval,
+	"delay in seconds to wait between memory checks (default 60)");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#277: FILE: mm/swap_prefetch.c:21:
+static struct timer_list prefetch_timer =3D
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#292: FILE: mm/swap_prefetch.c:36:
+	prefetch_timer.expires =3D jiffies + interval * HZ;
 	                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#301: FILE: mm/swap_prefetch.c:45:
+	printk(KERN_INFO "Available pages before: %d\n", nr_avail_pagecache_pages=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#301: FILE: mm/swap_prefetch.c:45:
+	printk(KERN_INFO "Available pages before: %d\n", nr_avail_pagecache_pages=
 	                                                                         ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#304: FILE: mm/swap_prefetch.c:47:
+	while(nr_avail_pagecache_pages() !=3D 0) {
 	                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: mm/swap_prefetch.c:47:
+	while(nr_avail_pagecache_pages() !=3D 0) {

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: mm/swap_prefetch.c:52:
+		if(list_empty(&swapped_root.list)) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#313: FILE: mm/swap_prefetch.c:56:
+		swapped_entry =3D list_entry(swapped_root.list.next,
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#315: FILE: mm/swap_prefetch.c:58:
+		entry =3D swapped_entry->entry;
 		      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#321: FILE: mm/swap_prefetch.c:64:
+	printk(KERN_INFO "Available pages after: %d\n", nr_avail_pagecache_pages(=

ERROR:SPACING: spaces required around that '=' (ctx:BxE)
#321: FILE: mm/swap_prefetch.c:64:
+	printk(KERN_INFO "Available pages after: %d\n", nr_avail_pagecache_pages(=
 	                                                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#353: FILE: mm/swap_state.c:52:
 };
+struct swapped_root_t swapped_root =3D {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#353: FILE: mm/swap_state.c:52:
+struct swapped_root_t swapped_root =3D {
                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#354: FILE: mm/swap_state.c:53:
+	.lock =3D SPIN_LOCK_UNLOCKED,
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#355: FILE: mm/swap_state.c:54:
+	.list =3D LIST_HEAD_INIT(swapped_root.list),
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#356: FILE: mm/swap_state.c:55:
+	.tree =3D RADIX_TREE_INIT(GFP_ATOMIC),
 	      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 9 warnings, 8 checks, 282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
