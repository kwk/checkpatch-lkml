WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
diff -Naur linux-2.4.14/arch/i386/kernel/apm.c linux-2.4.14-mq/arch/i386/kernel/apm.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: include/linux/sched.h:135:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#142: FILE: include/linux/sched.h:459:
+    cpus_allowed:	ALL_CPUS_ALLOWED,				\
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#142: FILE: include/linux/sched.h:459:
+    cpus_allowed:	ALL_CPUS_ALLOWED,				\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->run_list.next"
#153: FILE: include/linux/sched.h:846:
+	return (p->run_list.next != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: include/linux/sched.h:851:
+ * ^IOne runqueue per CPU in the system, plus one additional runqueue for$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#162: FILE: include/linux/sched.h:855:
+typedef union runqueue_data {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: include/linux/sched.h:863:
+		struct task_struct * max_na_ptr; /* pointer to task which */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#184: FILE: include/linux/sched.h:877:
+	char __pad [SMP_CACHE_BYTES];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#201: FILE: include/linux/sched.h:894:
+#define INIT_RUNQUEUE_DATA_SMP(n) {				\
+	max_na_goodness((n)) = MIN_GOODNESS;		\
+	max_na_ptr((n)) = NULL;					\
+	/* max_na_cpus_allowed need not be initialized */	\
+	running_non_idle((n)) = 0;				\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: include/linux/sched.h:901:
+#define INIT_RUNQUEUE_DATA_SMP(n) ^I/* NOOP */$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#210: FILE: include/linux/sched.h:903:
+#define INIT_RUNQUEUE_DATA(n) {					\
+	nt_running((n)) = 0;					\
+	INIT_LIST_HEAD(&runqueue((n)));				\
+	runqueue_lock((n)) = SPIN_LOCK_UNLOCKED;		\
+	INIT_RUNQUEUE_DATA_SMP((n));				\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#216: FILE: include/linux/sched.h:909:
+}
+#define N_RUNQUEUES		(NR_CPUS + 1)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#230: FILE: include/linux/sched.h:923:
+typedef union aligned_data {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#232: FILE: include/linux/sched.h:925:
+		struct task_struct * curr;	/* current task on this CPU */

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#240: FILE: include/linux/sched.h:933:
+	char __pad [SMP_CACHE_BYTES];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: include/linux/sched.h:947:
+#define INIT_ALIGNED_DATA_SMP(n) ^I/* NOOP */$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#256: FILE: include/linux/sched.h:949:
+#define INIT_ALIGNED_DATA(n) {				\
+	cpu_curr((n)) = &init_task;			\
+	last_schedule((n)) = 0;				\
+	INIT_ALIGNED_DATA_SMP((n));			\
+}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#269: FILE: include/linux/sched.h:962:
+	if ((t->policy & ~SCHED_YIELD) != SCHED_OTHER) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#277: FILE: include/linux/sched.h:970:
+}
+#define TASK_RQ(t)	runqueue(task_to_runqueue((t)))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#286: FILE: include/linux/sched.h:979:
+	int tot=nt_running(REALTIME_RQ_ID);
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#288: FILE: include/linux/sched.h:981:
+	for(i=0; i<smp_num_cpus; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#288: FILE: include/linux/sched.h:981:
+	for(i=0; i<smp_num_cpus; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#288: FILE: include/linux/sched.h:981:
+	for(i=0; i<smp_num_cpus; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#288: FILE: include/linux/sched.h:981:
+	for(i=0; i<smp_num_cpus; i++) {
+		tot += nt_running(cpu_logical_map(i));
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/linux/sched.h:997:
+static inline int base_goodness(struct task_struct * t)

WARNING:TYPO_SPELLING: 'nuber' may be misspelled - perhaps 'number'?
#313: FILE: include/linux/sched.h:1006:
+	 * base_goodness is based on the nuber of ticks left.
 	                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: include/linux/sched.h:1013:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: include/linux/sched.h:1027:
+static inline int na_goodness(struct task_struct * t)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#339: FILE: include/linux/sched.h:1032:
+	if ((t->policy & ~SCHED_YIELD) == SCHED_OTHER) {
+		return (base_goodness(t));
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#340: FILE: include/linux/sched.h:1033:
+		return (base_goodness(t));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: include/linux/sched.h:1048:
+static inline int local_goodness(struct task_struct * t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: include/linux/sched.h:1049:
+static inline int local_goodness(struct task_struct * t,
+						struct mm_struct *this_mm)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: include/linux/sched.h:1053:
+	if (weight > 0) {
+		weight += MM_GOODNESS(t, this_mm);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: include/linux/sched.h:1073:
+static inline int goodness(struct task_struct * t, int this_cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: include/linux/sched.h:1074:
+static inline int goodness(struct task_struct * t, int this_cpu,
+						struct mm_struct *this_mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: include/linux/sched.h:1102:
+static inline void add_to_runqueue_common(struct task_struct * p, int upd)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk_na_goodness > max_na_goodness(rq)'
#416: FILE: include/linux/sched.h:1108:
+	if (upd &&
+	    !p->has_cpu && (tsk_na_goodness > max_na_goodness(rq))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#426: FILE: include/linux/sched.h:1118:
+}
+static inline void add_to_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#426: FILE: include/linux/sched.h:1118:
+static inline void add_to_runqueue(struct task_struct * p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#430: FILE: include/linux/sched.h:1122:
+}
+static inline void add_to_runqueue_noupd(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#430: FILE: include/linux/sched.h:1122:
+static inline void add_to_runqueue_noupd(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#439: FILE: include/linux/sched.h:1131:
+static inline void del_from_runqueue_common(struct task_struct * p, int upd)

WARNING:TYPO_SPELLING: 'valies' may be misspelled - perhaps 'values'?
#452: FILE: include/linux/sched.h:1144:
+			 * If we want to update max_na_* valies for the
 			                                 ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: include/linux/sched.h:1155:
+				t = list_entry(tmp, struct task_struct,
+								run_list);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#490: FILE: include/linux/sched.h:1182:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#495: FILE: include/linux/sched.h:1187:
+static inline void del_from_runqueue(struct task_struct * p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#499: FILE: include/linux/sched.h:1191:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#503: FILE: include/linux/sched.h:1195:
+static inline void del_from_runqueue_update(struct task_struct * p)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#513: FILE: include/linux/sched.h:1204:
+#define LOCK_REALTIME_RQ()					\
+		spin_lock(&runqueue_lock(REALTIME_RQ_ID));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#515: FILE: include/linux/sched.h:1206:
+#define UNLOCK_REALTIME_RQ()					\
+		spin_unlock(&runqueue_lock(REALTIME_RQ_ID));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#528: FILE: include/linux/sched.h:1219:
+#define UNLOCK_TASK_RQ(t)					\
+		spin_unlock(&runqueue_lock(task_to_runqueue((t))));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#531: FILE: include/linux/sched.h:1222:
+#define UNLOCK_TASK_RQ(t)					\
+		spin_unlock(&runqueue_lock(UP_RQ_LOCK_ID));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#546: FILE: include/linux/sched.h:1236:
+	if (task_to_runqueue(t) == REALTIME_RQ_ID) {
+		LOCK_REALTIME_RQ();
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#557: FILE: include/linux/sched.h:1247:
+	if (task_to_runqueue(t) == REALTIME_RQ_ID) {
+		UNLOCK_REALTIME_RQ();
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: include/linux/sched.h:1273:
+static inline int lock_task_cpu_rq_irqsave_verify(struct task_struct *t,
+						unsigned long *flags)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#594: FILE: include/linux/sched.h:1284:
+	if (task_to_runqueue(t) == REALTIME_RQ_ID) {
+		LOCK_REALTIME_RQ();
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#600: FILE: include/linux/sched.h:1290:
+	return(UP_RQ_LOCK_ID);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: include/linux/sched.h:1295:
+static inline void unlock_task_cpu_rq_irqsave(int cpu_rq, struct task_struct *t,
+						unsigned long flags)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#610: FILE: include/linux/sched.h:1300:
+	if (rq == REALTIME_RQ_ID) {
+		UNLOCK_REALTIME_RQ();
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#630: FILE: include/linux/sched.h:1320:
+	if (task_to_runqueue(t) == REALTIME_RQ_ID) {
+		LOCK_REALTIME_RQ();
+	}

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#696: FILE: kernel/sched.c:95:
+runqueue_data_t runqueue_data [N_RUNQUEUES] __cacheline_aligned;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#697: FILE: kernel/sched.c:96:
+aligned_data_t aligned_data [N_ALIGNED_DATA] __cacheline_aligned;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tcpu' may be better as '(tcpu)' to avoid precedence issues
#706: FILE: kernel/sched.c:107:
+#define this_cpu_allowed(ca, tcpu) ((ca) & (1 << tcpu))

WARNING:REPEATED_WORD: Possible repeated word: 'should'
#791: FILE: kernel/sched.c:129:
+ * reschedule_idle - Determine which CPU the specified task should
+ * should run on.  The runqueue lock must be held upon entry to this

WARNING:BRACES: braces {} are not necessary for single statement blocks
#818: FILE: kernel/sched.c:152:
+		if (!task_on_runqueue(p)) {
+			add_to_runqueue(p);
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk_cpu != this_cpu'
#824: FILE: kernel/sched.c:158:
+		if ((tsk_cpu != this_cpu) && !need_resched) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#824: FILE: kernel/sched.c:158:
+		if ((tsk_cpu != this_cpu) && !need_resched) {
+			smp_send_reschedule(tsk_cpu);
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#872: FILE: kernel/sched.c:189:
+			if (tmp_cycles > INT_MAX) {
[...]
+			} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#882: FILE: kernel/sched.c:199:
+			if (cpu != tsk_cpu) {
+				stack_list[cpu] += PROC_CHANGE_PENALTY;
+			}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#910: FILE: kernel/sched.c:218:
+		if (target_cpu == tsk_cpu &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#922: FILE: kernel/sched.c:230:
+			if (!task_on_runqueue(p)) {
+				add_to_runqueue(p);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#927: FILE: kernel/sched.c:235:
+			if (target_cpu != this_cpu) {
+				smp_send_reschedule(target_cpu);
+			}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk == idle_task(target_cpu)'
#954: FILE: kernel/sched.c:246:
+			if ((tsk == idle_task(target_cpu)) ||
+			     (preemption_goodness(tsk, p, target_cpu) > 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: kernel/sched.c:247:
+			if ((tsk == idle_task(target_cpu)) ||
+			     (preemption_goodness(tsk, p, target_cpu) > 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#961: FILE: kernel/sched.c:253:
+				if (task_on_runqueue(p)) {
+					del_from_runqueue_update(p);
+				}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'target_cpu != this_cpu'
#977: FILE: kernel/sched.c:266:
+				if ((target_cpu != this_cpu) &&
+				    ((tsk != idle_task(target_cpu)) ||
+				      !need_resched)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tsk != idle_task(target_cpu)'
#977: FILE: kernel/sched.c:266:
+				if ((target_cpu != this_cpu) &&
+				    ((tsk != idle_task(target_cpu)) ||
+				      !need_resched)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1025: FILE: kernel/sched.c:305:
+	if (!task_on_runqueue(p)) {
+		add_to_runqueue(p);
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1037: FILE: kernel/sched.c:315:
+	if (preemption_goodness(tsk, p, this_cpu) > 0) {
 		tsk->need_resched = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1040: FILE: kernel/sched.c:318:
+	if (!task_on_runqueue(p)) {
+		add_to_runqueue(p);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: kernel/sched.c:548:
+static struct task_struct *examine_rmt_rqs(int this_cpu, int *cg,
+					struct task_struct *prev,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1165: FILE: kernel/sched.c:565:
+	if (*cg > 0) {
+		*cg += PROC_CHANGE_PENALTY;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1209: FILE: kernel/sched.c:609:
+^I^I^Iif (max_na_goodness(rrq) > *cg && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1211: FILE: kernel/sched.c:611:
+			    this_cpu_allowed(max_na_cpus_allowed(rrq),
+								this_cpu)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1217: FILE: kernel/sched.c:617:
+^I^I^I^Iif (!next->has_cpu && $

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1225: FILE: kernel/sched.c:625:
+				next = max_na_ptr(rrq);;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1236: FILE: kernel/sched.c:636:
+^I^I^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: kernel/sched.c:690:
+static struct task_struct *scan_runqueue(struct task_struct *prev, int *cg,
+		struct task_struct *next)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1307: FILE: kernel/sched.c:707:
+			int weight = local_goodness(p, prev->active_mm);
+			if (weight > *cg) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1341: FILE: kernel/sched.c:741:
+static FASTCALL(struct task_struct * scan_rt_runqueue(struct task_struct *prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: kernel/sched.c:743:
+static struct task_struct * scan_rt_runqueue(struct task_struct *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1344: FILE: kernel/sched.c:744:
+static struct task_struct * scan_rt_runqueue(struct task_struct *prev,
+					int *cg, struct task_struct *next)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1350: FILE: kernel/sched.c:750:
+	if (task_to_runqueue(prev) != REALTIME_RQ_ID) {
+		LOCK_REALTIME_RQ();
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1364: FILE: kernel/sched.c:764:
+			int weight = RT_GOODNESS(p);
+			if (weight > *cg)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1376: FILE: kernel/sched.c:776:
+	if (task_to_runqueue(next) == REALTIME_RQ_ID) {
+		next->has_cpu = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1379: FILE: kernel/sched.c:779:
+	if (task_to_runqueue(prev) != REALTIME_RQ_ID) {
+		UNLOCK_REALTIME_RQ();
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1399: FILE: kernel/sched.c:799:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1406: FILE: kernel/sched.c:806:
+static inline struct task_struct *scan_runqueue(struct task_struct *prev,
+	int *cg, struct task_struct *next)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1429: FILE: kernel/sched.c:829:
+static inline struct task_struct * scan_rt_runqueue(struct task_struct *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1430: FILE: kernel/sched.c:830:
+static inline struct task_struct * scan_rt_runqueue(struct task_struct *prev,
+					int *cg, struct task_struct *next)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1541: FILE: kernel/sched.c:948:
+ ^Inext->has_cpu = 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1541: FILE: kernel/sched.c:948:
+ ^Inext->has_cpu = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1541: FILE: kernel/sched.c:948:
+ ^Inext->has_cpu = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1579: FILE: kernel/sched.c:987:
+ ^Ilast_schedule(this_cpu) = get_cycles();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1579: FILE: kernel/sched.c:987:
+ ^Ilast_schedule(this_cpu) = get_cycles();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1579: FILE: kernel/sched.c:987:
+ ^Ilast_schedule(this_cpu) = get_cycles();$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->policy == SCHED_OTHER'
#1667: FILE: kernel/sched.c:1336:
+	if ((p->policy == SCHED_OTHER) && (policy != SCHED_OTHER)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'policy != SCHED_OTHER'
#1667: FILE: kernel/sched.c:1336:
+	if ((p->policy == SCHED_OTHER) && (policy != SCHED_OTHER)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1690: FILE: kernel/sched.c:1356:
+	if (was_on_rq) {
+		add_to_runqueue(p);
+	}

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#1715: FILE: kernel/sched.c:1444:
+	// Substract non-idle processes running on other CPUs.
 	   ^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1749: FILE: kernel/sched.c:1659:
+	if (old_policy != SCHED_OTHER) {
+		del_from_runqueue(this_task);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1754: FILE: kernel/sched.c:1664:
+	if (old_policy != SCHED_OTHER) {
+		add_to_runqueue(this_task);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1809: FILE: kernel/timer.c:591:
+		if (curr_na_goodness(cpu) != MIN_GOODNESS) {
+			curr_na_goodness(cpu) = na_goodness(p);
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499718.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 49 warnings, 32 checks, 1708 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499718.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
