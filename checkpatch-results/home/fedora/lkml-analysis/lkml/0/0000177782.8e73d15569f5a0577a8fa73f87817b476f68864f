WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#53: 
 - fixed a soft-local_irq_restore() bug: it didnt re-disable the IRQ 
                                            ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: rt.c:2009:
+		static int print_once = 1;
+		if (print_once) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: rt.c:2011:
+			printk("BUG: bad soft irq-flag value %08lx, %s/%d!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: rt.c:2012:
+			printk("BUG: bad soft irq-flag value %08lx, %s/%d!\n",
+				flags, current->comm, current->pid);

CHECK:BRACES: braces {} should be used on all arms of this statement
#294: FILE: rt.c:2066:
+	if (flags)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#296: FILE: rt.c:2068:
+	else {

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#368: FILE: printk.c:753:
+	if (!in_atomic() && !irqs_disabled() && !raw_irqs_disabled())
[...]
 	if (wake_klogd && !oops_in_progress && waitqueue_active(&log_wait))

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#368: FILE: printk.c:753:
+	if (!in_atomic() && !irqs_disabled() && !raw_irqs_disabled())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: sched.c:2638:
+	BUG_ON(!raw_irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1100: FILE: latency.c:117:
+#define MAX_TRACE (unsigned long)(4096-1)
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1100: FILE: latency.c:117:
+#define MAX_TRACE (unsigned long)(4096-1)

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#1112: FILE: latency.c:268:
+			(raw_irqs_disabled() ? TRACE_FLAG_IRQS_HARD_OFF : 0)|
 			                                                    ^

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: latency.c:1351:
+	(void) eip, (void) parent_eip;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1254: FILE: latency.c:1374:
+
+

WARNING:PATCH_PREFIX: patch prefix 'init' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1558: FILE: i386/kernel/nmi.c:516:
+		printk("NMI show regs on CPU#%d:\n", cpu);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1567: FILE: i386/kernel/nmi.c:527:
+		if (alert_counter[cpu] && !(alert_counter[cpu] % (5*nmi_hz))) {
 		                                                   ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1576: FILE: i386/kernel/nmi.c:532:
+			printk("NMI watchdog detected lockup on CPU#%d (%d/%d)\n", cpu, alert_counter[cpu], 5*nmi_hz);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1576: FILE: i386/kernel/nmi.c:532:
+			printk("NMI watchdog detected lockup on CPU#%d (%d/%d)\n", cpu, alert_counter[cpu], 5*nmi_hz);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1576: FILE: i386/kernel/nmi.c:532:
+			printk("NMI watchdog detected lockup on CPU#%d (%d/%d)\n", cpu, alert_counter[cpu], 5*nmi_hz);
 			                                                                                     ^

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1644: FILE: i386/kernel/process.c:152:
+		BUG_ON(raw_irqs_disabled());

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1807: FILE: linux/seqlock.h:315:
+	do { write_sequnlock(lock); PICK_IRQOP2(raw_local_irq_restore, flags, lock); preempt_check_resched(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1807: FILE: linux/seqlock.h:315:
+	do { write_sequnlock(lock); PICK_IRQOP2(raw_local_irq_restore, flags, lock); preempt_check_resched(); } while(0)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1810: FILE: linux/seqlock.h:317:
+	do { write_sequnlock(lock); PICK_IRQOP(raw_local_irq_enable, lock); preempt_check_resched(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1810: FILE: linux/seqlock.h:317:
+	do { write_sequnlock(lock); PICK_IRQOP(raw_local_irq_enable, lock); preempt_check_resched(); } while(0)

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1829: FILE: linux/rt_irq.h:1:
+#ifndef __LINUX_RT_IRQ_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1837: FILE: linux/rt_irq.h:9:
+extern void local_irq_enable(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1838: FILE: linux/rt_irq.h:10:
+extern void local_irq_enable_noresched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1839: FILE: linux/rt_irq.h:11:
+extern void local_irq_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1840: FILE: linux/rt_irq.h:12:
+extern void local_irq_restore(unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1841: FILE: linux/rt_irq.h:13:
+extern void __local_save_flags(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1842: FILE: linux/rt_irq.h:14:
+extern void __local_irq_save(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1843: FILE: linux/rt_irq.h:15:
+extern int irqs_disabled(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1844: FILE: linux/rt_irq.h:16:
+extern int irqs_disabled_flags(unsigned long flags);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1860: FILE: linux/rt_irq.h:32:
+#define raw_local_irq_save(x) \
+		do { __raw_local_irq_save(x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1862: FILE: linux/rt_irq.h:34:
+#define raw_local_irq_restore(x) \
+		do { __raw_local_irq_restore(x); } while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1875: FILE: linux/rt_irq.h:47:
+# define local_irq_enable^I^I__raw_local_irq_enable $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1876: FILE: linux/rt_irq.h:48:
+# define local_irq_disable^I^I__raw_local_irq_disable $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1888: FILE: linux/rt_irq.h:60:
+  extern void notrace trace_irqs_off_lowlevel(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1888: FILE: linux/rt_irq.h:60:
+  extern void notrace trace_irqs_off_lowlevel(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1889: FILE: linux/rt_irq.h:61:
+  extern void notrace trace_irqs_off(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1889: FILE: linux/rt_irq.h:61:
+  extern void notrace trace_irqs_off(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1890: FILE: linux/rt_irq.h:62:
+  extern void notrace trace_irqs_on(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1890: FILE: linux/rt_irq.h:62:
+  extern void notrace trace_irqs_on(void);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1950: FILE: linux/hardirq.h:48:
+#define IRQSOFF_SHIFT ^I^I(PREEMPT_ACTIVE_SHIFT + PREEMPT_ACTIVE_BITS)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1952: FILE: linux/hardirq.h:50:
+#define __IRQ_MASK(x)		((1UL << (x))-1)
                      		             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1959: FILE: linux/hardirq.h:57:
+#define PREEMPT_OFFSET		(1UL << PREEMPT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1960: FILE: linux/hardirq.h:58:
+#define SOFTIRQ_OFFSET		(1UL << SOFTIRQ_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1961: FILE: linux/hardirq.h:59:
+#define HARDIRQ_OFFSET		(1UL << HARDIRQ_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1962: FILE: linux/hardirq.h:60:
+#define IRQSOFF_OFFSET		(1UL << IRQSOFF_SHIFT)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1992: FILE: linux/hardirq.h:82:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_MASK)) != kernel_locked())
                     	                                    ^

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#1992: FILE: linux/hardirq.h:82:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_MASK)) != kernel_locked())

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1995: FILE: linux/hardirq.h:84:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_MASK)) != 0)
                     	                                    ^

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#1995: FILE: linux/hardirq.h:84:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_MASK)) != 0)

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2007: FILE: linux/preempt.h:13:
+  extern void notrace add_preempt_count(unsigned int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2007: FILE: linux/preempt.h:13:
+  extern void notrace add_preempt_count(unsigned int val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2008: FILE: linux/preempt.h:14:
+  extern void notrace sub_preempt_count(unsigned int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2008: FILE: linux/preempt.h:14:
+  extern void notrace sub_preempt_count(unsigned int val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2009: FILE: linux/preempt.h:15:
+  extern void notrace mask_preempt_count(unsigned int mask);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2009: FILE: linux/preempt.h:15:
+  extern void notrace mask_preempt_count(unsigned int mask);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2010: FILE: linux/preempt.h:16:
+  extern void notrace unmask_preempt_count(unsigned int mask);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2010: FILE: linux/preempt.h:16:
+  extern void notrace unmask_preempt_count(unsigned int mask);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2014: FILE: linux/preempt.h:20:
+# define mask_preempt_count(mask) \
+		do { preempt_count() |= (mask); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2016: FILE: linux/preempt.h:22:
+# define unmask_preempt_count(mask) \
+		do { preempt_count() &= ~(mask); } while (0)

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#2084: FILE: asm-i386/system.h:444:
+#define __raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2084: FILE: asm-i386/system.h:444:
+#define __raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                  	                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2084: FILE: asm-i386/system.h:444:
+#define __raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                  	                                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2084: FILE: asm-i386/system.h:444:
+#define __raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                  	                                                                                 ^

WARNING:LONG_LINE: line length of 238 exceeds 100 columns
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) ^Ido { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                                                                                                                                               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                                                                                                                                                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                                                                                                                                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2085: FILE: asm-i386/system.h:445:
+#define __raw_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (raw_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#2086: FILE: asm-i386/system.h:446:
+#define __raw_local_irq_disable() 	do { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2086: FILE: asm-i386/system.h:446:
+#define __raw_local_irq_disable() ^Ido { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2086: FILE: asm-i386/system.h:446:
+#define __raw_local_irq_disable() 	do { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)
                                   	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2086: FILE: asm-i386/system.h:446:
+#define __raw_local_irq_disable() 	do { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)
                                   	                                   ^

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#2087: FILE: asm-i386/system.h:447:
+#define __raw_local_irq_enable()	do { trace_irqs_on(); __asm__ __volatile__("sti": : :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2087: FILE: asm-i386/system.h:447:
+#define __raw_local_irq_enable()	do { trace_irqs_on(); __asm__ __volatile__("sti": : :"memory"); } while (0)
                                 	                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2087: FILE: asm-i386/system.h:447:
+#define __raw_local_irq_enable()	do { trace_irqs_on(); __asm__ __volatile__("sti": : :"memory"); } while (0)
                                 	                                                    ^

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2090: FILE: asm-i386/system.h:449:
+#define __raw_safe_halt()		do { trace_irqs_on(); __asm__ __volatile__("sti; hlt": : :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2090: FILE: asm-i386/system.h:449:
+#define __raw_safe_halt()		do { trace_irqs_on(); __asm__ __volatile__("sti; hlt": : :"memory"); } while (0)
                          		                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2090: FILE: asm-i386/system.h:449:
+#define __raw_safe_halt()		do { trace_irqs_on(); __asm__ __volatile__("sti; hlt": : :"memory"); } while (0)
                          		                                                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#2095: FILE: asm-i386/system.h:451:
+#define __raw_irqs_disabled_flags(flags)	\
+({						\
+	!(flags & (1<<9));			\
 })

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2097: FILE: asm-i386/system.h:453:
+	!(flags & (1<<9));			\
 	            ^

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#2114: FILE: asm-i386/system.h:464:
+#define __raw_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2114: FILE: asm-i386/system.h:464:
+#define __raw_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)
                                	                                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2114: FILE: asm-i386/system.h:464:
+#define __raw_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)
                                	                                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2114: FILE: asm-i386/system.h:464:
+#define __raw_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)
                                	                                                                            ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2118: FILE: asm-i386/system.h:468:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2118: FILE: asm-i386/system.h:468:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)
                    	                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2118: FILE: asm-i386/system.h:468:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)
                    	                                                       ^

WARNING:PATCH_PREFIX: patch prefix 'Makefile' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#2129: FILE: Makefile:4:
+EXTRAVERSION =-rc6-RT-V0.7.48-00
 ^^^^^^^^^^^^

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#2149: FILE: kernel_lock.c:53:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] code: %s/%d\n", preempt_count()-1, current->comm, current->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2149: FILE: kernel_lock.c:53:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] code: %s/%d\n", preempt_count()-1, current->comm, current->pid);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2149: FILE: kernel_lock.c:53:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] code: %s/%d\n", preempt_count()-1, current->comm, current->pid);
 	                                                                                                    ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smp_processor_id', this function's name, in a string
#2149: FILE: kernel_lock.c:53:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] code: %s/%d\n", preempt_count()-1, current->comm, current->pid);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 70 warnings, 38 checks, 1806 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
