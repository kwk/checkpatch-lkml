ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: fs/cifs/file.c:63:
+^I^I^IpCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#84: FILE: fs/cifs/file.c:63:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#84: FILE: fs/cifs/file.c:63:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsFile->pfile == NULL'
#85: FILE: fs/cifs/file.c:64:
+			if ((pCifsFile->pfile == NULL) && (pCifsFile->pid == current->tgid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsFile->pid == current->tgid'
#85: FILE: fs/cifs/file.c:64:
+			if ((pCifsFile->pfile == NULL) && (pCifsFile->pid == current->tgid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pCifsFile->pfile"
#85: FILE: fs/cifs/file.c:64:
+			if ((pCifsFile->pfile == NULL) && (pCifsFile->pid == current->tgid)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#94: FILE: fs/cifs/file.c:72:
+		if (file->private_data != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#102: FILE: fs/cifs/file.c:78:
+				cERROR(1, ("could not find file instance for new file %p ", file));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#110: FILE: fs/cifs/file.c:85:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#116: FILE: fs/cifs/file.c:90:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", inode, file->f_flags, full_path));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#142: FILE: fs/cifs/file.c:150:
+	if (buf == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#163: FILE: fs/cifs/file.c:173:
+			pCifsFile->closePend = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#167: FILE: fs/cifs/file.c:176:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#167: FILE: fs/cifs/file.c:176:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#170: FILE: fs/cifs/file.c:178:
+			if (pCifsInode) {

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#184: FILE: fs/cifs/file.c:189:
+				if (pCifsInode->clientCanCacheRead) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: fs/cifs/file.c:200:
+^I^I^I^I^I^Iif (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && $

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#197: FILE: fs/cifs/file.c:200:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && 

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#197: FILE: fs/cifs/file.c:200:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && 

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile)'
#197: FILE: fs/cifs/file.c:200:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && 
 							(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: fs/cifs/file.c:201:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && 
 							(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#203: FILE: fs/cifs/file.c:204:
+							if (file->f_dentry->d_inode->i_mapping) {

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#210: FILE: fs/cifs/file.c:210:
+							cFYI(1, ("invalidating remote inode since open detected it changed"));

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: fs/cifs/file.c:222:
+				if ((oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
-				} else if((oplock & 0xF) == OPLOCK_READ)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#230: FILE: fs/cifs/file.c:225:
+					cFYI(1, ("Exclusive Oplock granted on inode %p", file->f_dentry->d_inode));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: fs/cifs/file.c:232:
+^I^I^Iif (oplock & CIFS_CREATE_ACTION) {           $

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#254: FILE: fs/cifs/file.c:243:
+					/* CIFSSMBWinSetPerms(xid, pTcon, full_path, mode, -1, -1, local_nls); */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#255: FILE: fs/cifs/file.c:244:
+					/* in the meantime could set r/o dos attribute when perms are eg: */

CHECK:CAMELCASE: Avoid CamelCase: <cifsFile>
#265: FILE: fs/cifs/file.c:261:
+static int cifs_relock_file(struct cifsFileInfo *cifsFile)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: fs/cifs/file.c:270:
+static int cifs_reopen_file(struct inode *inode, struct file *file, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: fs/cifs/file.c:271:
+static int cifs_reopen_file(struct inode *inode, struct file *file, 
+	int can_flush)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#284: FILE: fs/cifs/file.c:284:
+	if (inode == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#295: FILE: fs/cifs/file.c:293:
+	if (pCifsFile->invalidHandle == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#295: FILE: fs/cifs/file.c:293:
+	if (pCifsFile->invalidHandle == FALSE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#302: FILE: fs/cifs/file.c:299:
+	if (file->f_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#314: FILE: fs/cifs/file.c:312:
+	if (full_path == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#325: FILE: fs/cifs/file.c:343:
+/*	buf = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);
+	if (buf == 0) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#332: FILE: fs/cifs/file.c:349:
+	} */

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#366: FILE: fs/cifs/file.c:382:
+				pCifsInode->clientCanCacheAll = TRUE;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#370: FILE: fs/cifs/file.c:384:
+				cFYI(1, ("Exclusive Oplock granted on inode %p", file->f_dentry->d_inode));

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#404: FILE: fs/cifs/file.c:416:
+		pSMBFile->closePend = TRUE;

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBClose>
#413: FILE: fs/cifs/file.c:423:
+				rc = CIFSSMBClose(xid, pTcon, pSMBFile->netfid);

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#438: FILE: fs/cifs/file.c:444:
+	if ((rc ==0) && CIFS_I(inode)->write_behind_rc)
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc ==0'
#438: FILE: fs/cifs/file.c:444:
+	if ((rc ==0) && CIFS_I(inode)->write_behind_rc)

CHECK:CAMELCASE: Avoid CamelCase: <pCFileStruct>
#469: FILE: fs/cifs/file.c:469:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:CAMELCASE: Avoid CamelCase: <endOfSearch>
#469: FILE: fs/cifs/file.c:469:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#469: FILE: fs/cifs/file.c:469:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#481: FILE: fs/cifs/file.c:478:
+			cFYI(1, ("freeing smb buf in srch struct in closedir")); /* BB removeme BB */

CHECK:CAMELCASE: Avoid CamelCase: <pfLock>
#499: FILE: fs/cifs/file.c:496:
+int cifs_lock(struct file *file, int cmd, struct file_lock *pfLock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: fs/cifs/file.c:602:
+ssize_t cifs_user_write(struct file *file, const char __user *write_data,
+	size_t write_size, loff_t *poffset)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#553: FILE: fs/cifs/file.c:612:
+	if (file->f_dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#558: FILE: fs/cifs/file.c:616:
+	if (cifs_sb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#570: FILE: fs/cifs/file.c:625:
+	if (file->private_data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#579: FILE: fs/cifs/file.c:631:
+	if (file->f_dentry->d_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#590: FILE: fs/cifs/file.c:645:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#610: FILE: fs/cifs/file.c:661:
+				if ((file->f_dentry == NULL) ||
+				    (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#610: FILE: fs/cifs/file.c:661:
+				if ((file->f_dentry == NULL) ||
+				    (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#610: FILE: fs/cifs/file.c:661:
+				if ((file->f_dentry == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#611: FILE: fs/cifs/file.c:662:
+				    (file->f_dentry->d_inode == NULL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: fs/cifs/file.c:720:
+static ssize_t cifs_write(struct file *file, const char *write_data,
+	size_t write_size, loff_t *poffset)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#673: FILE: fs/cifs/file.c:730:
+	if (file->f_dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#678: FILE: fs/cifs/file.c:734:
+	if (cifs_sb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#690: FILE: fs/cifs/file.c:743:
+	if (file->private_data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#700: FILE: fs/cifs/file.c:749:
+	if (file->f_dentry->d_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#711: FILE: fs/cifs/file.c:763:
+			if (file->private_data == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: fs/cifs/file.c:768:
+			   while we blocked so return what we managed to write */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#732: FILE: fs/cifs/file.c:779:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#732: FILE: fs/cifs/file.c:779:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#732: FILE: fs/cifs/file.c:779:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: fs/cifs/file.c:780:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#741: FILE: fs/cifs/file.c:786:
+				   reopen_file not to flush data to server now */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#778: FILE: fs/cifs/file.c:823:
+^I^I^Ifile->f_dentry->d_inode->i_ctime = $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#789: FILE: fs/cifs/file.c:836:
+static int cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#789: FILE: fs/cifs/file.c:836:
+static int cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to > PAGE_CACHE_SIZE'
#817: FILE: fs/cifs/file.c:864:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from > to'
#817: FILE: fs/cifs/file.c:864:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: fs/cifs/file.c:888:
+^I^Iif ((open_file->pfile) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#846: FILE: fs/cifs/file.c:888:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 
 			(open_file->pfile->f_flags & O_WRONLY))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: fs/cifs/file.c:889:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#867: FILE: fs/cifs/file.c:914:
+		if (tmp->next == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#875: FILE: fs/cifs/file.c:920:
+	if (open_file == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: fs/cifs/file.c:931:
+static int cifs_writepages(struct address_space *mapping,
+	struct writeback_control *wbc)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#909: FILE: fs/cifs/file.c:947:
+static int cifs_writepage(struct page* page, struct writeback_control *wbc)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: fs/cifs/file.c:968:
+static int cifs_commit_write(struct file *file, struct page *page,
+	unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#934: FILE: fs/cifs/file.c:968:
+	unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#934: FILE: fs/cifs/file.c:968:
+	unsigned offset, unsigned to)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: fs/cifs/file.c:987:
+^I^I^I^Iif ((open_file->invalidHandle) && $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#979: FILE: fs/cifs/file.c:1003:
+		} */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: fs/cifs/file.c:1010:
+			cFYI(1, ("Illegal offsets, can not copy from %d to %d",
+				offset, to));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1000: FILE: fs/cifs/file.c:1021:
+		rc = cifs_write(file, page_data + offset, to-offset,
 		                                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1050: FILE: fs/cifs/file.c:1067:
+		return 0; */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1070: FILE: fs/cifs/file.c:1102:
+	cFYI(1, ("Flush inode %p file %p rc %d",inode,file,rc));
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1070: FILE: fs/cifs/file.c:1102:
+	cFYI(1, ("Flush inode %p file %p rc %d",inode,file,rc));
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1070: FILE: fs/cifs/file.c:1102:
+	cFYI(1, ("Flush inode %p file %p rc %d",inode,file,rc));
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: fs/cifs/file.c:1108:
+ssize_t cifs_user_read(struct file *file, char __user *read_data,
+	size_t read_size, loff_t *poffset)

CHECK:CAMELCASE: Avoid CamelCase: <pSMBr>
#1095: FILE: fs/cifs/file.c:1120:
+	struct smb_com_read_rsp *pSMBr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1132: FILE: fs/cifs/file.c:1154:
+			if (copy_to_user(current_offset,smb_read_data + 4 /* RFC1001 hdr*/
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: fs/cifs/file.c:1187:
+static ssize_t cifs_read(struct file *file, char *read_data, size_t read_size,
+	loff_t *poffset)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cifs_sb"
#1213: FILE: fs/cifs/file.c:1259:
+		if (cifs_sb != NULL) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1259: FILE: fs/cifs/file.c:1300:
+		if (PAGE_CACHE_SIZE > bytes_read) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1263: FILE: fs/cifs/file.c:1303:
+			memset(target +bytes_read, 0, PAGE_CACHE_SIZE - bytes_read);
 			              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: fs/cifs/file.c:1322:
+static int cifs_readpages(struct file *file, struct address_space *mapping,
+	struct list_head *page_list, unsigned num_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1284: FILE: fs/cifs/file.c:1322:
+	struct list_head *page_list, unsigned num_pages)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1329: FILE: fs/cifs/file.c:1363:
+			if (tmp_page->index == expected_index) {
[...]
-			} else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1333: FILE: fs/cifs/file.c:1366:
+			} else

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#1366: FILE: fs/cifs/file.c:1392:
+			if (rc== -EAGAIN) {
 			      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1394: FILE: fs/cifs/file.c:1429:
+			/* while (!list_empty(page_list) && (i < num_pages)) {
+					page = list_entry(page_list->prev, struct page, list);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1402: FILE: fs/cifs/file.c:1436:
+^I^I^IcFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", bytes_read, offset)); $

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#1402: FILE: fs/cifs/file.c:1436:
+			cFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", bytes_read, offset)); 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1430: FILE: fs/cifs/file.c:1465:
+static int cifs_readpage_worker(struct file *file, struct page *page,
+	loff_t *poffset)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1445: FILE: fs/cifs/file.c:1479:
+		cFYI(1, ("Bytes read %d ",rc));
 		                         ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1453: FILE: fs/cifs/file.c:1484:
+	if (PAGE_CACHE_SIZE > rc)

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#1486: FILE: fs/cifs/file.c:1527:
+int is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#1486: FILE: fs/cifs/file.c:1527:
+int is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsInode"
#1494: FILE: fs/cifs/file.c:1534:
+	if (cifsInode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#1502: FILE: fs/cifs/file.c:1540:
+		if (open_file == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1515: FILE: fs/cifs/file.c:1547:
+^I^Iif ((open_file->pfile) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#1515: FILE: fs/cifs/file.c:1547:
+		if ((open_file->pfile) && 
+		    ((open_file->pfile->f_flags & O_RDWR) || 
+		    (open_file->pfile->f_flags & O_WRONLY))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1516: FILE: fs/cifs/file.c:1548:
+^I^I    ((open_file->pfile->f_flags & O_RDWR) || $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#1523: FILE: fs/cifs/file.c:1553:
+		if (tmp->next == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <pfindData>
#1536: FILE: fs/cifs/file.c:1562:
+void fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1537: FILE: fs/cifs/file.c:1563:
+void fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData,
+	int *pobject_type)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1547: FILE: fs/cifs/file.c:1584:
+		   or retrieve from NTFS stream extended attribute */

CHECK:CAMELCASE: Avoid CamelCase: <cifsInfo>
#1548: FILE: fs/cifs/file.c:1585:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#1548: FILE: fs/cifs/file.c:1585:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1563: FILE: fs/cifs/file.c:1596:
+		if (atomic_read(&cifsInfo->inUse) == 0) {
 			tmp_inode->i_mode = cifs_sb->mnt_dir_mode;
 		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1571: FILE: fs/cifs/file.c:1603:
+                tmp_inode->i_mode |= S_IFLNK; */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1571: FILE: fs/cifs/file.c:1603:
+                tmp_inode->i_mode |= S_IFLNK; */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1614: FILE: fs/cifs/file.c:1652:
+void unix_fill_in_inode(struct inode *tmp_inode, FILE_UNIX_INFO *pfindData,
+	int *pobject_type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1633: FILE: fs/cifs/file.c:1731:
+	unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1633: FILE: fs/cifs/file.c:1731:
+	unsigned from, unsigned to)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1638: FILE: fs/cifs/file.c:1735:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1638: FILE: fs/cifs/file.c:1735:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1638: FILE: fs/cifs/file.c:1735:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to == PAGE_CACHE_SIZE'
#1647: FILE: fs/cifs/file.c:1746:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from == 0'
#1647: FILE: fs/cifs/file.c:1746:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1662: FILE: fs/cifs/file.c:1756:
+		   In any case this will be written out by commit_write */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199375.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 30 warnings, 85 checks, 1554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199375.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
