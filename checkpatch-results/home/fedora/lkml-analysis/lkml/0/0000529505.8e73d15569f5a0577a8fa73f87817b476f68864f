WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -urN S6-pre3/arch/parisc/hpux/sys_hpux.c S6-pre3-get_super/arch/parisc/hpux/sys_hpux.c

ERROR:SPACING: spaces required around that '||' (ctx:VxO)
#157: FILE: fs/inode.c:308:
+	while (!list_empty(&sb->s_dirty)||!list_empty(&sb->s_locked_inodes)) {
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: fs/inode.c:326:
+	struct super_block * sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: fs/inode.c:327:
+	struct super_block * sb;
+	spin_lock(&inode_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: fs/inode.c:352:
+		struct super_block *s = list_entry(p,struct super_block,s_list);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: fs/inode.c:352:
+		struct super_block *s = list_entry(p,struct super_block,s_list);
 		                                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: fs/inode.c:353:
+		struct super_block *s = list_entry(p,struct super_block,s_list);
+		if (list_empty(&s->s_dirty) && list_empty(&s->s_locked_inodes))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: fs/inode.c:374:
+ *^Isync_inodes goes through the super block's dirty list, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#233: FILE: fs/inode.c:380:
+	struct super_block * s;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#251: FILE: fs/inode.c:386:
+		if ((s = get_super(dev)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: fs/inode.c:403:
+	struct super_block * sb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: fs/super.c:650:
+static inline struct super_block * find_super(kdev_t dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: fs/super.c:655:
+		struct super_block * s = sb_entry(p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: fs/super.c:656:
+		struct super_block * s = sb_entry(p);
+		if (s->s_dev == dev) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: fs/super.c:707:
+		if (sb->s_dirt) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#466: FILE: fs/super.c:714:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct super_block)...)
#533: FILE: fs/super.c:789:
+	struct super_block *s = kmalloc(sizeof(struct super_block),  GFP_USER);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#570: FILE: fs/super.c:821:
+	list_add (&s->s_list, super_blocks.prev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#731: FILE: include/linux/fs.h:1151:
+extern int fsync_no_super(kdev_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#731: FILE: include/linux/fs.h:1151:
+extern int fsync_no_super(kdev_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/linux/fs.h:1349:
+extern void drop_super(struct super_block *sb);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000529505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 6 warnings, 5 checks, 675 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000529505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
