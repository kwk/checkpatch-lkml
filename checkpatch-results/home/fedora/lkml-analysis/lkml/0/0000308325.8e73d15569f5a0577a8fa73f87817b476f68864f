WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
This does not use vmalloc, but instead uses an array of pages.  It also will

WARNING:TYPO_SPELLING: 'throughly' may be misspelled - perhaps 'thoroughly'?
#48: 
This throughly breaks intermezzo, though I don't know if anyone will notice.
     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#89: FILE: include/linux/sched.h:342:
+#define get_group_info(info) do { \
+	atomic_inc(&(info)->usage); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#93: FILE: include/linux/sched.h:346:
+#define put_group_info(info) do { \
+	if (atomic_dec_and_test(&(info)->usage)) \
+		groups_free(info); \
+} while (0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#102: FILE: include/linux/sched.h:355:
+#define GROUP_AT(gi, i) ((gi)->blocks[(i)/NGROUPS_BLOCK][(i)%NGROUPS_BLOCK])
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#102: FILE: include/linux/sched.h:355:
+#define GROUP_AT(gi, i) ((gi)->blocks[(i)/NGROUPS_BLOCK][(i)%NGROUPS_BLOCK])
                                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#102: FILE: include/linux/sched.h:355:
+#define GROUP_AT(gi, i) ((gi)->blocks[(i)/NGROUPS_BLOCK][(i)%NGROUPS_BLOCK])

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: include/linux/sched.h:357:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#166: FILE: kernel/sys.c:1103:
+	nblocks = (gidsetsize/NGROUPS_BLOCK) + (gidsetsize%NGROUPS_BLOCK?1:0);
 	                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#166: FILE: kernel/sys.c:1103:
+	nblocks = (gidsetsize/NGROUPS_BLOCK) + (gidsetsize%NGROUPS_BLOCK?1:0);
 	                                                  ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#166: FILE: kernel/sys.c:1103:
+	nblocks = (gidsetsize/NGROUPS_BLOCK) + (gidsetsize%NGROUPS_BLOCK?1:0);
 	                                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#166: FILE: kernel/sys.c:1103:
+	nblocks = (gidsetsize/NGROUPS_BLOCK) + (gidsetsize%NGROUPS_BLOCK?1:0);
 	                                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: kernel/sys.c:1104:
+	info = kmalloc(sizeof(*info) + nblocks*sizeof(gid_t *), GFP_USER);
 	                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: kernel/sys.c:1115:
+		int i;
+		for (i = 0; i < nblocks; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: kernel/sys.c:1117:
+			gid_t *b;
+			b = (void *)__get_free_page(GFP_USER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: kernel/sys.c:1120:
+				int j;
+				for (j = 0; j < i; j++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: kernel/sys.c:1135:
+		int i;
+		for (i = 0; i < info->nblocks; i++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#215: FILE: kernel/sys.c:1152:
+		if (copy_to_user(grouplist+off, info->blocks[i], len))
 		                          ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#224: FILE: kernel/sys.c:1161:
+static int groups_from_user(struct group_info *info, gid_t __user *grouplist)
+ {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: kernel/sys.c:1162:
+ {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#234: FILE: kernel/sys.c:1171:
+		if (copy_from_user(info->blocks[i], grouplist+off, len))
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#281: FILE: kernel/sys.c:1218:
+		int mid = (left+right)/2;
 		               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#281: FILE: kernel/sys.c:1218:
+		int mid = (left+right)/2;
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: kernel/sys.c:1220:
+		int cmp = grp - GROUP_AT(info, mid);
+		if (cmp > 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: kernel/uid16.c:111:
+static int groups16_to_user(old_gid_t __user *grouplist,
+    struct group_info *info)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: kernel/uid16.c:111:
+    struct group_info *info)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#446: FILE: kernel/uid16.c:116:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#453: FILE: kernel/uid16.c:123:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: kernel/uid16.c:131:
+static int groups16_from_user(struct group_info *info,
+    old_gid_t __user *grouplist)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: kernel/uid16.c:131:
+    old_gid_t __user *grouplist)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#466: FILE: kernel/uid16.c:136:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: kernel/uid16.c:142:
+		if (__get_user(group, grouplist+i))
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#550: FILE: fs/proc/array.c:179:
+	for (g = 0; g < min(p->group_info->ngroups,NGROUPS_SMALL); g++)
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: fs/proc/array.c:180:
+		buffer += sprintf(buffer, "%d ", GROUP_AT(p->group_info,g));
 		                                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#712: FILE: fs/nfsd/nfs4state.c:247:
+	for(i = 0; i < SVC_CRED_NGROUPS; i++)

WARNING:SPACING: Unnecessary space before function pointer arguments
#736: FILE: include/linux/security.h:1118:
+	int (*task_setgroups) (struct group_info *group_info);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#745: FILE: include/linux/security.h:1672:
+static inline int security_task_setgroups (struct group_info *group_info)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#748: FILE: include/linux/security.h:1674:
+	return security_ops->task_setgroups (group_info);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#757: FILE: include/linux/security.h:2301:
+static inline int security_task_setgroups (struct group_info *group_info)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#769: FILE: security/dummy.c:542:
+static int dummy_task_setgroups (struct group_info *group_info)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#787: FILE: arch/ia64/ia32/sys_ia32.c:2422:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#794: FILE: arch/ia64/ia32/sys_ia32.c:2429:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#807: FILE: arch/ia64/ia32/sys_ia32.c:2442:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#813: FILE: arch/ia64/ia32/sys_ia32.c:2448:
+		if (__get_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#914: FILE: arch/s390/kernel/compat_linux.c:198:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#921: FILE: arch/s390/kernel/compat_linux.c:205:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#933: FILE: arch/s390/kernel/compat_linux.c:217:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#939: FILE: arch/s390/kernel/compat_linux.c:223:
+		if (__get_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1027: FILE: arch/sparc64/kernel/sys_sparc32.c:187:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: arch/sparc64/kernel/sys_sparc32.c:189:
+       if (!access_ok(VERIFY_WRITE, grouplist, info->ngroups * sizeof(group)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#1029: FILE: arch/sparc64/kernel/sys_sparc32.c:189:
+       if (!access_ok(VERIFY_WRITE, grouplist, info->ngroups * sizeof(group)))
+		return -EFAULT;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1034: FILE: arch/sparc64/kernel/sys_sparc32.c:194:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1046: FILE: arch/sparc64/kernel/sys_sparc32.c:206:
+	if (info->ngroups > TASK_SIZE/sizeof(group))
 	                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: arch/sparc64/kernel/sys_sparc32.c:208:
+       if (!access_ok(VERIFY_READ, grouplist, info->ngroups * sizeof(group)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#1048: FILE: arch/sparc64/kernel/sys_sparc32.c:208:
+       if (!access_ok(VERIFY_READ, grouplist, info->ngroups * sizeof(group)))
+		return -EFAULT;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1052: FILE: arch/sparc64/kernel/sys_sparc32.c:212:
+		if (__get_user(group, grouplist+i))
 		                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000308325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 20 warnings, 32 checks, 1158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000308325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
