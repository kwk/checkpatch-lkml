WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -Nur linux-2.5.70/include/linux/msg.h linux-2.5.70msg/include/linux/msg.h

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#56: FILE: include/linux/msg.h:54:
+#define MSGMNB 16384   ^I  /* <= INT_MAX */   /* default max size of a message queue */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#72: FILE: include/linux/sysctl.h:133:
+	KERN_MSGTQL=57,         /* int: Maximum number of messages system wide */
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#84: FILE: ipc/msg.c:36:
+static int msg_count = 0;               /* counter for MSGTQL */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: ipc/msg.c:163:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#130: FILE: ipc/msg.c:165:
+	if(msg_count < msg_ctltql){

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: ipc/msg.c:165:
+	if(msg_count < msg_ctltql){

CHECK:SPACING: No space is necessary after a cast
#131: FILE: ipc/msg.c:166:
+		msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: ipc/msg.c:166:
+		msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#131: FILE: ipc/msg.c:166:
+		msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#132: FILE: ipc/msg.c:167:
+		if(msg==NULL) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#132: FILE: ipc/msg.c:167:
+		if(msg==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#132: FILE: ipc/msg.c:167:
+		if(msg==NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: ipc/msg.c:172:
+                spin_unlock(msg_count_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: ipc/msg.c:172:
+                spin_unlock(msg_count_lock);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: ipc/msg.c:176:
+		if (copy_from_user(msg+1, src, alen)) {
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: ipc/msg.c:184:
+		while(len > 0) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#155: FILE: ipc/msg.c:185:
+			struct msg_msgseg* seg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: ipc/msg.c:186:
+			struct msg_msgseg* seg;
+			alen = len;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#157: FILE: ipc/msg.c:187:
+			if(alen > DATALEN_SEG)
+			alen = DATALEN_SEG;

ERROR:SPACING: space required before the open parenthesis '('
#157: FILE: ipc/msg.c:187:
+			if(alen > DATALEN_SEG)

CHECK:SPACING: No space is necessary after a cast
#159: FILE: ipc/msg.c:189:
+			seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: ipc/msg.c:189:
+			seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#159: FILE: ipc/msg.c:189:
+			seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#160: FILE: ipc/msg.c:190:
+			if(seg==NULL) {
 			      ^

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: ipc/msg.c:190:
+			if(seg==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#160: FILE: ipc/msg.c:190:
+			if(seg==NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#161: FILE: ipc/msg.c:191:
+				err=-ENOMEM;
 				   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#161: FILE: ipc/msg.c:191:
+				err=-ENOMEM;
 				    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: ipc/msg.c:196:
+			if(copy_from_user (seg+1, src, alen)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: ipc/msg.c:196:
+			if(copy_from_user (seg+1, src, alen)) {
 			                      ^

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: ipc/msg.c:196:
+			if(copy_from_user (seg+1, src, alen)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#172: FILE: ipc/msg.c:202:
+			src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: ipc/msg.c:202:
+			src = ((char*)src)+alen;
 			                  ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#185: FILE: ipc/msg.c:211:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#185: FILE: ipc/msg.c:211:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: ipc/msg.c:213:
+^I        err= -EAGAIN;$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#187: FILE: ipc/msg.c:213:
+	        err= -EAGAIN;
 	           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: ipc/msg.c:214:
+^I        return ERR_PTR(err);$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#200: FILE: kernel/sysctl.c:64:
+static int zero = 0;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#210: FILE: kernel/sysctl.c:84:
+extern int msg_ctltql;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: kernel/sysctl.c:242:
+	{KERN_MSGTQL, "msgtql", &msg_ctltql, sizeof (int),

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: kernel/sysctl.c:243:
+         0644, NULL, &proc_dointvec_minmax, NULL, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: kernel/sysctl.c:243:
+         0644, NULL, &proc_dointvec_minmax, NULL, NULL, &zero, NULL},$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364592.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 13 warnings, 8 checks, 168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364592.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
