WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -ur -X /home/suparna/dontdiff linux-2.5.33/drivers/block/elevator.c linux-2.5.33-bio/drivers/block/elevator.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: drivers/block/elevator.c:239:
+^Iif (rq->bio) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: drivers/block/elevator.c:315:
+^Iif (rq->bio) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: drivers/block/elevator.c:398:
+^Iif (rq->bio) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#95: FILE: drivers/block/elevator.c:427:
+		if ((rq->bio = rq->hard_bio)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: drivers/block/elevator.c:450:
+^Iif (rq->bio) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: drivers/block/ll_rw_blk.c:595:
+				if ((i != bio->bi_vcnt - 1) ||
+				(seg_size + bio->bi_endvoffset - bv->bv_offset

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/block/ll_rw_blk.c:643:
+	if (!BIOVEC_PHYS_MERGEABLE_PARTIAL(__BVEC_END(bio), bio->bi_endvoffset,
+			__BVEC_START(nxt), nxt->bi_voffset))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: drivers/block/ll_rw_blk.c:665:
+	if (!BIOVEC_VIRT_MERGEABLE_PARTIAL(__BVEC_END(bio), bio->bi_endvoffset,
+				__BVEC_START(nxt), nxt->bi_voffset))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: drivers/block/ll_rw_blk.c:709:
+^I^I^I^Iint end = bvprv->bv_offset + bvprv->bv_len - $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: drivers/block/ll_rw_blk.c:714:
+^I^I^I^Iif (!BIOVEC_PHYS_MERGEABLE_PARTIAL(bvprv, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: drivers/block/ll_rw_blk.c:715:
+				if (!BIOVEC_PHYS_MERGEABLE_PARTIAL(bvprv, 
+					end, bvec, start))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: drivers/block/ll_rw_blk.c:717:
+^I^I^I^Iif (!BIOVEC_SEG_BOUNDARY_PARTIAL(q, bvprv, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/block/ll_rw_blk.c:718:
+				if (!BIOVEC_SEG_BOUNDARY_PARTIAL(q, bvprv, 
+					end, bvec, start))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/block/ll_rw_blk.c:800:
+	if (BIOVEC_VIRT_MERGEABLE_PARTIAL(__BVEC_END(req->biotail),
+				req->biotail->bi_endvoffset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: drivers/block/ll_rw_blk.c:817:
+	if (BIOVEC_VIRT_MERGEABLE_PARTIAL(__BVEC_END(bio), bio->bi_endvoffset,
+				__BVEC_START(req->bio), req->bio->bi_voffset))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: drivers/block/ll_rw_blk.c:1562:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#324: FILE: drivers/block/ll_rw_blk.c:1564:
+			req->hard_bio = req->bio = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: drivers/block/ll_rw_blk.c:1646:
+ ^Ireq->hard_bio = req->bio = req->biotail = bio;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: drivers/block/ll_rw_blk.c:1646:
+ ^Ireq->hard_bio = req->bio = req->biotail = bio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: drivers/block/ll_rw_blk.c:1646:
+ ^Ireq->hard_bio = req->bio = req->biotail = bio;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#336: FILE: drivers/block/ll_rw_blk.c:1646:
+ 	req->hard_bio = req->bio = req->biotail = bio;

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: drivers/block/ll_rw_blk.c:1647:
+ ^Ireq->nr_bio_segments = bio_segments(req->bio);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: drivers/block/ll_rw_blk.c:1647:
+ ^Ireq->nr_bio_segments = bio_segments(req->bio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: drivers/block/ll_rw_blk.c:1647:
+ ^Ireq->nr_bio_segments = bio_segments(req->bio);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: drivers/block/ll_rw_blk.c:1648:
+ ^Ireq->nr_bio_sectors = bio_sectors(req->bio);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: drivers/block/ll_rw_blk.c:1648:
+ ^Ireq->nr_bio_sectors = bio_sectors(req->bio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: drivers/block/ll_rw_blk.c:1648:
+ ^Ireq->nr_bio_sectors = bio_sectors(req->bio);$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#382: FILE: drivers/block/ll_rw_blk.c:1991:
 	if (rq->flags & REQ_CMD) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->nr_sectors >= rq->hard_nr_sectors'
#392: FILE: drivers/block/ll_rw_blk.c:1997:
+		if ((rq->nr_sectors >= rq->hard_nr_sectors) &&
+		(rq->sector <= rq->hard_sector)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->sector <= rq->hard_sector'
#392: FILE: drivers/block/ll_rw_blk.c:1997:
+		if ((rq->nr_sectors >= rq->hard_nr_sectors) &&
+		(rq->sector <= rq->hard_sector)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: drivers/block/ll_rw_blk.c:1998:
+		if ((rq->nr_sectors >= rq->hard_nr_sectors) &&
+		(rq->sector <= rq->hard_sector)){

ERROR:SPACING: space required before the open brace '{'
#393: FILE: drivers/block/ll_rw_blk.c:1998:
+		(rq->sector <= rq->hard_sector)){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#411: FILE: drivers/block/ll_rw_blk.c:2041:
 
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#424: FILE: drivers/block/ll_rw_blk.c:2051:
+	while ((bio = req->hard_bio)) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#473: FILE: drivers/block/ll_rw_blk.c:2091:
+		if ((bio = req->hard_bio)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#480: FILE: drivers/block/ll_rw_blk.c:2098:
 			if (unlikely(nr_sectors <= 0)) {
[...]
+				 blk_recalc_rq_segments(req);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: drivers/block/ll_rw_blk.c:2124:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: drivers/block/ll_rw_blk.c:2134:
+ * rq->nr_bio_sectors as data is transferred is the caller's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: drivers/block/ll_rw_blk.c:2139:
+^Iif (rq->current_nr_sectors > 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: drivers/block/ll_rw_blk.c:2141:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#519: FILE: drivers/block/ll_rw_blk.c:2145:
+		rq->current_nr_sectors = min(

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: drivers/block/ll_rw_blk.c:2148:
+ ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: drivers/block/ll_rw_blk.c:2148:
+ ^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: drivers/block/ll_rw_blk.c:2148:
+ ^I} else {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#523: FILE: drivers/block/ll_rw_blk.c:2149:
+		if ((rq->bio = rq->bio->bi_next)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: drivers/block/ll_rw_blk.c:2152:
+ ^I^I^Irq->current_nr_sectors = bio_segsize(rq->bio) >> 9;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: drivers/block/ll_rw_blk.c:2152:
+ ^I^I^Irq->current_nr_sectors = bio_segsize(rq->bio) >> 9;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: drivers/block/ll_rw_blk.c:2152:
+ ^I^I^Irq->current_nr_sectors = bio_segsize(rq->bio) >> 9;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: drivers/block/ll_rw_blk.c:2154:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: drivers/block/ll_rw_blk.c:2154:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/block/ll_rw_blk.c:2154:
+ ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: drivers/block/loop.c:184:
+do_lo_send(struct loop_device *lo, struct bio_vec *bvec, int bsize, loff_t pos,
+		int startoff, int endoff)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: drivers/block/loop.c:261:
+^I^Iif (vecnr == bio->bi_vcnt - 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: drivers/block/loop.c:339:
+^I^Iif (vecnr == bio->bi_vcnt - 1) $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#700: FILE: drivers/block/loop.c:516:
+		from_start = to_start = 0;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#945: FILE: include/linux/bio.h:137:
+#define bio_offset(bio)		(bio)->bi_voffset

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#946: FILE: include/linux/bio.h:138:
+#define bio_segments(bio)	((bio)->bi_vcnt - (bio)->bi_idx)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#951: FILE: include/linux/bio.h:143:
 
+

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#965: FILE: include/linux/bio.h:175:
+	((((page_to_phys((vec1)->bv_page) + (end)) | (page_to_phys((vec2)->bv_page) + (start))) & (BIO_VMERGE_BOUNDARY - 1)) == 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#971: FILE: include/linux/bio.h:181:
+	__BIO_SEG_BOUNDARY(page_to_phys((b1)->bv_page) + (start), page_to_phys((b2)->bv_page) + (end), (q)->seg_boundary_mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#974: FILE: include/linux/bio.h:183:
+	BIOVEC_SEG_BOUNDARY_PARTIAL((q), __BVEC_END((b1)),(b1)->bi_voffset, \
 	                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#978: FILE: include/linux/bio.h:187:
+#define bio_startoffset(bio)	(bio_offset(bio) - bio_iovec(bio)->bv_offset)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#979: FILE: include/linux/bio.h:188:
+#define bio_endoffset(bio)	(__BVEC_END(bio)->bv_offset + \
+		__BVEC_END(bio)->bv_len - (bio)->bi_endvoffset)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#999: FILE: include/linux/bio.h:244:
+extern int bio_consistent(struct bio *bio);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#1027: FILE: include/linux/bio.h:270:
+	addr = (unsigned long) kmap_atomic(bvec->bv_page, KM_BIO_SRC_IRQ);

CHECK:SPACING: No space is necessary after a cast
#1033: FILE: include/linux/bio.h:275:
+	return (char *) addr + bvec->bv_offset;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: include/linux/bio.h:278:
 
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bvec' - possible side-effects?
#1048: FILE: include/linux/bio.h:288:
+#define bvec_kmap_irq(bvec, flags)	(page_address((bvec)->bv_page) + ((bvec)->bv_offset))

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1049: FILE: include/linux/bio.h:289:
+#define bvec_kunmap_irq(buf, flags)	do { *(flags) = 0; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1052: FILE: include/linux/bio.h:292:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: include/linux/bio.h:295:
+extern inline char *__bio_kmap_irq(struct bio *bio, unsigned short idx,
+		unsigned long *flags)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1058: FILE: include/linux/bio.h:298:
+		((idx == bio->bi_idx) ? bio_startoffset(bio): 0);
 		                                            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1071: FILE: include/linux/blk.h:43:
+extern int process_that_request_first(struct request *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1071: FILE: include/linux/blk.h:43:
+extern int process_that_request_first(struct request *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1071: FILE: include/linux/blk.h:43:
+extern int process_that_request_first(struct request *, unsigned int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1079: FILE: include/linux/blk.h:54:
 
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1086: FILE: include/linux/blk.h:61:
+		if ((rq)->bio) BIO_BUG_ON(!bio_consistent((rq)->bio)); \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1116: FILE: include/linux/blkdev.h:43:
+	/* the hard_* are block layer internals, no driver should
+	   touch them */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1116: FILE: include/linux/blkdev.h:43:
+	   touch them */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1154: FILE: include/linux/blkdev.h:254:
 
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1160: FILE: include/linux/blkdev.h:260:
+#define blk_rq_offset(rq) (((rq)->hard_cur_sectors - (rq)->current_nr_sectors) << 9)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1163: FILE: include/linux/blkdev.h:263:
+#define blk_rq_idx(rq) ((rq)->bio->bi_vcnt - (rq)->nr_bio_segments)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1166: FILE: include/linux/blkdev.h:266:
+#define blk_rq_vec(rq)	(bio_iovec_idx((rq)->bio, blk_rq_idx(rq)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: include/linux/blkdev.h:271:
+^Ireturn (__bio_kmap_irq(rq->bio, blk_rq_idx(rq), flags) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1180: FILE: include/linux/blkdev.h:280:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1188: FILE: include/linux/blkdev.h:301:
+#define rq_for_each_unfin_bio(bio, rq)	\
+	if ((rq->hard_bio))			\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#1188: FILE: include/linux/blkdev.h:301:
+#define rq_for_each_unfin_bio(bio, rq)	\
+	if ((rq->hard_bio))			\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1188: FILE: include/linux/blkdev.h:301:
+#define rq_for_each_unfin_bio(bio, rq)	\
+	if ((rq->hard_bio))			\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#1188: FILE: include/linux/blkdev.h:301:
+#define rq_for_each_unfin_bio(bio, rq)	\
+	if ((rq->hard_bio))			\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->hard_bio'
#1189: FILE: include/linux/blkdev.h:302:
+	if ((rq->hard_bio))			\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000435254.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 21 warnings, 41 checks, 1052 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000435254.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
