WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:SPACING: No space is necessary after a cast
#89: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2363:
+	if (ipath_verbs_send(dev->ib_unit, hwords, (uint32_t *) &qp->s_hdr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#222: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2496:
+	if (qp->ibqp.qp_type == IB_QPT_UC) {
[...]
+	} else if ((unsigned) wr->opcode > IB_WR_ATOMIC_FETCH_AND_ADD)
[...]
+	else if (wr->opcode >= IB_WR_ATOMIC_CMP_AND_SWP &&
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#223: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2497:
+		if ((unsigned) wr->opcode >= IB_WR_RDMA_READ)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2497:
+		if ((unsigned) wr->opcode >= IB_WR_RDMA_READ)

CHECK:SPACING: No space is necessary after a cast
#225: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2499:
+	} else if ((unsigned) wr->opcode > IB_WR_ATOMIC_FETCH_AND_ADD)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#225: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2499:
+	} else if ((unsigned) wr->opcode > IB_WR_ATOMIC_FETCH_AND_ADD)

CHECK:SPACING: No space is necessary after a cast
#280: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2554:
+			do_uc_send((unsigned long) qp);

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2556:
+			do_rc_send((unsigned long) qp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#316: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2590:
+	if (wr->num_sge > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#321: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2595:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2665:
+	if (wr->opcode == IB_WR_SEND_WITH_IMM) {
[...]
+	} else if (wr->opcode == IB_WR_SEND) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2673:
+	} else

CHECK:SPACING: No space is necessary after a cast
#425: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2699:
+	if (ipath_verbs_send(dev->ib_unit, hwords, (uint32_t *) &qp->s_hdr,

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#622: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2896:
+ * This is called from ipath_qp_rcv() to process an incomming UD packet
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#656: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2930:
+		qkey = be32_to_cpu(((u32 *) data)[1]);

CHECK:SPACING: No space is necessary after a cast
#657: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2931:
+		src_qp = be32_to_cpu(((u32 *) data)[2]);

WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#679: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2953:
+	 * A GRH is expected to preceed the data even if not
 	                        ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#688: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2962:
+	opcode = *(u8 *) (&ohdr->bth[0]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#690: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2964:
+		if (has_grh) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#691: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2965:
+			wc.imm_data = *(u32 *) data;

CHECK:BRACES: Unbalanced braces around else statement
#693: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2967:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#736: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3010:
+	if (srq && srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#743: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3017:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#752: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3026:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#754: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3028:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#756: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3030:
+	if (has_grh) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#759: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3033:
+	} else

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#774: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3048:
+		       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#813: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3087:
+	 * A GRH is expected to preceed the data even if not
 	                        ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#857: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3131:
+	if (srq && srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#864: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3138:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#873: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3147:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#875: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3149:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#878: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3152:
+	if (ah_attr->ah_flags & IB_AH_GRH) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#881: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3155:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#889: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3163:
+		BUG_ON(len == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#897: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3171:
+		} else if (sge->length == 0 && sge->mr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#972: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3246:
+	if (srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#980: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3254:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#987: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3261:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#989: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3263:
+	} else

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#995: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3269:
+ * This is called from ipath_qp_rcv() to process an incomming UC packet
                                                     ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1026: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3300:
+		psn = be32_to_cpu(((u32 *) data)[0]);

CHECK:SPACING: No space is necessary after a cast
#1033: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3307:
+	opcode = *(u8 *) (&ohdr->bth[0]);

WARNING:INDENTED_LABEL: labels should not be indented
#1047: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3321:
+	      inv:

WARNING:INDENTED_LABEL: labels should not be indented
#1100: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3374:
+	      send_first:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1115: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3389:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:INDENTED_LABEL: labels should not be indented
#1133: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3407:
+	      send_last_imm:

CHECK:SPACING: No space is necessary after a cast
#1135: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3409:
+			wc.imm_data = *(u32 *) data;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1143: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3417:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1145: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3419:
+	      send_last:

WARNING:INDENTED_LABEL: labels should not be indented
#1164: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3438:
+	      last_imm:

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#1179: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3453:
+			       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

WARNING:INDENTED_LABEL: labels should not be indented
#1185: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3459:
+	      rdma_first:

CHECK:BRACES: braces {} should be used on all arms of this statement
#1187: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3461:
+		if (!has_grh)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1189: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3463:
+		else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1222: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3496:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1238: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3512:
+	      rdma_last_imm:

CHECK:SPACING: No space is necessary after a cast
#1260: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3534:
+			wc.imm_data = *(u32 *) data;

WARNING:INDENTED_LABEL: labels should not be indented
#1272: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3546:
+	      rdma_last:

CHECK:BRACES: braces {} should be used on all arms of this statement
#1314: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3588:
+	if (list_empty(&dev->rnrwait))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1316: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3590:
+	else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1389: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3663:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1393: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3667:
+		      rnr_nak:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1419: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3693:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1427: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3701:
+		      acc_err:

WARNING:INDENTED_LABEL: labels should not be indented
#1429: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3703:
+		      err:

CHECK:SPACING: No space is necessary after a cast
#1471: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3745:
+		qp->r_atomic_data = *(u64 *) qp->r_sge.sge.vaddr;

CHECK:SPACING: No space is necessary after a cast
#1473: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3747:
+			*(u64 *) qp->r_sge.sge.vaddr =

CHECK:SPACING: No space is necessary after a cast
#1476: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3750:
+			*(u64 *) qp->r_sge.sge.vaddr = sdata;

CHECK:SPACING: No space is necessary after a cast
#1479: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3753:
+		*(u64 *) sqp->s_sge.sge.vaddr = qp->r_atomic_data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1492: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3766:
+		BUG_ON(len == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#1500: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3774:
+		} else if (sge->length == 0 && sge->mr != NULL) {

CHECK:SPACING: No space is necessary after a cast
#1581: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3855:
+		qp->s_lsn = (u32) -1;

CHECK:SPACING: No space is necessary after a cast
#1582: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3856:
+	} else if (qp->s_lsn != (u32) -1) {

CHECK:SPACING: No space is necessary after a cast
#1591: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3865:
+	    (qp->s_lsn == (u32) -1 ||

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#1598: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3872:
+ * This is called from ipath_rc_rcv() to process an incomming RC ACK
                                                     ^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1822: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4096:
+			if (cmp24(psn, wqe->psn) < 0) {
+				break;
+			}

WARNING:INDENTED_LABEL: labels should not be indented
#1842: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4116:
+		      class_b:

WARNING:INDENTED_LABEL: labels should not be indented
#1865: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4139:
+	      reserved:

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#1872: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4146:
+ * This is called from ipath_qp_rcv() to process an incomming RC packet
                                                     ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1904: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4178:
+		psn = be32_to_cpu(((u32 *) data)[0]);

CHECK:SPACING: No space is necessary after a cast
#1911: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4185:
+	opcode = *(u8 *) (&ohdr->bth[0]);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1922: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4196:
+	    opcode <= IB_OPCODE_RC_ATOMIC_ACKNOWLEDGE) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1926: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4200:
+		if (cmp24(psn, qp->s_next_psn) >= 0) {
+			goto ack_done;
+		}

CHECK:SPACING: No space is necessary after a cast
#1938: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4212:
+					pad = be32_to_cpu(((u32 *) data)[0]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1941: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4215:
+				if ((pad >> 29) == 0) {
+					ipath_get_credit(qp, pad);
+				}

CHECK:SPACING: No space is necessary after a cast
#1955: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4229:
+				pad = be32_to_cpu(((u32 *) data)[0]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1958: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4232:
+			if (opcode == IB_OPCODE_RC_ATOMIC_ACKNOWLEDGE) {
+				*(u64 *) qp->s_sge.sge.vaddr = *(u64 *) data;
+			}

CHECK:SPACING: No space is necessary after a cast
#1959: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4233:
+				*(u64 *) qp->s_sge.sge.vaddr = *(u64 *) data;

WARNING:INDENTED_LABEL: labels should not be indented
#1979: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4253:
+		      rdma_read:

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev->pending_index'
#1997: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4271:
+					       &dev->pending[dev->
+							     pending_index]);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2019: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4293:
+			/* FALLTHROUGH */

CHECK:SPACING: No space is necessary after a cast
#2044: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4318:
+				pad = be32_to_cpu(((u32 *) data)[0]);

WARNING:INDENTED_LABEL: labels should not be indented
#2058: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4332:
+	      ack_done:

CHECK:BRACES: braces {} should be used on all arms of this statement
#2124: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4398:
+			if (!has_grh)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2126: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4400:
+			else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2140: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4414:
+				if (unlikely(!ipath_rkey_ok(dev,
+							    &qp->s_rdma_sge,
+							    qp->s_rdma_len,
+							    vaddr, rkey,
+							    IB_ACCESS_REMOTE_READ)))
+				{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#2185: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4459:
+	      nack_inv:

WARNING:INDENTED_LABEL: labels should not be indented
#2245: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4519:
+		      rnr_nak:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2263: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4537:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#2266: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4540:
+	      send_middle:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2268: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4542:
+		if (unlikely(tlen != (hdrsize + pmtu + 4))) {
+			goto nack_inv;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2272: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4546:
+		if (unlikely(qp->r_rcv_len > qp->r_len)) {
+			goto nack_inv;
+		}

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2291: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4565:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#2293: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4567:
+	      send_last_imm:

CHECK:SPACING: No space is necessary after a cast
#2295: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4569:
+			wc.imm_data = *(u32 *) data;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2303: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4577:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#2306: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4580:
+	      send_last:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2311: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4585:
+		if (unlikely(tlen < (hdrsize + pad + 4))) {
+			goto nack_inv;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2317: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4591:
+		if (unlikely(wc.byte_len > qp->r_len)) {
+			goto nack_inv;
+		}

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#2339: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4613:
+			       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2347: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4621:
+		if (!has_grh)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2349: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4623:
+		else {

WARNING:INDENTED_LABEL: labels should not be indented
#2364: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4638:
+			      nack_acc:

CHECK:BRACES: braces {} should be used on all arms of this statement
#2404: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4678:
+		if (!has_grh)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2406: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4680:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2465: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4739:
+			if (!has_grh)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2467: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4741:
+			else {

CHECK:SPACING: No space is necessary after a cast
#2487: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4761:
+			qp->r_atomic_data = *(u64 *) qp->r_sge.sge.vaddr;

CHECK:SPACING: No space is necessary after a cast
#2489: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4763:
+				*(u64 *) qp->r_sge.sge.vaddr =

CHECK:SPACING: No space is necessary after a cast
#2493: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4767:
+				*(u64 *) qp->r_sge.sge.vaddr = sdata;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 53 warnings, 69 checks, 2513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
