WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -urN --exclude-from=/tmp/excl28370 linux-2.6.16-rc1.orig/perfmon/perfmon.c linux-2.6.16-rc1/perfmon/perfmon.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: perfmon/perfmon.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: perfmon/perfmon.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#98: FILE: perfmon/perfmon.c:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#120: FILE: perfmon/perfmon.c:64:
+int pfm_ovfl_notify_user(struct pfm_context *ctx,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: perfmon/perfmon.c:68:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#129: FILE: perfmon/perfmon.c:73:
+	next = (ctx->ctx_msgq_tail+1) % PFM_MAX_MSGS;
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: perfmon/perfmon.c:82:
+ ^Iidx = ctx->ctx_msgq_tail;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: perfmon/perfmon.c:82:
+ ^Iidx = ctx->ctx_msgq_tail;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: perfmon/perfmon.c:82:
+ ^Iidx = ctx->ctx_msgq_tail;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: perfmon/perfmon.c:89:
+	return ctx->ctx_msgq+idx;
 	                    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#150: FILE: perfmon/perfmon.c:94:
+	ctx->ctx_msgq_head = ctx->ctx_msgq_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#153: FILE: perfmon/perfmon.c:97:
+#if 0

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#160: FILE: perfmon/perfmon.c:104:
+	if (base == NULL) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#160: FILE: perfmon/perfmon.c:104:
+	if (base == NULL) return;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: perfmon/perfmon.c:107:
+	while(base < end) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: perfmon/perfmon.c:160:
+^I * ^I- PMU description table$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: perfmon/perfmon.c:161:
+^I * ^I- sampling format$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: perfmon/perfmon.c:172:
+static int pfm_setup_smpl_fmt(struct pfm_smpl_fmt *fmt, void *fmt_arg,
+				struct pfm_context *ctx, u32 ctx_flags,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#229: FILE: perfmon/perfmon.c:173:
+				int compat_mode, struct file *filp)
 				                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#261: FILE: perfmon/perfmon.c:205:
+			ret = pfm_smpl_buffer_alloc_old(ctx, size, filp);
 			                                           ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#270: FILE: perfmon/perfmon.c:214:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#305: FILE: perfmon/perfmon.c:249:
+	for (i=0; i < max_pmc;  i++) {
 	      ^

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#317: FILE: perfmon/perfmon.c:261:
+	 * hence we do not need to explicitely initialize them.
 	                           ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: perfmon/perfmon.c:269:
+struct pfm_event_set *pfm_find_set(struct pfm_context *ctx, u16 set_id,
+					  int alloc)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#341: FILE: perfmon/perfmon.c:285:
+	for (set = ctx->ctx_sets; set; set = set->set_next) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!view"
#360: FILE: perfmon/perfmon.c:304:
+			if (view == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#367: FILE: perfmon/perfmon.c:311:
+			view = (pfm_set_view_t *)(set+1);
 			                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: perfmon/perfmon.c:313:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#375: FILE: perfmon/perfmon.c:319:
+					+ (set_id*PFM_SET_REMAP_SCALAR);
 					         ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#383: FILE: perfmon/perfmon.c:327:
+			ctx->ctx_sets = ctx->ctx_active_set = set;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: perfmon/perfmon.c:330:
+^I^I$

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#484: FILE: perfmon/perfmon.c:428:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: perfmon/perfmon.c:435:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop for CPU%u"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_syswide_force_stop', this function's name, in a string
#491: FILE: perfmon/perfmon.c:435:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop for CPU%u"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#492: FILE: perfmon/perfmon.c:436:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop for CPU%u"
+		       "but on CPU%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#492: FILE: perfmon/perfmon.c:436:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop for CPU%u"
+		       "but on CPU%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#499: FILE: perfmon/perfmon.c:443:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop CPU%d"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_syswide_force_stop', this function's name, in a string
#499: FILE: perfmon/perfmon.c:443:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop CPU%d"

WARNING:SPLIT_STRING: quoted string split across lines
#500: FILE: perfmon/perfmon.c:444:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop CPU%d"
+		       "unexpected ctx %p instead of %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#500: FILE: perfmon/perfmon.c:444:
+		printk(KERN_ERR "perfmon: pfm_syswide_force_stop CPU%d"
+		       "unexpected ctx %p instead of %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#517: FILE: perfmon/perfmon.c:461:
+		printk(KERN_ERR"pfm_syswide_force_stop: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_syswide_force_stop', this function's name, in a string
#517: FILE: perfmon/perfmon.c:461:
+		printk(KERN_ERR"pfm_syswide_force_stop: "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#517: FILE: perfmon/perfmon.c:461:
+		printk(KERN_ERR"pfm_syswide_force_stop: "

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#518: FILE: perfmon/perfmon.c:462:
+		printk(KERN_ERR"pfm_syswide_force_stop: "
+		       "context_unload returned %d\n", ret);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#532: FILE: perfmon/perfmon.c:476:
+#ifndef __i386__

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#554: FILE: perfmon/perfmon.c:498:
+		memset(ctx, 0, sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE);
 		                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#578: FILE: perfmon/perfmon.c:522:
+	if (ret) return ret;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#581: FILE: perfmon/perfmon.c:525:
+	if (addr == NULL) {

WARNING:TYPO_SPELLING: 'compatiblity' may be misspelled - perhaps 'compatibility'?
#603: FILE: perfmon/perfmon.c:547:
+ * function providing some help for backward compatiblity with old IA-64
                                              ^^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: perfmon/perfmon.c:552:
+^I^I          u32 rflags,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: perfmon/perfmon.c:552:
+int pfm_compat_update_pmd(struct pfm_context *ctx, u16 set_id, u16 cnum,
+		          u32 rflags,

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: perfmon/perfmon.c:554:
+^I^I          unsigned long *reset_pmds,$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#648: FILE: perfmon/perfmon.c:592:
+	} else if (rflags & (PFM_REGFL_OVFL_NOTIFY|PFM_REGFL_RANDOM)) {
 	                                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#673: FILE: perfmon/perfmon.c:617:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#684: FILE: perfmon/perfmon.c:628:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#685: FILE: perfmon/perfmon.c:629:
+static inline u64 pfm_new_pmd_value (struct pfm_pmd *reg, int reset_mode)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#719: FILE: perfmon/perfmon.c:663:
+	if (bitmap_empty(reset_pmds, max_pmd)) return;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#733: FILE: perfmon/perfmon.c:677:
+	for (i = 0; i < max_pmd; i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#735: FILE: perfmon/perfmon.c:679:
+		if (pfm_bv_isset(reset_pmds, i)) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#739: FILE: perfmon/perfmon.c:683:
+			set->set_view->set_pmds[i]= val;
 			                          ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#742: FILE: perfmon/perfmon.c:686:
+				if (pfm_bv_isset(cnt_mask, i)) {
[...]
+				} else {
[...]

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#782: FILE: perfmon/perfmon.c:726:
+	for (i = first_cnt_pmd; i< max_cnt_pmd; i++) {
 	                         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#798: FILE: perfmon/perfmon.c:742:
+ * ^I- new_set: new set to switch to, if NULL follow normal chain$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: perfmon/perfmon.c:745:
+void pfm_switch_sets(struct pfm_context *ctx,
+		    struct pfm_event_set *new_set,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#818: FILE: perfmon/perfmon.c:762:
+	BUG_ON(ctx->ctx_fl_system == 0 && ctx->ctx_task != current);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#821: FILE: perfmon/perfmon.c:765:
+	 * if no set is explicitely requested,
 	                ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#824: FILE: perfmon/perfmon.c:768:
+	if (new_set == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: perfmon/perfmon.c:770:
+^I ^I * we use round-robin unless the user specified$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#826: FILE: perfmon/perfmon.c:770:
+^I ^I * we use round-robin unless the user specified$

ERROR:CODE_INDENT: code indent should use tabs where possible
#828: FILE: perfmon/perfmon.c:772:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#828: FILE: perfmon/perfmon.c:772:
+^I ^I */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#830: FILE: perfmon/perfmon.c:774:
+		if (new_set == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: perfmon/perfmon.c:779:
+	DPRINT(("state=%d prev_set=%u prev_runs=%llu new_set=%u new_runs=%llu"
+		" reset_mode=%d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#870: FILE: perfmon/perfmon.c:814:
+^I ^I * compute elapsed cycles for active set$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#870: FILE: perfmon/perfmon.c:814:
+^I ^I * compute elapsed cycles for active set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: perfmon/perfmon.c:815:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#871: FILE: perfmon/perfmon.c:815:
+^I ^I */$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#875: FILE: perfmon/perfmon.c:819:
+
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: perfmon/perfmon.c:841:
+ ^I * reset timeout for new set$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#897: FILE: perfmon/perfmon.c:841:
+ ^I * reset timeout for new set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#898: FILE: perfmon/perfmon.c:842:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#898: FILE: perfmon/perfmon.c:842:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#976: FILE: perfmon/perfmon.c:920:
+^I^I^I^I^I  ^I  &rst_ctrl, hdr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#976: FILE: perfmon/perfmon.c:920:
+^I^I^I^I^I  ^I  &rst_ctrl, hdr);$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#978: FILE: perfmon/perfmon.c:922:
+		rst_ctrl= PFM_OVFL_CTRL_RESET;
 		        ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1000: FILE: perfmon/perfmon.c:944:
+		if ((rst_ctrl & PFM_OVFL_CTRL_MASK) == 0) {
[...]
+		} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1010: FILE: perfmon/perfmon.c:954:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set2"
#1035: FILE: perfmon/perfmon.c:979:
+			if (set2 == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1037: FILE: perfmon/perfmon.c:981:
+				DPRINT(("set%u points to set%u which does "
+					"not exist\n",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1057: FILE: perfmon/perfmon.c:1001:
+		set1->set_priv_flags &= ~(PFM_SETFL_PRIV_MOD_BOTH|PFM_SETFL_PRIV_SWITCH);
 		                                                 ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1132: FILE: perfmon/perfmon.c:1076:
+	for (set = ctx->ctx_sets; set; set = set->set_next) {
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1136: FILE: perfmon/perfmon.c:1080:
+		if (set->set_npend_ovfls == 0) continue;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1152: FILE: perfmon/perfmon.c:1096:
+		for (i = first_cnt_pmd; num_ovfls; i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1154: FILE: perfmon/perfmon.c:1098:
+			if (pfm_bv_isset(set->set_used_pmds, i)) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1171: FILE: perfmon/perfmon.c:1115:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1186: FILE: perfmon/perfmon.c:1130:
+	BUG_ON(ctx->ctx_fl_system);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1196: FILE: perfmon/perfmon.c:1140:
+	switch(ctx->ctx_state) {
+		case PFM_CTX_LOADED:
+		case PFM_CTX_MASKED:
[...]
+		case PFM_CTX_ZOMBIE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#1196: FILE: perfmon/perfmon.c:1140:
+	switch(ctx->ctx_state) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1207: FILE: perfmon/perfmon.c:1151:
+			BUG_ON(ctx->ctx_state != PFM_CTX_LOADED);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1220: FILE: perfmon/perfmon.c:1164:
+struct pfm_context * pfm_get_ctx(int fd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1222: FILE: perfmon/perfmon.c:1166:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1225: FILE: perfmon/perfmon.c:1169:
+	filp = fget(fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1226: FILE: perfmon/perfmon.c:1170:
+	if (unlikely(filp == NULL)) {
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#1226: FILE: perfmon/perfmon.c:1170:
+	if (unlikely(filp == NULL)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1231: FILE: perfmon/perfmon.c:1175:
+	if (unlikely(pfm_is_fd(filp) == 0)) {
 	                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1240: FILE: perfmon/perfmon.c:1184:
+	if (filp != ctx->ctx_filp && ctx->ctx_filp) {
 	    ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1240: FILE: perfmon/perfmon.c:1184:
+	if (filp != ctx->ctx_filp && ctx->ctx_filp) {
+		DPRINT(("filp is different\n"));
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1241: FILE: perfmon/perfmon.c:1185:
+		DPRINT(("filp is different\n"));
 		         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1247: FILE: perfmon/perfmon.c:1191:
+	ctx->ctx_filp = filp;
 	                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1306: FILE: perfmon/perfmon.c:1250:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_STOPPED'
#1322: FILE: perfmon/perfmon.c:1266:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_TRACED'
#1322: FILE: perfmon/perfmon.c:1266:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1323: FILE: perfmon/perfmon.c:1267:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1372: FILE: perfmon/perfmon.c:1316:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#1391: FILE: perfmon/perfmon.c:1335:
+	if (ctx == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1392: FILE: perfmon/perfmon.c:1336:
+		printk(KERN_ERR "perfmon: handle_work [%d] has no ctx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1397: FILE: perfmon/perfmon.c:1341:
+	BUG_ON(ctx->ctx_fl_system);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1510: FILE: perfmon/perfmon.c:1454:
+	kill_fasync (&ctx->ctx_async_queue, SIGIO, POLL_IN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1516: FILE: perfmon/perfmon.c:1460:
+int pfm_ovfl_notify_user(struct pfm_context *ctx,
+			struct pfm_event_set *set,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1517: FILE: perfmon/perfmon.c:1461:
+^I     ^I^Iunsigned long ip)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1517: FILE: perfmon/perfmon.c:1461:
+^I     ^I^Iunsigned long ip)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1527: FILE: perfmon/perfmon.c:1471:
+		if (msg == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_ovfl_notify_user', this function's name, in a string
#1535: FILE: perfmon/perfmon.c:1479:
+			DPRINT_ovfl((KERN_ERR "perfmon: pfm_ovfl_notify_user no more"

WARNING:SPLIT_STRING: quoted string split across lines
#1536: FILE: perfmon/perfmon.c:1480:
+			DPRINT_ovfl((KERN_ERR "perfmon: pfm_ovfl_notify_user no more"
+			       " notification msgs\n"));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1567: FILE: perfmon/perfmon.c:1511:
+	if (msg == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1568: FILE: perfmon/perfmon.c:1512:
+		printk(KERN_ERR "perfmon: pfm_end_notify_user no more msgs\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_end_notify_user', this function's name, in a string
#1568: FILE: perfmon/perfmon.c:1512:
+		printk(KERN_ERR "perfmon: pfm_end_notify_user no more msgs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1587: FILE: perfmon/perfmon.c:1531:
+void __cpuinit pfm_init_percpu (void *dummy)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1599: FILE: perfmon/perfmon.c:1543:
+	printk("perfmon: version %u.%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1600: FILE: perfmon/perfmon.c:1544:
+	printk("perfmon: version %u.%u\n",
+		PFM_VERSION_MAJ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1604: FILE: perfmon/perfmon.c:1548:
+	pfm_ctx_cachep = kmem_cache_create("pfm_context",
+				   sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1604: FILE: perfmon/perfmon.c:1548:
+				   sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE,
 				                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_ctx_cachep"
#1606: FILE: perfmon/perfmon.c:1550:
+	if (pfm_ctx_cachep == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1607: FILE: perfmon/perfmon.c:1551:
+		printk(KERN_ERR "cannot initialize context slab\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1612: FILE: perfmon/perfmon.c:1556:
+	pfm_lg_set_cachep = kmem_cache_create("pfm_large_event_set",
+			   sizeof(struct pfm_event_set)+sizeof(pfm_set_view_t),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1612: FILE: perfmon/perfmon.c:1556:
+			   sizeof(struct pfm_event_set)+sizeof(pfm_set_view_t),
 			                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_lg_set_cachep"
#1614: FILE: perfmon/perfmon.c:1558:
+	if (pfm_lg_set_cachep == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1615: FILE: perfmon/perfmon.c:1559:
+		printk(KERN_ERR "cannot initialize large event set slab\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_set_cachep"
#1622: FILE: perfmon/perfmon.c:1566:
+	if (pfm_set_cachep == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1623: FILE: perfmon/perfmon.c:1567:
+		printk(KERN_ERR "cannot initialize event set slab\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1638: FILE: perfmon/perfmon.c:1582:
+	for (i = 0; i < NR_CPUS; i++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1639: FILE: perfmon/perfmon.c:1583:
+		per_cpu(pfm_stats,i).pfm_intr_cycles_min = ~0;
 		                 ^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1650: FILE: perfmon/perfmon.c:1594:
+__initcall(pfm_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1652: FILE: perfmon/perfmon.c:1596:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#1680: FILE: perfmon/perfmon.c:1624:
+	if (ctx == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1729: FILE: perfmon/perfmon.c:1673:
+	old_set = new_set = ctx->ctx_active_set;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1736: FILE: perfmon/perfmon.c:1680:
+	if (task == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#1746: FILE: perfmon/perfmon.c:1690:
+		if (new_set == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1791: FILE: perfmon/perfmon.c:1735:
+^I * ^I- stopped if we switched set (self-monitoring)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1792: FILE: perfmon/perfmon.c:1736:
+^I * ^I- stopped if never started$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1793: FILE: perfmon/perfmon.c:1737:
+^I * ^I- started if calling pfm_start() in sequence$

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1826: FILE: perfmon/perfmon.c:1770:
+	 * will be overriden in pfm_unmask_monitoring()
 	           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#1832: FILE: perfmon/perfmon.c:1776:
+	 * monitoring has been explicitely started
 	                       ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1867: FILE: perfmon/perfmon.c:1811:
+	if (task == NULL)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1899: FILE: perfmon/perfmon.c:1843:
+	switch(state) {
+		case PFM_CTX_MASKED:
[...]
+		case PFM_CTX_LOADED:
[...]
+		case PFM_CTX_UNLOADED:
+		case PFM_CTX_ZOMBIE:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#1899: FILE: perfmon/perfmon.c:1843:
+	switch(state) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1905: FILE: perfmon/perfmon.c:1849:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#1956: FILE: perfmon/perfmon.c:1900:
+	 * We cannot explicitely reset another task, it MUST always
 	             ^^^^^^^^^^^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1962: FILE: perfmon/perfmon.c:1906:
+		DPRINT(("unblocking [%d] \n", ctx->ctx_task->pid));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1983: FILE: perfmon/perfmon.c:1927:
+}
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rd_func"
#2020: FILE: perfmon/perfmon.c:1964:
+	has_rd_check = rd_func != NULL && (pfm_sysctl.expert_mode == 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2028: FILE: perfmon/perfmon.c:1972:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2042: FILE: perfmon/perfmon.c:1986:
+			if (set == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2050: FILE: perfmon/perfmon.c:1994:
+^I^I * ^I- explicitly written via pfm_write_pmds()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2051: FILE: perfmon/perfmon.c:1995:
+^I^I * ^I- provided as a reg_smpl_pmds[] to another PMD during$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2052: FILE: perfmon/perfmon.c:1996:
+^I^I * ^I  pfm_write_pmds()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2055: FILE: perfmon/perfmon.c:1999:
+^I^I * ^I- on context switch restore, we can restore only what we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2056: FILE: perfmon/perfmon.c:2000:
+^I^I * ^I  use (except when regs directly readable at user level,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2057: FILE: perfmon/perfmon.c:2001:
+^I^I * ^I  e.g., IA-64 self-monitoring, I386 RDTSC).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2058: FILE: perfmon/perfmon.c:2002:
+^I^I * ^I- do not need to maintain PMC -> PMD dependencies$

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#2067: FILE: perfmon/perfmon.c:2011:
+		 * explicitely been written by the application. In this case
 		   ^^^^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2121: FILE: perfmon/perfmon.c:2065:
+}
+int __pfm_write_pmds(struct pfm_context *ctx, pfarg_pmd_t *req, int count,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2124: FILE: perfmon/perfmon.c:2068:
+#define PFM_REGFL_PMD_ALL	(PFM_REGFL_RANDOM|PFM_REGFL_OVFL_NOTIFY|PFM_REG_RETFL_MASK)
                          	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2124: FILE: perfmon/perfmon.c:2068:
+#define PFM_REGFL_PMD_ALL	(PFM_REGFL_RANDOM|PFM_REGFL_OVFL_NOTIFY|PFM_REG_RETFL_MASK)
                          	                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wr_func"
#2149: FILE: perfmon/perfmon.c:2093:
+	has_wr_check = wr_func != NULL && (pfm_sysctl.expert_mode == 0);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2156: FILE: perfmon/perfmon.c:2100:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->ctx_task
+			       || is_system;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2162: FILE: perfmon/perfmon.c:2106:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2219: FILE: perfmon/perfmon.c:2163:
+			if (set == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2249: FILE: perfmon/perfmon.c:2193:
+			if (likely(compat == 0)) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#2346: FILE: perfmon/perfmon.c:2290:
+		DPRINT(("set%u pmd%u=0x%llx flags=0x%x"
+			" a_pmu=%d hw_pmd=0x%llx ctx_pmd=0x%llx s_reset=0x%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#2347: FILE: perfmon/perfmon.c:2291:
+			" a_pmu=%d hw_pmd=0x%llx ctx_pmd=0x%llx s_reset=0x%llx"
+			" l_reset=0x%llx u_pmds=0x%lx nu_pmds=%u s_pmds=0x%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#2348: FILE: perfmon/perfmon.c:2292:
+			" l_reset=0x%llx u_pmds=0x%lx nu_pmds=%u s_pmds=0x%lx"
+			" r_pmds=0x%lx o_pmds=0x%lx o_thres=%llu compat=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2349: FILE: perfmon/perfmon.c:2293:
+			" r_pmds=0x%lx o_pmds=0x%lx o_thres=%llu compat=%d"
+			" eventid=%llx\n",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2387: FILE: perfmon/perfmon.c:2331:
+#define PFM_REGFL_PMC_ALL	(PFM_REGFL_NO_EMUL64|PFM_REG_RETFL_MASK)
                          	                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2415: FILE: perfmon/perfmon.c:2359:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->ctx_task
+			      || is_system;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wr_func"
#2419: FILE: perfmon/perfmon.c:2363:
+	has_wr_check = wr_func != NULL && (pfm_sysctl.expert_mode == 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2422: FILE: perfmon/perfmon.c:2366:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2454: FILE: perfmon/perfmon.c:2398:
+			if (set == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2479: FILE: perfmon/perfmon.c:2423:
+			u64 v = value;
+			ret = (*wr_func)(ctx, set, cnum, flags, &v);

WARNING:SPACING: space prohibited before semicolon
#2482: FILE: perfmon/perfmon.c:2426:
+			value = v ;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2538: FILE: perfmon/perfmon.c:2482:
+}
+/*

WARNING:SPLIT_STRING: quoted string split across lines
#2545: FILE: perfmon/perfmon.c:2489:
+	DPRINT(("cur: euid=%d uid=%d gid=%d "
+		"task: euid=%d suid=%d uid=%d egid=%d cap:%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2546: FILE: perfmon/perfmon.c:2490:
+		"task: euid=%d suid=%d uid=%d egid=%d cap:%d"
+		"sgid=%d\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2546: FILE: perfmon/perfmon.c:2490:
+		"task: euid=%d suid=%d uid=%d egid=%d cap:%d"
+		"sgid=%d\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2557: FILE: perfmon/perfmon.c:2501:
+	return ((current->uid != task->euid)
+	    || (current->uid != task->suid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2558: FILE: perfmon/perfmon.c:2502:
+	    || (current->uid != task->suid)
+	    || (current->uid != task->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2559: FILE: perfmon/perfmon.c:2503:
+	    || (current->uid != task->uid)
+	    || (current->gid != task->egid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2560: FILE: perfmon/perfmon.c:2504:
+	    || (current->gid != task->egid)
+	    || (current->gid != task->sgid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2561: FILE: perfmon/perfmon.c:2505:
+	    || (current->gid != task->sgid)
+	    || (current->gid != task->gid)) && !capable(CAP_SYS_PTRACE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2564: FILE: perfmon/perfmon.c:2508:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2567: FILE: perfmon/perfmon.c:2511:
+ * ^I- kernel task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2568: FILE: perfmon/perfmon.c:2512:
+ * ^I- task not owned by caller$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2569: FILE: perfmon/perfmon.c:2513:
+ * ^I- task incompatible with context mode$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->mm"
#2577: FILE: perfmon/perfmon.c:2521:
+	if (task->mm == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_STOPPED'
#2605: FILE: perfmon/perfmon.c:2549:
+	if ((task->state != TASK_STOPPED) && (task->state != TASK_TRACED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_TRACED'
#2605: FILE: perfmon/perfmon.c:2549:
+	if ((task->state != TASK_STOPPED) && (task->state != TASK_TRACED)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2623: FILE: perfmon/perfmon.c:2567:
+}
+static int pfm_get_task(struct pfm_context *ctx, pid_t pid,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2634: FILE: perfmon/perfmon.c:2578:
+	if (pid != current->pid) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#2645: FILE: perfmon/perfmon.c:2589:
+		if (p == NULL)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2650: FILE: perfmon/perfmon.c:2594:
+	if (ret == 0) {
[...]
+	} else if (p != current) {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2665: FILE: perfmon/perfmon.c:2609:
+	do_each_thread (g, t) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2670: FILE: perfmon/perfmon.c:2614:
+	} while_each_thread (g, t);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_check_task_exist', this function's name, in a string
#2674: FILE: perfmon/perfmon.c:2618:
+	DPRINT(("pfm_check_task_exist: ret=%d ctx=%p\n", ret, ctx));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2679: FILE: perfmon/perfmon.c:2623:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old"
#2739: FILE: perfmon/perfmon.c:2683:
+	if (old != NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#2741: FILE: perfmon/perfmon.c:2685:
+		DPRINT(("load_pid [%d] has already a context old=%p new=%p"
+			" cur=%p\n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2749: FILE: perfmon/perfmon.c:2693:
+	if (set_flags & PFM_SETFL_OVFL_SWITCH) {
[...]
+	} else if (set_flags & PFM_SETFL_TIME_SWITCH) {
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2817: FILE: perfmon/perfmon.c:2761:
+	} else {
+

WARNING:TYPO_SPELLING: 'registes' may be misspelled - perhaps 'registers'?
#2909: FILE: perfmon/perfmon.c:2853:
+	 * load all registes from ctx to PMU
 	            ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2924: FILE: perfmon/perfmon.c:2868:
+}
+int __pfm_load_context(struct pfm_context *ctx, pfarg_load_t *req)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2938: FILE: perfmon/perfmon.c:2882:
+	if (set == NULL) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2939: FILE: perfmon/perfmon.c:2883:
+		DPRINT(("event set%u does not exist\n",req->load_set));
 		                                      ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3067: FILE: perfmon/perfmon.c:3011:
+	if (ctx->ctx_fl_mapset) {
[...]
+	} else {
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3084: FILE: perfmon/perfmon.c:3028:
+			if (set->set_id == set_id) goto found;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3117: FILE: perfmon/perfmon.c:3061:
+#define PFM_SETFL_BOTH_SWITCH	(PFM_SETFL_OVFL_SWITCH|PFM_SETFL_TIME_SWITCH)
                              	                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3149: FILE: perfmon/perfmon.c:3093:
+	BUG_ON(ctx->ctx_state == PFM_CTX_LOADED);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3193: FILE: perfmon/perfmon.c:3137:
+	set->set_switch_timeout = set->set_timeout = ji;

WARNING:SPLIT_STRING: quoted string split across lines
#3198: FILE: perfmon/perfmon.c:3142:
+	DPRINT(("set %u flags=0x%x id_next=%u req_sec=%lus req_nsec=%lu"
+		" jiffies=%lu "

WARNING:SPLIT_STRING: quoted string split across lines
#3199: FILE: perfmon/perfmon.c:3143:
+		" jiffies=%lu "
+		" runs=%llu HZ=%u  TICK_NSEC=%lu eff_sec=%lu eff_nsec=%lun\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3223: FILE: perfmon/perfmon.c:3167:
+int __pfm_create_evtsets(struct pfm_context *ctx, pfarg_setdesc_t *req,
+			int count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#3235: FILE: perfmon/perfmon.c:3179:
+		if (set == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3255: FILE: perfmon/perfmon.c:3199:
+int __pfm_getinfo_evtsets(struct pfm_context *ctx, pfarg_setinfo_t *req,
+				 int count)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3272: FILE: perfmon/perfmon.c:3216:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3300: FILE: perfmon/perfmon.c:3244:
+		if (is_system && is_loaded && ctx->ctx_fl_started
+		    && set == ctx->ctx_active_set)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3324: FILE: perfmon/perfmon.c:3268:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#3348: FILE: perfmon/perfmon.c:3292:
+	if (  (ctx_flags & PFM_FL_SYSTEM_WIDE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3349: FILE: perfmon/perfmon.c:3293:
+	if (  (ctx_flags & PFM_FL_SYSTEM_WIDE)
+	   && pfm_sysctl.sys_group != PFM_GROUP_PERM_ANY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3350: FILE: perfmon/perfmon.c:3294:
+	   && pfm_sysctl.sys_group != PFM_GROUP_PERM_ANY
+	   && in_group_p(pfm_sysctl.sys_group)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3354: FILE: perfmon/perfmon.c:3298:
+	} else if (pfm_sysctl.task_group != PFM_GROUP_PERM_ANY
+		   && in_group_p(pfm_sysctl.task_group)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3361: FILE: perfmon/perfmon.c:3305:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3367: FILE: perfmon/perfmon.c:3311:
+	struct file *filp = NULL;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3392: FILE: perfmon/perfmon.c:3336:
+	fd = pfm_alloc_fd(&filp);
 	                   ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3406: FILE: perfmon/perfmon.c:3350:
+	ctx->ctx_fl_system = (ctx_flags & PFM_FL_SYSTEM_WIDE) ? 1: 0;
 	                                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3407: FILE: perfmon/perfmon.c:3351:
+	ctx->ctx_fl_no_msg = (ctx_flags & PFM_FL_OVFL_NO_MSG) ? 1: 0;
 	                                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3408: FILE: perfmon/perfmon.c:3352:
+	ctx->ctx_fl_mapset = (ctx_flags & PFM_FL_MAP_SETS) ? 1: 0;
 	                                                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_find_set"
#3422: FILE: perfmon/perfmon.c:3366:
+	if (pfm_find_set(ctx, 0, 1) == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3430: FILE: perfmon/perfmon.c:3374:
+					 compat_mode, filp);
 					              ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3454: FILE: perfmon/perfmon.c:3398:
+	ctx->ctx_msgq_head = ctx->ctx_msgq_tail = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#3458: FILE: perfmon/perfmon.c:3402:
+	DPRINT(("ctx=%p flags=0x%x system=%d notify_block=%d no_msg=%d"
+		" use_fmt=%d remap=%d ctx_fd=%d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3458: FILE: perfmon/perfmon.c:3402:
+		" use_fmt=%d remap=%d ctx_fd=%d \n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fmt"
#3464: FILE: perfmon/perfmon.c:3408:
+		fmt != NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3475: FILE: perfmon/perfmon.c:3419:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3482: FILE: perfmon/perfmon.c:3426:
+	put_filp(filp);
 	         ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3533: FILE: perfmon/perfmon_ctxsw.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3554: FILE: perfmon/perfmon_ctxsw.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3567: FILE: perfmon/perfmon_ctxsw.c:35:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3581: FILE: perfmon/perfmon_ctxsw.c:49:
+	BUG_ON(task->pid == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3582: FILE: perfmon/perfmon_ctxsw.c:50:
+	BUG_ON(__get_cpu_var(pmu_owner));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3584: FILE: perfmon/perfmon_ctxsw.c:52:
+	BUG_ON(task->thread.pfm_context != ctx);

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#3594: FILE: perfmon/perfmon_ctxsw.c:62:
+	 * in case fo zombie, we do not complete ctswin of the
 	           ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3677: FILE: perfmon/perfmon_ctxsw.c:145:
+	if (set_flags & PFM_SETFL_TIME_SWITCH) {
+		__get_cpu_var(pfm_syst_info) = PFM_CPUINFO_TIME_SWITCH;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3692: FILE: perfmon/perfmon_ctxsw.c:160:
+^I * ^I- pmu owner != task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3693: FILE: perfmon/perfmon_ctxsw.c:161:
+^I * ^I- PMDs were modified$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3694: FILE: perfmon/perfmon_ctxsw.c:162:
+^I * ^I- PMCs were modified$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3695: FILE: perfmon/perfmon_ctxsw.c:163:
+^I * ^I- arch modifies PMC to stop monitoring$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3696: FILE: perfmon/perfmon_ctxsw.c:164:
+^I * ^I- there was an in-flight interrupt at pfm_ctxswout_thread()$

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#3752: FILE: perfmon/perfmon_ctxsw.c:220:
+		pfm_arch_stop(task ,ctx, set);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#3752: FILE: perfmon/perfmon_ctxsw.c:220:
+		pfm_arch_stop(task ,ctx, set);
 		                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctxp"
#3772: FILE: perfmon/perfmon_ctxsw.c:240:
+	if (ctxp == NULL && ctx == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3772: FILE: perfmon/perfmon_ctxsw.c:240:
+	if (ctxp == NULL && ctx == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3787: FILE: perfmon/perfmon_ctxsw.c:255:
+	if (ctxp && ctxp->ctx_fl_system)
[...]
+	else if (ctx) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3794: FILE: perfmon/perfmon_ctxsw.c:262:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3829: FILE: perfmon/perfmon_ctxsw.c:297:
+	BUG_ON(task->thread.pfm_context != ctx);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3886: FILE: perfmon/perfmon_ctxsw.c:354:
+	if (task->pid == 0 && (set_flags & PFM_SETFL_EXCL_IDLE) != 0) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3903: FILE: perfmon/perfmon_ctxsw.c:371:
+	if (ctx == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->thread.pfm_context"
#3920: FILE: perfmon/perfmon_ctxsw.c:388:
+		if (task->thread.pfm_context == NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113203.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 124 warnings, 116 checks, 3877 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113203.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
