WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: drivers/leds/ledscore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#55: FILE: drivers/leds/ledscore.c:2:
+ * linux/drivers/leds/ledscore.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#93: FILE: drivers/leds/ledscore.c:40:
+	const char *		name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#96: FILE: drivers/leds/ledscore.c:43:
+};
+static const struct leds_function_name leds_function_names[] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: drivers/leds/ledscore.c:57:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: drivers/leds/ledscore.c:70:
+^I$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#157: FILE: drivers/leds/ledscore.c:104:
+	unsigned long state = simple_strtoul(buf, &after, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: drivers/leds/ledscore.c:105:
+	unsigned long state = simple_strtoul(buf, &after, 10);
+	if (after - buf > 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: drivers/leds/ledscore.c:111:
+^I^I^I^Iif (led_dev->props->light) $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#165: FILE: drivers/leds/ledscore.c:112:
+					led_dev->props->light(led_dev->class_dev.dev, led_dev->props);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: drivers/leds/ledscore.c:143:
+^I$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#198: FILE: drivers/leds/ledscore.c:145:
+		if (strncmp(buf, leds_function_names[i].name, strlen(leds_function_names[i].name)) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#201: FILE: drivers/leds/ledscore.c:148:
+			if (likely(led_dev->props)) {
+				led_dev->props->function = leds_function_names[i].function;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: drivers/leds/ledscore.c:170:
+	new_led = kmalloc (sizeof (struct led_device), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: drivers/leds/ledscore.c:170:
+	new_led = kmalloc (sizeof (struct led_device), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_led)...) over kmalloc(sizeof (struct led_device)...)
#223: FILE: drivers/leds/ledscore.c:170:
+	new_led = kmalloc (sizeof (struct led_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: drivers/leds/ledscore.c:171:
+	if (unlikely (!new_led))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!new_led'
#224: FILE: drivers/leds/ledscore.c:171:
+	if (unlikely (!new_led))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#231: FILE: drivers/leds/ledscore.c:178:
+	memset (&new_led->class_dev, 0, sizeof (new_led->class_dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#231: FILE: drivers/leds/ledscore.c:178:
+	memset (&new_led->class_dev, 0, sizeof (new_led->class_dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#239: FILE: drivers/leds/ledscore.c:186:
+	rc = class_device_register (&new_led->class_dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: drivers/leds/ledscore.c:187:
+	if (unlikely (rc)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: drivers/leds/ledscore.c:188:
+		kfree (new_led);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#255: FILE: drivers/leds/ledscore.c:202:
+	printk(KERN_INFO "Registered led device: number=%s, color=%s\n", new_led->class_dev.class_id, props->color);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#255: FILE: drivers/leds/ledscore.c:202:
+	printk(KERN_INFO "Registered led device: number=%s, color=%s\n", new_led->class_dev.class_id, props->color);

WARNING:TYPO_SPELLING: 'unreigister' may be misspelled - perhaps 'unregister'?
#263: FILE: drivers/leds/ledscore.c:210:
+ * @props: the property to unreigister
                            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: drivers/leds/ledscore.c:217:
+	struct led_device *led_dev;
+	if (!props)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: drivers/leds/ledscore.c:224:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_function);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: drivers/leds/ledscore.c:225:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_light);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#279: FILE: drivers/leds/ledscore.c:226:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_color);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: drivers/leds/ledscore.c:239:
+static atomic_t ^I^Ileds_stop_timer = ATOMIC_INIT(0);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/leds/ledscore.c:251:
+^I^I^I^Iif (led_dev->props->light) $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#305: FILE: drivers/leds/ledscore.c:252:
+					led_dev->props->light(led_dev->class_dev.dev, led_dev->props);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/leds/ledscore.c:274:
+^I^I^I^Iif (led_dev->props->light) $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#328: FILE: drivers/leds/ledscore.c:275:
+					led_dev->props->light(led_dev->class_dev.dev, led_dev->props);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: drivers/leds/ledscore.c:296:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: drivers/leds/ledscore.c:306:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: include/linux/leds.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: include/linux/leds.h:28:
+^I$

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#400: FILE: include/linux/leds.h:30:
+	 * be seperated by a "/".  For example, "amber/green".
 	      ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: include/linux/leds.h:33:
+^I$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#414: FILE: include/linux/leds.h:44:
+	void (*light)(struct device *, struct led_properties *props);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: include/linux/leds.h:45:
+^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#430: FILE: drivers/leds/Kconfig:4:
+config CLASS_LEDS
+	tristate "LED support"
+	help
+	  This option provides the generic support for the leds class.
+	  LEDs can be accessed from /sys/class/leds.  It will also allow you
+	  to select individual drivers for LED devices.  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253707.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 29 warnings, 3 checks, 394 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253707.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
