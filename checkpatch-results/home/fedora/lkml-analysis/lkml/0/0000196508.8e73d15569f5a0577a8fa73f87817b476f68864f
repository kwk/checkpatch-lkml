WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
messages, but an smp kernel doesn't run.  *All* processes spawned by init(1)

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#35: 
die with SIGILL very very shortly.  I can only guess that there's been some

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#52: FILE: include/asm-alpha/spinlock.h:18:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#69: FILE: include/asm-alpha/spinlock.h:29:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t){ 0, -1, 0, NULL, NULL, NULL }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#73: FILE: include/asm-alpha/spinlock.h:31:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t){ 0 }

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: include/asm-alpha/spinlock.h:34:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#76: FILE: include/asm-alpha/spinlock.h:34:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#146: FILE: include/asm-alpha/spinlock.h:84:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#149: FILE: include/asm-alpha/spinlock.h:87:
+#define RW_LOCK_UNLOCKED	(rwlock_t){ 0 }

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: include/asm-alpha/spinlock.h:89:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#152: FILE: include/asm-alpha/spinlock.h:89:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: include/asm-alpha/spinlock.h:146:
+static inline int _raw_read_trylock(rwlock_t * lock)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#194: FILE: include/asm-alpha/spinlock.h:151:
+	__asm__ __volatile__(

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196508.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 6 warnings, 1 checks, 180 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196508.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
