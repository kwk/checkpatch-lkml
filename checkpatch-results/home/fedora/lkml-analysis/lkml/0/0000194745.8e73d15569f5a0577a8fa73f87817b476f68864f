WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#27: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#28: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#29: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: fs/rcfs/dir.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: fs/rcfs/dir.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: fs/rcfs/dir.c:2:
+ * fs/rcfs/dir.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#52: FILE: fs/rcfs/dir.c:2:
+ * fs/rcfs/dir.c 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: fs/rcfs/dir.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: fs/rcfs/dir.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: fs/rcfs/dir.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#82: FILE: fs/rcfs/dir.c:32:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#84: FILE: fs/rcfs/dir.c:34:
+#define rcfs_positive(dentry)  ((dentry)->d_inode && !d_unhashed((dentry)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#92: FILE: fs/rcfs/dir.c:42:
+	list_for_each_entry(child, &dentry->d_subdirs, d_child)
+	    if (!rcfs_is_magic(child) && rcfs_positive(child))

WARNING:TABSTOP: Statements should start on a tabstop
#93: FILE: fs/rcfs/dir.c:43:
+	    if (!rcfs_is_magic(child) && rcfs_positive(child))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#105: FILE: fs/rcfs/dir.c:55:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#115: FILE: fs/rcfs/dir.c:65:
+		if (!ridir->name) {
+			return -ENOMEM;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ripar->core->classtype->alloc
#120: FILE: fs/rcfs/dir.c:70:
+		ridir->core = (*(ripar->core->classtype->alloc))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#123: FILE: fs/rcfs/dir.c:73:
+		printk(KERN_ERR "rcfs_mkdir: Invalid parent core %p\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#133: FILE: fs/rcfs/dir.c:83:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#138: FILE: fs/rcfs/dir.c:88:
+		printk(KERN_ERR "rcfs_mkdir: error in rcfs_mknod\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_mkdir', this function's name, in a string
#138: FILE: fs/rcfs/dir.c:88:
+		printk(KERN_ERR "rcfs_mkdir: error in rcfs_mknod\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#162: FILE: fs/rcfs/dir.c:112:
+		printk(KERN_ERR "rcfs_rmdir: directory not empty\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#162: FILE: fs/rcfs/dir.c:112:
+		printk(KERN_ERR "rcfs_rmdir: directory not empty\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ri->core"
#167: FILE: fs/rcfs/dir.c:117:
+	if (ri->core == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#168: FILE: fs/rcfs/dir.c:118:
+		printk(KERN_ERR "rcfs_rmdir: core==NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#168: FILE: fs/rcfs/dir.c:118:
+		printk(KERN_ERR "rcfs_rmdir: core==NULL\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->core->classtype->free
#173: FILE: fs/rcfs/dir.c:123:
+	if ((*(ri->core->classtype->free)) (ri->core)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core->classtype->free'
#173: FILE: fs/rcfs/dir.c:123:
+	if ((*(ri->core->classtype->free)) (ri->core)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core'
#173: FILE: fs/rcfs/dir.c:123:
+	if ((*(ri->core->classtype->free)) (ri->core)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#174: FILE: fs/rcfs/dir.c:124:
+		printk(KERN_ERR "rcfs_rmdir: ckrm_free_core_class failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#174: FILE: fs/rcfs/dir.c:124:
+		printk(KERN_ERR "rcfs_rmdir: ckrm_free_core_class failed\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/rcfs/dir.c:158:
+int rcfs_create_noperm(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#243: FILE: fs/rcfs/dir.c:193:
+int rcfs_rename_noperm(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#248: FILE: fs/rcfs/dir.c:198:
+struct inode_operations rcfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#260: FILE: fs/rcfs/dir.c:210:
+struct inode_operations rcfs_rootdir_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: fs/rcfs/inode.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#276: FILE: fs/rcfs/inode.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: fs/rcfs/inode.c:2:
+ * fs/rcfs/inode.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#277: FILE: fs/rcfs/inode.c:2:
+ * fs/rcfs/inode.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: fs/rcfs/inode.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: fs/rcfs/inode.c:7:
+ * Resource class filesystem (rcfs) forming the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: fs/rcfs/inode.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#308: FILE: fs/rcfs/inode.c:33:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: fs/rcfs/inode.c:36:
+ * Address of variable used as flag to indicate a magic file, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: fs/rcfs/inode.c:38:
+ */ $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#326: FILE: fs/rcfs/inode.c:51:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/rcfs/inode.c:65:
+^I^I^I * directory inodes start off with i_nlink == 2 $

CHECK:BRACES: Unbalanced braces around else statement
#394: FILE: fs/rcfs/inode.c:119:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: fs/rcfs/inode.c:121:
+			err = rcfs_mknod(parent->d_inode, mfdentry,
+					  magf->mode, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: fs/rcfs/inode.c:123:
+^I^I^I * rcfs_mknod doesn't increment parent's link count, $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#419: FILE: fs/rcfs/inode.c:144:
+	if (!mfdentry->d_inode) {
+		return 0;
+	}

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#433: FILE: fs/rcfs/inode.c:158:
+struct inode_operations rcfs_file_inode_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#441: FILE: fs/rcfs/magic.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#442: FILE: fs/rcfs/magic.c:2:
+ * fs/rcfs/magic.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#470: FILE: fs/rcfs/magic.c:30:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#486: FILE: fs/rcfs/magic.c:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#490: FILE: fs/rcfs/magic.c:50:
+	int rc=0;
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#494: FILE: fs/rcfs/magic.c:54:
+	int (*func) (struct ckrm_core_class *, struct seq_file *) = NULL;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#502: FILE: fs/rcfs/magic.c:62:
+	if (!strcmp(rcfs_i->mfdentry->d_name.name, RCFS_CONFIG_NAME)) {
[...]
+	} else if (!strcmp(rcfs_i->mfdentry->d_name.name, RCFS_MEMBERS_NAME)) {
[...]
+	} else if (!strcmp(rcfs_i->mfdentry->d_name.name, RCFS_STATS_NAME)) {
[...]
+	} else if (!strcmp(rcfs_i->mfdentry->d_name.name, RCFS_SHARES_NAME)) {
[...]

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#515: FILE: fs/rcfs/magic.c:75:
+		seq_printf(s, "No data to display\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#523: FILE: fs/rcfs/magic.c:83:
+	int ret=-EINVAL;
 	       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#523: FILE: fs/rcfs/magic.c:83:
+	int ret=-EINVAL;
 	        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: fs/rcfs/magic.c:110:
+magic_parse(const unsigned char *fname, char *options,
+			char **resstr, char **otherstr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: fs/rcfs/magic.c:132:
+				*otherstr = kmalloc(strlen(str) + 1,
+							 GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!otherstr"
#573: FILE: fs/rcfs/magic.c:133:
+				if (*otherstr == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#577: FILE: fs/rcfs/magic.c:137:
+					return 0;
+				} else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "resstr"
#590: FILE: fs/rcfs/magic.c:150:
+	return (*resstr != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: fs/rcfs/magic.c:155:
+magic_write(struct file *file, const char __user *buf,
+			   size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: fs/rcfs/magic.c:157:
+^Istruct rcfs_inode_info *ri = $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#599: FILE: fs/rcfs/magic.c:159:
+	char *optbuf, *otherstr=NULL, *resname=NULL;
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#599: FILE: fs/rcfs/magic.c:159:
+	char *optbuf, *otherstr=NULL, *resname=NULL;
 	                                      ^

WARNING:SPACING: space prohibited before semicolon
#601: FILE: fs/rcfs/magic.c:161:
+	struct ckrm_core_class *core ;

WARNING:SPACING: Unnecessary space before function pointer arguments
#602: FILE: fs/rcfs/magic.c:162:
+	int (*func) (struct ckrm_core_class *, const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: fs/rcfs/magic.c:163:
+	int (*func) (struct ckrm_core_class *, const char *,
+			const char *) = NULL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#615: FILE: fs/rcfs/magic.c:175:
+	down(&(ri->vfs_inode.i_sem));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#617: FILE: fs/rcfs/magic.c:177:
+	optbuf = kmalloc(MAX_INPUT_SIZE+1, GFP_KERNEL);
 	                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#619: FILE: fs/rcfs/magic.c:179:
+		up(&(ri->vfs_inode.i_sem));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: fs/rcfs/magic.c:185:
+	done = magic_parse(ri->mfdentry->d_name.name,
+			optbuf, &resname, &otherstr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#627: FILE: fs/rcfs/magic.c:187:
+		printk(KERN_ERR "Error parsing data written to %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: fs/rcfs/magic.c:188:
+		printk(KERN_ERR "Error parsing data written to %s\n",
+				ri->mfdentry->d_name.name);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#631: FILE: fs/rcfs/magic.c:191:
+	if (!strcmp(ri->mfdentry->d_name.name, RCFS_CONFIG_NAME)) {
[...]
+	} else if (!strcmp(ri->mfdentry->d_name.name, RCFS_STATS_NAME)) {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#639: FILE: fs/rcfs/magic.c:199:
+			printk(KERN_ERR "magic_write: %s: error\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'magic_write', this function's name, in a string
#639: FILE: fs/rcfs/magic.c:199:
+			printk(KERN_ERR "magic_write: %s: error\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: fs/rcfs/magic.c:200:
+			printk(KERN_ERR "magic_write: %s: error\n",
+				ri->mfdentry->d_name.name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#644: FILE: fs/rcfs/magic.c:204:
+	up(&(ri->vfs_inode.i_sem));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#656: FILE: fs/rcfs/magic.c:216:
+target_reclassify_write(struct file *file, const char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#657: FILE: fs/rcfs/magic.c:217:
+			size_t count, loff_t * ppos, int manual)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#668: FILE: fs/rcfs/magic.c:228:
+	down(&(ri->vfs_inode.i_sem));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#674: FILE: fs/rcfs/magic.c:234:
+		rc = (*clstype->forced_reclassify) (manual ? ri->core: NULL, optbuf);
 		                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#675: FILE: fs/rcfs/magic.c:235:
+	up(&(ri->vfs_inode.i_sem));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#679: FILE: fs/rcfs/magic.c:239:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#688: FILE: fs/rcfs/magic.c:248:
+target_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#689: FILE: fs/rcfs/magic.c:249:
+	     size_t count, loff_t * ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#694: FILE: fs/rcfs/magic.c:254:
+struct file_operations target_fileops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#705: FILE: fs/rcfs/magic.c:265:
+reclassify_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#706: FILE: fs/rcfs/magic.c:266:
+		 size_t count, loff_t * ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#711: FILE: fs/rcfs/magic.c:271:
+struct file_operations reclassify_fileops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#726: FILE: fs/rcfs/magic.c:286:
+struct file_operations config_fileops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#740: FILE: fs/rcfs/magic.c:300:
+struct file_operations members_fileops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#755: FILE: fs/rcfs/magic.c:315:
+struct file_operations stats_fileops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#841: FILE: fs/rcfs/magic.c:401:
+shares_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#842: FILE: fs/rcfs/magic.c:402:
+	     size_t count, loff_t * ppos)

CHECK:SPACING: No space is necessary after a cast
#865: FILE: fs/rcfs/magic.c:425:
+	if (!ri || !ckrm_is_core_valid((struct ckrm_core_class *) (ri->core))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core'
#865: FILE: fs/rcfs/magic.c:425:
+	if (!ri || !ckrm_is_core_valid((struct ckrm_core_class *) (ri->core))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#866: FILE: fs/rcfs/magic.c:426:
+		printk(KERN_ERR "shares_write: Error accessing core class\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'shares_write', this function's name, in a string
#866: FILE: fs/rcfs/magic.c:426:
+		printk(KERN_ERR "shares_write: Error accessing core class\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#880: FILE: fs/rcfs/magic.c:440:
+		printk(KERN_ERR "Error parsing shares\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#887: FILE: fs/rcfs/magic.c:447:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'shares_write', this function's name, in a string
#888: FILE: fs/rcfs/magic.c:448:
+			       "shares_write: resctlr share set error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#892: FILE: fs/rcfs/magic.c:452:
+	printk(KERN_ERR "Set %s shares to %d %d %d %d\n",

WARNING:CONST_STRUCT: struct file_operations should normally be const
#906: FILE: fs/rcfs/magic.c:466:
+struct file_operations shares_fileops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#926: FILE: fs/rcfs/magic.c:486:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_clear_magic', this function's name, in a string
#927: FILE: fs/rcfs/magic.c:487:
+			       "rcfs_clear_magic: error deleting one\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#932: FILE: fs/rcfs/magic.c:492:
+EXPORT_SYMBOL_GPL(rcfs_clear_magic);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#957: FILE: fs/rcfs/magic.c:517:
+EXPORT_SYMBOL_GPL(rcfs_create_magic);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: fs/rcfs/Makefile:5:
+obj-$(CONFIG_RCFS_FS) += rcfs.o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#975: FILE: fs/rcfs/rootdir.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#975: FILE: fs/rcfs/rootdir.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#976: FILE: fs/rcfs/rootdir.c:2:
+ * fs/rcfs/rootdir.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#976: FILE: fs/rcfs/rootdir.c:2:
+ * fs/rcfs/rootdir.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#979: FILE: fs/rcfs/rootdir.c:5:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#980: FILE: fs/rcfs/rootdir.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#981: FILE: fs/rcfs/rootdir.c:7:
+ * Functions for creating root directories and magic files $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#985: FILE: fs/rcfs/rootdir.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1005: FILE: fs/rcfs/rootdir.c:31:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1011: FILE: fs/rcfs/rootdir.c:37:
+int rcfs_register_engine(struct rbce_eng_callback * rcbs)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1013: FILE: fs/rcfs/rootdir.c:39:
+	if (!rcbs->mkdir || rcfs_eng_callbacks.mkdir) {
+		return -EINVAL;
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1021: FILE: fs/rcfs/rootdir.c:47:
+EXPORT_SYMBOL_GPL(rcfs_register_engine);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1023: FILE: fs/rcfs/rootdir.c:49:
+int rcfs_unregister_engine(struct rbce_eng_callback * rcbs)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcbs->mkdir != rcfs_eng_callbacks.mkdir'
#1025: FILE: fs/rcfs/rootdir.c:51:
+	if (!rcbs->mkdir || !rcfs_eng_callbacks.mkdir ||
+	    (rcbs->mkdir != rcfs_eng_callbacks.mkdir)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1035: FILE: fs/rcfs/rootdir.c:61:
+EXPORT_SYMBOL(rcfs_unregister_engine);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: fs/rcfs/rootdir.c:65:
+ * Create and return a "root" dentry under /rcfs. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1040: FILE: fs/rcfs/rootdir.c:66:
+ * Also create associated magic files $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mfcount < 0'
#1055: FILE: fs/rcfs/rootdir.c:81:
+	if ((mfcount < 0) || (!mfdesc))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mfdesc'
#1055: FILE: fs/rcfs/rootdir.c:81:
+	if ((mfcount < 0) || (!mfdesc))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1059: FILE: fs/rcfs/rootdir.c:85:
+	printk("allocating classtype root <%s>\n", rootdesc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1063: FILE: fs/rcfs/rootdir.c:89:
+		printk(KERN_ERR "Could not create %s\n", rootdesc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1070: FILE: fs/rcfs/rootdir.c:96:
+		printk(KERN_ERR "Error allocating name for %s\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1087: FILE: fs/rcfs/rootdir.c:113:
+EXPORT_SYMBOL_GPL(rcfs_mkroot);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1104: FILE: fs/rcfs/rootdir.c:130:
+EXPORT_SYMBOL_GPL(rcfs_rmroot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1106: FILE: fs/rcfs/rootdir.c:132:
+int rcfs_register_classtype(struct ckrm_classtype * clstype)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1112: FILE: fs/rcfs/rootdir.c:138:
+	if (genmfdesc[clstype->mfidx] == NULL) {
+		return -ENOMEM;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!genmfdesc[clstype->mfidx]"
#1112: FILE: fs/rcfs/rootdir.c:138:
+	if (genmfdesc[clstype->mfidx] == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around clstype->rootde
#1125: FILE: fs/rcfs/rootdir.c:151:
+			 (struct dentry **)&(clstype->rootde));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1134: FILE: fs/rcfs/rootdir.c:160:
+	if ((rc = rcfs_create_magic(clstype->rootde, &mfdesc[1],

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1144: FILE: fs/rcfs/rootdir.c:170:
+EXPORT_SYMBOL_GPL(rcfs_register_classtype);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1146: FILE: fs/rcfs/rootdir.c:172:
+int rcfs_deregister_classtype(struct ckrm_classtype * clstype)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1158: FILE: fs/rcfs/rootdir.c:184:
+EXPORT_SYMBOL_GPL(rcfs_deregister_classtype);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1161: FILE: fs/rcfs/rootdir.c:187:
+ * root name, root permissions, magic file names and magic file permissions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1162: FILE: fs/rcfs/rootdir.c:188:
+ * are needed by all entities (classtypes and classification engines) existing $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: fs/rcfs/rootdir.c:191:
+ * The common sets of these attributes are listed here as a table. Individual $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1166: FILE: fs/rcfs/rootdir.c:192:
+ * classtypes and classification engines can simple specify the index into the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1167: FILE: fs/rcfs/rootdir.c:193:
+ * table to initialize their magf entries. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1178: FILE: fs/rcfs/super.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1178: FILE: fs/rcfs/super.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1179: FILE: fs/rcfs/super.c:2:
+ * fs/rcfs/super.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1179: FILE: fs/rcfs/super.c:2:
+ * fs/rcfs/super.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: fs/rcfs/super.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: fs/rcfs/super.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: fs/rcfs/super.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1210: FILE: fs/rcfs/super.c:33:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1222: FILE: fs/rcfs/super.c:45:
+	struct rcfs_inode_info *ri;
+	ri = (struct rcfs_inode_info *)kmem_cache_alloc(rcfs_inode_cachep,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1239: FILE: fs/rcfs/super.c:62:
+rcfs_init_once(void *foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcfs_inode_cachep"
#1256: FILE: fs/rcfs/super.c:79:
+	if (rcfs_inode_cachep == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1265: FILE: fs/rcfs/super.c:88:
+		printk(KERN_INFO

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1289: FILE: fs/rcfs/super.c:112:
+	if (rcfs_mounted) {
+		return -EPERM;
+	}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1305: FILE: fs/rcfs/super.c:128:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1315: FILE: fs/rcfs/super.c:138:
+		iput(inode);
 		^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1322: FILE: fs/rcfs/super.c:145:
+	sb->s_fs_info = rcfs_root = inode;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1329: FILE: fs/rcfs/super.c:152:
+		if (clstype == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1331: FILE: fs/rcfs/super.c:154:
+		printk("A non null classtype\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1333: FILE: fs/rcfs/super.c:156:
+		if ((rc = rcfs_register_classtype(clstype)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1343: FILE: fs/rcfs/super.c:166:
+			if ((rc = (*rcfs_eng_callbacks.mnt) ())) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1343: FILE: fs/rcfs/super.c:166:
+			if ((rc = (*rcfs_eng_callbacks.mnt) ())) {
+				printk(KERN_ERR "Error in CE mnt %d\n", rc);
+			}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1344: FILE: fs/rcfs/super.c:167:
+				printk(KERN_ERR "Error in CE mnt %d\n", rc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1351: FILE: fs/rcfs/super.c:174:
+^I * register CE's with rcfs $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1379: FILE: fs/rcfs/super.c:202:
+		if (clstype == NULL || clstype->rootde == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->rootde"
#1379: FILE: fs/rcfs/super.c:202:
+		if (clstype == NULL || clstype->rootde == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1382: FILE: fs/rcfs/super.c:205:
+		if ((rc = rcfs_deregister_classtype(clstype))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1383: FILE: fs/rcfs/super.c:206:
+			printk(KERN_ERR "Error removing classtype %s\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1394: FILE: fs/rcfs/super.c:217:
+			if ((rc = (*rcfs_eng_callbacks.umnt) ())) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1395: FILE: fs/rcfs/super.c:218:
+				printk(KERN_ERR "Error in CE umnt %d\n", rc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1400: FILE: fs/rcfs/super.c:223:
+^I * Following comment handled by code above; keep nonetheless if it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1405: FILE: fs/rcfs/super.c:228:
+^I * if ce is in  one directory /rcfs/ce, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1406: FILE: fs/rcfs/super.c:229:
+^I *       rcfs_deregister_engine for all classtypes within above $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: fs/rcfs/super.c:230:
+^I *             codebase $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1413: FILE: fs/rcfs/super.c:236:
+^I * following will automatically clear rcfs root entry including its $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1433: FILE: fs/rcfs/super.c:256:
+extern struct rcfs_functions rcfs_fn;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1494: FILE: include/linux/rcfs.h:36:
+ ^Istruct dentry *mfdentry;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1494: FILE: include/linux/rcfs.h:36:
+ ^Istruct dentry *mfdentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1494: FILE: include/linux/rcfs.h:36:
+ ^Istruct dentry *mfdentry;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1531: FILE: init/Kconfig:162:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1532: FILE: init/Kconfig:163:
+^I  Say M if unsure, Y to save on module loading. N doesn't make sense $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194745.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 67 errors, 88 warnings, 40 checks, 1457 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194745.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
