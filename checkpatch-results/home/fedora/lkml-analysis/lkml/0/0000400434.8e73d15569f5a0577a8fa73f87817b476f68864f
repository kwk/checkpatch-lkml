WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
diff -u --recursive --new-file linux-2.5.56-05-rpc_gss/include/linux/sunrpc/auth_gss.h linux-2.5.56-06-auth_upcall2/include/linux/sunrpc/auth_gss.h

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#63: FILE: include/linux/sunrpc/auth.h:118:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct auth_cred *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#63: FILE: include/linux/sunrpc/auth.h:118:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct auth_cred *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auth_cred *' should also have an identifier name
#63: FILE: include/linux/sunrpc/auth.h:118:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct auth_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#63: FILE: include/linux/sunrpc/auth.h:118:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct auth_cred *, int);

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#100: FILE: net/sunrpc/auth_gss/auth_gss.c:54:
+#include <asm/uaccess.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#116: FILE: net/sunrpc/auth_gss/auth_gss.c:87:
+	spinlock_t lock;

WARNING:CONST_STRUCT: struct rpc_pipe_ops should normally be const
#120: FILE: net/sunrpc/auth_gss/auth_gss.c:91:
+static struct rpc_pipe_ops gss_upcall_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: net/sunrpc/auth_gss/auth_gss.c:150:
+	struct gss_cl_ctx *old;
+	write_lock(&gss_ctx_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: net/sunrpc/auth_gss/auth_gss.c:176:
+	char *p, *q;
+	p = *ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: net/sunrpc/auth_gss/auth_gss.c:189:
+	char *p, *q;
+	p = *ptr;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#202: FILE: net/sunrpc/auth_gss/auth_gss.c:204:
+	if (!(dest->data = kmalloc(dest->len, GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: net/sunrpc/auth_gss/auth_gss.c:212:
+gss_parse_init_downcall(struct gss_api_mech *gm, struct xdr_netobj *buf,
+		struct gss_cl_ctx **gc, uid_t *uid)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: net/sunrpc/auth_gss/auth_gss.c:221:
+	if (!(ctx = kmalloc(sizeof(*ctx), GFP_KERNEL))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: net/sunrpc/auth_gss/auth_gss.c:228:
+	atomic_set(&ctx->count,1);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_parse_init_downcall', this function's name, in a string
#255: FILE: net/sunrpc/auth_gss/auth_gss.c:257:
+	dprintk("RPC: gss_parse_init_downcall returning %d\n", err);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#259: FILE: net/sunrpc/auth_gss/auth_gss.c:261:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: net/sunrpc/auth_gss/auth_gss.c:281:
+	struct gss_upcall_msg *pos;
+	list_for_each_entry(pos, &gss_auth->upcalls, list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gss_msg"
#316: FILE: net/sunrpc/auth_gss/auth_gss.c:318:
+	if (gss_msg == NULL && gss_new == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gss_new"
#316: FILE: net/sunrpc/auth_gss/auth_gss.c:318:
+	if (gss_msg == NULL && gss_new == NULL) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#347: FILE: net/sunrpc/auth_gss/auth_gss.c:349:
+	if (gss_new)
+		kfree(gss_new);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#352: FILE: net/sunrpc/auth_gss/auth_gss.c:354:
+gss_pipe_upcall(struct file *filp, struct rpc_pipe_msg *msg,
                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#367: FILE: net/sunrpc/auth_gss/auth_gss.c:369:
+gss_pipe_downcall(struct file *filp, const char *src, size_t mlen)
                                ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_pipe_downcall', this function's name, in a string
#415: FILE: net/sunrpc/auth_gss/auth_gss.c:417:
+	dprintk("RPC: gss_pipe_downcall returning %d\n", err);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#441: FILE: net/sunrpc/auth_gss/auth_gss.c:443:
+	if (!(gss_auth = kmalloc(sizeof(*gss_auth), GFP_KERNEL)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#445: FILE: net/sunrpc/auth_gss/auth_gss.c:447:
+		printk(KERN_WARNING "%s: Pseudoflavor %d not found!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: net/sunrpc/auth_gss/auth_gss.c:448:
+		printk(KERN_WARNING "%s: Pseudoflavor %d not found!",
+				__FUNCTION__, flavor);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#446: FILE: net/sunrpc/auth_gss/auth_gss.c:448:
+				__FUNCTION__, flavor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: net/sunrpc/auth_gss/auth_gss.c:463:
+	snprintf(gss_auth->path, sizeof(gss_auth->path), "%s/%s",
+			clnt->cl_pathname,

WARNING:CONST_STRUCT: struct rpc_pipe_ops should normally be const
#577: FILE: net/sunrpc/auth_gss/auth_gss.c:711:
+static struct rpc_pipe_ops gss_upcall_ops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 18 warnings, 7 checks, 518 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
