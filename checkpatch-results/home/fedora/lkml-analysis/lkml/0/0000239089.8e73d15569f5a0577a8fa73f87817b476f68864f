WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#   2004/10/21 21:15:43-04:00 jgarzik@pobox.com 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# kernel/workqueue.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +528 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# kernel/kthread.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +184 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# include/linux/workqueue.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +89 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# include/linux/kthread.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +81 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# kernel/workqueue.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#   BitKeeper file /garz/repo/kthread-2.4/kernel/workqueue.c

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#76: 
#   BitKeeper file /garz/repo/kthread-2.4/kernel/workqueue.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# kernel/sched.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +11 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# kernel/kthread.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#   BitKeeper file /garz/repo/kthread-2.4/kernel/kthread.c

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#84: 
#   BitKeeper file /garz/repo/kthread-2.4/kernel/kthread.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# kernel/ksyms.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +1 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
# kernel/Makefile

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +3 -2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
# include/linux/workqueue.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#   BitKeeper file /garz/repo/kthread-2.4/include/linux/workqueue.h

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#96: 
#   BitKeeper file /garz/repo/kthread-2.4/include/linux/workqueue.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
# include/linux/timer.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +12 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
# include/linux/smp.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +11 -3

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
# include/linux/sched.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +3 -1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#   Add kthread/workqueue APIs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
# include/linux/kthread.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#   2004/10/21 21:15:41-04:00 jgarzik@pobox.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
#   BitKeeper file /garz/repo/kthread-2.4/include/linux/kthread.h

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#112: 
#   BitKeeper file /garz/repo/kthread-2.4/include/linux/kthread.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
# 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: include/linux/kthread.h:1:
+#ifndef _LINUX_KTHREAD_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#136: FILE: include/linux/kthread.h:19:
+ * standalone thread for which noone will call kthread_stop(), or
                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#154: FILE: include/linux/kthread.h:37:
+ * wake_up_process().  Returns the kthread, or ERR_PTR(-ENOMEM). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#158: FILE: include/linux/kthread.h:41:
+	struct task_struct *__k						   \
+		= kthread_create(threadfn, data, namefmt, ## __VA_ARGS__); \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#186: FILE: include/linux/kthread.h:69:
+ * was never called. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#206: FILE: include/linux/sched.h:138:
+typedef struct task_struct task_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/linux/sched.h:148:
+extern void set_user_nice(struct task_struct *p, long nice);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#244: FILE: include/linux/smp.h:96:
+#define for_each_online_cpu(cpu)	\
+	for ((cpu) = 0; (cpu) < smp_num_cpus; (cpu)++)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#276: FILE: include/linux/workqueue.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#292: FILE: include/linux/workqueue.h:17:
+	void (*func)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#298: FILE: include/linux/workqueue.h:23:
+#define __WORK_INITIALIZER(n, f, d) {				\
+        .entry	= { &(n).entry, &(n).entry },			\
+	.func = (f),						\
+	.data = (d),						\
+	.timer = TIMER_INITIALIZER(NULL, 0, 0),			\
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: include/linux/workqueue.h:24:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/workqueue.h:24:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#305: FILE: include/linux/workqueue.h:30:
+#define DECLARE_WORK(n, f, d)					\
+	struct work_struct n = __WORK_INITIALIZER(n, f, d)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#311: FILE: include/linux/workqueue.h:36:
+#define PREPARE_WORK(_work, _func, _data)			\
+	do {							\
+		(_work)->func = _func;				\
+		(_work)->data = _data;				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#320: FILE: include/linux/workqueue.h:45:
+#define INIT_WORK(_work, _func, _data)				\
+	do {							\
+		INIT_LIST_HEAD(&(_work)->entry);		\
+		(_work)->pending = 0;				\
+		PREPARE_WORK((_work), (_func), (_data));	\
+		init_timer(&(_work)->timer);			\
+	} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: include/linux/workqueue.h:53:
+extern struct workqueue_struct *__create_workqueue(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: include/linux/workqueue.h:54:
+extern struct workqueue_struct *__create_workqueue(const char *name,
+						    int singlethread);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/workqueue.h:58:
+extern void destroy_workqueue(struct workqueue_struct *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/workqueue.h:60:
+extern int FASTCALL(queue_work(struct workqueue_struct *wq, struct work_struct *work));

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#336: FILE: include/linux/workqueue.h:61:
+extern int FASTCALL(queue_delayed_work(struct workqueue_struct *wq, struct work_struct *work, unsigned long delay));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: include/linux/workqueue.h:61:
+extern int FASTCALL(queue_delayed_work(struct workqueue_struct *wq, struct work_struct *work, unsigned long delay));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: include/linux/workqueue.h:62:
+extern void FASTCALL(flush_workqueue(struct workqueue_struct *wq));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/workqueue.h:64:
+extern int FASTCALL(schedule_work(struct work_struct *work));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: include/linux/workqueue.h:65:
+extern int FASTCALL(schedule_delayed_work(struct work_struct *work, unsigned long delay));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/workqueue.h:67:
+extern int schedule_delayed_work_on(int cpu, struct work_struct *work, unsigned long delay);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/linux/workqueue.h:68:
+extern void flush_scheduled_work(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: include/linux/workqueue.h:69:
+extern int current_is_keventd(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: include/linux/workqueue.h:70:
+extern int keventd_up(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: include/linux/workqueue.h:72:
+extern void init_workqueues(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: kernel/kthread.c:1:
+/* Kernel thread helper functions.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#418: FILE: kernel/kthread.c:20:
+struct kthread_create_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#430: FILE: kernel/kthread.c:32:
+struct kthread_stop_info
+{

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#437: FILE: kernel/kthread.c:39:
+ * multiple kthread_stop calls. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: kernel/kthread.c:58:
+ ^Iexit_files(tsk);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#456: FILE: kernel/kthread.c:58:
+ ^Iexit_files(tsk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: kernel/kthread.c:58:
+ ^Iexit_files(tsk);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#531: FILE: kernel/kthread.c:133:
+	 * can't use keventd. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#532: FILE: kernel/kthread.c:134:
+	if (!keventd_up())
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#534: FILE: kernel/kthread.c:136:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: kernel/kthread.c:142:
+		va_list args;
+		va_start(args, namefmt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#567: FILE: kernel/kthread.c:169:
+	wmb();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#608: FILE: kernel/workqueue.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#609: FILE: kernel/workqueue.c:2:
+ * linux/kernel/workqueue.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'until'
#640: FILE: kernel/workqueue.c:33:
+ * until until all currently-scheduled works are completed, but it doesn't

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#646: FILE: kernel/workqueue.c:39:
+struct cpu_workqueue_struct {
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#647: FILE: kernel/workqueue.c:40:
+	spinlock_t lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#669: FILE: kernel/workqueue.c:62:
+^Istruct list_head list; ^I/* Empty if single thread */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#673: FILE: kernel/workqueue.c:66:
+/* All the per-cpu workqueues on the system, for hotplug cpu to add/remove
+   threads to each one as cpus come/go. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#673: FILE: kernel/workqueue.c:66:
+   threads to each one as cpus come/go. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#711: FILE: kernel/workqueue.c:104:
+		BUG_ON(!list_empty(&work->entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: kernel/workqueue.c:125:
+int fastcall queue_delayed_work(struct workqueue_struct *wq,
+			struct work_struct *work, unsigned long delay)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#738: FILE: kernel/workqueue.c:131:
+		BUG_ON(timer_pending(timer));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#739: FILE: kernel/workqueue.c:132:
+		BUG_ON(!list_empty(&work->entry));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#764: FILE: kernel/workqueue.c:157:
+		printk("%s: recursion depth exceeded: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: kernel/workqueue.c:158:
+		printk("%s: recursion depth exceeded: %d\n",
+			__FUNCTION__, cwq->run_depth);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#765: FILE: kernel/workqueue.c:158:
+			__FUNCTION__, cwq->run_depth);

WARNING:SPACING: Unnecessary space before function pointer arguments
#771: FILE: kernel/workqueue.c:164:
+		void (*f) (void *) = work->func;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: kernel/workqueue.c:170:
+		BUG_ON(work->wq_data != cwq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#915: FILE: kernel/workqueue.c:308:
+	BUG_ON(strlen(name) > 10);

CHECK:BRACES: braces {} should be used on all arms of this statement
#938: FILE: kernel/workqueue.c:331:
+			if (p) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#941: FILE: kernel/workqueue.c:334:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#980: FILE: kernel/workqueue.c:373:
+	if (is_single_threaded(wq))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#982: FILE: kernel/workqueue.c:375:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: kernel/workqueue.c:399:
+int schedule_delayed_work_on(int cpu,
+			struct work_struct *work, unsigned long delay)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1012: FILE: kernel/workqueue.c:405:
+		BUG_ON(timer_pending(timer));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1013: FILE: kernel/workqueue.c:406:
+		BUG_ON(!list_empty(&work->entry));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "keventd_wq"
#1032: FILE: kernel/workqueue.c:425:
+	return keventd_wq != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1041: FILE: kernel/workqueue.c:434:
+	BUG_ON(!keventd_wq);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1049: FILE: kernel/workqueue.c:442:
+
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1063: FILE: kernel/workqueue.c:456:
+		printk("Taking work for %s\n", wq->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1064: FILE: kernel/workqueue.c:457:
+		work = list_entry(list.next,struct work_struct,entry);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1064: FILE: kernel/workqueue.c:457:
+		work = list_entry(list.next,struct work_struct,entry);
 		                                              ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1072: FILE: kernel/workqueue.c:465:
+static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: kernel/workqueue.c:466:
+static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1084: FILE: kernel/workqueue.c:477:
+				printk("workqueue for %i failed\n", hotcpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1123: FILE: kernel/workqueue.c:516:
+	BUG_ON(!keventd_wq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1126: FILE: kernel/workqueue.c:519:
+EXPORT_SYMBOL_GPL(__create_workqueue);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1127: FILE: kernel/workqueue.c:520:
+EXPORT_SYMBOL_GPL(queue_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1128: FILE: kernel/workqueue.c:521:
+EXPORT_SYMBOL_GPL(queue_delayed_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1129: FILE: kernel/workqueue.c:522:
+EXPORT_SYMBOL_GPL(flush_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1130: FILE: kernel/workqueue.c:523:
+EXPORT_SYMBOL_GPL(destroy_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1132: FILE: kernel/workqueue.c:525:
+EXPORT_SYMBOL(schedule_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1133: FILE: kernel/workqueue.c:526:
+EXPORT_SYMBOL(schedule_delayed_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1134: FILE: kernel/workqueue.c:527:
+EXPORT_SYMBOL(schedule_delayed_work_on);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1135: FILE: kernel/workqueue.c:528:
+EXPORT_SYMBOL(flush_scheduled_work);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000239089.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 108 warnings, 34 checks, 980 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000239089.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
