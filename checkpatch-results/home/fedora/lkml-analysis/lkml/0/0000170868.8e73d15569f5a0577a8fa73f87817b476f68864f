WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#121: FILE: accelerometer.c:59:
+	printk(KERN_DEBUG DRV_NAME ": latch_wait(0x%x, 0x%x)\n", value, port);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#129: FILE: accelerometer.c:66:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: accelerometer.c:82:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#141: FILE: accelerometer.c:83:
+	printk(KERN_DEBUG DRV_NAME ": refresh(%d)\n", synchronous);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: accelerometer.c:106:
+struct accelerometer_data { $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#162: FILE: accelerometer.c:116:
+} __attribute__ ((packed));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#170: FILE: accelerometer.c:124:
+	printk(KERN_DEBUG DRV_NAME ": read()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read', this function's name, in a string
#170: FILE: accelerometer.c:124:
+	printk(KERN_DEBUG DRV_NAME ": read()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: accelerometer.c:127:
+		for (i=0; i< sizeof(struct accelerometer_data); i++) {
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#173: FILE: accelerometer.c:127:
+		for (i=0; i< sizeof(struct accelerometer_data); i++) {
 		           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#173: FILE: accelerometer.c:127:
+		for (i=0; i< sizeof(struct accelerometer_data); i++) {
+			((unsigned char *)(&d))[i] = inb(0x1611 + i);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: accelerometer.c:140:
+		printk("x_accel: %d\n", d.x_accel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: accelerometer.c:141:
+		printk("y_accel: %d\n", d.y_accel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#208: FILE: accelerometer.c:168:
+	printk("%s() 5\n", __func__);

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#223: FILE: accelerometer.c:194:
+ * Three more outbs at ports 0x1610, 0x1611, and 0x161f of values 0x17, 0x81, and 0x01, respectively follow.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#225: FILE: accelerometer.c:196:
+ * Four more waits for latches 0x161f, 0x1611, 0x1612, and 0x1613 for values 0x0, 0x0, 0x60, and 0x0 respectively.

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#229: FILE: accelerometer.c:200:
+ * Then five outbs at ports 0x1610, 0x1611, 0x1612, 0x1613, and 0x161f of values 0x10, 0xc8, 0x00, 0x02, and 0x01

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#233: FILE: accelerometer.c:204:
+ * I then issues a synchronous refresh of the accelerometer data, and wait for latch 0x1611 to become 0x0.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: accelerometer.c:206:
+^I$

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#237: FILE: accelerometer.c:208:
+ * The next part is a little bit tricky because it can take a long time for the accelerometer to complete.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#237: FILE: accelerometer.c:208:
+ /*----------------------------------------------
+ * The next part is a little bit tricky because it can take a long time for the accelerometer to complete.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#239: FILE: accelerometer.c:210:
+ * ^IInside this loop, I check the timeout value against the "time waited so far" variable.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: accelerometer.c:211:
+ * ^IIf the function has taken too long,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#241: FILE: accelerometer.c:212:
+ * ^I^Ireturn failure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: accelerometer.c:213:
+ * ^Ielse, I call the function which reads the accelerometer data$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: accelerometer.c:214:
+ * ^Iand I throw away the (probably garbage) data$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: accelerometer.c:215:
+ * ^I^I(this read somehow seems to kick the accelerometer into being initialized).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: accelerometer.c:216:
+ * ^II set_current_state to TASK_INTERRUPTIBLE, and schedule_timeout for HZ.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: accelerometer.c:217:
+ * ^II then increment our "seconds waited so far" variable and continue the loop.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: accelerometer.c:218:
+ * ^IIf the loop ever exits successfully, the function returns success.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: accelerometer.c:219:
+ * ^IA good value to pass for the initialize timeout value is 10 seconds.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: accelerometer.c:222:
+        /* I loop forever until latch 0x1611 becomes 0x02. */ {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: accelerometer.c:226:
+	unsigned long msecs_slept = 0;
+	while (msecs_slept <= msecs_to_sleep) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: accelerometer.c:228:
+			printk("good latch check\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: accelerometer.c:232:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: accelerometer.c:257:
+	printk("initialize() ret: %d\n", ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: accelerometer.c:263:
+		int i;
+		for (i=0; i<10;i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#282: FILE: accelerometer.c:263:
+		for (i=0; i<10;i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#282: FILE: accelerometer.c:263:
+		for (i=0; i<10;i++) {
 		           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#282: FILE: accelerometer.c:263:
+		for (i=0; i<10;i++) {
 		              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170868.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 29 warnings, 1 checks, 173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170868.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
