WARNING:TYPO_SPELLING: 'filesysems' may be misspelled - perhaps 'filesystems'?
#23: 
Al added fs/libfs.c for common library routines used by filesysems
                                                        ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'funcions' may be misspelled - perhaps 'functions'?
#24: 
a while ago, but we have a lot more such library funcions, say
                                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#37: 
 can track the renames, but the plain patch works fine aswell)
                                                       ^^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#62: 
--- a/fs/Makefile	Sat Apr  5 21:29:54 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#637: FILE: fs/libfs/export.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)
        	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)
        	                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)
        	                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ops' - possible side-effects?
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ops' may be better as '(ops)' to avoid precedence issues
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fun' - possible side-effects?
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fun' may be better as '(fun)' to avoid precedence issues
#645: FILE: fs/libfs/export.c:9:
+#define	CALL(ops,fun) ((ops->fun)?(ops->fun):export_op_default.fun)

ERROR:SPACING: space required before the open brace '{'
#647: FILE: fs/libfs/export.c:11:
+#define dprintk(fmt, args...) do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#647: FILE: fs/libfs/export.c:11:
+#define dprintk(fmt, args...) do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: fs/libfs/export.c:11:
+#define dprintk(fmt, args...) do{}while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#694: FILE: fs/libfs/export.c:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: fs/libfs/export.c:62:
+	result = CALL(sb->s_export_op,get_dentry)(sb,obj);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: fs/libfs/export.c:62:
+	result = CALL(sb->s_export_op,get_dentry)(sb,obj);
 	                                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#700: FILE: fs/libfs/export.c:64:
+	if (result == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: fs/libfs/export.c:86:
+			struct dentry *dentry = list_entry(le, struct dentry, d_alias);
+			dget_locked(dentry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: fs/libfs/export.c:103:
+^I}^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: fs/libfs/export.c:107:
+ ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#743: FILE: fs/libfs/export.c:107:
+ ^I */$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#744: FILE: fs/libfs/export.c:108:
+	dprintk("find_exported_dentry: need to look harder for %s/%d\n",sb->s_id,*(int*)obj);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#744: FILE: fs/libfs/export.c:108:
+	dprintk("find_exported_dentry: need to look harder for %s/%d\n",sb->s_id,*(int*)obj);
 	                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#744: FILE: fs/libfs/export.c:108:
+	dprintk("find_exported_dentry: need to look harder for %s/%d\n",sb->s_id,*(int*)obj);
 	                                                                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#744: FILE: fs/libfs/export.c:108:
+	dprintk("find_exported_dentry: need to look harder for %s/%d\n",sb->s_id,*(int*)obj);
 	                                                                         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_exported_dentry', this function's name, in a string
#744: FILE: fs/libfs/export.c:108:
+	dprintk("find_exported_dentry: need to look harder for %s/%d\n",sb->s_id,*(int*)obj);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#745: FILE: fs/libfs/export.c:109:
+	if (S_ISDIR(result->d_inode->i_mode))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#747: FILE: fs/libfs/export.c:111:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#748: FILE: fs/libfs/export.c:112:
+		if (parent == NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#751: FILE: fs/libfs/export.c:115:
+		target_dir = CALL(sb->s_export_op,get_dentry)(sb,parent);
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#751: FILE: fs/libfs/export.c:115:
+		target_dir = CALL(sb->s_export_op,get_dentry)(sb,parent);
 		                                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!target_dir"
#754: FILE: fs/libfs/export.c:118:
+		if (target_dir == NULL || IS_ERR(target_dir))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: fs/libfs/export.c:132:
+^I/* it is possible that a confused file system might not let us complete $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#776: FILE: fs/libfs/export.c:140:
+	noprogress= 0;
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: fs/libfs/export.c:147:
+		while (!IS_ROOT(pd) &&
+				(pd->d_parent->d_flags&DCACHE_DISCONNECTED)) {

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#783: FILE: fs/libfs/export.c:147:
+				(pd->d_parent->d_flags&DCACHE_DISCONNECTED)) {
 				                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#799: FILE: fs/libfs/export.c:163:
+			printk(KERN_ERR "export: Eeek filesystem root is not connected, impossible\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#812: FILE: fs/libfs/export.c:176:
+			char nbuf[NAME_MAX+1];
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#815: FILE: fs/libfs/export.c:179:
+			ppd = CALL(nops,get_parent)(pd);
 			               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_exported_dentry', this function's name, in a string
#820: FILE: fs/libfs/export.c:184:
+				dprintk("find_exported_dentry: get_parent of %ld failed, err %d\n",

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#825: FILE: fs/libfs/export.c:189:
+			dprintk("find_exported_dentry: find name of %lu in %lu\n", pd->d_inode->i_ino, ppd->d_inode->i_ino);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_exported_dentry', this function's name, in a string
#825: FILE: fs/libfs/export.c:189:
+			dprintk("find_exported_dentry: find name of %lu in %lu\n", pd->d_inode->i_ino, ppd->d_inode->i_ino);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#826: FILE: fs/libfs/export.c:190:
+			err = CALL(nops,get_name)(ppd, nbuf, pd);
 			               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_exported_dentry', this function's name, in a string
#837: FILE: fs/libfs/export.c:201:
+			dprintk("find_exported_dentry: found name: %s\n", nbuf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_exported_dentry', this function's name, in a string
#843: FILE: fs/libfs/export.c:207:
+				dprintk("find_exported_dentry: lookup failed: %d\n", err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#856: FILE: fs/libfs/export.c:220:
+				printk("find_exported_dentry: npd != pd\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_exported_dentry', this function's name, in a string
#856: FILE: fs/libfs/export.c:220:
+				printk("find_exported_dentry: npd != pd\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#878: FILE: fs/libfs/export.c:242:
+		char nbuf[NAME_MAX+1];
 		                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#879: FILE: fs/libfs/export.c:243:
+		char nbuf[NAME_MAX+1];
+		err = CALL(nops,get_name)(target_dir, nbuf, result);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#879: FILE: fs/libfs/export.c:243:
+		err = CALL(nops,get_name)(target_dir, nbuf, result);
 		               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#885: FILE: fs/libfs/export.c:249:
+				if (nresult->d_inode) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#888: FILE: fs/libfs/export.c:252:
+				} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#904: FILE: fs/libfs/export.c:268:
+		struct dentry *dentry = list_entry(le, struct dentry, d_alias);
+		dget_locked(dentry);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#906: FILE: fs/libfs/export.c:270:
+		if (toput) dput(toput);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: fs/libfs/export.c:296:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#944: FILE: fs/libfs/export.c:308:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#947: FILE: fs/libfs/export.c:311:
+	char *name;		/* name that was found. It already points to a
+				   buffer NAME_MAX+1 is size */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#947: FILE: fs/libfs/export.c:311:
+				   buffer NAME_MAX+1 is size */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: fs/libfs/export.c:321:
+static int filldir_one(void * __buf, const char * name, int len,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: fs/libfs/export.c:321:
+static int filldir_one(void * __buf, const char * name, int len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: fs/libfs/export.c:322:
+static int filldir_one(void * __buf, const char * name, int len,
+			loff_t pos, ino_t ino, unsigned int d_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: fs/libfs/export.c:347:
+static int get_name(struct dentry *dentry, char *name,
+			struct dentry *child)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1032: FILE: fs/libfs/export.c:396:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1035: FILE: fs/libfs/export.c:399:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1047: FILE: fs/libfs/export.c:411:
+	struct dentry *result;
+	if (ino == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#1050: FILE: fs/libfs/export.c:414:
+	if (inode == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1053: FILE: fs/libfs/export.c:417:
+	if (is_bad_inode(inode)
+	    || (generation && inode->i_generation != generation)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1062: FILE: fs/libfs/export.c:426:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1070: FILE: fs/libfs/export.c:434:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1077: FILE: fs/libfs/export.c:441:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1087: FILE: fs/libfs/export.c:451:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: fs/libfs/export.c:465:
+static int export_encode_fh(struct dentry *dentry, __u32 *fh, int *max_len,
+		   int connectable)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1103: FILE: fs/libfs/export.c:467:
+	struct inode * inode = dentry->d_inode;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1106: FILE: fs/libfs/export.c:470:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1128: FILE: fs/libfs/export.c:492:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: fs/libfs/export.c:508:
+static struct dentry *export_decode_fh(struct super_block *sb, __u32 *fh, int fh_len,
+			      int fileid_type,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1149: FILE: fs/libfs/export.c:513:
+	__u32 parent[2];
+	parent[0] = parent[1] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1149: FILE: fs/libfs/export.c:513:
+	parent[0] = parent[1] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1153: FILE: fs/libfs/export.c:517:
+		if (fh_len > 2) parent[0] = fh[2];

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1154: FILE: fs/libfs/export.c:518:
+		if (fh_len > 3) parent[1] = fh[3];

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1169: FILE: fs/libfs/export.c:533:
+EXPORT_SYMBOL(export_op_default);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1170: FILE: fs/libfs/export.c:534:
+EXPORT_SYMBOL(find_exported_dentry);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1177: FILE: fs/libfs/simple.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#1189: FILE: fs/libfs/simple.c:13:
+	struct inode *inode = dentry->d_inode;
+	generic_fillattr(inode, stat);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1213: FILE: fs/libfs/simple.c:37:
+int simple_sync_file(struct file * file, struct dentry *dentry, int datasync)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1217: FILE: fs/libfs/simple.c:41:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: fs/libfs/simple.c:41:
+ $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1236: FILE: fs/libfs/simple.c:60:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#1257: FILE: fs/libfs/simple.c:81:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1283: FILE: fs/libfs/simple.c:107:
+int dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                  ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1283: FILE: fs/libfs/simple.c:107:
+int dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1283: FILE: fs/libfs/simple.c:107:
+int dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1291: FILE: fs/libfs/simple.c:115:
+	switch (i) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1298: FILE: fs/libfs/simple.c:122:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1305: FILE: fs/libfs/simple.c:129:
+			/* fallthrough */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1312: FILE: fs/libfs/simple.c:136:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1312: FILE: fs/libfs/simple.c:136:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1314: FILE: fs/libfs/simple.c:138:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#1319: FILE: fs/libfs/simple.c:143:
+				if (filldir(dirent, next->d_name.name, next->d_name.len, filp->f_pos, next->d_inode->i_ino, dt_type(next->d_inode)) < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1333: FILE: fs/libfs/simple.c:157:
+ssize_t generic_read_dir(struct file *filp, char *buf, size_t siz, loff_t *ppos)
                                       ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1338: FILE: fs/libfs/simple.c:162:
+struct file_operations simple_dir_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1346: FILE: fs/libfs/simple.c:170:
+struct inode_operations simple_dir_inode_operations = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1356: FILE: fs/libfs/simple.c:180:
+get_sb_pseudo(struct file_system_type *fs_type, char *name,
+	struct super_operations *ops, unsigned long magic)

CHECK:CAMELCASE: Avoid CamelCase: <Enomem>
#1375: FILE: fs/libfs/simple.c:199:
+		goto Enomem;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1376: FILE: fs/libfs/simple.c:200:
+	root->i_mode = S_IFDIR | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1377: FILE: fs/libfs/simple.c:201:
+	root->i_uid = root->i_gid = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1378: FILE: fs/libfs/simple.c:202:
+	root->i_atime = root->i_mtime = root->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1381: FILE: fs/libfs/simple.c:205:
+		iput(root);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: fs/libfs/simple.c:273:
+int simple_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: fs/libfs/simple.c:309:
+int simple_prepare_write(struct file *file, struct page *page,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1485: FILE: fs/libfs/simple.c:309:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1485: FILE: fs/libfs/simple.c:309:
+			unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1490: FILE: fs/libfs/simple.c:314:
+			void *kaddr = kmap_atomic(page, KM_USER0);
+			memset(kaddr, 0, from);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1501: FILE: fs/libfs/simple.c:325:
+			unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1501: FILE: fs/libfs/simple.c:325:
+			unsigned offset, unsigned to)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1515: FILE: fs/libfs/symlink.c:1:
+/* from fs/namei.c, written by Al Viro */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1521: FILE: fs/libfs/symlink.c:7:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1525: FILE: fs/libfs/symlink.c:11:
+	struct page * page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1527: FILE: fs/libfs/symlink.c:13:
+	struct address_space *mapping = dentry->d_inode->i_mapping;
+	page = read_cache_page(mapping, 0, (filler_t *)mapping->a_ops->readpage,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1528: FILE: fs/libfs/symlink.c:14:
+	page = read_cache_page(mapping, 0, (filler_t *)mapping->a_ops->readpage,
+				NULL);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1529: FILE: fs/libfs/symlink.c:15:
+	if (unlikely(IS_ERR(page)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1542: FILE: fs/libfs/symlink.c:28:
+	return (char*)page;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1549: FILE: fs/libfs/symlink.c:35:
+	int res = vfs_readlink(dentry,buffer,buflen,s);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1549: FILE: fs/libfs/symlink.c:35:
+	int res = vfs_readlink(dentry,buffer,buflen,s);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1549: FILE: fs/libfs/symlink.c:35:
+	int res = vfs_readlink(dentry,buffer,buflen,s);
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1550: FILE: fs/libfs/symlink.c:36:
+	int res = vfs_readlink(dentry,buffer,buflen,s);
+	if (likely(page != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#1550: FILE: fs/libfs/symlink.c:36:
+	if (likely(page != NULL)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1557: FILE: fs/libfs/symlink.c:43:
+int page_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1561: FILE: fs/libfs/symlink.c:47:
+	int res = vfs_follow_link(nd, s);
 	                          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1562: FILE: fs/libfs/symlink.c:48:
+	int res = vfs_follow_link(nd, s);
+	if (likely(page != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#1562: FILE: fs/libfs/symlink.c:48:
+	if (likely(page != NULL)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1578: FILE: fs/libfs/symlink.c:64:
+	err = mapping->a_ops->prepare_write(NULL, page, 0, len-1);
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1582: FILE: fs/libfs/symlink.c:68:
+	memcpy(kaddr, symname, len-1);
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1584: FILE: fs/libfs/symlink.c:70:
+	mapping->a_ops->commit_write(NULL, page, 0, len-1);
 	                                               ^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1611: FILE: fs/libfs/symlink.c:97:
+struct inode_operations page_symlink_inode_operations = {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1962: FILE: fs/namei.c:2096:
+int vfs_follow_link(struct nameidata *nd, const char *link)
                                       ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000380207.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 53 warnings, 45 checks, 1005 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000380207.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
