WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
diff -urN -X dontdiff 2.5.63-vanilla/fs/proc/proc_misc.c 2.5.63/fs/proc/proc_misc.c

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#41: FILE: fs/proc/proc_misc.c:303:
+extern struct seq_operations ksyms_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#41: FILE: fs/proc/proc_misc.c:303:
+extern struct seq_operations ksyms_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#44: FILE: fs/proc/proc_misc.c:306:
+        return seq_open(file, &ksyms_op);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#44: FILE: fs/proc/proc_misc.c:306:
+        return seq_open(file, &ksyms_op);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#46: FILE: fs/proc/proc_misc.c:308:
+}
+static struct file_operations proc_ksyms_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#46: FILE: fs/proc/proc_misc.c:308:
+static struct file_operations proc_ksyms_operations = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#47: FILE: fs/proc/proc_misc.c:309:
+    ^I.open^I^I= ksyms_open,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#47: FILE: fs/proc/proc_misc.c:309:
+    ^I.open^I^I= ksyms_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: fs/proc/proc_misc.c:309:
+    ^I.open^I^I= ksyms_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: kernel/module.c:1596:
+    struct kernel_symbol_group *group;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: kernel/module.c:1597:
+    int offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: kernel/module.c:1602:
+    ^Istruct ksym_position *kp = kmalloc(sizeof (*pos), GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: kernel/module.c:1602:
+    ^Istruct ksym_position *kp = kmalloc(sizeof (*pos), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/module.c:1602:
+    ^Istruct ksym_position *kp = kmalloc(sizeof (*pos), GFP_KERNEL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: kernel/module.c:1602:
+    	struct ksym_position *kp = kmalloc(sizeof (*pos), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: kernel/module.c:1614:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp"
#94: FILE: kernel/module.c:1615:
+	if (kp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: kernel/module.c:1616:
+^I    ^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: kernel/module.c:1616:
+^I    ^Ireturn NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: kernel/module.c:1618:
+^I    ^Iif ((n + ks->num_syms) > *pos) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: kernel/module.c:1618:
+^I    ^Iif ((n + ks->num_syms) > *pos) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: kernel/module.c:1619:
+^I^I    ^Ikp->group = ks;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#98: FILE: kernel/module.c:1619:
+^I^I    ^Ikp->group = ks;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: kernel/module.c:1630:
+    ^Istruct ksym_position *kp = (struct ksym_position *) p;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#109: FILE: kernel/module.c:1630:
+    ^Istruct ksym_position *kp = (struct ksym_position *) p;$

CHECK:SPACING: No space is necessary after a cast
#109: FILE: kernel/module.c:1630:
+    	struct ksym_position *kp = (struct ksym_position *) p;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: kernel/module.c:1630:
+    ^Istruct ksym_position *kp = (struct ksym_position *) p;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: kernel/module.c:1631:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: kernel/module.c:1631:
+    $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kp->offset'
#112: FILE: kernel/module.c:1633:
+	if (++(kp->offset) < kp->group->num_syms)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: kernel/module.c:1634:
+^I    ^Ireturn kp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: kernel/module.c:1634:
+^I    ^Ireturn kp;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: kernel/module.c:1638:
+		kp->group = list_entry(kp->group->list.next,
+				struct kernel_symbol_group, list);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#130: FILE: kernel/module.c:1651:
+	if (p)
+	    kfree(p);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#131: FILE: kernel/module.c:1652:
+	if (p)
+	    kfree(p);

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: kernel/module.c:1657:
+    ^Istruct ksym_position *kp = (struct ksym_position *) p;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: kernel/module.c:1657:
+    ^Istruct ksym_position *kp = (struct ksym_position *) p;$

CHECK:SPACING: No space is necessary after a cast
#136: FILE: kernel/module.c:1657:
+    	struct ksym_position *kp = (struct ksym_position *) p;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: kernel/module.c:1657:
+    ^Istruct ksym_position *kp = (struct ksym_position *) p;$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#143: FILE: kernel/module.c:1664:
+		seq_printf(s, " [GPLONLY]");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#144: FILE: kernel/module.c:1665:
+	seq_printf(s, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#148: FILE: kernel/module.c:1669:
+struct seq_operations ksyms_op = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: kernel/module.c:1670:
+    .start = m_ks_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: kernel/module.c:1671:
+    .next  = m_ks_next,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: kernel/module.c:1672:
+    .stop  = m_ks_stop,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: kernel/module.c:1673:
+    .show  = m_ks_show$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: kernel/module.c:1676:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 30 warnings, 7 checks, 118 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
