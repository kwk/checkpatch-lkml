WARNING:TYPO_SPELLING: 'approproate' may be misspelled - perhaps 'appropriate'?
#39: 
for review is approproate. If nothing major turns up, I'll make
              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
---------------------------------- cut here -----------------------------------

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: lib/prio_tree_init.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#77: FILE: lib/prio_tree_init.c:2:
+ * lib/prio_tree_init.c - priority search tree: initialization

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: lib/prio_tree_init.c:18:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: lib/prio_tree.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#109: FILE: lib/prio_tree.c:2:
+ * lib/prio_tree.c - priority search tree: common code

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: lib/prio_tree.c:40:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: lib/prio_tree.c:58:
+static struct prio_tree_node *prio_tree_expand(struct prio_tree_root *root,
+		struct prio_tree_node *node, unsigned long max_heap_index)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#178: FILE: lib/prio_tree.c:71:
+		if (first == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#195: FILE: lib/prio_tree.c:88:
+	if (first) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#198: FILE: lib/prio_tree.c:91:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: lib/prio_tree.c:107:
+static struct prio_tree_node *prio_tree_replace(struct prio_tree_root *root,
+		struct prio_tree_node *old, struct prio_tree_node *node)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: lib/prio_tree.c:112:
+		BUG_ON(root->prio_tree_node != old);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: lib/prio_tree.c:151:
+static struct prio_tree_node *prio_tree_insert(struct prio_tree_root *root,
+		struct prio_tree_node *node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: lib/prio_tree.c:161:
+	if (prio_tree_empty(root) ||
+			heap_index > prio_tree_maxindex(root->index_bits))

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: lib/prio_tree.c:173:
+                if (h_index < heap_index ||$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: lib/prio_tree.c:173:
+                if (h_index < heap_index ||$

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: lib/prio_tree.c:176:
+			struct prio_tree_node *tmp = node;
+			node = prio_tree_replace(root, cur, node);

CHECK:BRACES: braces {} should be used on all arms of this statement
#300: FILE: lib/prio_tree.c:193:
+			if (prio_tree_right_empty(cur)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#305: FILE: lib/prio_tree.c:198:
+				return res;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#305: FILE: lib/prio_tree.c:198:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#308: FILE: lib/prio_tree.c:201:
+			if (prio_tree_left_empty(cur)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#313: FILE: lib/prio_tree.c:206:
+				return res;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#313: FILE: lib/prio_tree.c:206:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: lib/prio_tree.c:218:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: lib/prio_tree.c:228:
+static void prio_tree_remove(struct prio_tree_root *root,
+		struct prio_tree_node *node)

CHECK:BRACES: braces {} should be used on all arms of this statement
#343: FILE: lib/prio_tree.c:236:
+		if (!prio_tree_left_empty(cur))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#345: FILE: lib/prio_tree.c:238:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#350: FILE: lib/prio_tree.c:243:
+		if (!prio_tree_right_empty(cur))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#352: FILE: lib/prio_tree.c:245:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#365: FILE: lib/prio_tree.c:258:
+		BUG_ON(root->prio_tree_node != cur);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: lib/prio_tree.c:281:
+static struct prio_tree_node *prio_tree_left(struct prio_tree_iter *iter,
+		unsigned long *r_index, unsigned long *h_index)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#403: FILE: lib/prio_tree.c:296:
+				BUG_ON(!prio_tree_left_empty(iter->cur));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: lib/prio_tree.c:297:
+				BUG_ON(!prio_tree_right_empty(iter->cur));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: lib/prio_tree.c:312:
+static struct prio_tree_node *prio_tree_right(struct prio_tree_iter *iter,
+		unsigned long *r_index, unsigned long *h_index)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: lib/prio_tree.c:338:
+				BUG_ON(!prio_tree_left_empty(iter->cur));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: lib/prio_tree.c:339:
+				BUG_ON(!prio_tree_right_empty(iter->cur));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: lib/prio_tree.c:370:
+static inline int overlap(struct prio_tree_iter *iter,
+		unsigned long r_index, unsigned long h_index)

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: lib/prio_tree.c:431:
+^I    ^Iwhile (!prio_tree_root(iter->cur) &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#538: FILE: lib/prio_tree.c:431:
+^I    ^Iwhile (!prio_tree_root(iter->cur) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: lib/prio_tree.c:432:
+	    	while (!prio_tree_root(iter->cur) &&
+				iter->cur->parent->right == iter->cur)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231112.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 18 warnings, 22 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231112.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
