WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
--- linux-2.6.12-rc5-git7/drivers/block/ub.c	2005-06-02 09:22:39.000000000 -0700

CHECK:CAMELCASE: Avoid CamelCase: <Lun>
#77: FILE: drivers/block/ub.c:74:
+	u8	Lun;			/* LUN */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: drivers/block/ub.c:286:
+^Istruct ub_capacity capacity; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: drivers/block/ub.c:331:
+static int ub_cmd_build_block(struct ub_dev *sc, struct ub_lun *lun,
+    struct ub_scsi_cmd *cmd, struct request *rq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/block/ub.c:331:
+    struct ub_scsi_cmd *cmd, struct request *rq);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: drivers/block/ub.c:350:
+static int ub_sync_read_cap(struct ub_dev *sc, struct ub_lun *lun,
+    struct ub_capacity *ret);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: drivers/block/ub.c:350:
+    struct ub_capacity *ret);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#210: FILE: drivers/block/ub.c:457:
+	list_for_each (p, &sc->luns) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#247: FILE: drivers/block/ub.c:572:
+		if ((q = lun->disk->queue) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#300: FILE: drivers/block/ub.c:615:
+		printk(KERN_WARNING "%s: releasing a free cmd\n", lun->name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#340: FILE: drivers/block/ub.c:702:
+	if ((cmd = ub_get_cmd(lun)) == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/block/ub.c:734:
+static int ub_cmd_build_block(struct ub_dev *sc, struct ub_lun *lun,
+    struct ub_scsi_cmd *cmd, struct request *rq)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: drivers/block/ub.c:734:
+    struct ub_scsi_cmd *cmd, struct request *rq)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmd->lun"
#436: FILE: drivers/block/ub.c:936:
+	bcb->Lun = (cmd->lun != NULL) ? cmd->lun->num : 0;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#447: FILE: drivers/block/ub.c:1051:
+			printk(KERN_NOTICE "%s: stall on control pipe\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: drivers/block/ub.c:1052:
+			printk(KERN_NOTICE "%s: stall on control pipe\n",
+			    sc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#459: FILE: drivers/block/ub.c:1073:
+			printk(KERN_NOTICE "%s: stall on control pipe\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/block/ub.c:1074:
+			printk(KERN_NOTICE "%s: stall on control pipe\n",
+			    sc->name);

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: drivers/block/ub.c:1093:
 				printk(KERN_NOTICE "%s: "
+				    "unable to submit clear (%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#483: FILE: drivers/block/ub.c:1153:
 				printk(KERN_NOTICE "%s: "
+				    "unable to submit clear (%d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#495: FILE: drivers/block/ub.c:1185:
 				printk(KERN_NOTICE "%s: "
+				    "unable to submit clear (%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#507: FILE: drivers/block/ub.c:1208:
+				printk(KERN_NOTICE "%s: unable to get CSW\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: drivers/block/ub.c:1209:
+				printk(KERN_NOTICE "%s: unable to get CSW\n",
+				    sc->name);

WARNING:SPLIT_STRING: quoted string split across lines
#520: FILE: drivers/block/ub.c:1250:
 				printk(KERN_NOTICE "%s: "
+				    "tag mismatch orig 0x%x reply 0x%x\n",

CHECK:CAMELCASE: Avoid CamelCase: <Tag>
#521: FILE: drivers/block/ub.c:1251:
+				    sc->name, cmd->tag, bcs->Tag);

WARNING:SPLIT_STRING: quoted string split across lines
#531: FILE: drivers/block/ub.c:1285:
 		printk(KERN_WARNING "%s: "
+		    "wrong command state %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#558: FILE: drivers/block/ub.c:1452:
 		printk(KERN_WARNING "%s: "
+		    "sense done for wrong command 0x%x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#566: FILE: drivers/block/ub.c:1458:
 		printk(KERN_WARNING "%s: "
+		    "sense done with bad cmd state %d\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#662: FILE: drivers/block/ub.c:1513:
+	if ((lun = disk->private_data) == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: drivers/block/ub.c:1723:
+static int ub_sync_read_cap(struct ub_dev *sc, struct ub_lun *lun,
+    struct ub_capacity *ret)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: drivers/block/ub.c:1723:
+    struct ub_capacity *ret)$

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#811: FILE: drivers/block/ub.c:1822:
+	int ifnum = sc->intf->cur_altsetting->desc.bInterfaceNumber;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#823: FILE: drivers/block/ub.c:1834:
+	if ((p = kmalloc(ALLOC_SIZE, GFP_KERNEL)) == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#828: FILE: drivers/block/ub.c:1839:
+	cr->bRequestType = USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE;

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#829: FILE: drivers/block/ub.c:1840:
+	cr->bRequest = US_BULK_GET_MAX_LUN;

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#830: FILE: drivers/block/ub.c:1841:
+	cr->wValue = cpu_to_le16(0);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#831: FILE: drivers/block/ub.c:1842:
+	cr->wIndex = cpu_to_le16(ifnum);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#832: FILE: drivers/block/ub.c:1843:
+	cr->wLength = cpu_to_le16(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: drivers/block/ub.c:1846:
+	usb_fill_control_urb(&sc->work_urb, sc->dev, sc->recv_ctrl_pipe,
+	    (unsigned char*) cr, p, 1, ub_probe_urb_complete, &compl);

CHECK:SPACING: No space is necessary after a cast
#835: FILE: drivers/block/ub.c:1846:
+	    (unsigned char*) cr, p, 1, ub_probe_urb_complete, &compl);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#835: FILE: drivers/block/ub.c:1846:
+	    (unsigned char*) cr, p, 1, ub_probe_urb_complete, &compl);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#841: FILE: drivers/block/ub.c:1852:
+	if ((rc = usb_submit_urb(&sc->work_urb, GFP_KERNEL)) != 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#843: FILE: drivers/block/ub.c:1854:
+			printk("%s: Stall at GetMaxLUN, using 1 LUN\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#844: FILE: drivers/block/ub.c:1855:
+			printk("%s: Stall at GetMaxLUN, using 1 LUN\n",
+			     sc->name); /* P3 */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#846: FILE: drivers/block/ub.c:1857:
+			printk(KERN_WARNING

CHECK:SPACING: No space is necessary after a cast
#855: FILE: drivers/block/ub.c:1866:
+	timer.data = (unsigned long) &compl;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#865: FILE: drivers/block/ub.c:1876:
+		printk("%s: GetMaxLUN returned %d bytes\n", sc->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/block/ub.c:1877:
+		printk("%s: GetMaxLUN returned %d bytes\n", sc->name,
+		    sc->work_urb.actual_length); /* P3 */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#869: FILE: drivers/block/ub.c:1880:
+		if ((nluns = *p) == 55) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: drivers/block/ub.c:1883:
+  ^I^I^I/* GetMaxLUN returns the maximum LUN number */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#872: FILE: drivers/block/ub.c:1883:
+  ^I^I^I/* GetMaxLUN returns the maximum LUN number */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: drivers/block/ub.c:1883:
+  ^I^I^I/* GetMaxLUN returns the maximum LUN number */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#877: FILE: drivers/block/ub.c:1888:
+		printk("%s: GetMaxLUN returned %d, using %d LUNs\n", sc->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: drivers/block/ub.c:1889:
+		printk("%s: GetMaxLUN returned %d, using %d LUNs\n", sc->name,
+		    *p, nluns); /* P3 */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#900: FILE: drivers/block/ub.c:1987:
+		printk(KERN_NOTICE "%s: failed endpoint check\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: drivers/block/ub.c:1988:
+		printk(KERN_NOTICE "%s: failed endpoint check\n",
+		    sc->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: drivers/block/ub.c:2040:
+	snprintf(sc->name, 12, DRV_NAME "(%d.%d)",
+	    sc->dev->bus->busnum, sc->dev->devnum);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#951: FILE: drivers/block/ub.c:2079:
+		if ((rc = ub_sync_tur(sc, NULL)) <= 0) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#951: FILE: drivers/block/ub.c:2079:
+		if ((rc = ub_sync_tur(sc, NULL)) <= 0) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#961: FILE: drivers/block/ub.c:2086:
+		if ((rc = ub_sync_getmaxlun(sc)) < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#962: FILE: drivers/block/ub.c:2087:
+^I^I^I/* $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#985: FILE: drivers/block/ub.c:2106:
+	for (i = 0; i < nluns; i++) {
+		ub_probe_lun(sc, i);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1008: FILE: drivers/block/ub.c:2129:
+	if ((lun = kmalloc(sizeof(struct ub_lun), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*lun)...) over kmalloc(sizeof(struct ub_lun)...)
#1008: FILE: drivers/block/ub.c:2129:
+	if ((lun = kmalloc(sizeof(struct ub_lun), GFP_KERNEL)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1014: FILE: drivers/block/ub.c:2135:
+	if ((lun->id = ub_id_get()) == -1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: drivers/block/ub.c:2142:
+	snprintf(lun->name, 16, DRV_NAME "%c(%d.%d.%d)",
+	    lun->id + 'a', sc->dev->bus->busnum, sc->dev->devnum, lun->num);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1129: FILE: drivers/block/ub.c:2251:
+	list_for_each (p, &sc->luns) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1150: FILE: drivers/block/ub.c:2313:
+	/* P3 */ printk("ub: sizeof ub_scsi_cmd %zu ub_dev %zu ub_lun %zu\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 27 warnings, 26 checks, 1060 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
