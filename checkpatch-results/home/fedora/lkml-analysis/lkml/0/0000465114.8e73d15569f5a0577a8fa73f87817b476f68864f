WARNING:TYPO_SPELLING: 'Tought' may be misspelled - perhaps 'Thought'?
#29: 
Tought this patch was done against 2.5.8-pre2 it still
^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'applyes' may be misspelled - perhaps 'applies'?
#30: 
applyes cleanly to 2.5.8-pre3
^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
- Integrate the TCQ stuff from Jens Axboe. Deal with the conflicts, apply some

WARNING:TYPO_SPELLING: 'maxium' may be misspelled - perhaps 'maximum'?
#89: FILE: drivers/ide/Config.help:764:
+  and 32 is valid, with 32 being the maxium that the hardware supports.
                                      ^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#143: FILE: drivers/ide/hpt366.c:816:
+			printk("%s: (ide_dma_lostirq)  reg50h=0x%02x, reg52h=0x%02x, reg5ah=0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: drivers/ide/hpt366.c:817:
+			printk("%s: (ide_dma_lostirq)  reg50h=0x%02x, reg52h=0x%02x, reg5ah=0x%02x\n",
+				drive->name, reg50h, reg52h, reg5ah);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#165: FILE: drivers/ide/icside.c:469:
+		printk("icside_dmaproc: unsupported function: %d\n", func);

WARNING:TYPO_SPELLING: 'correspnding' may be misspelled - perhaps 'corresponding'?
#238: FILE: drivers/ide/ide-disk.c:92:
+ * Determine the apriopriate hardware command correspnding to the action in
                                               ^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#245: FILE: drivers/ide/ide-disk.c:99:
+	 * overoptimization. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#276: FILE: drivers/ide/ide-disk.c:115:
+		if (drive->using_dma) {
[...]
+		} else if (drive->mult_count)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#291: FILE: drivers/ide/ide-disk.c:126:
+			if (drive->using_dma) {
[...]
+			} else if (drive->mult_count)
[...]
 			else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#307: FILE: drivers/ide/ide-disk.c:136:
+			if (drive->using_dma) {
[...]
+			} else if (drive->mult_count)
[...]
 			else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#354: FILE: drivers/ide/ide-disk.c:168:
+	if (ar->ar_flags & ATA_AR_QUEUED) {
[...]
-
[...]

CHECK:BRACES: Unbalanced braces around else statement
#370: FILE: drivers/ide/ide-disk.c:177:
+	} else

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#375: FILE: drivers/ide/ide-disk.c:182:
+	args->taskfile.high_cylinder = (cyl>>8);
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#387: FILE: drivers/ide/ide-disk.c:192:
+	printk("CHS=%d/%d/%d, ", cyl, head, sect);

CHECK:BRACES: braces {} should be used on all arms of this statement
#423: FILE: drivers/ide/ide-disk.c:215:
+	if (ar->ar_flags & ATA_AR_QUEUED) {
[...]
-
[...]

CHECK:BRACES: Unbalanced braces around else statement
#441: FILE: drivers/ide/ide-disk.c:224:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#459: FILE: drivers/ide/ide-disk.c:239:
+	printk("sector=%lx, sectors=%ld, ", block, rq->nr_sectors);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#545: FILE: drivers/ide/ide-disk.c:292:
+	args->hobfile.control = (drive->ctl|0x80);
 	                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#554: FILE: drivers/ide/ide-disk.c:298:
+	printk("sector=%lx, sectors=%ld, ", block, rq->nr_sectors);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: drivers/ide/ide-disk.c:360:
+		BUG_ON(drive->tcq->active_tag != -1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#653: FILE: drivers/ide/ide-disk.c:867:
+	ide_drive_t	*drive = (ide_drive_t *) data;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#666: FILE: drivers/ide/ide-disk.c:880:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: drivers/ide/ide-disk.c:880:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#667: FILE: drivers/ide/ide-disk.c:881:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->tcq->max_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: drivers/ide/ide-disk.c:881:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->tcq->max_depth);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#668: FILE: drivers/ide/ide-disk.c:882:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->tcq->max_last_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#668: FILE: drivers/ide/ide-disk.c:882:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->tcq->max_last_depth);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#669: FILE: drivers/ide/ide-disk.c:883:
+	len += sprintf(out+len, "Current depth:\t\t%d\n", drive->tcq->queued);
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#671: FILE: drivers/ide/ide-disk.c:885:
+	len += sprintf(out+len, "Active tags:\t\t[ ");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#679: FILE: drivers/ide/ide-disk.c:893:
+		len += sprintf(out+len, "%d, ", i);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#684: FILE: drivers/ide/ide-disk.c:898:
+	len += sprintf(out+len, "]\n");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#687: FILE: drivers/ide/ide-disk.c:901:
+		len += sprintf(out+len, "pending request and queue count mismatch (%d)\n", cmds);
 		                  ^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#690: FILE: drivers/ide/ide-disk.c:904:
+		len += sprintf(out+len, "tag masks differ (counted %lx != %lx\n", tag_mask, drive->tcq->tag_mask);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#690: FILE: drivers/ide/ide-disk.c:904:
+		len += sprintf(out+len, "tag masks differ (counted %lx != %lx\n", tag_mask, drive->tcq->tag_mask);
 		                  ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#692: FILE: drivers/ide/ide-disk.c:906:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", test_bit(IDE_DMA, &HWGROUP(drive)->flags) ? "" : "not ");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#692: FILE: drivers/ide/ide-disk.c:906:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", test_bit(IDE_DMA, &HWGROUP(drive)->flags) ? "" : "not ");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#695: FILE: drivers/ide/ide-disk.c:909:
+		len += sprintf(out+len, "Oldest command:\t\t%lu\n", cur_jif - max_jif);
 		                  ^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#697: FILE: drivers/ide/ide-disk.c:911:
+	len += sprintf(out+len, "immed rel %d, immed comp %d\n", drive->tcq->immed_rel, drive->tcq->immed_comp);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#697: FILE: drivers/ide/ide-disk.c:911:
+	len += sprintf(out+len, "immed rel %d, immed comp %d\n", drive->tcq->immed_rel, drive->tcq->immed_comp);
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: drivers/ide/ide-disk.c:926:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,	NULL },
 	        		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#712: FILE: drivers/ide/ide-disk.c:926:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,	NULL },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 287 exceeds 100 columns
#772: FILE: drivers/ide/ide-disk.c:1056:
+	ide_add_setting(drive,	"using_tcq",		SETTING_RW,					HDIO_GET_QDMA,		HDIO_SET_QDMA,		TYPE_BYTE,	0,	IDE_MAX_TAG,			1,		1,		&drive->using_tcq,		set_using_tcq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#840: FILE: drivers/ide/ide-dma.c:212:
+		printk("%s: dma_intr: bad DMA status (dma_stat=%x)\n",

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#863: FILE: drivers/ide/ide-dma.c:229:
+		printk("%s: received %d phys segments, build %d\n", __FILE__, rq->nr_phys_segments, ar->ar_sg_nents);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#863: FILE: drivers/ide/ide-dma.c:229:
+		printk("%s: received %d phys segments, build %d\n", __FILE__, rq->nr_phys_segments, ar->ar_sg_nents);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#866: FILE: drivers/ide/ide-dma.c:232:
+		printk("%s: zero segments in request\n", __FILE__);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#968: FILE: drivers/ide/ide-dma.c:329:
+				printk("count %d, sg_nents %d, cur_len %d, cur_addr %u\n", count, ar->ar_sg_nents, cur_len, cur_addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#968: FILE: drivers/ide/ide-dma.c:329:
+				printk("count %d, sg_nents %d, cur_len %d, cur_addr %u\n", count, ar->ar_sg_nents, cur_len, cur_addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#977: FILE: drivers/ide/ide-dma.c:340:
+^I^I        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1032: FILE: drivers/ide/ide-dma.c:555:
+	if (!(count = ide_build_dmatable(drive, ar->ar_rq, func)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1038: FILE: drivers/ide/ide-dma.c:561:
+	outb(inb(dma_base + 2) | 6, dma_base+2);/* clear INTR & ERROR flags */
 	                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1074: FILE: drivers/ide/ide-dma.c:608:
+			printk("ide_dma_begin: from %p\n", __builtin_return_address(0));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1077: FILE: drivers/ide/ide-dma.c:611:
+				BUG();

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1083: FILE: drivers/ide/ide-dma.c:617:
+			outb(inb(dma_base)|1, dma_base);		/* start DMA */
 			                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#1118: FILE: drivers/ide/ide-dma.c:641:
+			if ((ar->ar_rq->flags & REQ_DRIVE_TASKFILE) &&
 			    (drive->addressing == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1140: FILE: drivers/ide/ide-dma.c:653:
+			printk("ide_dma_end: from %p\n", __builtin_return_address(0));

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1143: FILE: drivers/ide/ide-dma.c:656:
+				printk("ide_dma_end: dma not going? %p\n", __builtin_return_address(0));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1143: FILE: drivers/ide/ide-dma.c:656:
+				printk("ide_dma_end: dma not going? %p\n", __builtin_return_address(0));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1149: FILE: drivers/ide/ide-dma.c:661:
+			dma_stat = inb(dma_base+2);	/* get DMA status */
 			                       ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1162: FILE: drivers/ide/ide-dma.c:682:
+			printk(KERN_ERR "%s: DMA timeout occured!\n", __FUNCTION__);
 			                                 ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1162: FILE: drivers/ide/ide-dma.c:682:
+			printk(KERN_ERR "%s: DMA timeout occured!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1162: FILE: drivers/ide/ide-dma.c:682:
+			printk(KERN_ERR "%s: DMA timeout occured!\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1167: FILE: drivers/ide/ide-dma.c:686:
+			printk(KERN_ERR "%s: chipset supported func only: %d\n", __FUNCTION__, func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1167: FILE: drivers/ide/ide-dma.c:686:
+			printk(KERN_ERR "%s: chipset supported func only: %d\n", __FUNCTION__, func);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1167: FILE: drivers/ide/ide-dma.c:686:
+			printk(KERN_ERR "%s: chipset supported func only: %d\n", __FUNCTION__, func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1171: FILE: drivers/ide/ide-dma.c:689:
+			printk(KERN_ERR "%s: unsupported func: %d\n", __FUNCTION__, func);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1171: FILE: drivers/ide/ide-dma.c:689:
+			printk(KERN_ERR "%s: unsupported func: %d\n", __FUNCTION__, func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1308: FILE: drivers/ide/ide-pmac.c:1462:
+		printk(KERN_WARNING "ide_pmac_dmaproc: chipset supported func only: %d\n", func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1312: FILE: drivers/ide/ide-pmac.c:1465:
+		printk(KERN_WARNING "ide_pmac_dmaproc: unsupported func: %d\n", func);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1387: FILE: drivers/ide/ide-taskfile.c:449:
+			if (command == WIN_READDMA_QUEUED
+			    || command == WIN_READDMA_QUEUED_EXT

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1388: FILE: drivers/ide/ide-taskfile.c:450:
+			    || command == WIN_READDMA_QUEUED_EXT
+			    || command == WIN_WRITEDMA_QUEUED

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1389: FILE: drivers/ide/ide-taskfile.c:451:
+			    || command == WIN_WRITEDMA_QUEUED
+			    || command == WIN_READDMA_QUEUED_EXT)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1436: FILE: drivers/ide/ide-taskfile.c:675:
+		DTF("Multiread: %p, nsect: %d , rq->current_nr_sectors: %d\n",
 			pBuf, nsect, rq->current_nr_sectors);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1506: FILE: drivers/ide/ide-tcq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1519: FILE: drivers/ide/ide-tcq.c:14:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1520: FILE: drivers/ide/ide-tcq.c:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#1534: FILE: drivers/ide/ide-tcq.c:29:
+#include <asm/delay.h>

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1539: FILE: drivers/ide/ide-tcq.c:34:
+#if 0

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1558: FILE: drivers/ide/ide-tcq.c:53:
+ide_startstop_t ide_dmaq_intr(ide_drive_t *drive);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1582: FILE: drivers/ide/ide-tcq.c:77:
+	printk("%s: invalidating pending queue\n", drive->name);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1622: FILE: drivers/ide/ide-tcq.c:117:
+	ar->ar_rq->rq_dev = mk_kdev(drive->channel->major, (drive->select.b.unit)<<PARTN_BITS);
 	                                                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1637: FILE: drivers/ide/ide-tcq.c:132:
+	printk("ide_tcq_invalidate_queue: done\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_invalidate_queue', this function's name, in a string
#1637: FILE: drivers/ide/ide-tcq.c:132:
+	printk("ide_tcq_invalidate_queue: done\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#1642: FILE: drivers/ide/ide-tcq.c:137:
+	ide_hwgroup_t *hwgroup = (ide_hwgroup_t *) data;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1646: FILE: drivers/ide/ide-tcq.c:141:
+	printk("ide_tcq_intr_timeout: timeout waiting for interrupt...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1646: FILE: drivers/ide/ide-tcq.c:141:
+	printk("ide_tcq_intr_timeout: timeout waiting for interrupt...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1651: FILE: drivers/ide/ide-tcq.c:146:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1651: FILE: drivers/ide/ide-tcq.c:146:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#1652: FILE: drivers/ide/ide-tcq.c:147:
+	if (hwgroup->handler == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1653: FILE: drivers/ide/ide-tcq.c:148:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1653: FILE: drivers/ide/ide-tcq.c:148:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1654: FILE: drivers/ide/ide-tcq.c:149:
+	if ((drive = hwgroup->drive) == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1655: FILE: drivers/ide/ide-tcq.c:150:
+		printk("ide_tcq_intr_timeout: missing drive!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1655: FILE: drivers/ide/ide-tcq.c:150:
+		printk("ide_tcq_intr_timeout: missing drive!\n");

CHECK:SPACING: No space is necessary after a cast
#1674: FILE: drivers/ide/ide-tcq.c:169:
+	hwgroup->timer.data = (unsigned long) hwgroup;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1717: FILE: drivers/ide/ide-tcq.c:212:
+		printk("ide_service: DMA in progress\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1717: FILE: drivers/ide/ide-tcq.c:212:
+		printk("ide_service: DMA in progress\n");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1724: FILE: drivers/ide/ide-tcq.c:219:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1735: FILE: drivers/ide/ide-tcq.c:230:
+		printk("ide_service: BUSY clear took too long\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1735: FILE: drivers/ide/ide-tcq.c:230:
+		printk("ide_service: BUSY clear took too long\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1746: FILE: drivers/ide/ide-tcq.c:241:
+		printk("%s: error SERVICING drive (%x)\n", drive->name, stat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1754: FILE: drivers/ide/ide-tcq.c:249:
+	if ((feat = GET_FEAT()) & NSEC_REL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1755: FILE: drivers/ide/ide-tcq.c:250:
+		printk("%s: release in service\n", drive->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1766: FILE: drivers/ide/ide-tcq.c:261:
+	TCQ_PRINTK("ide_service: stat %x, feat %x\n", stat, feat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1768: FILE: drivers/ide/ide-tcq.c:263:
+	if ((ar = IDE_CUR_TAG(drive)) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1769: FILE: drivers/ide/ide-tcq.c:264:
+		printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1769: FILE: drivers/ide/ide-tcq.c:264:
+		printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1778: FILE: drivers/ide/ide-tcq.c:273:
+		TCQ_PRINTK("ide_service: starting READ %x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1781: FILE: drivers/ide/ide-tcq.c:276:
+		TCQ_PRINTK("ide_service: starting WRITE %x\n", stat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1798: FILE: drivers/ide/ide-tcq.c:293:
+	if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_end', this function's name, in a string
#1817: FILE: drivers/ide/ide-tcq.c:312:
+		TCQ_PRINTK("ide_tcq_end: serv stat=%x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_end', this function's name, in a string
#1821: FILE: drivers/ide/ide-tcq.c:316:
+	TCQ_PRINTK("ide_tcq_end: stat=%x, feat=%x\n", stat, GET_FEAT());

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1830: FILE: drivers/ide/ide-tcq.c:325:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1834: FILE: drivers/ide/ide-tcq.c:329:
+		printk("%s: C/D | I/O not set\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1848: FILE: drivers/ide/ide-tcq.c:343:
+		printk("ide_dmaq_intr: %s: error status %x\n", drive->name, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1855: FILE: drivers/ide/ide-tcq.c:350:
+		printk("%s: bad DMA status (dma_stat=%x)\n", drive->name, dma_stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1878: FILE: drivers/ide/ide-tcq.c:373:
+	TCQ_PRINTK("ide_dmaq_intr: stat=%x, tag %d\n", stat, drive->tcq->active_tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1891: FILE: drivers/ide/ide-tcq.c:386:
+		TCQ_PRINTK("ide_dmaq_intr: SERV (stat=%x)\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1895: FILE: drivers/ide/ide-tcq.c:390:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1895: FILE: drivers/ide/ide-tcq.c:390:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1914: FILE: drivers/ide/ide-tcq.c:409:
+		printk("%s: queued feature set not supported\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1921: FILE: drivers/ide/ide-tcq.c:416:
+		printk("%s: failed to enable write cache\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1932: FILE: drivers/ide/ide-tcq.c:427:
+		printk("%s: disabling release interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1943: FILE: drivers/ide/ide-tcq.c:438:
+		printk("%s: enabling service interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1960: FILE: drivers/ide/ide-tcq.c:455:
+		printk("%s: TCQ disabled\n", drive->name);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1979: FILE: drivers/ide/ide-tcq.c:474:
+	printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1979: FILE: drivers/ide/ide-tcq.c:474:
+	printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1993: FILE: drivers/ide/ide-tcq.c:488:
+	switch (func) {
[...]
+		case ide_dma_read_queued:
[...]
+		case ide_dma_write_queued:
[...]
+		case ide_dma_queued_start:
[...]
+		case ide_dma_queued_off:
[...]
+		case ide_dma_queued_on:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2002: FILE: drivers/ide/ide-tcq.c:497:
+			BUG_ON(drive->tcq->active_tag == -1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2005: FILE: drivers/ide/ide-tcq.c:500:
+				printk("queued_rw: IDE_BUSY not set\n");

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2007: FILE: drivers/ide/ide-tcq.c:502:
+			if (ide_wait_stat(&startstop, drive, READY_STAT | DRQ_STAT, BUSY_STAT, WAIT_READY)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2008: FILE: drivers/ide/ide-tcq.c:503:
+				printk("%s: timeout waiting for data phase\n", drive->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2022: FILE: drivers/ide/ide-tcq.c:517:
+			BUG_ON(drive->tcq->active_tag == -1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2034: FILE: drivers/ide/ide-tcq.c:529:
+				printk("ide_dma_queued_start: abort (stat=%x)\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2041: FILE: drivers/ide/ide-tcq.c:536:
+				printk("ide_dma_queued_start: abort (stat=%x)\n", stat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2045: FILE: drivers/ide/ide-tcq.c:540:
+			if ((feat = GET_FEAT()) & NSEC_REL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2050: FILE: drivers/ide/ide-tcq.c:545:
+				if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2059: FILE: drivers/ide/ide-tcq.c:554:
+			if (ide_wait_stat(&startstop, drive, READY_STAT | DRQ_STAT, BUSY_STAT, WAIT_READY)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2060: FILE: drivers/ide/ide-tcq.c:555:
+				printk("%s: timeout waiting for data phase\n", drive->name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2087: FILE: drivers/ide/ide-tcq.c:582:
+int ide_build_sglist (struct ata_channel *hwif, struct request *rq);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2107: FILE: drivers/ide/ide.c:371:
+void ide_end_queued_request(ide_drive_t *drive, int uptodate, struct request *rq)
                                                     ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2111: FILE: drivers/ide/ide.c:375:
+	BUG_ON(!(rq->flags & REQ_STARTED));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2112: FILE: drivers/ide/ide.c:376:
+	BUG_ON(!rq->special);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2114: FILE: drivers/ide/ide.c:378:
+	if (!end_that_request_first(rq, uptodate, rq->hard_nr_sectors)) {
 	                                ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2153: FILE: drivers/ide/ide.c:452:
+		printk("%s: ide_set_handler: handler not null; old=%p, new=%p, from %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2154: FILE: drivers/ide/ide.c:453:
+		printk("%s: ide_set_handler: handler not null; old=%p, new=%p, from %p\n",
+			drive->name, hwgroup->handler, handler, __builtin_return_address(0));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2168: FILE: drivers/ide/ide.c:773:
+			printk(KERN_INFO "%s: NOP completed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2168: FILE: drivers/ide/ide.c:773:
+			printk(KERN_INFO "%s: NOP completed\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2198: FILE: drivers/ide/ide.c:1105:
+		printk("start_request: auch, DMA in progress 1\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2201: FILE: drivers/ide/ide.c:1108:
+		printk("start_request: auch, DMA in progress 2\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2232: FILE: drivers/ide/ide.c:1370:
+			printk("ide_do_request: DMA in progress...\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2244: FILE: drivers/ide/ide.c:1382:
+			BUG_ON(!drive->using_tcq);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2276: FILE: drivers/ide/ide.c:1416:
+		if (startstop == ide_released)
[...]
+		else if (startstop == ide_stopped) {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2280: FILE: drivers/ide/ide.c:1420:
+				printk("2nd illegal clear\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2321: FILE: drivers/ide/ide.c:1477:
+	printk("%s: timeout waiting for DMA", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2323: FILE: drivers/ide/ide.c:1479:
+		printk(" queued, active tag %d", drive->tcq->active_tag);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2324: FILE: drivers/ide/ide.c:1480:
+	printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#2361: FILE: drivers/ide/ide.c:1746:
+		if (hwgroup->handler == NULL) { /* paranoia */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2364: FILE: drivers/ide/ide.c:1749:
+				printk("ide_intr: illegal clear\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2390: FILE: drivers/ide/ide.c:2706:
+	struct pci_dev *pdev= drive->channel->pci_dev;
 	                    ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2398: FILE: drivers/ide/ide.c:2714:
+		pci_free_consistent(pdev, PRD_SEGMENTS * PRD_BYTES, ar->ar_dmatable_cpu, ar->ar_dmatable);

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2405: FILE: drivers/ide/ide.c:2721:
+	struct pci_dev *pdev= drive->channel->pci_dev;
 	                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2423: FILE: drivers/ide/ide.c:2739:
+		 * many places in kernel. */

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2431: FILE: drivers/ide/ide.c:2747:
+		ar->ar_sg_table = kmalloc(PRD_SEGMENTS * sizeof(struct scatterlist), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2437: FILE: drivers/ide/ide.c:2753:
+		ar->ar_dmatable_cpu = pci_alloc_consistent(pdev, PRD_SEGMENTS * PRD_BYTES, &ar->ar_dmatable);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2444: FILE: drivers/ide/ide.c:2760:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2444: FILE: drivers/ide/ide.c:2760:
+
+		

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#2493: FILE: drivers/ide/pdc202xx.c:1062:
+		 * we cannot support queued operations on promise, so fail to
+		 * to enable it...

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2549: FILE: include/linux/ide.h:279:
+typedef struct ide_tag_info_s {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'drive' - possible side-effects?
#2571: FILE: include/linux/ide.h:301:
+#define IDE_CUR_TAG(drive)	(IDE_GET_AR((drive), (drive)->tcq->active_tag))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'drive' - possible side-effects?
#2574: FILE: include/linux/ide.h:304:
+#define IDE_CUR_AR(drive)	\
+	((drive)->using_tcq ? IDE_CUR_TAG((drive)) : HWGROUP((drive))->rq->special)

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#2602: FILE: include/linux/ide.h:389:
+	char		name[6];	/* drive name, such as "hda" */
 	    		        	                        ^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                                       ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2673: FILE: include/linux/ide.h:655:
+# define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2681: FILE: include/linux/ide.h:719:
+extern void ide_end_queued_request(ide_drive_t *drive, int, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2681: FILE: include/linux/ide.h:719:
+extern void ide_end_queued_request(ide_drive_t *drive, int, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#2681: FILE: include/linux/ide.h:719:
+extern void ide_end_queued_request(ide_drive_t *drive, int, struct request *);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2708: FILE: include/linux/ide.h:760:
+int ide_wait_stat(ide_startstop_t *startstop, ide_drive_t *drive, byte good, byte bad, unsigned long timeout);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#2718: FILE: include/linux/ide.h:768:
+int ide_xlate_1024(kdev_t, int, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2718: FILE: include/linux/ide.h:768:
+int ide_xlate_1024(kdev_t, int, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2718: FILE: include/linux/ide.h:768:
+int ide_xlate_1024(kdev_t, int, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2718: FILE: include/linux/ide.h:768:
+int ide_xlate_1024(kdev_t, int, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2731: FILE: include/linux/ide.h:779:
+ide_startstop_t restart_request(ide_drive_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2737: FILE: include/linux/ide.h:784:
+extern void ide_init_drive_cmd(struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2738: FILE: include/linux/ide.h:785:
+extern void init_taskfile_request(struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2797: FILE: include/linux/ide.h:953:
+extern void __init ide_scan_pcibus(int scan_direction);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2805: FILE: include/linux/ide.h:956:
+extern int ide_build_dmatable(ide_drive_t *drive, struct request *rq, ide_dma_action_t func);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2806: FILE: include/linux/ide.h:957:
+extern void ide_destroy_dmatable(ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2807: FILE: include/linux/ide.h:958:
+extern int ide_start_dma(struct ata_channel *, ide_drive_t *, ide_dma_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_channel *' should also have an identifier name
#2807: FILE: include/linux/ide.h:958:
+extern int ide_start_dma(struct ata_channel *, ide_drive_t *, ide_dma_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2807: FILE: include/linux/ide.h:958:
+extern int ide_start_dma(struct ata_channel *, ide_drive_t *, ide_dma_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#2807: FILE: include/linux/ide.h:958:
+extern int ide_start_dma(struct ata_channel *, ide_drive_t *, ide_dma_action_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2808: FILE: include/linux/ide.h:959:
+extern ide_startstop_t ide_dma_intr(ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2809: FILE: include/linux/ide.h:960:
+extern int check_drive_lists(ide_drive_t *drive, int good_bad);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2810: FILE: include/linux/ide.h:961:
+extern int ide_dmaproc(ide_dma_action_t func, ide_drive_t *drive);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2880: FILE: include/linux/ide.h:1035:
+	BUG_ON(drive->tcq->tag_mask == 0xffffffff);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'drive' - possible side-effects?
#2893: FILE: include/linux/ide.h:1048:
+# define ide_pending_commands(drive)	((drive)->using_tcq && (drive)->tcq->queued)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2898: FILE: include/linux/ide.h:1053:
+int ide_build_commandlist(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2899: FILE: include/linux/ide.h:1054:
+void ide_teardown_commandlist(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#2900: FILE: include/linux/ide.h:1055:
+int ide_tcq_dmaproc(ide_dma_action_t, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2900: FILE: include/linux/ide.h:1055:
+int ide_tcq_dmaproc(ide_dma_action_t, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#2901: FILE: include/linux/ide.h:1056:
+ide_startstop_t ide_start_tag(ide_dma_action_t, ide_drive_t *, struct ata_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#2901: FILE: include/linux/ide.h:1056:
+ide_startstop_t ide_start_tag(ide_dma_action_t, ide_drive_t *, struct ata_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_request *' should also have an identifier name
#2901: FILE: include/linux/ide.h:1056:
+ide_startstop_t ide_start_tag(ide_dma_action_t, ide_drive_t *, struct ata_request *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000465114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 135 warnings, 54 checks, 2696 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000465114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
