ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: kernel/sched.c:4650:
+ * 1) the source CPU reads+dirties a shared buffer $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#118: FILE: kernel/sched.c:4670:
+#define MIN_CACHE_SIZE		(64*1024U)
                       		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#119: FILE: kernel/sched.c:4671:
+#define DEFAULT_CACHE_SIZE	(5*1024*1024U)
                           	  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#119: FILE: kernel/sched.c:4671:
+#define DEFAULT_CACHE_SIZE	(5*1024*1024U)
                           	       ^

WARNING:MISPLACED_INIT: __initdata should be placed after migration_cost[MAX_DOMAIN_DISTANCE]
#137: FILE: kernel/sched.c:4689:
+static __initdata unsigned long long migration_cost[MAX_DOMAIN_DISTANCE] =

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#138: FILE: kernel/sched.c:4690:
+static __initdata unsigned long long migration_cost[MAX_DOMAIN_DISTANCE] =
+		{ -1LL , };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#138: FILE: kernel/sched.c:4690:
+		{ -1LL , };
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#147: FILE: kernel/sched.c:4699:
+	int ints[MAX_DOMAIN_DISTANCE+1], i;
 	                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: kernel/sched.c:4703:
+	printk("#ints: %d\n", ints[0]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#153: FILE: kernel/sched.c:4705:
+		migration_cost[i-1] = (unsigned long long)ints[i]*1000;
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#153: FILE: kernel/sched.c:4705:
+		migration_cost[i-1] = (unsigned long long)ints[i]*1000;
 		                                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: kernel/sched.c:4706:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#154: FILE: kernel/sched.c:4706:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);
 		                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#154: FILE: kernel/sched.c:4706:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);
 		                                                         ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#154: FILE: kernel/sched.c:4706:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: kernel/sched.c:4711:
+__setup ("migration_cost=", migration_cost_setup);

WARNING:MISPLACED_INIT: __initdata should be placed after migration_factor
#171: FILE: kernel/sched.c:4723:
+static __initdata unsigned int migration_factor = MIGRATION_FACTOR_SCALE;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#180: FILE: kernel/sched.c:4732:
+__setup("migration_factor=", setup_migration_factor);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#199: FILE: kernel/sched.c:4751:
+		distance = MAX_DOMAIN_DISTANCE-1;
 		                              ^

WARNING:MISPLACED_INIT: __initdata should be placed after migration_debug
#205: FILE: kernel/sched.c:4757:
+static __initdata unsigned int migration_debug = 1;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#213: FILE: kernel/sched.c:4765:
+__setup("migration_debug=", setup_migration_debug);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#229: FILE: kernel/sched.c:4781:
+__setup("max_cache_size=", setup_max_cache_size);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#238: FILE: kernel/sched.c:4790:
+	unsigned long size = __size/sizeof(long), chunk1 = size/3,
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#238: FILE: kernel/sched.c:4790:
+	unsigned long size = __size/sizeof(long), chunk1 = size/3,
 	                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#239: FILE: kernel/sched.c:4791:
+			chunk2 = 2*size/3;
 			          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#239: FILE: kernel/sched.c:4791:
+			chunk2 = 2*size/3;
 			               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#243: FILE: kernel/sched.c:4795:
+	for (i = 0; i < size/6; i += 8) {
 	                    ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#244: FILE: kernel/sched.c:4796:
+		switch (i % 6) {
+			case 0: cache[i]++;
+			case 1: cache[size-1-i]++;
+			case 2: cache[chunk1-i]++;
+			case 3: cache[chunk1+i]++;
+			case 4: cache[chunk2-i]++;
+			case 5: cache[chunk2+i]++;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#245: FILE: kernel/sched.c:4797:
+			case 0: cache[i]++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#246: FILE: kernel/sched.c:4798:
+			case 1: cache[size-1-i]++;
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#246: FILE: kernel/sched.c:4798:
+			case 1: cache[size-1-i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#246: FILE: kernel/sched.c:4798:
+			case 1: cache[size-1-i]++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#247: FILE: kernel/sched.c:4799:
+			case 2: cache[chunk1-i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#247: FILE: kernel/sched.c:4799:
+			case 2: cache[chunk1-i]++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#248: FILE: kernel/sched.c:4800:
+			case 3: cache[chunk1+i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: kernel/sched.c:4800:
+			case 3: cache[chunk1+i]++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#249: FILE: kernel/sched.c:4801:
+			case 4: cache[chunk2-i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#249: FILE: kernel/sched.c:4801:
+			case 4: cache[chunk2-i]++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#250: FILE: kernel/sched.c:4802:
+			case 5: cache[chunk2+i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#250: FILE: kernel/sched.c:4802:
+			case 5: cache[chunk2+i]++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#293: FILE: kernel/sched.c:4845:
+	cost = t2-t1 + t3-t2;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#293: FILE: kernel/sched.c:4845:
+	cost = t2-t1 + t3-t2;
 	                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: kernel/sched.c:4848:
+		printk("[%d->%d]: %8Ld %8Ld %8Ld => %10Ld.\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#296: FILE: kernel/sched.c:4848:
+		printk("[%d->%d]: %8Ld %8Ld %8Ld => %10Ld.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: kernel/sched.c:4849:
+		printk("[%d->%d]: %8Ld %8Ld %8Ld => %10Ld.\n",
+			source, target, t1-t0, t2-t1, t3-t2, cost);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: kernel/sched.c:4849:
+			source, target, t1-t0, t2-t1, t3-t2, cost);
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: kernel/sched.c:4849:
+			source, target, t1-t0, t2-t1, t3-t2, cost);
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: kernel/sched.c:4849:
+			source, target, t1-t0, t2-t1, t3-t2, cost);
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#339: FILE: kernel/sched.c:4891:
+		cost1 += measure_one(cache, size - i*1024, cpu1, cpu2);
 		                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#343: FILE: kernel/sched.c:4895:
+		cost1 += measure_one(cache, size - i*1024, cpu2, cpu1);
 		                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#353: FILE: kernel/sched.c:4905:
+		cost2 += measure_one(cache, size - i*1024, cpu1, cpu1);
 		                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#357: FILE: kernel/sched.c:4909:
+		cost2 += measure_one(cache, size - i*1024, cpu2, cpu2);
 		                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#362: FILE: kernel/sched.c:4914:
+	do_div(cost1, 2*ITERATIONS);
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#363: FILE: kernel/sched.c:4915:
+	do_div(cost2, 2*ITERATIONS);
 	               ^

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#377: FILE: kernel/sched.c:4929:
+	 * cachesize has to lie somewhere inbetween.
 	                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: kernel/sched.c:4942:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#392: FILE: kernel/sched.c:4944:
+		printk("cpu %d and %d not both online!\n", cpu1, cpu2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: kernel/sched.c:4953:
+		printk("could not vmalloc %d bytes for cache!\n", 2*max_size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#401: FILE: kernel/sched.c:4953:
+		printk("could not vmalloc %d bytes for cache!\n", 2*max_size);
 		                                                   ^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#401: FILE: kernel/sched.c:4953:
+	if (!cache) {
+		printk("could not vmalloc %d bytes for cache!\n", 2*max_size);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#423: FILE: kernel/sched.c:4975:
+		avg_fluct = (avg_fluct + fluct)/2;
 		                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#426: FILE: kernel/sched.c:4978:
+			printk("-> [%d][%d][%7d] %3ld.%ld [%3ld.%ld] (%ld): (%8Ld %8Ld)\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#426: FILE: kernel/sched.c:4978:
+			printk("-> [%d][%d][%7d] %3ld.%ld [%3ld.%ld] (%ld): (%8Ld %8Ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: kernel/sched.c:4979:
+			printk("-> [%d][%d][%7d] %3ld.%ld [%3ld.%ld] (%ld): (%8Ld %8Ld)\n",
+				cpu1, cpu2, size,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#441: FILE: kernel/sched.c:4993:
+		if (size_found && (size*100 > size_found*SIZE_THRESH))
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#441: FILE: kernel/sched.c:4993:
+		if (size_found && (size*100 > size_found*SIZE_THRESH))
 		                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#442: FILE: kernel/sched.c:4994:
+			if (cost+avg_fluct <= 0 ||
 			        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: kernel/sched.c:4995:
+			if (cost+avg_fluct <= 0 ||
+				max_cost*100 > (cost+avg_fluct)*COST_THRESH) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#443: FILE: kernel/sched.c:4995:
+				max_cost*100 > (cost+avg_fluct)*COST_THRESH) {
 				        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: kernel/sched.c:4995:
+				max_cost*100 > (cost+avg_fluct)*COST_THRESH) {
 				                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#443: FILE: kernel/sched.c:4995:
+				max_cost*100 > (cost+avg_fluct)*COST_THRESH) {
 				                               ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#444: FILE: kernel/sched.c:4996:
+				max_cost*100 > (cost+avg_fluct)*COST_THRESH) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: kernel/sched.c:4998:
+					printk("-> found max.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#456: FILE: kernel/sched.c:5008:
+		printk("[%d][%d] working set size found: %d, cost: %Ld\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#456: FILE: kernel/sched.c:5008:
+		printk("[%d][%d] working set size found: %d, cost: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: kernel/sched.c:5009:
+		printk("[%d][%d] working set size found: %d, cost: %Ld\n",
+			cpu1, cpu2, size_found, max_cost);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#473: FILE: kernel/sched.c:5025:
+void __devinit calibrate_migration_costs(void)

CHECK:BRACES: braces {} should be used on all arms of this statement
#497: FILE: kernel/sched.c:5049:
+			if (migration_cost[distance])
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#499: FILE: kernel/sched.c:5051:
+			else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: kernel/sched.c:5071:
+	printk("---------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: kernel/sched.c:5072:
+	printk("| migration cost matrix (max_cache_size: %d, cpu: %ld MHz):\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: kernel/sched.c:5073:
+	printk("| migration cost matrix (max_cache_size: %d, cpu: %ld MHz):\n",
+			max_cache_size,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#523: FILE: kernel/sched.c:5075:
+			cpu_khz/1000
 			       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#528: FILE: kernel/sched.c:5080:
+	printk("---------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: kernel/sched.c:5081:
+	printk("      ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#531: FILE: kernel/sched.c:5083:
+		printk("    [%02d]", cpu1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#532: FILE: kernel/sched.c:5084:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: kernel/sched.c:5086:
+		printk("[%02d]: ", cpu1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#537: FILE: kernel/sched.c:5089:
+				printk("    -   ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#543: FILE: kernel/sched.c:5095:
+			printk(" %2ld.%ld(%ld)", (long)cost / 1000000,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: kernel/sched.c:5096:
+			printk(" %2ld.%ld(%ld)", (long)cost / 1000000,
+				((long)cost / 100000) % 10, distance);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#546: FILE: kernel/sched.c:5098:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: kernel/sched.c:5100:
+	printk("--------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: kernel/sched.c:5101:
+	printk("| cacheflush times [%ld]:", max_distance+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#549: FILE: kernel/sched.c:5101:
+	printk("| cacheflush times [%ld]:", max_distance+1);
 	                                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: kernel/sched.c:5104:
+		printk(" %ld.%ld (%Ld)", (long)cost / 1000000,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#552: FILE: kernel/sched.c:5104:
+		printk(" %ld.%ld (%Ld)", (long)cost / 1000000,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: kernel/sched.c:5105:
+		printk(" %ld.%ld (%Ld)", (long)cost / 1000000,
+			((long)cost / 100000) % 10, cost);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#555: FILE: kernel/sched.c:5107:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#557: FILE: kernel/sched.c:5109:
+	printk("| calibration delay: %ld seconds\n", (j1-j0)/HZ);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#557: FILE: kernel/sched.c:5109:
+	printk("| calibration delay: %ld seconds\n", (j1-j0)/HZ);
 	                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#557: FILE: kernel/sched.c:5109:
+	printk("| calibration delay: %ld seconds\n", (j1-j0)/HZ);
 	                                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#558: FILE: kernel/sched.c:5110:
+	printk("--------------------------------\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#563: FILE: kernel/sched.c:5115:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#565: FILE: kernel/sched.c:5117:
 extern void __devinit arch_init_sched_domains(void);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#566: FILE: kernel/sched.c:5118:
 extern void __devinit arch_destroy_sched_domains(void);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#590: FILE: arch/ia64/kernel/domain.c:367:
 void __devinit arch_destroy_sched_domains(void)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: include/linux/sched.h:539:
+extern void calibrate_migration_costs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193237.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 39 warnings, 58 checks, 603 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193237.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
