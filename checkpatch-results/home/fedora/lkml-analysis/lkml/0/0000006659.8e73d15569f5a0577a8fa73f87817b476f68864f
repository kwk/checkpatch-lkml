WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#48: 
> * Peter Zijlstra <a.p.zijlstra@chello.nl> [2006-12-22 14:25]:
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#100: 
[2] http://git.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=d08b3851da41d0ee60851f2c75b118e1f7a5fc89

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: fs/buffer.c:2835:
+       if (PageDirty(page) || PageWriteback(page))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#115: FILE: fs/buffer.c:2835:
+       if (PageDirty(page) || PageWriteback(page))
                return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: fs/hugetlbfs/inode.c:179:
+       cancel_dirty_page(page, /* No IO accounting for huge pages? */0);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/page-flags.h:256:
+extern void cancel_dirty_page(struct page *page, unsigned int account_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: mm/memory.c:1837:
+       pgoff_t index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: mm/memory.c:1838:
+       unsigned int offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: mm/memory.c:1839:
+       struct page *page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: mm/memory.c:1841:
+       if (!mapping)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#188: FILE: mm/memory.c:1841:
+       if (!mapping)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: mm/memory.c:1842:
+               return;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: mm/memory.c:1842:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: mm/memory.c:1843:
+       offset = size & ~PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: mm/memory.c:1844:
+       if (!offset)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#191: FILE: mm/memory.c:1844:
+       if (!offset)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: mm/memory.c:1845:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: mm/memory.c:1845:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: mm/memory.c:1846:
+       index = size >> PAGE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: mm/memory.c:1847:
+       page = find_lock_page(mapping, index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: mm/memory.c:1848:
+       if (page) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#195: FILE: mm/memory.c:1848:
+       if (page) {
+               unsigned int check = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: mm/memory.c:1849:
+               unsigned int check = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/memory.c:1849:
+               unsigned int check = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/memory.c:1850:
+               unsigned char *kaddr = kmap_atomic(page, KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: mm/memory.c:1850:
+               unsigned char *kaddr = kmap_atomic(page, KM_USER0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: mm/memory.c:1851:
+               do {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: mm/memory.c:1851:
+               unsigned char *kaddr = kmap_atomic(page, KM_USER0);
+               do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: mm/memory.c:1851:
+               do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#198: FILE: mm/memory.c:1851:
+               do {
+                       check += kaddr[offset++];

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/memory.c:1852:
+                       check += kaddr[offset++];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/memory.c:1852:
+                       check += kaddr[offset++];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: mm/memory.c:1853:
+               } while (offset < PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: mm/memory.c:1853:
+               } while (offset < PAGE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: mm/memory.c:1854:
+               kunmap_atomic(kaddr,KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: mm/memory.c:1854:
+               kunmap_atomic(kaddr,KM_USER0);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: mm/memory.c:1854:
+               kunmap_atomic(kaddr,KM_USER0);
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: mm/memory.c:1855:
+               unlock_page(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/memory.c:1855:
+               unlock_page(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: mm/memory.c:1856:
+               page_cache_release(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: mm/memory.c:1856:
+               page_cache_release(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: mm/memory.c:1857:
+               if (check)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: mm/memory.c:1857:
+               if (check)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#204: FILE: mm/memory.c:1857:
+               if (check)
+                       printk("%s: BADNESS: truncate check %u\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: mm/memory.c:1858:
+                       printk("%s: BADNESS: truncate check %u\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: mm/memory.c:1858:
+                       printk("%s: BADNESS: truncate check %u\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: mm/memory.c:1858:
+                       printk("%s: BADNESS: truncate check %u\n",

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#206: FILE: mm/memory.c:1858:
current->comm, check);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: mm/memory.c:1859:
+                       printk("%s: BADNESS: truncate check %u\n",
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: mm/memory.c:1859:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: mm/memory.c:1895:
+       check_last_page(mapping, inode->i_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: mm/rmap.c:435:
+       pte_t *pte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: mm/rmap.c:447:
+       if (pte_dirty(*pte) || pte_write(*pte)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#284: FILE: mm/rmap.c:447:
+       if (pte_dirty(*pte) || pte_write(*pte)) {
+               pte_t entry;

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: mm/rmap.c:448:
+               pte_t entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: mm/rmap.c:448:
+               pte_t entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: mm/rmap.c:450:
+               flush_cache_page(vma, address, pte_pfn(*pte));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: mm/rmap.c:450:
+               flush_cache_page(vma, address, pte_pfn(*pte));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: mm/rmap.c:451:
+               entry = ptep_clear_flush(vma, address, pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: mm/rmap.c:451:
+               entry = ptep_clear_flush(vma, address, pte);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: mm/rmap.c:452:
+               entry = pte_wrprotect(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: mm/rmap.c:452:
+               entry = pte_wrprotect(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: mm/rmap.c:453:
+               entry = pte_mkclean(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: mm/rmap.c:453:
+               entry = pte_mkclean(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: mm/rmap.c:454:
+               set_pte_at(vma, address, pte, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: mm/rmap.c:454:
+               set_pte_at(vma, address, pte, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: mm/rmap.c:455:
+               lazy_mmu_prot_update(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: mm/rmap.c:455:
+               lazy_mmu_prot_update(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: mm/rmap.c:456:
+               ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: mm/rmap.c:456:
+               ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: mm/rmap.c:457:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: mm/rmap.c:493:
+       if (page_test_and_clear_dirty(page))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#310: FILE: mm/rmap.c:493:
+       if (page_test_and_clear_dirty(page))
+               ret = 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: mm/rmap.c:494:
+               ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: mm/rmap.c:494:
+               ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: mm/rmap.c:611:
+       struct page *dirty_page = NULL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#336: FILE: mm/rmap.c:637:
        if (pte_dirty(pteval))
+               dirty_page = page;

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: mm/rmap.c:638:
+               dirty_page = page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: mm/rmap.c:638:
+               dirty_page = page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: mm/rmap.c:689:
+       if (dirty_page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#346: FILE: mm/rmap.c:689:
+       if (dirty_page)
+               set_page_dirty(dirty_page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: mm/rmap.c:690:
+               set_page_dirty(dirty_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: mm/rmap.c:690:
+               set_page_dirty(dirty_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: mm/rmap.c:922:
+       if (page_test_and_clear_dirty(page))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#355: FILE: mm/rmap.c:922:
+       if (page_test_and_clear_dirty(page))
+               set_page_dirty(page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: mm/rmap.c:923:
+               set_page_dirty(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: mm/rmap.c:923:
+               set_page_dirty(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: mm/truncate.c:56:
+               static unsigned int warncount;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#372: FILE: mm/truncate.c:56:
+       /* If we're cancelling the page, it had better not be mapped
+               static unsigned int warncount;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: mm/truncate.c:58:
+               WARN_ON(++warncount < 5);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: mm/truncate.c:62:
+                       mapping_cap_account_dirty(page->mapping))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: mm/truncate.c:63:
+               dec_zone_page_state(page, NR_FILE_DIRTY);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#382: FILE: mm/truncate.c:66:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: mm/truncate.c:84:
+       cancel_dirty_page(page, PAGE_CACHE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: mm/truncate.c:402:
+                       if (!invalidate_complete_page2(mapping, page))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: mm/truncate.c:402:
+                       if (!invalidate_complete_page2(mapping, page))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#415: FILE: mm/truncate.c:402:
+                       if (!invalidate_complete_page2(mapping, page))
                                ret = -EIO;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006659.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 63 warnings, 3 checks, 267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000006659.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
