WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
worked when I started on it.  However, in spite of that - or perhaps because 

WARNING:TYPO_SPELLING: 'maintainance' may be misspelled - perhaps 'maintenance'?
#113: 
maintainance of page use counts.  We want to preserve *exactly* the same
^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#180: 
- Suparna pointed out that these techniques may be applicable to mmaped 
                                                                 ^^^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: fs/exec.c:863:
+	if (current->uid == 9999) printk(">>> execve %s\n", filename);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#294: FILE: fs/exec.c:863:
+	if (current->uid == 9999) printk(">>> execve %s\n", filename);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#305: FILE: include/linux/mm.h:414:
+extern pte_t *FASTCALL(__pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address, int write));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/mm.h:414:
+extern pte_t *FASTCALL(__pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address, int write));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#338: FILE: kernel/fork.c:143:
+	if (current->uid == 9999) printk(">>> dup_mmap\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#338: FILE: kernel/fork.c:143:
+	if (current->uid == 9999) printk(">>> dup_mmap\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: kernel/fork.c:570:
+	if (current->uid == 9999) printk(">>> fork, stack=%li\n", stack_start);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#346: FILE: kernel/fork.c:570:
+	if (current->uid == 9999) printk(">>> fork, stack=%li\n", stack_start);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#363: FILE: kernel/sys.c:520:
+	printk(">>> user: uid=%i pid=%i pf=%x\n", current->uid, current->pid, current->flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: kernel/sys.c:521:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#386: FILE: mm/memory.c:104:
+		printk(">>> free page table %p (%i)\n", pte, page_count(virt_to_page(pte)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: mm/memory.c:151:
+	pgd_t *page_dir = mm->pgd;
+	if (current->uid == 9999) printk(">>> clear_page_tables\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: mm/memory.c:151:
+	if (current->uid == 9999) printk(">>> clear_page_tables\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#401: FILE: mm/memory.c:151:
+	if (current->uid == 9999) printk(">>> clear_page_tables\n");

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#414: FILE: mm/memory.c:187:
+	static int teststart = 0, testcount = 999, tests = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: mm/memory.c:188:
+	static int teststart = 0, testcount = 999, tests = 0;
+	if (share_page_tables && (tests++ < teststart || tests > teststart + testcount))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#418: FILE: mm/memory.c:191:
+		printk(">>> copy_page_range test %i\n", tests - 1);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#474: FILE: mm/memory.c:234:
+			if (!share_page_tables) goto no_share;

CHECK:BRACES: braces {} should be used on all arms of this statement
#476: FILE: mm/memory.c:236:
+			if (pmd_none(*dst_pmd)) {
[...]
+			} else if (page_count(virt_to_page(src_ptb)) == 1)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#478: FILE: mm/memory.c:238:
+				pmd_populate(dst, dst_pmd, ((unsigned long) src_ptb & PAGE_MASK));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: mm/memory.c:239:
+				printk(">>> share %p @ %p (%i)\n", src_ptb, address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: mm/memory.c:240:
+				printk(">>> share %p @ %p (%i)\n", src_ptb, address,
+					page_count(virt_to_page(src_ptb)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: mm/memory.c:247:
+				pte_t pte = *src_ptb;
+				if (!pte_none(pte)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#488: FILE: mm/memory.c:248:
+					if (pte_present(pte)) {
[...]
+					} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: mm/memory.c:250:
+						struct page *page = pte_page(pte);
+						if (VALID_PAGE(page) && !PageReserved(page)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#490: FILE: mm/memory.c:250:
+						if (VALID_PAGE(page) && !PageReserved(page)) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#492: FILE: mm/memory.c:252:
+							if (cow)

CHECK:BRACES: Unbalanced braces around else statement
#496: FILE: mm/memory.c:256:
+					} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#499: FILE: mm/memory.c:259:
+				if ((address += PAGE_SIZE) >= end)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#502: FILE: mm/memory.c:262:
+			} while ((unsigned) src_ptb & PTE_TABLE_MASK);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#502: FILE: mm/memory.c:262:
+			} while ((unsigned) src_ptb & PTE_TABLE_MASK);

CHECK:SPACING: No space is necessary after a cast
#554: FILE: mm/memory.c:306:
+			} while ((unsigned) src_ptb & PTE_TABLE_MASK);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#554: FILE: mm/memory.c:306:
+			} while ((unsigned) src_ptb & PTE_TABLE_MASK);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#591: FILE: mm/memory.c:412:
+	if (current->uid == 9999) printk(">>> zap_page_range %lx+%lx\n", address, size);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#591: FILE: mm/memory.c:412:
+	if (current->uid == 9999) printk(">>> zap_page_range %lx+%lx\n", address, size);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#632: FILE: mm/memory.c:1462:
+			if (!pmd_none(*pmd) && !(write && page_count(virt_to_page(pmd_page(*pmd))) > 1)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: mm/memory.c:1467:
+		if (current->uid == 9999) printk(">>> make page table %p @ %p %s\n", new, address,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#637: FILE: mm/memory.c:1467:
+		if (current->uid == 9999) printk(">>> make page table %p @ %p %s\n", new, address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: mm/memory.c:1468:
+		if (current->uid == 9999) printk(">>> make page table %p @ %p %s\n", new, address,
+			write == 2? "write fault":

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#638: FILE: mm/memory.c:1468:
+			write == 2? "write fault":
 			          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#638: FILE: mm/memory.c:1468:
+			write == 2? "write fault":
 			                         ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#639: FILE: mm/memory.c:1469:
+			write == 1? "unshared":
 			          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#639: FILE: mm/memory.c:1469:
+			write == 1? "unshared":
 			                      ^

WARNING:TYPO_SPELLING: 'sharable' may be misspelled - perhaps 'shareable'?
#640: FILE: mm/memory.c:1470:
+			write == 0? "sharable":
 			             ^^^^^^^^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#640: FILE: mm/memory.c:1470:
+			write == 0? "sharable":
 			          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#640: FILE: mm/memory.c:1470:
+			write == 0? "sharable":
 			                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#642: FILE: mm/memory.c:1472:
+		if (!page_count(virt_to_page(new)) == 1) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#642: FILE: mm/memory.c:1472:
+		if (!page_count(virt_to_page(new)) == 1) BUG();

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#646: FILE: mm/memory.c:1476:
+			printk(">>> unshare %p (%i--)\n", *pmd, page_count(virt_to_page(pmd_page(*pmd))));

WARNING:LINE_SPACING: Missing a blank line after declarations
#646: FILE: mm/memory.c:1476:
+			pte_t *dst_ptb = new;
+			printk(">>> unshare %p (%i--)\n", *pmd, page_count(virt_to_page(pmd_page(*pmd))));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#646: FILE: mm/memory.c:1476:
+			printk(">>> unshare %p (%i--)\n", *pmd, page_count(virt_to_page(pmd_page(*pmd))));

WARNING:LINE_SPACING: Missing a blank line after declarations
#649: FILE: mm/memory.c:1479:
+				pte_t pte = *src_ptb;
+				if (!pte_none(pte)) {

CHECK:SPACING: No space is necessary after a cast
#656: FILE: mm/memory.c:1486:
+			} while ((unsigned) dst_ptb & PTE_TABLE_MASK);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#656: FILE: mm/memory.c:1486:
+			} while ((unsigned) dst_ptb & PTE_TABLE_MASK);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#667: FILE: mm/mremap.c:95:
+	if (current->uid == 9999) printk(">>> mremap\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#667: FILE: mm/mremap.c:95:
+	if (current->uid == 9999) printk(">>> mremap\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 38 warnings, 10 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
