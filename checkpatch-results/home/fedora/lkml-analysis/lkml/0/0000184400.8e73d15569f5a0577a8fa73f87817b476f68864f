CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->direct_IO'
#46: FILE: fs/open.c:810:
+		if (!f->f_mapping->a_ops ||
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->get_xip_page'
#46: FILE: fs/open.c:810:
+		if (!f->f_mapping->a_ops ||
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#59: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#59: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#59: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: include/linux/fs.h:334:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,
+			int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#68: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: include/linux/fs.h:1479:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,
+		unsigned long, loff_t, loff_t *, size_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_ra_state *' should also have an identifier name
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'read_descriptor_t *' should also have an identifier name
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'read_actor_t' should also have an identifier name
#80: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/fs.h:1504:
+extern int xip_truncate_page(struct address_space *mapping, loff_t from);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: include/linux/fs.h:1512:
+		do_xip_mapping_read(filp->f_mapping,
+					&filp->f_ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#105: FILE: include/linux/fs.h:1513:
+					filp,
 					^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#112: FILE: include/linux/fs.h:1520:
+					filp,
 					^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: mm/filemap.c:932:
+void do_xip_mapping_read(struct address_space *mapping,
+			     struct file_ra_state *_ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#145: FILE: mm/filemap.c:933:
+			     struct file *filp,
 			                  ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: mm/filemap.c:942:
+	BUG_ON(!mapping->a_ops->get_xip_page);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#174: FILE: mm/filemap.c:962:
+			if (nr <= offset) {
+				goto out;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#181: FILE: mm/filemap.c:969:
+			index*(PAGE_SIZE/512), 0);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#181: FILE: mm/filemap.c:969:
+			index*(PAGE_SIZE/512), 0);
 			                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#184: FILE: mm/filemap.c:972:
+		if (unlikely(IS_ERR(page))) {
[...]
+		} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#184: FILE: mm/filemap.c:972:
+		if (unlikely(IS_ERR(page))) {

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: mm/filemap.c:980:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: mm/filemap.c:981:
+			BUG_ON(!PageUptodate(page));

CHECK:SPACING: No space is necessary after a cast
#228: FILE: mm/filemap.c:1016:
+	*ppos = ((loff_t) index << PAGE_CACHE_SHIFT) + offset;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#229: FILE: mm/filemap.c:1017:
+	if (filp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#230: FILE: mm/filemap.c:1018:
+		file_accessed(filp);
 		              ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#233: FILE: mm/filemap.c:1021:
+EXPORT_SYMBOL(do_xip_mapping_read);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#252: FILE: mm/filemap.c:1097:
+	/* do not use generic_file_direct_IO on xip files, xip IO is
+	   implicitly direct as well */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#252: FILE: mm/filemap.c:1097:
+	   implicitly direct as well */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: mm/filemap.c:1645:
+static void __filemap_xip_unmap (struct address_space * mapping, unsigned long pgoff)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: mm/filemap.c:1645:
+static void __filemap_xip_unmap (struct address_space * mapping, unsigned long pgoff)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: mm/filemap.c:1662:
+		BUG_ON(address < vma->vm_start || address >= vma->vm_end);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: mm/filemap.c:1677:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: mm/filemap.c:1688:
+		BUG_ON(pte_dirty(pteval));

WARNING:INDENTED_LABEL: labels should not be indented
#322: FILE: mm/filemap.c:1689:
+	next_unmap:

WARNING:INDENTED_LABEL: labels should not be indented
#324: FILE: mm/filemap.c:1691:
+	next_unlock:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#336: FILE: mm/filemap.c:1703:
+struct page * filemap_xip_nopage(struct vm_area_struct * area, unsigned long address, int *type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#336: FILE: mm/filemap.c:1703:
+struct page * filemap_xip_nopage(struct vm_area_struct * area, unsigned long address, int *type)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#350: FILE: mm/filemap.c:1717:
+	if (pgoff >= size) {
+		return NULL;
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#354: FILE: mm/filemap.c:1721:
+	page = mapping->a_ops->get_xip_page(mapping, pgoff*(PAGE_SIZE/512), 0);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#354: FILE: mm/filemap.c:1721:
+	page = mapping->a_ops->get_xip_page(mapping, pgoff*(PAGE_SIZE/512), 0);
 	                                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: mm/filemap.c:1723:
+		BUG_ON(!PageUptodate(page));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#364: FILE: mm/filemap.c:1731:
+	    (area->vm_flags & (VM_SHARED| VM_MAYSHARE)) &&
 	                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#367: FILE: mm/filemap.c:1734:
+		page = mapping->a_ops->get_xip_page (mapping,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#368: FILE: mm/filemap.c:1735:
+			pgoff*(PAGE_SIZE/512), 1);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#368: FILE: mm/filemap.c:1735:
+			pgoff*(PAGE_SIZE/512), 1);
 			                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: mm/filemap.c:1738:
+		BUG_ON(!PageUptodate(page));

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#387: FILE: mm/filemap.c:1754:
+struct vm_operations_struct xip_file_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mapping->a_ops->readpage'
#398: FILE: mm/filemap.c:1764:
+	if ((!mapping->a_ops->readpage) && (!mapping->a_ops->get_xip_page))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mapping->a_ops->get_xip_page'
#398: FILE: mm/filemap.c:1764:
+	if ((!mapping->a_ops->readpage) && (!mapping->a_ops->get_xip_page))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: mm/filemap.c:2298:
+generic_file_xip_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos, loff_t *ppos,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: mm/filemap.c:2302:
+	struct address_space * mapping = file->f_mapping;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#419: FILE: mm/filemap.c:2303:
+	struct address_space_operations *a_ops = mapping->a_ops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: mm/filemap.c:2304:
+^Istruct inode ^I*inode = mapping->host;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: mm/filemap.c:2313:
+	BUG_ON(!mapping->a_ops->get_xip_page);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#437: FILE: mm/filemap.c:2321:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#452: FILE: mm/filemap.c:2336:
+						    index*(PAGE_SIZE/512), 0);
 						         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#452: FILE: mm/filemap.c:2336:
+						    index*(PAGE_SIZE/512), 0);
 						                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#456: FILE: mm/filemap.c:2340:
+				index*(PAGE_SIZE/512), 1);
 				     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#456: FILE: mm/filemap.c:2340:
+				index*(PAGE_SIZE/512), 1);
 				                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#457: FILE: mm/filemap.c:2341:
+			if (!IS_ERR(page))
[...]
+			__filemap_xip_unmap(mapping, index);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#461: FILE: mm/filemap.c:2345:
+
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: mm/filemap.c:2352:
+		BUG_ON(!PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: mm/filemap.c:2359:
+			copied = filemap_copy_from_user_iovec(page, offset,
+						cur_iov, iov_base, bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: mm/filemap.c:2371:
+					filemap_set_next_iovec(&cur_iov,
+							&iov_base, status);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: mm/filemap.c:2452:
+		written = generic_file_xip_write (iocb, iov,

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: mm/filemap.c:2453:
+^I^I^I        nr_segs, pos, ppos, count);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: mm/filemap.c:2453:
+		written = generic_file_xip_write (iocb, iov,
+			        nr_segs, pos, ppos, count);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#541: FILE: mm/filemap.c:2667:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#541: FILE: mm/filemap.c:2667:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 	                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#542: FILE: mm/filemap.c:2668:
+	unsigned blocksize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#543: FILE: mm/filemap.c:2669:
+	unsigned length;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#558: FILE: mm/filemap.c:2684:
+					    index*(PAGE_SIZE/512), 0);
 					         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#558: FILE: mm/filemap.c:2684:
+					    index*(PAGE_SIZE/512), 0);
 					                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#562: FILE: mm/filemap.c:2688:
+	if (unlikely(IS_ERR(page))) {
[...]
+	} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#562: FILE: mm/filemap.c:2688:
+	if (unlikely(IS_ERR(page))) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#566: FILE: mm/filemap.c:2692:
+			return 0;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#570: FILE: mm/filemap.c:2696:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#571: FILE: mm/filemap.c:2697:
+		BUG_ON(!PageUptodate(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 49 warnings, 36 checks, 522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
