WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
	This moves the quota control to quota.c and places the quota_ctl code there 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#65: FILE: fs/dquot.c:71:
formats */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: No space is necessary after a cast
#164: FILE: fs/dquot.c:709:
+		dquot->dq_dqb.dqb_itime = (time_t) 0;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#181: FILE: fs/dquot.c:721:
+		dquot->dq_dqb.dqb_btime = (time_t) 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: fs/dquot.c:806:
+	if (dquot->dq_dqb.dqb_ihardlimit &&
+	   (dquot->dq_dqb.dqb_curinodes + inodes) > dquot->dq_dqb.dqb_ihardlimit &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: fs/dquot.c:813:
+	if (dquot->dq_dqb.dqb_isoftlimit &&
+	   (dquot->dq_dqb.dqb_curinodes + inodes) > dquot->dq_dqb.dqb_isoftlimit &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: fs/dquot.c:821:
+	if (dquot->dq_dqb.dqb_isoftlimit &&
+	   (dquot->dq_dqb.dqb_curinodes + inodes) > dquot->dq_dqb.dqb_isoftlimit &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: fs/dquot.c:824:
+^I^Idquot->dq_dqb.dqb_itime = CURRENT_TIME + $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: fs/dquot.c:837:
+^I   toqb(dquot->dq_dqb.dqb_curspace + space) > dquot->dq_dqb.dqb_bhardlimit $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: fs/dquot.c:837:
+	if (dquot->dq_dqb.dqb_bhardlimit &&
+	   toqb(dquot->dq_dqb.dqb_curspace + space) > dquot->dq_dqb.dqb_bhardlimit 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: fs/dquot.c:837:
+	if (dquot->dq_dqb.dqb_bhardlimit &&
&&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: fs/dquot.c:845:
+^I   toqb(dquot->dq_dqb.dqb_curspace + space) > dquot->dq_dqb.dqb_bsoftlimit $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: fs/dquot.c:845:
+	if (dquot->dq_dqb.dqb_bsoftlimit &&
+	   toqb(dquot->dq_dqb.dqb_curspace + space) > dquot->dq_dqb.dqb_bsoftlimit 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: fs/dquot.c:845:
+	if (dquot->dq_dqb.dqb_bsoftlimit &&
&&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: fs/dquot.c:854:
+^I   toqb(dquot->dq_dqb.dqb_curspace + space) > dquot->dq_dqb.dqb_bsoftlimit $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: fs/dquot.c:854:
+	if (dquot->dq_dqb.dqb_bsoftlimit &&
+	   toqb(dquot->dq_dqb.dqb_curspace + space) > dquot->dq_dqb.dqb_bsoftlimit 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/dquot.c:854:
+	if (dquot->dq_dqb.dqb_bsoftlimit &&
&&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: fs/dquot.c:858:
+^I^I^Idquot->dq_dqb.dqb_btime = CURRENT_TIME + $

WARNING:TYPO_SPELLING: 'stucture' may be misspelled - perhaps 'structure'?
#375: FILE: fs/dquot.c:1297:
+/* Generic routine for getting common part of quota stucture */
                                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: fs/dquot.c:1313:
+int vfs_get_dqblk(struct super_block *sb, int type, qid_t id, struct $

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: fs/dquot.c:1316:
+	struct dquot *dquot = dqget(sb, id, type);
+	if (!dquot)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: fs/dquot.c:1357:
+^I^I else if (!(di->dqb_valid & QIF_BTIME))  /* Set grace only if user hasn't $

WARNING:TABSTOP: Statements should start on a tabstop
#520: FILE: fs/dquot.c:1357:
+		 else if (!(di->dqb_valid & QIF_BTIME))  /* Set grace only if user hasn't 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 0)
#520: FILE: fs/dquot.c:1357:
+		 else if (!(di->dqb_valid & QIF_BTIME))  /* Set grace only if user hasn't 
provided his own... */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: fs/dquot.c:1358:
+^I^I^I dm->dqb_btime = CURRENT_TIME + $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#522: FILE: fs/dquot.c:1358:
+		 else if (!(di->dqb_valid & QIF_BTIME))  /* Set grace only if user hasn't 
+			 dm->dqb_btime = CURRENT_TIME + 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: fs/dquot.c:1365:
+^I^Ielse if (!(di->dqb_valid & QIF_ITIME))  /* Set grace only if user hasn't $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: fs/dquot.c:1366:
+^I^I^Idm->dqb_itime = CURRENT_TIME + $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#532: FILE: fs/dquot.c:1366:
+		else if (!(di->dqb_valid & QIF_ITIME))  /* Set grace only if user hasn't 
+			dm->dqb_itime = CURRENT_TIME + 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: fs/dquot.c:1368:
+^Iif (dm->dqb_bhardlimit || dm->dqb_bsoftlimit || dm->dqb_ihardlimit || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: fs/dquot.c:1375:
+int vfs_set_dqblk(struct super_block *sb, int type, qid_t id, struct $

WARNING:INDENTED_LABEL: labels should not be indented
#597: FILE: fs/dquot.c:1449:
+	quota_on:	vfs_quota_on,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#598: FILE: fs/dquot.c:1450:
+	quota_off:	vfs_quota_off,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#598: FILE: fs/dquot.c:1450:
+	quota_off:	vfs_quota_off,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#599: FILE: fs/dquot.c:1451:
+	quota_sync:	vfs_quota_sync,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#599: FILE: fs/dquot.c:1451:
+	quota_sync:	vfs_quota_sync,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#600: FILE: fs/dquot.c:1452:
+	get_info:	vfs_get_info,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#600: FILE: fs/dquot.c:1452:
+	get_info:	vfs_get_info,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#601: FILE: fs/dquot.c:1453:
+	set_info:	vfs_set_info,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#601: FILE: fs/dquot.c:1453:
+	set_info:	vfs_set_info,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#602: FILE: fs/dquot.c:1454:
+	get_dqblk:	vfs_get_dqblk,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#602: FILE: fs/dquot.c:1454:
+	get_dqblk:	vfs_get_dqblk,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#603: FILE: fs/dquot.c:1455:
+	set_dqblk:	vfs_set_dqblk
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#603: FILE: fs/dquot.c:1455:
+	set_dqblk:	vfs_set_dqblk

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#614: FILE: fs/dquot.c:1472:
+EXPORT_SYMBOL(register_quota_format);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#615: FILE: fs/dquot.c:1473:
+EXPORT_SYMBOL(unregister_quota_format);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#616: FILE: fs/dquot.c:1474:
+EXPORT_SYMBOL(dqstats);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#642: FILE: fs/quota.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#652: FILE: fs/quota.c:11:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: fs/quota.c:19:
+static int check_quotactl_valid(struct super_block *sb, int type, int cmd, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: fs/quota.c:20:
+static int check_quotactl_valid(struct super_block *sb, int type, int cmd, 
+{

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#667: FILE: fs/quota.c:25:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#669: FILE: fs/quota.c:27:
+	switch (cmd) {
+	    case Q_GETFMT:
[...]
+	    case Q_QUOTAON:
[...]
+	    case Q_QUOTAOFF:
[...]
+	    case Q_SETINFO:
[...]
+	    case Q_GETINFO:
[...]
+	    case Q_SETQUOTA:
[...]
+	    case Q_GETQUOTA:
[...]
+	    case Q_SYNC:
[...]
+	    case Q_XQUOTAON:
+	    case Q_XQUOTAOFF:
+	    case Q_XQUOTARM:
[...]
+	    case Q_XGETQSTAT:
[...]
+	    case Q_XSETQLIM:
[...]
+	    case Q_XGETQUOTA:
[...]
+	    default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#670: FILE: fs/quota.c:28:
+	    case Q_GETFMT:

WARNING:TABSTOP: Statements should start on a tabstop
#672: FILE: fs/quota.c:30:
+	    case Q_QUOTAON:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#674: FILE: fs/quota.c:32:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#676: FILE: fs/quota.c:34:
+	    case Q_QUOTAOFF:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#678: FILE: fs/quota.c:36:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#680: FILE: fs/quota.c:38:
+	    case Q_SETINFO:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#682: FILE: fs/quota.c:40:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#684: FILE: fs/quota.c:42:
+	    case Q_GETINFO:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#686: FILE: fs/quota.c:44:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#688: FILE: fs/quota.c:46:
+	    case Q_SETQUOTA:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#690: FILE: fs/quota.c:48:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#692: FILE: fs/quota.c:50:
+	    case Q_GETQUOTA:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#694: FILE: fs/quota.c:52:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#696: FILE: fs/quota.c:54:
+	    case Q_SYNC:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#698: FILE: fs/quota.c:56:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#700: FILE: fs/quota.c:58:
+	    case Q_XQUOTAON:

WARNING:TABSTOP: Statements should start on a tabstop
#701: FILE: fs/quota.c:59:
+	    case Q_XQUOTAOFF:

WARNING:TABSTOP: Statements should start on a tabstop
#702: FILE: fs/quota.c:60:
+	    case Q_XQUOTARM:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#704: FILE: fs/quota.c:62:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#706: FILE: fs/quota.c:64:
+	    case Q_XGETQSTAT:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#708: FILE: fs/quota.c:66:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#710: FILE: fs/quota.c:68:
+	    case Q_XSETQLIM:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#712: FILE: fs/quota.c:70:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#714: FILE: fs/quota.c:72:
+	    case Q_XGETQUOTA:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#716: FILE: fs/quota.c:74:
+			return -ENOSYS;

WARNING:TABSTOP: Statements should start on a tabstop
#718: FILE: fs/quota.c:76:
+	    default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#723: FILE: fs/quota.c:81:
+	switch (cmd) {
+	    case Q_GETFMT:
+	    case Q_GETINFO:
+	    case Q_QUOTAOFF:
+	    case Q_SETINFO:
+	    case Q_SETQUOTA:
+	    case Q_GETQUOTA:

WARNING:TABSTOP: Statements should start on a tabstop
#724: FILE: fs/quota.c:82:
+	    case Q_GETFMT:

WARNING:TABSTOP: Statements should start on a tabstop
#725: FILE: fs/quota.c:83:
+	    case Q_GETINFO:

WARNING:TABSTOP: Statements should start on a tabstop
#726: FILE: fs/quota.c:84:
+	    case Q_QUOTAOFF:

WARNING:TABSTOP: Statements should start on a tabstop
#727: FILE: fs/quota.c:85:
+	    case Q_SETINFO:

WARNING:TABSTOP: Statements should start on a tabstop
#728: FILE: fs/quota.c:86:
+	    case Q_SETQUOTA:

WARNING:TABSTOP: Statements should start on a tabstop
#729: FILE: fs/quota.c:87:
+	    case Q_GETQUOTA:

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#740: FILE: fs/quota.c:98:
+	}
+	else if (cmd != Q_GETFMT && cmd != Q_GETINFO && cmd != Q_SYNC)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#751: FILE: fs/quota.c:109:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#755: FILE: fs/quota.c:113:
+	ret = user_path_walk(path, &nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#759: FILE: fs/quota.c:117:
+	dev = nd.dentry->d_inode->i_rdev;
 	      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#760: FILE: fs/quota.c:118:
+	mode = nd.dentry->d_inode->i_mode;
 	       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#761: FILE: fs/quota.c:119:
+	path_release(&nd);
 	              ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: fs/quota.c:134:
+static int do_quotactl(struct super_block *sb, int type, int cmd, qid_t id, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: fs/quota.c:135:
+static int do_quotactl(struct super_block *sb, int type, int cmd, qid_t id, 
+{

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#781: FILE: fs/quota.c:138:
+	switch (cmd) {
[...]
+		case Q_QUOTAOFF:
[...]
+		case Q_SYNC:
[...]
+		case Q_XQUOTAON:
+		case Q_XQUOTAOFF:
[...]
+		default:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#785: FILE: fs/quota.c:142:
+			if (IS_ERR(pathname = getname(addr)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#805: FILE: fs/quota.c:162:
+			if ((ret = sb->s_qcop->get_info(sb, type, &info)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#821: FILE: fs/quota.c:178:
+			if ((ret = sb->s_qcop->get_dqblk(sb, type, id, &idq)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#848: FILE: fs/quota.c:205:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#849: FILE: fs/quota.c:206:
+			if ((ret = sb->s_qcop->get_xstate(sb, &fqs)))

WARNING:TABSTOP: Statements should start on a tabstop
#860: FILE: fs/quota.c:217:
+		       return sb->s_qcop->set_xquota(sb, type, id, &fdq);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#865: FILE: fs/quota.c:222:
+			if ((ret = sb->s_qcop->get_xquota(sb, type, id, &fdq)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#873: FILE: fs/quota.c:230:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: fs/quota.c:241:
+asmlinkage long sys_quotactl(unsigned int cmd, const char *special, qid_t $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#895: FILE: fs/quota.c:251:
+	if ((cmds != Q_SYNC || special) && IS_ERR(sb = resolve_dev(special))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#900: FILE: fs/quota.c:256:
+	if ((ret = check_quotactl_valid(sb, type, cmds, id)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1087: FILE: include/linux/quota.h:237:
+^Iint (*read_file_info)(struct super_block *sb, int type);^I/* Read main info $

WARNING:SPACING: Unnecessary space before function pointer arguments
#1100: FILE: include/linux/quota.h:246:
+	void (*initialize) (struct inode *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1100: FILE: include/linux/quota.h:246:
+	void (*initialize) (struct inode *, short);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#1100: FILE: include/linux/quota.h:246:
+	void (*initialize) (struct inode *, short);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1101: FILE: include/linux/quota.h:247:
+	void (*drop) (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1101: FILE: include/linux/quota.h:247:
+	void (*drop) (struct inode *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1102: FILE: include/linux/quota.h:248:
+	int (*alloc_space) (struct inode *, qsize_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1102: FILE: include/linux/quota.h:248:
+	int (*alloc_space) (struct inode *, qsize_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qsize_t' should also have an identifier name
#1102: FILE: include/linux/quota.h:248:
+	int (*alloc_space) (struct inode *, qsize_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1102: FILE: include/linux/quota.h:248:
+	int (*alloc_space) (struct inode *, qsize_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1103: FILE: include/linux/quota.h:249:
+	int (*alloc_inode) (const struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct inode *' should also have an identifier name
#1103: FILE: include/linux/quota.h:249:
+	int (*alloc_inode) (const struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1103: FILE: include/linux/quota.h:249:
+	int (*alloc_inode) (const struct inode *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1104: FILE: include/linux/quota.h:250:
+	void (*free_space) (struct inode *, qsize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1104: FILE: include/linux/quota.h:250:
+	void (*free_space) (struct inode *, qsize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qsize_t' should also have an identifier name
#1104: FILE: include/linux/quota.h:250:
+	void (*free_space) (struct inode *, qsize_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1105: FILE: include/linux/quota.h:251:
+	void (*free_inode) (const struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct inode *' should also have an identifier name
#1105: FILE: include/linux/quota.h:251:
+	void (*free_inode) (const struct inode *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1105: FILE: include/linux/quota.h:251:
+	void (*free_inode) (const struct inode *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1106: FILE: include/linux/quota.h:252:
+	int (*transfer) (struct inode *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1106: FILE: include/linux/quota.h:252:
+	int (*transfer) (struct inode *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#1106: FILE: include/linux/quota.h:252:
+	int (*transfer) (struct inode *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1111: FILE: include/linux/quota.h:257:
+	int (*quota_on)(struct super_block *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1111: FILE: include/linux/quota.h:257:
+	int (*quota_on)(struct super_block *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1111: FILE: include/linux/quota.h:257:
+	int (*quota_on)(struct super_block *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1111: FILE: include/linux/quota.h:257:
+	int (*quota_on)(struct super_block *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1112: FILE: include/linux/quota.h:258:
+	int (*quota_off)(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1112: FILE: include/linux/quota.h:258:
+	int (*quota_off)(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1113: FILE: include/linux/quota.h:259:
+	int (*quota_sync)(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1113: FILE: include/linux/quota.h:259:
+	int (*quota_sync)(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1114: FILE: include/linux/quota.h:260:
+	int (*get_info)(struct super_block *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1114: FILE: include/linux/quota.h:260:
+	int (*get_info)(struct super_block *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqinfo *' should also have an identifier name
#1114: FILE: include/linux/quota.h:260:
+	int (*get_info)(struct super_block *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1115: FILE: include/linux/quota.h:261:
+	int (*set_info)(struct super_block *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1115: FILE: include/linux/quota.h:261:
+	int (*set_info)(struct super_block *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqinfo *' should also have an identifier name
#1115: FILE: include/linux/quota.h:261:
+	int (*set_info)(struct super_block *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1116: FILE: include/linux/quota.h:262:
+	int (*get_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1116: FILE: include/linux/quota.h:262:
+	int (*get_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#1116: FILE: include/linux/quota.h:262:
+	int (*get_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqblk *' should also have an identifier name
#1116: FILE: include/linux/quota.h:262:
+	int (*get_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1117: FILE: include/linux/quota.h:263:
+	int (*set_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1117: FILE: include/linux/quota.h:263:
+	int (*set_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#1117: FILE: include/linux/quota.h:263:
+	int (*set_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqblk *' should also have an identifier name
#1117: FILE: include/linux/quota.h:263:
+	int (*set_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1118: FILE: include/linux/quota.h:264:
+	int (*get_xstate)(struct super_block *, struct fs_quota_stat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_quota_stat *' should also have an identifier name
#1118: FILE: include/linux/quota.h:264:
+	int (*get_xstate)(struct super_block *, struct fs_quota_stat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1119: FILE: include/linux/quota.h:265:
+	int (*set_xstate)(struct super_block *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1119: FILE: include/linux/quota.h:265:
+	int (*set_xstate)(struct super_block *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1119: FILE: include/linux/quota.h:265:
+	int (*set_xstate)(struct super_block *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1120: FILE: include/linux/quota.h:266:
+	int (*get_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1120: FILE: include/linux/quota.h:266:
+	int (*get_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#1120: FILE: include/linux/quota.h:266:
+	int (*get_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_disk_quota *' should also have an identifier name
#1120: FILE: include/linux/quota.h:266:
+	int (*get_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1121: FILE: include/linux/quota.h:267:
+	int (*set_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1121: FILE: include/linux/quota.h:267:
+	int (*set_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#1121: FILE: include/linux/quota.h:267:
+	int (*set_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_disk_quota *' should also have an identifier name
#1121: FILE: include/linux/quota.h:267:
+	int (*set_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1140: FILE: include/linux/quota.h:285:
+long quotactl __P ((unsigned int, const char *, int, caddr_t));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: include/linux/quotaops.h:18:
+/* Following functions are needed even when quota is not compiled into $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1154: FILE: include/linux/quotaops.h:19:
+#define sb_any_quota_enabled(sb) ((sb)->s_dquot.flags & (DQUOT_USR_ENABLED | $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1154: FILE: include/linux/quotaops.h:19:
+/* Following functions are needed even when quota is not compiled into 
+#define sb_any_quota_enabled(sb) ((sb)->s_dquot.flags & (DQUOT_USR_ENABLED | 

ERROR:CODE_INDENT: code indent should use tabs where possible
#1170: FILE: include/linux/quotaops.h:34:
+        return is_enabled(sb_dqopt(sb), type);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1179: FILE: include/linux/quotaops.h:43:
+extern int sync_dquots(kdev_t dev, short type);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sb' - possible side-effects?
#1209: FILE: include/linux/quotaops.h:187:
+#define DQUOT_OFF(sb)	((sb)->s_qcop->quota_off(sb, -1))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1226: FILE: include/linux/xqm.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1246: FILE: include/linux/xqm.h:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1267: FILE: include/linux/xqm.h:42:
+#define XQM_CMD(x)	(('X'<<8)+(x))	/* note: forms first QCMD argument */
                   	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1267: FILE: include/linux/xqm.h:42:
+#define XQM_CMD(x)	(('X'<<8)+(x))	/* note: forms first QCMD argument */
                   	         ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1283: FILE: include/linux/xqm.h:58:
+typedef struct fs_disk_quota {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1297: FILE: include/linux/xqm.h:72:
+^I__u16^I  ^Id_iwarns;       /* # warnings issued wrt num inodes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1298: FILE: include/linux/xqm.h:73:
+^I__u16^I  ^Id_bwarns;       /* # warnings issued wrt disk blocks */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1304: FILE: include/linux/xqm.h:79:
+^I__u16^I  ^Id_rtbwarns;     /* # warnings issued wrt RT disk blks */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1305: FILE: include/linux/xqm.h:80:
+^I__s16^I^Id_padding3;^I/* padding3 - for future use */^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1312: FILE: include/linux/xqm.h:87:
+#define FS_DQ_ISOFT	(1<<0)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1312: FILE: include/linux/xqm.h:87:
+#define FS_DQ_ISOFT	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1313: FILE: include/linux/xqm.h:88:
+#define FS_DQ_IHARD	(1<<1)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1313: FILE: include/linux/xqm.h:88:
+#define FS_DQ_IHARD	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1314: FILE: include/linux/xqm.h:89:
+#define FS_DQ_BSOFT	(1<<2)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1314: FILE: include/linux/xqm.h:89:
+#define FS_DQ_BSOFT	(1<<2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1315: FILE: include/linux/xqm.h:90:
+#define FS_DQ_BHARD ^I(1<<3)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1315: FILE: include/linux/xqm.h:90:
+#define FS_DQ_BHARD 	(1<<3)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1315: FILE: include/linux/xqm.h:90:
+#define FS_DQ_BHARD 	(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1316: FILE: include/linux/xqm.h:91:
+#define FS_DQ_RTBSOFT	(1<<4)
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1316: FILE: include/linux/xqm.h:91:
+#define FS_DQ_RTBSOFT	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1317: FILE: include/linux/xqm.h:92:
+#define FS_DQ_RTBHARD	(1<<5)
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1317: FILE: include/linux/xqm.h:92:
+#define FS_DQ_RTBHARD	(1<<5)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1324: FILE: include/linux/xqm.h:99:
+ * defined below are used. $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1327: FILE: include/linux/xqm.h:102:
+#define FS_DQ_BTIMER	(1<<6)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1327: FILE: include/linux/xqm.h:102:
+#define FS_DQ_BTIMER	(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1328: FILE: include/linux/xqm.h:103:
+#define FS_DQ_ITIMER	(1<<7)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1328: FILE: include/linux/xqm.h:103:
+#define FS_DQ_ITIMER	(1<<7)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1329: FILE: include/linux/xqm.h:104:
+#define FS_DQ_RTBTIMER ^I(1<<8)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1329: FILE: include/linux/xqm.h:104:
+#define FS_DQ_RTBTIMER 	(1<<8)
                        	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1329: FILE: include/linux/xqm.h:104:
+#define FS_DQ_RTBTIMER 	(1<<8)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1338: FILE: include/linux/xqm.h:113:
+#define	DQ_FTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1338: FILE: include/linux/xqm.h:113:
+#define	DQ_FTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1339: FILE: include/linux/xqm.h:114:
+#define	DQ_BTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1339: FILE: include/linux/xqm.h:114:
+#define	DQ_BTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1344: FILE: include/linux/xqm.h:119:
+#define XFS_QUOTA_UDQ_ACCT	(1<<0)  /* user quota accounting */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1344: FILE: include/linux/xqm.h:119:
+#define XFS_QUOTA_UDQ_ACCT	(1<<0)  /* user quota accounting */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1345: FILE: include/linux/xqm.h:120:
+#define XFS_QUOTA_UDQ_ENFD	(1<<1)  /* user quota limits enforcement */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1345: FILE: include/linux/xqm.h:120:
+#define XFS_QUOTA_UDQ_ENFD	(1<<1)  /* user quota limits enforcement */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1346: FILE: include/linux/xqm.h:121:
+#define XFS_QUOTA_GDQ_ACCT	(1<<2)  /* group quota accounting */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1346: FILE: include/linux/xqm.h:121:
+#define XFS_QUOTA_GDQ_ACCT	(1<<2)  /* group quota accounting */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1347: FILE: include/linux/xqm.h:122:
+#define XFS_QUOTA_GDQ_ENFD	(1<<3)  /* group quota limits enforcement */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1347: FILE: include/linux/xqm.h:122:
+#define XFS_QUOTA_GDQ_ENFD	(1<<3)  /* group quota limits enforcement */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1349: FILE: include/linux/xqm.h:124:
+#define XFS_USER_QUOTA		(1<<0)	/* user quota type */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1349: FILE: include/linux/xqm.h:124:
+#define XFS_USER_QUOTA		(1<<0)	/* user quota type */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1350: FILE: include/linux/xqm.h:125:
+#define XFS_PROJ_QUOTA		(1<<1)	/* (IRIX) project quota type */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1350: FILE: include/linux/xqm.h:125:
+#define XFS_PROJ_QUOTA		(1<<1)	/* (IRIX) project quota type */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1351: FILE: include/linux/xqm.h:126:
+#define XFS_GROUP_QUOTA		(1<<2)	/* group quota type */
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1351: FILE: include/linux/xqm.h:126:
+#define XFS_GROUP_QUOTA		(1<<2)	/* group quota type */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1354: FILE: include/linux/xqm.h:129:
+ * fs_quota_stat is the struct returned in Q_XGETQSTAT for a given file $

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#1356: FILE: include/linux/xqm.h:130:
+ * Provides a centralized way to get meta infomation about the quota 
                                           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1356: FILE: include/linux/xqm.h:130:
+ * Provides a centralized way to get meta infomation about the quota $

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#1364: FILE: include/linux/xqm.h:137:
+ * Some basic infomation about 'quota files'.
               ^^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1366: FILE: include/linux/xqm.h:139:
+typedef struct fs_qfilestat {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1372: FILE: include/linux/xqm.h:145:
+typedef struct fs_quota_stat {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1379: FILE: include/linux/xqm.h:152:
+^I__s32^I^Iqs_btimelimit;  /* limit for blks timer */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1380: FILE: include/linux/xqm.h:153:
+^I__s32^I^Iqs_itimelimit;  /* limit for inodes timer */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1381: FILE: include/linux/xqm.h:154:
+^I__s32^I^Iqs_rtbtimelimit;/* limit for rt blks timer */^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 128 warnings, 53 checks, 1273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
