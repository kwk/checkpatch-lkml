ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#69: 
--- a/drivers/pnp/interface.c	Mon Feb  3 19:44:01 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#87: FILE: drivers/pnp/isapnp/core.c:56:
+int isapnp_reset = 0;			/* reset all PnP cards (deactivate) */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: drivers/pnp/isapnp/core.c:438:
+static int isapnp_get_resources(struct pnp_dev *dev, struct pnp_resource_table * res);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: drivers/pnp/isapnp/core.c:859:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: drivers/pnp/isapnp/core.c:860:
+static int isapnp_parse_current_resources(struct pnp_dev *dev, struct pnp_resource_table * res)

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: drivers/pnp/isapnp/core.c:864:
+	struct pnp_rule_table rule;
+	if (dev->rule)

CHECK:BRACES: braces {} should be used on all arms of this statement
#135: FILE: drivers/pnp/isapnp/core.c:864:
+	if (dev->rule)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: drivers/pnp/isapnp/core.c:866:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#138: FILE: drivers/pnp/isapnp/core.c:867:
+		if (!pnp_generate_rule(dev,1,&rule))
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#138: FILE: drivers/pnp/isapnp/core.c:867:
+		if (!pnp_generate_rule(dev,1,&rule))
 		                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#138: FILE: drivers/pnp/isapnp/core.c:867:
+		if (!pnp_generate_rule(dev,1,&rule))
 		                             ^

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#152: FILE: drivers/pnp/isapnp/core.c:881:
+				res->port_resource[tmp].end = ret + 1; /* all we can do is assume 1 :-( */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#163: FILE: drivers/pnp/isapnp/core.c:892:
+				res->mem_resource[tmp].end = ret + 1; /* all we can do is assume 1 :-( */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#170: FILE: drivers/pnp/isapnp/core.c:899:
+			res->irq_resource[tmp].start = res->irq_resource[tmp].end = ret;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#177: FILE: drivers/pnp/isapnp/core.c:906:
+			if (rule.dma[tmp]) { /* some isapnp systems forget to set this to 4 so we have to check */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#178: FILE: drivers/pnp/isapnp/core.c:907:
+				res->dma_resource[tmp].start = res->dma_resource[tmp].end = ret;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#186: FILE: drivers/pnp/isapnp/core.c:915:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: drivers/pnp/isapnp/core.c:960:
+		card_for_each_dev(card,dev) {
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: drivers/pnp/isapnp/core.c:1043:
+	int ret;
+	pnp_init_resource_table(res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: drivers/pnp/resource.c:824:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: drivers/pnp/resource.c:824:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule)

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: drivers/pnp/resource.c:923:
+				if(pnp_generate_rule(dev, depnum, dev->rule)) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#336: FILE: drivers/pnp/resource.c:941:
+		if (dev->res.port_resource[i].start == 0 || pnp_check_port_conflicts(dev,i,SEARCH_WARM)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: drivers/pnp/resource.c:941:
+		if (dev->res.port_resource[i].start == 0 || pnp_check_port_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: drivers/pnp/resource.c:941:
+		if (dev->res.port_resource[i].start == 0 || pnp_check_port_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                          ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#345: FILE: drivers/pnp/resource.c:956:
+		if (dev->res.mem_resource[i].start == 0 || pnp_check_mem_conflicts(dev,i,SEARCH_WARM)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: drivers/pnp/resource.c:956:
+		if (dev->res.mem_resource[i].start == 0 || pnp_check_mem_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: drivers/pnp/resource.c:956:
+		if (dev->res.mem_resource[i].start == 0 || pnp_check_mem_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                        ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#354: FILE: drivers/pnp/resource.c:971:
+		if (dev->res.irq_resource[i].start == -1 || pnp_check_irq_conflicts(dev,i,SEARCH_WARM)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: drivers/pnp/resource.c:971:
+		if (dev->res.irq_resource[i].start == -1 || pnp_check_irq_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: drivers/pnp/resource.c:971:
+		if (dev->res.irq_resource[i].start == -1 || pnp_check_irq_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                         ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#363: FILE: drivers/pnp/resource.c:986:
+		if (dev->res.dma_resource[i].start == -1 || pnp_check_dma_conflicts(dev,i,SEARCH_WARM)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: drivers/pnp/resource.c:986:
+		if (dev->res.dma_resource[i].start == -1 || pnp_check_dma_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: drivers/pnp/resource.c:986:
+		if (dev->res.dma_resource[i].start == -1 || pnp_check_dma_conflicts(dev,i,SEARCH_WARM)) {
 		                                                                         ^

WARNING:LONG_LINE_COMMENT: line length of 124 exceeds 100 columns
#381: FILE: drivers/pnp/resource.c:1034:
+/* this advanced algorithm will shuffle other configs to make room and ensure that the most possible devices have configs */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#382: FILE: drivers/pnp/resource.c:1035:
+static int pnp_advanced_config(struct pnp_dev * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: drivers/pnp/resource.c:1105:
+static int pnp_simple_config(struct pnp_dev * dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#436: FILE: drivers/pnp/resource.c:1108:
+	int i;
+	spin_lock(&pnp_lock);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: drivers/pnp/resource.c:1124:
+			if (!pnp_next_port(dev,i))
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/pnp/resource.c:1128:
+			if (!pnp_next_mem(dev,i))
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: drivers/pnp/resource.c:1132:
+			if (!pnp_next_irq(dev,i))
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: drivers/pnp/resource.c:1136:
+			if (!pnp_next_dma(dev,i))
 			                     ^

WARNING:TYPO_SPELLING: 'thier' may be misspelled - perhaps 'their'?
#504: FILE: drivers/pnp/resource.c:1226:
+ * This function can be used by drivers that want to manually set thier resources.
                                                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#524: FILE: drivers/pnp/resource.c:1284:
+	spin_lock(&pnp_lock);	/* we lock just in case the device is being configured during this call */

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#526: FILE: drivers/pnp/resource.c:1286:
+	spin_unlock(&pnp_lock); /* once the device is claimed active we know it won't be configured so we can unlock */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#528: FILE: drivers/pnp/resource.c:1288:
+	/* If this condition is true, advanced configuration failed, we need to get this device up and running

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#529: FILE: drivers/pnp/resource.c:1289:
+	 * so we use the simple config engine which ignores cold conflicts, this of course may lead to new failures */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#529: FILE: drivers/pnp/resource.c:1289:
+	 * so we use the simple config engine which ignores cold conflicts, this of course may lead to new failures */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#539: FILE: drivers/pnp/resource.c:1292:
+			pnp_err("res: Unable to resolve resource conflicts for the device '%s'.", dev->dev.bus_id);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#547: FILE: drivers/pnp/resource.c:1297:
+		pnp_info("res: Unable to activate the PnP device '%s' because its resource configuration is invalid.", dev->dev.bus_id);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#553: FILE: drivers/pnp/resource.c:1301:
+		pnp_err("res: Activation failed because the PnP device '%s' is busy.", dev->dev.bus_id);

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#559: FILE: drivers/pnp/resource.c:1305:
+		pnp_info("res: Unable to activate the PnP device '%s' because this feature is not supported.", dev->dev.bus_id);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#565: FILE: drivers/pnp/resource.c:1309:
+		pnp_err("res: The protocol '%s' reports that activating the PnP device '%s' has failed.", dev->protocol->name, dev->dev.bus_id);

WARNING:LONG_LINE_COMMENT: line length of 137 exceeds 100 columns
#575: FILE: drivers/pnp/resource.c:1315:
+		if (pnp_compare_resources(&dev->res, &res)) /* if this happens we may be in big trouble but it's best just to continue */

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#576: FILE: drivers/pnp/resource.c:1316:
+			pnp_err("res: The resources requested do not match those set for the PnP device '%s', please report.", dev->dev.bus_id);

WARNING:TYPO_SPELLING: 'becuase' may be misspelled - perhaps 'because'?
#598: FILE: drivers/pnp/resource.c:1347:
+		pnp_info("res: Disable failed becuase the PnP device '%s' is busy.", dev->dev.bus_id);
 		                              ^^^^^^^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#598: FILE: drivers/pnp/resource.c:1347:
+		pnp_info("res: Disable failed becuase the PnP device '%s' is busy.", dev->dev.bus_id);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#604: FILE: drivers/pnp/resource.c:1351:
+		pnp_info("res: Unable to disable the PnP device '%s' because this feature is not supported.", dev->dev.bus_id);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#609: FILE: drivers/pnp/resource.c:1354:
+	if (dev->protocol->disable(dev)<0) {
 	                               ^

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#610: FILE: drivers/pnp/resource.c:1355:
+		pnp_err("res: The protocol '%s' reports that disabling the PnP device '%s' has failed.", dev->protocol->name, dev->dev.bus_id);

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#630: FILE: include/linux/pnp.h:307:
+#define PNP_CONFIG_INVALID	0x0008	/* If this flag is set, the pnp layer will refuse to activate the device */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#638: FILE: include/linux/pnp.h:383:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#638: FILE: include/linux/pnp.h:383:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#646: FILE: include/linux/pnp.h:424:
+static inline int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule) { return -ENODEV; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: include/linux/pnp.h:424:
+static inline int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule) { return -ENODEV; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: include/linux/pnp.h:424:
+static inline int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule) { return -ENODEV; }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000395438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 30 warnings, 6 checks, 533 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000395438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
