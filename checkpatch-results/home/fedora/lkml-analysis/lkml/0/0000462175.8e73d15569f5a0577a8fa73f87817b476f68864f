WARNING:TYPO_SPELLING: 'inconsistant' may be misspelled - perhaps 'inconsistent'?
#29: 
>inconsistant). Let me know if you want to see the numbers.
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#84: 
diff -aur -X /mnt/elbrus/home/pmenage/dontdiff linux-2.5.10/fs/dcache.c linux-2.5.10-dcache/fs/dcache.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/dcache.c:849:
+	struct dentry * dentry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: fs/dcache.c:850:
+	struct dentry * dentry;
+	spin_lock(&dcache_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: fs/dcache.c:851:
+	dentry = __d_lookup(parent,name);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: fs/dcache.c:852:
+	if(dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: fs/dcache.c:866:
+ * dcache_lock.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: fs/dcache.c:869:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: fs/dcache.c:869:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: fs/dcache.c:869:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: fs/dcache.c:869:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#113: FILE: fs/dcache.c:871:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#131: FILE: fs/dcache.c:897:
+		if(!(dentry->d_vfs_flags & DCACHE_REFERENCED)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#131: FILE: fs/dcache.c:897:
+		if(!(dentry->d_vfs_flags & DCACHE_REFERENCED)) {
+			dentry->d_vfs_flags |= DCACHE_REFERENCED;
+		}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: fs/namei.c:271:
+ * @nd:     dentry/mnt to be reference counted
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#156: FILE: fs/namei.c:276:
+ * the dentry/mnt in nd (and optionally an additional dentry if one is
                      ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: fs/namei.c:277:
+ * passed) before releasing the dcache lock. $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#160: FILE: fs/namei.c:280:
+static void __undo_locked(struct nameidata *nd, struct dentry *dentry) {
                                             ^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#160: FILE: fs/namei.c:280:
+static void __undo_locked(struct nameidata *nd, struct dentry *dentry) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: fs/namei.c:282:
+	if(dentry)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: fs/namei.c:289:
+static inline int lookup_locked(struct nameidata *nd) {
                                                   ^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#169: FILE: fs/namei.c:289:
+static inline int lookup_locked(struct nameidata *nd) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#173: FILE: fs/namei.c:293:
+static inline void undo_locked(struct nameidata *nd, struct dentry *dentry)
                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#175: FILE: fs/namei.c:295:
+	if(lookup_locked(nd)) 
 	                 ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: fs/namei.c:295:
+^Iif(lookup_locked(nd)) $

ERROR:SPACING: space required before the open parenthesis '('
#175: FILE: fs/namei.c:295:
+	if(lookup_locked(nd)) 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#176: FILE: fs/namei.c:296:
+		__undo_locked(nd, dentry);
 		              ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: fs/namei.c:300:
+ * For fast path lookup while holding the dcache_lock. $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#183: FILE: fs/namei.c:303:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)
                                                         ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/namei.c:303:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/namei.c:303:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/namei.c:303:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: fs/namei.c:305:
+	struct dentry * dentry = NULL;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#187: FILE: fs/namei.c:306:
+	if(lookup_locked(nd)) 
 	                 ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: fs/namei.c:306:
+^Iif(lookup_locked(nd)) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: fs/namei.c:306:
+	struct dentry * dentry = NULL;
+	if(lookup_locked(nd)) 

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: fs/namei.c:306:
+	if(lookup_locked(nd)) 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#193: FILE: fs/namei.c:312:
+		undo_locked(nd, dentry);
 		            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: fs/namei.c:405:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: fs/namei.c:406:
+ * Does dput() on dentry before returning $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#245: FILE: fs/namei.c:412:
+	undo_locked(nd, dentry);
 	            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: fs/namei.c:461:
+static inline int __follow_down_locked(struct vfsmount **mnt, struct dentry **dentry) $

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: fs/namei.c:476:
+	if(__follow_down_locked(mnt, dentry)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: fs/namei.c:483:
+^I} $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#302: FILE: fs/namei.c:488:
+static inline int __follow_down_nd(struct nameidata *nd, struct dentry **dentry) 
                                                      ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: fs/namei.c:488:
+static inline int __follow_down_nd(struct nameidata *nd, struct dentry **dentry) $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#304: FILE: fs/namei.c:490:
+	if(lookup_locked(nd)) {
 	                 ^^

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: fs/namei.c:490:
+	if(lookup_locked(nd)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#304: FILE: fs/namei.c:490:
+	if(lookup_locked(nd)) {
+		return __follow_down_locked(&nd->mnt, dentry);
+	}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#315: FILE: fs/namei.c:501:
+static inline int __follow_dotdot_locked(struct nameidata *nd) {
                                                            ^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#315: FILE: fs/namei.c:501:
+static inline int __follow_dotdot_locked(struct nameidata *nd) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#316: FILE: fs/namei.c:502:
+static inline int __follow_dotdot_locked(struct nameidata *nd) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: fs/namei.c:504:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: fs/namei.c:510:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#325: FILE: fs/namei.c:511:
+	parent=nd->mnt->mnt_parent;
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: fs/namei.c:516:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: fs/namei.c:520:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#340: FILE: fs/namei.c:526:
 	while(1) {
[...]
+	    read_lock(&current->fs->lock);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#370: FILE: fs/namei.c:527:
 	while(1) {
+

WARNING:TABSTOP: Statements should start on a tabstop
#373: FILE: fs/namei.c:530:
+	    if (nd->dentry == current->fs->root &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#373: FILE: fs/namei.c:530:
+	    if (nd->dentry == current->fs->root &&
[...]
+		    read_unlock(&current->fs->lock);

WARNING:TABSTOP: Statements should start on a tabstop
#376: FILE: fs/namei.c:533:
+		    break;

WARNING:TABSTOP: Statements should start on a tabstop
#377: FILE: fs/namei.c:534:
+	    }

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#380: FILE: fs/namei.c:537:
+	    if(lookup_locked(nd)) {
 	                     ^^

WARNING:TABSTOP: Statements should start on a tabstop
#380: FILE: fs/namei.c:537:
+	    if(lookup_locked(nd)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#380: FILE: fs/namei.c:537:
+	    if(lookup_locked(nd)) {
+		    if(__follow_dotdot_locked(nd))

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: fs/namei.c:537:
+	    if(lookup_locked(nd)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#381: FILE: fs/namei.c:538:
+		    if(__follow_dotdot_locked(nd))
 		                              ^^

WARNING:TABSTOP: Statements should start on a tabstop
#381: FILE: fs/namei.c:538:
+		    if(__follow_dotdot_locked(nd))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 28)
#381: FILE: fs/namei.c:538:
+		    if(__follow_dotdot_locked(nd))
+			    break;

ERROR:SPACING: space required before the open parenthesis '('
#381: FILE: fs/namei.c:538:
+		    if(__follow_dotdot_locked(nd))

WARNING:TABSTOP: Statements should start on a tabstop
#382: FILE: fs/namei.c:539:
+			    break;

WARNING:TABSTOP: Statements should start on a tabstop
#383: FILE: fs/namei.c:540:
+	    } else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#383: FILE: fs/namei.c:540:
+	    } else {
+		    struct vfsmount *oldmnt = nd->mnt;

WARNING:TABSTOP: Statements should start on a tabstop
#384: FILE: fs/namei.c:541:
+		    struct vfsmount *oldmnt = nd->mnt;

WARNING:TABSTOP: Statements should start on a tabstop
#385: FILE: fs/namei.c:542:
+		    struct dentry *olddentry = nd->dentry;

WARNING:TABSTOP: Statements should start on a tabstop
#386: FILE: fs/namei.c:543:
+		    int done;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: fs/namei.c:544:
+^I^I    $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#390: FILE: fs/namei.c:547:
+		    done = __follow_dotdot_locked(nd);
 		                                  ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: fs/namei.c:548:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: fs/namei.c:554:
+^I^I    $

WARNING:TABSTOP: Statements should start on a tabstop
#398: FILE: fs/namei.c:555:
+		    if(done)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 28)
#398: FILE: fs/namei.c:555:
+		    if(done)
+			    break;

ERROR:SPACING: space required before the open parenthesis '('
#398: FILE: fs/namei.c:555:
+		    if(done)

WARNING:TABSTOP: Statements should start on a tabstop
#399: FILE: fs/namei.c:556:
+			    break;

WARNING:TABSTOP: Statements should start on a tabstop
#400: FILE: fs/namei.c:557:
+	    }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: fs/namei.c:558:
+^I    $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#404: FILE: fs/namei.c:560:
+	while (d_mountpoint(nd->dentry) && __follow_down_nd(nd, &nd->dentry))
 	                                                    ^^

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: fs/namei.c:595:
+		if(err) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#415: FILE: fs/namei.c:596:
+			undo_locked(nd, NULL);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#426: FILE: fs/namei.c:649:
+		dentry = cached_lookup(nd, &this, LOOKUP_CONTINUE);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#428: FILE: fs/namei.c:651:
+			undo_locked(nd, NULL);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#436: FILE: fs/namei.c:658:
+		while (d_mountpoint(dentry) && __follow_down_nd(nd, &dentry))
 		                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#453: FILE: fs/namei.c:681:
+			if (!lookup_locked(nd)) {
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#467: FILE: fs/namei.c:717:
+		dentry = cached_lookup(nd, &this, 0);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#469: FILE: fs/namei.c:719:
+			undo_locked(nd, dentry); 
 			            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: fs/namei.c:719:
+^I^I^Iundo_locked(nd, dentry); $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#477: FILE: fs/namei.c:726:
+		while (d_mountpoint(dentry) && __follow_down_nd(nd, &dentry))
 		                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#489: FILE: fs/namei.c:736:
+			if(!lookup_locked(nd)) 
 			                  ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: fs/namei.c:736:
+^I^I^Iif(!lookup_locked(nd)) $

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: fs/namei.c:736:
+			if(!lookup_locked(nd)) 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#498: FILE: fs/namei.c:759:
+		undo_locked(nd, NULL);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#501: FILE: fs/namei.c:762:
+		undo_locked(nd, dentry);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: fs/namei.c:766:
+	undo_locked(nd, NULL);
 	            ^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#516: FILE: fs/namei.c:846:
 	if (current->fs->altroot && !(nd->flags & LOOKUP_NOALT)) {
+

ERROR:SPACING: space required before the open parenthesis '('
#534: FILE: fs/namei.c:862:
+	if(flags & LOOKUP_LOCKED) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#547: FILE: fs/namei.c:886:
+int path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                         ^^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#551: FILE: fs/namei.c:890:
+	if (*name=='/'){
 	         ^

ERROR:SPACING: space required before the open brace '{'
#551: FILE: fs/namei.c:890:
+	if (*name=='/'){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#552: FILE: fs/namei.c:891:
+		if(!walk_init_root(name, nd)) 
 		                         ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: fs/namei.c:891:
+^I^Iif(!walk_init_root(name, nd)) $

ERROR:SPACING: space required before the open parenthesis '('
#552: FILE: fs/namei.c:891:
+		if(!walk_init_root(name, nd)) 

ERROR:SPACING: space required before the open brace '{'
#554: FILE: fs/namei.c:893:
+	} else{

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#561: FILE: fs/namei.c:900:
+	return (path_walk(name, nd));
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#571: FILE: fs/namei.c:911:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#579: FILE: fs/namei.c:921:
+	nd.dentry = base;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#580: FILE: fs/namei.c:922:
+	nd.flags = 0;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#590: FILE: fs/namei.c:935:
+	dentry = cached_lookup(&nd, name, 0);
 	                        ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: include/linux/dcache.h:233:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: include/linux/dcache.h:233:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#611: FILE: include/linux/dcache.h:233:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#611: FILE: include/linux/dcache.h:233:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#645: FILE: include/linux/fs.h:1428:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#645: FILE: include/linux/fs.h:1428:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#645: FILE: include/linux/fs.h:1428:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#645: FILE: include/linux/fs.h:1428:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#645: FILE: include/linux/fs.h:1428:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462175.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 68 warnings, 6 checks, 531 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462175.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
