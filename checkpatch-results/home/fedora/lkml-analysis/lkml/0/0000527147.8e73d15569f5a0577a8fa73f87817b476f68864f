CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#55: 
             Jörgen
              ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
diff -urN -X dontdiff linux-2.4.6-pre5-vanilla/CREDITS linux-2.4.6-pre5-devel/CREDITS

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#65: FILE: CREDITS:500:
+N: Jörgen Cederlöf
     ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#68: FILE: CREDITS:503:
+S: Rydsvägen 258 A.36
         ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#69: FILE: CREDITS:504:
+S: 584 34 Linköping
               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#92: FILE: fs/exec.c:629:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#92: FILE: fs/exec.c:629:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#93: FILE: fs/exec.c:630:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)
+		    && capable(CAP_EXECSGID))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: fs/open.c:439:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#141: FILE: include/linux/capability.h:6:
+ * with help from Aleph1, Roland Buresund, Andrew Main and Jörgen Cederlöf.
                                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#149: FILE: include/linux/capability.h:280:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: include/linux/capability.h:298:
+/* Allow user chroots. This should have no negative impact on system
+   security - using it drops CAP_EXECS{U,G}ID and CAP_USER_CHROOT.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#169: FILE: include/linux/capability.h:300:
+   prevent a process with changed UID from breaking out. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: include/linux/capability.h:304:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#174: FILE: include/linux/capability.h:305:
+#define CAP_USER_MASK (CAP_TO_MASK( CAP_EXECSUID ) | \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#174: FILE: include/linux/capability.h:305:
+#define CAP_USER_MASK (CAP_TO_MASK( CAP_EXECSUID ) | \

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: include/linux/capability.h:306:
+                       CAP_TO_MASK( CAP_EXECSGID ) | \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: include/linux/capability.h:306:
+                       CAP_TO_MASK( CAP_EXECSGID ) | \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#175: FILE: include/linux/capability.h:306:
+                       CAP_TO_MASK( CAP_EXECSGID ) | \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#175: FILE: include/linux/capability.h:306:
+                       CAP_TO_MASK( CAP_EXECSGID ) | \

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: include/linux/capability.h:307:
+                       CAP_TO_MASK( CAP_USER_CHROOT ) )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: include/linux/capability.h:307:
+                       CAP_TO_MASK( CAP_USER_CHROOT ) )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#176: FILE: include/linux/capability.h:307:
+                       CAP_TO_MASK( CAP_USER_CHROOT ) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#176: FILE: include/linux/capability.h:307:
+                       CAP_TO_MASK( CAP_USER_CHROOT ) )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: include/linux/capability.h:309:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: include/linux/capability.h:373:
+#define cap_clear(c)          do { cap_t(c) &= CAP_USER_MASK; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#202: FILE: include/linux/capability.h:373:
+#define cap_clear(c)          do { cap_t(c) &= CAP_USER_MASK; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: include/linux/capability.h:374:
+#define cap_set_full(c)       do { cap_t(c) = ~0; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#203: FILE: include/linux/capability.h:374:
+#define cap_set_full(c)       do { cap_t(c) = ~0; } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/capability.h:375:
+#define cap_mask(c,mask)      do { cap_t(c) &= cap_t(mask); } while(0)
                   ^

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: include/linux/capability.h:375:
+#define cap_mask(c,mask)      do { cap_t(c) &= cap_t(mask); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#204: FILE: include/linux/capability.h:375:
+#define cap_mask(c,mask)      do { cap_t(c) &= cap_t(mask); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: include/linux/capability.h:376:
+#define cap_clear_set_user(c) do { cap_t(c) = CAP_USER_MASK; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#205: FILE: include/linux/capability.h:376:
+#define cap_clear_set_user(c) do { cap_t(c) = CAP_USER_MASK; } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000527147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 11 warnings, 9 checks, 140 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000527147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
