WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: fs/gfs2/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#133: FILE: fs/gfs2/dir.c:85:
+			    uint32_t index, uint32_t len, uint64_t leaf_no,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: fs/gfs2/dir.c:88:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: fs/gfs2/dir.c:121:
+                               $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: fs/gfs2/dir.c:121:
+                               $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: fs/gfs2/dir.c:121:
+                               $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#182: FILE: fs/gfs2/dir.c:134:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: fs/gfs2/dir.c:142:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#202: FILE: fs/gfs2/dir.c:154:
+			       uint64_t offset, unsigned int size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#206: FILE: fs/gfs2/dir.c:158:
+	uint64_t lblock, dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#207: FILE: fs/gfs2/dir.c:159:
+	uint32_t extlen = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#282: FILE: fs/gfs2/dir.c:234:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#311: FILE: fs/gfs2/dir.c:263:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#322: FILE: fs/gfs2/dir.c:274:
+			      uint64_t offset, unsigned int size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#325: FILE: fs/gfs2/dir.c:277:
+	uint64_t lblock, dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#326: FILE: fs/gfs2/dir.c:278:
+	uint32_t extlen = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#370: FILE: fs/gfs2/dir.c:322:
+		if (dblock) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#379: FILE: fs/gfs2/dir.c:331:
+		} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#409: FILE: fs/gfs2/dir.c:361:
+	    memcmp((char *)(dent+1), name->name, name->len) == 0)
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: fs/gfs2/dir.c:390:
+	const char *end = (const char *)dent + be16_to_cpu(dent->de_rec_len);
+	if (name->len == (end - start))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#447: FILE: fs/gfs2/dir.c:399:
+	unsigned required = GFS2_DIRENT_SIZE(name->len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#448: FILE: fs/gfs2/dir.c:400:
+	unsigned actual = GFS2_DIRENT_SIZE(be16_to_cpu(dent->de_name_len));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#449: FILE: fs/gfs2/dir.c:401:
+	unsigned totlen = be16_to_cpu(dent->de_rec_len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#460: FILE: fs/gfs2/dir.c:412:
+	unsigned offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: fs/gfs2/dir.c:420:
+	struct dirent_gather *g = opaque;
+	if (dent->de_inum.no_addr) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#468: FILE: fs/gfs2/dir.c:420:
+	if (dent->de_inum.no_addr) {
+		g->pdent[g->offset++] = dent;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: fs/gfs2/dir.c:439:
+	const char *msg = "gfs2_dirent too small";
+	if (unlikely(size < sizeof(struct gfs2_dirent)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: fs/gfs2/dir.c:452:
+	    unlikely(sizeof(struct gfs2_dirent)+be16_to_cpu(dent->de_name_len) >
 	                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#505: FILE: fs/gfs2/dir.c:457:
+	printk(KERN_WARNING "gfs2_check_dirent: %s (%s)\n", msg,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gfs2_check_dirent', this function's name, in a string
#505: FILE: fs/gfs2/dir.c:457:
+	printk(KERN_WARNING "gfs2_check_dirent: %s (%s)\n", msg,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: fs/gfs2/dir.c:467:
+	BUG_ON(buf == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#515: FILE: fs/gfs2/dir.c:467:
+	BUG_ON(buf == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#517: FILE: fs/gfs2/dir.c:469:
+	switch(be32_to_cpu(h->mh_type)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#529: FILE: fs/gfs2/dir.c:481:
+	printk(KERN_WARNING "gfs2_scan_dirent: wrong block type %u\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#541: FILE: fs/gfs2/dir.c:493:
+	unsigned offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#542: FILE: fs/gfs2/dir.c:494:
+	unsigned size;

ERROR:SPACING: space required before the open parenthesis '('
#567: FILE: fs/gfs2/dir.c:519:
+	} while(1);

ERROR:SPACING: space required before the open parenthesis '('
#569: FILE: fs/gfs2/dir.c:521:
+	switch(ret) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#577: FILE: fs/gfs2/dir.c:529:
+		BUG_ON(ret > 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#586: FILE: fs/gfs2/dir.c:538:
+
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#609: FILE: fs/gfs2/dir.c:561:
+		return IS_LEAF;
+	} else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#632: FILE: fs/gfs2/dir.c:584:
+	uint16_t cur_rec_len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: fs/gfs2/dir.c:610:
+        /* Only the first dent could ever have de_inum.no_addr == 0 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#681: FILE: fs/gfs2/dir.c:633:
+	uint16_t cur_rec_len, prev_rec_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#691: FILE: fs/gfs2/dir.c:643:
+	/* If there is no prev entry, this is the first entry in the block.
+	   The de_rec_len is already as big as it needs to be.  Just zero

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#692: FILE: fs/gfs2/dir.c:644:
+	   out the inode number and return.  */

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#695: FILE: fs/gfs2/dir.c:647:
+		cur->de_inum.no_addr = 0;	/* No endianess worries */
 		                         	      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#724: FILE: fs/gfs2/dir.c:676:
+	unsigned offset = 0, totlen;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: fs/gfs2/dir.c:681:
+	BUG_ON(offset + name->len > totlen);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: fs/gfs2/dir.c:694:
+^Ident = gfs2_dirent_scan(inode, bh->b_data, bh->b_size, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#742: FILE: fs/gfs2/dir.c:694:
+	struct gfs2_dirent *dent;
+	dent = gfs2_dirent_scan(inode, bh->b_data, bh->b_size, 

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#775: FILE: fs/gfs2/dir.c:727:
+	uint64_t leaf_no;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: fs/gfs2/dir.c:731:
+	error = gfs2_dir_read_data(dip, (char *)&leaf_no,
+				    index * sizeof(uint64_t),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#792: FILE: fs/gfs2/dir.c:744:
+	uint64_t leaf_no;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#814: FILE: fs/gfs2/dir.c:766:
+		unsigned hsize = 1 << ip->i_di.di_depth;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#815: FILE: fs/gfs2/dir.c:767:
+		unsigned index;

WARNING:LINE_SPACING: Missing a blank line after declarations
#817: FILE: fs/gfs2/dir.c:769:
+		u64 ln;
+		if (hsize * sizeof(u64) != ip->i_di.di_size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: fs/gfs2/dir.c:773:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: fs/gfs2/dir.c:788:
+^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#838: FILE: fs/gfs2/dir.c:790:
+		} while(!error);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#843: FILE: fs/gfs2/dir.c:795:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#843: FILE: fs/gfs2/dir.c:795:
+
+	

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dent"
#849: FILE: fs/gfs2/dir.c:801:
+	if (unlikely(dent == NULL || IS_ERR(dent))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#865: FILE: fs/gfs2/dir.c:817:
+	struct qstr name = { .name = "", .len = 0, .hash = 0 };
+	if (!bh)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#867: FILE: fs/gfs2/dir.c:819:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#876: FILE: fs/gfs2/dir.c:828:
+	dent = (struct gfs2_dirent *)(leaf+1);
 	                                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#898: FILE: fs/gfs2/dir.c:850:
+	uint32_t x;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#899: FILE: fs/gfs2/dir.c:851:
+	uint64_t *lp, bn;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: fs/gfs2/dir.c:871:
+	gfs2_buffer_copy_tail(bh, sizeof(struct gfs2_leaf), dibh,
+			     sizeof(struct gfs2_dinode));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#941: FILE: fs/gfs2/dir.c:893:
+	/*  Adjust the last dirent's record length
+	   (Remember that dent still points to the last entry.)  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#941: FILE: fs/gfs2/dir.c:893:
+	   (Remember that dent still points to the last entry.)  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#950: FILE: fs/gfs2/dir.c:902:
+	/*  We're done with the new leaf block, now setup the new
+	    hash table.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#950: FILE: fs/gfs2/dir.c:902:
+	    hash table.  */

WARNING:SPACING: space prohibited before semicolon
#965: FILE: fs/gfs2/dir.c:917:
+	for (x = sdp->sd_hash_ptrs, y = -1; x; x >>= 1, y++) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#965: FILE: fs/gfs2/dir.c:917:
+	for (x = sdp->sd_hash_ptrs, y = -1; x; x >>= 1, y++) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#990: FILE: fs/gfs2/dir.c:942:
+	uint32_t start, len, half_len, divider;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#991: FILE: fs/gfs2/dir.c:943:
+	uint64_t bn, *lp, leaf_no;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#992: FILE: fs/gfs2/dir.c:944:
+	uint32_t index;

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#1025: FILE: fs/gfs2/dir.c:977:
+		printk(KERN_WARNING "di_depth %u lf_depth %u index %u\n", dip->i_di.di_depth, be16_to_cpu(oleaf->lf_depth), index);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1025: FILE: fs/gfs2/dir.c:977:
+		printk(KERN_WARNING "di_depth %u lf_depth %u index %u\n", dip->i_di.di_depth, be16_to_cpu(oleaf->lf_depth), index);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1034: FILE: fs/gfs2/dir.c:986:
+	/* Change the pointers.
+	   Don't bother distinguishing stuffed from non-stuffed.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1035: FILE: fs/gfs2/dir.c:987:
+	   This code is complicated enough already. */

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1036: FILE: fs/gfs2/dir.c:988:
+	lp = kmalloc(half_len * sizeof(uint64_t), GFP_NOFS | __GFP_NOFAIL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#1065: FILE: fs/gfs2/dir.c:1017:
+			struct qstr str;
+			str.name = (char*)(dent+1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1065: FILE: fs/gfs2/dir.c:1017:
+			str.name = (char*)(dent+1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1065: FILE: fs/gfs2/dir.c:1017:
+			str.name = (char*)(dent+1);
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1076: FILE: fs/gfs2/dir.c:1028:
+			nleaf->lf_entries = cpu_to_be16(be16_to_cpu(nleaf->lf_entries)+1);
 			                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1082: FILE: fs/gfs2/dir.c:1034:
+			oleaf->lf_entries = cpu_to_be16(be16_to_cpu(oleaf->lf_entries)-1);
 			                                                              ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1128: FILE: fs/gfs2/dir.c:1080:
+	uint32_t hsize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1129: FILE: fs/gfs2/dir.c:1081:
+	uint64_t *buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1130: FILE: fs/gfs2/dir.c:1082:
+	uint64_t *from, *to;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1131: FILE: fs/gfs2/dir.c:1083:
+	uint64_t block;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1147: FILE: fs/gfs2/dir.c:1099:
+		error = gfs2_dir_read_data(dip, (char *)buf,
+					    block * sdp->sd_hash_bsize,

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#1159: FILE: fs/gfs2/dir.c:1111:
+			*to++ = *from;	/*  No endianess worries  */
 			              	       ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1164: FILE: fs/gfs2/dir.c:1116:
+		error = gfs2_dir_write_data(dip,
+					     (char *)buf + sdp->sd_hash_bsize,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1205: FILE: fs/gfs2/dir.c:1157:
+	uint32_t hash_a, hash_b;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1214: FILE: fs/gfs2/dir.c:1166:
+	if (hash_a > hash_b)
[...]
+	else if (hash_a < hash_b)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1218: FILE: fs/gfs2/dir.c:1170:
+	else {

WARNING:TYPO_SPELLING: 'collsions' may be misspelled - perhaps 'collisions'?
#1245: FILE: fs/gfs2/dir.c:1197:
+ * Jump through some hoops to make sure that if there are hash collsions,
                                                                ^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1260: FILE: fs/gfs2/dir.c:1212:
+	uint64_t off, off_next;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1284: FILE: fs/gfs2/dir.c:1236:
+			if (off_next == off) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1288: FILE: fs/gfs2/dir.c:1240:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1309: FILE: fs/gfs2/dir.c:1261:
+	/* Increment the *offset by one, so the next time we come into the
+	   do_filldir fxn, we get the next entry instead of the last one in the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1310: FILE: fs/gfs2/dir.c:1262:
+	   current leaf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1319: FILE: fs/gfs2/dir.c:1271:
+			      unsigned *depth, u64 leaf_no)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1324: FILE: fs/gfs2/dir.c:1276:
+	unsigned entries = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1325: FILE: fs/gfs2/dir.c:1277:
+	unsigned leaves = 0;

ERROR:SPACING: space required before the open parenthesis '('
#1344: FILE: fs/gfs2/dir.c:1296:
+	} while(lfn);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1350: FILE: fs/gfs2/dir.c:1302:
+	larr = vmalloc((leaves + entries) * sizeof(void*));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1368: FILE: fs/gfs2/dir.c:1320:
+			if (IS_ERR(dent)) {
+				goto out_kfree;
+			}

ERROR:SPACING: space required before the open parenthesis '('
#1376: FILE: fs/gfs2/dir.c:1328:
+	} while(lfn);

ERROR:SPACING: space required before the open parenthesis '('
#1381: FILE: fs/gfs2/dir.c:1333:
+	for(i = 0; i < leaf; i++)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1403: FILE: fs/gfs2/dir.c:1355:
+	uint32_t hsize, len = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1404: FILE: fs/gfs2/dir.c:1356:
+	uint32_t ht_offset, lp_offset, ht_offset_cur = -1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1405: FILE: fs/gfs2/dir.c:1357:
+	uint32_t hash, index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1406: FILE: fs/gfs2/dir.c:1358:
+	uint64_t *lp;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1409: FILE: fs/gfs2/dir.c:1361:
+	unsigned depth = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1430: FILE: fs/gfs2/dir.c:1382:
+			error = gfs2_dir_read_data(dip, (char *)lp,
+						ht_offset * sizeof(uint64_t),

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1483: FILE: fs/gfs2/dir.c:1435:
+	darr = kmalloc(dip->i_di.di_entries * sizeof(struct gfs2_dirent *),
+		       GFP_KERNEL);

ERROR:SPACING: space required before the open parenthesis '('
#1562: FILE: fs/gfs2/dir.c:1514:
+	} while(1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1596: FILE: fs/gfs2/dir.c:1548:
+		 const struct gfs2_inum *inum, unsigned type)

ERROR:SPACING: space required before the open parenthesis '('
#1604: FILE: fs/gfs2/dir.c:1556:
+	while(1) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1623: FILE: fs/gfs2/dir.c:1575:
+			ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1659: FILE: fs/gfs2/dir.c:1611:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1675: FILE: fs/gfs2/dir.c:1627:
+	/* Returns _either_ the entry (if its first in block) or the
+	   previous entry otherwise */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1675: FILE: fs/gfs2/dir.c:1627:
+	   previous entry otherwise */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1695: FILE: fs/gfs2/dir.c:1647:
+		u16 entries = be16_to_cpu(leaf->lf_entries);
+		if (!entries)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1709: FILE: fs/gfs2/dir.c:1661:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1757: FILE: fs/gfs2/dir.c:1709:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

WARNING:REPEATED_WORD: Possible repeated word: 'each'
#1766: FILE: fs/gfs2/dir.c:1718:
+ * @lc: the function to call for each each

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1777: FILE: fs/gfs2/dir.c:1729:
+	uint32_t hsize, len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1778: FILE: fs/gfs2/dir.c:1730:
+	uint32_t ht_offset, lp_offset, ht_offset_cur = -1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1779: FILE: fs/gfs2/dir.c:1731:
+	uint32_t index = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1780: FILE: fs/gfs2/dir.c:1732:
+	uint64_t *lp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1781: FILE: fs/gfs2/dir.c:1733:
+	uint64_t leaf_no;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: fs/gfs2/dir.c:1752:
+			error = gfs2_dir_read_data(dip, (char *)lp,
+						ht_offset * sizeof(uint64_t),

CHECK:BRACES: braces {} should be used on all arms of this statement
#1811: FILE: fs/gfs2/dir.c:1763:
+		if (leaf_no) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1824: FILE: fs/gfs2/dir.c:1776:
+		} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1851: FILE: fs/gfs2/dir.c:1803:
+			uint64_t leaf_no, void *data)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1857: FILE: fs/gfs2/dir.c:1809:
+	uint64_t blk, nblk;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1897: FILE: fs/gfs2/dir.c:1849:
+		struct gfs2_rgrpd *rgd;
+		rgd = rlist.rl_ghs[x].gh_gl->gl_object;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1906: FILE: fs/gfs2/dir.c:1858:
+	error = gfs2_trans_begin(sdp,
+			rg_blocks + (DIV_ROUND_UP(size, sdp->sd_jbsize) + 1) +

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1983: FILE: fs/gfs2/dir.c:1935:
+	/* Make this a regular file in case we crash.
+	   (We don't want to free these blocks a second time.)  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1983: FILE: fs/gfs2/dir.c:1935:
+	   (We don't want to free these blocks a second time.)  */

WARNING:TYPO_SPELLING: 'filname' may be misspelled - perhaps 'filename'?
#2005: FILE: fs/gfs2/dir.c:1957:
+ * @filname: the filename that's going to be added
     ^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2016: FILE: fs/gfs2/dir.c:1968:
+	if (!dent) {
+		return 1;
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2028: FILE: fs/gfs2/dir.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2054: FILE: fs/gfs2/dir.h:27:
+			      uint64_t offset,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2062: FILE: fs/gfs2/dir.h:35:
+int gfs2_dir_read(struct inode *inode, uint64_t * offset, void *opaque,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2076: FILE: fs/gfs2/dir.h:49:
+        return crc32_le(0xFFFFFFFF, data, len) ^ 0xFFFFFFFF;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2076: FILE: fs/gfs2/dir.h:49:
+        return crc32_le(0xFFFFFFFF, data, len) ^ 0xFFFFFFFF;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2079: FILE: fs/gfs2/dir.h:52:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2097: FILE: fs/gfs2/dir.h:70:
+	memcpy((char*)(dent+1), name->name, name->len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2097: FILE: fs/gfs2/dir.h:70:
+	memcpy((char*)(dent+1), name->name, name->len);
 	                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042286.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 61 warnings, 70 checks, 2049 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042286.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
