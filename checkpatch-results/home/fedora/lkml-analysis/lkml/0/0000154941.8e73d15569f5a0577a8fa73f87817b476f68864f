WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/base/memory.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#84: FILE: drivers/base/memory.c:2:
+ * drivers/base/memory.c - basic Memory class support

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#105: FILE: drivers/base/memory.c:23:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#106: FILE: drivers/base/memory.c:24:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: drivers/base/memory.c:39:
+static int memory_hotplug(struct kset *kset, struct kobject *kobj, char **envp,
+			int num_envp, char *buffer, int buffer_size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: drivers/base/memory.c:55:
+        return notifier_chain_register(&memory_chain, nb);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: drivers/base/memory.c:55:
+        return notifier_chain_register(&memory_chain, nb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: drivers/base/memory.c:60:
+        notifier_chain_unregister(&memory_chain, nb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/base/memory.c:60:
+        notifier_chain_unregister(&memory_chain, nb);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: drivers/base/memory.c:87:
+unregister_memory(struct memory_block *memory, struct mem_section *section,
+		struct node *root)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#171: FILE: drivers/base/memory.c:89:
+	BUG_ON(memory->sysdev.cls != &memory_sysdev_class);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: drivers/base/memory.c:90:
+	BUG_ON(memory->sysdev.id != __section_nr(section));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#205: FILE: drivers/base/memory.c:123:
+	switch (mem->state) {
+		case MEM_ONLINE:
[...]
+		case MEM_OFFLINE:
[...]
+		case MEM_GOING_OFFLINE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: drivers/base/memory.c:135:
+			len = sprintf(buf, "ERROR-UNKNOWN-%ld\n",
+					mem->state);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: drivers/base/memory.c:172:
+			if (PageReserved(first_page+i))
 			                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#257: FILE: drivers/base/memory.c:175:
+			printk(KERN_WARNING "section number %ld page number %d "

WARNING:SPLIT_STRING: quoted string split across lines
#258: FILE: drivers/base/memory.c:176:
+			printk(KERN_WARNING "section number %ld page number %d "
+				"not reserved, was it already online? \n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#258: FILE: drivers/base/memory.c:176:
+				"not reserved, was it already online? \n",

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#264: FILE: drivers/base/memory.c:182:
+	switch (action) {
+		case MEM_ONLINE:
[...]
+		case MEM_OFFLINE:
[...]
+		default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#282: FILE: drivers/base/memory.c:200:
+			printk(KERN_WARNING "%s(%p, %ld) unknown action: %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: drivers/base/memory.c:201:
+			printk(KERN_WARNING "%s(%p, %ld) unknown action: %ld\n",
+					__FUNCTION__, mem, action, action);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#283: FILE: drivers/base/memory.c:201:
+					__FUNCTION__, mem, action, action);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/base/memory.c:215:
+static int memory_block_change_state(struct memory_block *mem,
+		unsigned long to_state, unsigned long from_state_req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#300: FILE: drivers/base/memory.c:218:
+	int ret = 0;
+	down(&mem->state_sem);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(int, count, 6)
#329: FILE: drivers/base/memory.c:247:
+	if (!strncmp(buf, "XXXXXX", min((int)count, 6)))
 		ret = memory_block_change_state(mem, MEM_ONLINE, MEM_OFFLINE);

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: drivers/base/memory.c:249:
+	else if(!strncmp(buf, "offline", min((int)count, 7)))

WARNING:MINMAX: min() should probably be min_t(int, count, 7)
#331: FILE: drivers/base/memory.c:249:
+	else if(!strncmp(buf, "XXXXXXX", min((int)count, 7)))
 		ret = memory_block_change_state(mem, MEM_OFFLINE, MEM_ONLINE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mem' may be better as '(mem)' to avoid precedence issues
#359: FILE: drivers/base/memory.c:277:
+#define mem_create_simple_file(mem, attr_name)	\
+	sysdev_create_file(&mem->sysdev, &attr_##attr_name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mem' may be better as '(mem)' to avoid precedence issues
#361: FILE: drivers/base/memory.c:279:
+#define mem_remove_simple_file(mem, attr_name)	\
+	sysdev_remove_file(&mem->sysdev, &attr_##attr_name)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/base/memory.c:296:
+	sysfs_create_file(&memory_sysdev_class.kset.kobj,
+		&class_attr_block_size_bytes.attr);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#395: FILE: drivers/base/memory.c:313:
+	phys_addr = simple_strtoull(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: drivers/base/memory.c:327:
+	sysfs_create_file(&memory_sysdev_class.kset.kobj,
+		&class_attr_probe.attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: drivers/base/memory.c:400:
+int remove_memory_block(unsigned long node_id, struct mem_section *section,
+		int phys_device)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#542: FILE: include/linux/memory.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#543: FILE: include/linux/memory.h:2:
+ * include/linux/memory.h - generic memory definition

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct memory_block *' should also have an identifier name
#577: FILE: include/linux/memory.h:36:
+	int (*phys_callback)(struct memory_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#582: FILE: include/linux/memory.h:41:
+#define	MEM_ONLINE		(1<<0) /* exposed to userspace */
        	          		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#582: FILE: include/linux/memory.h:41:
+#define	MEM_ONLINE		(1<<0) /* exposed to userspace */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#583: FILE: include/linux/memory.h:42:
+#define	MEM_GOING_OFFLINE	(1<<1) /* exposed to userspace */
        	                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#583: FILE: include/linux/memory.h:42:
+#define	MEM_GOING_OFFLINE	(1<<1) /* exposed to userspace */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#584: FILE: include/linux/memory.h:43:
+#define	MEM_OFFLINE		(1<<2) /* exposed to userspace */
        	           		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#584: FILE: include/linux/memory.h:43:
+#define	MEM_OFFLINE		(1<<2) /* exposed to userspace */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#596: FILE: include/linux/memory.h:55:
+#define	MEM_MAPPING_INVALID	(1<<3)
        	                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#596: FILE: include/linux/memory.h:55:
+#define	MEM_MAPPING_INVALID	(1<<3)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#603: FILE: include/linux/memory.h:62:
+}
+static inline int register_memory_notifier(struct notifier_block *nb)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#607: FILE: include/linux/memory.h:66:
+}
+static inline void unregister_memory_notifier(struct notifier_block *nb)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: include/linux/memory.h:70:
+extern int register_memory(struct memory_block *, struct mem_section *section, struct node *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#612: FILE: include/linux/memory.h:71:
+extern int register_new_memory(struct mem_section *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_section *' should also have an identifier name
#612: FILE: include/linux/memory.h:71:
+extern int register_new_memory(struct mem_section *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#613: FILE: include/linux/memory.h:72:
+extern int unregister_memory_section(struct mem_section *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_section *' should also have an identifier name
#613: FILE: include/linux/memory.h:72:
+extern int unregister_memory_section(struct mem_section *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#614: FILE: include/linux/memory.h:73:
+extern int memory_dev_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#615: FILE: include/linux/memory.h:74:
+extern int register_memory_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: include/linux/memory.h:75:
+extern void unregister_memory_notifier(struct notifier_block *nb);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#618: FILE: include/linux/memory.h:77:
+#define CONFIG_MEM_BLOCK_SIZE	(PAGES_PER_SECTION<<PAGE_SHIFT)
                              	                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#620: FILE: include/linux/memory.h:79:
+extern int invalidate_phys_mapping(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#620: FILE: include/linux/memory.h:79:
+extern int invalidate_phys_mapping(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#620: FILE: include/linux/memory.h:79:
+extern int invalidate_phys_mapping(unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: include/linux/memory.h:82:
+extern int register_memory_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: include/linux/memory.h:83:
+extern void unregister_memory_notifier(struct notifier_block *nb);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#652: FILE: include/linux/memory_hotplug.h:51:
 }
+extern int zone_grow_free_lists(struct zone *zone, unsigned long new_nr_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#652: FILE: include/linux/memory_hotplug.h:51:
+extern int zone_grow_free_lists(struct zone *zone, unsigned long new_nr_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: include/linux/memory_hotplug.h:52:
+extern int zone_grow_waitqueues(struct zone *zone, unsigned long nr_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: include/linux/memory_hotplug.h:53:
+extern int add_one_highpage(struct page *page, int pfn, int bad_ppro);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/linux/memory_hotplug.h:55:
+extern void online_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/memory_hotplug.h:57:
+extern int add_memory(u64 start, u64 size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/memory_hotplug.h:58:
+extern int remove_memory(u64 start, u64 size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: include/linux/memory_hotplug.h:59:
+extern int online_pages(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#660: FILE: include/linux/memory_hotplug.h:59:
+extern int online_pages(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#660: FILE: include/linux/memory_hotplug.h:59:
+extern int online_pages(unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: include/linux/memory_hotplug.h:62:
+extern int __add_pages(struct zone *zone, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: include/linux/memory_hotplug.h:63:
+extern int __add_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#675: FILE: include/linux/memory_hotplug.h:86:
+	printk(KERN_WARNING "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", func);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#677: FILE: include/linux/memory_hotplug.h:88:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: include/linux/memory_hotplug.h:92:
+static inline int __add_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#683: FILE: include/linux/memory_hotplug.h:94:
+	return mhp_notimplemented(__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: include/linux/memory_hotplug.h:98:
+static inline int __remove_pages(struct zone *zone, unsigned long start_pfn,
+	unsigned long nr_pages)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#689: FILE: include/linux/memory_hotplug.h:100:
+	printk(KERN_WARNING "%s() called, not yet supported\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#689: FILE: include/linux/memory_hotplug.h:100:
+	printk(KERN_WARNING "%s() called, not yet supported\n", __FUNCTION__);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#691: FILE: include/linux/memory_hotplug.h:102:
+	return -ENOSYS;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#701: FILE: include/linux/mm.h:794:
+extern void setup_per_zone_pages_min(void);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#714: FILE: mm/Kconfig:116:
+config MEMORY_HOTPLUG
+	bool "Allow for memory hot-add"
+	depends on SPARSEMEM && HOTPLUG && !SOFTWARE_SUSPEND
+
+comment "Memory hotplug is currently incompatible with Software Suspend"
+	depends on SPARSEMEM && HOTPLUG && SOFTWARE_SUSPEND

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#734: FILE: mm/memory_hotplug.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#735: FILE: mm/memory_hotplug.c:2:
+ *  linux/mm/memory_hotplug.c

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: mm/memory_hotplug.c:107:
+int __add_pages(struct zone *zone, unsigned long phys_start_pfn,
+		 unsigned long nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#856: FILE: mm/memory_hotplug.c:123:
+static void grow_zone_span(struct zone *zone,
+		unsigned long start_pfn, unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: mm/memory_hotplug.c:140:
+static void grow_pgdat_span(struct pglist_data *pgdat,
+		unsigned long start_pfn, unsigned long end_pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#905: FILE: mm/memory_hotplug.c:172:
+		struct page *page = pfn_to_page(pfn + i);
+		online_page(page);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#920: FILE: mm/page_alloc.c:1666:
+void __devinit memmap_init_zone(unsigned long size, int nid, unsigned long zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#921: FILE: mm/page_alloc.c:1667:
+void __devinit memmap_init_zone(unsigned long size, int nid, unsigned long zone,
 		unsigned long start_pfn)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154941.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 37 warnings, 48 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154941.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
