ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#84: FILE: init/Kconfig:227:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#85: FILE: init/Kconfig:228:
+config IKPATCHES
+	bool "Kernel .patches support"
+	---help---
+	  This option enables the complete Linux kernel ".patches" file
+	  contents to be saved in the kernel. It provides documentation
+	  of which kernel patches are applied in a running kernel. This
+	  information can be extracted from the kernel image file with
+	  the script scripts/extract-ikpatches and used as input to
+	  rebuild the current kernel or to build another kernel.
+	  It can also be extracted from a running kernel by reading
+	  /proc/patches.gz if enabled (below).
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#97: FILE: init/Kconfig:240:
+config IKPATCHES_PROC
+	bool "Enable access to .patches through /proc/patches.gz"
+	depends on IKPATCHES && PROC_FS
+	---help---
+	  This option enables access to the kernel patches file
+	  through /proc/patches.gz.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: kernel/patches.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#147: FILE: kernel/patches.c:2:
+ * kernel/patches.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#164: FILE: kernel/patches.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#165: FILE: kernel/patches.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#174: FILE: kernel/patches.c:29:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: kernel/patches.c:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: kernel/patches.c:61:
+ikpatches_read_current(struct file *file, char __user *buf,
+		      size_t len, loff_t * offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#206: FILE: kernel/patches.c:61:
+		      size_t len, loff_t * offset)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#208: FILE: kernel/patches.c:63:
+	loff_t pos =3D *offset;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#208: FILE: kernel/patches.c:63:
+	loff_t pos =3D *offset;
 	               ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#211: FILE: kernel/patches.c:66:
+	if (pos >=3D kernel_patches_data_size)
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#214: FILE: kernel/patches.c:69:
+	count =3D min(len, (size_t)(kernel_patches_data_size - pos));
 	      ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#218: FILE: kernel/patches.c:73:
+	*offset +=3D count;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#222: FILE: kernel/patches.c:77:
+static struct file_operations ikpatches_file_ops =3D {
                                                  ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#222: FILE: kernel/patches.c:77:
+static struct file_operations ikpatches_file_ops =3D {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#223: FILE: kernel/patches.c:78:
+	.owner =3D THIS_MODULE,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#224: FILE: kernel/patches.c:79:
+	.read =3D ikpatches_read_current,
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#235: FILE: kernel/patches.c:90:
+	entry =3D create_proc_entry("patches.gz", S_IFREG | S_IRUGO,
 	      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#235: FILE: kernel/patches.c:90:
+	entry =3D create_proc_entry("patches.gz", S_IFREG | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#240: FILE: kernel/patches.c:95:
+	entry->proc_fops =3D &ikpatches_file_ops;
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#240: FILE: kernel/patches.c:95:
+	entry->proc_fops =3D &ikpatches_file_ops;
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#241: FILE: kernel/patches.c:96:
+	entry->size =3D kernel_patches_data_size;
 	            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173213.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 7 warnings, 4 checks, 170 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173213.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
