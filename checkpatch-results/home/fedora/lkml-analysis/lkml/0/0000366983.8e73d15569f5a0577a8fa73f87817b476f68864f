WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#	           ChangeSet	1.1156  -> 1.1157 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	       net/atm/mpc.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	      net/atm/proc.c	1.14    -> 1.15   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	       net/atm/lec.h	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	       net/atm/lec.c	1.22    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	       net/atm/mpc.c	1.15    -> 1.16   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	    net/atm/common.c	1.25    -> 1.26   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# 03/05/18	chas@relax.cmf.nrl.navy.mil	1.1157

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# lane and mpoa module refcounting and locking cleanup

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#45: 
--- a/net/atm/common.c	Sun May 18 18:30:28 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#77: FILE: net/atm/common.c:58:
+EXPORT_SYMBOL(try_atm_lane_ops);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#78: FILE: net/atm/common.c:59:
+EXPORT_SYMBOL(atm_lane_ops_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#112: FILE: net/atm/common.c:89:
+EXPORT_SYMBOL(atm_mpoa_ops_set);

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: net/atm/common.c:772:
+                        if (!atm_lane_ops)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: net/atm/common.c:772:
+                        if (!atm_lane_ops)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#127: FILE: net/atm/common.c:775:
+			if (try_atm_lane_ops()) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#128: FILE: net/atm/common.c:776:
+				error = atm_lane_ops->lecd_attach(vcc, (int) arg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#133: FILE: net/atm/common.c:781:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#149: FILE: net/atm/common.c:789:
+			if (try_atm_lane_ops()) {
[...]
+			} else
[...]

CHECK:SPACING: No space is necessary after a cast
#150: FILE: net/atm/common.c:790:
+				ret_val = atm_lane_ops->mcast_attach(vcc, (int) arg);

CHECK:BRACES: Unbalanced braces around else statement
#152: FILE: net/atm/common.c:792:
+			} else

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#153: FILE: net/atm/common.c:793:
+				ret_val = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#163: FILE: net/atm/common.c:800:
+			if (try_atm_lane_ops()) {
[...]
+			} else
[...]

CHECK:SPACING: No space is necessary after a cast
#164: FILE: net/atm/common.c:801:
+				ret_val = atm_lane_ops->vcc_attach(vcc, (void *) arg);

CHECK:BRACES: Unbalanced braces around else statement
#166: FILE: net/atm/common.c:803:
+			} else

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#167: FILE: net/atm/common.c:804:
+				ret_val = -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: net/atm/common.c:815:
+                                request_module("mpoa");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: net/atm/common.c:815:
+                                request_module("mpoa");$

CHECK:BRACES: braces {} should be used on all arms of this statement
#182: FILE: net/atm/common.c:817:
+			if (try_atm_mpoa_ops()) {
[...]
+			} else
[...]

CHECK:SPACING: No space is necessary after a cast
#183: FILE: net/atm/common.c:818:
+				error = atm_mpoa_ops->mpoad_attach(vcc, (int) arg);

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: net/atm/common.c:823:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: net/atm/common.c:831:
+			if (try_atm_mpoa_ops()) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: net/atm/common.c:834:
+			} else

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#208: FILE: net/atm/common.c:835:
+				ret_val = -ENOSYS;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#290: FILE: net/atm/lec.c:72:
+static inline struct lec_arp_table* lec_arp_find(struct lec_priv *priv,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: net/atm/lec.c:73:
+static inline struct lec_arp_table* lec_arp_find(struct lec_priv *priv,
                                                      unsigned char *mac_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: net/atm/lec.c:75:
+static inline int lec_arp_remove(struct lec_priv *priv,
 				     struct lec_arp_table *to_remove);

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: net/atm/lec.c:437:
+                lec_arp_remove(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: net/atm/lec.c:437:
+                lec_arp_remove(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: net/atm/lec.c:553:
+        module_put(THIS_MODULE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: net/atm/lec.c:553:
+        module_put(THIS_MODULE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: net/atm/lec.c:834:
+        __module_get(THIS_MODULE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: net/atm/lec.c:834:
+        __module_get(THIS_MODULE);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: net/atm/lec.c:838:
+static struct atm_lane_ops __atm_lane_ops = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: net/atm/lec.c:842:
+^I.vcc_attach = ^Ilec_vcc_attach,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#360: FILE: net/atm/lec.c:843:
+^I.get_lec = ^Iget_dev_lec,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: net/atm/lec.c:844:
+^I.owner = ^ITHIS_MODULE$

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: net/atm/lec.c:849:
+        atm_lane_ops_set(&__atm_lane_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: net/atm/lec.c:849:
+        atm_lane_ops_set(&__atm_lane_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: net/atm/lec.c:850:
+        printk("lec.c: " __DATE__ " " __TIME__ " initialized\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: net/atm/lec.c:850:
+        printk("lec.c: " __DATE__ " " __TIME__ " initialized\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#371: FILE: net/atm/lec.c:850:
+        printk("lec.c: " __DATE__ " " __TIME__ " initialized\n");

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#371: FILE: net/atm/lec.c:850:
+        printk("lec.c: " __DATE__ " " __TIME__ " initialized\n");

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#371: FILE: net/atm/lec.c:850:
+        printk("lec.c: " __DATE__ " " __TIME__ " initialized\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: net/atm/lec.c:859:
+        atm_lane_ops_set(NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: net/atm/lec.c:859:
+        atm_lane_ops_set(NULL);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: net/atm/lec.c:1106:
+static inline void $

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: net/atm/lec.c:1113:
+        spin_lock_irqsave(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: net/atm/lec.c:1113:
+        spin_lock_irqsave(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: net/atm/lec.c:1116:
+        tmp = priv->lec_arp_tables[place];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: net/atm/lec.c:1116:
+        tmp = priv->lec_arp_tables[place];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: net/atm/lec.c:1119:
+                priv->lec_arp_tables[place] = to_add;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: net/atm/lec.c:1119:
+                priv->lec_arp_tables[place] = to_add;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: net/atm/lec.c:1127:
+        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: net/atm/lec.c:1127:
+        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: net/atm/lec.c:1138:
+static inline int $

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: net/atm/lec.c:1147:
+        spin_lock_irqsave(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: net/atm/lec.c:1147:
+        spin_lock_irqsave(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: net/atm/lec.c:1150:
+                spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: net/atm/lec.c:1150:
+                spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: net/atm/lec.c:1154:
+        tmp = priv->lec_arp_tables[place];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: net/atm/lec.c:1154:
+        tmp = priv->lec_arp_tables[place];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: net/atm/lec.c:1156:
+                priv->lec_arp_tables[place] = tmp->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: net/atm/lec.c:1156:
+                priv->lec_arp_tables[place] = tmp->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: net/atm/lec.c:1162:
+                        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: net/atm/lec.c:1162:
+                        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: net/atm/lec.c:1176:
+                        for(tmp = priv->lec_arp_tables[place]; tmp != NULL; tmp = tmp->next) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: net/atm/lec.c:1176:
+                        for(tmp = priv->lec_arp_tables[place]; tmp != NULL; tmp = tmp->next) {$

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: net/atm/lec.c:1176:
+                        for(tmp = priv->lec_arp_tables[place]; tmp != NULL; tmp = tmp->next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#486: FILE: net/atm/lec.c:1176:
+                        for(tmp = priv->lec_arp_tables[place]; tmp != NULL; tmp = tmp->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: net/atm/lec.c:1189:
+        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: net/atm/lec.c:1189:
+        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: net/atm/lec.c:1385:
+                        lec_arp_remove(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: net/atm/lec.c:1385:
+                        lec_arp_remove(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: net/atm/lec.c:1578:
+                        for(entry = priv->lec_arp_tables[i]; entry != NULL; ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: net/atm/lec.c:1578:
+                        for(entry = priv->lec_arp_tables[i]; entry != NULL; ) {$

ERROR:SPACING: space required before the open parenthesis '('
#531: FILE: net/atm/lec.c:1578:
+                        for(entry = priv->lec_arp_tables[i]; entry != NULL; ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#531: FILE: net/atm/lec.c:1578:
+                        for(entry = priv->lec_arp_tables[i]; entry != NULL; ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: net/atm/lec.c:1594:
+                                        lec_arp_remove(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: net/atm/lec.c:1594:
+                                        lec_arp_remove(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: net/atm/lec.c:1687:
+                lec_arp_add(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: net/atm/lec.c:1687:
+                lec_arp_add(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: net/atm/lec.c:1720:
+                                lec_arp_remove(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: net/atm/lec.c:1720:
+                                lec_arp_remove(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: net/atm/lec.c:1786:
+                                lec_arp_add(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: net/atm/lec.c:1786:
+                                lec_arp_add(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: net/atm/lec.c:1806:
+                lec_arp_add(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: net/atm/lec.c:1806:
+                lec_arp_add(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: net/atm/lec.c:2057:
+        lec_arp_add(priv, to_add);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: net/atm/lec.c:2057:
+        lec_arp_add(priv, to_add);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: net/atm/lec.c:2075:
+                                lec_arp_remove(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: net/atm/lec.c:2075:
+                                lec_arp_remove(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: net/atm/lec.c:2161:
+                spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: net/atm/lec.c:2161:
+                spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: net/atm/lec.c:2164:
+                        lec_arp_remove(priv, prev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: net/atm/lec.c:2164:
+                        lec_arp_remove(priv, prev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: net/atm/lec.c:2167:
+                lec_arp_add(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: net/atm/lec.c:2167:
+                lec_arp_add(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: net/atm/lec.c:2171:
+        spin_lock_irqsave(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: net/atm/lec.c:2171:
+        spin_lock_irqsave(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: net/atm/lec.c:2181:
+                spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: net/atm/lec.c:2181:
+                spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#641: FILE: net/atm/lec.c:2189:
+        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: net/atm/lec.c:2189:
+        spin_unlock_irqrestore(&priv->lec_arp_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: net/atm/lec.c:2191:
+                lec_arp_remove(priv, prev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: net/atm/lec.c:2191:
+                lec_arp_remove(priv, prev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: net/atm/lec.c:2194:
+        lec_arp_add(priv, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: net/atm/lec.c:2194:
+        lec_arp_add(priv, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: net/atm/lec.h:67:
+        struct net_device * (*get_lec)(int itf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: net/atm/lec.h:67:
+        struct net_device * (*get_lec)(int itf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: net/atm/lec.h:68:
+        struct module *owner;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: net/atm/lec.h:68:
+        struct module *owner;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: net/atm/lec.h:106:
+        spinlock_t lec_arp_lock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: net/atm/lec.h:106:
+        spinlock_t lec_arp_lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#669: FILE: net/atm/lec.h:106:
+        spinlock_t lec_arp_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#704: FILE: net/atm/mpc.c:255:
+	struct net_device *dev;
+	if (!try_atm_lane_ops())

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#719: FILE: net/atm/mpc.c:783:
+		if (priv->lane_version < 2) {
[...]
-		else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#723: FILE: net/atm/mpc.c:786:
+		} else

ERROR:SPACING: space required before the open parenthesis '('
#899: FILE: net/atm/proc.c:498:
+	for(d = 0; d < MAX_LEC_ITF; d++) {

CHECK:SPACING: No space is necessary after a cast
#901: FILE: net/atm/proc.c:500:
+		if (!dev || !(priv = (struct lec_priv *) dev->priv))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#901: FILE: net/atm/proc.c:500:
+		if (!dev || !(priv = (struct lec_priv *) dev->priv))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open parenthesis '('
#904: FILE: net/atm/proc.c:503:
+		for(i = 0; i < LEC_ARP_TABLE_SIZE; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#905: FILE: net/atm/proc.c:504:
+			for(entry = priv->lec_arp_tables[i]; entry; entry = entry->next) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#908: FILE: net/atm/proc.c:507:
+				e = sprintf(buf,"%s ", dev->name);
 				               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#909: FILE: net/atm/proc.c:508:
+				lec_info(entry, buf+e);
 				                   ^

ERROR:SPACING: space required before the open parenthesis '('
#920: FILE: net/atm/proc.c:515:
+		for(entry = priv->lec_arp_empty_ones; entry; entry = entry->next) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#923: FILE: net/atm/proc.c:518:
+			e = sprintf(buf,"%s ", dev->name);
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#934: FILE: net/atm/proc.c:525:
+		for(entry = priv->lec_no_forward; entry; entry=entry->next) {
 		                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#934: FILE: net/atm/proc.c:525:
+		for(entry = priv->lec_no_forward; entry; entry=entry->next) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#937: FILE: net/atm/proc.c:528:
+			e = sprintf(buf,"%s ", dev->name);
 			               ^

ERROR:SPACING: space required before the open parenthesis '('
#948: FILE: net/atm/proc.c:535:
+		for(entry = priv->mcast_fwds; entry; entry = entry->next) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: net/atm/proc.c:538:
+			e = sprintf(buf,"%s ", dev->name);
 			               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366983.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 69 warnings, 23 checks, 853 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366983.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
