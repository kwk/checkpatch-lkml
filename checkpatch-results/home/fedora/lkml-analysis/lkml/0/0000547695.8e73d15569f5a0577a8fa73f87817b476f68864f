WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
diff -urpN linux-2.4.2/Documentation/Configure.help linux-2.4.2-irda-patch/Documentation/Configure.help

WARNING:TYPO_SPELLING: 'pecularities' may be misspelled - perhaps 'peculiarities'?
#51: FILE: Documentation/Configure.help:16857:
+  various IrDA USB dongles available and most of their pecularities.
                                                        ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: drivers/net/irda/irda-usb.c:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: drivers/net/irda/irda-usb.c:6:
+ * Status:        Experimental $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: drivers/net/irda/irda-usb.c:12:
+ *          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#133: FILE: drivers/net/irda/irda-usb.c:24:
+ *^Ialong with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#134: FILE: drivers/net/irda/irda-usb.c:25:
+ *^IFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#157: FILE: drivers/net/irda/irda-usb.c:48:
+static int qos_mtt_bits = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#192: FILE: drivers/net/irda/irda-usb.c:83:
+/*
+ * This routine is called by the USB subsystem for each new device

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: drivers/net/irda/irda-usb.c:90:
+static void *irda_usb_probe(struct usb_device *dev, unsigned int ifnum,
+			   const struct usb_device_id *id)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#213: FILE: drivers/net/irda/irda-usb.c:104:
+	IRDA_DEBUG(0, "Vendor: %x, Product: %x\n", dev->descriptor.idVendor, dev->descriptor.idProduct);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#213: FILE: drivers/net/irda/irda-usb.c:104:
+	IRDA_DEBUG(0, "Vendor: %x, Product: %x\n", dev->descriptor.idVendor, dev->descriptor.idProduct);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#213: FILE: drivers/net/irda/irda-usb.c:104:
+	IRDA_DEBUG(0, "Vendor: %x, Product: %x\n", dev->descriptor.idVendor, dev->descriptor.idProduct);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: drivers/net/irda/irda-usb.c:105:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#217: FILE: drivers/net/irda/irda-usb.c:108:
+	for (dongle=dongles;dongle->idVendor;dongle++) {
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#217: FILE: drivers/net/irda/irda-usb.c:108:
+	for (dongle=dongles;dongle->idVendor;dongle++) {
 	                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#217: FILE: drivers/net/irda/irda-usb.c:108:
+	for (dongle=dongles;dongle->idVendor;dongle++) {
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: drivers/net/irda/irda-usb.c:109:
+^I^Iif ((dev->descriptor.idVendor == dongle->idVendor) && $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#218: FILE: drivers/net/irda/irda-usb.c:109:
+		if ((dev->descriptor.idVendor == dongle->idVendor) && 
+		    (dev->descriptor.idProduct == dongle->idProduct)) 
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 28)
#218: FILE: drivers/net/irda/irda-usb.c:109:
+		if ((dev->descriptor.idVendor == dongle->idVendor) && 
[...]
+		{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->descriptor.idVendor == dongle->idVendor'
#218: FILE: drivers/net/irda/irda-usb.c:109:
+		if ((dev->descriptor.idVendor == dongle->idVendor) && 
+		    (dev->descriptor.idProduct == dongle->idProduct)) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->descriptor.idProduct == dongle->idProduct'
#218: FILE: drivers/net/irda/irda-usb.c:109:
+		if ((dev->descriptor.idVendor == dongle->idVendor) && 
+		    (dev->descriptor.idProduct == dongle->idProduct)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: drivers/net/irda/irda-usb.c:110:
+^I^I    (dev->descriptor.idProduct == dongle->idProduct)) $

CHECK:CAMELCASE: Avoid CamelCase: <idCapability>
#222: FILE: drivers/net/irda/irda-usb.c:113:
+			    capability = dongle->idCapability;

WARNING:TABSTOP: Statements should start on a tabstop
#223: FILE: drivers/net/irda/irda-usb.c:114:
+			    break;

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#228: FILE: drivers/net/irda/irda-usb.c:119:
+		class = dev->actconfig->interface[ifnum].altsetting[0].bInterfaceClass;

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#229: FILE: drivers/net/irda/irda-usb.c:120:
+		subclass = dev->actconfig->interface[ifnum].altsetting[0].bInterfaceSubClass;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: drivers/net/irda/irda-usb.c:122:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'class != USB_CLASS_APP_SPEC'
#232: FILE: drivers/net/irda/irda-usb.c:123:
+		if ((class != USB_CLASS_APP_SPEC) || (subclass != USB_CLASS_IRDA))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'subclass != USB_CLASS_IRDA'
#232: FILE: drivers/net/irda/irda-usb.c:123:
+		if ((class != USB_CLASS_APP_SPEC) || (subclass != USB_CLASS_IRDA))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: drivers/net/irda/irda-usb.c:126:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#241: FILE: drivers/net/irda/irda-usb.c:132:
+	 * Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: drivers/net/irda/irda-usb.c:135:
+		struct irda_usb_cb *irda = &irda_instance[i];
+		if ((irda->usbdev != NULL) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irda->usbdev != NULL'
#244: FILE: drivers/net/irda/irda-usb.c:135:
+		if ((irda->usbdev != NULL) &&
+		    (irda->present == 0) &&
+		    (irda->netopen == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irda->present == 0'
#244: FILE: drivers/net/irda/irda-usb.c:135:
+		if ((irda->usbdev != NULL) &&
+		    (irda->present == 0) &&
+		    (irda->netopen == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irda->netopen == 0'
#244: FILE: drivers/net/irda/irda-usb.c:135:
+		if ((irda->usbdev != NULL) &&
+		    (irda->present == 0) &&
+		    (irda->netopen == 0)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irda->usbdev"
#244: FILE: drivers/net/irda/irda-usb.c:135:
+		if ((irda->usbdev != NULL) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#247: FILE: drivers/net/irda/irda-usb.c:138:
+			IRDA_DEBUG(0, __FUNCTION__ "(), found a zombie instance !!!\n");

CHECK:SPACING: No space is necessary after a cast
#248: FILE: drivers/net/irda/irda-usb.c:139:
+			irda_usb_disconnect(irda->usbdev, (void *) irda);

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: drivers/net/irda/irda-usb.c:146:
+		if(irda_instance[i].usbdev == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irda_instance[i].usbdev"
#255: FILE: drivers/net/irda/irda-usb.c:146:
+		if(irda_instance[i].usbdev == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#260: FILE: drivers/net/irda/irda-usb.c:151:
+	if (self == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#271: FILE: drivers/net/irda/irda-usb.c:162:
+	if (usb_set_configuration (dev, dev->config[0].bConfigurationValue) < 0) {

CHECK:CAMELCASE: Avoid CamelCase: <bConfigurationValue>
#271: FILE: drivers/net/irda/irda-usb.c:162:
+	if (usb_set_configuration (dev, dev->config[0].bConfigurationValue) < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: drivers/net/irda/irda-usb.c:166:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: drivers/net/irda/irda-usb.c:167:
+        /* Is this really necessary? */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#279: FILE: drivers/net/irda/irda-usb.c:170:
+	switch (ret) {
+		case USB_ST_NOERROR:		/* 0 */
[...]
+		case USB_ST_STALL:		/* -EPIPE = -32 */
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space prohibited before that close parenthesis ')'
#284: FILE: drivers/net/irda/irda-usb.c:175:
+			IRDA_DEBUG(0, __FUNCTION__ "(), Clearing stall on control interface\n" );

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#284: FILE: drivers/net/irda/irda-usb.c:175:
+			IRDA_DEBUG(0, __FUNCTION__ "(), Clearing stall on control interface\n" );

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#287: FILE: drivers/net/irda/irda-usb.c:178:
+			IRDA_DEBUG(0, __FUNCTION__ "(), Unknown error %d\n", ret);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#289: FILE: drivers/net/irda/irda-usb.c:180:
+			return NULL;
+			break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: drivers/net/irda/irda-usb.c:182:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#295: FILE: drivers/net/irda/irda-usb.c:186:
+	ep = endpoint[0].bEndpointAddress & USB_ENDPOINT_NUMBER_MASK;

CHECK:BRACES: braces {} should be used on all arms of this statement
#296: FILE: drivers/net/irda/irda-usb.c:187:
+	if ((endpoint[0].bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_IN)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#298: FILE: drivers/net/irda/irda-usb.c:189:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#300: FILE: drivers/net/irda/irda-usb.c:191:
+		self->bulk_out_mtu = endpoint[0].wMaxPacketSize;

CHECK:BRACES: braces {} should be used on all arms of this statement
#304: FILE: drivers/net/irda/irda-usb.c:195:
+	if ((endpoint[1].bEndpointAddress & USB_ENDPOINT_DIR_MASK) == USB_DIR_IN)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: drivers/net/irda/irda-usb.c:197:
+	else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#311: FILE: drivers/net/irda/irda-usb.c:202:
+	if (self->bulk_out_ep == 0 || self->bulk_in_ep == 0 ||
+	    endpoint [0].bmAttributes != USB_ENDPOINT_XFER_BULK ||
+	    endpoint [1].bmAttributes != USB_ENDPOINT_XFER_BULK) 
+	{

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#312: FILE: drivers/net/irda/irda-usb.c:203:
+	    endpoint [0].bmAttributes != USB_ENDPOINT_XFER_BULK ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: drivers/net/irda/irda-usb.c:204:
+^I    endpoint [1].bmAttributes != USB_ENDPOINT_XFER_BULK) $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#315: FILE: drivers/net/irda/irda-usb.c:206:
+		ERROR(__FUNCTION__ "(), Bogus endpoints");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irda_desc"
#321: FILE: drivers/net/irda/irda-usb.c:212:
+	if (irda_desc == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: drivers/net/irda/irda-usb.c:214:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: drivers/net/irda/irda-usb.c:215:
+^Iself->irda_desc =  irda_desc;^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#337: FILE: drivers/net/irda/irda-usb.c:228:
+/*
+ * Function irda_usb_find_class_desc(dev, ifnum)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: drivers/net/irda/irda-usb.c:238:
+^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: drivers/net/irda/irda-usb.c:239:
+	desc = kmalloc(sizeof (struct irda_class_desc), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*desc)...) over kmalloc(sizeof (struct irda_class_desc)...)
#348: FILE: drivers/net/irda/irda-usb.c:239:
+	desc = kmalloc(sizeof (struct irda_class_desc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: drivers/net/irda/irda-usb.c:240:
+^Iif (desc == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#349: FILE: drivers/net/irda/irda-usb.c:240:
+	if (desc == NULL) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/net/irda/irda-usb.c:243:
+^I$

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#353: FILE: drivers/net/irda/irda-usb.c:244:
+	ret = usb_get_class_descriptor(dev, ifnum, USB_DT_IRDA, 0, (void *) desc, sizeof(struct irda_class_desc));

CHECK:SPACING: No space is necessary after a cast
#353: FILE: drivers/net/irda/irda-usb.c:244:
+	ret = usb_get_class_descriptor(dev, ifnum, USB_DT_IRDA, 0, (void *) desc, sizeof(struct irda_class_desc));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#354: FILE: drivers/net/irda/irda-usb.c:245:
+	IRDA_DEBUG(0, __FUNCTION__ "(), ret=%d\n", ret);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: drivers/net/irda/irda-usb.c:246:
+	if (ret) {
+		WARNING("usb-irda: usb_get_class_descriptor failed (0x%x)\n", ret);  
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: drivers/net/irda/irda-usb.c:247:
+^I^IWARNING("usb-irda: usb_get_class_descriptor failed (0x%x)\n", ret);  $

CHECK:CAMELCASE: Avoid CamelCase: <bDescriptorType>
#360: FILE: drivers/net/irda/irda-usb.c:251:
+	if (desc->bDescriptorType == USB_DT_IRDA)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#363: FILE: drivers/net/irda/irda-usb.c:254:
+	IRDA_DEBUG(0, __FUNCTION__ "(), parsing extra descriptors ...\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: drivers/net/irda/irda-usb.c:255:
+^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#373: FILE: drivers/net/irda/irda-usb.c:264:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: drivers/net/irda/irda-usb.c:266:
+#endif^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#380: FILE: drivers/net/irda/irda-usb.c:271:
+/*
+ * Function usb_irda_dump_class_desc(desc)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#387: FILE: drivers/net/irda/irda-usb.c:278:
+	printk("bLength=%x\n", desc->bLength);

CHECK:CAMELCASE: Avoid CamelCase: <bLength>
#387: FILE: drivers/net/irda/irda-usb.c:278:
+	printk("bLength=%x\n", desc->bLength);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#388: FILE: drivers/net/irda/irda-usb.c:279:
+	printk("bDescriptorType=%x\n", desc->bDescriptorType);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: drivers/net/irda/irda-usb.c:280:
+^Iprintk("bcdSpecRevision=%x\n", desc->bcdSpecRevision); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#389: FILE: drivers/net/irda/irda-usb.c:280:
+	printk("bcdSpecRevision=%x\n", desc->bcdSpecRevision); 

CHECK:CAMELCASE: Avoid CamelCase: <bcdSpecRevision>
#389: FILE: drivers/net/irda/irda-usb.c:280:
+	printk("bcdSpecRevision=%x\n", desc->bcdSpecRevision); 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: drivers/net/irda/irda-usb.c:281:
+	printk("bmDataSize=%x\n", desc->bmDataSize);

CHECK:CAMELCASE: Avoid CamelCase: <bmDataSize>
#390: FILE: drivers/net/irda/irda-usb.c:281:
+	printk("bmDataSize=%x\n", desc->bmDataSize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#391: FILE: drivers/net/irda/irda-usb.c:282:
+	printk("bmWindowSize=%x\n", desc->bmWindowSize);

CHECK:CAMELCASE: Avoid CamelCase: <bmWindowSize>
#391: FILE: drivers/net/irda/irda-usb.c:282:
+	printk("bmWindowSize=%x\n", desc->bmWindowSize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#392: FILE: drivers/net/irda/irda-usb.c:283:
+	printk("bmMinTurnaroundTime=%d\n", desc->bmMinTurnaroundTime);

CHECK:CAMELCASE: Avoid CamelCase: <bmMinTurnaroundTime>
#392: FILE: drivers/net/irda/irda-usb.c:283:
+	printk("bmMinTurnaroundTime=%d\n", desc->bmMinTurnaroundTime);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: drivers/net/irda/irda-usb.c:284:
+	printk("wBaudRate=%x\n", desc->wBaudRate);

CHECK:CAMELCASE: Avoid CamelCase: <wBaudRate>
#393: FILE: drivers/net/irda/irda-usb.c:284:
+	printk("wBaudRate=%x\n", desc->wBaudRate);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: drivers/net/irda/irda-usb.c:285:
+	printk("bmAdditionalBOFs=%x\n", desc->bmAdditionalBOFs);

CHECK:CAMELCASE: Avoid CamelCase: <bmAdditionalBOFs>
#394: FILE: drivers/net/irda/irda-usb.c:285:
+	printk("bmAdditionalBOFs=%x\n", desc->bmAdditionalBOFs);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#395: FILE: drivers/net/irda/irda-usb.c:286:
+	printk("bIrdaRateSniff=%x\n", desc->bIrdaRateSniff);

CHECK:CAMELCASE: Avoid CamelCase: <bIrdaRateSniff>
#395: FILE: drivers/net/irda/irda-usb.c:286:
+	printk("bIrdaRateSniff=%x\n", desc->bIrdaRateSniff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: drivers/net/irda/irda-usb.c:287:
+	printk("bMaxUnicastList=%x\n", desc->bMaxUnicastList);

CHECK:CAMELCASE: Avoid CamelCase: <bMaxUnicastList>
#396: FILE: drivers/net/irda/irda-usb.c:287:
+	printk("bMaxUnicastList=%x\n", desc->bMaxUnicastList);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: drivers/net/irda/irda-usb.c:288:
+}^I^I^I^I^I^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: drivers/net/irda/irda-usb.c:289:
+^I$

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/net/irda/irda-usb.c:292:
+	struct irda_usb_cb *self = (struct irda_usb_cb *) ptr;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#404: FILE: drivers/net/irda/irda-usb.c:295:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->rx_urb[i]
#416: FILE: drivers/net/irda/irda-usb.c:307:
+			usb_unlink_urb(&(self->rx_urb[i]));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->tx_urb
#418: FILE: drivers/net/irda/irda-usb.c:309:
+		usb_unlink_urb(&(self->tx_urb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->speed_urb
#419: FILE: drivers/net/irda/irda-usb.c:310:
+		usb_unlink_urb(&(self->speed_urb));

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#421: FILE: drivers/net/irda/irda-usb.c:312:
+		IRDA_DEBUG(0, __FUNCTION__ "(), postponing disconnect, network is still active...\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#421: FILE: drivers/net/irda/irda-usb.c:312:
+		IRDA_DEBUG(0, __FUNCTION__ "(), postponing disconnect, network is still active...\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#423: FILE: drivers/net/irda/irda-usb.c:314:
+		 * will do whats needed */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#431: FILE: drivers/net/irda/irda-usb.c:322:
+	IRDA_DEBUG(0, __FUNCTION__ "(), USB IrDA Disconnected\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: drivers/net/irda/irda-usb.c:338:
+^I$

WARNING:LONG_LINE: line length of 255 exceeds 100 columns
#457: FILE: drivers/net/irda/irda-usb.c:348:
+	IRDA_DEBUG(0, __FUNCTION__ "(), dongle says speed=0x%X, size=0x%X, window=0x%X, bofs=0x%X, turn=0x%X\n", self->qos.baud_rate.bits, self->qos.data_size.bits, self->qos.window_size.bits, self->qos.additional_bofs.bits, self->qos.min_turn_time.bits);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#457: FILE: drivers/net/irda/irda-usb.c:348:
+	IRDA_DEBUG(0, __FUNCTION__ "(), dongle says speed=0x%X, size=0x%X, window=0x%X, bofs=0x%X, turn=0x%X\n", self->qos.baud_rate.bits, self->qos.data_size.bits, self->qos.window_size.bits, self->qos.additional_bofs.bits, self->qos.min_turn_time.bits);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#471: FILE: drivers/net/irda/irda-usb.c:362:
+#if 1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: drivers/net/irda/irda-usb.c:366:
+#endif^I    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: drivers/net/irda/irda-usb.c:367:
+^I/* $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#477: FILE: drivers/net/irda/irda-usb.c:368:
+	/* 
+	 * Note : most of those values apply only for the receive path,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: drivers/net/irda/irda-usb.c:369:
+^I * the transmit path will be set differently - Jean II $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#496: FILE: drivers/net/irda/irda-usb.c:387:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: drivers/net/irda/irda-usb.c:392:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#505: FILE: drivers/net/irda/irda-usb.c:396:
+	if (!(netdev = dev_alloc("irda%d", &err))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#506: FILE: drivers/net/irda/irda-usb.c:397:
+		ERROR(__FUNCTION__ "(), dev_alloc() failed!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#510: FILE: drivers/net/irda/irda-usb.c:401:
+ ^Inetdev->priv = (void *) self;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: drivers/net/irda/irda-usb.c:401:
+ ^Inetdev->priv = (void *) self;$

CHECK:SPACING: No space is necessary after a cast
#510: FILE: drivers/net/irda/irda-usb.c:401:
+ 	netdev->priv = (void *) self;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: drivers/net/irda/irda-usb.c:401:
+ ^Inetdev->priv = (void *) self;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#516: FILE: drivers/net/irda/irda-usb.c:407:
+	netdev->watchdog_timeo  = HZ/10;
 	                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#526: FILE: drivers/net/irda/irda-usb.c:417:
+		ERROR(__FUNCTION__ "(), register_netdev() failed!\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#536: FILE: drivers/net/irda/irda-usb.c:427:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#538: FILE: drivers/net/irda/irda-usb.c:429:
+	ASSERT(self != NULL, return -1;);

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#547: FILE: drivers/net/irda/irda-usb.c:438:
+	hashbin_delete(self->tx_list, (FREE_FUNC) &dev_kfree_skb_any);
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: drivers/net/irda/irda-usb.c:439:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#553: FILE: drivers/net/irda/irda-usb.c:444:
+/*
+ * Function irda_usb_build_header(self, skb, header)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#573: FILE: drivers/net/irda/irda-usb.c:464:
+		if ((self->capability & IUC_SPEED_BUG) &&
+		    (!force) && (self->speed != -1)) 
+		{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!force'
#573: FILE: drivers/net/irda/irda-usb.c:464:
+		if ((self->capability & IUC_SPEED_BUG) &&
+		    (!force) && (self->speed != -1)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: drivers/net/irda/irda-usb.c:465:
+^I^I    (!force) && (self->speed != -1)) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#577: FILE: drivers/net/irda/irda-usb.c:468:
+			 * (we'll do it later in the write callback) */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#578: FILE: drivers/net/irda/irda-usb.c:469:
+			IRDA_DEBUG(2, __FUNCTION__ "(), not changing speed yet\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#583: FILE: drivers/net/irda/irda-usb.c:474:
+		IRDA_DEBUG(2, __FUNCTION__ "(), changing speed to %d\n", self->new_speed);

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: drivers/net/irda/irda-usb.c:480:
+^I^I        *header = SPEED_2400;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: drivers/net/irda/irda-usb.c:493:
+^I^I        *header = SPEED_57600;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: drivers/net/irda/irda-usb.c:496:
+^I^I        *header = SPEED_115200;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: drivers/net/irda/irda-usb.c:499:
+^I^I        *header = SPEED_576000;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: drivers/net/irda/irda-usb.c:502:
+^I^I        *header = SPEED_1152000;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: drivers/net/irda/irda-usb.c:505:
+^I^I        *header = SPEED_4000000;$

CHECK:BRACES: Unbalanced braces around else statement
#618: FILE: drivers/net/irda/irda-usb.c:509:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: drivers/net/irda/irda-usb.c:512:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#624: FILE: drivers/net/irda/irda-usb.c:515:
+		IRDA_DEBUG(0, __FUNCTION__ "(), changing xbofs to %d\n", self->new_xbofs);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#667: FILE: drivers/net/irda/irda-usb.c:558:
+	IRDA_DEBUG(2, __FUNCTION__ "(), speed=%d, xbofs=%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#672: FILE: drivers/net/irda/irda-usb.c:563:
+		WARNING(__FUNCTION__ "(), URB still in use!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: drivers/net/irda/irda-usb.c:578:
+        FILL_BULK_URB(purb, self->usbdev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: drivers/net/irda/irda-usb.c:578:
+        FILL_BULK_URB(purb, self->usbdev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: drivers/net/irda/irda-usb.c:580:
+                      skb->data, IRDA_USB_MAX_MTU,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: drivers/net/irda/irda-usb.c:580:
+                      skb->data, IRDA_USB_MAX_MTU,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: drivers/net/irda/irda-usb.c:581:
+                      write_bulk_callback, skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: drivers/net/irda/irda-usb.c:581:
+                      write_bulk_callback, skb);$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#695: FILE: drivers/net/irda/irda-usb.c:586:
+	if ((ret = usb_submit_urb(purb))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#695: FILE: drivers/net/irda/irda-usb.c:586:
+	if ((ret = usb_submit_urb(purb))) {
+		IRDA_DEBUG(0, __FUNCTION__ "(), failed Speed URB\n");
+	}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#696: FILE: drivers/net/irda/irda-usb.c:587:
+		IRDA_DEBUG(0, __FUNCTION__ "(), failed Speed URB\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self'
#711: FILE: drivers/net/irda/irda-usb.c:602:
+	if ((!self) || (!self->present)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->present'
#711: FILE: drivers/net/irda/irda-usb.c:602:
+	if ((!self) || (!self->present)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#712: FILE: drivers/net/irda/irda-usb.c:603:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Device is gone...\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: drivers/net/irda/irda-usb.c:610:
+        xbofs = irda_get_next_xbofs(skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: drivers/net/irda/irda-usb.c:610:
+        xbofs = irda_get_next_xbofs(skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: drivers/net/irda/irda-usb.c:611:
+        if ((xbofs != self->xbofs) && (xbofs != -1)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: drivers/net/irda/irda-usb.c:611:
+        if ((xbofs != self->xbofs) && (xbofs != -1)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xbofs != self->xbofs'
#720: FILE: drivers/net/irda/irda-usb.c:611:
+        if ((xbofs != self->xbofs) && (xbofs != -1)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#720: FILE: drivers/net/irda/irda-usb.c:611:
+        if ((xbofs != self->xbofs) && (xbofs != -1)) {
+		self->new_xbofs = xbofs;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#724: FILE: drivers/net/irda/irda-usb.c:615:
+        /* Check if we need to change the speed */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'speed != self->speed'
#726: FILE: drivers/net/irda/irda-usb.c:617:
+	if ((speed != self->speed) && (speed != -1)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#738: FILE: drivers/net/irda/irda-usb.c:629:
+			 * Jean II */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#748: FILE: drivers/net/irda/irda-usb.c:639:
+		WARNING(__FUNCTION__ "(), URB still in use!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#754: FILE: drivers/net/irda/irda-usb.c:645:
+	if (skb == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: drivers/net/irda/irda-usb.c:649:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: drivers/net/irda/irda-usb.c:656:
+        FILL_BULK_URB(purb, self->usbdev, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: drivers/net/irda/irda-usb.c:656:
+        FILL_BULK_URB(purb, self->usbdev, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: drivers/net/irda/irda-usb.c:656:
+        FILL_BULK_URB(purb, self->usbdev, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: drivers/net/irda/irda-usb.c:658:
+                      skb->data, IRDA_USB_MAX_MTU,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: drivers/net/irda/irda-usb.c:658:
+                      skb->data, IRDA_USB_MAX_MTU,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: drivers/net/irda/irda-usb.c:659:
+                      write_bulk_callback, skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: drivers/net/irda/irda-usb.c:659:
+                      write_bulk_callback, skb);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: drivers/net/irda/irda-usb.c:663:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#777: FILE: drivers/net/irda/irda-usb.c:668:
+		int diff;
+		get_fast_time(&self->now);

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: drivers/net/irda/irda-usb.c:673:
+                /* Check if the mtt is larger than the time we have$

CHECK:BRACES: braces {} should be used on all arms of this statement
#787: FILE: drivers/net/irda/irda-usb.c:678:
+			if (mtt > 1000) {
[...]
+			} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: drivers/net/irda/irda-usb.c:679:
+^I^I^I^I/* $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#789: FILE: drivers/net/irda/irda-usb.c:680:
+				/* 
+				* FIXME: can we do better than this? Maybe call

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#789: FILE: drivers/net/irda/irda-usb.c:680:
+				/* 
+				* FIXME: can we do better than this? Maybe call

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: drivers/net/irda/irda-usb.c:681:
+^I^I^I^I* a function which sends a frame to a non $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#791: FILE: drivers/net/irda/irda-usb.c:682:
+^I^I^I^I* existing device, or change the speed to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: drivers/net/irda/irda-usb.c:683:
+^I^I^I^I* current one a number of times just to burn $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: drivers/net/irda/irda-usb.c:685:
+^I^I^I^I*/^I^I^I^I^I^I^I^I^I^I^I^I^I^I^I$

WARNING:LONG_LINE_COMMENT: line length of 152 exceeds 100 columns
#794: FILE: drivers/net/irda/irda-usb.c:685:
+				*/															

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#795: FILE: drivers/net/irda/irda-usb.c:686:
+				mdelay(mtt/1000);
 				          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: drivers/net/irda/irda-usb.c:688:
+^I^I^I^Igoto out;^I$

CHECK:BRACES: Unbalanced braces around else statement
#798: FILE: drivers/net/irda/irda-usb.c:689:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: drivers/net/irda/irda-usb.c:692:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: drivers/net/irda/irda-usb.c:696:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: drivers/net/irda/irda-usb.c:702:
+^Iint len = purb->transfer_buffer_length; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: drivers/net/irda/irda-usb.c:704:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#814: FILE: drivers/net/irda/irda-usb.c:705:
+	if ((res = usb_submit_urb(purb))) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#815: FILE: drivers/net/irda/irda-usb.c:706:
+		IRDA_DEBUG(0, __FUNCTION__ "(), failed Tx URB\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#822: FILE: drivers/net/irda/irda-usb.c:713:
+        self->stats.tx_bytes += len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: drivers/net/irda/irda-usb.c:713:
+        self->stats.tx_bytes += len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: drivers/net/irda/irda-usb.c:715:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#841: FILE: drivers/net/irda/irda-usb.c:732:
+/*
+ * Note : this function will be called with both tx_urb and speed_urb...

CHECK:SPACING: No space is necessary after a cast
#846: FILE: drivers/net/irda/irda-usb.c:737:
+	struct irda_usb_cb *self = ((struct irda_skb_cb *) skb->cb)->context;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: drivers/net/irda/irda-usb.c:738:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#849: FILE: drivers/net/irda/irda-usb.c:740:
+	if (self == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#850: FILE: drivers/net/irda/irda-usb.c:741:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Bug : self == NULL\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->netopen'
#860: FILE: drivers/net/irda/irda-usb.c:751:
+	if ((!self->netopen) || (!self->present)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->present'
#860: FILE: drivers/net/irda/irda-usb.c:751:
+	if ((!self->netopen) || (!self->present)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#861: FILE: drivers/net/irda/irda-usb.c:752:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Network is gone...\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#867: FILE: drivers/net/irda/irda-usb.c:758:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Changing speed now...\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#880: FILE: drivers/net/irda/irda-usb.c:771:
+	IRDA_DEBUG(2, __FUNCTION__ "()\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#884: FILE: drivers/net/irda/irda-usb.c:775:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Bug : purb == NULL\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#893: FILE: drivers/net/irda/irda-usb.c:784:
+			 * Basically, the Rx path will stop... */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#894: FILE: drivers/net/irda/irda-usb.c:785:
+			IRDA_DEBUG(0, __FUNCTION__ "(), Failed to allocate Rx skb\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#899: FILE: drivers/net/irda/irda-usb.c:790:
+		skb->data = skb->tail = skb->head;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#906: FILE: drivers/net/irda/irda-usb.c:797:
+	cb = (struct irda_skb_cb *) skb->cb;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: drivers/net/irda/irda-usb.c:801:
+^IFILL_BULK_URB(purb, self->usbdev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: drivers/net/irda/irda-usb.c:802:
+^I^I      usb_rcvbulkpipe(self->usbdev, self->bulk_in_ep), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#913: FILE: drivers/net/irda/irda-usb.c:804:
+                      irda_usb_receive, skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: drivers/net/irda/irda-usb.c:804:
+                      irda_usb_receive, skb);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: drivers/net/irda/irda-usb.c:807:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#920: FILE: drivers/net/irda/irda-usb.c:811:
+		 * Basically, the Rx path will stop... */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#921: FILE: drivers/net/irda/irda-usb.c:812:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Failed to submit Rx URB %d\n", ret);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#926: FILE: drivers/net/irda/irda-usb.c:817:
+/*
+ * Function irda_usb_receive(purb)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#931: FILE: drivers/net/irda/irda-usb.c:822:
+static void irda_usb_receive(purb_t purb) $

CHECK:SPACING: No space is necessary after a cast
#933: FILE: drivers/net/irda/irda-usb.c:824:
+	struct sk_buff *skb = (struct sk_buff *) purb->context;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: drivers/net/irda/irda-usb.c:825:
+^Istruct irda_usb_cb *self; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#937: FILE: drivers/net/irda/irda-usb.c:828:
+^I$

CHECK:SPACING: No space is necessary after a cast
#939: FILE: drivers/net/irda/irda-usb.c:830:
+	cb = (struct irda_skb_cb *) skb->cb;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cb"
#940: FILE: drivers/net/irda/irda-usb.c:831:
+	ASSERT(cb != NULL, return;);

CHECK:SPACING: No space is necessary after a cast
#941: FILE: drivers/net/irda/irda-usb.c:832:
+	self = (struct irda_usb_cb *) cb->context;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#942: FILE: drivers/net/irda/irda-usb.c:833:
+	ASSERT(self != NULL, return;);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->netopen'
#945: FILE: drivers/net/irda/irda-usb.c:836:
+	if ((!self->netopen) || (!self->present)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->present'
#945: FILE: drivers/net/irda/irda-usb.c:836:
+	if ((!self->netopen) || (!self->present)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#946: FILE: drivers/net/irda/irda-usb.c:837:
+		IRDA_DEBUG(0, __FUNCTION__ "(), Network is gone!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#950: FILE: drivers/net/irda/irda-usb.c:841:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: drivers/net/irda/irda-usb.c:847:
+^I^I^Iself->stats.rx_crc_errors++;^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#959: FILE: drivers/net/irda/irda-usb.c:850:
+			WARNING(__FUNCTION__ "(), RX status %d\n", purb->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#967: FILE: drivers/net/irda/irda-usb.c:858:
+		WARNING(__FUNCTION__ "(), empty frame!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#971: FILE: drivers/net/irda/irda-usb.c:862:
+^I/*  $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#972: FILE: drivers/net/irda/irda-usb.c:863:
+	/*  
+	 * Remember the time we received this frame, so we can

ERROR:CODE_INDENT: code indent should use tabs where possible
#976: FILE: drivers/net/irda/irda-usb.c:867:
+        get_fast_time(&self->stamp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: drivers/net/irda/irda-usb.c:867:
+        get_fast_time(&self->stamp);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#984: FILE: drivers/net/irda/irda-usb.c:875:
+		new = dev_alloc_skb(skb->len+1);
 		                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: drivers/net/irda/irda-usb.c:878:
+^I^I^Igoto done;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: drivers/net/irda/irda-usb.c:883:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: drivers/net/irda/irda-usb.c:891:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: drivers/net/irda/irda-usb.c:896:
+        new->dev = self->netdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: drivers/net/irda/irda-usb.c:896:
+        new->dev = self->netdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: drivers/net/irda/irda-usb.c:897:
+        new->mac.raw  = new->data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: drivers/net/irda/irda-usb.c:897:
+        new->mac.raw  = new->data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1007: FILE: drivers/net/irda/irda-usb.c:898:
+        new->protocol = htons(ETH_P_IRDA);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: drivers/net/irda/irda-usb.c:898:
+        new->protocol = htons(ETH_P_IRDA);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: drivers/net/irda/irda-usb.c:899:
+        netif_rx(new);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: drivers/net/irda/irda-usb.c:899:
+        netif_rx(new);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1016: FILE: drivers/net/irda/irda-usb.c:907:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1017: FILE: drivers/net/irda/irda-usb.c:908:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1027: FILE: drivers/net/irda/irda-usb.c:918:
+/*
+ * Function irda_usb_net_open (dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: drivers/net/irda/irda-usb.c:920:
+ *    Network device is taken up. Usually this is done by "ifconfig irda0 up" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/net/irda/irda-usb.c:921:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: drivers/net/irda/irda-usb.c:928:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1038: FILE: drivers/net/irda/irda-usb.c:929:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "netdev"
#1040: FILE: drivers/net/irda/irda-usb.c:931:
+	ASSERT(netdev != NULL, return -1;);

CHECK:SPACING: No space is necessary after a cast
#1041: FILE: drivers/net/irda/irda-usb.c:932:
+	self = (struct irda_usb_cb *) netdev->priv;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#1042: FILE: drivers/net/irda/irda-usb.c:933:
+	ASSERT(self != NULL, return -1;);

ERROR:SPACING: space required before the open parenthesis '('
#1045: FILE: drivers/net/irda/irda-usb.c:936:
+	if(!self->present) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1046: FILE: drivers/net/irda/irda-usb.c:937:
+		WARNING(__FUNCTION__ "(), device not present!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1051: FILE: drivers/net/irda/irda-usb.c:942:
+	 * (IrLAP will change that soon) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1058: FILE: drivers/net/irda/irda-usb.c:949:
+	 * Jean II */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: drivers/net/irda/irda-usb.c:952:
+^I/* $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1062: FILE: drivers/net/irda/irda-usb.c:953:
+	/* 
+	 * Now that everything should be initialized properly,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self->irlap"
#1067: FILE: drivers/net/irda/irda-usb.c:958:
+	ASSERT(self->irlap != NULL, return -1;);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1073: FILE: drivers/net/irda/irda-usb.c:964:
+	 * to send us some data... */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->rx_urb[i]
#1075: FILE: drivers/net/irda/irda-usb.c:966:
+		irda_usb_submit(self, NULL, &(self->rx_urb[i]));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1083: FILE: drivers/net/irda/irda-usb.c:974:
+/*
+ * Function irda_usb_net_close (self)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: drivers/net/irda/irda-usb.c:976:
+ *    Network device is taken down. Usually this is done by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1086: FILE: drivers/net/irda/irda-usb.c:977:
+ *    "ifconfig irda0 down" $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1093: FILE: drivers/net/irda/irda-usb.c:984:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "netdev"
#1095: FILE: drivers/net/irda/irda-usb.c:986:
+	ASSERT(netdev != NULL, return -1;);

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: drivers/net/irda/irda-usb.c:987:
+	self = (struct irda_usb_cb *) netdev->priv;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#1097: FILE: drivers/net/irda/irda-usb.c:988:
+	ASSERT(self != NULL, return -1;);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1100: FILE: drivers/net/irda/irda-usb.c:991:
+	 * stopping the network Tx queue - Jean II */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->rx_urb[i]
#1108: FILE: drivers/net/irda/irda-usb.c:999:
+		purb_t purb = &(self->rx_urb[i]);

CHECK:SPACING: No space is necessary after a cast
#1109: FILE: drivers/net/irda/irda-usb.c:1000:
+		struct sk_buff *skb = (struct sk_buff *) purb->context;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1121: FILE: drivers/net/irda/irda-usb.c:1012:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1138: FILE: drivers/net/irda/irda-usb.c:1029:
+	IRDA_DEBUG(0, __FUNCTION__ "(), Network layer thinks we timed out!\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1141: FILE: drivers/net/irda/irda-usb.c:1032:
+		WARNING(__FUNCTION__ "(), device not present!\n");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1150: FILE: drivers/net/irda/irda-usb.c:1041:
+	switch (purb->status) {
+		case -ECONNABORTED:	/* Can't find proper USB_ST_* code */
[...]
+		case USB_ST_URB_PENDING:	/* -EINPROGRESS == -115 */
[...]
+		default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1165: FILE: drivers/net/irda/irda-usb.c:1056:
+	switch (purb->status) {
+		case -ECONNABORTED:	/* Can't find proper USB_ST_* code */
[...]
+		case USB_ST_URB_PENDING:	/* -EINPROGRESS */
[...]
+		default:

CHECK:SPACING: No space is necessary after a cast
#1189: FILE: drivers/net/irda/irda-usb.c:1080:
+	struct if_irda_req *irq = (struct if_irda_req *) rq;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#1193: FILE: drivers/net/irda/irda-usb.c:1084:
+	ASSERT(dev != NULL, return -1;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#1195: FILE: drivers/net/irda/irda-usb.c:1086:
+	ASSERT(self != NULL, return -1;);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1197: FILE: drivers/net/irda/irda-usb.c:1088:
+	IRDA_DEBUG(2, __FUNCTION__ "(), %s, (cmd=0x%X)\n", dev->name, cmd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1229: FILE: drivers/net/irda/irda-usb.c:1120:
+	struct irda_usb_cb *self = dev->priv;
+	return &self->stats;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irda->usbdev != NULL'
#1251: FILE: drivers/net/irda/irda-usb.c:1142:
+		if((irda->usbdev != NULL) && (irda->present == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irda->present == 0'
#1251: FILE: drivers/net/irda/irda-usb.c:1142:
+		if((irda->usbdev != NULL) && (irda->present == 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#1251: FILE: drivers/net/irda/irda-usb.c:1142:
+		if((irda->usbdev != NULL) && (irda->present == 0)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irda->usbdev"
#1251: FILE: drivers/net/irda/irda-usb.c:1142:
+		if((irda->usbdev != NULL) && (irda->present == 0)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1252: FILE: drivers/net/irda/irda-usb.c:1143:
+			IRDA_DEBUG(0, __FUNCTION__ "(), disconnect zombie now !\n");

CHECK:SPACING: No space is necessary after a cast
#1253: FILE: drivers/net/irda/irda-usb.c:1144:
+			irda_usb_disconnect(irda->usbdev, (void *) irda);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1264: FILE: drivers/net/irda/irda-usb.c:1155:
+MODULE_DESCRIPTION("IrDA-USB Dongle Driver"); $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1266: FILE: drivers/net/irda/irda-usb.c:1157:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1272: FILE: include/net/irda/irda-usb.h:1:
+/*****************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: include/net/irda/irda-usb.h:6:
+ * Status:        Experimental $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1282: FILE: include/net/irda/irda-usb.h:11:
+ *          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1294: FILE: include/net/irda/irda-usb.h:23:
+ *^Ialong with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1295: FILE: include/net/irda/irda-usb.h:24:
+ *^IFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: include/net/irda/irda-usb.h:40:
+ * is required for handling back-to-back (brickwalled) frames $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1334: FILE: include/net/irda/irda-usb.h:63:
+};
+#define IUC_DEFAULT	0x00	/* Basic device compliant with 1.0 spec */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1343: FILE: include/net/irda/irda-usb.h:72:
+#define USB_CLASS_IRDA    0x02 /* USB_CLASS_APP_SPEC subclass */ $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1357: FILE: include/net/irda/irda-usb.h:86:
+} __attribute__ ((packed));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1368: FILE: include/net/irda/irda-usb.h:97:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1374: FILE: include/net/irda/irda-usb.h:103:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: include/net/irda/irda-usb.h:107:
+^Istruct qos_info qos;^I^I $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1381: FILE: include/net/irda/irda-usb.h:110:
+        struct timeval stamp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: include/net/irda/irda-usb.h:110:
+        struct timeval stamp;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1393: FILE: include/net/irda/irda-usb.h:122:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000547695.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 119 errors, 115 warnings, 91 checks, 1344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000547695.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
