WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
The following patch fixes this problems. Code is mostly based on pl2303 code.

WARNING:TYPO_SPELLING: 'userful' may be misspelled - perhaps 'useful'?
#37: 
userful for other drivers.
^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#56: FILE: drivers/usb/serial/ftdi_sio.c:269:
Ryder <bryder@sgi.com>, Kuba Ober <kuba@mareimbrium.org>"

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: drivers/usb/serial/ftdi_sio.c:553:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: drivers/usb/serial/ftdi_sio.c:573:
+static void ftdi_send                   (struct usb_serial_port *port);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: drivers/usb/serial/ftdi_sio.c:1078:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#89: FILE: drivers/usb/serial/ftdi_sio.c:1078:
 	
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: drivers/usb/serial/ftdi_sio.c:1079:
+^I$

CHECK:SPACING: No space is necessary after a cast
#116: FILE: drivers/usb/serial/ftdi_sio.c:1185:
+	transfer_buffer = (unsigned char *) kmalloc(SERIAL_BUF_SIZE, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#116: FILE: drivers/usb/serial/ftdi_sio.c:1185:
+	transfer_buffer = (unsigned char *) kmalloc(SERIAL_BUF_SIZE, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: drivers/usb/serial/ftdi_sio.c:1188:
+                port->write_urb->transfer_buffer = transfer_buffer;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: drivers/usb/serial/ftdi_sio.c:1188:
+                port->write_urb->transfer_buffer = transfer_buffer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: drivers/usb/serial/ftdi_sio.c:1189:
+                port->write_urb->transfer_buffer_length = SERIAL_BUF_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: drivers/usb/serial/ftdi_sio.c:1189:
+                port->write_urb->transfer_buffer_length = SERIAL_BUF_SIZE;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->buf"
#128: FILE: drivers/usb/serial/ftdi_sio.c:1194:
+	if (priv->buf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: drivers/usb/serial/ftdi_sio.c:1372:
+^Iif (port->write_urb)^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#152: FILE: drivers/usb/serial/ftdi_sio.c:1372:
+	if (port->write_urb)	
+	    usb_kill_urb(port->write_urb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: drivers/usb/serial/ftdi_sio.c:1381:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#163: FILE: drivers/usb/serial/ftdi_sio.c:1382:
+	dbg("%s - port %d, %d bytes", __FUNCTION__, port->number, count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: drivers/usb/serial/ftdi_sio.c:1386:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: drivers/usb/serial/ftdi_sio.c:1396:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#201: FILE: drivers/usb/serial/ftdi_sio.c:1404:
+	dbg("%s - port %d", __FUNCTION__, port->number);

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/usb/serial/ftdi_sio.c:1417:
+        if (data_offset > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/usb/serial/ftdi_sio.c:1417:
+        if (data_offset > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: drivers/usb/serial/ftdi_sio.c:1418:
+                int len = port->bulk_out_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/usb/serial/ftdi_sio.c:1418:
+                int len = port->bulk_out_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: drivers/usb/serial/ftdi_sio.c:1421:
+                count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/usb/serial/ftdi_sio.c:1421:
+                count = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: drivers/usb/serial/ftdi_sio.c:1423:
+                while (serial_buf_data_avail(priv->buf) && len > 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/usb/serial/ftdi_sio.c:1423:
+                while (serial_buf_data_avail(priv->buf) && len > 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: drivers/usb/serial/ftdi_sio.c:1424:
+                        int toget = MIN(len - data_offset, PKTSZ -$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/usb/serial/ftdi_sio.c:1424:
+                        int toget = MIN(len - data_offset, PKTSZ -$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: drivers/usb/serial/ftdi_sio.c:1425:
+                        int cnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: drivers/usb/serial/ftdi_sio.c:1425:
+                        int cnt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: drivers/usb/serial/ftdi_sio.c:1427:
+        ^I        cnt = serial_buf_get(priv->buf, first_byte + data_offset,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#241: FILE: drivers/usb/serial/ftdi_sio.c:1427:
+        ^I        cnt = serial_buf_get(priv->buf, first_byte + data_offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/usb/serial/ftdi_sio.c:1427:
+        ^I        cnt = serial_buf_get(priv->buf, first_byte + data_offset,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: drivers/usb/serial/ftdi_sio.c:1428:
+^I^I                                toget);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/usb/serial/ftdi_sio.c:1428:
+        	        cnt = serial_buf_get(priv->buf, first_byte + data_offset,
+		                                toget);

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: drivers/usb/serial/ftdi_sio.c:1429:
+                        *first_byte |= 1 | (cnt << 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: drivers/usb/serial/ftdi_sio.c:1429:
+                        *first_byte |= 1 | (cnt << 2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: drivers/usb/serial/ftdi_sio.c:1430:
+                        first_byte += cnt + data_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/usb/serial/ftdi_sio.c:1430:
+                        first_byte += cnt + data_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: drivers/usb/serial/ftdi_sio.c:1431:
+                        len -= cnt + data_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: drivers/usb/serial/ftdi_sio.c:1431:
+                        len -= cnt + data_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: drivers/usb/serial/ftdi_sio.c:1432:
+                        count += cnt + data_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: drivers/usb/serial/ftdi_sio.c:1432:
+                        count += cnt + data_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: drivers/usb/serial/ftdi_sio.c:1433:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: drivers/usb/serial/ftdi_sio.c:1433:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: drivers/usb/serial/ftdi_sio.c:1434:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: drivers/usb/serial/ftdi_sio.c:1434:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: drivers/usb/serial/ftdi_sio.c:1435:
+^I        count = serial_buf_get(priv->buf, port->write_urb->transfer_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: drivers/usb/serial/ftdi_sio.c:1436:
+^I^I                            port->bulk_out_size);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/usb/serial/ftdi_sio.c:1436:
+	        count = serial_buf_get(priv->buf, port->write_urb->transfer_buffer,
+		                            port->bulk_out_size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#299: FILE: drivers/usb/serial/ftdi_sio.c:1448:
+	usb_serial_debug_data(debug, &port->dev, __FUNCTION__, count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: drivers/usb/serial/ftdi_sio.c:1449:
+	usb_serial_debug_data(debug, &port->dev, __FUNCTION__, count,


WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: drivers/usb/serial/ftdi_sio.c:1452:
+	result = usb_submit_urb (port->write_urb, GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/usb/serial/ftdi_sio.c:1455:
+		dev_err(&port->dev, "%s - failed submitting write urb, error %d\n",
+		priv->write_urb_in_use = 0;

CHECK:SPACING: No space is necessary after a cast
#336: FILE: drivers/usb/serial/ftdi_sio.c:1465:
+	struct usb_serial_port *port = (struct usb_serial_port *) urb->context;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#353: FILE: drivers/usb/serial/ftdi_sio.c:1479:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__, urb->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#358: FILE: drivers/usb/serial/ftdi_sio.c:1484:
+		dbg("%s - Overflow in write", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#359: FILE: drivers/usb/serial/ftdi_sio.c:1485:
+		dbg("%s - nonzero write bulk status received: %d", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: drivers/usb/serial/ftdi_sio.c:1486:
+		dbg("%s - nonzero write bulk status received: %d", __FUNCTION__,
+		port->write_urb->transfer_buffer_length = 1;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#363: FILE: drivers/usb/serial/ftdi_sio.c:1488:
+		result = usb_submit_urb (port->write_urb, GFP_ATOMIC);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#387: FILE: drivers/usb/serial/serial-buf.h:1:
+#ifndef __LINUX_USB_SERIAL_BUF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#407: FILE: drivers/usb/serial/serial-buf.h:21:
+static void ^I^I  serial_buf_free(struct serial_buf *cb);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: drivers/usb/serial/serial-buf.h:28:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#426: FILE: drivers/usb/serial/serial-buf.h:38:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: drivers/usb/serial/serial-buf.h:41:
+
+

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#433: FILE: drivers/usb/serial/serial-buf.h:45:
+	cb = (struct serial_buf *)kmalloc(sizeof(struct serial_buf), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cb)...) over kmalloc(sizeof(struct serial_buf)...)
#433: FILE: drivers/usb/serial/serial-buf.h:45:
+	cb = (struct serial_buf *)kmalloc(sizeof(struct serial_buf), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb"
#434: FILE: drivers/usb/serial/serial-buf.h:46:
+	if (cb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb->buf_buf"
#438: FILE: drivers/usb/serial/serial-buf.h:50:
+	if (cb->buf_buf == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#444: FILE: drivers/usb/serial/serial-buf.h:56:
+	cb->buf_get = cb->buf_put = cb->buf_buf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#448: FILE: drivers/usb/serial/serial-buf.h:60:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: drivers/usb/serial/serial-buf.h:62:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: drivers/usb/serial/serial-buf.h:77:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cb"
#474: FILE: drivers/usb/serial/serial-buf.h:86:
+	if (cb != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#479: FILE: drivers/usb/serial/serial-buf.h:91:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cb"
#489: FILE: drivers/usb/serial/serial-buf.h:101:
+	if (cb != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: drivers/usb/serial/serial-buf.h:107:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cb"
#505: FILE: drivers/usb/serial/serial-buf.h:117:
+	if (cb != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#511: FILE: drivers/usb/serial/serial-buf.h:123:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'data'
#515: FILE: drivers/usb/serial/serial-buf.h:127:
+ * Copy data data from a user buffer and put it into the circular buffer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: drivers/usb/serial/serial-buf.h:134:
+static inline unsigned int serial_buf_put(struct serial_buf *cb,
+	unsigned int count)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#525: FILE: drivers/usb/serial/serial-buf.h:136:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#528: FILE: drivers/usb/serial/serial-buf.h:139:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb"
#529: FILE: drivers/usb/serial/serial-buf.h:140:
+	if (cb == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#542: FILE: drivers/usb/serial/serial-buf.h:153:
+		memcpy(cb->buf_buf, buf+len, count - len);
 		                       ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#554: FILE: drivers/usb/serial/serial-buf.h:165:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#556: FILE: drivers/usb/serial/serial-buf.h:167:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/usb/serial/serial-buf.h:178:
+static inline unsigned int serial_buf_get(struct serial_buf *cb, char *buf,
+	unsigned int count)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#569: FILE: drivers/usb/serial/serial-buf.h:180:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#572: FILE: drivers/usb/serial/serial-buf.h:183:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb"
#573: FILE: drivers/usb/serial/serial-buf.h:184:
+	if (cb == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#586: FILE: drivers/usb/serial/serial-buf.h:197:
+		memcpy(buf+len, cb->buf_buf, count - len);
 		          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#598: FILE: drivers/usb/serial/serial-buf.h:209:
+
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 33 warnings, 39 checks, 540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
