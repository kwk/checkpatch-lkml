WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
It appears linux-2.4 won't build with gcc 3.3.3 (SuSe) because it is picky about

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#37: 
/home/shemminger/linux-2.4/include/linux/smp.h:29: error: conflicting types for `smp_send_reschedule'

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#42: 
--- a/arch/i386/kernel/process.c	2004-06-29 15:31:58 -07:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: arch/i386/kernel/vm86.c:94:
+fastcall struct pt_regs * save_v86_state(struct kernel_vm86_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: arch/i386/kernel/vm86.c:94:
+fastcall struct pt_regs * save_v86_state(struct kernel_vm86_regs * regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#149: FILE: fs/buffer.c:2733:
+fastcall int try_to_free_buffers(struct page * page, unsigned int gfp_mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: fs/file_table.c:100:
+fastcall void fput(struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: fs/file_table.c:129:
+fastcall struct file * fget(unsigned int fd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#182: FILE: fs/namei.c:450:
+fastcall int link_path_walk(const char * name, struct nameidata *nd)
                                                                  ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: fs/namei.c:450:
+fastcall int link_path_walk(const char * name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#191: FILE: fs/namei.c:656:
+fastcall int path_walk(const char * name, struct nameidata *nd)
                                                             ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: fs/namei.c:656:
+fastcall int path_walk(const char * name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#200: FILE: fs/namei.c:744:
+fastcall int path_lookup(const char *path, unsigned flags, struct nameidata *nd)
                                                                              ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#200: FILE: fs/namei.c:744:
+fastcall int path_lookup(const char *path, unsigned flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#209: FILE: fs/namei.c:754:
+fastcall int path_init(const char *name, unsigned int flags, struct nameidata *nd)
                                                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: fs/namei.c:850:
+fastcall int __user_walk(const char *name, unsigned flags, struct nameidata *nd)
                                                                              ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#218: FILE: fs/namei.c:850:
+fastcall int __user_walk(const char *name, unsigned flags, struct nameidata *nd)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/asm-i386/smp.h:42:
+extern void FASTCALL(smp_send_reschedule(int cpu));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: kernel/fork.c:42:
+void fastcall add_wait_queue(wait_queue_head_t *q, wait_queue_t * wait)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: kernel/fork.c:52:
+void fastcall add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t * wait)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: kernel/fork.c:62:
+void fastcall remove_wait_queue(wait_queue_head_t *q, wait_queue_t * wait)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: kernel/sched.c:212:
+static void fastcall reschedule_idle(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: kernel/sched.c:370:
+int fastcall wake_up_process(struct task_struct * p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#436: FILE: lib/brlock.c:23:
+fastcall void __br_write_lock (enum brlock_indices idx)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: lib/brlock.c:31:
+fastcall void __br_write_unlock (enum brlock_indices idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#487: FILE: mm/filemap.c:71:
+static fastcall void add_page_to_hash_queue(struct page * page, struct page **p)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#505: FILE: mm/filemap.c:263:
+static fastcall int truncate_list_pages(struct list_head *head, unsigned long start, unsigned *partial)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#505: FILE: mm/filemap.c:263:
+static fastcall int truncate_list_pages(struct list_head *head, unsigned long start, unsigned *partial)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#523: FILE: mm/filemap.c:758:
+static fastcall int page_cache_read(struct file * file, unsigned long offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: mm/filemap.c:793:
+static fastcall int read_cluster_nonblocking(struct file * file, unsigned long offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: mm/filemap.c:794:
+static fastcall int read_cluster_nonblocking(struct file * file, unsigned long offset,
 	unsigned long filesize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#541: FILE: mm/filemap.c:874:
+void fastcall wakeup_page_waiters(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: mm/filemap.c:1028:
+static fastcall struct page * __find_lock_page_helper(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: mm/filemap.c:1029:
+static fastcall struct page * __find_lock_page_helper(struct address_space *mapping,
 					unsigned long offset, struct page *hash)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#610: FILE: mm/page_alloc.c:114:
+static fastcall void __free_pages_ok (struct page *page, unsigned int order)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: mm/page_alloc.c:244:
+static fastcall struct page * rmqueue(zone_t *zone, unsigned int order)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#637: FILE: mm/page_alloc.c:298:
+static fastcall struct page * balance_classzone(zone_t * classzone, unsigned int gfp_mask, unsigned int order, int * freed)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: mm/page_alloc.c:298:
+static fastcall struct page * balance_classzone(zone_t * classzone, unsigned int gfp_mask, unsigned int order, int * freed)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: mm/page_alloc.c:298:
+static fastcall struct page * balance_classzone(zone_t * classzone, unsigned int gfp_mask, unsigned int order, int * freed)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: mm/page_alloc.c:298:
+static fastcall struct page * balance_classzone(zone_t * classzone, unsigned int gfp_mask, unsigned int order, int * freed)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#646: FILE: mm/page_alloc.c:376:
+fastcall struct page * __alloc_pages(unsigned int gfp_mask, unsigned int order, zonelist_t *zonelist)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: mm/page_alloc.c:376:
+fastcall struct page * __alloc_pages(unsigned int gfp_mask, unsigned int order, zonelist_t *zonelist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#692: FILE: mm/slab.c:1738:
+int fastcall kmem_cache_reap (int gfp_mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#704: FILE: mm/swap.c:39:
+static fastcall void activate_page_nolock(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#713: FILE: mm/swap.c:47:
+fastcall void activate_page(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#722: FILE: mm/swap.c:58:
+void fastcall lru_cache_add(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#731: FILE: mm/swap.c:75:
+void fastcall __lru_cache_del(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: mm/swap.c:90:
+void fastcall lru_cache_del(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#773: FILE: mm/vmscan.c:326:
+static int fastcall swap_out(zone_t * classzone)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#782: FILE: mm/vmscan.c:369:
+static int fastcall shrink_cache(int nr_pages, zone_t * classzone, unsigned int gfp_mask, int * failed_swapout)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#782: FILE: mm/vmscan.c:369:
+static int fastcall shrink_cache(int nr_pages, zone_t * classzone, unsigned int gfp_mask, int * failed_swapout)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#782: FILE: mm/vmscan.c:369:
+static int fastcall shrink_cache(int nr_pages, zone_t * classzone, unsigned int gfp_mask, int * failed_swapout)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#791: FILE: mm/vmscan.c:580:
+static fastcall void refill_inactive(int nr_pages, zone_t * classzone)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#800: FILE: mm/vmscan.c:613:
+static fastcall int shrink_caches(zone_t * classzone, unsigned int gfp_mask, int nr_pages, int * failed_swapout)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#800: FILE: mm/vmscan.c:613:
+static fastcall int shrink_caches(zone_t * classzone, unsigned int gfp_mask, int nr_pages, int * failed_swapout)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#800: FILE: mm/vmscan.c:613:
+static fastcall int shrink_caches(zone_t * classzone, unsigned int gfp_mask, int nr_pages, int * failed_swapout)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 19 warnings, 3 checks, 640 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
