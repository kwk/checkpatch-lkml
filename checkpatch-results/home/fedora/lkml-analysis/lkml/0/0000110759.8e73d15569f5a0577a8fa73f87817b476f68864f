CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_BRK>
#204: FILE: drivers/serial/sh-sci.c:671:
+	if (!s->break_flag && status & SCxSR_BRK(port)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#230: FILE: drivers/serial/sh-sci.c:1029:
 	switch (baud) {
+		case 0:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: drivers/serial/sh-sci.c:1037:
+			struct clk *clk = clk_get("module_clk");
+			t = SCBRR_VALUE(baud, clk_get_rate(clk));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#440: FILE: drivers/serial/sh-sci.c:1587:
+		struct clk *clk = clk_get("module_clk");
+		port->uartclk = clk_get_rate(clk) * 16;

WARNING:LINE_SPACING: Missing a blank line after declarations
#493: FILE: drivers/serial/sh-sci.c:1733:
+			struct clk *clk = clk_get("module_clk");
+			sciport->port.uartclk = clk_get_rate(clk) * 16;

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#616: FILE: drivers/serial/sh-sci.h:144:
+# define SCSCR_INIT(port)	0x3c /* TIE=0,RIE=0,TE=1,RE=1,REIE=1,cke=2 */
                          	                    ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#622: FILE: drivers/serial/sh-sci.h:150:
+# define SCSCR_INIT(port)	0x3a	/* TIE=0,RIE=0,TE=1,RE=1,REIE=1 */
                          	    	               ^^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#632: FILE: drivers/serial/sh-sci.h:161:
+#if defined(CONFIG_CPU_SUBTYPE_SH7750) || defined(CONFIG_CPU_SUBTYPE_SH7751) || defined(CONFIG_CPU_SUBTYPE_SH7780)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_BREAK_CLEAR>
#641: FILE: drivers/serial/sh-sci.h:216:
+# define SCxSR_BREAK_CLEAR(port)	0xc4

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: drivers/serial/sh-sci.h:288:
+  if ((size) == 8) {^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#659: FILE: drivers/serial/sh-sci.h:288:
+  if ((size) == 8) {						\
     return ctrl_inb(addr);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: drivers/serial/sh-sci.h:290:
+  } else {^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#662: FILE: drivers/serial/sh-sci.h:290:
+  } else {							\
     return ctrl_inw(addr);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: drivers/serial/sh-sci.h:295:
+  if ((size) == 8) {^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#668: FILE: drivers/serial/sh-sci.h:295:
+  if ((size) == 8) {						\
     ctrl_outb(value, addr);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: drivers/serial/sh-sci.h:304:
+    if (port->type == PORT_SCI) {^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#677: FILE: drivers/serial/sh-sci.h:304:
+    if (port->type == PORT_SCI) {					\
       SCI_IN(sci_size, sci_offset)					\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#679: FILE: drivers/serial/sh-sci.h:306:
     } else {								\
+      SCI_IN(scif_size, scif_offset);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: drivers/serial/sh-sci.h:307:
+      SCI_IN(scif_size, scif_offset);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: drivers/serial/sh-sci.h:322:
+    SCI_IN(scif_size, scif_offset);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: drivers/serial/sh-sci.h:332:
+    SCI_IN(sci_size, sci_offset);^I^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)
                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)
                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)
                                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bps' - possible side-effects?
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bps' may be better as '(bps)' to avoid precedence issues
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'clk' may be better as '(clk)' to avoid precedence issues
#755: FILE: drivers/serial/sh-sci.h:581:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(16*bps)-1)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)
                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)
                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)
                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bps' - possible side-effects?
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bps' may be better as '(bps)' to avoid precedence issues
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'clk' may be better as '(clk)' to avoid precedence issues
#761: FILE: drivers/serial/sh-sci.h:583:
+#define SCBRR_VALUE(bps, clk) (((clk*2)+16*bps)/(32*bps)-1)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)
                                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)
                                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)
                                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)
                                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)
                                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bps' - possible side-effects?
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bps' may be better as '(bps)' to avoid precedence issues
#765: FILE: drivers/serial/sh-sci.h:587:
+#define SCBRR_VALUE(bps) ((current_cpu_data.module_clock+16*bps)/(32*bps)-1)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)
                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)
                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)
                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)
                                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bps' - possible side-effects?
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bps' may be better as '(bps)' to avoid precedence issues
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'clk' may be better as '(clk)' to avoid precedence issues
#767: FILE: drivers/serial/sh-sci.h:589:
+#define SCBRR_VALUE(bps, clk) ((clk+16*bps)/(32*bps)-1)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110759.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 18 warnings, 34 checks, 684 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110759.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
