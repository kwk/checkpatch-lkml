WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#37: 
        Creates formating templates for modules
                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: include/linux/problem.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#201: FILE: include/linux/problem.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#202: FILE: include/linux/problem.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#235: FILE: include/linux/problem.h:51:
+#define introduce(msg, addr, ...) \
+	problem(LOG_INFO, "Introducing: " msg, \
+	detail(addr, "%p", addr), \
+	## __VA_ARGS__)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: include/linux/problem.h:62:
+#define detail(name, fmt, expr) printk(__stringify(name) "=" fmt " ", expr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/linux/problem.h:63:
+#define problem(sev, string,...) \
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#248: FILE: include/linux/problem.h:64:
+do { \
+   printk("<%d>%s: %s  ", sev, __stringify(EVL_FACILITY_NAME), string); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/linux/problem.h:65:
+   printk("<%d>%s: %s  ", sev, __stringify(EVL_FACILITY_NAME), string); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: include/linux/problem.h:65:
+   printk("<%d>%s: %s  ", sev, __stringify(EVL_FACILITY_NAME), string); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/linux/problem.h:66:
+   __VA_ARGS__; printk("\n"); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: include/linux/problem.h:66:
+   __VA_ARGS__; printk("\n"); \

ERROR:SPACING: space required before the open parenthesis '('
#251: FILE: include/linux/problem.h:67:
+} while(0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: include/linux/problem.h:73:
+	printk(__stringify(name) "="); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: include/linux/problem.h:75:
+		printk("%s" fmt, (i > 0 ? (delim) : ""), a[i]); \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/linux/problem.h:80:
+extern int evl_gen_event_type(const char *s1, const char *s2, const char *s3);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/problem.h:81:
+extern void __problem(const char *fac, int evtype, posix_log_severity_t sev, ...);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#268: FILE: include/linux/problem.h:84:
+static void __checkformat(const char *,...)__attribute__((format(printf,1,2)));
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: include/linux/problem.h:84:
+static void __checkformat(const char *,...)__attribute__((format(printf,1,2)));
                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: include/linux/problem.h:84:
+static void __checkformat(const char *,...)__attribute__((format(printf,1,2)));
                                                                          ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1,2) over __attribute__((format(printf,1,2)))
#268: FILE: include/linux/problem.h:84:
+static void __checkformat(const char *,...)__attribute__((format(printf,1,2)));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: include/linux/problem.h:85:
+static inline void __checkformat(const char *fmt,...) { }
                                                 ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#277: FILE: include/linux/problem.h:93:
+struct log_position
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: include/linux/problem.h:94:
+   int line;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/linux/problem.h:95:
+   char function[128 - sizeof(int)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/linux/problem.h:96:
+   char file[128];$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#283: FILE: include/linux/problem.h:99:
+#define _LOG_POS { __LINE__, __FUNCTION__, __FILE__ }

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#292: FILE: include/linux/problem.h:108:
+struct log_info
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: include/linux/problem.h:109:
+   int type;^I^I^I^I/* 1 = problem, 2 = detail */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: include/linux/problem.h:110:
+   char name[128 - sizeof(int)];^I/* message for problem() */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: include/linux/problem.h:111:
+   char format[64];^I^I^I/* facility name for problem() */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: include/linux/problem.h:112:
+   struct log_position pos;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#306: FILE: include/linux/problem.h:122:
+#define detail(name, fmt, expr)		\
+__LINE__, __stringify(name), fmt,	\
+({                              \
+   typeof(expr) __expr;                     \
+   static struct log_info __attribute__((section(".log"), unused)) __ \
+      = { 2, __stringify(name), fmt, _LOG_POS };         \
+   (void *)&__expr; /* Avoid uninitialized warning */         \
+   __checkformat(fmt, __expr);                  \
+   expr;                           \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#306: FILE: include/linux/problem.h:122:
+#define detail(name, fmt, expr)		\
+__LINE__, __stringify(name), fmt,	\
+({                              \
+   typeof(expr) __expr;                     \
+   static struct log_info __attribute__((section(".log"), unused)) __ \
+      = { 2, __stringify(name), fmt, _LOG_POS };         \
+   (void *)&__expr; /* Avoid uninitialized warning */         \
+   __checkformat(fmt, __expr);                  \
+   expr;                           \
+})

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: include/linux/problem.h:125:
+   typeof(expr) __expr;                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: include/linux/problem.h:126:
+   static struct log_info __attribute__((section(".log"), unused)) __ \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".log") over __attribute__((section(".log")))
#310: FILE: include/linux/problem.h:126:
+   static struct log_info __attribute__((section(".log"), unused)) __ \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#311: FILE: include/linux/problem.h:127:
+   static struct log_info __attribute__((section(".log"), unused)) __ \
+      = { 2, __stringify(name), fmt, _LOG_POS };         \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: include/linux/problem.h:127:
+      = { 2, __stringify(name), fmt, _LOG_POS };         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: include/linux/problem.h:128:
+   (void *)&__expr; /* Avoid uninitialized warning */         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: include/linux/problem.h:129:
+   __checkformat(fmt, __expr);                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: include/linux/problem.h:130:
+   expr;                           \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'string' - possible side-effects?
#317: FILE: include/linux/problem.h:133:
+#define problem(sev, string, ...)                  \
+do {                              \
+   static struct log_info __attribute__((section(".log"),unused)) ___ \
+      = { 1, string, __stringify(EVL_FACILITY_NAME), _LOG_POS };               \
+   __problem(__stringify(EVL_FACILITY_NAME), \
+   	evl_gen_event_type(__FILE__, __FUNCTION__, string), \
+	sev, ## __VA_ARGS__, 0);      \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#318: FILE: include/linux/problem.h:134:
+do {                              \
+   static struct log_info __attribute__((section(".log"),unused)) ___ \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/linux/problem.h:135:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: include/linux/problem.h:135:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \
                                                         ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".log") over __attribute__((section(".log")))
#319: FILE: include/linux/problem.h:135:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#320: FILE: include/linux/problem.h:136:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \
+      = { 1, string, __stringify(EVL_FACILITY_NAME), _LOG_POS };               \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: include/linux/problem.h:136:
+      = { 1, string, __stringify(EVL_FACILITY_NAME), _LOG_POS };               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: include/linux/problem.h:137:
+   __problem(__stringify(EVL_FACILITY_NAME), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: include/linux/problem.h:138:
+   ^Ievl_gen_event_type(__FILE__, __FUNCTION__, string), \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: include/linux/problem.h:138:
+   ^Ievl_gen_event_type(__FILE__, __FUNCTION__, string), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: include/linux/problem.h:138:
+   ^Ievl_gen_event_type(__FILE__, __FUNCTION__, string), \$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#322: FILE: include/linux/problem.h:138:
+   	evl_gen_event_type(__FILE__, __FUNCTION__, string), \

ERROR:SPACING: space required before the open parenthesis '('
#324: FILE: include/linux/problem.h:140:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#326: FILE: include/linux/problem.h:142:
+#define __array_detail(name, fmt, delim, addr, dim) \
+__LINE__, "_ARRAY", __stringify(name), fmt, addr, \
+({ \
+   typeof(*(addr)) __expr; \
+   static struct log_info __attribute__((section(".log"), unused)) __ \
+      = { 3, __stringify(name), fmt "/" delim, _LOG_POS }; \
+   (void *)&__expr; /* Avoid uninitialized warning */ \
+   __checkformat(fmt, __expr);                  \
+   dim; \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#326: FILE: include/linux/problem.h:142:
+#define __array_detail(name, fmt, delim, addr, dim) \
+__LINE__, "_ARRAY", __stringify(name), fmt, addr, \
+({ \
+   typeof(*(addr)) __expr; \
+   static struct log_info __attribute__((section(".log"), unused)) __ \
+      = { 3, __stringify(name), fmt "/" delim, _LOG_POS }; \
+   (void *)&__expr; /* Avoid uninitialized warning */ \
+   __checkformat(fmt, __expr);                  \
+   dim; \
+})

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: include/linux/problem.h:145:
+   typeof(*(addr)) __expr; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: include/linux/problem.h:146:
+   static struct log_info __attribute__((section(".log"), unused)) __ \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".log") over __attribute__((section(".log")))
#330: FILE: include/linux/problem.h:146:
+   static struct log_info __attribute__((section(".log"), unused)) __ \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#331: FILE: include/linux/problem.h:147:
+   static struct log_info __attribute__((section(".log"), unused)) __ \
+      = { 3, __stringify(name), fmt "/" delim, _LOG_POS }; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/linux/problem.h:147:
+      = { 3, __stringify(name), fmt "/" delim, _LOG_POS }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: include/linux/problem.h:148:
+   (void *)&__expr; /* Avoid uninitialized warning */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: include/linux/problem.h:149:
+   __checkformat(fmt, __expr);                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: include/linux/problem.h:150:
+   dim; \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#336: FILE: include/linux/problem.h:152:
+#define array_detail(name, fmt, delim, addr, dim) \
+	detail(name##__dim, "%d", dim), \
+	__array_detail(name, fmt, delim, addr, dim)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dim' - possible side-effects?
#336: FILE: include/linux/problem.h:152:
+#define array_detail(name, fmt, delim, addr, dim) \
+	detail(name##__dim, "%d", dim), \
+	__array_detail(name, fmt, delim, addr, dim)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#370: FILE: kernel/problem.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#386: FILE: kernel/problem.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#387: FILE: kernel/problem.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: kernel/problem.c:38:
+extern int evl_gen_facility_code(const char *fname,
+	posix_log_facility_t *fcode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#408: FILE: kernel/problem.c:39:
+extern const char *parse_printf_fmt(const char *fmt, int *pqualifier, int *wp);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#409: FILE: kernel/problem.c:40:
+extern void evl_append_to_buf(char *buf, size_t *reclen, const void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: kernel/problem.c:41:
+extern void evl_append_to_buf(char *buf, size_t *reclen, const void *data,
+	size_t datasz);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#411: FILE: kernel/problem.c:42:
+extern void evl_append_string_to_buf(char *buf, size_t *reclen, const char *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: kernel/problem.c:43:
+extern void evl_append_string_to_buf(char *buf, size_t *reclen, const char *s,
+	int null);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#430: FILE: kernel/problem.c:61:
+ * details[] currently contains nd elements.  Find the slot for the new detail
                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#437: FILE: kernel/problem.c:68:
+find_slot_for_detail(struct dtail *details, int nd, int line, const char *name,
                                                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: kernel/problem.c:69:
+find_slot_for_detail(struct dtail *details, int nd, int line, const char *name,
+	int is_array)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#442: FILE: kernel/problem.c:73:
+	for (dx = nd; dx > 0; dx--) {
 	          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#444: FILE: kernel/problem.c:75:
+		int ret;
+		ret = line - details[dx-1].line;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#444: FILE: kernel/problem.c:75:
+		ret = line - details[dx-1].line;
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#446: FILE: kernel/problem.c:77:
+			int dx1_is_array = (details[dx-1].type == dty_array);
 			                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: kernel/problem.c:78:
+			int dx1_is_array = (details[dx-1].type == dty_array);
+			ret = is_array - dx1_is_array;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#448: FILE: kernel/problem.c:79:
+			if (ret == 0) {
+				ret = strcmp(name, details[dx-1].name);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#449: FILE: kernel/problem.c:80:
+				ret = strcmp(name, details[dx-1].name);
 				                             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#452: FILE: kernel/problem.c:83:
+		if (ret >= 0) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: kernel/problem.c:87:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#457: FILE: kernel/problem.c:88:
+	for (i = nd; i > dx; i--) {
 	         ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#457: FILE: kernel/problem.c:88:
+	for (i = nd; i > dx; i--) {
+		details[i] = details[i-1];
+	}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#458: FILE: kernel/problem.c:89:
+		details[i] = details[i-1];
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#487: FILE: kernel/problem.c:118:
+	type v=va_arg(args,type); \
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: kernel/problem.c:118:
+	type v=va_arg(args,type); \
 	                  ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#494: FILE: kernel/problem.c:125:
+	int i, nd, dx, line;
 	       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#496: FILE: kernel/problem.c:127:
+	for (nd = 0; (line = va_arg(args, int)) != 0; nd++) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#496: FILE: kernel/problem.c:127:
+	for (nd = 0; (line = va_arg(args, int)) != 0; nd++) {
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#503: FILE: kernel/problem.c:134:
+		if (nd >= EVL_MAX_DETAILS) {
 		    ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#504: FILE: kernel/problem.c:135:
+			printk(KERN_ERR "problem() call has > %d details; excess details ignored\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: kernel/problem.c:136:
+			printk(KERN_ERR "problem() call has > %d details; excess details ignored\n",
+				EVL_MAX_DETAILS);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#514: FILE: kernel/problem.c:145:
+		dx = find_slot_for_detail(details, nd, line, name, is_array);
 		                                   ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#520: FILE: kernel/problem.c:151:
+		if (*fmt != '%') {
+			return -1;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#526: FILE: kernel/problem.c:157:
+		if (strlen(fmt) != 1 || wp != 0x0) {
+			return -1;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: kernel/problem.c:163:
+			int dim, elsz;
+			arr = va_arg(args, void*);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#534: FILE: kernel/problem.c:165:
+			if (dim < 0) {
+				dim = 0;
+			}

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#547: FILE: kernel/problem.c:178:
+				elsz = sizeof(void*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: kernel/problem.c:187:
+^I^I    ^I^Icase 'L': elsz = sizeof(long long);^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#556: FILE: kernel/problem.c:187:
+^I^I    ^I^Icase 'L': elsz = sizeof(long long);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#556: FILE: kernel/problem.c:187:
+		    		case 'L': elsz = sizeof(long long);	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: kernel/problem.c:188:
+^I^I    ^I^Icase 'l': elsz = sizeof(long);^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#557: FILE: kernel/problem.c:188:
+^I^I    ^I^Icase 'l': elsz = sizeof(long);^I^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#557: FILE: kernel/problem.c:188:
+		    		case 'l': elsz = sizeof(long);		break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#558: FILE: kernel/problem.c:189:
+				case 'Z': elsz = sizeof(size_t);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#559: FILE: kernel/problem.c:190:
+				case 'H': elsz = sizeof(char);		break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#560: FILE: kernel/problem.c:191:
+				case 'h': elsz = sizeof(short);		break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#561: FILE: kernel/problem.c:192:
+				default:  elsz = sizeof(int);		break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#567: FILE: kernel/problem.c:198:
+			memcpy(&details[dx].value, &arr, sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#576: FILE: kernel/problem.c:207:
+				memcpy(&details[dx].value, &s, sizeof(char*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#580: FILE: kernel/problem.c:211:
+				COPYDETAIL(void*)

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: kernel/problem.c:220:
+^I^I    ^I^Icase 'L': COPYDETAIL(long long)^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#589: FILE: kernel/problem.c:220:
+^I^I    ^I^Icase 'L': COPYDETAIL(long long)^Ibreak;$

CHECK:SPACING: No space is necessary after a cast
#589: FILE: kernel/problem.c:220:
+		    		case 'L': COPYDETAIL(long long)	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#589: FILE: kernel/problem.c:220:
+		    		case 'L': COPYDETAIL(long long)	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: kernel/problem.c:221:
+^I^I    ^I^Icase 'l': COPYDETAIL(long)^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#590: FILE: kernel/problem.c:221:
+^I^I    ^I^Icase 'l': COPYDETAIL(long)^Ibreak;$

CHECK:SPACING: No space is necessary after a cast
#590: FILE: kernel/problem.c:221:
+		    		case 'l': COPYDETAIL(long)	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#590: FILE: kernel/problem.c:221:
+		    		case 'l': COPYDETAIL(long)	break;

CHECK:SPACING: No space is necessary after a cast
#591: FILE: kernel/problem.c:222:
+				case 'Z': COPYDETAIL(size_t)	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#591: FILE: kernel/problem.c:222:
+				case 'Z': COPYDETAIL(size_t)	break;

CHECK:SPACING: No space is necessary after a cast
#592: FILE: kernel/problem.c:223:
+				default:  COPYDETAIL(int)	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#592: FILE: kernel/problem.c:223:
+				default:  COPYDETAIL(int)	break;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#602: FILE: kernel/problem.c:233:
+	for (i = 0; i < nd; i++) {
 	                ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: kernel/problem.c:237:
+			evl_append_to_buf(buf, reclen, &details[i].value,
+				details[i].size);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#609: FILE: kernel/problem.c:240:
+			memcpy(&s, &details[i].value, sizeof(char*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#613: FILE: kernel/problem.c:244:
+			memcpy(&arr, &details[i].value, sizeof(void*));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#643: FILE: kernel/problem.c:274:
+	if (evl_gen_facility_code(facname, &faccode) != 0) {
+		faccode = LOG_KERN;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#650: FILE: kernel/problem.c:281:
+		printk(KERN_ERR "evl_pack_details() failed in __problem() -- "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__problem', this function's name, in a string
#650: FILE: kernel/problem.c:281:
+		printk(KERN_ERR "evl_pack_details() failed in __problem() -- "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#651: FILE: kernel/problem.c:282:
+		printk(KERN_ERR "evl_pack_details() failed in __problem() -- "
+			"facility=%s, event type=0x%x, severity=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#661: FILE: kernel/problem.c:292:
+	(void) posix_log_write(faccode, evtype, sev, recbuf, reclen,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#666: FILE: kernel/problem.c:297:
+EXPORT_SYMBOL(__problem);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#692: FILE: scripts/evlib.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#708: FILE: scripts/evlib.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#709: FILE: scripts/evlib.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:CAMELCASE: Avoid CamelCase: <_evlTmplTypeInfo>
#736: FILE: scripts/evlib.c:45:
+struct type_info _evlTmplTypeInfo[] = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <_evlParseFmtConvSpec>
#777: FILE: scripts/evlib.c:86:
+_evlParseFmtConvSpec(const char *fmt, struct evl_parsed_format *pf)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#790: FILE: scripts/evlib.c:99:
+			if (*c == *f) {
+				return -1;
+			}

CHECK:SPACING: No space is necessary after a cast
#798: FILE: scripts/evlib.c:107:
+	width = strtoul(f, (char**) &c, 10);

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#798: FILE: scripts/evlib.c:107:
+	width = strtoul(f, (char**) &c, 10);

CHECK:SPACING: No space is necessary after a cast
#804: FILE: scripts/evlib.c:113:
+		precision = strtoul(f, (char**) &c, 10);

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#804: FILE: scripts/evlib.c:113:
+		precision = strtoul(f, (char**) &c, 10);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#814: FILE: scripts/evlib.c:123:
+	while (strchr("hjlLtzZ", *f)) {
+		f++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#824: FILE: scripts/evlib.c:133:
+	if (!isalpha(*f)) {
+		return -1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#832: FILE: scripts/evlib.c:141:
+	if (nflags > 0) {
+		(void) strncpy(pf->fm_flags, fmt, nflags);
+	}

CHECK:SPACING: No space is necessary after a cast
#833: FILE: scripts/evlib.c:142:
+		(void) strncpy(pf->fm_flags, fmt, nflags);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#836: FILE: scripts/evlib.c:145:
+	if (mfwidth > 0) {
+		(void) strncpy(pf->fm_modifier, modifier, mfwidth);
+	}

CHECK:SPACING: No space is necessary after a cast
#837: FILE: scripts/evlib.c:146:
+		(void) strncpy(pf->fm_modifier, modifier, mfwidth);

CHECK:CAMELCASE: Avoid CamelCase: <computeIntType>
#855: FILE: scripts/evlib.c:164:
+computeIntType(size_t sz)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#857: FILE: scripts/evlib.c:166:
+	if (sz == sizeof(int)) {
[...]
+	} else if (sz == sizeof(long)) {
[...]
+	} else if (sz == sizeof(long long)) {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <computeSpecialTypes>
#871: FILE: scripts/evlib.c:180:
+computeSpecialTypes(void)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#873: FILE: scripts/evlib.c:182:
+	static int alreadyComputed = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <alreadyComputed>
#873: FILE: scripts/evlib.c:182:
+	static int alreadyComputed = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#874: FILE: scripts/evlib.c:183:
+	static int alreadyComputed = 0;
+	if (alreadyComputed) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#874: FILE: scripts/evlib.c:183:
+	if (alreadyComputed) {
+		return;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <adjustCharType>
#885: FILE: scripts/evlib.c:194:
+adjustCharType(const char *mod, int promote)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#887: FILE: scripts/evlib.c:196:
+	if (!strcmp(mod, "")) {
+		return (promote ? TY_INT : TY_CHAR);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#888: FILE: scripts/evlib.c:197:
+		return (promote ? TY_INT : TY_CHAR);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#890: FILE: scripts/evlib.c:199:
+	if (!strcmp(mod, "l")) {
+		return TY_WCHAR;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <adjustIntType>
#898: FILE: scripts/evlib.c:207:
+adjustIntType(const char *mod, int promote)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#900: FILE: scripts/evlib.c:209:
+	if (!strcmp(mod, "")) {
+		return TY_INT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#903: FILE: scripts/evlib.c:212:
+	if (!strcmp(mod, "h")) {
+		return (promote ? TY_INT : TY_SHORT);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#904: FILE: scripts/evlib.c:213:
+		return (promote ? TY_INT : TY_SHORT);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#906: FILE: scripts/evlib.c:215:
+	if (!strcmp(mod, "hh")) {
+		return (promote ? TY_INT : TY_CHAR);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#907: FILE: scripts/evlib.c:216:
+		return (promote ? TY_INT : TY_CHAR);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#909: FILE: scripts/evlib.c:218:
+	if (!strcmp(mod, "l")) {
+		return TY_LONG;
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#913: FILE: scripts/evlib.c:222:
+	if (!strcmp(mod, "ll")
+	    || !strcmp(mod, "L") /* for printk */ ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#913: FILE: scripts/evlib.c:222:
+	    || !strcmp(mod, "L") /* for printk */ ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#917: FILE: scripts/evlib.c:226:
+	if (!strcmp(mod, "z")
+	    || !strcmp(mod, "Z") /* for printk */ ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#917: FILE: scripts/evlib.c:226:
+	    || !strcmp(mod, "Z") /* for printk */ ) {

CHECK:CAMELCASE: Avoid CamelCase: <adjustDoubleType>
#937: FILE: scripts/evlib.c:246:
+adjustDoubleType(const char *mod)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#939: FILE: scripts/evlib.c:248:
+	if (!strcmp(mod, "")) {
+		return TY_DOUBLE;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#942: FILE: scripts/evlib.c:251:
+	if (!strcmp(mod, "L")) {
+		return TY_LDOUBLE;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <adjustStringType>
#950: FILE: scripts/evlib.c:259:
+adjustStringType(const char *mod)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#952: FILE: scripts/evlib.c:261:
+	if (!strcmp(mod, "")) {
+		return TY_STRING;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#955: FILE: scripts/evlib.c:264:
+	if (!strcmp(mod, "l")) {
+		return TY_WSTRING;
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#962: FILE: scripts/evlib.c:271:
+static tmpl_base_type_t
+validateNConversion(const char *mod) {

CHECK:CAMELCASE: Avoid CamelCase: <validateNConversion>
#963: FILE: scripts/evlib.c:272:
+validateNConversion(const char *mod) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#965: FILE: scripts/evlib.c:274:
+	if (!strcmp(mod, "")
+	    || !strcmp(mod, "l")

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#966: FILE: scripts/evlib.c:275:
+	    || !strcmp(mod, "l")
+	    || !strcmp(mod, "ll")

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#967: FILE: scripts/evlib.c:276:
+	    || !strcmp(mod, "ll")
+	    || !strcmp(mod, "L")) {

CHECK:CAMELCASE: Avoid CamelCase: <_evlGetTypeFromConversion>
#979: FILE: scripts/evlib.c:288:
+_evlGetTypeFromConversion(struct evl_parsed_format *pf, int promote)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1033: FILE: scripts/evlib.c:342:
+	int		i,j;
 	   		 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1035: FILE: scripts/evlib.c:344:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: scripts/evlib.c:344:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: scripts/evlib.c:346:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: scripts/evlib.c:346:
+    $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1038: FILE: scripts/evlib.c:347:
+	for (i=0; i<len; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1038: FILE: scripts/evlib.c:347:
+	for (i=0; i<len; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1040: FILE: scripts/evlib.c:349:
+		for (j=0; j<8; j++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1040: FILE: scripts/evlib.c:349:
+		for (j=0; j<8; j++) {
 		           ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1041: FILE: scripts/evlib.c:350:
+			if ((octet >> 7) ^ (result >> 31)) {
[...]
+			} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: scripts/evlib.c:358:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: scripts/evlib.c:358:
+ $

CHECK:CAMELCASE: Avoid CamelCase: <_evlGenCanonicalFacilityName>
#1056: FILE: scripts/evlib.c:365:
+_evlGenCanonicalFacilityName(const unsigned char *facName,

CHECK:CAMELCASE: Avoid CamelCase: <facName>
#1056: FILE: scripts/evlib.c:365:
+_evlGenCanonicalFacilityName(const unsigned char *facName,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: scripts/evlib.c:366:
+_evlGenCanonicalFacilityName(const unsigned char *facName,
+	unsigned char *canonical)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1062: FILE: scripts/evlib.c:371:
+	if (!facName || !canonical || facName[0] == '\0') {
+		return EINVAL;
+	}

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EINVAL)
#1063: FILE: scripts/evlib.c:372:
+		return EINVAL;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1066: FILE: scripts/evlib.c:375:
+	for (f=facName, c=canonical; *f; f++, c++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1066: FILE: scripts/evlib.c:375:
+	for (f=facName, c=canonical; *f; f++, c++) {
 	                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1068: FILE: scripts/evlib.c:377:
+		unsigned int uf = *f;
+		if ('A' <= uf && uf <= 'Z') {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1071: FILE: scripts/evlib.c:380:
+		} else if (uf > 0x7f
+		    || ('a' <= uf && uf <= 'z')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1072: FILE: scripts/evlib.c:381:
+		    || ('a' <= uf && uf <= 'z')
+		    || ('0' <= uf && uf <= '9')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1073: FILE: scripts/evlib.c:382:
+		    || ('0' <= uf && uf <= '9')
+		    || uf == '.'

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1074: FILE: scripts/evlib.c:383:
+		    || uf == '.'
+		    || uf == '_') {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1085: FILE: scripts/evlib.c:394:
+	if (!strcmp(canonical, ".") || !strcmp(canonical, "..")) {
+		canonical[0] = '_';
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1094: FILE: scripts/evlib.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1110: FILE: scripts/evlib.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1111: FILE: scripts/evlib.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1121: FILE: scripts/evlib.h:28:
+typedef enum tmpl_base_type {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1166: FILE: scripts/evlib.h:73:
+extern int _evlParseFmtConvSpec(const char *fmt, struct evl_parsed_format *pf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1167: FILE: scripts/evlib.h:74:
+extern tmpl_base_type_t _evlGetTypeFromConversion(struct evl_parsed_format *pf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: scripts/evlib.h:75:
+extern tmpl_base_type_t _evlGetTypeFromConversion(struct evl_parsed_format *pf,
+	int promote);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1169: FILE: scripts/evlib.h:76:
+extern unsigned int evl_crc32(const unsigned char *data, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1170: FILE: scripts/evlib.h:77:
+extern int _evlGenCanonicalFacilityName(const unsigned char *facName,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1171: FILE: scripts/evlib.h:78:
+extern int _evlGenCanonicalFacilityName(const unsigned char *facName,
+	unsigned char *canonical);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1176: FILE: scripts/generate_templates.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1192: FILE: scripts/generate_templates.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1193: FILE: scripts/generate_templates.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1222: FILE: scripts/generate_templates.c:47:
+static const char *progname = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1223: FILE: scripts/generate_templates.c:48:
+static int errors = 0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1242: FILE: scripts/generate_templates.c:67:
+	return evl_crc32((const unsigned char*)s, strlen(s));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1257: FILE: scripts/generate_templates.c:82:
+	struct stat st;
+	if (stat(path, &st) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1263: FILE: scripts/generate_templates.c:88:
+		if (errno != ENOENT) {
+			goto badpath;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1266: FILE: scripts/generate_templates.c:91:
+		if (mkdir(path, 0755) != 0) {
+			goto badpath;
+		}

CHECK:SPACING: No space is necessary after a cast
#1292: FILE: scripts/generate_templates.c:117:
+	(void) _evlGenCanonicalFacilityName(facname, cfacname);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1306: FILE: scripts/generate_templates.c:131:
+	if (!f) {
+		goto badpath;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1337: FILE: scripts/generate_templates.c:162:
+	char *swe;
+	for (swe = s_with_escapes; *s; s++, swe++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1339: FILE: scripts/generate_templates.c:164:
+		case '\\':	*swe++ = '\\'; *swe = '\\'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1340: FILE: scripts/generate_templates.c:165:
+		case '"':	*swe++ = '\\'; *swe = '"'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1341: FILE: scripts/generate_templates.c:166:
+		case '\a':	*swe++ = '\\'; *swe = 'a'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1342: FILE: scripts/generate_templates.c:167:
+		case '\b':	*swe++ = '\\'; *swe = 'b'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1343: FILE: scripts/generate_templates.c:168:
+		case '\f':	*swe++ = '\\'; *swe = 'f'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1344: FILE: scripts/generate_templates.c:169:
+		case '\n':	*swe++ = '\\'; *swe = 'n'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1345: FILE: scripts/generate_templates.c:170:
+		case '\r':	*swe++ = '\\'; *swe = 'r'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1346: FILE: scripts/generate_templates.c:171:
+		case '\t':	*swe++ = '\\'; *swe = 't'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1347: FILE: scripts/generate_templates.c:172:
+		case '\v':	*swe++ = '\\'; *swe = 'v'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1348: FILE: scripts/generate_templates.c:173:
+		default:	*swe = *s; break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: scripts/generate_templates.c:187:
+create_template(const char *rootdir, const struct log_info *info,
+	int num_details)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1400: FILE: scripts/generate_templates.c:225:
+					fprintf(stderr,
+"%s: bad format/delimiter %s for detail %s of problem \"%s\"\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1408: FILE: scripts/generate_templates.c:233:
+			if (*fmt != '%'
+			    || _evlParseFmtConvSpec(fmt+1, &pf) != 0) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1408: FILE: scripts/generate_templates.c:233:
+			    || _evlParseFmtConvSpec(fmt+1, &pf) != 0) {
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1410: FILE: scripts/generate_templates.c:235:
+				fprintf(stderr,
+"%s: bad format %s for detail %s of problem \"%s\"\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1435: FILE: scripts/generate_templates.c:260:
+		for (i = 1; i <= num_details; i++) {
+			fprintf(t, " %s=%%%s%%", info[i].name, info[i].name);
+		}

CHECK:SPACING: No space is necessary after a cast
#1441: FILE: scripts/generate_templates.c:266:
+	(void) fclose(t);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1461: FILE: scripts/generate_templates.c:286:
+			if (ret == 0) {
+				ret = strcmp(a->name, b->name);
+			}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1474: FILE: scripts/generate_templates.c:299:
+	for (i = 1; info[i].type > 1; i++);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1475: FILE: scripts/generate_templates.c:300:
+	return i-1;
 	        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1483: FILE: scripts/generate_templates.c:308:
+	const struct log_info *in, *end = info + ndetails;
+	for (in = info; in < end; in++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: scripts/generate_templates.c:310:
+		printf("%p %d %s\t%s\t%s:%s:%d\n",
+			in, in->type, in->name, in->format,

CHECK:SPACING: No space is necessary after a cast
#1551: FILE: scripts/generate_templates.c:376:
+				bfd_map_over_sections(i, do_section, (void*) tsd);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1551: FILE: scripts/generate_templates.c:376:
+				bfd_map_over_sections(i, do_section, (void*) tsd);

CHECK:SPACING: No space is necessary after a cast
#1557: FILE: scripts/generate_templates.c:382:
+			bfd_map_over_sections(obj, do_section, (void*) tsd);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1557: FILE: scripts/generate_templates.c:382:
+			bfd_map_over_sections(obj, do_section, (void*) tsd);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1566: FILE: scripts/generate_templates.c:391:
+	exit (errors ? 1 : 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430382.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 81 errors, 113 warnings, 70 checks, 1455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430382.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
