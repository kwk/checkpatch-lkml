WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#include <linux/dsyscall.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
_syscall3(int,dsyscall,int,type,char *,user_name, struct dsyscall *, dcall);

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#107: 
repeat (hopefully, unless the machine is up for a really really long

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
#define _dsyscall_call(name,args,arg) \

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#162: 
turn it off and it wont be available for drivers.
                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: include/linux/dsyscall.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#223: FILE: include/linux/dsyscall.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#224: FILE: include/linux/dsyscall.h:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#242: FILE: include/linux/dsyscall.h:38:
+	long iteration;			/* incase this box runs longer than we have been on earth
 	               			   ^^^^^^

WARNING:TYPO_SPELLING: 'interation' may be misspelled - perhaps 'iteration'?
#243: FILE: include/linux/dsyscall.h:39:
+					   count the iterations of id's. If interation overflows,
 					                                    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#243: FILE: include/linux/dsyscall.h:39:
+	long iteration;			/* incase this box runs longer than we have been on earth
+					   count the iterations of id's. If interation overflows,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#244: FILE: include/linux/dsyscall.h:40:
+					   then we are simply out of luck! */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#249: FILE: include/linux/dsyscall.h:45:
+#define DSYSCALL_FUNC(func) ((int(*)(long,...))func)
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: include/linux/dsyscall.h:54:
+^Ichar name[DSYSCALL_NAME_SZ];^I/* name of the dynamic syscall */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: include/linux/dsyscall.h:56:
+	int (*func)(long,...);		/* The actual dynamic system call */
 	                ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#260: FILE: include/linux/dsyscall.h:56:
+	int (*func)(long,...);		/* The actual dynamic system call */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/linux/dsyscall.h:62:
+int dsyscall_register(char *name, int args, int (*func)(long,...));
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: include/linux/dsyscall.h:70:
+#define _dsyscall_call(name,args,arg) \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: include/linux/dsyscall.h:70:
+#define _dsyscall_call(name,args,arg) \
                                 ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#274: FILE: include/linux/dsyscall.h:70:
+#define _dsyscall_call(name,args,arg) \
+{ \
+ long __res;  \
+ static int has_init = 0; \
+ static struct dsyscall ds; \
+ if (!has_init) { \
+	 __res = dsyscall(DSYSCALL_GET,#name,&ds); \
+	 if (!__res) \
+		 has_init = 1; \
+	 else \
+		 return __res; \
+ } \
+ ds.argc = args; \
+ ds.argv = arg; \
+ __res = dsyscall(DSYSCALL_CALL,#name,&ds); \
+ if (__res < 0 && errno == ENODEV) { \
+	 has_init = 0; \
+ } \
+ return __res; \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: include/linux/dsyscall.h:72:
+ long __res;  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: include/linux/dsyscall.h:73:
+ static int has_init = 0; \$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#277: FILE: include/linux/dsyscall.h:73:
+ static int has_init = 0; \

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: include/linux/dsyscall.h:74:
+ static struct dsyscall ds; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/linux/dsyscall.h:75:
+ if (!has_init) { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 9)
#279: FILE: include/linux/dsyscall.h:75:
+ if (!has_init) { \
+	 __res = dsyscall(DSYSCALL_GET,#name,&ds); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: include/linux/dsyscall.h:76:
+	 __res = dsyscall(DSYSCALL_GET,#name,&ds); \
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#280: FILE: include/linux/dsyscall.h:76:
+	 __res = dsyscall(DSYSCALL_GET,#name,&ds); \
 	                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#280: FILE: include/linux/dsyscall.h:76:
+	 __res = dsyscall(DSYSCALL_GET,#name,&ds); \
 	                                     ^

WARNING:TABSTOP: Statements should start on a tabstop
#281: FILE: include/linux/dsyscall.h:77:
+	 if (!__res) \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#281: FILE: include/linux/dsyscall.h:77:
+	 if (!__res) \
+		 has_init = 1; \

WARNING:TABSTOP: Statements should start on a tabstop
#283: FILE: include/linux/dsyscall.h:79:
+	 else \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#283: FILE: include/linux/dsyscall.h:79:
+	 else \
+		 return __res; \

WARNING:TABSTOP: Statements should start on a tabstop
#284: FILE: include/linux/dsyscall.h:80:
+		 return __res; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/linux/dsyscall.h:81:
+ } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: include/linux/dsyscall.h:82:
+ ds.argc = args; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/linux/dsyscall.h:83:
+ ds.argv = arg; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/linux/dsyscall.h:84:
+ __res = dsyscall(DSYSCALL_CALL,#name,&ds); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: include/linux/dsyscall.h:84:
+ __res = dsyscall(DSYSCALL_CALL,#name,&ds); \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#288: FILE: include/linux/dsyscall.h:84:
+ __res = dsyscall(DSYSCALL_CALL,#name,&ds); \
                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#288: FILE: include/linux/dsyscall.h:84:
+ __res = dsyscall(DSYSCALL_CALL,#name,&ds); \
                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: include/linux/dsyscall.h:85:
+ if (__res < 0 && errno == ENODEV) { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 9)
#289: FILE: include/linux/dsyscall.h:85:
+ if (__res < 0 && errno == ENODEV) { \
+	 has_init = 0; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/linux/dsyscall.h:87:
+ } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: include/linux/dsyscall.h:88:
+ return __res; \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/linux/dsyscall.h:91:
+#define _dsyscall0(type,name) \
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#295: FILE: include/linux/dsyscall.h:91:
+#define _dsyscall0(type,name) \
+type name(void) \
+{ \
+ long argv[0]; \
+ _dsyscall_call(name,0,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#295: FILE: include/linux/dsyscall.h:91:
+#define _dsyscall0(type,name) \
+type name(void) \
+{ \
+ long argv[0]; \
+ _dsyscall_call(name,0,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#295: FILE: include/linux/dsyscall.h:91:
+#define _dsyscall0(type,name) \
+type name(void) \
+{ \
+ long argv[0]; \
+ _dsyscall_call(name,0,argv); \
+ return 0; /* not reached */ \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/linux/dsyscall.h:94:
+ long argv[0]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/dsyscall.h:95:
+ _dsyscall_call(name,0,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: include/linux/dsyscall.h:95:
+ _dsyscall_call(name,0,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: include/linux/dsyscall.h:95:
+ _dsyscall_call(name,0,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: include/linux/dsyscall.h:96:
+ return 0; /* not reached */ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: include/linux/dsyscall.h:99:
+#define _dsyscall1(type,name,type1,arg1) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: include/linux/dsyscall.h:99:
+#define _dsyscall1(type,name,type1,arg1) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: include/linux/dsyscall.h:99:
+#define _dsyscall1(type,name,type1,arg1) \
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#303: FILE: include/linux/dsyscall.h:99:
+#define _dsyscall1(type,name,type1,arg1) \
+type name(type1 arg1) \
+{ \
+ long argv[1]; \
+ argv[0] = (long)arg1; \
+ _dsyscall_call(name,1,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#303: FILE: include/linux/dsyscall.h:99:
+#define _dsyscall1(type,name,type1,arg1) \
+type name(type1 arg1) \
+{ \
+ long argv[1]; \
+ argv[0] = (long)arg1; \
+ _dsyscall_call(name,1,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#303: FILE: include/linux/dsyscall.h:99:
+#define _dsyscall1(type,name,type1,arg1) \
+type name(type1 arg1) \
+{ \
+ long argv[1]; \
+ argv[0] = (long)arg1; \
+ _dsyscall_call(name,1,argv); \
+ return 0; /* not reached */ \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: include/linux/dsyscall.h:102:
+ long argv[1]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: include/linux/dsyscall.h:103:
+ argv[0] = (long)arg1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: include/linux/dsyscall.h:104:
+ _dsyscall_call(name,1,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#308: FILE: include/linux/dsyscall.h:104:
+ _dsyscall_call(name,1,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#308: FILE: include/linux/dsyscall.h:104:
+ _dsyscall_call(name,1,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: include/linux/dsyscall.h:105:
+ return 0; /* not reached */ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
+type name(type1 arg1, type2 arg2) \
+{ \
+ long argv[2]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ _dsyscall_call(name,2,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
+type name(type1 arg1, type2 arg2) \
+{ \
+ long argv[2]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ _dsyscall_call(name,2,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
+type name(type1 arg1, type2 arg2) \
+{ \
+ long argv[2]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ _dsyscall_call(name,2,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#312: FILE: include/linux/dsyscall.h:108:
+#define _dsyscall2(type,name,type1,arg1,type2,arg2) \
+type name(type1 arg1, type2 arg2) \
+{ \
+ long argv[2]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ _dsyscall_call(name,2,argv); \
+ return 0; /* not reached */ \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: include/linux/dsyscall.h:111:
+ long argv[2]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: include/linux/dsyscall.h:112:
+ argv[0] = (long)arg1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/linux/dsyscall.h:113:
+ argv[1] = (long)arg2; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: include/linux/dsyscall.h:114:
+ _dsyscall_call(name,2,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: include/linux/dsyscall.h:114:
+ _dsyscall_call(name,2,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: include/linux/dsyscall.h:114:
+ _dsyscall_call(name,2,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/linux/dsyscall.h:115:
+ return 0; /* not reached */ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1, type2 arg2, type3 arg3) \
+{ \
+ long argv[3]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ _dsyscall_call(name,3,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1, type2 arg2, type3 arg3) \
+{ \
+ long argv[3]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ _dsyscall_call(name,3,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1, type2 arg2, type3 arg3) \
+{ \
+ long argv[3]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ _dsyscall_call(name,3,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1, type2 arg2, type3 arg3) \
+{ \
+ long argv[3]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ _dsyscall_call(name,3,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#322: FILE: include/linux/dsyscall.h:118:
+#define _dsyscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
+type name(type1 arg1, type2 arg2, type3 arg3) \
+{ \
+ long argv[3]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ _dsyscall_call(name,3,argv); \
+ return 0; /* not reached */ \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: include/linux/dsyscall.h:121:
+ long argv[3]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: include/linux/dsyscall.h:122:
+ argv[0] = (long)arg1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: include/linux/dsyscall.h:123:
+ argv[1] = (long)arg2; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: include/linux/dsyscall.h:124:
+ argv[2] = (long)arg3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: include/linux/dsyscall.h:125:
+ _dsyscall_call(name,3,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#329: FILE: include/linux/dsyscall.h:125:
+ _dsyscall_call(name,3,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#329: FILE: include/linux/dsyscall.h:125:
+ _dsyscall_call(name,3,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: include/linux/dsyscall.h:126:
+ return 0; /* not reached */ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+ long argv[4]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ _dsyscall_call(name,4,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+ long argv[4]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ _dsyscall_call(name,4,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+ long argv[4]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ _dsyscall_call(name,4,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+ long argv[4]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ _dsyscall_call(name,4,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+ long argv[4]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ _dsyscall_call(name,4,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#333: FILE: include/linux/dsyscall.h:129:
+#define _dsyscall4(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+ long argv[4]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ _dsyscall_call(name,4,argv); \
+ return 0; /* not reached */ \
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: include/linux/dsyscall.h:130:
+                   type4,arg4) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: include/linux/dsyscall.h:130:
+                   type4,arg4) \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: include/linux/dsyscall.h:130:
+                   type4,arg4) \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: include/linux/dsyscall.h:133:
+ long argv[4]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: include/linux/dsyscall.h:134:
+ argv[0] = (long)arg1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: include/linux/dsyscall.h:135:
+ argv[1] = (long)arg2; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: include/linux/dsyscall.h:136:
+ argv[2] = (long)arg3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: include/linux/dsyscall.h:137:
+ argv[3] = (long)arg4; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: include/linux/dsyscall.h:138:
+ _dsyscall_call(name,4,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/linux/dsyscall.h:138:
+ _dsyscall_call(name,4,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/linux/dsyscall.h:138:
+ _dsyscall_call(name,4,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/linux/dsyscall.h:139:
+ return 0; /* not reached */ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#346: FILE: include/linux/dsyscall.h:142:
+#define _dsyscall5(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5) \
+{ \
+ long argv[5]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ _dsyscall_call(name,5,argv); \
+ return 0; /* not reached */ \
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: include/linux/dsyscall.h:143:
+                   type4,arg4,type5,arg5) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: include/linux/dsyscall.h:143:
+                   type4,arg4,type5,arg5) \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#347: FILE: include/linux/dsyscall.h:143:
+                   type4,arg4,type5,arg5) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#347: FILE: include/linux/dsyscall.h:143:
+                   type4,arg4,type5,arg5) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#347: FILE: include/linux/dsyscall.h:143:
+                   type4,arg4,type5,arg5) \
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: include/linux/dsyscall.h:145:
+          type5 arg5) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: include/linux/dsyscall.h:145:
+          type5 arg5) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: include/linux/dsyscall.h:147:
+ long argv[5]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: include/linux/dsyscall.h:148:
+ argv[0] = (long)arg1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/linux/dsyscall.h:149:
+ argv[1] = (long)arg2; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: include/linux/dsyscall.h:150:
+ argv[2] = (long)arg3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: include/linux/dsyscall.h:151:
+ argv[3] = (long)arg4; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/linux/dsyscall.h:152:
+ argv[4] = (long)arg5; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: include/linux/dsyscall.h:153:
+ _dsyscall_call(name,5,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/dsyscall.h:153:
+ _dsyscall_call(name,5,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/dsyscall.h:153:
+ _dsyscall_call(name,5,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/linux/dsyscall.h:154:
+ return 0; /* not reached */ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg6' - possible side-effects?
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#361: FILE: include/linux/dsyscall.h:157:
+#define _dsyscall6(type,name,type1,arg1,type2,arg2,type3,arg3, \
+                   type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, \
+          type5 arg5, type6 arg6) \
+{ \
+ long argv[6]; \
+ argv[0] = (long)arg1; \
+ argv[1] = (long)arg2; \
+ argv[2] = (long)arg3; \
+ argv[3] = (long)arg4; \
+ argv[4] = (long)arg5; \
+ argv[5] = (long)arg6; \
+ _dsyscall_call(name,6,argv); \
+ return 0; /* not reached */ \
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/linux/dsyscall.h:158:
+                   type4,arg4,type5,arg5,type6,arg6) \
                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: include/linux/dsyscall.h:160:
+          type5 arg5, type6 arg6) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: include/linux/dsyscall.h:160:
+          type5 arg5, type6 arg6) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: include/linux/dsyscall.h:162:
+ long argv[6]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: include/linux/dsyscall.h:163:
+ argv[0] = (long)arg1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: include/linux/dsyscall.h:164:
+ argv[1] = (long)arg2; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: include/linux/dsyscall.h:165:
+ argv[2] = (long)arg3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: include/linux/dsyscall.h:166:
+ argv[3] = (long)arg4; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: include/linux/dsyscall.h:167:
+ argv[4] = (long)arg5; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: include/linux/dsyscall.h:168:
+ argv[5] = (long)arg6; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: include/linux/dsyscall.h:169:
+ _dsyscall_call(name,6,argv); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/linux/dsyscall.h:169:
+ _dsyscall_call(name,6,argv); \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/linux/dsyscall.h:169:
+ _dsyscall_call(name,6,argv); \
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: include/linux/dsyscall.h:170:
+ return 0; /* not reached */ \$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#386: FILE: init/Kconfig:252:
+config DSYSCALL
+	bool "Enable dynamic system calls"
+	default y
+	help
+	  This option enables usage of dynamic system calls by drivers.
+	  This allows drivers to register system calls that are not
+	  already defined by the compiled kernel.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#401: FILE: kernel/dsyscall.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#419: FILE: kernel/dsyscall.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#420: FILE: kernel/dsyscall.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#431: FILE: kernel/dsyscall.c:31:
+#include <asm/uaccess.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#435: FILE: kernel/dsyscall.c:35:
+#define dprintk(x...) printk(x)

ERROR:SPACING: space required before the open parenthesis '('
#437: FILE: kernel/dsyscall.c:37:
+#define dprintk(x...) do { } while(0)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#444: FILE: kernel/dsyscall.c:44:
+static long dsyscall_next_id = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#445: FILE: kernel/dsyscall.c:45:
+static long dsyscall_iterations = 0;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#452: FILE: kernel/dsyscall.c:52:
+	list_add(&ds->link,&dsyscall_hash[ds->id & (DSYSCALL_HASH_SIZE - 1)]);
 	                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#452: FILE: kernel/dsyscall.c:52:
+	list_add(&ds->link,&dsyscall_hash[ds->id & (DSYSCALL_HASH_SIZE - 1)]);
 	                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#456: FILE: kernel/dsyscall.c:56:
+static struct dsyscall_struct * find_dsyscall_by_name(char *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#462: FILE: kernel/dsyscall.c:62:
+	list_for_each(li,&dsyscall_syscalls) {
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#462: FILE: kernel/dsyscall.c:62:
+	list_for_each(li,&dsyscall_syscalls) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: kernel/dsyscall.c:64:
+		if (strcmp(ds->name,name) == 0) {
 		                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#473: FILE: kernel/dsyscall.c:73:
+static struct dsyscall_struct * find_dsyscall_by_id(struct dsyscall *d)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#479: FILE: kernel/dsyscall.c:79:
+	list_for_each(li,&dsyscall_hash[d->id & (DSYSCALL_HASH_SIZE - 1)]) {
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#479: FILE: kernel/dsyscall.c:79:
+	list_for_each(li,&dsyscall_hash[d->id & (DSYSCALL_HASH_SIZE - 1)]) {
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: kernel/dsyscall.c:82:
+^I^I^Iif (likely(ds->iteration == d->iteration)) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#490: FILE: kernel/dsyscall.c:90:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'if'
#500: FILE: kernel/dsyscall.c:100:
+	 * OK, this is pretty long to hold a semaphore, even if
+	 * if is just for reading. But if you want speed, don't use

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_dsyscall', this function's name, in a string
#506: FILE: kernel/dsyscall.c:106:
+		dprintk("sys_dsyscall: DSYSCALL_GET, ");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: kernel/dsyscall.c:107:
+		memset (&d,0,sizeof(d));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#507: FILE: kernel/dsyscall.c:107:
+		memset (&d,0,sizeof(d));
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#507: FILE: kernel/dsyscall.c:107:
+		memset (&d,0,sizeof(d));
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: kernel/dsyscall.c:109:
+		if (strncpy_from_user(d.name,user_name,DSYSCALL_NAME_SZ-1) < 0) {
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: kernel/dsyscall.c:109:
+		if (strncpy_from_user(d.name,user_name,DSYSCALL_NAME_SZ-1) < 0) {
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#509: FILE: kernel/dsyscall.c:109:
+		if (strncpy_from_user(d.name,user_name,DSYSCALL_NAME_SZ-1) < 0) {
 		                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#516: FILE: kernel/dsyscall.c:116:
+		d.name[DSYSCALL_NAME_SZ-1] = 0;
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: kernel/dsyscall.c:132:
+^I^Iif (copy_to_user(dcall,&d,sizeof(d)) != 0) { $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#532: FILE: kernel/dsyscall.c:132:
+		if (copy_to_user(dcall,&d,sizeof(d)) != 0) { 
 		                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#532: FILE: kernel/dsyscall.c:132:
+		if (copy_to_user(dcall,&d,sizeof(d)) != 0) { 
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: kernel/dsyscall.c:132:
+		if (copy_to_user(dcall,&d,sizeof(d)) != 0) { 
 		                         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#532: FILE: kernel/dsyscall.c:132:
+		if (copy_to_user(dcall,&d,sizeof(d)) != 0) { 
+			ret = -EFAULT;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: kernel/dsyscall.c:139:
+		if (copy_from_user(&d,dcall,sizeof(d)) != 0) {
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: kernel/dsyscall.c:139:
+		if (copy_from_user(&d,dcall,sizeof(d)) != 0) {
 		                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#539: FILE: kernel/dsyscall.c:139:
+		if (copy_from_user(&d,dcall,sizeof(d)) != 0) {
+			goto out;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: kernel/dsyscall.c:153:
+^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#555: FILE: kernel/dsyscall.c:155:
+			if (copy_from_user(argv,d.argv,sizeof(char*)*d.argc) != 0) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#555: FILE: kernel/dsyscall.c:155:
+			if (copy_from_user(argv,d.argv,sizeof(char*)*d.argc) != 0) {
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#555: FILE: kernel/dsyscall.c:155:
+			if (copy_from_user(argv,d.argv,sizeof(char*)*d.argc) != 0) {
 			                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#555: FILE: kernel/dsyscall.c:155:
+			if (copy_from_user(argv,d.argv,sizeof(char*)*d.argc) != 0) {
 			                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: kernel/dsyscall.c:169:
+			ret = ds->func(argv[0],argv[1]);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: kernel/dsyscall.c:172:
+			ret = ds->func(argv[0],argv[1],argv[2]);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: kernel/dsyscall.c:172:
+			ret = ds->func(argv[0],argv[1],argv[2]);
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: kernel/dsyscall.c:175:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3]);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: kernel/dsyscall.c:175:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3]);
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: kernel/dsyscall.c:175:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3]);
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#578: FILE: kernel/dsyscall.c:178:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4]);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#578: FILE: kernel/dsyscall.c:178:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4]);
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#578: FILE: kernel/dsyscall.c:178:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4]);
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#578: FILE: kernel/dsyscall.c:178:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4]);
 			                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: kernel/dsyscall.c:181:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: kernel/dsyscall.c:181:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: kernel/dsyscall.c:181:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: kernel/dsyscall.c:181:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
 			                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: kernel/dsyscall.c:181:
+			ret = ds->func(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);
 			                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: kernel/dsyscall.c:183:
+^I^I}^I$

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#585: FILE: kernel/dsyscall.c:185:
+		goto out;
+		break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#598: FILE: kernel/dsyscall.c:198:
+int dsyscall_register(char *name, int args, int (*func)(long,...))
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#603: FILE: kernel/dsyscall.c:203:
+	dprintk("dsyscall_register: %s args: %d func=%p\n",name,args,func);
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#603: FILE: kernel/dsyscall.c:203:
+	dprintk("dsyscall_register: %s args: %d func=%p\n",name,args,func);
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#603: FILE: kernel/dsyscall.c:203:
+	dprintk("dsyscall_register: %s args: %d func=%p\n",name,args,func);
 	                                                            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dsyscall_register', this function's name, in a string
#603: FILE: kernel/dsyscall.c:203:
+	dprintk("dsyscall_register: %s args: %d func=%p\n",name,args,func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#606: FILE: kernel/dsyscall.c:206:
+		printk(KERN_INFO "dsyscall: name %s is too large.", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#610: FILE: kernel/dsyscall.c:210:
+		printk(KERN_INFO "dsyscall: args is too big.");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: kernel/dsyscall.c:213:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#615: FILE: kernel/dsyscall.c:215:
+	if ((ds = find_dsyscall_by_name(name)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#616: FILE: kernel/dsyscall.c:216:
+		printk(KERN_INFO "dsyscall: name %s is already in use.",name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#616: FILE: kernel/dsyscall.c:216:
+		printk(KERN_INFO "dsyscall: name %s is already in use.",name);
 		                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: kernel/dsyscall.c:220:
+	ds = kmem_cache_alloc(dsyscall_cache,GFP_KERNEL);
 	                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#622: FILE: kernel/dsyscall.c:222:
+		printk(KERN_INFO "dsyscall: could not allocate dsyscall_struct");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#631: FILE: kernel/dsyscall.c:231:
+		if (!++dsyscall_iterations) {
+			printk(KERN_WARNING "dsyscall: iterations has overflowed???");
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#632: FILE: kernel/dsyscall.c:232:
+			printk(KERN_WARNING "dsyscall: iterations has overflowed???");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#635: FILE: kernel/dsyscall.c:235:
+	strcpy(ds->name,name);
 	               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#636: FILE: kernel/dsyscall.c:236:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#637: FILE: kernel/dsyscall.c:237:
+	list_add(&ds->next,&dsyscall_syscalls);
 	                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#637: FILE: kernel/dsyscall.c:237:
+	list_add(&ds->next,&dsyscall_syscalls);
 	                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#651: FILE: kernel/dsyscall.c:251:
+	if ((ds = find_dsyscall_by_name(name)) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#652: FILE: kernel/dsyscall.c:252:
+		printk("dsyscall: name %s is not registered\n",name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#652: FILE: kernel/dsyscall.c:252:
+		printk("dsyscall: name %s is not registered\n",name);
 		                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#662: FILE: kernel/dsyscall.c:262:
+	kmem_cache_free(dsyscall_cache,ds);
 	                              ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#667: FILE: kernel/dsyscall.c:267:
+EXPORT_SYMBOL(dsyscall_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#668: FILE: kernel/dsyscall.c:268:
+EXPORT_SYMBOL(dsyscall_unregister);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#677: FILE: kernel/dsyscall.c:277:
+		panic ("Can't allocate dsyscall cache!");  /* Too much? something else is wrong if

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#678: FILE: kernel/dsyscall.c:278:
+		panic ("Can't allocate dsyscall cache!");  /* Too much? something else is wrong if
+							      we fail here. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#678: FILE: kernel/dsyscall.c:278:
+							      we fail here. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: kernel/dsyscall.c:279:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#680: FILE: kernel/dsyscall.c:280:
+	for (i=0; i < DSYSCALL_HASH_SIZE; i++) {
 	      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#680: FILE: kernel/dsyscall.c:280:
+	for (i=0; i < DSYSCALL_HASH_SIZE; i++) {
+		INIT_LIST_HEAD(&dsyscall_hash[i]);
+	}

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#686: FILE: kernel/dsyscall.c:286:
+__initcall(dsyscall_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 143 errors, 110 warnings, 32 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
