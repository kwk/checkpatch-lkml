WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
Add force feedback driver for PID devices. This replaces the older PID driver

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#61: FILE: drivers/usb/input/hid-ff.c:81:
+	/* We try pidff when no other driver is found because PID is the
+	standards compliant way of implementing force feedback in HID.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#63: FILE: drivers/usb/input/hid-ff.c:83:
+	be a PID device */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: drivers/usb/input/hid-input.c:672:
+		dbg("Maximum Effects - %d",value);
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#139: FILE: drivers/usb/input/hid-pidff.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#157: FILE: drivers/usb/input/hid-pidff.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#158: FILE: drivers/usb/input/hid-pidff.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#163: FILE: drivers/usb/input/hid-pidff.c:25:
+#define debug(format, arg...) pr_debug("hid-pidff: " format "\n" , ## arg)
                                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: drivers/usb/input/hid-pidff.c:56:
+/* device_control is really 0x95, but 0x96 specified as it is the usage of
+the only field in that report */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#194: FILE: drivers/usb/input/hid-pidff.c:56:
+the only field in that report */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#287: FILE: drivers/usb/input/hid-pidff.c:149:
+struct pidff_device {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#304: FILE: drivers/usb/input/hid-pidff.c:166:
+	/* Special field is a field that is not composed of
+	   usage<->value pairs that pidff_usage values are */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#304: FILE: drivers/usb/input/hid-pidff.c:166:
+	   usage<->value pairs that pidff_usage values are */

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: drivers/usb/input/hid-pidff.c:195:
+	struct pidff_device *pidff = hid->ff_private;
+	debug("exiting");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#371: FILE: drivers/usb/input/hid-pidff.c:233:
+	if (usage->field->logical_minimum < 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#373: FILE: drivers/usb/input/hid-pidff.c:235:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: drivers/usb/input/hid-pidff.c:296:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->set_constant[PID_EFFECT_BLOCK_INDEX].value[0] =

WARNING:LINE_SPACING: Missing a blank line after declarations
#459: FILE: drivers/usb/input/hid-pidff.c:321:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->set_effect[PID_EFFECT_BLOCK_INDEX].value[0] =

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#510: FILE: drivers/usb/input/hid-pidff.c:372:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#556: FILE: drivers/usb/input/hid-pidff.c:418:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#566: FILE: drivers/usb/input/hid-pidff.c:428:
+	int ret = 0;
+	for (i = 0; i < 2; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#569: FILE: drivers/usb/input/hid-pidff.c:431:
+		    effect->u.condition[i].center != old->u.condition[i].center
+		    || effect->u.condition[i].right_coeff !=

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#571: FILE: drivers/usb/input/hid-pidff.c:433:
+		    old->u.condition[i].right_coeff
+		    || effect->u.condition[i].left_coeff !=

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#573: FILE: drivers/usb/input/hid-pidff.c:435:
+		    old->u.condition[i].left_coeff
+		    || effect->u.condition[i].right_saturation !=

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#575: FILE: drivers/usb/input/hid-pidff.c:437:
+		    old->u.condition[i].right_saturation
+		    || effect->u.condition[i].left_saturation !=

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#577: FILE: drivers/usb/input/hid-pidff.c:439:
+		    old->u.condition[i].left_saturation
+		    || effect->u.condition[i].deadband !=

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: drivers/usb/input/hid-pidff.c:452:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->set_ramp[PID_EFFECT_BLOCK_INDEX].value[0] =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_RAM_POOL_AVAILABLE].value'
#640: FILE: drivers/usb/input/hid-pidff.c:502:
+			      pidff->block_load[PID_RAM_POOL_AVAILABLE].
+			      value ? pidff->block_load[PID_RAM_POOL_AVAILABLE].

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_RAM_POOL_AVAILABLE].value[0]'
#641: FILE: drivers/usb/input/hid-pidff.c:503:
+			      value ? pidff->block_load[PID_RAM_POOL_AVAILABLE].
+			      value[0] : -1);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_RAM_POOL_AVAILABLE].value'
#648: FILE: drivers/usb/input/hid-pidff.c:510:
+			      pidff->block_load[PID_RAM_POOL_AVAILABLE].
+			      value ? pidff->block_load[PID_RAM_POOL_AVAILABLE].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_RAM_POOL_AVAILABLE].value[0]'
#649: FILE: drivers/usb/input/hid-pidff.c:511:
+			      value ? pidff->block_load[PID_RAM_POOL_AVAILABLE].
+			      value[0] : -1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#653: FILE: drivers/usb/input/hid-pidff.c:515:
+	printk(KERN_ERR "hid-pidff: pid_block_load failed 60 times\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#688: FILE: drivers/usb/input/hid-pidff.c:550:
+	struct pidff_device *pidff = hid->ff_private;
+	return pidff_playback_pid(dev, pidff->pid_id[effect_id], value);

WARNING:LINE_SPACING: Missing a blank line after declarations
#698: FILE: drivers/usb/input/hid-pidff.c:560:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff->block_free[PID_EFFECT_BLOCK_INDEX].value[0] = pid_id;

WARNING:LINE_SPACING: Missing a blank line after declarations
#709: FILE: drivers/usb/input/hid-pidff.c:571:
+	struct pidff_device *pidff = hid->ff_private;
+	debug("starting to erase %d/%d", effect_id, pidff->pid_id[effect_id]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id[PID_CONSTANT]'
#731: FILE: drivers/usb/input/hid-pidff.c:593:
+							pidff->
+							type_id[PID_CONSTANT]);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#740: FILE: drivers/usb/input/hid-pidff.c:602:
+		if (!old
+		    || pidff_needs_set_envelope(&effect->u.constant.envelope,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id'
#752: FILE: drivers/usb/input/hid-pidff.c:614:
+								pidff->
+								type_id

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id'
#759: FILE: drivers/usb/input/hid-pidff.c:621:
+								pidff->
+								type_id

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id'
#766: FILE: drivers/usb/input/hid-pidff.c:628:
+								pidff->
+								type_id

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id'
#773: FILE: drivers/usb/input/hid-pidff.c:635:
+								pidff->
+								type_id

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id'
#780: FILE: drivers/usb/input/hid-pidff.c:642:
+								pidff->
+								type_id

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#784: FILE: drivers/usb/input/hid-pidff.c:646:
+				printk(KERN_ERR

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#796: FILE: drivers/usb/input/hid-pidff.c:658:
+		if (!old
+		    || pidff_needs_set_envelope(&effect->u.periodic.envelope,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'effect->u.periodic.envelope'
#800: FILE: drivers/usb/input/hid-pidff.c:662:
+						  &(effect->u.periodic.
+						    envelope));

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id[PID_RAMP]'
#807: FILE: drivers/usb/input/hid-pidff.c:669:
+							pidff->
+							type_id[PID_RAMP]);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#816: FILE: drivers/usb/input/hid-pidff.c:678:
+		if (!old
+		    || pidff_needs_set_envelope(&effect->u.ramp.envelope,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around effect->u.ramp.envelope
#819: FILE: drivers/usb/input/hid-pidff.c:681:
+						  &(effect->u.ramp.envelope));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id[PID_SPRING]'
#826: FILE: drivers/usb/input/hid-pidff.c:688:
+							pidff->
+							type_id[PID_SPRING]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id[PID_FRICTION]'
#840: FILE: drivers/usb/input/hid-pidff.c:702:
+							pidff->
+							type_id[PID_FRICTION]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id[PID_DAMPER]'
#854: FILE: drivers/usb/input/hid-pidff.c:716:
+							pidff->
+							type_id[PID_DAMPER]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->type_id[PID_INERTIA]'
#868: FILE: drivers/usb/input/hid-pidff.c:730:
+							pidff->
+							type_id[PID_INERTIA]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#879: FILE: drivers/usb/input/hid-pidff.c:741:
+		printk(KERN_ERR "hid-pidff: invalid type\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#897: FILE: drivers/usb/input/hid-pidff.c:759:
+	struct pidff_device *pidff = hid->ff_private;
+	pidff_set(&pidff->device_gain[PID_DEVICE_GAIN_FIELD], gain);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#901: FILE: drivers/usb/input/hid-pidff.c:763:
+
+}

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_EFFECT_BLOCK_INDEX].field->logical_minimum'
#914: FILE: drivers/usb/input/hid-pidff.c:776:
+				   pidff->block_load[PID_EFFECT_BLOCK_INDEX].
+				   field->logical_minimum, 0);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_EFFECT_BLOCK_INDEX].field->logical_minimum'
#920: FILE: drivers/usb/input/hid-pidff.c:782:
+			   pidff->block_load[PID_EFFECT_BLOCK_INDEX].field->
+			   logical_minimum, 1);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#933: FILE: drivers/usb/input/hid-pidff.c:795:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#943: FILE: drivers/usb/input/hid-pidff.c:805:
+static int pidff_find_fields(struct pidff_usage *usage, u8 * table,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#987: FILE: drivers/usb/input/hid-pidff.c:849:
+		if (usage == (HID_UP_PID | pidff_reports[i])) {
+			return i;
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1019: FILE: drivers/usb/input/hid-pidff.c:881:
+		/* Sometimes logical collections are stacked to
+		   indicate different usages for the report and the field,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1020: FILE: drivers/usb/input/hid-pidff.c:882:
+		   in which case we want the usage of the parent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1023: FILE: drivers/usb/input/hid-pidff.c:885:
+		/* However, Linux HID implementation hides that,
+		   so we have to dig it up ourselves */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1023: FILE: drivers/usb/input/hid-pidff.c:885:
+		   so we have to dig it up ourselves */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1026: FILE: drivers/usb/input/hid-pidff.c:888:
+		if (i <= 0
+		    || hid->collection[i - 1].type != HID_COLLECTION_LOGICAL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1065: FILE: drivers/usb/input/hid-pidff.c:927:
+	int i;
+	for (i = 0; i < report->maxfield; i++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1067: FILE: drivers/usb/input/hid-pidff.c:929:
+		if (report->field[i]->logical == (HID_UP_PID | usage)
+		    && report->field[i]->report_count > 0) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1069: FILE: drivers/usb/input/hid-pidff.c:931:
+			if (!enforce_min
+			    || report->field[i]->logical_minimum == 1)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1071: FILE: drivers/usb/input/hid-pidff.c:933:
+				return report->field[i];
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1071: FILE: drivers/usb/input/hid-pidff.c:933:
+			else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1072: FILE: drivers/usb/input/hid-pidff.c:934:
+				printk(KERN_ERR

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1089: FILE: drivers/usb/input/hid-pidff.c:951:
+				   u8 * usagetable, int count)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1091: FILE: drivers/usb/input/hid-pidff.c:953:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1094: FILE: drivers/usb/input/hid-pidff.c:956:
+	int found = 0;
+	for (i = 0; i < count; i++) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'keys' may be better as '(keys)' to avoid precedence issues
#1106: FILE: drivers/usb/input/hid-pidff.c:968:
+#define PIDFF_FIND_SPECIAL_KEYS(keys, field, name) \
+	pidff_find_special_keys(pidff->keys, pidff->field, pidff_ ## name, \
+		sizeof(pidff_ ## name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#1106: FILE: drivers/usb/input/hid-pidff.c:968:
+#define PIDFF_FIND_SPECIAL_KEYS(keys, field, name) \
+	pidff_find_special_keys(pidff->keys, pidff->field, pidff_ ## name, \
+		sizeof(pidff_ ## name))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1134: FILE: drivers/usb/input/hid-pidff.c:996:
+		printk(KERN_ERR "hid-pidff: effect lists not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1138: FILE: drivers/usb/input/hid-pidff.c:1000:
+		printk(KERN_ERR "hid-pidff: direction field not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1142: FILE: drivers/usb/input/hid-pidff.c:1004:
+		printk(KERN_ERR "hid-pidff: device control field not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1146: FILE: drivers/usb/input/hid-pidff.c:1008:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1151: FILE: drivers/usb/input/hid-pidff.c:1013:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1164: FILE: drivers/usb/input/hid-pidff.c:1026:
+		printk(KERN_ERR "hid-pidff: no effect types found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1171: FILE: drivers/usb/input/hid-pidff.c:1033:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1180: FILE: drivers/usb/input/hid-pidff.c:1042:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1202: FILE: drivers/usb/input/hid-pidff.c:1064:
+			printk(KERN_ERR

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1244: FILE: drivers/usb/input/hid-pidff.c:1106:
+
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1246: FILE: drivers/usb/input/hid-pidff.c:1108:
+#define PIDFF_FIND_FIELDS(name, report, strict) \
+	pidff_find_fields(pidff->name, pidff_ ## name, \
+		pidff->reports[report], \
+		sizeof(pidff_ ## name), strict)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1262: FILE: drivers/usb/input/hid-pidff.c:1124:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1269: FILE: drivers/usb/input/hid-pidff.c:1131:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1275: FILE: drivers/usb/input/hid-pidff.c:1137:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1281: FILE: drivers/usb/input/hid-pidff.c:1143:
+		printk(KERN_ERR

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1288: FILE: drivers/usb/input/hid-pidff.c:1150:
+	if (pidff_find_special_fields(pidff) || pidff_find_effects(dev)) {
+		return -ENODEV;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1294: FILE: drivers/usb/input/hid-pidff.c:1156:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1297: FILE: drivers/usb/input/hid-pidff.c:1159:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1300: FILE: drivers/usb/input/hid-pidff.c:1162:
+			printk(KERN_WARNING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1305: FILE: drivers/usb/input/hid-pidff.c:1167:
+	if (test_bit(FF_CONSTANT, ff->flags)
+	    && PIDFF_FIND_FIELDS(set_constant, PID_SET_CONSTANT, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1306: FILE: drivers/usb/input/hid-pidff.c:1168:
+		printk(KERN_WARNING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1312: FILE: drivers/usb/input/hid-pidff.c:1174:
+	if (test_bit(FF_RAMP, ff->flags)
+	    && PIDFF_FIND_FIELDS(set_ramp, PID_SET_RAMP, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1313: FILE: drivers/usb/input/hid-pidff.c:1175:
+		printk(KERN_WARNING "hid-pidff: unknown ramp effect layout\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1319: FILE: drivers/usb/input/hid-pidff.c:1181:
+	     test_bit(FF_FRICTION, ff->flags)
+	     || test_bit(FF_INERTIA, ff->flags))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1320: FILE: drivers/usb/input/hid-pidff.c:1182:
+	     || test_bit(FF_INERTIA, ff->flags))
+	    && PIDFF_FIND_FIELDS(set_condition, PID_SET_CONDITION, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1321: FILE: drivers/usb/input/hid-pidff.c:1183:
+		printk(KERN_WARNING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1330: FILE: drivers/usb/input/hid-pidff.c:1192:
+	if (test_bit(FF_PERIODIC, ff->flags)
+	    && PIDFF_FIND_FIELDS(set_periodic, PID_SET_PERIODIC, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1331: FILE: drivers/usb/input/hid-pidff.c:1193:
+		printk(KERN_WARNING

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1338: FILE: drivers/usb/input/hid-pidff.c:1200:
+	if (!PIDFF_FIND_FIELDS(device_gain, PID_DEVICE_GAIN, 1)) {
+		set_bit(FF_GAIN, ff->flags);
+	}

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1352: FILE: drivers/usb/input/hid-pidff.c:1214:
+	int i = 0;;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1373: FILE: drivers/usb/input/hid-pidff.c:1235:
+				printk(KERN_WARNING

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->pool[PID_SIMULTANEOUS_MAX].value[0]'
#1376: FILE: drivers/usb/input/hid-pidff.c:1238:
+				       pidff->pool[PID_SIMULTANEOUS_MAX].
+				       value[0]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1399: FILE: drivers/usb/input/hid-pidff.c:1261:
+	/* Specification doesn't specify anything, so we request an
+	   effect upload and cancel it immediately. If the approved

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1401: FILE: drivers/usb/input/hid-pidff.c:1263:
+	   effect id is a built-in spring type effect used for autocenter */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1405: FILE: drivers/usb/input/hid-pidff.c:1267:
+		printk(KERN_ERR "hid-pidff: upload request failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1414: FILE: drivers/usb/input/hid-pidff.c:1276:
+		printk(KERN_NOTICE

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pidff->block_load[PID_EFFECT_BLOCK_INDEX].value[0]'
#1420: FILE: drivers/usb/input/hid-pidff.c:1282:
+			       pidff->block_load[PID_EFFECT_BLOCK_INDEX].
+			       value[0]);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1425: FILE: drivers/usb/input/hid-pidff.c:1287:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1447: FILE: drivers/usb/input/hid-pidff.c:1309:
+	struct ff_device *ff;
+	debug("starting pid init");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1457: FILE: drivers/usb/input/hid-pidff.c:1319:
+	if (report->maxfield < 1
+	    || (report->field[0]->logical & HID_USAGE_PAGE) != HID_UP_PID) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1486: FILE: drivers/usb/input/hid-pidff.c:1348:
+	printk(KERN_INFO "Force feedback for USB HID PID devices by "

WARNING:SPLIT_STRING: quoted string split across lines
#1487: FILE: drivers/usb/input/hid-pidff.c:1349:
+	printk(KERN_INFO "Force feedback for USB HID PID devices by "
+	       "Anssi Hannula <anssi.hannula@gmail.com>\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1524: FILE: drivers/usb/input/hid-pidff.c:1386:
+	if (pidff->pool[PID_DEVICE_MANAGED_POOL].value
+	    && pidff->pool[PID_DEVICE_MANAGED_POOL].value[0] == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1525: FILE: drivers/usb/input/hid-pidff.c:1387:
+		printk(KERN_NOTICE

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 81 warnings, 33 checks, 1498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
