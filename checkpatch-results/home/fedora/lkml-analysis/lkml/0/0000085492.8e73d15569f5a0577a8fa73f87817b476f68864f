WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
echo "size nr" > /proc/hugetlb/hugepages will modify the page number for size.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#82: FILE: mm/hugetlb.c:264:
nr_huge_pages[HUGETLB_INIT_PAGE_ORDER] = i;

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#104: FILE: mm/hugetlb.c:338:
 }
+#ifdef ARCH_HAS_VARIABLE_HUGEPAGE_SIZE

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: mm/hugetlb.c:342:
+	int i,j;
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#109: FILE: mm/hugetlb.c:343:
+	const char *units[]={ "", "K", "M", "G", "T" };

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#109: FILE: mm/hugetlb.c:343:
+	const char *units[]={ "", "K", "M", "G", "T" };
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: mm/hugetlb.c:345:
+	for (i=0, j=0; i < 64; i++ , j=i/10) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: mm/hugetlb.c:345:
+	for (i=0, j=0; i < 64; i++ , j=i/10) {
 	           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#111: FILE: mm/hugetlb.c:345:
+	for (i=0, j=0; i < 64; i++ , j=i/10) {
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: mm/hugetlb.c:345:
+	for (i=0, j=0; i < 64; i++ , j=i/10) {
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#111: FILE: mm/hugetlb.c:345:
+	for (i=0, j=0; i < 64; i++ , j=i/10) {
 	                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#112: FILE: mm/hugetlb.c:346:
+		if (vector & 0x1) {
+			p += sprintf(p, "%d%s ", 1 << (i-j*10), units[j]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#113: FILE: mm/hugetlb.c:347:
+			p += sprintf(p, "%d%s ", 1 << (i-j*10), units[j]);
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#113: FILE: mm/hugetlb.c:347:
+			p += sprintf(p, "%d%s ", 1 << (i-j*10), units[j]);
 			                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: mm/hugetlb.c:358:
+	char buf[32];
+	for (order = 0; order < MAX_ORDER; order++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#125: FILE: mm/hugetlb.c:359:
+		if (!is_valid_hpage_size(1UL<<(order+PAGE_SHIFT)))
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: mm/hugetlb.c:359:
+		if (!is_valid_hpage_size(1UL<<(order+PAGE_SHIFT)))
 		                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#127: FILE: mm/hugetlb.c:361:
+		bitvector_process(buf, (1UL<<(order+PAGE_SHIFT)));
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#127: FILE: mm/hugetlb.c:361:
+		bitvector_process(buf, (1UL<<(order+PAGE_SHIFT)));
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: mm/hugetlb.c:363:
+		seq_printf(s, "%s\t%ld\t%ld\t%ld\n",
+				buf, nr_huge_pages[order],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: mm/hugetlb.c:372:
+static ssize_t proc_hugetlb_pagesizes_write(struct file *file,
+	const char __user *buffer, size_t length, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: mm/hugetlb.c:378:
+	char *rest;
+	if (!buffer || length >= sizeof(buf))

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#154: FILE: mm/hugetlb.c:388:
+	if (sscanf(rest, "%ld", &nr) != 1)
+		return -EINVAL;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#166: FILE: mm/hugetlb.c:399:
+static struct file_operations proc_hugetlb_pagesizes_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: mm/hugetlb.c:400:
+        .open           = proc_hugetlb_pagesizes_open,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: mm/hugetlb.c:400:
+        .open           = proc_hugetlb_pagesizes_open,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: mm/hugetlb.c:401:
+        .read           = seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: mm/hugetlb.c:401:
+        .read           = seq_read,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: mm/hugetlb.c:402:
+        .write          = proc_hugetlb_pagesizes_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: mm/hugetlb.c:402:
+        .write          = proc_hugetlb_pagesizes_write,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: mm/hugetlb.c:403:
+        .llseek         = seq_lseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: mm/hugetlb.c:403:
+        .llseek         = seq_lseek,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: mm/hugetlb.c:404:
+        .release        = single_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: mm/hugetlb.c:404:
+        .release        = single_release,$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#194: FILE: mm/hugetlb.c:427:
+	max_huge_pages = free_huge_pages[HUGETLB_INIT_PAGE_ORDER] =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#196: FILE: mm/hugetlb.c:428:
+	printk("Total HugeTLB memory allocated, %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: mm/hugetlb.c:429:
+	printk("Total HugeTLB memory allocated, %ld\n",
+		free_huge_pages[HUGETLB_INIT_PAGE_ORDER]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: mm/hugetlb.c:432:
+        if (!proc_mkdir("hugetlb", NULL))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: mm/hugetlb.c:432:
+        if (!proc_mkdir("hugetlb", NULL))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: mm/hugetlb.c:434:
+        pde = create_proc_entry("hugetlb/hugepages", 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/hugetlb.c:434:
+        pde = create_proc_entry("hugetlb/hugepages", 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: mm/hugetlb.c:435:
+        if (!pde)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: mm/hugetlb.c:435:
+        if (!pde)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: mm/hugetlb.c:436:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: mm/hugetlb.c:436:
+                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: mm/hugetlb.c:437:
+        pde->proc_fops = &proc_hugetlb_pagesizes_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: mm/hugetlb.c:437:
+        pde->proc_fops = &proc_hugetlb_pagesizes_operations;$

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#213: FILE: mm/hugetlb.c:445:
+	if (sscanf(s, "%lu", &max_huge_pages) <= 0)
+		max_huge_pages = 0;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#217: FILE: mm/hugetlb.c:449:
+__setup("hugepages=", hugetlb_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: mm/hugetlb.c:451:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085492.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 19 warnings, 14 checks, 170 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085492.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
