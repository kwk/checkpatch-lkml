CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/mm.h:611:
+extern struct vm_area_struct *vma_merge(struct mm_struct *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#67: FILE: include/linux/mm.h:611:
+extern struct vm_area_struct *vma_merge(struct mm_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#67: FILE: include/linux/mm.h:611:
+extern struct vm_area_struct *vma_merge(struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#67: FILE: include/linux/mm.h:611:
+extern struct vm_area_struct *vma_merge(struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mempolicy *' should also have an identifier name
#67: FILE: include/linux/mm.h:611:
+extern struct vm_area_struct *vma_merge(struct mm_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: include/linux/mm.h:612:
+extern struct vm_area_struct *vma_merge(struct mm_struct *,
+	struct vm_area_struct *prev, unsigned long addr, unsigned long end,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/mm.h:614:
+extern int split_vma(struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#70: FILE: include/linux/mm.h:614:
+extern int split_vma(struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#70: FILE: include/linux/mm.h:614:
+extern int split_vma(struct mm_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: include/linux/mm.h:615:
+extern int split_vma(struct mm_struct *,
+	struct vm_area_struct *, unsigned long addr, int new_below);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: mm/mmap.c:343:
+__vma_unlink(struct mm_struct *mm, struct vm_area_struct *vma,
+		struct vm_area_struct *prev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#160: FILE: mm/mmap.c:382:
+			BUG_ON(vma->vm_end != next->vm_start);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: mm/mmap.c:551:
+struct vm_area_struct *vma_merge(struct mm_struct *mm,
 			struct vm_area_struct *prev, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: mm/mmap.c:578:
+	if (prev && prev->vm_end == addr &&
   			mpol_equal(vma_policy(prev), policy) &&

CHECK:BRACES: Unbalanced braces around else statement
#338: FILE: mm/mmap.c:590:
+		} else					/* cases 2, 5, 7 */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: mm/mmap.c:600:
+ ^I^I^Impol_equal(policy, vma_policy(next)) &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: mm/mmap.c:600:
+ ^I^I^Impol_equal(policy, vma_policy(next)) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: mm/mmap.c:600:
+	if (next && end == next->vm_start &&
+ 			mpol_equal(policy, vma_policy(next)) &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: mm/mmap.c:600:
+ ^I^I^Impol_equal(policy, vma_policy(next)) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: mm/mmap.c:602:
+			can_vma_merge_before(next, vm_flags, file,
 							pgoff+pglen)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: mm/mmap.c:605:
+			vma_adjust(prev, prev->vm_start,
+				addr, prev->vm_pgoff, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: mm/mmap.c:608:
+			vma_adjust(area, addr, next->vm_end,
 				next->vm_pgoff - pglen, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: mm/mprotect.c:149:
+	*pprev = vma_merge(mm, *pprev, start, end, newflags,
+				vma->vm_file, pgoff, vma_policy(vma));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 9 warnings, 13 checks, 470 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
