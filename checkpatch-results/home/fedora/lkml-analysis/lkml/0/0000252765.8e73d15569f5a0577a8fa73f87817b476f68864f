WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > So, we're back to the original issue.  Why is this kernel event system

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#111: 
--- a/fs/super.c	2004-09-06 03:47:59 +02:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: include/linux/kobject.h:64:
+extern char * kobject_get_path(struct kobject *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/kobject.h:64:
+extern char * kobject_get_path(struct kobject *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#167: FILE: include/linux/kobject.h:64:
+extern char * kobject_get_path(struct kobject *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#167: FILE: include/linux/kobject.h:64:
+extern char * kobject_get_path(struct kobject *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: include/linux/kobject_uevent.h:1:
+#ifndef _KOBJECT_UEVENT_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/kobject_uevent.h:9:
+extern void kobject_hotplug(const char *action, struct kobject *kobj);

WARNING:RETURN_VOID: void function return statements are not generally useful
#188: FILE: include/linux/kobject_uevent.h:14:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: include/linux/kobject_uevent.h:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/kobject_uevent.h:19:
+extern int kobject_uevent(const char *signal, struct kobject *kobj,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/kobject_uevent.h:22:
+extern int kobject_uevent_atomic(const char *signal, struct kobject *kobj,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#266: FILE: kernel/kobject_uevent.c:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#295: FILE: kernel/kobject_uevent.c:30:
+static struct sock *uevent_sock = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#360: FILE: kernel/kobject_uevent.c:95:
+EXPORT_SYMBOL(kobject_uevent);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#368: FILE: kernel/kobject_uevent.c:103:
+EXPORT_SYMBOL(kobject_uevent_atomic);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: kernel/kobject_uevent.c:105:
+
+

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#375: FILE: kernel/kobject_uevent.c:110:
+	char *argv [3];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#384: FILE: kernel/kobject_uevent.c:119:
+	struct kobject * top_kobj = kobj;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#385: FILE: kernel/kobject_uevent.c:120:
+	struct kset * kset;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#399: FILE: kernel/kobject_uevent.c:134:
+	/* If the kset has a filter operation, call it.
+	   Skip the event, if the filter returns zero. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#399: FILE: kernel/kobject_uevent.c:134:
+	   Skip the event, if the filter returns zero. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#405: FILE: kernel/kobject_uevent.c:140:
+	pr_debug ("%s\n", __FUNCTION__);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#405: FILE: kernel/kobject_uevent.c:140:
+	pr_debug ("%s\n", __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: kernel/kobject_uevent.c:142:
+	envp = kmalloc(NUM_ENVP * sizeof (char *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#407: FILE: kernel/kobject_uevent.c:142:
+	envp = kmalloc(NUM_ENVP * sizeof (char *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: kernel/kobject_uevent.c:145:
+	memset (envp, 0x00, NUM_ENVP * sizeof (char *));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: kernel/kobject_uevent.c:145:
+	memset (envp, 0x00, NUM_ENVP * sizeof (char *));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#418: FILE: kernel/kobject_uevent.c:153:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#421: FILE: kernel/kobject_uevent.c:156:
+	argv [0] = hotplug_path;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#422: FILE: kernel/kobject_uevent.c:157:
+	argv [1] = name;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#423: FILE: kernel/kobject_uevent.c:158:
+	argv [2] = NULL;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#426: FILE: kernel/kobject_uevent.c:161:
+	envp [i++] = "HOME=/";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#427: FILE: kernel/kobject_uevent.c:162:
+	envp [i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#431: FILE: kernel/kobject_uevent.c:166:
+	envp [i++] = scratch;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#442: FILE: kernel/kobject_uevent.c:177:
+	envp [i++] = scratch;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: kernel/kobject_uevent.c:178:
+	scratch += sprintf (scratch, "DEVPATH=%s", kobj_path) + 1;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#445: FILE: kernel/kobject_uevent.c:180:
+	envp [i++] = scratch;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#448: FILE: kernel/kobject_uevent.c:183:
+	envp [i++] = scratch;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#453: FILE: kernel/kobject_uevent.c:188:
+		retval = kset->hotplug_ops->hotplug (kset, kobj,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#457: FILE: kernel/kobject_uevent.c:192:
+			pr_debug ("%s - hotplug() returned %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#458: FILE: kernel/kobject_uevent.c:193:
+				  __FUNCTION__, retval);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#463: FILE: kernel/kobject_uevent.c:198:
+	pr_debug ("%s: %s %s %s %s %s %s %s\n", __FUNCTION__, argv[0], argv[1],

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#463: FILE: kernel/kobject_uevent.c:198:
+	pr_debug ("%s: %s %s %s %s %s %s %s\n", __FUNCTION__, argv[0], argv[1],

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#471: FILE: kernel/kobject_uevent.c:206:
+	retval = call_usermodehelper (argv[0], argv, envp, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#473: FILE: kernel/kobject_uevent.c:208:
+		pr_debug ("%s - call_usermodehelper returned %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#474: FILE: kernel/kobject_uevent.c:209:
+			  __FUNCTION__, retval);

WARNING:RETURN_VOID: void function return statements are not generally useful
#481: FILE: kernel/kobject_uevent.c:216:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#483: FILE: kernel/kobject_uevent.c:218:
+EXPORT_SYMBOL(kobject_hotplug);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#490: FILE: kernel/kobject_uevent.c:225:
+		printk(KERN_ERR

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#533: FILE: lib/kobject.c:107:
+char * kobject_get_path(struct kobject *kobj, int gfp_mask)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252765.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 28 warnings, 7 checks, 537 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252765.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
