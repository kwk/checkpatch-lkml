WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Ok I've resynced all the patches with 2.6.13-mm1, made some cleanups and minor 

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#65: 
Signed-off-By: Con Kolivas <kernel@kolivas.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#136: FILE: arch/i386/kernel/apic.c:956:
 static void __devinit setup_APIC_timer(unsigned int clocks)

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#148: FILE: arch/i386/kernel/apic.c:979:
+	 * 	  to latencies of upto 1 jiffy in servicing timers.
 	   	                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: arch/i386/kernel/apic.c:979:
+^I * ^I  to latencies of upto 1 jiffy in servicing timers.$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: arch/i386/kernel/dyn-tick.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#206: FILE: arch/i386/kernel/dyn-tick.c:2:
+ * linux/arch/i386/kernel/dyn-tick.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#255: FILE: arch/i386/kernel/dyn-tick.c:51:
+	printk(KERN_INFO "dyn-tick: Maximum ticks to skip limited to %i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: arch/i386/kernel/dyn-tick.c:52:
+	printk(KERN_INFO "dyn-tick: Maximum ticks to skip limited to %i\n",
+		dyn_tick->max_skip);

CHECK:BRACES: braces {} should be used on all arms of this statement
#274: FILE: arch/i386/kernel/dyn-tick.c:70:
+	if (calibration_result)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: arch/i386/kernel/dyn-tick.c:72:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#278: FILE: arch/i386/kernel/dyn-tick.c:74:
+		printk(KERN_INFO "dyn-tick: Cannot use local APIC\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#316: FILE: arch/i386/kernel/dyn-tick.c:112:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#323: FILE: arch/i386/kernel/dyn-tick.c:119:
+		printk(KERN_INFO "dyn-tick: Found suitable timer: %s\n",

CHECK:BRACES: Unbalanced braces around else statement
#325: FILE: arch/i386/kernel/dyn-tick.c:121:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#326: FILE: arch/i386/kernel/dyn-tick.c:122:
+		printk(KERN_ERR "dyn-tick: Cannot use timer %s\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: arch/i386/kernel/io_apic.c:2025:
+^I.typename ^I= "IO-APIC-edge-irq0",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: arch/i386/kernel/io_apic.c:2026:
+^I.startup ^I= startup_edge_ioapic,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: arch/i386/kernel/io_apic.c:2027:
+^I.shutdown ^I= shutdown_edge_ioapic,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#389: FILE: arch/i386/kernel/io_apic.c:2028:
+^I.enable ^I= unmask_IO_APIC_irq,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: arch/i386/kernel/io_apic.c:2029:
+^I.disable ^I= mask_IO_APIC_irq,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: arch/i386/kernel/io_apic.c:2030:
+^I.ack ^I^I= ack_edge_ioapic,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: arch/i386/kernel/io_apic.c:2031:
+^I.end ^I^I= end_edge_ioapic,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#394: FILE: arch/i386/kernel/io_apic.c:2033:
+^I.set_affinity ^I= set_ioapic_affinity,$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#551: FILE: arch/i386/kernel/timers/timer_pit.c:170:
+	extern spinlock_t i8253_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#605: FILE: arch/i386/kernel/timers/timer_tsc.c:36:
 int tsc_disable __devinitdata = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: drivers/acpi/Kconfig:305:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#730: FILE: include/asm-i386/apic.h:124:
+extern void reprogram_apic_timer(unsigned int count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#747: FILE: include/asm-i386/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#748: FILE: include/asm-i386/dyn-tick.h:2:
+ * linux/include/asm-i386/dyn-tick.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#765: FILE: include/asm-i386/dyn-tick.h:19:
+extern void cpufreq_delayed_get(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#768: FILE: include/asm-i386/dyn-tick.h:22:
+extern void setup_dyn_tick_use_apic(unsigned int calibration_result);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#769: FILE: include/asm-i386/dyn-tick.h:23:
+extern void dyn_tick_interrupt(int irq, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#770: FILE: include/asm-i386/dyn-tick.h:24:
+extern void dyn_tick_time_init(struct timer_opts *cur_timer);

CHECK:BIT_MACRO: Prefer using the BIT macro
#772: FILE: include/asm-i386/dyn-tick.h:26:
+#define DYN_TICK_APICABLE	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#791: FILE: include/asm-i386/dyn-tick.h:45:
+extern void idle_reprogram_timer(void);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#821: FILE: include/asm-i386/dyn-tick.h:75:
+		printk(KERN_WARNING "Losing too many ticks!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#822: FILE: include/asm-i386/dyn-tick.h:76:
+		printk(KERN_WARNING "TSC cannot be used as a timesource.  \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#822: FILE: include/asm-i386/dyn-tick.h:76:
+		printk(KERN_WARNING "TSC cannot be used as a timesource.  \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#823: FILE: include/asm-i386/dyn-tick.h:77:
+		printk(KERN_WARNING "Possible reasons for this are:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#824: FILE: include/asm-i386/dyn-tick.h:78:
+		printk(KERN_WARNING "  You're running with Speedstep,\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#825: FILE: include/asm-i386/dyn-tick.h:79:
+		printk(KERN_WARNING "  You don't have DMA enabled for your hard disk (see hdparm),\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#826: FILE: include/asm-i386/dyn-tick.h:80:
+		printk(KERN_WARNING "  Incorrect TSC synchronization on an SMP system (see dmesg).\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#827: FILE: include/asm-i386/dyn-tick.h:81:
+		printk(KERN_WARNING "Falling back to a sane timesource now.\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#846: FILE: include/asm-i386/timer.h:41:
+extern void disable_pit_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#847: FILE: include/asm-i386/timer.h:42:
+extern void enable_pit_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#848: FILE: include/asm-i386/timer.h:43:
+extern void reprogram_pit_timer(int jiffies_to_skip);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#857: FILE: include/linux/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#858: FILE: include/linux/dyn-tick.h:2:
+ * linux/include/linux/dyn-tick.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#875: FILE: include/linux/dyn-tick.h:19:
+#define DYN_TICK_ENABLED	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#876: FILE: include/linux/dyn-tick.h:20:
+#define DYN_TICK_SUITABLE	(1 << 0)

WARNING:SPACING: Unnecessary space before function pointer arguments
#887: FILE: include/linux/dyn-tick.h:31:
+	int (*arch_init) (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#888: FILE: include/linux/dyn-tick.h:32:
+	void (*arch_enable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#889: FILE: include/linux/dyn-tick.h:33:
+	void (*arch_disable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#890: FILE: include/linux/dyn-tick.h:34:
+	void (*arch_reprogram_timer) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#890: FILE: include/linux/dyn-tick.h:34:
+	void (*arch_reprogram_timer) (unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#891: FILE: include/linux/dyn-tick.h:35:
+	void (*arch_all_cpus_idle) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#891: FILE: include/linux/dyn-tick.h:35:
+	void (*arch_all_cpus_idle) (int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#896: FILE: include/linux/dyn-tick.h:40:
+extern void dyn_tick_register(struct dyn_tick_timer *new_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#899: FILE: include/linux/dyn-tick.h:43:
+extern unsigned int dyn_tick_reprogram_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#900: FILE: include/linux/dyn-tick.h:44:
+extern void set_dyn_tick_max_skip(unsigned int max_skip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: include/linux/timer.h:94:
+extern void conditional_run_local_timers(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#944: FILE: kernel/dyn-tick.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#945: FILE: kernel/dyn-tick.c:2:
+ * linux/kernel/dyn-tick.c

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#971: FILE: kernel/dyn-tick.c:28:
+#define DYN_TICK_IS_SET(x)	((dyn_tick->state & (x)) == (x))

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#976: FILE: kernel/dyn-tick.c:33:
+spinlock_t dyn_tick_lock;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1000: FILE: kernel/dyn-tick.c:57:
+	if (delta > DYN_TICK_MIN_SKIP) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1014: FILE: kernel/dyn-tick.c:71:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1031: FILE: kernel/dyn-tick.c:88:
+	printk(KERN_INFO "dyn-tick: Registering dynamic tick timer v%s\n",

WARNING:MISPLACED_INIT: __initdata should be placed after dyntick_autoenable
#1040: FILE: kernel/dyn-tick.c:97:
+static int __initdata dyntick_autoenable = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: kernel/dyn-tick.c:101:
+ */ $

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1056: FILE: kernel/dyn-tick.c:113:
+__setup("dyntick=", dyntick_setup);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1064: FILE: kernel/dyn-tick.c:121:
+extern struct sys_device device_timer;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1085: FILE: kernel/dyn-tick.c:142:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#1118: FILE: kernel/dyn-tick.c:175:
+	int error = 0;
+	if ((error = sysdev_class_register(&dyn_tick_sysclass)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1118: FILE: kernel/dyn-tick.c:175:
+	if ((error = sysdev_class_register(&dyn_tick_sysclass)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1120: FILE: kernel/dyn-tick.c:177:
+	if ((error = sysdev_register(&device_dyn_tick)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1122: FILE: kernel/dyn-tick.c:179:
+	if ((error = sysdev_create_file(&device_dyn_tick, &attr_state)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg"
#1145: FILE: kernel/dyn-tick.c:202:
+	if (dyn_tick_cfg == NULL || dyn_tick_cfg->arch_init == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg->arch_init"
#1145: FILE: kernel/dyn-tick.c:202:
+	if (dyn_tick_cfg == NULL || dyn_tick_cfg->arch_init == NULL ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1147: FILE: kernel/dyn-tick.c:204:
+		printk(KERN_ERR "dyn-tick: No suitable timer found\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1151: FILE: kernel/dyn-tick.c:208:
+	if ((ret = dyn_tick_cfg->arch_init())) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1152: FILE: kernel/dyn-tick.c:209:
+		printk(KERN_ERR "dyn-tick: Init failed\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1156: FILE: kernel/dyn-tick.c:213:
+	if (!ret && dyntick_autoenable) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1158: FILE: kernel/dyn-tick.c:215:
+		printk(KERN_INFO "dyn-tick: Timer using dynamic tick\n");

CHECK:BRACES: Unbalanced braces around else statement
#1159: FILE: kernel/dyn-tick.c:216:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1160: FILE: kernel/dyn-tick.c:217:
+		printk(KERN_INFO "dyn-tick: Timer not enabled during boot\n");

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1190: FILE: kernel/timer.c:946:
+	if (base->timer_jiffies != jiffies)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155029.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 52 warnings, 30 checks, 992 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155029.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
