WARNING:TYPO_SPELLING: 'thare' may be misspelled - perhaps 'there'?
#49: FILE: include/linux/akt.h:65:
+ * The show and store routines (thare are type dependent too) are here for
                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#72: FILE: include/linux/akt.h:93:
+	ssize_t (*show)(struct auto_tune *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#72: FILE: include/linux/akt.h:93:
+	ssize_t (*show)(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#73: FILE: include/linux/akt.h:94:
+	ssize_t (*store)(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#73: FILE: include/linux/akt.h:94:
+	ssize_t (*store)(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#73: FILE: include/linux/akt.h:94:
+	ssize_t (*store)(struct auto_tune *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/akt.h:263:
+extern ssize_t show_tunable_min(struct auto_tune *, char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#107: FILE: include/linux/akt.h:263:
+extern ssize_t show_tunable_min(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#107: FILE: include/linux/akt.h:263:
+extern ssize_t show_tunable_min(struct auto_tune *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/akt.h:264:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#108: FILE: include/linux/akt.h:264:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#108: FILE: include/linux/akt.h:264:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#108: FILE: include/linux/akt.h:264:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/akt.h:265:
+extern ssize_t show_tunable_max(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#109: FILE: include/linux/akt.h:265:
+extern ssize_t show_tunable_max(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#109: FILE: include/linux/akt.h:265:
+extern ssize_t show_tunable_max(struct auto_tune *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/akt.h:266:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#110: FILE: include/linux/akt.h:266:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#110: FILE: include/linux/akt.h:266:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#110: FILE: include/linux/akt.h:266:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#125: FILE: include/linux/akt_ops.h:188:
+#define __show_tunable_member(member, p, type, buf, format, y)	\
+do {								\
+	type _xx = (type) p->member.value.val_##type;		\
+								\
+	y = snprintf(buf, PAGE_SIZE, format "\n", _xx);		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#125: FILE: include/linux/akt_ops.h:188:
+#define __show_tunable_member(member, p, type, buf, format, y)	\
+do {								\
+	type _xx = (type) p->member.value.val_##type;		\
+								\
+	y = snprintf(buf, PAGE_SIZE, format "\n", _xx);		\
+} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: include/linux/akt_ops.h:201:
+	ssize_t _count;
+	__show_tunable_member(min, p, short, buf, "%d", _count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: include/linux/akt_ops.h:208:
+	ssize_t _count;
+	__show_tunable_member(min, p, ushort, buf, "%u", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: include/linux/akt_ops.h:215:
+	ssize_t _count;
+	__show_tunable_member(min, p, int, buf, "%d", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: include/linux/akt_ops.h:222:
+	ssize_t _count;
+	__show_tunable_member(min, p, uint, buf, "%u", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: include/linux/akt_ops.h:229:
+	ssize_t _count;
+	__show_tunable_member(min, p, ulong, buf, "%lu", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: include/linux/akt_ops.h:236:
+	ssize_t _count;
+	__show_tunable_member(min, p, long, buf, "%ld", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: include/linux/akt_ops.h:243:
+	ssize_t _count;
+	__show_tunable_member(min, p, ulong, buf, "%lu", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: include/linux/akt_ops.h:250:
+	ssize_t _count;
+	__show_tunable_member(max, p, short, buf, "%d", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: include/linux/akt_ops.h:257:
+	ssize_t _count;
+	__show_tunable_member(max, p, ushort, buf, "%u", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: include/linux/akt_ops.h:264:
+	ssize_t _count;
+	__show_tunable_member(max, p, int, buf, "%d", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: include/linux/akt_ops.h:271:
+	ssize_t _count;
+	__show_tunable_member(max, p, uint, buf, "%u", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: include/linux/akt_ops.h:278:
+	ssize_t _count;
+	__show_tunable_member(max, p, ulong, buf, "%lu", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: include/linux/akt_ops.h:285:
+	ssize_t _count;
+	__show_tunable_member(max, p, long, buf, "%ld", _count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: include/linux/akt_ops.h:292:
+	ssize_t _count;
+	__show_tunable_member(max, p, ulong, buf, "%lu", _count);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: include/linux/akt_ops.h:296:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#238: FILE: include/linux/akt_ops.h:301:
+#define __store_tunable_min(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#238: FILE: include/linux/akt_ops.h:301:
+#define __store_tunable_min(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#238: FILE: include/linux/akt_ops.h:301:
+#define __store_tunable_min(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#238: FILE: include/linux/akt_ops.h:301:
+#define __store_tunable_min(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#243: FILE: include/linux/akt_ops.h:306:
+	_vv = simple_strtol(buf, &_rr, 0);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#256: FILE: include/linux/akt_ops.h:319:
+#define __store_tunable_umin(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#256: FILE: include/linux/akt_ops.h:319:
+#define __store_tunable_umin(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#256: FILE: include/linux/akt_ops.h:319:
+#define __store_tunable_umin(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#256: FILE: include/linux/akt_ops.h:319:
+#define __store_tunable_umin(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv >= p->min.abs_value.val_##type &&		\
+				_vv < p->max.value.val_##type) {	\
+			p->min.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#261: FILE: include/linux/akt_ops.h:324:
+	_vv = simple_strtoul(buf, &_rr, 0);				\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: include/linux/akt_ops.h:341:
+static inline ssize_t store_tunable_min_short(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: include/linux/akt_ops.h:344:
+	ssize_t _count;
+	__store_tunable_min(p, short, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: include/linux/akt_ops.h:349:
+static inline ssize_t store_tunable_min_ushort(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: include/linux/akt_ops.h:352:
+	ssize_t _count;
+	__store_tunable_umin(p, ushort, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/akt_ops.h:357:
+static inline ssize_t store_tunable_min_int(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: include/linux/akt_ops.h:360:
+	ssize_t _count;
+	__store_tunable_min(p, int, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: include/linux/akt_ops.h:365:
+static inline ssize_t store_tunable_min_uint(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: include/linux/akt_ops.h:368:
+	ssize_t _count;
+	__store_tunable_umin(p, uint, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: include/linux/akt_ops.h:373:
+static inline ssize_t store_tunable_min_size_t(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: include/linux/akt_ops.h:376:
+	ssize_t _count;
+	__store_tunable_umin(p, size_t, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: include/linux/akt_ops.h:381:
+static inline ssize_t store_tunable_min_long(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: include/linux/akt_ops.h:384:
+	ssize_t _count;
+	__store_tunable_min(p, long, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: include/linux/akt_ops.h:389:
+static inline ssize_t store_tunable_min_ulong(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: include/linux/akt_ops.h:392:
+	ssize_t _count;
+	__store_tunable_umin(p, ulong, buf, _count);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#333: FILE: include/linux/akt_ops.h:396:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#339: FILE: include/linux/akt_ops.h:402:
+#define __store_tunable_max(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#339: FILE: include/linux/akt_ops.h:402:
+#define __store_tunable_max(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#339: FILE: include/linux/akt_ops.h:402:
+#define __store_tunable_max(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#339: FILE: include/linux/akt_ops.h:402:
+#define __store_tunable_max(p, type, buf, y)				\
+do {									\
+	long _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtol(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#344: FILE: include/linux/akt_ops.h:407:
+	_vv = simple_strtol(buf, &_rr, 0);				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#357: FILE: include/linux/akt_ops.h:420:
+#define __store_tunable_umax(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#357: FILE: include/linux/akt_ops.h:420:
+#define __store_tunable_umax(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#357: FILE: include/linux/akt_ops.h:420:
+#define __store_tunable_umax(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#357: FILE: include/linux/akt_ops.h:420:
+#define __store_tunable_umax(p, type, buf, y)				\
+do {									\
+	ulong _vv;							\
+	char *_rr;							\
+									\
+	_vv = simple_strtoul(buf, &_rr, 0);				\
+	if (_rr == buf)							\
+		y = -EINVAL;						\
+	else {								\
+		if (_vv <= p->max.abs_value.val_##type &&		\
+				_vv > p->min.value.val_##type) {	\
+			p->max.value.val_##type = _vv;			\
+			y = _rr - buf;					\
+		} else							\
+			y = -EINVAL;					\
+	}								\
+} while (0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#362: FILE: include/linux/akt_ops.h:425:
+	_vv = simple_strtoul(buf, &_rr, 0);				\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: include/linux/akt_ops.h:442:
+static inline ssize_t store_tunable_max_short(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#382: FILE: include/linux/akt_ops.h:445:
+	ssize_t _count;
+	__store_tunable_umax(p, short, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: include/linux/akt_ops.h:450:
+static inline ssize_t store_tunable_max_ushort(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: include/linux/akt_ops.h:453:
+	ssize_t _count;
+	__store_tunable_umax(p, ushort, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: include/linux/akt_ops.h:458:
+static inline ssize_t store_tunable_max_int(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#398: FILE: include/linux/akt_ops.h:461:
+	ssize_t _count;
+	__store_tunable_max(p, int, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: include/linux/akt_ops.h:466:
+static inline ssize_t store_tunable_max_uint(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: include/linux/akt_ops.h:469:
+	ssize_t _count;
+	__store_tunable_umax(p, uint, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: include/linux/akt_ops.h:474:
+static inline ssize_t store_tunable_max_size_t(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: include/linux/akt_ops.h:477:
+	ssize_t _count;
+	__store_tunable_umax(p, size_t, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: include/linux/akt_ops.h:482:
+static inline ssize_t store_tunable_max_long(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#422: FILE: include/linux/akt_ops.h:485:
+	ssize_t _count;
+	__store_tunable_max(p, long, buf, _count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: include/linux/akt_ops.h:490:
+static inline ssize_t store_tunable_max_ulong(struct auto_tune *p,
+					const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: include/linux/akt_ops.h:493:
+	ssize_t _count;
+	__store_tunable_umax(p, ulong, buf, _count);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#466: FILE: kernel/autotune/akt.c:222:
+	if (tun_addr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#467: FILE: kernel/autotune/akt.c:223:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'show_tunable_min', this function's name, in a string
#468: FILE: kernel/autotune/akt.c:224:
+			" show_tunable_min(): tunable address is invalid\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#481: FILE: kernel/autotune/akt.c:237:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: kernel/autotune/akt.c:248:
+ssize_t store_tunable_min(struct auto_tune *tun_addr, const char *buf,
+			size_t count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#496: FILE: kernel/autotune/akt.c:252:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#497: FILE: kernel/autotune/akt.c:253:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'store_tunable_min', this function's name, in a string
#498: FILE: kernel/autotune/akt.c:254:
+			" store_tunable_min(): tunable address is invalid\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#511: FILE: kernel/autotune/akt.c:267:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#524: FILE: kernel/autotune/akt.c:280:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#525: FILE: kernel/autotune/akt.c:281:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'show_tunable_max', this function's name, in a string
#526: FILE: kernel/autotune/akt.c:282:
+			" show_tunable_max(): tunable address is invalid\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#539: FILE: kernel/autotune/akt.c:295:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: kernel/autotune/akt.c:306:
+ssize_t store_tunable_max(struct auto_tune *tun_addr, const char *buf,
+			size_t count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#554: FILE: kernel/autotune/akt.c:310:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#555: FILE: kernel/autotune/akt.c:311:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'store_tunable_max', this function's name, in a string
#556: FILE: kernel/autotune/akt.c:312:
+			" store_tunable_max(): tunable address is invalid\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#569: FILE: kernel/autotune/akt.c:325:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#580: FILE: kernel/autotune/akt_sysfs.c:57:
+static TUNABLE_ATTR(min, S_IWUSR | S_IRUGO, show_tunable_min,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#583: FILE: kernel/autotune/akt_sysfs.c:60:
+static TUNABLE_ATTR(max, S_IWUSR | S_IRUGO, show_tunable_max,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 58 warnings, 48 checks, 527 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
