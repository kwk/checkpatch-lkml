ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: fs/9p/9p.c:90:
+static void v9fs_t_clunk_cb(void *a, struct v9fs_fcall *tc, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: fs/9p/9p.c:91:
+static void v9fs_t_clunk_cb(void *a, struct v9fs_fcall *tc, 
+	struct v9fs_fcall *rc, int err)

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#91: FILE: fs/9p/9p.c:105:
+	dprintk(DEBUG_9P, "tcall id %d rcall id %d\n", tc->id, rc->id);
 	                               ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tc)...) over kmalloc(sizeof(struct v9fs_fcall)...)
#114: FILE: fs/9p/9p.c:126:
+	tc = kmalloc(sizeof(struct v9fs_fcall), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#124: FILE: fs/9p/9p.c:133:
+	if (err >= 0) {
+		v9fs_t_clunk_cb(v9ses, tc, rc, 0);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#229: FILE: fs/9p/9p.h:103:
+#define V9FS_NOTAG	(u16)(~0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#230: FILE: fs/9p/9p.h:104:
+#define V9FS_NOFID	(u32)(~0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#240: FILE: fs/9p/9p.h:310:
+	sizeof(struct v9fs_stat) + 16*sizeof(struct v9fs_qid) + 16)
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#482: FILE: fs/9p/conv.c:613:
+v9fs_deserialize_fcall(void *buf, u32 buflen, struct v9fs_fcall *rcall,
                                                                  ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: fs/9p/conv.h:27:
+int v9fs_deserialize_stat(void *buf, u32 buflen, struct v9fs_stat *stat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: fs/9p/conv.h:28:
+int v9fs_deserialize_stat(void *buf, u32 buflen, struct v9fs_stat *stat, 
+	u32 statlen, int extended);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: fs/9p/conv.h:29:
+int v9fs_serialize_fcall(struct v9fs_fcall *tcall, void *buf, u32 buflen, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/9p/conv.h:30:
+int v9fs_serialize_fcall(struct v9fs_fcall *tcall, void *buf, u32 buflen, 
+	int extended);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#553: FILE: fs/9p/conv.h:31:
+int v9fs_deserialize_fcall(void *buf, u32 buflen, struct v9fs_fcall *rcall,
                                                                      ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: fs/9p/conv.h:32:
+int v9fs_deserialize_fcall(void *buf, u32 buflen, struct v9fs_fcall *rcall,
+	int rcalllen, int extended);

CHECK:CAMELCASE: Avoid CamelCase: <Rworksched>
#611: FILE: fs/9p/mux.c:49:
+	Rworksched = 1,		/* read work scheduled or running */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Rpending>
#612: FILE: fs/9p/mux.c:50:
+	Rpending = 2,		/* can read */

CHECK:CAMELCASE: Avoid CamelCase: <Wworksched>
#613: FILE: fs/9p/mux.c:51:
+	Wworksched = 4,		/* write work scheduled or running */

CHECK:CAMELCASE: Avoid CamelCase: <Wpending>
#614: FILE: fs/9p/mux.c:52:
+	Wpending = 8,		/* can write */

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#622: FILE: fs/9p/mux.c:60:
+	struct v9fs_fcall *rcall;
 	                   ^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#630: FILE: fs/9p/mux.c:68:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#664: FILE: fs/9p/mux.c:102:
+	struct v9fs_fcall *rcall;
 	                   ^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#671: FILE: fs/9p/mux.c:109:
+static void v9fs_pollwait(struct file *filp, wait_queue_head_t * wait_address,
                                        ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#671: FILE: fs/9p/mux.c:109:
+static void v9fs_pollwait(struct file *filp, wait_queue_head_t * wait_address,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#672: FILE: fs/9p/mux.c:110:
+			  poll_table * p);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v9fs_mux_poll_tasks[i].task"
#738: FILE: fs/9p/mux.c:168:
+			if (v9fs_mux_poll_tasks[i].task == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: fs/9p/mux.c:171:
+^I^I^I^Ivpt->task = kthread_create(v9fs_poll_proc, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: fs/9p/mux.c:172:
+				vpt->task = kthread_create(v9fs_poll_proc, 
+					vpt, "v9fs-poll");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vpt->task"
#762: FILE: fs/9p/mux.c:191:
+		if (vpt->task != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#804: FILE: fs/9p/mux.c:226:
+	for(i = 0; i < NELEM(m->poll_waddr); i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "m->poll_waddr[i]"
#805: FILE: fs/9p/mux.c:227:
+		if (m->poll_waddr[i] != NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m)...) over kmalloc(sizeof(struct v9fs_mux_data)...)
#856: FILE: fs/9p/mux.c:258:
+	m = kmalloc(sizeof(struct v9fs_mux_data) + 2 * msize, GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#873: FILE: fs/9p/mux.c:275:
+	m->wpos = m->wsize = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#892: FILE: fs/9p/mux.c:294:
+	for(i = 0; i < NELEM(m->poll_waddr); i++) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#943: FILE: fs/9p/mux.c:333:
+ * ^Ito files wait queue$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#946: FILE: fs/9p/mux.c:336:
+v9fs_pollwait(struct file *filp, wait_queue_head_t * wait_address,
                            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#946: FILE: fs/9p/mux.c:336:
+v9fs_pollwait(struct file *filp, wait_queue_head_t * wait_address,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#947: FILE: fs/9p/mux.c:337:
+	      poll_table * p)

ERROR:SPACING: space required before the open parenthesis '('
#957: FILE: fs/9p/mux.c:343:
+	for(i = 0; i < NELEM(m->poll_waddr); i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m->poll_waddr[i]"
#958: FILE: fs/9p/mux.c:344:
+		if (m->poll_waddr[i] == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1025: FILE: fs/9p/mux.c:395:
+		if ((m->wsize || !list_empty(&m->unsent_req_list))
+		    && !test_and_set_bit(Wworksched, &m->wsched)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1038: FILE: fs/9p/mux.c:404:
+ * ^Ithe appropriate work to the work queue$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1091: FILE: fs/9p/mux.c:441:
+		if (req->cb) {
[...]
+		} else
[...]

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1093: FILE: fs/9p/mux.c:443:
+			(*req->cb) (req->cba, req->tcall, req->rcall, req->err);
 			                                       ^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1096: FILE: fs/9p/mux.c:446:
+		} else

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1097: FILE: fs/9p/mux.c:447:
+			kfree(req->rcall);
 			           ^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1192: FILE: fs/9p/mux.c:505:
+		m->wpos = m->wsize = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1194: FILE: fs/9p/mux.c:507:
+	if (m->wsize == 0 && !list_empty(&m->unsent_req_list)) {
[...]
 	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1200: FILE: fs/9p/mux.c:513:
+		if (n & POLLOUT) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1203: FILE: fs/9p/mux.c:516:
+		} else

WARNING:INDENTED_LABEL: labels should not be indented
#1214: FILE: fs/9p/mux.c:523:
+      error:

CHECK:BRACES: braces {} should be used on all arms of this statement
#1345: FILE: fs/9p/mux.c:561:
+	if (req->cb && req->err != ERREQFLUSH) {
[...]
+		(*req->cb) (req->cba, req->tcall, req->rcall, req->err);
[...]

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1346: FILE: fs/9p/mux.c:562:
+		dprintk(DEBUG_MUX, "calling callback tcall %p rcall %p\n",
 		                                              ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1347: FILE: fs/9p/mux.c:563:
+			req->tcall, req->rcall);
 			                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1351: FILE: fs/9p/mux.c:565:
+		(*req->cb) (req->cba, req->tcall, req->rcall, req->err);
 		                                       ^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1353: FILE: fs/9p/mux.c:567:
+	} else

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1354: FILE: fs/9p/mux.c:568:
+		kfree(req->rcall);
 		           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1399: FILE: fs/9p/mux.c:585:
+	struct v9fs_fcall *rcall;
 	                   ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1406: FILE: fs/9p/mux.c:592:
+	rcall = NULL;
 	^^^^^

CHECK:SPACING: No space is necessary after a cast
#1421: FILE: fs/9p/mux.c:607:
+		n = le32_to_cpu(*(__le32 *) m->rbuf);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1439: FILE: fs/9p/mux.c:619:
+		rcall = kmalloc(rcallen, GFP_KERNEL);
 		^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1450: FILE: fs/9p/mux.c:626:
+		err = v9fs_deserialize_fcall(m->rbuf, n, rcall, rcallen,
 		                                         ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1467: FILE: fs/9p/mux.c:629:
+			kfree(rcall);
 			      ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1488: FILE: fs/9p/mux.c:641:
+				req->rcall = rcall;
 				     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1488: FILE: fs/9p/mux.c:641:
+				req->rcall = rcall;
 				             ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1518: FILE: fs/9p/mux.c:663:
+	if (!list_empty(&m->req_list)) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1524: FILE: fs/9p/mux.c:669:
+		if (n & POLLIN) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1527: FILE: fs/9p/mux.c:672:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1529: FILE: fs/9p/mux.c:674:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#1534: FILE: fs/9p/mux.c:679:
+      error:

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#1543: FILE: fs/9p/mux.c:688:
+ * a guarantee that the request is sent succesfully. Can return errors
                                         ^^^^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req)...) over kmalloc(sizeof(struct v9fs_req)...)
#1563: FILE: fs/9p/mux.c:708:
+	req = kmalloc(sizeof(struct v9fs_req), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1578: FILE: fs/9p/mux.c:723:
+	req->rcall = NULL;
 	     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1621: FILE: fs/9p/mux.c:766:
+				(*cb) (req->cba, req->tcall, req->rcall,
 				                                  ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct v9fs_fcall)...)
#1654: FILE: fs/9p/mux.c:792:
+	fc = kmalloc(sizeof(struct v9fs_fcall), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1675: FILE: fs/9p/mux.c:812:
+	r->rcall = rc;
 	   ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1701: FILE: fs/9p/mux.c:834:
+	r.rcall = NULL;
 	  ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1718: FILE: fs/9p/mux.c:851:
+	err = wait_event_interruptible(r.wqueue, r.rcall != NULL || r.err < 0);
 	                                           ^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r.rcall"
#1718: FILE: fs/9p/mux.c:851:
+	err = wait_event_interruptible(r.wqueue, r.rcall != NULL || r.err < 0);

CHECK:CAMELCASE: Avoid CamelCase: <Connected>
#1722: FILE: fs/9p/mux.c:855:
+	if (err == -ERESTARTSYS && m->trans->status == Connected && m->err == 0) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1736: FILE: fs/9p/mux.c:869:
+		if (r.rcall)
 		      ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1741: FILE: fs/9p/mux.c:874:
+			*rc = r.rcall;
 			        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1743: FILE: fs/9p/mux.c:876:
+			kfree(r.rcall);
 			        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1745: FILE: fs/9p/mux.c:878:
+		kfree(r.rcall);
 		        ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1792: FILE: fs/9p/mux.c:912:
+ * v9fs_mux_cancel - cancel all pending requests with error $

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1822: FILE: fs/9p/mux.c:935:
+			(*req->cb) (req->cba, req->tcall, req->rcall, req->err);
 			                                       ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1824: FILE: fs/9p/mux.c:937:
+			kfree(req->rcall);
 			           ^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1873: FILE: fs/9p/mux.h:38:
+ * @err - error code (non-zero if error occured)
                                         ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1875: FILE: fs/9p/mux.h:40:
+typedef void (*v9fs_mux_req_callback)(void *a, struct v9fs_fcall *tc, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1881: FILE: fs/9p/mux.h:46:
+struct v9fs_mux_data *v9fs_mux_init(struct v9fs_transport *trans, int msize, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1882: FILE: fs/9p/mux.h:47:
+struct v9fs_mux_data *v9fs_mux_init(struct v9fs_transport *trans, int msize, 
+	unsigned char *extended);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_mux_data *' should also have an identifier name
#1883: FILE: fs/9p/mux.h:48:
+void v9fs_mux_destroy(struct v9fs_mux_data *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1888: FILE: fs/9p/mux.h:53:
+int v9fs_mux_rpcnb(struct v9fs_mux_data *m, struct v9fs_fcall *tc, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1889: FILE: fs/9p/mux.h:54:
+int v9fs_mux_rpcnb(struct v9fs_mux_data *m, struct v9fs_fcall *tc, 
+	v9fs_mux_req_callback cb, void *a);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1919: FILE: fs/9p/trans_fd.c:164:
+static unsigned int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1920: FILE: fs/9p/trans_fd.c:165:
+v9fs_fd_poll(struct v9fs_transport *trans, struct poll_table_struct *pt) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1962: FILE: fs/9p/trans_fd.c:207:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1995: FILE: fs/9p/trans_sock.c:49:
+	struct file *filp;
 	             ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Disconnected>
#2012: FILE: fs/9p/trans_sock.c:65:
+	if (!trans || trans->status == Disconnected) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2042: FILE: fs/9p/trans_sock.c:75:
+	ret = kernel_read(ts->filp, ts->filp->f_pos, v, len);
 	                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2095: FILE: fs/9p/trans_sock.c:115:
+	ret = vfs_write(ts->filp, (void __user *)v, len, &ts->filp->f_pos);
 	                    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2110: FILE: fs/9p/trans_sock.c:126:
+static unsigned int v9fs_sock_poll(struct v9fs_transport *trans, $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2110: FILE: fs/9p/trans_sock.c:126:
+static unsigned int v9fs_sock_poll(struct v9fs_transport *trans, 
+	struct poll_table_struct *pt) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2111: FILE: fs/9p/trans_sock.c:127:
+static unsigned int v9fs_sock_poll(struct v9fs_transport *trans, 
+	struct poll_table_struct *pt) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2112: FILE: fs/9p/trans_sock.c:128:
+	struct poll_table_struct *pt) {
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2137: FILE: fs/9p/trans_sock.c:153:
+	ret = ts->filp->f_op->poll(ts->filp, pt);
 	                               ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2144: FILE: fs/9p/trans_sock.c:160:
 
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2164: FILE: fs/9p/trans_sock.c:188:
+	ts->filp = NULL;
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2182: FILE: fs/9p/trans_sock.c:219:
+	ts->filp = fget(fd);
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2212: FILE: fs/9p/trans_sock.c:262:
+	ts->filp = NULL;
 	    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2218: FILE: fs/9p/trans_sock.c:267:
+^Irc = csocket->ops->connect(csocket, (struct sockaddr *)&sun_server, $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2236: FILE: fs/9p/trans_sock.c:286:
+	ts->filp = fget(fd);
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2248: FILE: fs/9p/trans_sock.c:308:
+	if ((ts) && (ts->filp)) {
 	                 ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts->filp'
#2248: FILE: fs/9p/trans_sock.c:308:
+	if ((ts) && (ts->filp)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2249: FILE: fs/9p/trans_sock.c:309:
+		fput(ts->filp);
 		         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2250: FILE: fs/9p/trans_sock.c:310:
+		ts->filp = NULL;
 		    ^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_transport *' should also have an identifier name
#2295: FILE: fs/9p/transport.h:41:
+	unsigned int (*poll)(struct v9fs_transport *, struct poll_table_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct poll_table_struct *' should also have an identifier name
#2295: FILE: fs/9p/transport.h:41:
+	unsigned int (*poll)(struct v9fs_transport *, struct poll_table_struct *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "idr_find"
#2323: FILE: fs/9p/v9fs.c:253:
+	return idr_find(&p->pool, id) != NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2346: FILE: fs/9p/v9fs.c:332:
+	v9ses->mux = v9fs_mux_init(v9ses->transport, v9ses->maxdata + V9FS_IOHDRSZ,
+		&v9ses->extended);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2511: FILE: fs/9p/vfs_dir.c:100:
+			s = v9fs_deserialize_stat(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2524: FILE: fs/9p/vfs_dir.c:144:
+^I^I^Is = v9fs_deserialize_stat(fcall->params.rread.data + i, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2525: FILE: fs/9p/vfs_dir.c:145:
+			s = v9fs_deserialize_stat(fcall->params.rread.data + i, 
+				n - i, mi, v9ses->maxdata, v9ses->extended);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2574: FILE: fs/9p/vfs_inode.c:376:
+	if (!(perm&V9FS_DMDIR)) {
 	          ^

CHECK:CAMELCASE: Avoid CamelCase: <CleanUpFid>
#2579: FILE: fs/9p/vfs_inode.c:381:
+			goto CleanUpFid;

CHECK:SPACING: No space is necessary after a cast
#2599: FILE: fs/9p/vfs_inode.c:400:
+		(char *) file_dentry->d_name.name, &fcall);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2648: FILE: fs/9p/vfs_inode.c:451:
+ ^I^Ierr = v9fs_t_clunk(v9ses, newfid);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2648: FILE: fs/9p/vfs_inode.c:451:
+ ^I^Ierr = v9fs_t_clunk(v9ses, newfid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2648: FILE: fs/9p/vfs_inode.c:451:
+ ^I^Ierr = v9fs_t_clunk(v9ses, newfid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2649: FILE: fs/9p/vfs_inode.c:452:
+ ^I^Iif (err < 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2649: FILE: fs/9p/vfs_inode.c:452:
+ ^I^Iif (err < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2649: FILE: fs/9p/vfs_inode.c:452:
+ ^I^Iif (err < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2650: FILE: fs/9p/vfs_inode.c:453:
+ ^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d\n", err);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2650: FILE: fs/9p/vfs_inode.c:453:
+ ^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d\n", err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2650: FILE: fs/9p/vfs_inode.c:453:
+ ^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d\n", err);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2660: FILE: fs/9p/vfs_inode.c:456:
+ ^I^Ierr = v9fs_t_clunk(v9ses, wfidno);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2660: FILE: fs/9p/vfs_inode.c:456:
+ ^I^Ierr = v9fs_t_clunk(v9ses, wfidno);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2660: FILE: fs/9p/vfs_inode.c:456:
+ ^I^Ierr = v9fs_t_clunk(v9ses, wfidno);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2661: FILE: fs/9p/vfs_inode.c:457:
+ ^I^Iif (err < 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2661: FILE: fs/9p/vfs_inode.c:457:
+ ^I^Iif (err < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2661: FILE: fs/9p/vfs_inode.c:457:
+ ^I^Iif (err < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2662: FILE: fs/9p/vfs_inode.c:458:
+ ^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d\n", err);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2662: FILE: fs/9p/vfs_inode.c:458:
+ ^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d\n", err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2662: FILE: fs/9p/vfs_inode.c:458:
+ ^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d\n", err);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119900.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 64 warnings, 51 checks, 2548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119900.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
