WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#91: FILE: lib/inflate.c:129:
+static int INIT huft_build(unsigned *, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: lib/inflate.c:129:
+static int INIT huft_build(unsigned *, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: lib/inflate.c:129:
+static int INIT huft_build(unsigned *, unsigned, unsigned,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: lib/inflate.c:130:
+static int INIT huft_build(unsigned *, unsigned, unsigned,
+			  const u16 *, const u16 *, struct huft **, int *);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: lib/inflate.c:148:
+#define flush_output(w) (outcnt=(w),flush_window())
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: lib/inflate.c:148:
+#define flush_output(w) (outcnt=(w),flush_window())
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: lib/inflate.c:194:
+   DUMPBITS removes the bits from b. The macros use the variable k for$

CHECK:CAMELCASE: Avoid CamelCase: <The>
#160: FILE: lib/inflate.c:194:
+   DUMPBITS removes the bits from b. The macros use the variable k for

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: lib/inflate.c:195:
+   the number of bits in b. Normally, b and k are initialized at the$

CHECK:CAMELCASE: Avoid CamelCase: <Normally>
#161: FILE: lib/inflate.c:195:
+   the number of bits in b. Normally, b and k are initialized at the

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: lib/inflate.c:196:
+   beginning of a routine that uses these macros from a global bit$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: lib/inflate.c:197:
+   buffer and count.$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#174: FILE: lib/inflate.c:217:
+static unsigned bk;		/* bits in bit buffer */

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#185: FILE: lib/inflate.c:225:
+#define NEXTBYTE()  ({ int v = get_byte(); if (v < 0) goto underrun; (u8)v; })

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)
                                ^

ERROR:SPACING: spaces required around that '|=' (ctx:VxV)
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)
                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)
                                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)
                                                             ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)
                                                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)
                                                                  ^

ERROR:SPACING: space required before the open brace '{'
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#186: FILE: lib/inflate.c:226:
+#define NEEDBITS(n) do {while(k<(n)){b|=((u32)NEXTBYTE())<<k;k+=8;}} while(0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#215: FILE: lib/inflate.c:285:
+static int INIT huft_build(unsigned *b, unsigned n, unsigned s, const u16 * d,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: lib/inflate.c:285:
+static int INIT huft_build(unsigned *b, unsigned n, unsigned s, const u16 * d,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: lib/inflate.c:285:
+static int INIT huft_build(unsigned *b, unsigned n, unsigned s, const u16 * d,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: lib/inflate.c:285:
+static int INIT huft_build(unsigned *b, unsigned n, unsigned s, const u16 * d,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: lib/inflate.c:286:
+static int INIT huft_build(unsigned *b, unsigned n, unsigned s, const u16 * d,
+		      const u16 * e, struct huft **t, int *m)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#216: FILE: lib/inflate.c:286:
+		      const u16 * e, struct huft **t, int *m)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: lib/inflate.c:293:
+	unsigned i;	/* counter, current code */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: lib/inflate.c:294:
+	unsigned j;	/* counter */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#232: FILE: lib/inflate.c:297:
+	unsigned *p;	/* pointer into c[], b[], or v[] */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#263: FILE: lib/inflate.c:372:
+		if ((j = *p++))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#285: FILE: lib/inflate.c:431:
+				if (!(q = (struct huft *)malloc(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#285: FILE: lib/inflate.c:431:
+				if (!(q = (struct huft *)malloc(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around q->v.t
#295: FILE: lib/inflate.c:439:
+				*(t = &(q->v.t)) = 0;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#316: FILE: lib/inflate.c:463:
+			r.b = (u8) (k - w);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#366: FILE: lib/inflate.c:540:
+	unsigned e;	/* table entry flag/number of extra bits */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#374: FILE: lib/inflate.c:546:
+	unsigned k;	/* number of bits in bit buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#442: FILE: lib/inflate.c:642:
+	unsigned k;	/* number of bits in bit buffer */

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#477: FILE: lib/inflate.c:696:
+static int noinline INIT inflate_fixed(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#485: FILE: lib/inflate.c:703:
+	unsigned l[N_MAX];	/* length list for huft_build */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#498: FILE: lib/inflate.c:717:
+	if ((i = huft_build(l, N_MAX, 257, cplens, cplext, &tl, &bl)))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#507: FILE: lib/inflate.c:746:
+static int noinline INIT inflate_dynamic(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#523: FILE: lib/inflate.c:762:
+	unsigned k;	/* number of bits in bit buffer */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#544: FILE: lib/inflate.c:798:
+	if ((i = huft_build(ll, 19, 19, 0, 0, &tl, &bl))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#553: FILE: lib/inflate.c:861:
+	if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl))) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#562: FILE: lib/inflate.c:871:
+	if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd))) {
 	                             ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#562: FILE: lib/inflate.c:871:
+	if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd))) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#589: FILE: lib/inflate.c:907:
+	unsigned k;	/* number of bits in bit buffer */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#617: FILE: lib/inflate.c:961:
+		if ((r = inflate_block(&e))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139694.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 22 warnings, 8 checks, 677 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139694.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
