CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#65: 
Pádraig Brady - http://www.pixelbeat.org
 ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#75: 
diff -Naur linux-2.4.20-5.2.52/drivers/net/e1000/e1000_main.c linux-2.4.20-pb/drivers/net/e1000/e1000_main.c

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: drivers/net/e1000/e1000_main.c:2434:
+	while(1) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#128: FILE: drivers/net/e1000/e1000_main.c:2439:
+			if (!skb_shared(buffer_info->skb)) {
[...]
+			} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#142: FILE: drivers/net/e1000/e1000_main.c:2452:
+			skb = realloc_skb(buffer_info->skb, adapter->rx_buffer_len + reserve_len, GFP_ATOMIC);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#149: FILE: drivers/net/e1000/e1000_main.c:2457:
+			break; /* Better luck next round */
+		} else {

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#179: FILE: include/linux/skbuff.h:233:
+extern struct sk_buff *		realloc_skb(struct sk_buff *skb, unsigned int size, int priority);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/skbuff.h:233:
+extern struct sk_buff *		realloc_skb(struct sk_buff *skb, unsigned int size, int priority);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo *         bar" should be "foo *bar"
#187: FILE: include/linux/skbuff.h:244:
+extern struct sk_buff *         skb_pad(struct sk_buff *skb, int pad);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/skbuff.h:244:
+extern struct sk_buff *         skb_pad(struct sk_buff *skb, int pad);

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: include/linux/skbuff.h:1100:
+        unsigned int size = skb->len;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: include/linux/skbuff.h:1100:
+        unsigned int size = skb->len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: include/linux/skbuff.h:1101:
+        if(likely(size >= len))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: include/linux/skbuff.h:1101:
+        unsigned int size = skb->len;
+        if(likely(size >= len))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: include/linux/skbuff.h:1101:
+        if(likely(size >= len))$

ERROR:SPACING: space required before the open parenthesis '('
#209: FILE: include/linux/skbuff.h:1101:
+        if(likely(size >= len))

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: include/linux/skbuff.h:1102:
+                return skb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: include/linux/skbuff.h:1102:
+                return skb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: include/linux/skbuff.h:1103:
+        return skb_pad(skb, len-size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: include/linux/skbuff.h:1103:
+        return skb_pad(skb, len-size);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#211: FILE: include/linux/skbuff.h:1103:
+        return skb_pad(skb, len-size);
                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#246: FILE: net/core/skbuff.c:266:
+struct sk_buff *realloc_skb(struct sk_buff* skb, unsigned int size, int gfp_mask)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#248: FILE: net/core/skbuff.c:268:
+	int truesize=skb->truesize;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#249: FILE: net/core/skbuff.c:269:
+	u8 *data=skb->head;
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: net/core/skbuff.c:275:
+	if ((size+sizeof(struct sk_buff)) > truesize) {
 	         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: net/core/skbuff.c:276:
+^I        skb_release_data(skb);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#258: FILE: net/core/skbuff.c:278:
+		if (data == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: net/core/skbuff.c:800:
+        struct sk_buff *nskb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: net/core/skbuff.c:800:
+        struct sk_buff *nskb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: net/core/skbuff.c:802:
+        /* If the skbuff is non linear tailroom is always zero.. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: net/core/skbuff.c:803:
+        if(skb_tailroom(skb) >= pad)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: net/core/skbuff.c:803:
+        if(skb_tailroom(skb) >= pad)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#310: FILE: net/core/skbuff.c:803:
+        if(skb_tailroom(skb) >= pad)
+        {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: net/core/skbuff.c:803:
+        if(skb_tailroom(skb) >= pad)

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: net/core/skbuff.c:804:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: net/core/skbuff.c:804:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: net/core/skbuff.c:805:
+                memset(skb->data+skb->len, 0, pad);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: net/core/skbuff.c:805:
+                memset(skb->data+skb->len, 0, pad);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#312: FILE: net/core/skbuff.c:805:
+                memset(skb->data+skb->len, 0, pad);
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: net/core/skbuff.c:806:
+                return skb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: net/core/skbuff.c:806:
+                return skb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: net/core/skbuff.c:807:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: net/core/skbuff.c:807:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: net/core/skbuff.c:809:
+        nskb = skb_copy_expand(skb, skb_headroom(skb), skb_tailroom(skb) + pad, GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: net/core/skbuff.c:809:
+        nskb = skb_copy_expand(skb, skb_headroom(skb), skb_tailroom(skb) + pad, GFP_ATOMIC);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: net/core/skbuff.c:810:
+        kfree_skb(skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: net/core/skbuff.c:810:
+        kfree_skb(skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: net/core/skbuff.c:811:
+        if(nskb)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: net/core/skbuff.c:811:
+        if(nskb)$

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: net/core/skbuff.c:811:
+        if(nskb)

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: net/core/skbuff.c:812:
+                memset(nskb->data+nskb->len, 0, pad);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: net/core/skbuff.c:812:
+                memset(nskb->data+nskb->len, 0, pad);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#319: FILE: net/core/skbuff.c:812:
+                memset(nskb->data+nskb->len, 0, pad);
                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: net/core/skbuff.c:813:
+        return nskb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: net/core/skbuff.c:813:
+        return nskb;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224867.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 20 warnings, 8 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224867.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
