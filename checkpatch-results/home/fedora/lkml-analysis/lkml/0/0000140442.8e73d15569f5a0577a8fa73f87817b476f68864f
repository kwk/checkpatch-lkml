ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#43: FILE: mm/readahead.c:24:
+#define dprintk(args...) \
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#44: FILE: mm/readahead.c:25:
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#44: FILE: mm/readahead.c:25:
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#45: FILE: mm/readahead.c:26:
+#define ddprintk(args...) \
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#46: FILE: mm/readahead.c:27:
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#46: FILE: mm/readahead.c:27:
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

ERROR:SPACING: space required before the open parenthesis '('
#50: FILE: mm/readahead.c:31:
+#define dprintk(args...)     do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#51: FILE: mm/readahead.c:32:
+#define ddprintk(args...)    do {} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#55: FILE: mm/readahead.c:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: mm/readahead.c:319:
+		if (readahead_ratio > 9 &&
+				page_idx == nr_to_read - lookahead_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#127: FILE: mm/readahead.c:404:
+	return __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: mm/readahead.c:424:
+	actual = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: mm/readahead.c:427:
+	dprintk("blockable-readahead(ino=%lu, ra=%lu+%lu) = %d\n",
+			mapping->host->i_ino, offset, nr_to_read, actual);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: mm/readahead.c:637:
+static inline struct page *__find_page(struct address_space *mapping,
+						unsigned long offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#206: FILE: mm/readahead.c:651:
+		BUG_ON(page->index != offset);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: mm/readahead.c:667:
+	BUG_ON(!nr_pages || !page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rescue_pages', this function's name, in a string
#227: FILE: mm/readahead.c:672:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: mm/readahead.c:673:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",
+			mapping->host->i_ino, index, nr_pages);

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: mm/readahead.c:675:
+	for(;;) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: mm/readahead.c:683:
+		while (page_mapping(page) == mapping &&
+				page_index(page) == index) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: mm/readahead.c:685:
+			struct page *the_page = page;
+			page = next_page(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: mm/readahead.c:687:
+			if (!PageActive(the_page) &&
+					!PageActivate(the_page) &&

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 8 warnings, 7 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
