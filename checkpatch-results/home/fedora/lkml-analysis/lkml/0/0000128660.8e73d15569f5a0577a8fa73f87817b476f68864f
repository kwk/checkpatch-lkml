WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This is an updated version of SPI framework developed by Dmitry Pervushin and Vitaly Wool.

WARNING:TYPO_SPELLING: 'thw' may be misspelled - perhaps 'the'?
#51: 
1. Now thw footprint of the pure (i. e. w/o device interface and thread-based handling) .text section is _less_ than 2k for ARM. 
       ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#87: FILE: Documentation/spi.txt:1:
+Documentation/spi.txt

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#231: FILE: drivers/spi/Kconfig:6:
+config SPI
+	tristate "SPI (Serial Peripheral Interface) bus support"
+        default false
+	help
+	  Say Y if you need to enable SPI support on your kernel.
+ 	  Say M if you want to create the spi-core loadable module.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#282: FILE: drivers/spi/Makefile:14:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: drivers/spi/spi-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#290: FILE: drivers/spi/spi-core.c:2:
+ *  drivers/spi/spi-core.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#312: FILE: drivers/spi/spi-core.c:24:
+#include <asm/atomic.h>

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#319: FILE: drivers/spi/spi-core.c:31:
+void spimsg_set_clock (struct spi_msg* message, u32 clock)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#319: FILE: drivers/spi/spi-core.c:31:
+void spimsg_set_clock (struct spi_msg* message, u32 clock)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#324: FILE: drivers/spi/spi-core.c:36:
+u32 spimsg_get_clock (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: drivers/spi/spi-core.c:36:
+u32 spimsg_get_clock (struct spi_msg* message)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#329: FILE: drivers/spi/spi-core.c:41:
+u32 spimsg_get_flags (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: drivers/spi/spi-core.c:41:
+u32 spimsg_get_flags (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#334: FILE: drivers/spi/spi-core.c:46:
+u32 spimsg_get_buffer (struct spi_msg *message, void **buffer)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#341: FILE: drivers/spi/spi-core.c:53:
+	if (message->flags & SPI_M_DMAUNSAFE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#342: FILE: drivers/spi/spi-core.c:54:
+		*buffer = kmalloc (message->len+sizeof(void*), GFP_DMA);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#342: FILE: drivers/spi/spi-core.c:54:
+		*buffer = kmalloc (message->len+sizeof(void*), GFP_DMA);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#342: FILE: drivers/spi/spi-core.c:54:
+		*buffer = kmalloc (message->len+sizeof(void*), GFP_DMA);
 		                               ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#345: FILE: drivers/spi/spi-core.c:57:
+		*(void**)((u8*)*buffer + message->len) = message->buf_ptr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#345: FILE: drivers/spi/spi-core.c:57:
+		*(void**)((u8*)*buffer + message->len) = message->buf_ptr;

ERROR:SPACING: space prohibited after that open parenthesis '('
#347: FILE: drivers/spi/spi-core.c:59:
+			memcpy( *buffer, message->buf_ptr, message->len );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#347: FILE: drivers/spi/spi-core.c:59:
+			memcpy( *buffer, message->buf_ptr, message->len );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: drivers/spi/spi-core.c:64:
+void spimsg_put_buffer (struct spi_msg *message, void *buffer)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#356: FILE: drivers/spi/spi-core.c:68:
+			memcpy (message->buf_ptr, buffer, message->len);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#369: FILE: drivers/spi/spi-core.c:81:
+ * @status: user-supplied callback function
+**/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: drivers/spi/spi-core.c:83:
+struct spi_msg *spimsg_alloc(struct spi_device *device,
+					   struct spi_msg *link,

WARNING:SPACING: Unnecessary space before function pointer arguments
#375: FILE: drivers/spi/spi-core.c:87:
+					   void (*status) (struct spi_msg *,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#380: FILE: drivers/spi/spi-core.c:92:
+	if ((flags & (SPI_M_RD|SPI_M_WR)) == (SPI_M_RD|SPI_M_WR))
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#380: FILE: drivers/spi/spi-core.c:92:
+	if ((flags & (SPI_M_RD|SPI_M_WR)) == (SPI_M_RD|SPI_M_WR))
 	                                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#382: FILE: drivers/spi/spi-core.c:94:
+	msg = kzalloc( sizeof (struct spi_msg), GFP_KERNEL);

ERROR:SPACING: space prohibited after that open parenthesis '('
#382: FILE: drivers/spi/spi-core.c:94:
+	msg = kzalloc( sizeof (struct spi_msg), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*msg)...) over kzalloc(sizeof (struct spi_msg)...)
#382: FILE: drivers/spi/spi-core.c:94:
+	msg = kzalloc( sizeof (struct spi_msg), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: drivers/spi/spi-core.c:121:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#431: FILE: drivers/spi/spi-core.c:143:
+static int spi_bus_suspend(struct device * dev, pm_message_t message)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#435: FILE: drivers/spi/spi-core.c:147:
+	if (dev && dev->driver && TO_SPI_DRIVER(dev->driver)->suspend ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#436: FILE: drivers/spi/spi-core.c:148:
+		ret = TO_SPI_DRIVER(dev->driver)->suspend( TO_SPI_DEV(dev), message);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#437: FILE: drivers/spi/spi-core.c:149:
+		if (ret == 0 )

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#449: FILE: drivers/spi/spi-core.c:161:
+ * This function resumes device on SPI bus, just like platform_bus does
+**/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#450: FILE: drivers/spi/spi-core.c:162:
+static int spi_bus_resume(struct device * dev)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#454: FILE: drivers/spi/spi-core.c:166:
+	if (dev && dev->driver && TO_SPI_DRIVER(dev->driver)->suspend ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#479: FILE: drivers/spi/spi-core.c:191:
+ * device object is SPI master controller
+**/

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#523: FILE: drivers/spi/spi-core.c:235:
+	struct spi_bus_driver *bus= TO_SPI_BUS_DRIVER(dev->driver);
 	                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#540: FILE: drivers/spi/spi-core.c:252:
+ * each SPI device on the bus using call to __spi_device_free
+**/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#556: FILE: drivers/spi/spi-core.c:268:
+ * This fus called as a part of device removing
+**/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#559: FILE: drivers/spi/spi-core.c:271:
+	struct spi_device* sdev = TO_SPI_DEV(dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#573: FILE: drivers/spi/spi-core.c:285:
+ * somewhere from hardcoded structures, and prepare bus_data for its devices
+**/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#574: FILE: drivers/spi/spi-core.c:286:
+struct spi_device* spi_device_add(struct device *parent, char *name, void *bus_data)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#576: FILE: drivers/spi/spi-core.c:288:
+	struct spi_device* dev;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#577: FILE: drivers/spi/spi-core.c:289:
+	static int minor = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct spi_device)...)
#582: FILE: drivers/spi/spi-core.c:294:
+	dev = kmalloc(sizeof(struct spi_device), GFP_KERNEL);

ERROR:SPACING: space required before the open parenthesis '('
#583: FILE: drivers/spi/spi-core.c:295:
+	if(!dev)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#594: FILE: drivers/spi/spi-core.c:306:
+	if (device_register(&dev->dev)<0) {
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: drivers/spi/spi-core.c:323:
+	struct spi_device *spidev = TO_SPI_DEV(dev);
+	if (spidev->cdev) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#618: FILE: drivers/spi/spi-core.c:330:
+}
+/**

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#629: FILE: drivers/spi/spi-core.c:341:
+ *
+**/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#651: FILE: drivers/spi/spi-core.c:363:
+	if (TO_SPI_BUS_DRIVER(bus->driver)->queue)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#684: FILE: drivers/spi/spi-core.c:396:
+ * Returns the number of bytes transferred, or negative error code.
+**/

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#687: FILE: drivers/spi/spi-core.c:399:
+	struct spi_msg *msg = spimsg_alloc(dev, NULL, SPI_M_WR | SPI_M_DMAUNSAFE | flags, buf, len, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#703: FILE: drivers/spi/spi-core.c:415:
+ * Returns the number of bytes transferred, or negative error code.
+**/

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#707: FILE: drivers/spi/spi-core.c:419:
+	struct spi_msg *msg = spimsg_alloc(dev, NULL, SPI_M_RD | SPI_M_DMAUNSAFE | flags, buf, len, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: drivers/spi/spi-core.c:438:
+int spi_bus_populate(struct device *parent,
+			struct spi_device_desc* devices_s,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#726: FILE: drivers/spi/spi-core.c:438:
+			struct spi_device_desc* devices_s,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#727: FILE: drivers/spi/spi-core.c:439:
+			void (*callback) (struct device* bus,

WARNING:SPACING: Unnecessary space before function pointer arguments
#727: FILE: drivers/spi/spi-core.c:439:
+			void (*callback) (struct device* bus,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#729: FILE: drivers/spi/spi-core.c:441:
+					  void* params))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: drivers/spi/spi-core.c:448:
+		dev_dbg(parent, " discovered new SPI device, name '%s'\n",
+				devices_s->name);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#737: FILE: drivers/spi/spi-core.c:449:
+		if ((new_device = spi_device_add(parent, devices_s->name, devices_s->params)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#737: FILE: drivers/spi/spi-core.c:449:
+		if ((new_device = spi_device_add(parent, devices_s->name, devices_s->params)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#755: FILE: drivers/spi/spi-core.c:467:
+ *
+**/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#756: FILE: drivers/spi/spi-core.c:468:
+void spi_bus_reset (struct device *bus, u32 context)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#765: FILE: drivers/spi/spi-core.c:477:
+static int spi_driver_probe (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#773: FILE: drivers/spi/spi-core.c:485:
+static int spi_driver_remove (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#781: FILE: drivers/spi/spi-core.c:493:
+static void spi_driver_shutdown (struct device *dev)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#821: FILE: drivers/spi/spi-core.c:533:
+EXPORT_SYMBOL_GPL(spi_bus_reset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#822: FILE: drivers/spi/spi-core.c:534:
+EXPORT_SYMBOL_GPL(spi_device_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#823: FILE: drivers/spi/spi-core.c:535:
+EXPORT_SYMBOL_GPL(spi_driver_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#824: FILE: drivers/spi/spi-core.c:536:
+EXPORT_SYMBOL_GPL(spi_bus_driver_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#825: FILE: drivers/spi/spi-core.c:537:
+EXPORT_SYMBOL_GPL(spi_bus_populate);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#826: FILE: drivers/spi/spi-core.c:538:
+EXPORT_SYMBOL_GPL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#827: FILE: drivers/spi/spi-core.c:539:
+EXPORT_SYMBOL_GPL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#828: FILE: drivers/spi/spi-core.c:540:
+EXPORT_SYMBOL_GPL(spi_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#829: FILE: drivers/spi/spi-core.c:541:
+EXPORT_SYMBOL_GPL(spi_bus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#830: FILE: drivers/spi/spi-core.c:542:
+EXPORT_SYMBOL_GPL(spi_bus_driver_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#832: FILE: drivers/spi/spi-core.c:544:
+EXPORT_SYMBOL_GPL(spimsg_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#833: FILE: drivers/spi/spi-core.c:545:
+EXPORT_SYMBOL_GPL(spimsg_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#834: FILE: drivers/spi/spi-core.c:546:
+EXPORT_SYMBOL_GPL(spimsg_put_buffer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#835: FILE: drivers/spi/spi-core.c:547:
+EXPORT_SYMBOL_GPL(spimsg_get_flags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#836: FILE: drivers/spi/spi-core.c:548:
+EXPORT_SYMBOL_GPL(spimsg_get_buffer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#837: FILE: drivers/spi/spi-core.c:549:
+EXPORT_SYMBOL_GPL(spimsg_get_clock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#838: FILE: drivers/spi/spi-core.c:550:
+EXPORT_SYMBOL_GPL(spimsg_set_clock);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#844: FILE: drivers/spi/spi-core.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#845: FILE: drivers/spi/spi-core.h:2:
+ *  linux/drivers/spi/spi-core.h

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#862: FILE: drivers/spi/spi-core.h:19:
+#define SPI_M_CS	0x00000008	/**< CS active level at begining of frame  */
                 	          	                        ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#865: FILE: drivers/spi/spi-core.h:22:
+#define SPI_M_EXTBUF^I0x80000000    ^I/** externally allocated buffers */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#879: FILE: drivers/spi/spi-core.h:36:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPACING: Unnecessary space before function pointer arguments
#879: FILE: drivers/spi/spi-core.h:36:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#889: FILE: drivers/spi/spi-dev.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#890: FILE: drivers/spi/spi-dev.c:2:
+/*
+    spi-dev.c - spi driver, char device interface

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#905: FILE: drivers/spi/spi-dev.c:17:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#906: FILE: drivers/spi/spi-dev.c:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#920: FILE: drivers/spi/spi-dev.c:32:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#928: FILE: drivers/spi/spi-dev.c:40:
+			   loff_t * offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#930: FILE: drivers/spi/spi-dev.c:42:
+			    loff_t * offset);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#941: FILE: drivers/spi/spi-dev.c:53:
+ *
+**/

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#944: FILE: drivers/spi/spi-dev.c:56:
+	return class_device_create(spidev_class, NULL, MKDEV(SPI_MAJOR, minor), device, "spi%d", minor);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#957: FILE: drivers/spi/spi-dev.c:69:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#967: FILE: drivers/spi/spi-dev.c:79:
+			   loff_t * offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#973: FILE: drivers/spi/spi-dev.c:85:
+	if (!kbuf)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#975: FILE: drivers/spi/spi-dev.c:87:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#985: FILE: drivers/spi/spi-dev.c:97:
+			    loff_t * offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#991: FILE: drivers/spi/spi-dev.c:103:
+	if (!kbuf)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#993: FILE: drivers/spi/spi-dev.c:105:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1031: FILE: drivers/spi/spi-dev.c:143:
+	if (status == 0) {
+		status = -ENODEV;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1052: FILE: drivers/spi/spi-dev.c:164:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1052: FILE: drivers/spi/spi-dev.c:164:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {
+		goto out;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1058: FILE: drivers/spi/spi-dev.c:170:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1058: FILE: drivers/spi/spi-dev.c:170:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1084: FILE: drivers/spi/spi-thread.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1085: FILE: drivers/spi/spi-thread.c:2:
+ *  drivers/spi/spi-thread.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1106: FILE: drivers/spi/spi-thread.c:23:
+#include <asm/atomic.h>

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1117: FILE: drivers/spi/spi-thread.c:34:
+void *__spi_start_async (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1119: FILE: drivers/spi/spi-thread.c:36:
+	struct threaded_async_data *td = kmalloc (sizeof (struct threaded_async_data), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1119: FILE: drivers/spi/spi-thread.c:36:
+	struct threaded_async_data *td = kmalloc (sizeof (struct threaded_async_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*td)...) over kmalloc(sizeof (struct threaded_async_data)...)
#1119: FILE: drivers/spi/spi-thread.c:36:
+	struct threaded_async_data *td = kmalloc (sizeof (struct threaded_async_data), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1121: FILE: drivers/spi/spi-thread.c:38:
+^Iif (!td) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1130: FILE: drivers/spi/spi-thread.c:47:
+void __spi_stop_async (struct device *dev, void *ctx)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1135: FILE: drivers/spi/spi-thread.c:52:
+		atomic_inc (&td->exiting);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1154: FILE: drivers/spi/spi-thread.c:71:
+	if (atomic_read(&td->exiting)) {
+		return 1;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1187: FILE: drivers/spi/spi-thread.c:104:
+ * ^IThis function is started as separate thread to perform actual$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1188: FILE: drivers/spi/spi-thread.c:105:
+ * ^Itransfers on SPI bus$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1198: FILE: drivers/spi/spi-thread.c:115:
+	while (!kthread_should_stop()) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: drivers/spi/spi-thread.c:128:
+^I^I^Iif (!cmsg) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cmsg"
#1216: FILE: drivers/spi/spi-thread.c:133:
+			if (cmsg == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: drivers/spi/spi-thread.c:152:
+^I^I^Iif (cmsg->status) $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1261: FILE: drivers/spi/spi-thread.c:178:
+ * is provided, or transfer the message synchronously.
+**/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1275: FILE: drivers/spi/spi-thread.c:192:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1280: FILE: drivers/spi/spi-thread.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1281: FILE: drivers/spi/spi-thread.h:2:
+ *  linux/drivers/spi/spi-thread.h

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1293: FILE: drivers/spi/spi-thread.h:14:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1294: FILE: drivers/spi/spi-thread.h:15:
+static inline void *spi_start_async (struct device *dev) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1294: FILE: drivers/spi/spi-thread.h:15:
+static inline void *spi_start_async (struct device *dev) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1297: FILE: drivers/spi/spi-thread.h:18:
+extern void *__spi_start_async (struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1297: FILE: drivers/spi/spi-thread.h:18:
+extern void *__spi_start_async (struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1299: FILE: drivers/spi/spi-thread.h:20:
+#else $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1304: FILE: drivers/spi/spi-thread.h:25:
+static inline void spi_stop_async (struct device *dev, void *t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1307: FILE: drivers/spi/spi-thread.h:28:
+extern void __spi_stop_async (struct device *dev, void *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1307: FILE: drivers/spi/spi-thread.h:28:
+extern void __spi_stop_async (struct device *dev, void *t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1308: FILE: drivers/spi/spi-thread.h:29:
+	__spi_stop_async (dev, t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1317: FILE: include/linux/spi.h:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1353: FILE: include/linux/spi.h:37:
+struct spi_bus_driver {
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1354: FILE: include/linux/spi.h:38:
+^Iint ^I(*xfer) (struct spi_msg * msg);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1354: FILE: include/linux/spi.h:38:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1354: FILE: include/linux/spi.h:38:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1355: FILE: include/linux/spi.h:39:
+^Ivoid ^I(*set_clock) (struct device * bus_device, u32 clock_hz);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1355: FILE: include/linux/spi.h:39:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1355: FILE: include/linux/spi.h:39:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1356: FILE: include/linux/spi.h:40:
+^Ivoid ^I(*reset) (struct device *bus_device, u32 context);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1356: FILE: include/linux/spi.h:40:
+	void 	(*reset) (struct device *bus_device, u32 context);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1358: FILE: include/linux/spi.h:42:
+	int	(*queue) (struct spi_msg *msg);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1359: FILE: include/linux/spi.h:43:
+	void   *(*start_async)( struct device *bus);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1360: FILE: include/linux/spi.h:44:
+^Ivoid ^I(*stop_async)( struct device *bus, void *async);$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1360: FILE: include/linux/spi.h:44:
+	void 	(*stop_async)( struct device *bus, void *async);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1375: FILE: include/linux/spi.h:59:
+struct spi_driver {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1376: FILE: include/linux/spi.h:60:
+	int     (*probe)        (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1376: FILE: include/linux/spi.h:60:
+	int     (*probe)        (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1377: FILE: include/linux/spi.h:61:
+	int     (*remove)       (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1377: FILE: include/linux/spi.h:61:
+	int     (*remove)       (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1378: FILE: include/linux/spi.h:62:
+	void    (*shutdown)     (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1378: FILE: include/linux/spi.h:62:
+	void    (*shutdown)     (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1379: FILE: include/linux/spi.h:63:
+	int	(*suspend)	(struct spi_device * dev, pm_message_t pm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1379: FILE: include/linux/spi.h:63:
+	int	(*suspend)	(struct spi_device * dev, pm_message_t pm);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1380: FILE: include/linux/spi.h:64:
+^Iint ^I(*resume)^I(struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1380: FILE: include/linux/spi.h:64:
+	int 	(*resume)	(struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1380: FILE: include/linux/spi.h:64:
+	int 	(*resume)	(struct spi_device * dev);

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1393: FILE: include/linux/spi.h:77:
+#define SPI_M_CS	0x00000008	/**< CS active level at begining of frame  */
                 	          	                        ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1396: FILE: include/linux/spi.h:80:
+#define SPI_M_EXTBUF^I0x80000000    ^I/** externally allocated buffers */$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1401: FILE: include/linux/spi.h:85:
+void spimsg_set_clock (struct spi_msg* message, u32 clock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1401: FILE: include/linux/spi.h:85:
+void spimsg_set_clock (struct spi_msg* message, u32 clock);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1402: FILE: include/linux/spi.h:86:
+u32 spimsg_get_clock (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1402: FILE: include/linux/spi.h:86:
+u32 spimsg_get_clock (struct spi_msg* message);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1403: FILE: include/linux/spi.h:87:
+u32 spimsg_get_flags (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1403: FILE: include/linux/spi.h:87:
+u32 spimsg_get_flags (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1404: FILE: include/linux/spi.h:88:
+u32 spimsg_get_len (struct spi_msg *message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1405: FILE: include/linux/spi.h:89:
+u32 spimsg_get_buffer (struct spi_msg *message, void **buffer);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1406: FILE: include/linux/spi.h:90:
+void spimsg_put_buffer (struct spi_msg *message, void *buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: include/linux/spi.h:92:
+struct spi_msg *spimsg_alloc(struct spi_device *device,
+			   struct spi_msg *link,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1412: FILE: include/linux/spi.h:96:
+			   void (*status) (struct spi_msg *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1414: FILE: include/linux/spi.h:98:
+void spimsg_free (struct spi_msg *message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1416: FILE: include/linux/spi.h:100:
+#if defined (CONFIG_SPI_CHARDEV)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1417: FILE: include/linux/spi.h:101:
+extern struct class_device *spi_class_device_create(int minor, struct device *device);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1418: FILE: include/linux/spi.h:102:
+extern void spi_class_device_destroy(struct class_device *cdev);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1424: FILE: include/linux/spi.h:108:
+}
+static inline void  spi_class_device_destroy(struct class_device *cdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1439: FILE: include/linux/spi.h:123:
+#if defined (CONFIG_SPI_CHARDEV)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1440: FILE: include/linux/spi.h:124:
+extern int __init spidev_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1441: FILE: include/linux/spi.h:125:
+extern void __exit spidev_cleanup(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1447: FILE: include/linux/spi.h:131:
+}
+static inline void spidev_cleanup(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1452: FILE: include/linux/spi.h:136:
+static inline int spi_bus_driver_register (struct spi_bus_driver *bus_driver)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1454: FILE: include/linux/spi.h:138:
+	return driver_register (&bus_driver->driver);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1459: FILE: include/linux/spi.h:143:
+struct spi_device* spi_device_add(struct device *parent, char *name, void *private);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1461: FILE: include/linux/spi.h:145:
+extern int spi_driver_add(struct spi_driver *drv);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1468: FILE: include/linux/spi.h:152:
+extern void spi_bus_reset(struct device* bus, u32 context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1468: FILE: include/linux/spi.h:152:
+extern void spi_bus_reset(struct device* bus, u32 context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1469: FILE: include/linux/spi.h:153:
+extern int spi_write(struct spi_device *dev, u32 flags, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1470: FILE: include/linux/spi.h:154:
+extern int spi_read(struct spi_device *dev, u32 flags, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1472: FILE: include/linux/spi.h:156:
+extern int spi_queue(struct spi_msg *message);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: include/linux/spi.h:157:
+extern int spi_transfer(struct spi_msg *message,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1474: FILE: include/linux/spi.h:158:
+			void (*status) (struct spi_msg *, int));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1476: FILE: include/linux/spi.h:160:
+	char* name;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1477: FILE: include/linux/spi.h:161:
+	void* params;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1479: FILE: include/linux/spi.h:163:
+};
+extern int spi_bus_populate(struct device *parent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1479: FILE: include/linux/spi.h:163:
+extern int spi_bus_populate(struct device *parent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1480: FILE: include/linux/spi.h:164:
+extern int spi_bus_populate(struct device *parent,
+			     struct spi_device_desc *devices,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1481: FILE: include/linux/spi.h:165:
+			     void (*assign) (struct device *parent,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1482: FILE: include/linux/spi.h:166:
+^I^I^I^I             struct spi_device *,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1482: FILE: include/linux/spi.h:166:
+			     void (*assign) (struct device *parent,
+				             struct spi_device *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000128660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 118 warnings, 41 checks, 1367 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000128660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
