WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
- add a helper CREATE_SEQ_ENTRY() similar to CREATE_ENTRY() (both are removed

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#54: FILE: net/atm/proc.c:69:
+static void add_stats(struct seq_file *seq, const char *aal,
   const struct k_atm_aal_stats *stats)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#58: FILE: net/atm/proc.c:72:
+	seq_printf(seq, "%s ( %d %d %d %d %d )", aal,
 	    atomic_read(&stats->tx),atomic_read(&stats->tx_err),

WARNING:INLINE: plain inline is preferred over __inline__
#98: FILE: net/atm/proc.c:305:
+static __inline__ void *dev_get_idx(struct seq_file *seq, loff_t left)

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: net/atm/proc.c:318:
+ ^Ispin_lock(&atm_dev_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: net/atm/proc.c:318:
+ ^Ispin_lock(&atm_dev_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: net/atm/proc.c:318:
+ ^Ispin_lock(&atm_dev_lock);$

CHECK:SPACING: No space is necessary after a cast
#128: FILE: net/atm/proc.c:319:
+	return *pos ? dev_get_idx(seq, *pos) : (void *) 1;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: net/atm/proc.c:324:
+ ^Ispin_unlock(&atm_dev_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#133: FILE: net/atm/proc.c:324:
+ ^Ispin_unlock(&atm_dev_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: net/atm/proc.c:324:
+ ^Ispin_unlock(&atm_dev_lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: net/atm/proc.c:326:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: net/atm/proc.c:326:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: net/atm/proc.c:333:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: net/atm/proc.c:333:
+ $

WARNING:SPLIT_STRING: quoted string split across lines
#147: FILE: net/atm/proc.c:338:
+		"Itf Type    ESI/\"MAC\"addr "
+		"AAL(TX,err,RX,err,drop) ...               [refcnt]\n";

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: net/atm/proc.c:339:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: net/atm/proc.c:339:
+ $

CHECK:BRACES: braces {} should be used on all arms of this statement
#149: FILE: net/atm/proc.c:340:
+	if (v == (void *)1)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#151: FILE: net/atm/proc.c:342:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: net/atm/proc.c:347:
+ ^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: net/atm/proc.c:347:
+ ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: net/atm/proc.c:347:
+ ^Ireturn 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: net/atm/proc.c:349:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: net/atm/proc.c:349:
+ $

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#159: FILE: net/atm/proc.c:350:
+static struct seq_operations atm_devices_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: net/atm/proc.c:356:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: net/atm/proc.c:356:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: net/atm/proc.c:361:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: net/atm/proc.c:361:
+ $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#171: FILE: net/atm/proc.c:362:
+static struct file_operations atm_seq_devices_fops = {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#185: FILE: net/atm/proc.c:665:
+#define CREATE_SEQ_ENTRY(name) \
+	do { \
+		name = create_proc_entry(#name, S_IRUGO, atm_proc_root); \
+		if (!name) \
+			goto cleanup; \
+		name->proc_fops = &atm_seq_##name##_fops; \
+		name->owner = THIS_MODULE; \
+	} while (0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#187: FILE: net/atm/proc.c:667:
+		name = create_proc_entry(#name, S_IRUGO, atm_proc_root); \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 18 warnings, 6 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
