WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
>    that will never be set through the Linux interfaces.  Again see the DMA

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#   2004/08/11 16:13:14-05:00 pfg@sgi.com 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#   This set of new files supports 2 of our 3 PCI Bridges, PIC and TIOCP.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#   pcibr_dma.c is new and provides the PCI DMA Mapping routines.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#   pcibr_sal_interfaces.c is new and provides the SAL Interfaces.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#   pcibr_provider.c is new and defines the Chipset specific Provider Tables.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#   2004/08/11 16:09:28-05:00 pfg@sgi.com +134 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#   2004/08/11 16:09:27-05:00 pfg@sgi.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#   BitKeeper file /work.attica2/pfg/Linux/2.5-BK/to-base-2.6/arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# arch/ia64/sn/ioif/pci/pcibr_provider.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#   2004/08/11 16:09:26-05:00 pfg@sgi.com +182 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# arch/ia64/sn/ioif/pci/pcibr_provider.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#   2004/08/11 16:09:26-05:00 pfg@sgi.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#   BitKeeper file /work.attica2/pfg/Linux/2.5-BK/to-base-2.6/arch/ia64/sn/ioif/pci/pcibr_provider.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# arch/ia64/sn/ioif/pci/pcibr_dma.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#   2004/08/11 16:09:24-05:00 pfg@sgi.com +729 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# arch/ia64/sn/ioif/pci/pcibr_dma.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#   2004/08/11 16:09:24-05:00 pfg@sgi.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#   BitKeeper file /work.attica2/pfg/Linux/2.5-BK/to-base-2.6/arch/ia64/sn/ioif/pci/pcibr_dma.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# arch/ia64/sn/ioif/pci/Makefile

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#   2004/08/11 16:09:23-05:00 pfg@sgi.com +14 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# arch/ia64/sn/ioif/pci/Makefile

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#   2004/08/11 16:09:23-05:00 pfg@sgi.com +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#   BitKeeper file /work.attica2/pfg/Linux/2.5-BK/to-base-2.6/arch/ia64/sn/ioif/pci/Makefile

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#74: 
#   BitKeeper file /work.attica2/pfg/Linux/2.5-BK/to-base-2.6/arch/ia64/sn/ioif/pci/Makefile

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:30:
+/* pcibr_try_set_device: attempt to modify Device(x) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#137: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:40:
+		     uint8_t internal_device, uint32_t flags, uint64_t mask)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#140: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:43:
+	uint64_t old;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#141: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:44:
+	uint64_t new;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#142: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:45:
+	uint64_t chg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#143: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:46:
+	uint64_t bad;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#144: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:47:
+	uint64_t badpmu;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#145: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:48:
+	uint64_t badd32;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#146: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:49:
+	uint64_t badd64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#147: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:50:
+	uint64_t fix;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#148: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:51:
+	uint64_t s;

WARNING:TYPO_SPELLING: 'altho' may be misspelled - perhaps 'although'?
#170: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:73:
+	 * pcibr_endian_set -- altho note that
 	                       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#194: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:97:
+		    |PCIBR_DEV_PREF;	/* prefetch on */
 		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:ExO)
#198: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:101:
+		       &~PCIBR_DEV_DIR_WRGA_EN)	/* write gather off */
 		       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#199: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:102:
+		    |PCIBR_DEV_BARRIER;	/* barrier on */
 		    ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#272: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:175:
+	if (chg) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#279: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:182:
+		if (bad) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#287: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:190:
+			if ((fix = bad & (PCIBR_DEV_PRECISE |

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#302: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:205:
+			if ((fix = bad & (PCIBR_DEV_DIR_WRGA_EN |

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pcibr_try_set_device', this function's name, in a string
#318: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:221:
+					     "pcibr_try_set_device: mod blocked by 0x%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pcibr_try_set_device', this function's name, in a string
#349: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:252:
+		     "pcibr_try_set_device: Device(%d): 0x%x\n", slot, new));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#358: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:261:
+	uint64_t s;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:284:
+ *      including transfer attributes), and via a "mapped" region that allows $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#395: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:298:
+static uint64_t pcibr_flags_to_d64(uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#398: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:301:
+	uint64_t attributes = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:352:
+	if (IS_PCIX(pcibus_info)) {
+		attributes &= (PCI64_ATTR_BAR | PCI64_ATTR_SWAP);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:360:
+pcibr_dmamap_ate32(struct pcidev_info * info,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#458: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:361:
+		   uint64_t paddr, size_t req_size, uint32_t flags)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#460: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:363:
+{
+

CHECK:SPACING: No space is necessary after a cast
#462: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:365:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#462: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:365:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pcidev_info->pdi_pcibus_info'
#463: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:366:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->
+						pdi_pcibus_info;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#464: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:367:
+	uint8_t internal_device;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#467: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:370:
+	uint64_t ate_proto;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#468: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:371:
+	uint64_t ate;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#469: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:372:
+	uint64_t pci_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#470: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:373:
+	uint64_t xio_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#471: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:374:
+	uint64_t offset;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#474: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:377:
+	if (IS_PIC_SOFT(pcibus_info) && IS_PCIX(pcibus_info)) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:383:
+^Iif (pcibr_try_set_device(pcibus_info, internal_device, flags, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:384:
+	if (pcibr_try_set_device(pcibus_info, internal_device, flags, 
+		PCIBR_DEV_PMU_BITS)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#497: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:400:
+				 +req_size	/* max mapping bytes */
 				 ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#519: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:422:
+	if (IS_PIC_SOFT(pcibus_info)) {
+		ate |= (pcibus_info->pbi_hub_xid << PIC_ATE_TARGETID_SHFT);
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:444:
+		     "pcibr_dmamap_addr (PMU) : wanted paddr "
+		     "[0x%lx..0x%lx] returning PCI 0x%lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#562: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:465:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#564: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:467:
+	uint64_t pci_addr;

CHECK:SPACING: No space is necessary after a cast
#583: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:486:
+		    ((uint64_t) pcibus_info->pbi_hub_xid << PIC_PCI64_ATTR_TARG_SHFT);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#585: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:488:
+		if (flags & PCIBR_PEER_PIO) {
[...]
+		} else {
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#594: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:497:
+		     "pcibr_dmatrans_addr:  wanted paddr 0x%lx, "
+		     "direct64: pci_addr=0x%lx, "

CHECK:SPACING: No space is necessary after a cast
#595: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:498:
+		     "new flags: 0x%x\n", paddr, pci_addr, (uint64_t) flags));

WARNING:SPLIT_STRING: quoted string split across lines
#595: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:498:
+		     "direct64: pci_addr=0x%lx, "
+		     "new flags: 0x%x\n", paddr, pci_addr, (uint64_t) flags));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#599: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:502:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#602: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:505:
+pcibr_dmatrans_direct32(struct pcidev_info * info,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#603: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:506:
+			uint64_t paddr, size_t req_size, uint32_t flags)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#605: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:508:
+{
+

CHECK:SPACING: No space is necessary after a cast
#607: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:510:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#607: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:510:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pcidev_info->pdi_pcibus_info'
#608: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:511:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->
+						pdi_pcibus_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#609: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:512:
+	uint8_t internal_device = pcidev_info->pdi_internal_dev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:513:
+	struct pcibus_slot * slotp = &pcibus_info->pbi_slot[internal_device];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#613: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:516:
+	uint64_t xio_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#614: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:517:
+	uint64_t pci_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#617: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:520:
+	uint64_t xio_base;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#618: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:521:
+	uint64_t offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#619: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:522:
+	uint64_t endoff;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#622: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:525:
+	if (IS_PCIX(pcibus_info)) {
+		return 0;
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req_size > map_size'
#642: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:545:
+	if ((req_size > map_size) ||	/* Too Big */
+	    (xio_addr < xio_base) ||	/* Out of range for mappings */
+	    (xio_port != pcibus_info->pbi_dir_xport) ||	/* Wrong XIO Port */
+	    (endoff > map_size)) {	/* Too Big */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xio_addr < xio_base'
#642: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:545:
+	if ((req_size > map_size) ||	/* Too Big */
+	    (xio_addr < xio_base) ||	/* Out of range for mappings */
+	    (xio_port != pcibus_info->pbi_dir_xport) ||	/* Wrong XIO Port */
+	    (endoff > map_size)) {	/* Too Big */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xio_port != pcibus_info->pbi_dir_xport'
#642: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:545:
+	if ((req_size > map_size) ||	/* Too Big */
+	    (xio_addr < xio_base) ||	/* Out of range for mappings */
+	    (xio_port != pcibus_info->pbi_dir_xport) ||	/* Wrong XIO Port */
+	    (endoff > map_size)) {	/* Too Big */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'endoff > map_size'
#642: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:545:
+	if ((req_size > map_size) ||	/* Too Big */
+	    (xio_addr < xio_base) ||	/* Out of range for mappings */
+	    (xio_port != pcibus_info->pbi_dir_xport) ||	/* Wrong XIO Port */
+	    (endoff > map_size)) {	/* Too Big */

WARNING:SPLIT_STRING: quoted string split across lines
#648: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:551:
+			     "pcibr_dmatrans_addr:  wanted paddr [0x%lx..0x%lx], "
+			     "xio_port=0x%x, xio region outside direct32 target\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:557:
+^I * Check for the normal case where all the conditions are the same $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pci_addr != 0xFFFFFFFF'
#658: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:561:
+	if ((pci_addr != 0xFFFFFFFF) && (flags == slotp->d32_flags)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flags == slotp->d32_flags'
#658: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:561:
+	if ((pci_addr != 0xFFFFFFFF) && (flags == slotp->d32_flags)) {

WARNING:SPLIT_STRING: quoted string split across lines
#663: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:566:
+			     "pcibr_dmatrans_addr:  wanted paddr [0x%lx..0x%lx],"
+			     " xio_port=0x%x, direct32: pci_addr=0x%lx\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#671: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:574:
+	    (pcibus_info, internal_device, flags, PCIBR_DEV_D32_BITS)) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#679: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:582:
+			     "pcibr_dmatrans_addr:  wanted paddr [0x%lx..0x%lx],"
+			     " xio_port=0x%x, direct32: pci_addr=0x%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#680: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:583:
+			     " xio_port=0x%x, direct32: pci_addr=0x%lx, "
+			     "new flags: 0x%x\n", paddr, paddr + req_size - 1,

CHECK:SPACING: No space is necessary after a cast
#681: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:584:
+			     xio_addr, pci_addr, (uint64_t) flags));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#688: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:591:
+
+}

CHECK:SPACING: No space is necessary after a cast
#698: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:601:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#698: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:601:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pcidev_info->pdi_pcibus_info'
#699: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:602:
+	struct pcibus_info * pcibus_info = (struct pcibus_info *) pcidev_info->
+						pdi_pcibus_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#700: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:603:
+	uint8_t internal_device = pcidev_info->pdi_internal_dev;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:609:
+^I^Ipcibr_release_device(pcibus_info, internal_device, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:610:
+		pcibr_release_device(pcibus_info, internal_device, 
+			PCIBR_DEV_D32_BITS);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:612:
+^I^Ipcibr_release_device(pcibus_info, internal_device, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:613:
+		pcibr_release_device(pcibus_info, internal_device, 
+			PCIBR_DEV_D64_BITS);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:619:
+ * On SN systems there is a race condition between a PIO read response and $

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#723: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:626:
+ * the interrupt is targetted to.  When the interrupt response arrives, we 
                     ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:626:
+ * the interrupt is targetted to.  When the interrupt response arrives, we $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:628:
+ * to proceed.^IFor TIOCP use the Device(x) Write Request Buffer Flush $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#736: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:639:
+	uint64_t flags;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#738: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:641:
+	volatile struct sn_flush_device_list *p;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#744: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:647:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!flush_nasid_list->widget_p"
#756: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:659:
+	if (flush_nasid_list->widget_p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#759: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:662:
+		uint64_t itte = flush_nasid_list->iio_itte[bwin];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!flush_nasid_list->widget_p"
#769: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:672:
+	if (flush_nasid_list->widget_p == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!flush_nasid_list->widget_p[wid_num]"
#771: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:674:
+	if (flush_nasid_list->widget_p[wid_num] == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:684:
+			if (addr >= p->sfdl_bar_list[j].start
+			    && addr <= p->sfdl_bar_list[j].end)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#799: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:702:
+		uint32_t tio_id = REMOTE_HUB_L(nasid, TIO_NODE_ID);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#800: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:703:
+		uint32_t revnum = XWIDGET_PART_REV_NUM(tio_id);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#803: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:706:
+		if ((1 << XWIDGET_PART_REV_NUM_REV(revnum)) & PV907516) {
[...]
+		} else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#805: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:708:
+			return;
+		} else {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#815: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:718:
+		*(volatile uint32_t *)(p->sfdl_force_int_addr) = 1;

WARNING:SPACING: space prohibited before semicolon
#818: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:721:
+		while (*(p->sfdl_flush_addr) != 0x10f) ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->sfdl_flush_addr
#818: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:721:
+		while (*(p->sfdl_flush_addr) != 0x10f) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#818: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:721:
+		while (*(p->sfdl_flush_addr) != 0x10f) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:RETURN_VOID: void function return statements are not generally useful
#824: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:727:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#826: FILE: arch/ia64/sn/ioif/pci/pcibr_dma.c:729:
+EXPORT_SYMBOL(sn_dma_flush);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#831: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#855: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:25:
+
+

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0x00000000
#866: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:36:
+uint32_t pcibr_debug_mask = 0x00000000;	/* 0x00000000 to disable */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#866: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:36:
+uint32_t pcibr_debug_mask = 0x00000000;	/* 0x00000000 to disable */

CHECK:SPACING: No space is necessary after a cast
#875: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:45:
+	(pcibus_dmatrans_direct64_f *) pcibr_dmatrans_direct64,

CHECK:SPACING: No space is necessary after a cast
#876: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:46:
+	(pcibus_dmatrans_direct32_f *) pcibr_dmatrans_direct32,

CHECK:SPACING: No space is necessary after a cast
#877: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:47:
+	(pcibus_dma_unmap_f *) pcibr_dma_unmap,

CHECK:SPACING: No space is necessary after a cast
#878: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:48:
+	(pcibus_dmamap_ate32_f *) pcibr_dmamap_ate32,

CHECK:SPACING: No space is necessary after a cast
#880: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:50:
+	(pcibus_rrb_alloc_f *) sal_pcibr_rrb_alloc,

CHECK:SPACING: No space is necessary after a cast
#882: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:52:
+	(pcibus_endian_set_f *) sal_pcibr_endian_set,

CHECK:SPACING: No space is necessary after a cast
#883: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:53:
+	(pcibus_error_interrupt_f *) sal_pcibr_error_interrupt,

CHECK:SPACING: No space is necessary after a cast
#885: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:55:
+	(pcibus_safe_read_addr_f *) sal_pcibr_safe_read_addr,

CHECK:SPACING: No space is necessary after a cast
#886: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:56:
+	(pcibus_safe_write_addr_f *) sal_pcibr_safe_write_addr,

CHECK:SPACING: No space is necessary after a cast
#888: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:58:
+	(pcibus_slot_enable_f *) sal_pcibr_slot_enable,

CHECK:SPACING: No space is necessary after a cast
#889: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:59:
+	(pcibus_slot_disable_f *) sal_pcibr_slot_disable,

CHECK:SPACING: No space is necessary after a cast
#895: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:65:
+	(pcibus_dmatrans_direct64_f *) pcibr_dmatrans_direct64,

CHECK:SPACING: No space is necessary after a cast
#896: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:66:
+	(pcibus_dmatrans_direct32_f *) pcibr_dmatrans_direct32,

CHECK:SPACING: No space is necessary after a cast
#897: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:67:
+	(pcibus_dma_unmap_f *) pcibr_dma_unmap,

CHECK:SPACING: No space is necessary after a cast
#898: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:68:
+	(pcibus_dmamap_ate32_f *) pcibr_dmamap_ate32,

CHECK:SPACING: No space is necessary after a cast
#900: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:70:
+	(pcibus_rrb_alloc_f *) sal_pcibr_rrb_alloc,

CHECK:SPACING: No space is necessary after a cast
#902: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:72:
+	(pcibus_endian_set_f *) sal_pcibr_endian_set,

CHECK:SPACING: No space is necessary after a cast
#903: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:73:
+	(pcibus_error_interrupt_f *) sal_pcibr_error_interrupt,

CHECK:SPACING: No space is necessary after a cast
#905: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:75:
+	(pcibus_safe_read_addr_f *) sal_pcibr_safe_read_addr,

CHECK:SPACING: No space is necessary after a cast
#906: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:76:
+	(pcibus_safe_write_addr_f *) sal_pcibr_safe_write_addr,

CHECK:SPACING: No space is necessary after a cast
#908: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:78:
+	(pcibus_slot_enable_f *) sal_pcibr_slot_enable,

CHECK:SPACING: No space is necessary after a cast
#909: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:79:
+	(pcibus_slot_disable_f *) sal_pcibr_slot_disable,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#930: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:100:
+void pcibr_debug(uint32_t type, void *ptr, char *format, ...)

CHECK:SPACING: No space is necessary after a cast
#950: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:120:
+				    (struct pcibus_info *) pcidev_info->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pcidev_info->pdi_pcibus_info'
#951: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:121:
+				    (struct pcibus_info *) pcidev_info->
+						pdi_pcibus_info;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr == NULL'
#965: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:135:
+		if ((ptr == NULL) ||
+		    ((pcibr_debug_bus == -1 || pcibr_debug_bus == bus) &&
+		     (pcibr_debug_slot == -1 || pcibr_debug_slot == slot) &&
+		     (pcibr_debug_func == -1 || pcibr_debug_func == func) &&
+		     (!strcmp("all", pcibr_debug_module) ||
+		      (!strcmp(module, pcibr_debug_module))))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#965: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:135:
+		if ((ptr == NULL) ||

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#971: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:141:
+		      (!strcmp(module, pcibr_debug_module))))) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#975: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:145:
+			printk("PCIBR_DEBUG: <%s>:%02d:%02d:%02d:\t", module,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#979: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:149:
+			printk(buffer);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#987: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:157:
+{
+

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#995: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:165:
+	 * initalize the xwidget_info's provider table
 	   ^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#997: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:167:
+	if (IS_PIC_SOFT(soft)) {
[...]
+	} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:173:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:174:
+^I * Update the Bridge with the "kernel" pagesize $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1006: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:176:
+	if (PAGE_SIZE < 16384) {
[...]
+	} else {
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1012: FILE: arch/ia64/sn/ioif/pci/pcibr_provider.c:182:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1017: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1036: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:20:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1038: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:22:
+	uint64_t busnum, devfn;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1039: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:23:
+	uint64_t busnum, devfn;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1044: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:28:
+	SAL_CALL_NOLOCK(ret_stuff, (u64) SN_SAL_PCIIO,

CHECK:SPACING: No space is necessary after a cast
#1045: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:29:
+			(u64) PCIIO_CALL_RRB_ALLOC,

CHECK:SPACING: No space is necessary after a cast
#1046: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:30:
+			(u64) busnum, (u64)devfn, (u64) count_vchan0,

CHECK:SPACING: No space is necessary after a cast
#1047: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:31:
+			(u64) count_vchan1, (u64) 0, 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1055: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:39:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1057: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:41:
+	uint64_t busnum, devfn;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1058: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:42:
+	uint64_t busnum, devfn;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1063: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:47:
+	SAL_CALL_NOLOCK(ret_stuff, (u64) SN_SAL_PCIIO,

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:48:
+			(u64) PCIIO_CALL_ENDIAN_SET,

CHECK:SPACING: No space is necessary after a cast
#1065: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:49:
+			(u64) busnum, (u64)devfn,

CHECK:SPACING: No space is necessary after a cast
#1066: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:50:
+			(u64) device_end, (u64) desired_end, 0, 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1074: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:58:
+	uint64_t busnum;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1075: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:59:
+	uint64_t busnum;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:63:
+	SAL_CALL_NOLOCK(ret_stuff, (u64) SN_SAL_PCIIO,

CHECK:SPACING: No space is necessary after a cast
#1080: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:64:
+			(u64) PCIIO_CALL_SLOT_ENABLE,

CHECK:SPACING: No space is necessary after a cast
#1081: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:65:
+			(u64) busnum, (u64) slot_info, 0, 0, 0, 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1089: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:73:
+	uint64_t busnum;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1090: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:74:
+	uint64_t busnum;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1094: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:78:
+	SAL_CALL_NOLOCK(ret_stuff, (u64) SN_SAL_PCIIO,

CHECK:SPACING: No space is necessary after a cast
#1095: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:79:
+			(u64) PCIIO_CALL_SLOT_DISABLE,

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:80:
+			(u64) busnum, (u64) slot_info, 0, 0, 0, 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1104: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:88:
+	uint64_t busnum;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1105: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:89:
+	uint64_t busnum;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1109: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:93:
+	SAL_CALL_NOLOCK(ret_stuff, (u64) SN_SAL_PCIIO,

CHECK:SPACING: No space is necessary after a cast
#1110: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:94:
+			(u64) PCIIO_CALL_ERROR_INTERRUPT,

CHECK:SPACING: No space is necessary after a cast
#1111: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:95:
+			(u64) busnum, 0, 0, 0, 0, 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1119: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:103:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1121: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:105:
+	uint64_t busnum, devfn;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1122: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:106:
+	uint64_t busnum, devfn;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1128: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:112:
+			(u64) busnum, (u64) devfn,

CHECK:SPACING: No space is necessary after a cast
#1129: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:113:
+			(u64) from, (u64) length, (u64) to, 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1137: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:121:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1139: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:123:
+	uint64_t busnum, devfn;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1140: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:124:
+	uint64_t busnum, devfn;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1146: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:130:
+			(u64) busnum, (u64) devfn,

CHECK:SPACING: No space is necessary after a cast
#1147: FILE: arch/ia64/sn/ioif/pci/pcibr_sal_interfaces.c:131:
+			(u64) to, (u64) length, (u64) data, 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261073.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 84 warnings, 128 checks, 1059 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261073.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
