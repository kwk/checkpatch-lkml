WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal working-2.4.14-params/include/linux/kmod.h working-2.4.14-kmod-used/include/linux/kmod.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#73: FILE: include/linux/kmod.h:27:
+/* ISO C99 would allow a request_module_once() macro like
+   list_for_each, by declaring the var in the for().  Soon, soon... --RR */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#73: FILE: include/linux/kmod.h:27:
+   list_for_each, by declaring the var in the for().  Soon, soon... --RR */

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#79: FILE: include/linux/kmod.h:33:
+	for (__r = 0; __r < 2; __r++ ?: request_module(format , ## arg)) {
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#80: FILE: include/linux/kmod.h:34:
+	for (__r = 0; __r < 2; __r++ ?: request_module(format , ## arg)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#82: FILE: include/linux/kmod.h:36:
+#define request_module_end(cond) if (cond) break; } } while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#82: FILE: include/linux/kmod.h:36:
+#define request_module_end(cond) if (cond) break; } } while(0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cond' - possible side-effects?
#85: FILE: include/linux/kmod.h:39:
+#define request_module_unless(cond, format, arg...)		\
+({ if (!cond) request_module(format , ## arg); (cond); })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cond' may be better as '(cond)' to avoid precedence issues
#85: FILE: include/linux/kmod.h:39:
+#define request_module_unless(cond, format, arg...)		\
+({ if (!cond) request_module(format , ## arg); (cond); })

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#86: FILE: include/linux/kmod.h:40:
+({ if (!cond) request_module(format , ## arg); (cond); })
                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#89: FILE: include/linux/kmod.h:43:
+/* Request a module (returns 0 on success, -errno otherwise).  Keep
+   name << a page please! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#89: FILE: include/linux/kmod.h:43:
+   name << a page please! */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: include/linux/kmod.h:44:
+int request_module(const char *format, ...) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#91: FILE: include/linux/kmod.h:45:
+__attribute__ ((format (printf, 1, 2)));

ERROR:SPACING: space required before the open parenthesis '('
#96: FILE: include/linux/kmod.h:50:
+#define request_module_end(cond) while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: include/linux/kmod.h:53:
+static inline int request_module(const char *format, ...) $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#100: FILE: include/linux/kmod.h:54:
+__attribute__ ((format (printf, 1, 2)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: include/linux/kmod.h:56:
+static inline int request_module(const char * name, ...) { return -ENOSYS; }

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#102: FILE: include/linux/kmod.h:56:
+static inline int request_module(const char * name, ...) { return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: kernel/kmod.c:244:
+ * becomes a no-operation.  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: kernel/kmod.c:251:
+^Iif (!current->fs->root) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: kernel/kmod.c:262:
+		char module[namelen + 1];
+		vsprintf(module, format, args);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000492397.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 10 warnings, 3 checks, 126 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000492397.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
