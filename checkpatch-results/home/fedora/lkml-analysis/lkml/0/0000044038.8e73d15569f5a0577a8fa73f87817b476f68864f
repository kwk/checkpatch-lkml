WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Move some functions out of the buffering code that aren't strictly buffering

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#49: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#339: FILE: fs/sync.c:33:
+		printk("Emergency Sync complete\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#358: FILE: fs/sync.c:52:
+ * filp may be NULL if called via the msync of a vma.
    ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#360: FILE: fs/sync.c:54:
+int file_fsync(struct file *filp, struct dentry *dentry, int datasync)
                             ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: fs/sync.c:56:
+	struct inode * inode = dentry->d_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: fs/sync.c:57:
+	struct super_block * sb;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/linux/buffer_head.h:303:
+extern int __set_page_dirty_buffers(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#468: FILE: include/linux/fs.h:1544:
+extern void __fsync_super(struct super_block *sb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: include/linux/mm.h:769:
+extern int try_to_release_page(struct page * page, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: include/linux/mm.h:769:
+extern int try_to_release_page(struct page * page, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#482: FILE: include/linux/mm.h:770:
+extern void do_invalidatepage(struct page *page, unsigned long offset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: mm/filemap.c:2497:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#524: FILE: mm/filemap.c:2506:
+EXPORT_SYMBOL(try_to_release_page);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#561: FILE: mm/truncate.c:35:
+	void (*invalidatepage)(struct page *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#561: FILE: mm/truncate.c:35:
+	void (*invalidatepage)(struct page *, unsigned long);

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: mm/truncate.c:36:
+	void (*invalidatepage)(struct page *, unsigned long);
+	invalidatepage = page->mapping->a_ops->invalidatepage;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 10 warnings, 4 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
