WARNING:TYPO_SPELLING: 'strcture' may be misspelled - perhaps 'structure'?
#35: 
to the uprobe_table hash list. A uprobe_module data strcture
                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -puN include/linux/kprobes.h~kprobes_userspace_probes-base-interface include/linux/kprobes.h

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#100: FILE: include/linux/kprobes.h:144:
+	struct nameidata nd;
 	                 ^^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#102: FILE: include/linux/kprobes.h:146:
+	struct address_space_operations *ori_a_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#104: FILE: include/linux/kprobes.h:148:
+	struct address_space_operations user_a_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/kprobes.h:196:
+extern void copy_kprobe(struct kprobe *old_p, struct kprobe *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/kprobes.h:197:
+extern int arch_copy_uprobe(struct kprobe *p, kprobe_opcode_t *address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/kprobes.h:198:
+extern void arch_arm_uprobe(kprobe_opcode_t *address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/kprobes.h:199:
+extern void arch_disarm_uprobe(struct kprobe *p, kprobe_opcode_t *address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/kprobes.h:200:
+extern void init_uprobes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/kprobes.h:205:
+extern int arch_alloc_insn(struct kprobe *p);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: kernel/uprobes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#160: FILE: kernel/uprobes.c:3:
+ *  kernel/uprobes.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#173: FILE: kernel/uprobes.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#174: FILE: kernel/uprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#189: FILE: kernel/uprobes.c:32:
+#include <asm/cacheflush.h>

WARNING:INCLUDE_LINUX: Use #include <linux/kdebug.h> instead of <asm/kdebug.h>
#191: FILE: kernel/uprobes.c:34:
+#include <asm/kdebug.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#194: FILE: kernel/uprobes.c:37:
+#define UPROBE_TABLE_SIZE (1 << UPROBE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/uprobes.c:50:
+static int __kprobes aggr_user_pre_handler(struct kprobe *p,
+							 struct pt_regs *regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: kernel/uprobes.c:65:
+static void __kprobes aggr_user_post_handler(struct kprobe *p,
+				struct pt_regs *regs, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: kernel/uprobes.c:78:
+static int __kprobes aggr_user_fault_handler(struct kprobe *p,
+					struct pt_regs *regs, int trapnr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: kernel/uprobes.c:99:
+static struct kprobe __kprobes *get_kprobe_user(struct inode *inode,
+							unsigned long offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#267: FILE: kernel/uprobes.c:110:
+		if (p->pre_handler == aggr_user_pre_handler) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#270: FILE: kernel/uprobes.c:113:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'uprobe->inode == inode'
#273: FILE: kernel/uprobes.c:116:
+		if ((uprobe->inode == inode) && (uprobe->offset == offset))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'uprobe->offset == offset'
#273: FILE: kernel/uprobes.c:116:
+		if ((uprobe->inode == inode) && (uprobe->offset == offset))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: kernel/uprobes.c:138:
+	BUG_ON(!vma);	/* this should not happen, not in our memory map */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#308: FILE: kernel/uprobes.c:151:
+	if (p->pre_handler == aggr_user_pre_handler) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'firt' may be misspelled - perhaps 'first'?
#310: FILE: kernel/uprobes.c:153:
+		 * Walk the uprobe aggregate list and return firt
 		                                             ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#315: FILE: kernel/uprobes.c:158:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ap)...) over kzalloc(sizeof(struct kprobe)...)
#355: FILE: kernel/uprobes.c:198:
+		ap = kzalloc(sizeof(struct kprobe), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: kernel/uprobes.c:216:
+int __kprobes insert_kprobe_user(struct uprobe *uprobe,
+				kprobe_opcode_t *address)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: kernel/uprobes.c:222:
+		printk("Breakpoint already present\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: kernel/uprobes.c:283:
+			flush_icache_user_range(vma, page,
+					(unsigned long)uprobe->kp.addr,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#455: FILE: kernel/uprobes.c:298:
+		if (umodule->nd.dentry->d_inode == inode)
 		             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: kernel/uprobes.c:329:
+static void __kprobes get_inode_ops(struct uprobe *uprobe,
+				   struct uprobe_module *umodule)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_p == p'
#517: FILE: kernel/uprobes.c:360:
+	if ((old_p == p) ||
+			((old_p->pre_handler == aggr_user_pre_handler) &&
+			(p->list.next == &old_p->list) &&
+			(p->list.prev == &old_p->list))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_p->pre_handler == aggr_user_pre_handler'
#517: FILE: kernel/uprobes.c:360:
+	if ((old_p == p) ||
+			((old_p->pre_handler == aggr_user_pre_handler) &&
+			(p->list.next == &old_p->list) &&
+			(p->list.prev == &old_p->list))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->list.next == &old_p->list'
#517: FILE: kernel/uprobes.c:360:
+	if ((old_p == p) ||
+			((old_p->pre_handler == aggr_user_pre_handler) &&
+			(p->list.next == &old_p->list) &&
+			(p->list.prev == &old_p->list))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->list.prev == &old_p->list'
#517: FILE: kernel/uprobes.c:360:
+	if ((old_p == p) ||
+			((old_p->pre_handler == aggr_user_pre_handler) &&
+			(p->list.next == &old_p->list) &&
+			(p->list.prev == &old_p->list))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#517: FILE: kernel/uprobes.c:360:
+	if ((old_p == p) ||
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: kernel/uprobes.c:361:
+	if ((old_p == p) ||
+			((old_p->pre_handler == aggr_user_pre_handler) &&

CHECK:BRACES: Unbalanced braces around else statement
#531: FILE: kernel/uprobes.c:374:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: kernel/uprobes.c:384:
+static int __kprobes remove_kprobe_user(struct uprobe *uprobe,
+				kprobe_opcode_t *address)

CHECK:SPACING: No space is necessary after a cast
#561: FILE: kernel/uprobes.c:404:
+	unsigned long inode = (unsigned long) uprobe->inode;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#570: FILE: kernel/uprobes.c:413:
+	if (old_p)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#572: FILE: kernel/uprobes.c:415:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#613: FILE: kernel/uprobes.c:456:
+	if (!(umodule = get_module_by_inode(uprobe->inode)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#620: FILE: kernel/uprobes.c:463:
+		path_release(&umodule->nd);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#653: FILE: kernel/uprobes.c:496:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#663: FILE: kernel/uprobes.c:506:
+	if ((error = path_lookup(uprobe->pathname, LOOKUP_FOLLOW, &nd)))
 	                                                           ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#663: FILE: kernel/uprobes.c:506:
+	if ((error = path_lookup(uprobe->pathname, LOOKUP_FOLLOW, &nd)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#668: FILE: kernel/uprobes.c:511:
+	inode = nd.dentry->d_inode;
 	        ^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#679: FILE: kernel/uprobes.c:522:
+	if (!umodule) {
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*umodule)...) over kzalloc(sizeof(struct uprobe_module)...)
#688: FILE: kernel/uprobes.c:531:
+		umodule = kzalloc(sizeof(struct uprobe_module), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#695: FILE: kernel/uprobes.c:538:
+		memcpy(&umodule->nd, &nd, sizeof(struct nameidata));
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#695: FILE: kernel/uprobes.c:538:
+		memcpy(&umodule->nd, &nd, sizeof(struct nameidata));
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#698: FILE: kernel/uprobes.c:541:
+		path_release(&nd);
 		              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#725: FILE: kernel/uprobes.c:568:
+	path_release(&nd);
 	              ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#743: FILE: kernel/uprobes.c:586:
+EXPORT_SYMBOL_GPL(register_uprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#744: FILE: kernel/uprobes.c:587:
+EXPORT_SYMBOL_GPL(unregister_uprobe);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#746: FILE: kernel/uprobes.c:589:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#751: FILE: arch/i386/kernel/uprobes.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#753: FILE: arch/i386/kernel/uprobes.c:3:
+ *  arch/i386/kernel/uprobes.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#766: FILE: arch/i386/kernel/uprobes.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#767: FILE: arch/i386/kernel/uprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#780: FILE: arch/i386/kernel/uprobes.c:30:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#781: FILE: arch/i386/kernel/uprobes.c:31:
+#include <asm/kdebug.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#849: FILE: include/linux/namei.h:84:
+extern int deny_write_access_to_inode(struct inode *inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#874: FILE: fs/namei.c:340:
+int deny_write_access(struct file * file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 25 warnings, 38 checks, 806 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
