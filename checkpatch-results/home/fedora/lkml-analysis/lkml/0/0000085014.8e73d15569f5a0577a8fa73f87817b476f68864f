WARNING:TYPO_SPELLING: 'belive' may be misspelled - perhaps 'believe'?
#45: 
and this is temperature handling. I belive it should be implemented not
                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'collumns' may be misspelled - perhaps 'columns'?
#88: 
* Some lines of code exceeds the 80 collumns, codingstyle is not yet
                                    ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
* I created new directory for the class in drivers/watchdog, the Kconfig is only for testing,

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#112: 
--- a/drivers/Kconfig	2006-04-03 05:22:10.000000000 +0200

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: drivers/watchdog/class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#151: FILE: drivers/watchdog/class.c:16:
+ * published by the Free Software Foundation.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#165: FILE: drivers/watchdog/class.c:30:
+	struct watchdog_device *watchdog = to_watchdog_device(class_dev);
+	mutex_lock(&idr_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/watchdog/class.c:46:
+struct watchdog_device *_watchdog_device_register(const char *name, struct device *dev,
+					struct watchdog_class_ops *ops,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*watchdog)...) over kzalloc(sizeof(struct watchdog_device)...)
#201: FILE: drivers/watchdog/class.c:66:
+	watchdog = kzalloc(sizeof(struct watchdog_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!watchdog"
#202: FILE: drivers/watchdog/class.c:67:
+	if (watchdog == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: drivers/watchdog/class.c:88:
+		register_reboot_notifier (&watchdog->reboot_notifier);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#226: FILE: drivers/watchdog/class.c:91:
+	if (watchdog->sping_interval) {
+		init_timer(&watchdog->timer);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#231: FILE: drivers/watchdog/class.c:96:
+	strlcpy(watchdog->name, name, WATCHDOG_DEVICE_NAME_SIZE);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#235: FILE: drivers/watchdog/class.c:100:
+	strlcpy(watchdog->legacy_info.identity, name, 32);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: drivers/watchdog/class.c:111:
+	dev_info(dev, "watchdog core: registered %s as %s\n",
+			watchdog->name, watchdog->class_dev.class_id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#261: FILE: drivers/watchdog/class.c:126:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#270: FILE: drivers/watchdog/class.c:135:
+		unregister_reboot_notifier (&watchdog->reboot_notifier);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#271: FILE: drivers/watchdog/class.c:136:
+	if (watchdog->sping_interval) {
+		del_timer(&watchdog->timer);
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#280: FILE: drivers/watchdog/class.c:145:
+EXPORT_SYMBOL_GPL(watchdog_device_unregister);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: drivers/watchdog/class.c:156:
+^Iwatchdog_class = class_create(THIS_MODULE, "watchdog");^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#293: FILE: drivers/watchdog/class.c:158:
+		printk(KERN_ERR "%s: couldn't create class\n", __FILE__);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#320: FILE: drivers/watchdog/Kconfig:7:
+config WATCHDOG_CLASS
+	tristate "WATCHDOG class"
+	depends on EXPERIMENTAL
+	default n
+	help
+	  bla bla

Kconfig symbols should have a help text which fully describes
it.

WARNING:REPEATED_WORD: Possible repeated word: 'bla'
#325: FILE: drivers/watchdog/Kconfig:12:
+	  bla bla

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: drivers/watchdog/Kconfig:13:
+config WATCHDOG_INTF_DEV $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#326: FILE: drivers/watchdog/Kconfig:13:
+config WATCHDOG_INTF_DEV 
+	tristate "Watchdog /dev"
+	depends on WATCHDOG_CLASS
+	help
+	  ha ha

WARNING:REPEATED_WORD: Possible repeated word: 'ha'
#330: FILE: drivers/watchdog/Kconfig:17:
+	  ha ha

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#331: FILE: drivers/watchdog/Kconfig:18:
+config WATCHDOG_INTF_SYSFS
+	tristate "Watchdog sysfs"
+	depends on WATCHDOG_CLASS
+	help
+	  ha ha

WARNING:REPEATED_WORD: Possible repeated word: 'ha'
#335: FILE: drivers/watchdog/Kconfig:22:
+	  ha ha

WARNING:REPEATED_WORD: Possible repeated word: 'ha'
#351: FILE: drivers/watchdog/Kconfig:38:
+	  ha ha

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/watchdog/Kconfig:39:
+^I$

WARNING:REPEATED_WORD: Possible repeated word: 'ble'
#360: FILE: drivers/watchdog/Kconfig:47:
+	  ble ble

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#390: FILE: drivers/watchdog/softdog.c:1:
+/*

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#425: FILE: drivers/watchdog/softdog.c:36:
+MODULE_PARM_DESC(soft_margin, "Watchdog soft_margin in seconds. (0<soft_margin<65536, default=" __MODULE_STRING(TIMER_MARGIN) ")");

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#432: FILE: drivers/watchdog/softdog.c:43:
+static int soft_noboot = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: No space is necessary after a cast
#450: FILE: drivers/watchdog/softdog.c:61:
+	struct watchdog_device *watchdog = (struct watchdog_device *) data;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#454: FILE: drivers/watchdog/softdog.c:65:
+	else
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#456: FILE: drivers/watchdog/softdog.c:67:
+		printk(KERN_CRIT "Initiating system reboot.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#458: FILE: drivers/watchdog/softdog.c:69:
+		printk(KERN_CRIT  "Reboot didn't work. Nobody hears you cry...\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: drivers/watchdog/softdog.c:83:
+	mod_timer(&watchdog_ticktock, jiffies+(watchdog->timeout*HZ));
 	                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#472: FILE: drivers/watchdog/softdog.c:83:
+	mod_timer(&watchdog_ticktock, jiffies+(watchdog->timeout*HZ));
 	                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: drivers/watchdog/softdog.c:103:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#493: FILE: drivers/watchdog/softdog.c:104:
+	if (watchdog->nowayout) {
+ 	        __module_get(THIS_MODULE);
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: drivers/watchdog/softdog.c:105:
+ ^I        __module_get(THIS_MODULE);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#494: FILE: drivers/watchdog/softdog.c:105:
+ ^I        __module_get(THIS_MODULE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: drivers/watchdog/softdog.c:105:
+ ^I        __module_get(THIS_MODULE);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec < 0x0001'
#504: FILE: drivers/watchdog/softdog.c:115:
+	if ((sec < 0x0001) || (sec > 0xFFFF))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec > 0xFFFF'
#504: FILE: drivers/watchdog/softdog.c:115:
+	if ((sec < 0x0001) || (sec > 0xFFFF))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: drivers/watchdog/softdog.c:129:
+static int softdog_notify_sys(struct notifier_block *this, unsigned long code,
+	void *unused)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#523: FILE: drivers/watchdog/softdog.c:134:
+	if(code==SYS_DOWN || code==SYS_HALT) {
 	       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#523: FILE: drivers/watchdog/softdog.c:134:
+	if(code==SYS_DOWN || code==SYS_HALT) {
 	                         ^

ERROR:SPACING: space required before the open parenthesis '('
#523: FILE: drivers/watchdog/softdog.c:134:
+	if(code==SYS_DOWN || code==SYS_HALT) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#542: FILE: drivers/watchdog/softdog.c:153:
+static int __devinit softdog_probe(struct platform_device *dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: drivers/watchdog/softdog.c:158:
+	watchdog = watchdog_device_register_simple("softdog",
+				&dev->dev, &softdog_ops);

CHECK:SPACING: No space is necessary after a cast
#552: FILE: drivers/watchdog/softdog.c:163:
+	watchdog_ticktock.data = (unsigned long) watchdog;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#556: FILE: drivers/watchdog/softdog.c:167:
+	if (softdog_set_heartbeat(&dev->dev, soft_margin) < 0) {
+		dev_warn(&dev->dev, "soft_margin value must be 0<soft_margin<65536\n");
+	} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: drivers/watchdog/softdog.c:169:
+^I} $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#559: FILE: drivers/watchdog/softdog.c:170:
+	dev_info(&dev->dev, "Software watchdog started, timeout set to: %d seconds\n", watchdog->timeout);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#564: FILE: drivers/watchdog/softdog.c:175:
+static int __devexit softdog_remove(struct platform_device *dev)

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: drivers/watchdog/softdog.c:179:
+ ^Iif (watchdog)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#568: FILE: drivers/watchdog/softdog.c:179:
+ ^Iif (watchdog)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: drivers/watchdog/softdog.c:179:
+ ^Iif (watchdog)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: drivers/watchdog/softdog.c:181:
+ ^Idel_timer(&watchdog_ticktock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#570: FILE: drivers/watchdog/softdog.c:181:
+ ^Idel_timer(&watchdog_ticktock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: drivers/watchdog/softdog.c:181:
+ ^Idel_timer(&watchdog_ticktock);$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#585: FILE: drivers/watchdog/softdog.c:196:
+struct platform_device *softdev = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: drivers/watchdog/softdog.c:201:
+	int err = platform_driver_register(&softdog_platform_driver);
+	softdev = platform_device_alloc("softdog", 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#593: FILE: drivers/watchdog/softdog.c:204:
+		printk(KERN_ERR "softdog : Device allocation failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: drivers/watchdog/softdog.c:216:
+        platform_device_unregister(softdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: drivers/watchdog/softdog.c:216:
+        platform_device_unregister(softdev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#630: FILE: drivers/watchdog/w83792d.c:134:
+#define W83792D_PINCRT ^I^I0x4B$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#631: FILE: drivers/watchdog/w83792d.c:135:
+#define W83792D_CONFIG ^I^I0x40$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#632: FILE: drivers/watchdog/w83792d.c:136:
+#define W83792D_WDT_UNLOCK ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#633: FILE: drivers/watchdog/w83792d.c:137:
+#define W83792D_WDT_ENCHK ^I0x02$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#634: FILE: drivers/watchdog/w83792d.c:138:
+#define W83792D_WDT_STATUS ^I0x03$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#635: FILE: drivers/watchdog/w83792d.c:139:
+#define W83792D_WDT_TIMEOUT ^I0x04$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: drivers/watchdog/w83792d.c:1334:
+^I ^Iif (data->watchdog)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#662: FILE: drivers/watchdog/w83792d.c:1334:
+^I ^Iif (data->watchdog)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#676: FILE: drivers/watchdog/w83792d.c:1355:
+	u8 temp2_cfg, temp3_cfg, vid_in_b,tmp;
 	                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#685: FILE: drivers/watchdog/w83792d.c:1382:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: drivers/watchdog/w83792d.c:1384:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: drivers/watchdog/w83792d.c:1384:
+    $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/watchdog/w83792d.c:1399:
+	data->watchdog = watchdog_device_register_simple("w83792d",
+				&client->dev, &watchdog_ops);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#719: FILE: drivers/watchdog/w83792d.c:1578:
+	if (data->watchdog->timeout < 0xff*60) {
 	                                  ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#719: FILE: drivers/watchdog/w83792d.c:1578:
+	if (data->watchdog->timeout < 0xff*60) {
+		timeout += 60;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#726: FILE: drivers/watchdog/w83792d.c:1585:
+
+

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#732: FILE: drivers/watchdog/w83792d.c:1591:
+	w83792d_write_value(client, W83792D_WDT_TIMEOUT, WATCHDOG_TO_MIN(data->watchdog->timeout)); /* timeout */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#732: FILE: drivers/watchdog/w83792d.c:1591:
+	struct w83792d_data *data = i2c_get_clientdata(client);
+	w83792d_write_value(client, W83792D_WDT_TIMEOUT, WATCHDOG_TO_MIN(data->watchdog->timeout)); /* timeout */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#733: FILE: drivers/watchdog/w83792d.c:1592:
+^Iw83792d_write_value(client, W83792D_WDT_UNLOCK, 0x55); $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#737: FILE: drivers/watchdog/w83792d.c:1596:
+static int wdt_disable(struct device *dev) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: drivers/watchdog/w83792d.c:1598:
+^Iw83792d_write_value(client, W83792D_WDT_UNLOCK, 0xAA); /* disable soft watchdog */^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: drivers/watchdog/w83792d.c:1598:
+	struct i2c_client *client = to_i2c_client(dev);
+	w83792d_write_value(client, W83792D_WDT_UNLOCK, 0xAA); /* disable soft watchdog */	

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#748: FILE: drivers/watchdog/w83792d.c:1607:
+	if ((sec < 60) || (sec > 0xFF*60))
 	                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec < 60'
#748: FILE: drivers/watchdog/w83792d.c:1607:
+	if ((sec < 60) || (sec > 0xFF*60))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#755: FILE: drivers/watchdog/w83792d.c:1614:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#763: FILE: drivers/watchdog/w83792d.c:1622:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#771: FILE: drivers/watchdog/watchdog-dev.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#786: FILE: drivers/watchdog/watchdog-dev.c:16:
+ * published by the Free Software Foundation.
+*/

CHECK:SPACING: No space is necessary after a cast
#798: FILE: drivers/watchdog/watchdog-dev.c:28:
+struct watchdog_device *watchdog = (struct watchdog_device *) data;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#804: FILE: drivers/watchdog/watchdog-dev.c:34:
+	if(time_before(jiffies, watchdog->next_heartbeat))
+	{

ERROR:SPACING: space required before the open parenthesis '('
#804: FILE: drivers/watchdog/watchdog-dev.c:34:
+	if(time_before(jiffies, watchdog->next_heartbeat))

CHECK:BRACES: braces {} should be used on all arms of this statement
#804: FILE: drivers/watchdog/watchdog-dev.c:34:
+	if(time_before(jiffies, watchdog->next_heartbeat))
[...]
+	} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: drivers/watchdog/watchdog-dev.c:37:
+^I^Ierr = watchdog->ops->ping ? $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#814: FILE: drivers/watchdog/watchdog-dev.c:44:
+		printk(KERN_WARNING  "Heartbeat lost! Will not ping the watchdog\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#818: FILE: drivers/watchdog/watchdog-dev.c:48:
+
+

CHECK:SPACING: No space is necessary after a cast
#838: FILE: drivers/watchdog/watchdog-dev.c:68:
+		watchdog->timer.data = (unsigned long) watchdog;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: drivers/watchdog/watchdog-dev.c:69:
+^I^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#846: FILE: drivers/watchdog/watchdog-dev.c:76:
+	if (err == 0) {
+		return nonseekable_open(inode, file);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#855: FILE: drivers/watchdog/watchdog-dev.c:85:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#863: FILE: drivers/watchdog/watchdog-dev.c:93:
+	if(len) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: drivers/watchdog/watchdog-dev.c:121:
+static int watchdog_dev_ioctl(struct inode *inode, struct file *file,
+		unsigned int cmd, unsigned long arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#899: FILE: drivers/watchdog/watchdog-dev.c:129:
+	int __user *p = argp;
+	switch (cmd) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#899: FILE: drivers/watchdog/watchdog-dev.c:129:
+	switch (cmd) {
+		case WDIOC_GETSUPPORT:
[...]
+		case WDIOC_GETSTATUS:
[...]
+		case WDIOC_GETBOOTSTATUS:
[...]
+		case WDIOC_KEEPALIVE:
[...]
+		case WDIOC_SETOPTIONS:
[...]
+		case WDIOC_SETTIMEOUT:
[...]
+		case WDIOC_GETTIMEOUT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: drivers/watchdog/watchdog-dev.c:132:
+				sizeof (watchdog->legacy_info)) ? -EFAULT : 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: drivers/watchdog/watchdog-dev.c:141:
+^I^I^I} else {^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#918: FILE: drivers/watchdog/watchdog-dev.c:148:
+			int new_options;
+			if (get_user (new_options, p))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#918: FILE: drivers/watchdog/watchdog-dev.c:148:
+			if (get_user (new_options, p))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#920: FILE: drivers/watchdog/watchdog-dev.c:150:
+			if (new_options & WDIOS_DISABLECARD) {
+				err = ops->disable ? ops->disable(watchdog->class_dev.dev) : -EFAULT;
+			}

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#921: FILE: drivers/watchdog/watchdog-dev.c:151:
+				err = ops->disable ? ops->disable(watchdog->class_dev.dev) : -EFAULT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#924: FILE: drivers/watchdog/watchdog-dev.c:154:
+			if (new_options & WDIOS_ENABLECARD) {
+				err = ops->enable ? ops->enable(watchdog->class_dev.dev) : -EFAULT;
+			}

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: drivers/watchdog/watchdog-dev.c:163:
+			int new_timeout;
+			if (get_user(new_timeout, p))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#935: FILE: drivers/watchdog/watchdog-dev.c:165:
+^I^I^Ierr = ops->set_timeout ? $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#936: FILE: drivers/watchdog/watchdog-dev.c:166:
+				    ops->set_timeout(watchdog->class_dev.dev, new_timeout) : -EFAULT;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: drivers/watchdog/watchdog-dev.c:183:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: drivers/watchdog/watchdog-dev.c:185:
+^I^Ierr = watchdog->ops->disable ? $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#958: FILE: drivers/watchdog/watchdog-dev.c:188:
+		printk(KERN_CRIT "Unexpected close, not stopping watchdog!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#959: FILE: drivers/watchdog/watchdog-dev.c:189:
+^I^Ierr = watchdog->ops->ping ? $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#962: FILE: drivers/watchdog/watchdog-dev.c:192:
+	if (watchdog->sping_interval != 0) {
+		del_timer(&watchdog->timer);
+	}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#970: FILE: drivers/watchdog/watchdog-dev.c:200:
+static struct file_operations watchdog_dev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: drivers/watchdog/watchdog-dev.c:212:
+static int watchdog_dev_add_device(struct class_device *class_dev,
+				struct class_interface *class_intf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: drivers/watchdog/watchdog-dev.c:236:
+	watchdog->watchdog_dev = class_device_create(watchdog_dev_class, NULL,
+						MKDEV(MAJOR(watchdog_devt), watchdog->id),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/watchdog/watchdog-dev.c:245:
+	dev_info(class_dev->dev, "watchdog intf: dev (%d:%d)\n",
+		MAJOR(watchdog->watchdog_dev->devt),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: drivers/watchdog/watchdog-dev.c:257:
+static void watchdog_dev_remove_device(struct class_device *class_dev,
+					struct class_interface *class_intf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1030: FILE: drivers/watchdog/watchdog-dev.c:260:
+	struct watchdog_device *watchdog = to_watchdog_device(class_dev);
+	if (watchdog->watchdog_dev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1057: FILE: drivers/watchdog/watchdog-dev.c:287:
+		printk(KERN_ERR "%s: failed to allocate char dev region\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1058: FILE: drivers/watchdog/watchdog-dev.c:288:
+		printk(KERN_ERR "%s: failed to allocate char dev region\n",
+			__FILE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1064: FILE: drivers/watchdog/watchdog-dev.c:294:
+		printk(KERN_ERR "%s: failed to register the interface\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1065: FILE: drivers/watchdog/watchdog-dev.c:295:
+		printk(KERN_ERR "%s: failed to register the interface\n",
+			__FILE__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1097: FILE: drivers/watchdog/watchdog.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1157: FILE: drivers/watchdog/watchdog.h:61:
+/* The watchdog class supports following operations:
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: drivers/watchdog/watchdog.h:62:
+enable - this should just enable the device, with timeout value $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1169: FILE: drivers/watchdog/watchdog.h:73:
+	int (*enable)(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1170: FILE: drivers/watchdog/watchdog.h:74:
+	int (*disable)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1171: FILE: drivers/watchdog/watchdog.h:75:
+	int (*ping)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1172: FILE: drivers/watchdog/watchdog.h:76:
+	int (*set_timeout)(struct device *, int sec);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: drivers/watchdog/watchdog.h:77:
+^Iint (*notify_reboot)(struct notifier_block *this, unsigned long code,                                               $

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1173: FILE: drivers/watchdog/watchdog.h:77:
+	int (*notify_reboot)(struct notifier_block *this, unsigned long code,                                               

ERROR:CODE_INDENT: code indent should use tabs where possible
#1174: FILE: drivers/watchdog/watchdog.h:78:
+^I        void *unused);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1174: FILE: drivers/watchdog/watchdog.h:78:
+	int (*notify_reboot)(struct notifier_block *this, unsigned long code,                                               
+	        void *unused);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1187: FILE: drivers/watchdog/watchdog.h:91:
+	struct mutex ops_lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: drivers/watchdog/watchdog.h:93:
+^Istruct class_device *watchdog_dev; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1208: FILE: drivers/watchdog/watchdog.h:112:
+/* watchdog_device_register_simple, will register device into watchdog class
+   just with default timeout from kernel configuration.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1209: FILE: drivers/watchdog/watchdog.h:113:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1210: FILE: drivers/watchdog/watchdog.h:114:
+   watchdog_device_register_selfping, will register the watchdog device same $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1216: FILE: drivers/watchdog/watchdog.h:120:
+	    _watchdog_device_register(name, dev, ops, THIS_MODULE, CONFIG_WATCHDOG_DEFAULT_TIMEOUT, 0)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1219: FILE: drivers/watchdog/watchdog.h:123:
+	    _watchdog_device_register(name, dev, ops, THIS_MODULE, CONFIG_WATCHDOG_DEFAULT_TIMEOUT, selfping)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: drivers/watchdog/watchdog.h:124:
+^I    $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1221: FILE: drivers/watchdog/watchdog.h:125:
+extern struct watchdog_device *_watchdog_device_register(const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: drivers/watchdog/watchdog.h:126:
+extern struct watchdog_device *_watchdog_device_register(const char *name,
+					struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: drivers/watchdog/watchdog.h:129:
+extern void watchdog_device_unregister(struct watchdog_device *wdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1226: FILE: drivers/watchdog/watchdog.h:130:
+extern int watchdog_interface_register(struct class_interface *intf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1228: FILE: drivers/watchdog/watchdog.h:132:
+extern struct class_device *watchdog_class_open(char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1229: FILE: drivers/watchdog/watchdog.h:133:
+extern void watchdog_class_close(struct class_device *class_dev);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1231: FILE: drivers/watchdog/watchdog.h:135:
+#define WATCHDOG_TO_MIN(x) ((x + 30) / 60)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1240: FILE: drivers/watchdog/watchdog-sysfs.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1253: FILE: drivers/watchdog/watchdog-sysfs.c:14:
+ * published by the Free Software Foundation.
+*/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1264: FILE: drivers/watchdog/watchdog-sysfs.c:25:
+static CLASS_DEVICE_ATTR(name, S_IRUGO, watchdog_sysfs_show_name, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1272: FILE: drivers/watchdog/watchdog-sysfs.c:33:
+static ssize_t watchdog_sysfs_store_timeout(struct class_device *dev,
+			    const char *buf, size_t count)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1274: FILE: drivers/watchdog/watchdog-sysfs.c:35:
+        struct watchdog_device *watchdog = to_watchdog_device(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: drivers/watchdog/watchdog-sysfs.c:35:
+        struct watchdog_device *watchdog = to_watchdog_device(dev);$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1275: FILE: drivers/watchdog/watchdog-sysfs.c:36:
+	long val = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: drivers/watchdog/watchdog-sysfs.c:38:
+^Ierr = watchdog->ops->set_timeout ? $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1277: FILE: drivers/watchdog/watchdog-sysfs.c:38:
+	ssize_t err;
+	err = watchdog->ops->set_timeout ? 

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1282: FILE: drivers/watchdog/watchdog-sysfs.c:43:
+static CLASS_DEVICE_ATTR(timeout, S_IRUGO, watchdog_sysfs_show_timeout,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1289: FILE: drivers/watchdog/watchdog-sysfs.c:50:
+static CLASS_DEVICE_ATTR(status, S_IRUGO, watchdog_sysfs_show_status, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1295: FILE: drivers/watchdog/watchdog-sysfs.c:56:
+static CLASS_DEVICE_ATTR(boot_status, S_IRUGO, watchdog_sysfs_show_boot_status, NULL);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1309: FILE: drivers/watchdog/watchdog-sysfs.c:70:
+static int __devinit watchdog_sysfs_add_device(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1310: FILE: drivers/watchdog/watchdog-sysfs.c:71:
+static int __devinit watchdog_sysfs_add_device(struct class_device *class_dev,
+					struct class_interface *class_intf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: drivers/watchdog/watchdog-sysfs.c:86:
+static void watchdog_sysfs_remove_device(struct class_device *class_dev,
+				struct class_interface *class_intf)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 91 warnings, 45 checks, 1195 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
