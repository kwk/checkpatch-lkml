WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	           ChangeSet	1.1360  -> 1.1361 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	include/linux/ext3_fs_i.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	include/linux/ext3_fs.h	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#	include/linux/ext3_jbd.h	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#	    fs/ext3/Makefile	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#	include/linux/rbtree.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#	include/linux/ext2_fs_i.h	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#	       fs/ext3/dir.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#	     fs/ext3/namei.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#	        lib/rbtree.c	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#	     fs/ext3/inode.c	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#	     fs/ext3/super.c	1.13    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#	include/linux/ext3_fs_sb.h	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#	      fs/ext3/file.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#	               (new)	        -> 1.1     fs/ext3/hash.c 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# 04/01/01	tytso@think.thunk.org	1.1361

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# Apply all ext2/ext3 htree indexed directory patches, including

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# bugfixes from the Linux 2.6.0 tree.   These patches are quite 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# well tested and have been proven very reliable.  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# Includes ext2/3 patches: 4100. 4101. 4102, 4103, 4108, 4109, 4112, 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# 4201, 4204, 4205

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#64: 
--- a/fs/ext3/Makefile	Thu Jan  1 16:29:25 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#90: FILE: fs/ext3/dir.c:32:
+static int ext3_dx_readdir(struct file * filp,
                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: fs/ext3/dir.c:32:
+static int ext3_dx_readdir(struct file * filp,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/ext3/dir.c:33:
+			   void * dirent, filldir_t filldir);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: fs/ext3/dir.c:34:
+static int ext3_release_dir (struct inode * inode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#92: FILE: fs/ext3/dir.c:34:
+static int ext3_release_dir (struct inode * inode,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#93: FILE: fs/ext3/dir.c:35:
+				struct file * filp);
 				              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/ext3/dir.c:35:
+static int ext3_release_dir (struct inode * inode,
+				struct file * filp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: fs/ext3/dir.c:35:
+				struct file * filp);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#101: FILE: fs/ext3/dir.c:43:
+	release:	ext3_release_dir
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#101: FILE: fs/ext3/dir.c:43:
+	release:	ext3_release_dir

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: fs/ext3/dir.c:47:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'filetype >= EXT3_FT_MAX'
#108: FILE: fs/ext3/dir.c:50:
+	if (!EXT3_HAS_INCOMPAT_FEATURE(sb, EXT3_FEATURE_INCOMPAT_FILETYPE) ||
+	    (filetype >= EXT3_FT_MAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#112: FILE: fs/ext3/dir.c:54:
+	return (ext3_filetype_table[filetype]);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: fs/ext3/dir.c:56:
+^I^I^I       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: fs/ext3/dir.c:57:
+			       
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#128: FILE: fs/ext3/dir.c:107:
+		err = ext3_dx_readdir(filp, dirent, filldir);
 		                      ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: fs/ext3/dir.c:225:
+ * $

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#171: FILE: fs/ext3/dir.c:226:
+ * Currently we only use major hash numer.  This is unfortunate, but
                                     ^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'major' may be better as '(major)' to avoid precedence issues
#180: FILE: fs/ext3/dir.c:235:
+#define hash2pos(major, minor)	(major >> 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#181: FILE: fs/ext3/dir.c:236:
+#define pos2maj_hash(pos)	((pos << 1) & 0xffffffff)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: fs/ext3/dir.c:246:
+^Irb_node_t^Irb_hash; $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: fs/ext3/dir.c:283:
+			struct fname * old = fname;

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/ext3/dir.c:284:
+			struct fname * old = fname;
+			fname = fname->next;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: fs/ext3/dir.c:285:
+			kfree (old);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: fs/ext3/dir.c:298:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct dir_private_info)...)
#248: FILE: fs/ext3/dir.c:303:
+	p = kmalloc(sizeof(struct dir_private_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: fs/ext3/dir.c:321:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: fs/ext3/dir.c:326:
+int ext3_htree_store_dirent(struct file *dir_file, __u32 hash,
+			     __u32 minor_hash,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/ext3/dir.c:330:
+	struct fname * fname, *new_fn;

CHECK:SPACING: No space is necessary after a cast
#279: FILE: fs/ext3/dir.c:334:
+	info = (struct dir_private_info *) dir_file->private_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: fs/ext3/dir.c:350:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_fn->hash == fname->hash'
#304: FILE: fs/ext3/dir.c:359:
+		if ((new_fn->hash == fname->hash) &&
+		    (new_fn->minor_hash == fname->minor_hash)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_fn->minor_hash == fname->minor_hash'
#304: FILE: fs/ext3/dir.c:359:
+		if ((new_fn->hash == fname->hash) &&
+		    (new_fn->minor_hash == fname->minor_hash)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: fs/ext3/dir.c:365:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: fs/ext3/dir.c:381:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#333: FILE: fs/ext3/dir.c:388:
+static int call_filldir(struct file * filp, void * dirent,
                                       ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: fs/ext3/dir.c:388:
+static int call_filldir(struct file * filp, void * dirent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: fs/ext3/dir.c:388:
+static int call_filldir(struct file * filp, void * dirent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#339: FILE: fs/ext3/dir.c:394:
+	struct super_block * sb;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: fs/ext3/dir.c:398:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#345: FILE: fs/ext3/dir.c:400:
+		printk("call_filldir: called with null fname?!?\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'call_filldir', this function's name, in a string
#345: FILE: fs/ext3/dir.c:400:
+		printk("call_filldir: called with null fname?!?\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: fs/ext3/dir.c:406:
+^I^I^I^Ifname->name_len, curr_pos, $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#364: FILE: fs/ext3/dir.c:419:
+static int ext3_dx_readdir(struct file * filp,
                                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#364: FILE: fs/ext3/dir.c:419:
+static int ext3_dx_readdir(struct file * filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/ext3/dir.c:420:
+static int ext3_dx_readdir(struct file * filp,
+			 void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: fs/ext3/dir.c:420:
+			 void * dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#396: FILE: fs/ext3/dir.c:451:
+	    call_filldir(filp, dirent, filldir, info->extra_fname))
 	                 ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: fs/ext3/dir.c:461:
+^I^I * cached entries. $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!info->curr_node'
#408: FILE: fs/ext3/dir.c:463:
+		if ((!info->curr_node) ||
+		    (filp->f_version != inode->i_version)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'filp->f_version != inode->i_version'
#408: FILE: fs/ext3/dir.c:463:
+		if ((!info->curr_node) ||
+		    (filp->f_version != inode->i_version)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#413: FILE: fs/ext3/dir.c:468:
+			ret = ext3_htree_fill_tree(filp, info->curr_hash,
 			                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#428: FILE: fs/ext3/dir.c:483:
+		if (call_filldir(filp, dirent, filldir, fname))
 		                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#447: FILE: fs/ext3/dir.c:502:
+static int ext3_release_dir (struct inode * inode, struct file * filp)
                                                                  ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#447: FILE: fs/ext3/dir.c:502:
+static int ext3_release_dir (struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#447: FILE: fs/ext3/dir.c:502:
+static int ext3_release_dir (struct inode * inode, struct file * filp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#447: FILE: fs/ext3/dir.c:502:
+static int ext3_release_dir (struct inode * inode, struct file * filp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: fs/ext3/dir.c:504:
+       if (filp->private_data)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#449: FILE: fs/ext3/dir.c:504:
+       if (filp->private_data)
+		ext3_htree_free_dir_info(filp->private_data);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#473: FILE: fs/ext3/hash.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#474: FILE: fs/ext3/hash.c:2:
+ *  linux/fs/ext3/hash.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: fs/ext3/hash.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: fs/ext3/hash.c:26:
+^Ido {^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: fs/ext3/hash.c:27:
+^I^Isum += DELTA;^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: fs/ext3/hash.c:28:
+^I^Ib0 += ((b1 << 4)+a) ^ (b1+sum) ^ ((b1 >> 5)+b);^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: fs/ext3/hash.c:28:
+		b0 += ((b1 << 4)+a) ^ (b1+sum) ^ ((b1 >> 5)+b);	
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: fs/ext3/hash.c:28:
+		b0 += ((b1 << 4)+a) ^ (b1+sum) ^ ((b1 >> 5)+b);	
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: fs/ext3/hash.c:28:
+		b0 += ((b1 << 4)+a) ^ (b1+sum) ^ ((b1 >> 5)+b);	
 		                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: fs/ext3/hash.c:29:
+^I^Ib1 += ((b0 << 4)+c) ^ (b0+sum) ^ ((b0 >> 5)+d);^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: fs/ext3/hash.c:29:
+		b1 += ((b0 << 4)+c) ^ (b0+sum) ^ ((b0 >> 5)+d);	
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: fs/ext3/hash.c:29:
+		b1 += ((b0 << 4)+c) ^ (b0+sum) ^ ((b0 >> 5)+d);	
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: fs/ext3/hash.c:29:
+		b1 += ((b0 << 4)+c) ^ (b0+sum) ^ ((b0 >> 5)+d);	
 		                                           ^

ERROR:SPACING: space required before the open parenthesis '('
#502: FILE: fs/ext3/hash.c:30:
+	} while(--n);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#509: FILE: fs/ext3/hash.c:37:
+#define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#510: FILE: fs/ext3/hash.c:38:
+#define G(x, y, z) (((x) & (y)) + (((x) ^ (y)) & (z)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#510: FILE: fs/ext3/hash.c:38:
+#define G(x, y, z) (((x) & (y)) + (((x) ^ (y)) & (z)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#519: FILE: fs/ext3/hash.c:47:
+#define ROUND(f, a, b, c, d, x, s)	\
+	(a += f(b, c, d) + x, a = (a << s) | (a >> (32-s)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#519: FILE: fs/ext3/hash.c:47:
+#define ROUND(f, a, b, c, d, x, s)	\
+	(a += f(b, c, d) + x, a = (a << s) | (a >> (32-s)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#519: FILE: fs/ext3/hash.c:47:
+#define ROUND(f, a, b, c, d, x, s)	\
+	(a += f(b, c, d) + x, a = (a << s) | (a >> (32-s)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#519: FILE: fs/ext3/hash.c:47:
+#define ROUND(f, a, b, c, d, x, s)	\
+	(a += f(b, c, d) + x, a = (a << s) | (a >> (32-s)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#519: FILE: fs/ext3/hash.c:47:
+#define ROUND(f, a, b, c, d, x, s)	\
+	(a += f(b, c, d) + x, a = (a << s) | (a >> (32-s)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#520: FILE: fs/ext3/hash.c:48:
+	(a += f(b, c, d) + x, a = (a << s) | (a >> (32-s)))
 	                                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: fs/ext3/hash.c:56:
+static void halfMD4Transform (__u32 buf[4], __u32 const in[])

CHECK:CAMELCASE: Avoid CamelCase: <halfMD4Transform>
#528: FILE: fs/ext3/hash.c:56:
+static void halfMD4Transform (__u32 buf[4], __u32 const in[])

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#577: FILE: fs/ext3/hash.c:105:
+static __u32 dx_hack_hash (const char *name, int len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: fs/ext3/hash.c:108:
+	__u32 hash0 = 0x12a3fe2d, hash1 = 0x37abe8f9;
+	while (len--) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: fs/ext3/hash.c:110:
+^I^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#583: FILE: fs/ext3/hash.c:111:
+		if (hash & 0x80000000) hash -= 0x7fffffff;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#599: FILE: fs/ext3/hash.c:127:
+	if (len > num*4)
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#601: FILE: fs/ext3/hash.c:129:
+	for (i=0; i < len; i++) {
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: fs/ext3/hash.c:149:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#625: FILE: fs/ext3/hash.c:153:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#636: FILE: fs/ext3/hash.c:164:
+^I__u32 ^I^Iin[8], buf[4];$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#646: FILE: fs/ext3/hash.c:174:
+		for (i=0; i < 4; i++) {
 		      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: fs/ext3/hash.c:181:
+^I^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#686: FILE: fs/ext3/hash.c:214:
+		hash = (EXT3_HTREE_EOF-1) << 1;
 		                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#748: FILE: fs/ext3/namei.c:20:
+ *  ^IDaniel Phillips, 2001$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#750: FILE: fs/ext3/namei.c:22:
+ *  ^IChristopher Li, 2002$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#752: FILE: fs/ext3/namei.c:24:
+ * ^ITheodore Ts'o, 2002$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: fs/ext3/namei.c:48:
+static struct buffer_head *ext3_append(handle_t *handle,
+					struct inode *inode,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#768: FILE: fs/ext3/namei.c:55:
+	if ((bh = ext3_bread(handle, inode, *block, 1, err))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#771: FILE: fs/ext3/namei.c:58:
+		ext3_journal_get_write_access(handle,bh);
 		                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#781: FILE: fs/ext3/namei.c:68:
+#define swap(x, y) do { typeof(x) z = x; x = y; y = z; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#781: FILE: fs/ext3/namei.c:68:
+#define swap(x, y) do { typeof(x) z = x; x = y; y = z; } while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: fs/ext3/namei.c:77:
+#define dxtrace(command) $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#794: FILE: fs/ext3/namei.c:81:
+struct fake_dirent
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#795: FILE: fs/ext3/namei.c:82:
+	/*le*/u32 inode;

WARNING:TABSTOP: Statements should start on a tabstop
#796: FILE: fs/ext3/namei.c:83:
+	/*le*/u16 rec_len;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#802: FILE: fs/ext3/namei.c:89:
+struct dx_countlimit
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#808: FILE: fs/ext3/namei.c:95:
+struct dx_entry
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#820: FILE: fs/ext3/namei.c:107:
+struct dx_root
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#826: FILE: fs/ext3/namei.c:113:
+	struct dx_root_info
+	{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#838: FILE: fs/ext3/namei.c:125:
+struct dx_node
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#843: FILE: fs/ext3/namei.c:130:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#845: FILE: fs/ext3/namei.c:132:
+struct dx_frame
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#852: FILE: fs/ext3/namei.c:139:
+struct dx_map_entry
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#858: FILE: fs/ext3/namei.c:145:
+static inline unsigned dx_get_block (struct dx_entry *entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#858: FILE: fs/ext3/namei.c:145:
+static inline unsigned dx_get_block (struct dx_entry *entry);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#859: FILE: fs/ext3/namei.c:146:
+static void dx_set_block (struct dx_entry *entry, unsigned value);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#859: FILE: fs/ext3/namei.c:146:
+static void dx_set_block (struct dx_entry *entry, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#860: FILE: fs/ext3/namei.c:147:
+static inline unsigned dx_get_hash (struct dx_entry *entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#860: FILE: fs/ext3/namei.c:147:
+static inline unsigned dx_get_hash (struct dx_entry *entry);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#861: FILE: fs/ext3/namei.c:148:
+static void dx_set_hash (struct dx_entry *entry, unsigned value);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#861: FILE: fs/ext3/namei.c:148:
+static void dx_set_hash (struct dx_entry *entry, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#862: FILE: fs/ext3/namei.c:149:
+static unsigned dx_get_count (struct dx_entry *entries);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#862: FILE: fs/ext3/namei.c:149:
+static unsigned dx_get_count (struct dx_entry *entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#863: FILE: fs/ext3/namei.c:150:
+static unsigned dx_get_limit (struct dx_entry *entries);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#863: FILE: fs/ext3/namei.c:150:
+static unsigned dx_get_limit (struct dx_entry *entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#864: FILE: fs/ext3/namei.c:151:
+static void dx_set_count (struct dx_entry *entries, unsigned value);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#864: FILE: fs/ext3/namei.c:151:
+static void dx_set_count (struct dx_entry *entries, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#865: FILE: fs/ext3/namei.c:152:
+static void dx_set_limit (struct dx_entry *entries, unsigned value);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#865: FILE: fs/ext3/namei.c:152:
+static void dx_set_limit (struct dx_entry *entries, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#866: FILE: fs/ext3/namei.c:153:
+static unsigned dx_root_limit (struct inode *dir, unsigned infosize);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#866: FILE: fs/ext3/namei.c:153:
+static unsigned dx_root_limit (struct inode *dir, unsigned infosize);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#866: FILE: fs/ext3/namei.c:153:
+static unsigned dx_root_limit (struct inode *dir, unsigned infosize);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#867: FILE: fs/ext3/namei.c:154:
+static unsigned dx_node_limit (struct inode *dir);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#867: FILE: fs/ext3/namei.c:154:
+static unsigned dx_node_limit (struct inode *dir);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#873: FILE: fs/ext3/namei.c:160:
+static void dx_release (struct dx_frame *frames);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#874: FILE: fs/ext3/namei.c:161:
+static int dx_make_map (struct ext3_dir_entry_2 *de, int size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#876: FILE: fs/ext3/namei.c:163:
+static void dx_sort_map(struct dx_map_entry *map, unsigned count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#877: FILE: fs/ext3/namei.c:164:
+static struct ext3_dir_entry_2 *dx_move_dirents (char *from, char *to,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: fs/ext3/namei.c:165:
+static struct ext3_dir_entry_2 *dx_move_dirents (char *from, char *to,
+		struct dx_map_entry *offsets, int count);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#879: FILE: fs/ext3/namei.c:166:
+static struct ext3_dir_entry_2* dx_pack_dirents (char *base, int size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#879: FILE: fs/ext3/namei.c:166:
+static struct ext3_dir_entry_2* dx_pack_dirents (char *base, int size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#880: FILE: fs/ext3/namei.c:167:
+static void dx_insert_block (struct dx_frame *frame, u32 hash, u32 block);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: fs/ext3/namei.c:170:
+^I^I^I^I struct dx_frame *frames, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#885: FILE: fs/ext3/namei.c:172:
+static struct buffer_head * ext3_dx_find_entry(struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: fs/ext3/namei.c:173:
+static struct buffer_head * ext3_dx_find_entry(struct dentry *dentry,
+		       struct ext3_dir_entry_2 **res_dir, int *err);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#895: FILE: fs/ext3/namei.c:182:
+static inline unsigned dx_get_block (struct dx_entry *entry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#895: FILE: fs/ext3/namei.c:182:
+static inline unsigned dx_get_block (struct dx_entry *entry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#900: FILE: fs/ext3/namei.c:187:
+static inline void dx_set_block (struct dx_entry *entry, unsigned value)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#900: FILE: fs/ext3/namei.c:187:
+static inline void dx_set_block (struct dx_entry *entry, unsigned value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#905: FILE: fs/ext3/namei.c:192:
+static inline unsigned dx_get_hash (struct dx_entry *entry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#905: FILE: fs/ext3/namei.c:192:
+static inline unsigned dx_get_hash (struct dx_entry *entry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#910: FILE: fs/ext3/namei.c:197:
+static inline void dx_set_hash (struct dx_entry *entry, unsigned value)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#910: FILE: fs/ext3/namei.c:197:
+static inline void dx_set_hash (struct dx_entry *entry, unsigned value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#915: FILE: fs/ext3/namei.c:202:
+static inline unsigned dx_get_count (struct dx_entry *entries)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#915: FILE: fs/ext3/namei.c:202:
+static inline unsigned dx_get_count (struct dx_entry *entries)

CHECK:SPACING: No space is necessary after a cast
#917: FILE: fs/ext3/namei.c:204:
+	return le16_to_cpu(((struct dx_countlimit *) entries)->count.v);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#920: FILE: fs/ext3/namei.c:207:
+static inline unsigned dx_get_limit (struct dx_entry *entries)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#920: FILE: fs/ext3/namei.c:207:
+static inline unsigned dx_get_limit (struct dx_entry *entries)

CHECK:SPACING: No space is necessary after a cast
#922: FILE: fs/ext3/namei.c:209:
+	return le16_to_cpu(((struct dx_countlimit *) entries)->limit.v);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#925: FILE: fs/ext3/namei.c:212:
+static inline void dx_set_count (struct dx_entry *entries, unsigned value)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#925: FILE: fs/ext3/namei.c:212:
+static inline void dx_set_count (struct dx_entry *entries, unsigned value)

CHECK:SPACING: No space is necessary after a cast
#927: FILE: fs/ext3/namei.c:214:
+	((struct dx_countlimit *) entries)->count.v = cpu_to_le16(value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#930: FILE: fs/ext3/namei.c:217:
+static inline void dx_set_limit (struct dx_entry *entries, unsigned value)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#930: FILE: fs/ext3/namei.c:217:
+static inline void dx_set_limit (struct dx_entry *entries, unsigned value)

CHECK:SPACING: No space is necessary after a cast
#932: FILE: fs/ext3/namei.c:219:
+	((struct dx_countlimit *) entries)->limit.v = cpu_to_le16(value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#935: FILE: fs/ext3/namei.c:222:
+static inline unsigned dx_root_limit (struct inode *dir, unsigned infosize)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#935: FILE: fs/ext3/namei.c:222:
+static inline unsigned dx_root_limit (struct inode *dir, unsigned infosize)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#935: FILE: fs/ext3/namei.c:222:
+static inline unsigned dx_root_limit (struct inode *dir, unsigned infosize)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#937: FILE: fs/ext3/namei.c:224:
+	unsigned entry_space = dir->i_sb->s_blocksize - EXT3_DIR_REC_LEN(1) -

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#939: FILE: fs/ext3/namei.c:226:
+	return 0? 20: entry_space / sizeof(struct dx_entry);
 	        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#939: FILE: fs/ext3/namei.c:226:
+	return 0? 20: entry_space / sizeof(struct dx_entry);
 	            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#942: FILE: fs/ext3/namei.c:229:
+static inline unsigned dx_node_limit (struct inode *dir)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#942: FILE: fs/ext3/namei.c:229:
+static inline unsigned dx_node_limit (struct inode *dir)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#944: FILE: fs/ext3/namei.c:231:
+	unsigned entry_space = dir->i_sb->s_blocksize - EXT3_DIR_REC_LEN(0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#945: FILE: fs/ext3/namei.c:232:
+	unsigned entry_space = dir->i_sb->s_blocksize - EXT3_DIR_REC_LEN(0);
+	return 0? 22: entry_space / sizeof(struct dx_entry);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#945: FILE: fs/ext3/namei.c:232:
+	return 0? 22: entry_space / sizeof(struct dx_entry);
 	        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#945: FILE: fs/ext3/namei.c:232:
+	return 0? 22: entry_space / sizeof(struct dx_entry);
 	            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#952: FILE: fs/ext3/namei.c:239:
+static void dx_show_index (char * label, struct dx_entry *entries)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#952: FILE: fs/ext3/namei.c:239:
+static void dx_show_index (char * label, struct dx_entry *entries)

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: fs/ext3/namei.c:241:
+        int i, n = dx_get_count (entries);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: fs/ext3/namei.c:241:
+        int i, n = dx_get_count (entries);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#954: FILE: fs/ext3/namei.c:241:
+        int i, n = dx_get_count (entries);

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: fs/ext3/namei.c:242:
+        printk("%s index ", label);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#955: FILE: fs/ext3/namei.c:242:
+        int i, n = dx_get_count (entries);
+        printk("%s index ", label);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: fs/ext3/namei.c:242:
+        printk("%s index ", label);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#955: FILE: fs/ext3/namei.c:242:
+        printk("%s index ", label);

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: fs/ext3/namei.c:243:
+        for (i = 0; i < n; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: fs/ext3/namei.c:243:
+        for (i = 0; i < n; i++)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#956: FILE: fs/ext3/namei.c:243:
+        for (i = 0; i < n; i++)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#957: FILE: fs/ext3/namei.c:244:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: fs/ext3/namei.c:244:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: fs/ext3/namei.c:245:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: fs/ext3/namei.c:245:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#958: FILE: fs/ext3/namei.c:245:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#958: FILE: fs/ext3/namei.c:245:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));
                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#958: FILE: fs/ext3/namei.c:245:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));
                                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#959: FILE: fs/ext3/namei.c:246:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: fs/ext3/namei.c:246:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#960: FILE: fs/ext3/namei.c:247:
+        printk("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: fs/ext3/namei.c:247:
+        printk("\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#960: FILE: fs/ext3/namei.c:247:
+        printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: fs/ext3/namei.c:251:
+{ $

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#964: FILE: fs/ext3/namei.c:251:
+struct stats
+{ 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#965: FILE: fs/ext3/namei.c:252:
+	unsigned names;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#966: FILE: fs/ext3/namei.c:253:
+	unsigned space;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#967: FILE: fs/ext3/namei.c:254:
+	unsigned bcount;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#973: FILE: fs/ext3/namei.c:260:
+	unsigned names = 0, space = 0;

CHECK:SPACING: No space is necessary after a cast
#974: FILE: fs/ext3/namei.c:261:
+	char *base = (char *) de;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#976: FILE: fs/ext3/namei.c:263:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#977: FILE: fs/ext3/namei.c:264:
+	printk("names: ");

CHECK:SPACING: No space is necessary after a cast
#978: FILE: fs/ext3/namei.c:265:
+	while ((char *) de < base + size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#978: FILE: fs/ext3/namei.c:265:
+	while ((char *) de < base + size)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#980: FILE: fs/ext3/namei.c:267:
+		if (de->inode)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#982: FILE: fs/ext3/namei.c:269:
+			if (show_names)
+			{

WARNING:LINE_SPACING: Missing a blank line after declarations
#986: FILE: fs/ext3/namei.c:273:
+				char *name = de->name;
+				while (len--) printk("%c", *name++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#986: FILE: fs/ext3/namei.c:273:
+				while (len--) printk("%c", *name++);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#986: FILE: fs/ext3/namei.c:273:
+				while (len--) printk("%c", *name++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#988: FILE: fs/ext3/namei.c:275:
+				printk(":%x.%u ", h.hash,

CHECK:SPACING: No space is necessary after a cast
#989: FILE: fs/ext3/namei.c:276:
+				       ((char *) de - base));

ERROR:CODE_INDENT: code indent should use tabs where possible
#992: FILE: fs/ext3/namei.c:279:
+^I ^I^Inames++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#992: FILE: fs/ext3/namei.c:279:
+^I ^I^Inames++;$

CHECK:SPACING: No space is necessary after a cast
#994: FILE: fs/ext3/namei.c:281:
+		de = (struct ext3_dir_entry_2 *) ((char *) de + le16_to_cpu(de->rec_len));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#996: FILE: fs/ext3/namei.c:283:
+	printk("(%i)\n", names);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1003: FILE: fs/ext3/namei.c:290:
+	unsigned blocksize = dir->i_sb->s_blocksize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1004: FILE: fs/ext3/namei.c:291:
+	unsigned count = dx_get_count (entries), names = 0, space = 0, i;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1004: FILE: fs/ext3/namei.c:291:
+	unsigned count = dx_get_count (entries), names = 0, space = 0, i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1005: FILE: fs/ext3/namei.c:292:
+	unsigned bcount = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1008: FILE: fs/ext3/namei.c:295:
+	int err;
+	printk("%i indexed blocks...\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1008: FILE: fs/ext3/namei.c:295:
+	printk("%i indexed blocks...\n", count);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1009: FILE: fs/ext3/namei.c:296:
+	for (i = 0; i < count; i++, entries++)
+	{

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1011: FILE: fs/ext3/namei.c:298:
+		u32 block = dx_get_block(entries), hash = i? dx_get_hash(entries): 0;
 		                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1011: FILE: fs/ext3/namei.c:298:
+		u32 block = dx_get_block(entries), hash = i? dx_get_hash(entries): 0;
 		                                                                 ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1012: FILE: fs/ext3/namei.c:299:
+		u32 range = i < count - 1? (dx_get_hash(entries + 1) - hash): ~hash;
 		                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1012: FILE: fs/ext3/namei.c:299:
+		u32 range = i < count - 1? (dx_get_hash(entries + 1) - hash): ~hash;
 		                                                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1014: FILE: fs/ext3/namei.c:301:
+		struct stats stats;
+		printk("%s%3u:%03u hash %8x/%8x ",levels?"":"   ", i, block, hash, range);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1014: FILE: fs/ext3/namei.c:301:
+		printk("%s%3u:%03u hash %8x/%8x ",levels?"":"   ", i, block, hash, range);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1014: FILE: fs/ext3/namei.c:301:
+		printk("%s%3u:%03u hash %8x/%8x ",levels?"":"   ", i, block, hash, range);
 		                                 ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1014: FILE: fs/ext3/namei.c:301:
+		printk("%s%3u:%03u hash %8x/%8x ",levels?"":"   ", i, block, hash, range);
 		                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1014: FILE: fs/ext3/namei.c:301:
+		printk("%s%3u:%03u hash %8x/%8x ",levels?"":"   ", i, block, hash, range);
 		                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1015: FILE: fs/ext3/namei.c:302:
+		if (!(bh = ext3_bread (NULL,dir, block, 0,&err))) continue;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1015: FILE: fs/ext3/namei.c:302:
+		if (!(bh = ext3_bread (NULL,dir, block, 0,&err))) continue;
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1015: FILE: fs/ext3/namei.c:302:
+		if (!(bh = ext3_bread (NULL,dir, block, 0,&err))) continue;
 		                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1015: FILE: fs/ext3/namei.c:302:
+		if (!(bh = ext3_bread (NULL,dir, block, 0,&err))) continue;
 		                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1015: FILE: fs/ext3/namei.c:302:
+		if (!(bh = ext3_bread (NULL,dir, block, 0,&err))) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1015: FILE: fs/ext3/namei.c:302:
+		if (!(bh = ext3_bread (NULL,dir, block, 0,&err))) continue;

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#1016: FILE: fs/ext3/namei.c:303:
+		stats = levels?
 		              ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1017: FILE: fs/ext3/namei.c:304:
+		   dx_show_entries(hinfo, dir, ((struct dx_node *) bh->b_data)->entries, levels - 1):

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#1017: FILE: fs/ext3/namei.c:304:
+		   dx_show_entries(hinfo, dir, ((struct dx_node *) bh->b_data)->entries, levels - 1):

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1017: FILE: fs/ext3/namei.c:304:
+		   dx_show_entries(hinfo, dir, ((struct dx_node *) bh->b_data)->entries, levels - 1):
 		                                                                                    ^

CHECK:SPACING: No space is necessary after a cast
#1018: FILE: fs/ext3/namei.c:305:
+		   dx_show_leaf(hinfo, (struct ext3_dir_entry_2 *) bh->b_data, blocksize, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1022: FILE: fs/ext3/namei.c:309:
+		brelse (bh);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1025: FILE: fs/ext3/namei.c:312:
+		printk("%snames %u, fullness %u (%u%%)\n", levels?"":"   ",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1025: FILE: fs/ext3/namei.c:312:
+		printk("%snames %u, fullness %u (%u%%)\n", levels?"":"   ",
 		                                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1025: FILE: fs/ext3/namei.c:312:
+		printk("%snames %u, fullness %u (%u%%)\n", levels?"":"   ",
 		                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: fs/ext3/namei.c:313:
+		printk("%snames %u, fullness %u (%u%%)\n", levels?"":"   ",
+			names, space/bcount,(space/bcount)*100/blocksize);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1026: FILE: fs/ext3/namei.c:313:
+			names, space/bcount,(space/bcount)*100/blocksize);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1026: FILE: fs/ext3/namei.c:313:
+			names, space/bcount,(space/bcount)*100/blocksize);
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1026: FILE: fs/ext3/namei.c:313:
+			names, space/bcount,(space/bcount)*100/blocksize);
 			                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1026: FILE: fs/ext3/namei.c:313:
+			names, space/bcount,(space/bcount)*100/blocksize);
 			                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1026: FILE: fs/ext3/namei.c:313:
+			names, space/bcount,(space/bcount)*100/blocksize);
 			                                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1044: FILE: fs/ext3/namei.c:331:
+	unsigned count, indirect;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1054: FILE: fs/ext3/namei.c:341:
+	if (!(bh = ext3_bread (NULL,dir, 0, 0, err)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1054: FILE: fs/ext3/namei.c:341:
+	if (!(bh = ext3_bread (NULL,dir, 0, 0, err)))
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1054: FILE: fs/ext3/namei.c:341:
+	if (!(bh = ext3_bread (NULL,dir, 0, 0, err)))

CHECK:SPACING: No space is necessary after a cast
#1056: FILE: fs/ext3/namei.c:343:
+	root = (struct dx_root *) bh->b_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1060: FILE: fs/ext3/namei.c:347:
+		ext3_warning(dir->i_sb, __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1074: FILE: fs/ext3/namei.c:361:
+		ext3_warning(dir->i_sb, __FUNCTION__,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1082: FILE: fs/ext3/namei.c:369:
+	if ((indirect = root->info.indirect_levels) > 1) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1083: FILE: fs/ext3/namei.c:370:
+		ext3_warning(dir->i_sb, __FUNCTION__,

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: fs/ext3/namei.c:378:
+	entries = (struct dx_entry *) (((char *)&root->info) +

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1095: FILE: fs/ext3/namei.c:382:
+	dxtrace (printk("Look up %x", hash));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1095: FILE: fs/ext3/namei.c:382:
+	dxtrace (printk("Look up %x", hash));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1096: FILE: fs/ext3/namei.c:383:
+	while (1)
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1099: FILE: fs/ext3/namei.c:386:
+		assert (count && count <= dx_get_limit(entries));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1102: FILE: fs/ext3/namei.c:389:
+		while (p <= q)
+		{

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1104: FILE: fs/ext3/namei.c:391:
+			m = p + (q - p)/2;
 			               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1105: FILE: fs/ext3/namei.c:392:
+			dxtrace(printk("."));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1112: FILE: fs/ext3/namei.c:399:
+		if (0) // linear search cross check
+		{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1114: FILE: fs/ext3/namei.c:401:
+			unsigned n = count - 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1115: FILE: fs/ext3/namei.c:402:
+			unsigned n = count - 1;
+			at = entries;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1116: FILE: fs/ext3/namei.c:403:
+			while (n--)
+			{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1118: FILE: fs/ext3/namei.c:405:
+				dxtrace(printk(","));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1119: FILE: fs/ext3/namei.c:406:
+				if (dx_get_hash(++at) > hash)
+				{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1125: FILE: fs/ext3/namei.c:412:
+			assert (at == p - 1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1129: FILE: fs/ext3/namei.c:416:
+		dxtrace(printk(" %x->%u\n", at == entries? 0: dx_get_hash(at), dx_get_block(at)));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1129: FILE: fs/ext3/namei.c:416:
+		dxtrace(printk(" %x->%u\n", at == entries? 0: dx_get_hash(at), dx_get_block(at)));
 		                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1129: FILE: fs/ext3/namei.c:416:
+		dxtrace(printk(" %x->%u\n", at == entries? 0: dx_get_hash(at), dx_get_block(at)));
 		                                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1133: FILE: fs/ext3/namei.c:420:
+		if (!indirect--) return frame;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1134: FILE: fs/ext3/namei.c:421:
+		if (!(bh = ext3_bread (NULL,dir, dx_get_block(at), 0, err)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1134: FILE: fs/ext3/namei.c:421:
+		if (!(bh = ext3_bread (NULL,dir, dx_get_block(at), 0, err)))
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1134: FILE: fs/ext3/namei.c:421:
+		if (!(bh = ext3_bread (NULL,dir, dx_get_block(at), 0, err)))

CHECK:SPACING: No space is necessary after a cast
#1136: FILE: fs/ext3/namei.c:423:
+		at = entries = ((struct dx_node *) bh->b_data)->entries;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1136: FILE: fs/ext3/namei.c:423:
+		at = entries = ((struct dx_node *) bh->b_data)->entries;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1137: FILE: fs/ext3/namei.c:424:
+		assert (dx_get_limit(entries) == dx_node_limit (dir));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1137: FILE: fs/ext3/namei.c:424:
+		assert (dx_get_limit(entries) == dx_node_limit (dir));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1149: FILE: fs/ext3/namei.c:436:
+static void dx_release (struct dx_frame *frames)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!frames[0].bh"
#1151: FILE: fs/ext3/namei.c:438:
+	if (frames[0].bh == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1154: FILE: fs/ext3/namei.c:441:
+	if (((struct dx_root *) frames[0].bh->b_data)->info.indirect_levels)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1178: FILE: fs/ext3/namei.c:465:
+^I^I^I^I struct dx_frame *frames, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->at'
#1195: FILE: fs/ext3/namei.c:482:
+		if (++(p->at) < p->entries + dx_get_count(p->entries))

WARNING:TYPO_SPELLING: 'contiuation' may be misspelled - perhaps 'continuation'?
#1207: FILE: fs/ext3/namei.c:494:
+	 * desired contiuation hash.  If it doesn't, return since
 	           ^^^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1222: FILE: fs/ext3/namei.c:509:
+		if (!(bh = ext3_bread(NULL, dir, dx_get_block(p->at),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1226: FILE: fs/ext3/namei.c:513:
+		brelse (p->bh);

CHECK:SPACING: No space is necessary after a cast
#1228: FILE: fs/ext3/namei.c:515:
+		p->at = p->entries = ((struct dx_node *) bh->b_data)->entries;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1228: FILE: fs/ext3/namei.c:515:
+		p->at = p->entries = ((struct dx_node *) bh->b_data)->entries;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1233: FILE: fs/ext3/namei.c:520:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1239: FILE: fs/ext3/namei.c:526:
+	return (struct ext3_dir_entry_2 *)((char*)p + le16_to_cpu(p->rec_len));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1256: FILE: fs/ext3/namei.c:543:
+	dxtrace(printk("In htree dirblock_to_tree: block %d\n", block));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1257: FILE: fs/ext3/namei.c:544:
+	if (!(bh = ext3_bread (NULL, dir, block, 0, &err)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1257: FILE: fs/ext3/namei.c:544:
+	if (!(bh = ext3_bread (NULL, dir, block, 0, &err)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: fs/ext3/namei.c:546:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1260: FILE: fs/ext3/namei.c:547:
+	de = (struct ext3_dir_entry_2 *) bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#1261: FILE: fs/ext3/namei.c:548:
+	top = (struct ext3_dir_entry_2 *) ((char *) de +

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hinfo->hash < start_hash'
#1266: FILE: fs/ext3/namei.c:553:
+		if ((hinfo->hash < start_hash) ||
+		    ((hinfo->hash == start_hash) &&
+		     (hinfo->minor_hash < start_minor_hash)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hinfo->hash == start_hash'
#1266: FILE: fs/ext3/namei.c:553:
+		if ((hinfo->hash < start_hash) ||
+		    ((hinfo->hash == start_hash) &&
+		     (hinfo->minor_hash < start_minor_hash)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hinfo->minor_hash < start_minor_hash'
#1266: FILE: fs/ext3/namei.c:553:
+		if ((hinfo->hash < start_hash) ||
+		    ((hinfo->hash == start_hash) &&
+		     (hinfo->minor_hash < start_minor_hash)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1270: FILE: fs/ext3/namei.c:557:
+		if ((err = ext3_htree_store_dirent(dir_file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: fs/ext3/namei.c:558:
+		if ((err = ext3_htree_store_dirent(dir_file,
+				   hinfo->hash, hinfo->minor_hash, de)) != 0) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1281: FILE: fs/ext3/namei.c:568:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1301: FILE: fs/ext3/namei.c:588:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1302: FILE: fs/ext3/namei.c:589:
+	dxtrace(printk("In htree_fill_tree, start hash: %x:%x\n", start_hash,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1305: FILE: fs/ext3/namei.c:592:
+^Iif (!(EXT3_I(dir)->i_flags & EXT3_INDEX_FL)) {^I$

CHECK:SPACING: No space is necessary after a cast
#1321: FILE: fs/ext3/namei.c:608:
+		de = (struct ext3_dir_entry_2 *) frames[0].bh->b_data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1322: FILE: fs/ext3/namei.c:609:
+		if ((err = ext3_htree_store_dirent(dir_file, 0, 0, de)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1325: FILE: fs/ext3/namei.c:612:
+		if ((err = ext3_htree_store_dirent(dir_file, 0, 0, de)) != 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1340: FILE: fs/ext3/namei.c:627:
+^I^Iret = ext3_htree_next_block(dir, HASH_NB_ALWAYS, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#1352: FILE: fs/ext3/namei.c:639:
+		if ((ret == 0) ||
+		    (count && ((hashval & 1) == 0)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1357: FILE: fs/ext3/namei.c:644:
+^Idxtrace(printk("Fill tree: returned %d entries, next hash: %x\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1357: FILE: fs/ext3/namei.c:644:
+	dxtrace(printk("Fill tree: returned %d entries, next hash: %x\n", 

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1362: FILE: fs/ext3/namei.c:649:
+	return (err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1365: FILE: fs/ext3/namei.c:652:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1370: FILE: fs/ext3/namei.c:657:
+static int dx_make_map (struct ext3_dir_entry_2 *de, int size,

CHECK:SPACING: No space is necessary after a cast
#1374: FILE: fs/ext3/namei.c:661:
+	char *base = (char *) de;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1376: FILE: fs/ext3/namei.c:663:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1377: FILE: fs/ext3/namei.c:664:
+	while ((char *) de < base + size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1377: FILE: fs/ext3/namei.c:664:
+	while ((char *) de < base + size)
+	{

CHECK:SPACING: No space is necessary after a cast
#1383: FILE: fs/ext3/namei.c:670:
+			map_tail->offs = (u32) ((char *) de - base);

CHECK:SPACING: No space is necessary after a cast
#1387: FILE: fs/ext3/namei.c:674:
+		de = (struct ext3_dir_entry_2 *) ((char *) de + le16_to_cpu(de->rec_len));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1392: FILE: fs/ext3/namei.c:679:
+static void dx_sort_map (struct dx_map_entry *map, unsigned count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1392: FILE: fs/ext3/namei.c:679:
+static void dx_sort_map (struct dx_map_entry *map, unsigned count)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1394: FILE: fs/ext3/namei.c:681:
+        struct dx_map_entry *p, *q, *top = map + count - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: fs/ext3/namei.c:681:
+        struct dx_map_entry *p, *q, *top = map + count - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1395: FILE: fs/ext3/namei.c:682:
+        int more;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1395: FILE: fs/ext3/namei.c:682:
+        int more;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1396: FILE: fs/ext3/namei.c:683:
+        /* Combsort until bubble sort doesn't suck */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1397: FILE: fs/ext3/namei.c:684:
+        while (count > 2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: fs/ext3/namei.c:684:
+        while (count > 2)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1397: FILE: fs/ext3/namei.c:684:
+        while (count > 2)
+	{

ERROR:CODE_INDENT: code indent should use tabs where possible
#1399: FILE: fs/ext3/namei.c:686:
+                count = count*10/13;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: fs/ext3/namei.c:686:
+                count = count*10/13;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1399: FILE: fs/ext3/namei.c:686:
+                count = count*10/13;
                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1399: FILE: fs/ext3/namei.c:686:
+                count = count*10/13;
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1400: FILE: fs/ext3/namei.c:687:
+                if (count - 9 < 2) /* 9, 10 -> 11 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: fs/ext3/namei.c:687:
+                if (count - 9 < 2) /* 9, 10 -> 11 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1401: FILE: fs/ext3/namei.c:688:
+                        count = 11;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1401: FILE: fs/ext3/namei.c:688:
+                        count = 11;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1402: FILE: fs/ext3/namei.c:689:
+                for (p = top, q = p - count; q >= map; p--, q--)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1402: FILE: fs/ext3/namei.c:689:
+                for (p = top, q = p - count; q >= map; p--, q--)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1403: FILE: fs/ext3/namei.c:690:
+                        if (p->hash < q->hash)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1403: FILE: fs/ext3/namei.c:690:
+                        if (p->hash < q->hash)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1404: FILE: fs/ext3/namei.c:691:
+                                swap(*p, *q);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1404: FILE: fs/ext3/namei.c:691:
+                                swap(*p, *q);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1405: FILE: fs/ext3/namei.c:692:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1405: FILE: fs/ext3/namei.c:692:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1406: FILE: fs/ext3/namei.c:693:
+        /* Garden variety bubble sort */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1407: FILE: fs/ext3/namei.c:694:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1407: FILE: fs/ext3/namei.c:694:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1408: FILE: fs/ext3/namei.c:695:
+                more = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1408: FILE: fs/ext3/namei.c:695:
+                more = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1409: FILE: fs/ext3/namei.c:696:
+                q = top;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1409: FILE: fs/ext3/namei.c:696:
+                q = top;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1410: FILE: fs/ext3/namei.c:697:
+                while (q-- > map)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1410: FILE: fs/ext3/namei.c:697:
+                while (q-- > map)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1410: FILE: fs/ext3/namei.c:697:
+                while (q-- > map)
+		{

ERROR:CODE_INDENT: code indent should use tabs where possible
#1412: FILE: fs/ext3/namei.c:699:
+                        if (q[1].hash >= q[0].hash)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1412: FILE: fs/ext3/namei.c:699:
+                        if (q[1].hash >= q[0].hash)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1414: FILE: fs/ext3/namei.c:701:
+                        swap(*(q+1), *q);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1414: FILE: fs/ext3/namei.c:701:
+                        swap(*(q+1), *q);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1414: FILE: fs/ext3/namei.c:701:
+                        swap(*(q+1), *q);
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1415: FILE: fs/ext3/namei.c:702:
+                        more = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: fs/ext3/namei.c:702:
+                        more = 1;$

ERROR:SPACING: space required before the open parenthesis '('
#1417: FILE: fs/ext3/namei.c:704:
+	} while(more);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1435: FILE: fs/ext3/namei.c:722:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1450: FILE: fs/ext3/namei.c:786:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1459: FILE: fs/ext3/namei.c:799:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1459: FILE: fs/ext3/namei.c:799:
+
+	

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1469: FILE: fs/ext3/namei.c:816:
+	unsigned blocksize;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err != ERR_BAD_DX_DIR'
#1487: FILE: fs/ext3/namei.c:833:
+		if (bh || (err != ERR_BAD_DX_DIR))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1489: FILE: fs/ext3/namei.c:835:
+		dxtrace(printk("ext3_find_entry: dx failed, falling back\n"));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1512: FILE: fs/ext3/namei.c:912:
+static struct buffer_head * ext3_dx_find_entry(struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: fs/ext3/namei.c:913:
+static struct buffer_head * ext3_dx_find_entry(struct dentry *dentry,
+		       struct ext3_dir_entry_2 **res_dir, int *err)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1515: FILE: fs/ext3/namei.c:915:
+	struct super_block * sb;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1526: FILE: fs/ext3/namei.c:926:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1528: FILE: fs/ext3/namei.c:928:
+	if (!(frame = dx_probe (dentry, 0, &hinfo, frames, err)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1528: FILE: fs/ext3/namei.c:928:
+	if (!(frame = dx_probe (dentry, 0, &hinfo, frames, err)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1533: FILE: fs/ext3/namei.c:933:
+		if (!(bh = ext3_bread (NULL,dir, block, 0, err)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1533: FILE: fs/ext3/namei.c:933:
+		if (!(bh = ext3_bread (NULL,dir, block, 0, err)))
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1533: FILE: fs/ext3/namei.c:933:
+		if (!(bh = ext3_bread (NULL,dir, block, 0, err)))

CHECK:SPACING: No space is necessary after a cast
#1535: FILE: fs/ext3/namei.c:935:
+		de = (struct ext3_dir_entry_2 *) bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#1536: FILE: fs/ext3/namei.c:936:
+		top = (struct ext3_dir_entry_2 *) ((char *) de + sb->s_blocksize -

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1538: FILE: fs/ext3/namei.c:938:
+		for (; de < top; de = ext3_next_entry(de))
+		if (ext3_match (namelen, name, de)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1539: FILE: fs/ext3/namei.c:939:
+		if (ext3_match (namelen, name, de)) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1542: FILE: fs/ext3/namei.c:942:
+				  (block<<EXT3_BLOCK_SIZE_BITS(sb))
 				        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#1543: FILE: fs/ext3/namei.c:943:
+					  +((char *)de - bh->b_data))) {
 					  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1544: FILE: fs/ext3/namei.c:944:
+				brelse (bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1548: FILE: fs/ext3/namei.c:948:
+			dx_release (frames);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1551: FILE: fs/ext3/namei.c:951:
+		brelse (bh);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1556: FILE: fs/ext3/namei.c:956:
+			ext3_warning(sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: fs/ext3/namei.c:957:
+			ext3_warning(sb, __FUNCTION__,
+			     "error reading index page in directory #%lu",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1563: FILE: fs/ext3/namei.c:963:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1566: FILE: fs/ext3/namei.c:966:
+	dxtrace(printk("%s not found\n", name));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1567: FILE: fs/ext3/namei.c:967:
+	dx_release (frames);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1580: FILE: fs/ext3/namei.c:988:
+		if (!inode) {
 			return ERR_PTR(-EACCES);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1594: FILE: fs/ext3/namei.c:1018:
+	unsigned rec_len = 0;

CHECK:SPACING: No space is necessary after a cast
#1597: FILE: fs/ext3/namei.c:1021:
+		struct ext3_dir_entry_2 *de = (struct ext3_dir_entry_2 *) (from + map->offs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1598: FILE: fs/ext3/namei.c:1022:
+		struct ext3_dir_entry_2 *de = (struct ext3_dir_entry_2 *) (from + map->offs);
+		rec_len = EXT3_DIR_REC_LEN(de->name_len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1599: FILE: fs/ext3/namei.c:1023:
+		memcpy (to, de, rec_len);

CHECK:SPACING: No space is necessary after a cast
#1600: FILE: fs/ext3/namei.c:1024:
+		((struct ext3_dir_entry_2 *) to)->rec_len =

CHECK:SPACING: No space is necessary after a cast
#1606: FILE: fs/ext3/namei.c:1030:
+	return (struct ext3_dir_entry_2 *) (to - rec_len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1609: FILE: fs/ext3/namei.c:1033:
+static struct ext3_dir_entry_2* dx_pack_dirents(char *base, int size)

CHECK:SPACING: No space is necessary after a cast
#1611: FILE: fs/ext3/namei.c:1035:
+	struct ext3_dir_entry_2 *next, *to, *prev, *de = (struct ext3_dir_entry_2 *) base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1612: FILE: fs/ext3/namei.c:1036:
+	unsigned rec_len = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1614: FILE: fs/ext3/namei.c:1038:
+	prev = to = de;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1615: FILE: fs/ext3/namei.c:1039:
+	while ((char*)de < base + size) {

CHECK:SPACING: No space is necessary after a cast
#1616: FILE: fs/ext3/namei.c:1040:
+		next = (struct ext3_dir_entry_2 *) ((char *) de +

CHECK:SPACING: No space is necessary after a cast
#1624: FILE: fs/ext3/namei.c:1048:
+			to = (struct ext3_dir_entry_2 *) (((char *) to) + rec_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1632: FILE: fs/ext3/namei.c:1056:
+static struct ext3_dir_entry_2 *do_split(handle_t *handle, struct inode *dir,
+			struct buffer_head **bh,struct dx_frame *frame,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1632: FILE: fs/ext3/namei.c:1056:
+			struct buffer_head **bh,struct dx_frame *frame,
 			                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1635: FILE: fs/ext3/namei.c:1059:
+	unsigned blocksize = dir->i_sb->s_blocksize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1636: FILE: fs/ext3/namei.c:1060:
+	unsigned count, continued;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1642: FILE: fs/ext3/namei.c:1066:
+	unsigned split;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1646: FILE: fs/ext3/namei.c:1070:
+	bh2 = ext3_append (handle, dir, &newblock, error);

WARNING:INDENTED_LABEL: labels should not be indented
#1656: FILE: fs/ext3/namei.c:1080:
+	journal_error:

CHECK:SPACING: No space is necessary after a cast
#1671: FILE: fs/ext3/namei.c:1095:
+	map = (struct dx_map_entry *) (data2 + blocksize);

CHECK:SPACING: No space is necessary after a cast
#1672: FILE: fs/ext3/namei.c:1096:
+	count = dx_make_map ((struct ext3_dir_entry_2 *) data1,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1672: FILE: fs/ext3/namei.c:1096:
+	count = dx_make_map ((struct ext3_dir_entry_2 *) data1,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1675: FILE: fs/ext3/namei.c:1099:
+	split = count/2; // need to adjust to actual middle
 	             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1676: FILE: fs/ext3/namei.c:1100:
+	dx_sort_map (map, count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1679: FILE: fs/ext3/namei.c:1103:
+	dxtrace(printk("Split block %i at %x, %i/%i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1680: FILE: fs/ext3/namei.c:1104:
+	dxtrace(printk("Split block %i at %x, %i/%i\n",
+		dx_get_block(frame->at), hash2, split, count-split));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1680: FILE: fs/ext3/namei.c:1104:
+		dx_get_block(frame->at), hash2, split, count-split));
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1684: FILE: fs/ext3/namei.c:1108:
+	de = dx_pack_dirents(data1,blocksize);
 	                          ^

CHECK:SPACING: No space is necessary after a cast
#1685: FILE: fs/ext3/namei.c:1109:
+	de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#1686: FILE: fs/ext3/namei.c:1110:
+	de2->rec_len = cpu_to_le16(data2 + blocksize - (char *) de2);

CHECK:SPACING: No space is necessary after a cast
#1687: FILE: fs/ext3/namei.c:1111:
+	dxtrace(dx_show_leaf (hinfo, (struct ext3_dir_entry_2 *) data1, blocksize, 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1687: FILE: fs/ext3/namei.c:1111:
+	dxtrace(dx_show_leaf (hinfo, (struct ext3_dir_entry_2 *) data1, blocksize, 1));

CHECK:SPACING: No space is necessary after a cast
#1688: FILE: fs/ext3/namei.c:1112:
+	dxtrace(dx_show_leaf (hinfo, (struct ext3_dir_entry_2 *) data2, blocksize, 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1688: FILE: fs/ext3/namei.c:1112:
+	dxtrace(dx_show_leaf (hinfo, (struct ext3_dir_entry_2 *) data2, blocksize, 1));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1691: FILE: fs/ext3/namei.c:1115:
+	if (hinfo->hash >= hash2)
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1696: FILE: fs/ext3/namei.c:1120:
+	dx_insert_block (frame, hash2 + continued, newblock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1697: FILE: fs/ext3/namei.c:1121:
+	err = ext3_journal_dirty_metadata (handle, bh2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1700: FILE: fs/ext3/namei.c:1124:
+	err = ext3_journal_dirty_metadata (handle, frame->bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1703: FILE: fs/ext3/namei.c:1127:
+	brelse (bh2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1704: FILE: fs/ext3/namei.c:1128:
+	dxtrace(dx_show_index ("frame", frame->entries));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1710: FILE: fs/ext3/namei.c:1134:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1718: FILE: fs/ext3/namei.c:1142:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1724: FILE: fs/ext3/namei.c:1148:
+			     struct buffer_head * bh)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1733: FILE: fs/ext3/namei.c:1157:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1738: FILE: fs/ext3/namei.c:1162:
+		while ((char *) de <= top) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1741: FILE: fs/ext3/namei.c:1165:
+				brelse (bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1744: FILE: fs/ext3/namei.c:1168:
+			if (ext3_match (namelen, name, de)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1745: FILE: fs/ext3/namei.c:1169:
+				brelse (bh);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1750: FILE: fs/ext3/namei.c:1174:
+			if ((de->inode? rlen - nlen: rlen) >= reclen)
 			              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1750: FILE: fs/ext3/namei.c:1174:
+			if ((de->inode? rlen - nlen: rlen) >= reclen)
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#1755: FILE: fs/ext3/namei.c:1179:
+		if ((char *) de > top)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1765: FILE: fs/ext3/namei.c:1189:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1771: FILE: fs/ext3/namei.c:1195:
+		struct ext3_dir_entry_2 *de1 = (struct ext3_dir_entry_2 *)((char *)de + nlen);
+		de1->rec_len = cpu_to_le16(rlen - nlen);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1776: FILE: fs/ext3/namei.c:1200:
+	if (inode) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1779: FILE: fs/ext3/namei.c:1203:
+	} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1782: FILE: fs/ext3/namei.c:1206:
+	memcpy (de->name, name, namelen);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1794: FILE: fs/ext3/namei.c:1218:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1823: FILE: fs/ext3/namei.c:1247:
+	unsigned	len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1825: FILE: fs/ext3/namei.c:1249:
+	unsigned	blocksize;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1829: FILE: fs/ext3/namei.c:1253:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1831: FILE: fs/ext3/namei.c:1255:
+	dxtrace(printk("Creating index\n"));

CHECK:SPACING: No space is necessary after a cast
#1838: FILE: fs/ext3/namei.c:1262:
+	root = (struct dx_root *) bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1839: FILE: fs/ext3/namei.c:1263:
+^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1840: FILE: fs/ext3/namei.c:1264:
+	bh2 = ext3_append (handle, dir, &block, &retval);

CHECK:SPACING: No space is necessary after a cast
#1851: FILE: fs/ext3/namei.c:1275:
+	len = ((char *) root) + blocksize - (char *) de;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1852: FILE: fs/ext3/namei.c:1276:
+	memcpy (data1, de, len);

CHECK:SPACING: No space is necessary after a cast
#1853: FILE: fs/ext3/namei.c:1277:
+	de = (struct ext3_dir_entry_2 *) data1;

CHECK:SPACING: No space is necessary after a cast
#1855: FILE: fs/ext3/namei.c:1279:
+	while (((char *) de2=(char*)de+le16_to_cpu(de->rec_len)) < top)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1855: FILE: fs/ext3/namei.c:1279:
+	while (((char *) de2=(char*)de+le16_to_cpu(de->rec_len)) < top)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1855: FILE: fs/ext3/namei.c:1279:
+	while (((char *) de2=(char*)de+le16_to_cpu(de->rec_len)) < top)
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1855: FILE: fs/ext3/namei.c:1279:
+	while (((char *) de2=(char*)de+le16_to_cpu(de->rec_len)) < top)
 	                              ^

CHECK:SPACING: No space is necessary after a cast
#1857: FILE: fs/ext3/namei.c:1281:
+	de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#1859: FILE: fs/ext3/namei.c:1283:
+	de = (struct ext3_dir_entry_2 *) (&root->dotdot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1861: FILE: fs/ext3/namei.c:1285:
+	memset (&root->info, 0, sizeof(root->info));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1865: FILE: fs/ext3/namei.c:1289:
+	dx_set_block (entries, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1866: FILE: fs/ext3/namei.c:1290:
+	dx_set_count (entries, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1867: FILE: fs/ext3/namei.c:1291:
+	dx_set_limit (entries, dx_root_limit(dir, sizeof(root->info)));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1878: FILE: fs/ext3/namei.c:1302:
+	de = do_split(handle,dir, &bh, frame, &hinfo, &retval);
 	                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1879: FILE: fs/ext3/namei.c:1303:
+	dx_release (frames);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1912: FILE: fs/ext3/namei.c:1331:
+	int	dx_fallback=0;
 	   	           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1914: FILE: fs/ext3/namei.c:1333:
+	unsigned blocksize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1915: FILE: fs/ext3/namei.c:1334:
+	unsigned nlen, rlen;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retval != ERR_BAD_DX_DIR'
#1928: FILE: fs/ext3/namei.c:1344:
+		if (!retval || (retval != ERR_BAD_DX_DIR))

ERROR:SPACING: space required before the open parenthesis '('
#1938: FILE: fs/ext3/namei.c:1354:
+		if(!bh)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1987: FILE: fs/ext3/namei.c:1387:
+	struct buffer_head * bh;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1989: FILE: fs/ext3/namei.c:1389:
+	struct super_block * sb = dir->i_sb;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2010: FILE: fs/ext3/namei.c:1399:
+	if (!(bh = ext3_bread(handle,dir, dx_get_block(frame->at), 0, &err)))
 	                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2010: FILE: fs/ext3/namei.c:1399:
+	if (!(bh = ext3_bread(handle,dir, dx_get_block(frame->at), 0, &err)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2036: FILE: fs/ext3/namei.c:1414:
+	dxtrace(printk("using %u of %u node entries\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2041: FILE: fs/ext3/namei.c:1419:
+		unsigned icount = dx_get_count(entries);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2049: FILE: fs/ext3/namei.c:1427:
+			ext3_warning(sb, __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2071: FILE: fs/ext3/namei.c:1432:
+		bh2 = ext3_append (handle, dir, &newblock, &err);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2083: FILE: fs/ext3/namei.c:1444:
+			unsigned icount1 = icount/2, icount2 = icount - icount1;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2083: FILE: fs/ext3/namei.c:1444:
+			unsigned icount1 = icount/2, icount2 = icount - icount1;
 			                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2084: FILE: fs/ext3/namei.c:1445:
+			unsigned hash2 = dx_get_hash(entries + icount1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2085: FILE: fs/ext3/namei.c:1446:
+			unsigned hash2 = dx_get_hash(entries + icount1);
+			dxtrace(printk("Split index %i/%i\n", icount1, icount2));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2085: FILE: fs/ext3/namei.c:1446:
+			dxtrace(printk("Split index %i/%i\n", icount1, icount2));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2086: FILE: fs/ext3/namei.c:1447:
+^I^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2089: FILE: fs/ext3/namei.c:1450:
+			err = ext3_journal_get_write_access(handle,
+							     frames[0].bh);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2092: FILE: fs/ext3/namei.c:1453:
+^I^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#2093: FILE: fs/ext3/namei.c:1454:
+			memcpy ((char *) entries2, (char *) (entries + icount1),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2093: FILE: fs/ext3/namei.c:1454:
+			memcpy ((char *) entries2, (char *) (entries + icount1),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2095: FILE: fs/ext3/namei.c:1456:
+			dx_set_count (entries, icount1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2096: FILE: fs/ext3/namei.c:1457:
+			dx_set_count (entries2, icount2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2097: FILE: fs/ext3/namei.c:1458:
+			dx_set_limit (entries2, dx_node_limit(dir));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2101: FILE: fs/ext3/namei.c:1462:
+				frame->at = at = at - entries - icount1 + entries2;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2102: FILE: fs/ext3/namei.c:1463:
+				frame->entries = entries = entries2;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2132: FILE: fs/ext3/namei.c:1466:
+			dx_insert_block (frames + 0, hash2, newblock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2133: FILE: fs/ext3/namei.c:1467:
+			dxtrace(dx_show_index ("node", frames[1].entries));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2134: FILE: fs/ext3/namei.c:1468:
+			dxtrace(dx_show_index ("node",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2135: FILE: fs/ext3/namei.c:1469:
+			dxtrace(dx_show_index ("node",
+			       ((struct dx_node *) bh2->b_data)->entries));

CHECK:SPACING: No space is necessary after a cast
#2135: FILE: fs/ext3/namei.c:1469:
+			       ((struct dx_node *) bh2->b_data)->entries));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2139: FILE: fs/ext3/namei.c:1473:
+			brelse (bh2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2141: FILE: fs/ext3/namei.c:1475:
+			dxtrace(printk("Creating second level index...\n"));

CHECK:SPACING: No space is necessary after a cast
#2142: FILE: fs/ext3/namei.c:1476:
+			memcpy((char *) entries2, (char *) entries,

CHECK:SPACING: No space is necessary after a cast
#2149: FILE: fs/ext3/namei.c:1483:
+			((struct dx_root *) frames[0].bh->b_data)->info.indirect_levels = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2153: FILE: fs/ext3/namei.c:1487:
+			frame->at = at = at - entries + entries2;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2154: FILE: fs/ext3/namei.c:1488:
+			frame->entries = entries = entries2;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2157: FILE: fs/ext3/namei.c:1491:
+			err = ext3_journal_get_write_access(handle,
+							     frame->bh);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2174: FILE: fs/ext3/namei.c:1503:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2195: FILE: fs/ext3/namei.c:1601:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#2208: FILE: fs/ext3/namei.c:1628:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 3);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2208: FILE: fs/ext3/namei.c:1628:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 3);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2209: FILE: fs/ext3/namei.c:1629:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2223: FILE: fs/ext3/namei.c:1659:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2247: FILE: fs/ext3/namei.c:1709:
+		iput (inode);
 		^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2247: FILE: fs/ext3/namei.c:1709:
+		iput (inode);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2321: FILE: fs/ext3/namei.c:1944:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2345: FILE: fs/ext3/namei.c:2002:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#2367: FILE: fs/ext3/namei.c:2058:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 5);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2367: FILE: fs/ext3/namei.c:2058:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 5);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2368: FILE: fs/ext3/namei.c:2059:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2379: FILE: fs/ext3/namei.c:2071:
+	if (l > sizeof (EXT3_I(inode)->i_data)) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2392: FILE: fs/ext3/namei.c:2083:
+			iput (inode);
 			^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2392: FILE: fs/ext3/namei.c:2083:
+			iput (inode);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2398: FILE: fs/ext3/namei.c:2088:
+		memcpy((char*)&EXT3_I(inode)->i_data,symname,l);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2398: FILE: fs/ext3/namei.c:2088:
+		memcpy((char*)&EXT3_I(inode)->i_data,symname,l);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2398: FILE: fs/ext3/namei.c:2088:
+		memcpy((char*)&EXT3_I(inode)->i_data,symname,l);
 		                                            ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2421: FILE: fs/ext3/namei.c:2108:
+	if (inode->i_nlink >= EXT3_LINK_MAX) {
 		return -EMLINK;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2429: FILE: fs/ext3/namei.c:2114:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#2442: FILE: fs/ext3/namei.c:2150:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 2);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2442: FILE: fs/ext3/namei.c:2150:
+^I^I^I ^I^IEXT3_INDEX_EXTRA_TRANS_BLOCKS + 2);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2443: FILE: fs/ext3/namei.c:2151:
+	if (IS_ERR(handle)) {
 		return PTR_ERR(handle);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2469: FILE: fs/ext3/namei.c:2232:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2479: FILE: fs/ext3/namei.c:2242:
+		ext3_warning(old_dir->i_sb, "ext3_rename",
+				"Deleting old file (%lu), %d, error=%d",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2525: FILE: fs/ext3/super.c:920:
 
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2533: FILE: fs/ext3/super.c:1100:
+	for (i=0; i < 4; i++)
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2546: FILE: include/linux/ext2_fs_i.h:32:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2546: FILE: include/linux/ext2_fs_i.h:32:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2547: FILE: include/linux/ext2_fs_i.h:33:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2547: FILE: include/linux/ext2_fs_i.h:33:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2547: FILE: include/linux/ext2_fs_i.h:33:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2548: FILE: include/linux/ext2_fs_i.h:34:
+ ^I * i_block_group is the number of the block group which contains$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2548: FILE: include/linux/ext2_fs_i.h:34:
+ ^I * i_block_group is the number of the block group which contains$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2549: FILE: include/linux/ext2_fs_i.h:35:
+ ^I * this file's inode.  Constant across the lifetime of the inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2549: FILE: include/linux/ext2_fs_i.h:35:
+ ^I * this file's inode.  Constant across the lifetime of the inode,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2550: FILE: include/linux/ext2_fs_i.h:36:
+ ^I * it is ued for making block allocation decisions - we try to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2550: FILE: include/linux/ext2_fs_i.h:36:
+ ^I * it is ued for making block allocation decisions - we try to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2551: FILE: include/linux/ext2_fs_i.h:37:
+ ^I * place a file's data blocks near its inode block, and new inodes$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2551: FILE: include/linux/ext2_fs_i.h:37:
+ ^I * place a file's data blocks near its inode block, and new inodes$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2552: FILE: include/linux/ext2_fs_i.h:38:
+ ^I * near to their parent directory's inode.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2552: FILE: include/linux/ext2_fs_i.h:38:
+ ^I * near to their parent directory's inode.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2553: FILE: include/linux/ext2_fs_i.h:39:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2553: FILE: include/linux/ext2_fs_i.h:39:
+ ^I */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2555: FILE: include/linux/ext2_fs_i.h:41:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2555: FILE: include/linux/ext2_fs_i.h:41:
+ $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2565: FILE: include/linux/ext2_fs_i.h:51:
+	 * i_next_alloc_block.  it the the physical block number of

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#2600: FILE: include/linux/ext3_fs.h:607:
+  #define is_dx(dir) (EXT3_HAS_COMPAT_FEATURE(dir->i_sb, \
+					      EXT3_FEATURE_COMPAT_DIR_INDEX) && \
+		      (EXT3_I(dir)->i_flags & EXT3_INDEX_FL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dir' may be better as '(dir)' to avoid precedence issues
#2600: FILE: include/linux/ext3_fs.h:607:
+  #define is_dx(dir) (EXT3_HAS_COMPAT_FEATURE(dir->i_sb, \
+					      EXT3_FEATURE_COMPAT_DIR_INDEX) && \
+		      (EXT3_I(dir)->i_flags & EXT3_INDEX_FL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#2603: FILE: include/linux/ext3_fs.h:610:
+#define EXT3_DIR_LINK_MAX(dir) (!is_dx(dir) && (dir)->i_nlink >= EXT3_LINK_MAX)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#2604: FILE: include/linux/ext3_fs.h:611:
+#define EXT3_DIR_LINK_EMPTY(dir) ((dir)->i_nlink == 2 || (dir)->i_nlink == 1)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2619: FILE: include/linux/ext3_fs.h:626:
+struct dx_hash_info
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2634: FILE: include/linux/ext3_fs.h:641:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2643: FILE: include/linux/ext3_fs.h:652:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2675: FILE: include/linux/ext3_fs.h:702:
+extern int ext3_htree_store_dirent(struct file *dir_file, __u32 hash,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2676: FILE: include/linux/ext3_fs.h:703:
+extern int ext3_htree_store_dirent(struct file *dir_file, __u32 hash,
+				    __u32 minor_hash,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2678: FILE: include/linux/ext3_fs.h:705:
+extern void ext3_htree_free_dir_info(struct dir_private_info *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2684: FILE: include/linux/ext3_fs.h:711:
+extern int ext3fs_dirhash(const char *name, int len, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2685: FILE: include/linux/ext3_fs.h:712:
+			  dx_hash_info *hinfo);
 			               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2694: FILE: include/linux/ext3_fs.h:746:
+extern int ext3_htree_fill_tree(struct file *dir_file, __u32 start_hash,

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2726: FILE: include/linux/ext3_fs_i.h:56:
+	 * it the the physical block number of the block which was most-recently

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2764: FILE: include/linux/rbtree.h:123:
+extern rb_node_t *rb_get_first(rb_root_t *root);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2765: FILE: include/linux/rbtree.h:124:
+extern rb_node_t *rb_get_next(rb_node_t *n);

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2773: FILE: lib/rbtree.c:17:
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2814: FILE: lib/rbtree.c:328:
+		return n;
+	} else {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315178.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 191 errors, 288 warnings, 156 checks, 2663 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315178.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
