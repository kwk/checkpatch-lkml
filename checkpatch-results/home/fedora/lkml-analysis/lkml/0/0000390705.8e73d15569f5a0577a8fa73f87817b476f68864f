WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
[PATCH] IBM PCI Hotplug: Clean up the error handling logic for a number of functions, and fix a locking mess.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#28: 
--- a/drivers/hotplug/ibmphp.h	Mon Feb 24 17:16:04 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#34: FILE: drivers/hotplug/ibmphp.h:764:
+extern int ibmphp_do_disable_slot (struct slot *slot_cur);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#34: FILE: drivers/hotplug/ibmphp.h:764:
+extern int ibmphp_do_disable_slot (struct slot *slot_cur);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#95: FILE: drivers/hotplug/ibmphp_core.c:1304:
+		err ("Adding this card exceeds the limitations of this bus.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: drivers/hotplug/ibmphp_core.c:1305:
+		err ("(i.e., >1 133MHz cards running on same bus, or "

WARNING:SPLIT_STRING: quoted string split across lines
#97: FILE: drivers/hotplug/ibmphp_core.c:1306:
+		err ("(i.e., >1 133MHz cards running on same bus, or "
+		     ">2 66 PCI cards running on same bus\n.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#98: FILE: drivers/hotplug/ibmphp_core.c:1307:
+		err ("Try hot-adding into another bus \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#98: FILE: drivers/hotplug/ibmphp_core.c:1307:
+		err ("Try hot-adding into another bus \n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: drivers/hotplug/ibmphp_core.c:1353:
+	if (SLOT_POWER (slot_cur->status) && (SLOT_BUS_SPEED (slot_cur->status))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: drivers/hotplug/ibmphp_core.c:1353:
+	if (SLOT_POWER (slot_cur->status) && (SLOT_BUS_SPEED (slot_cur->status))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur->status'
#151: FILE: drivers/hotplug/ibmphp_core.c:1353:
+	if (SLOT_POWER (slot_cur->status) && (SLOT_BUS_SPEED (slot_cur->status))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur->status'
#151: FILE: drivers/hotplug/ibmphp_core.c:1353:
+	if (SLOT_POWER (slot_cur->status) && (SLOT_BUS_SPEED (slot_cur->status))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: drivers/hotplug/ibmphp_core.c:1359:
+	if (!(SLOT_POWER (slot_cur->status))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur->status'
#158: FILE: drivers/hotplug/ibmphp_core.c:1359:
+	if (!(SLOT_POWER (slot_cur->status))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: drivers/hotplug/ibmphp_core.c:1367:
+		 * kmalloc n.e.ways, and update_slot_info allocates some */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: drivers/hotplug/ibmphp_core.c:1408:
+	attn_off (slot_cur);	/* need to turn off if was blinking b4 */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: drivers/hotplug/ibmphp_core.c:1409:
+	attn_on (slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: drivers/hotplug/ibmphp_core.c:1411:
+	rcpr = slot_update (&slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#250: FILE: drivers/hotplug/ibmphp_core.c:1416:
+	ibmphp_update_slot_info (slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: drivers/hotplug/ibmphp_core.c:1420:
+	attn_off (slot_cur);	/* need to turn off if was blinking b4 */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: drivers/hotplug/ibmphp_core.c:1421:
+	attn_on (slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: drivers/hotplug/ibmphp_core.c:1422:
+	rcpr = power_off (slot_cur);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: drivers/hotplug/ibmphp_core.c:1440:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: drivers/hotplug/ibmphp_core.c:1447:
+int ibmphp_do_disable_slot (struct slot *slot_cur)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur == NULL'
#294: FILE: drivers/hotplug/ibmphp_core.c:1455:
+	if ((slot_cur == NULL) || (slot_cur->ctrl == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur->ctrl == NULL'
#294: FILE: drivers/hotplug/ibmphp_core.c:1455:
+	if ((slot_cur == NULL) || (slot_cur->ctrl == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#294: FILE: drivers/hotplug/ibmphp_core.c:1455:
+	if ((slot_cur == NULL) || (slot_cur->ctrl == NULL)) {
 		return -ENODEV;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot_cur"
#294: FILE: drivers/hotplug/ibmphp_core.c:1455:
+	if ((slot_cur == NULL) || (slot_cur->ctrl == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot_cur->ctrl"
#294: FILE: drivers/hotplug/ibmphp_core.c:1455:
+	if ((slot_cur == NULL) || (slot_cur->ctrl == NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: drivers/hotplug/ibmphp_core.c:1484:
+		err ("Please check to see if it was statically linked or is "

WARNING:SPLIT_STRING: quoted string split across lines
#349: FILE: drivers/hotplug/ibmphp_core.c:1485:
+		err ("Please check to see if it was statically linked or is "
+		     "in use otherwise. (perhaps the driver is not 'hot-removable')\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#386: FILE: drivers/hotplug/ibmphp_core.c:1508:
+	rc = ibmphp_hpc_writeslot (slot_cur, HPC_SLOT_OFF);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#395: FILE: drivers/hotplug/ibmphp_core.c:1513:
+	rc = slot_update (&slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: drivers/hotplug/ibmphp_core.c:1524:
+	attn_off (slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: drivers/hotplug/ibmphp_core.c:1525:
+	attn_on (slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: drivers/hotplug/ibmphp_core.c:1526:
+	if (slot_update (&slot_cur)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&slot_cur'
#409: FILE: drivers/hotplug/ibmphp_core.c:1526:
+	if (slot_update (&slot_cur)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: drivers/hotplug/ibmphp_core.c:1530:
+^Iif (flag)^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#414: FILE: drivers/hotplug/ibmphp_core.c:1531:
+		ibmphp_update_slot_info (slot_cur);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: drivers/hotplug/ibmphp_core.c:1564:
+	kfree (ibmphp_pci_bus);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#440: FILE: drivers/hotplug/ibmphp_core.c:1587:
+		rc -ENODEV;
 		   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#453: FILE: drivers/hotplug/ibmphp_core.c:1599:
+	if ((rc = ibmphp_access_ebda ()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#453: FILE: drivers/hotplug/ibmphp_core.c:1599:
+	if ((rc = ibmphp_access_ebda ()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#461: FILE: drivers/hotplug/ibmphp_core.c:1603:
+	if ((rc = ibmphp_rsrc_init ()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#461: FILE: drivers/hotplug/ibmphp_core.c:1603:
+	if ((rc = ibmphp_rsrc_init ()))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#471: FILE: drivers/hotplug/ibmphp_core.c:1609:
+	if ((rc = ibmphp_register_pci ()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#471: FILE: drivers/hotplug/ibmphp_core.c:1609:
+	if ((rc = ibmphp_register_pci ()))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: drivers/hotplug/ibmphp_core.c:1622:
+^I/* lock ourselves into memory with a module $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#491: FILE: drivers/hotplug/ibmphp_core.c:1623:
+	 * count of -1 so that no one can unload us. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#499: FILE: drivers/hotplug/ibmphp_core.c:1630:
+	ibmphp_unload ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: drivers/hotplug/ibmphp_hpc.c:1066:
+		rc = ibmphp_do_disable_slot (pslot);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 35 warnings, 10 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
