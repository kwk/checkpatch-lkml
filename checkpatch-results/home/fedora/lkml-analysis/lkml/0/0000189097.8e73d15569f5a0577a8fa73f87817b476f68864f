WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Clean up both comments and function definitions to match the established style

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#51: FILE: fs/cifs/cifs_unicode.h:41:
+   in each source file. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#87: FILE: fs/cifs/cifs_unicode.h:66:
+/* UniStrcat:  Concatenate the second string to the first
+   Returns:    Address of the first string */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#87: FILE: fs/cifs/cifs_unicode.h:66:
+   Returns:    Address of the first string */

CHECK:CAMELCASE: Avoid CamelCase: <UniStrcat>
#88: FILE: fs/cifs/cifs_unicode.h:67:
+static inline wchar_t *UniStrcat(wchar_t *ucs1, const wchar_t *ucs2)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#109: FILE: fs/cifs/cifs_unicode.h:78:
+/* UniStrchr:  Find a character in a string
+   Returns:    Address of first occurrence of character in string or NULL if

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: fs/cifs/cifs_unicode.h:79:
+               the character is not in the string */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#110: FILE: fs/cifs/cifs_unicode.h:79:
+               the character is not in the string */

CHECK:CAMELCASE: Avoid CamelCase: <UniStrchr>
#111: FILE: fs/cifs/cifs_unicode.h:80:
+static inline wchar_t *UniStrchr(const wchar_t *ucs, wchar_t uc)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#130: FILE: fs/cifs/cifs_unicode.h:91:
+/* UniStrcmp:  Compare two strings
+   Returns:

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/cifs/cifs_unicode.h:92:
+               < 0:  First string is less than second$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/cifs/cifs_unicode.h:93:
+               = 0:  Strings are equal$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: fs/cifs/cifs_unicode.h:94:
+               > 0:  First string is greater than second */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: fs/cifs/cifs_unicode.h:94:
+               > 0:  First string is greater than second */

CHECK:CAMELCASE: Avoid CamelCase: <UniStrcmp>
#134: FILE: fs/cifs/cifs_unicode.h:95:
+static inline int UniStrcmp(const wchar_t *ucs1, const wchar_t *ucs2)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrcpy>
#148: FILE: fs/cifs/cifs_unicode.h:105:
+static inline wchar_t *UniStrcpy(wchar_t *ucs1, const wchar_t *ucs2)

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: fs/cifs/cifs_unicode.h:114:
+               bytes) */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#162: FILE: fs/cifs/cifs_unicode.h:114:
+/* UniStrlen:  Return the length of a string (in 16 bit Unicode chars not
+               bytes) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#162: FILE: fs/cifs/cifs_unicode.h:114:
+               bytes) */

CHECK:CAMELCASE: Avoid CamelCase: <UniStrlen>
#163: FILE: fs/cifs/cifs_unicode.h:115:
+static inline size_t UniStrlen(const wchar_t *ucs1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/cifs/cifs_unicode.h:125:
+                string (length limited) */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#177: FILE: fs/cifs/cifs_unicode.h:125:
+/* UniStrnlen:  Return the length (in 16 bit Unicode chars not bytes) of a
+                string (length limited) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#177: FILE: fs/cifs/cifs_unicode.h:125:
+                string (length limited) */

CHECK:CAMELCASE: Avoid CamelCase: <UniStrnlen>
#178: FILE: fs/cifs/cifs_unicode.h:126:
+static inline size_t UniStrnlen(const wchar_t *ucs1, int maxlen)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrncat>
#192: FILE: fs/cifs/cifs_unicode.h:139:
+static inline wchar_t *UniStrncat(wchar_t *ucs1, const wchar_t *ucs2, size_t n)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrncmp>
#214: FILE: fs/cifs/cifs_unicode.h:154:
+static inline int UniStrncmp(const wchar_t *ucs1, const wchar_t *ucs2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: fs/cifs/cifs_unicode.h:155:
+static inline int UniStrncmp(const wchar_t *ucs1, const wchar_t *ucs2,
+	size_t n)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrncmp_le>
#233: FILE: fs/cifs/cifs_unicode.h:167:
+static inline int UniStrncmp_le(const wchar_t *ucs1, const wchar_t *ucs2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: fs/cifs/cifs_unicode.h:168:
+static inline int UniStrncmp_le(const wchar_t *ucs1, const wchar_t *ucs2,
+	size_t n)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrncpy>
#252: FILE: fs/cifs/cifs_unicode.h:180:
+static inline wchar_t *UniStrncpy(wchar_t *ucs1, const wchar_t *ucs2, size_t n)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrncpy_le>
#272: FILE: fs/cifs/cifs_unicode.h:194:
+static inline wchar_t *UniStrncpy_le(wchar_t *ucs1, const wchar_t *ucs2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: fs/cifs/cifs_unicode.h:195:
+static inline wchar_t *UniStrncpy_le(wchar_t *ucs1, const wchar_t *ucs2,
+	size_t n)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#297: FILE: fs/cifs/cifs_unicode.h:209:
+/* UniStrstr:  Find a string in a string
+   Returns:    Address of first match found

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: fs/cifs/cifs_unicode.h:210:
+               NULL if no matching string is found */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#298: FILE: fs/cifs/cifs_unicode.h:210:
+               NULL if no matching string is found */

CHECK:CAMELCASE: Avoid CamelCase: <UniStrstr>
#299: FILE: fs/cifs/cifs_unicode.h:211:
+static inline wchar_t *UniStrstr(const wchar_t *ucs1, const wchar_t *ucs2)

CHECK:CAMELCASE: Avoid CamelCase: <UniToupper>
#321: FILE: fs/cifs/cifs_unicode.h:235:
+static inline wchar_t UniToupper(register wchar_t uc)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrupr>
#339: FILE: fs/cifs/cifs_unicode.h:255:
+static inline wchar_t *UniStrupr(register wchar_t *upin)

CHECK:CAMELCASE: Avoid CamelCase: <UniTolower>
#362: FILE: fs/cifs/cifs_unicode.h:270:
+static inline wchar_t UniTolower(wchar_t uc)

CHECK:CAMELCASE: Avoid CamelCase: <UniStrlwr>
#380: FILE: fs/cifs/cifs_unicode.h:290:
+static inline wchar_t *UniStrlwr(register wchar_t *upin)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 14 warnings, 19 checks, 338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
