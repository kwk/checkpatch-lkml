WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
I've discussed adding Page Attribute Table (PAT) support to the kernel w/ a few developers offline. They were very supportive and suggested I bring the discussion to lkml so others could get involved.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#47: 
I discussed this some with Jeff Hartmann, who had some initial development code that was integrated into agpgart, for marking agp pages WC as they were allocated. I think it would be preferable to have pat support seperate from agpgart. In that way, other drivers could make use of PAT support for other means (such as mapping the framebuffer). Jeff Hartmann sent us a pass at adding PAT support to agpgart. We've modified his code slightly to be more generic (standalone from agpgart) and usable via the traditional __pgprot() macros (and therefore with the change_page_attr() function).
                                                                                                                                                                                                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: arch/i386/kernel/pat.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/i386/kernel/pat.c:20:
+ * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'losely' may be misspelled - perhaps 'loosely'?
#131: FILE: arch/i386/kernel/pat.c:23:
+ * Very losely based on code I wrote at VA Linux Systems in 2001.
         ^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#144: FILE: arch/i386/kernel/pat.c:36:
+#include <asm/bitops.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#145: FILE: arch/i386/kernel/pat.c:37:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#147: FILE: arch/i386/kernel/pat.c:39:
+#include <asm/cpufeature.h>

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: arch/i386/kernel/pat.c:45:
+	switch(boot_cpu_data.x86_vendor) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#165: FILE: arch/i386/kernel/pat.c:57:
+		printk("Unknown vendor in set_pat\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_pat', this function's name, in a string
#165: FILE: arch/i386/kernel/pat.c:57:
+		printk("Unknown vendor in set_pat\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: arch/i386/kernel/pat.c:58:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/i386/kernel/pat.c:67:
+    __save_flags(flags); __cli();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/i386/kernel/pat.c:68:
+    if (test_bit(X86_FEATURE_PGE, &boot_cpu_data.x86_capability)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#176: FILE: arch/i386/kernel/pat.c:68:
+    if (test_bit(X86_FEATURE_PGE, &boot_cpu_data.x86_capability)) {
+		cr4val = read_cr4();

CHECK:SPACING: No space is necessary after a cast
#178: FILE: arch/i386/kernel/pat.c:70:
+		write_cr4(cr4val & (unsigned char) ~(1<<7));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#178: FILE: arch/i386/kernel/pat.c:70:
+		write_cr4(cr4val & (unsigned char) ~(1<<7));
 		                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#180: FILE: arch/i386/kernel/pat.c:72:
+	cr0val = read_cr0() | (1<<30);
 	                        ^

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#188: FILE: arch/i386/kernel/pat.c:80:
+	/* Reenable the caches */
 	   ^^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#190: FILE: arch/i386/kernel/pat.c:82:
+	write_cr0(read_cr0() & ~(1<<30));
 	                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: arch/i386/kernel/pat.c:83:
+    if (test_bit(X86_FEATURE_PGE, &boot_cpu_data.x86_capability)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#191: FILE: arch/i386/kernel/pat.c:83:
+    if (test_bit(X86_FEATURE_PGE, &boot_cpu_data.x86_capability)) {
+		write_cr4(cr4val);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#191: FILE: arch/i386/kernel/pat.c:83:
+    if (test_bit(X86_FEATURE_PGE, &boot_cpu_data.x86_capability)) {
+		write_cr4(cr4val);
+    }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/i386/kernel/pat.c:85:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: arch/i386/kernel/pat.c:86:
+    __restore_flags(flags);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#211: FILE: include/asm-i386/pat.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: include/asm-i386/pat.h:20:
+ * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE $

WARNING:TYPO_SPELLING: 'losely' may be misspelled - perhaps 'loosely'?
#233: FILE: include/asm-i386/pat.h:23:
+ * Very losely based on code I wrote at VA Linux Systems in 2001.
         ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: include/asm-i386/pat.h:33:
+#define PAT_UNCACHEABLE ^I0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: include/asm-i386/pat.h:35:
+#define PAT_WRITE_THRGH ^I4$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: include/asm-i386/pat.h:50:
+ * Note: On Athlon cpus PAT2/PAT3 & PAT6/PAT7 are both Uncacheable since $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/asm-i386/pat.h:75:
+extern void pat_global_setup(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: init/main.c:492:
+    pat_global_setup();$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 21 warnings, 8 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
