WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#71: 
with extra error reporting.  This exists for vendor BIOS debugging purposes.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: arch/i386/boot/setup.S:47:
+ *    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/i386/boot/setup.S:58:
+#include <asm/edd.h>    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: arch/i386/boot/setup.S:552:
+edd_start:  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: arch/i386/boot/setup.S:556:
+^I^I^I^I^I^I# kept just before that    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: arch/i386/boot/setup.S:573:
+        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: arch/i386/boot/setup.S:574:
+edd_get_device_params:  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: arch/i386/boot/setup.S:588:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: arch/i386/boot/setup.S:589:
+edd_done:   $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#337: FILE: arch/i386/kernel/edd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#382: FILE: arch/i386/kernel/edd.c:46:
+		.mode = (S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: arch/i386/kernel/edd.c:47:
+^I},^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#390: FILE: arch/i386/kernel/edd.c:54:
+ * it'll likely wind up in named bus type yet
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#396: FILE: arch/i386/kernel/edd.c:60:
+		.mode = (S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: arch/i386/kernel/edd.c:69:
+#define EDD_DEVICE_ATTR(_name,_mode,_show) \
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: arch/i386/kernel/edd.c:69:
+#define EDD_DEVICE_ATTR(_name,_mode,_show) \
                                    ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#405: FILE: arch/i386/kernel/edd.c:69:
+#define EDD_DEVICE_ATTR(_name,_mode,_show) \
+struct device_attribute edd_attr_##_name = { 	\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.show	= _show,				\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: arch/i386/kernel/edd.c:70:
+struct device_attribute edd_attr_##_name = { ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#411: FILE: arch/i386/kernel/edd.c:75:
+#define to_edd_attr(_attr) container_of(_attr,struct device_attribute,attr)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#411: FILE: arch/i386/kernel/edd.c:75:
+#define to_edd_attr(_attr) container_of(_attr,struct device_attribute,attr)
                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#412: FILE: arch/i386/kernel/edd.c:76:
+#define to_edd_device(_dir) container_of(_dir,struct device,dir)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#412: FILE: arch/i386/kernel/edd.c:76:
+#define to_edd_device(_dir) container_of(_dir,struct device,dir)
                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: arch/i386/kernel/edd.c:77:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#415: FILE: arch/i386/kernel/edd.c:79:
+edd_attr_show(struct driver_dir_entry * dir, struct attribute * attr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#415: FILE: arch/i386/kernel/edd.c:79:
+edd_attr_show(struct driver_dir_entry * dir, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: arch/i386/kernel/edd.c:80:
+	      char * buf, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: arch/i386/kernel/edd.c:82:
+	struct device * dev = to_edd_device(dir);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#419: FILE: arch/i386/kernel/edd.c:83:
+	struct device_attribute * edd_attr = to_edd_attr(attr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: arch/i386/kernel/edd.c:87:
+		ret = edd_attr->show(dev,buf,count,off);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: arch/i386/kernel/edd.c:87:
+		ret = edd_attr->show(dev,buf,count,off);
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: arch/i386/kernel/edd.c:87:
+		ret = edd_attr->show(dev,buf,count,off);
 		                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: arch/i386/kernel/edd.c:98:
+        char *orig_b = b;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: arch/i386/kernel/edd.c:98:
+        char *orig_b = b;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#437: FILE: arch/i386/kernel/edd.c:101:
+	unsigned long column=0;
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#440: FILE: arch/i386/kernel/edd.c:104:
+	const char maxcolumn = 16;
+	while (length_printed < length) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: arch/i386/kernel/edd.c:108:
+^I^I     column < maxcolumn && length_printed < length; $

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#445: FILE: arch/i386/kernel/edd.c:109:
+		     column ++) {
 		            ^

CHECK:SPACING: No space is necessary after a cast
#446: FILE: arch/i386/kernel/edd.c:110:
+			b1 += sprintf(b1, "%02x ",(unsigned char) *p);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: arch/i386/kernel/edd.c:110:
+			b1 += sprintf(b1, "%02x ",(unsigned char) *p);
 			                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#447: FILE: arch/i386/kernel/edd.c:111:
+			if (*p < 32 || *p > 126) c = '.';

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#448: FILE: arch/i386/kernel/edd.c:112:
+			else c = *p;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#454: FILE: arch/i386/kernel/edd.c:118:
+		for (; column < maxcolumn; column++)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: arch/i386/kernel/edd.c:126:
+        return (b - orig_b);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: arch/i386/kernel/edd.c:126:
+        return (b - orig_b);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#473: FILE: arch/i386/kernel/edd.c:137:
+	struct edd_info *edd=dev_get_drvdata(dev);
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: arch/i386/kernel/edd.c:138:
+        char *p = buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: arch/i386/kernel/edd.c:138:
+        char *p = buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: arch/i386/kernel/edd.c:140:
+        for (i=0; i<4; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: arch/i386/kernel/edd.c:140:
+        for (i=0; i<4; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#476: FILE: arch/i386/kernel/edd.c:140:
+        for (i=0; i<4; i++) {
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#476: FILE: arch/i386/kernel/edd.c:140:
+        for (i=0; i<4; i++) {
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: arch/i386/kernel/edd.c:141:
+                if (isprint(edd->params.host_bus_type[i])) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/i386/kernel/edd.c:141:
+                if (isprint(edd->params.host_bus_type[i])) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#477: FILE: arch/i386/kernel/edd.c:141:
+                if (isprint(edd->params.host_bus_type[i])) {
[...]
+                } else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: arch/i386/kernel/edd.c:142:
+                        p += sprintf(p, "%c", edd->params.host_bus_type[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: arch/i386/kernel/edd.c:142:
+                        p += sprintf(p, "%c", edd->params.host_bus_type[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: arch/i386/kernel/edd.c:143:
+                } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/i386/kernel/edd.c:143:
+                } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: arch/i386/kernel/edd.c:144:
+                        p += sprintf(p, " ");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: arch/i386/kernel/edd.c:144:
+                        p += sprintf(p, " ");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: arch/i386/kernel/edd.c:145:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: arch/i386/kernel/edd.c:145:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: arch/i386/kernel/edd.c:146:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: arch/i386/kernel/edd.c:146:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: arch/i386/kernel/edd.c:148:
+        if (!strncmp(edd->params.host_bus_type, "ISA", 3)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: arch/i386/kernel/edd.c:148:
+        if (!strncmp(edd->params.host_bus_type, "ISA", 3)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: arch/i386/kernel/edd.c:149:
+                p += sprintf(p, "\tbase_address: %x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: arch/i386/kernel/edd.c:149:
+                p += sprintf(p, "\tbase_address: %x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: arch/i386/kernel/edd.c:150:
+                             edd->params.interface_path.isa.base_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: arch/i386/kernel/edd.c:150:
+                             edd->params.interface_path.isa.base_address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: arch/i386/kernel/edd.c:151:
+        } else if (!strncmp(edd->params.host_bus_type, "PCIX", 4) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: arch/i386/kernel/edd.c:151:
+        } else if (!strncmp(edd->params.host_bus_type, "PCIX", 4) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: arch/i386/kernel/edd.c:153:
+                p += sprintf(p,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: arch/i386/kernel/edd.c:153:
+                p += sprintf(p,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: arch/i386/kernel/edd.c:154:
+                             "\t%02x:%02x.%01x  channel: %x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: arch/i386/kernel/edd.c:154:
+                             "\t%02x:%02x.%01x  channel: %x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: arch/i386/kernel/edd.c:155:
+                             edd->params.interface_path.pci.bus,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: arch/i386/kernel/edd.c:155:
+                             edd->params.interface_path.pci.bus,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: arch/i386/kernel/edd.c:156:
+                             edd->params.interface_path.pci.slot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: arch/i386/kernel/edd.c:156:
+                             edd->params.interface_path.pci.slot,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: arch/i386/kernel/edd.c:157:
+                             edd->params.interface_path.pci.function,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: arch/i386/kernel/edd.c:157:
+                             edd->params.interface_path.pci.function,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: arch/i386/kernel/edd.c:158:
+                             edd->params.interface_path.pci.channel);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: arch/i386/kernel/edd.c:158:
+                             edd->params.interface_path.pci.channel);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: arch/i386/kernel/edd.c:159:
+        } else if (!strncmp(edd->params.host_bus_type, "IBND", 4) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: arch/i386/kernel/edd.c:159:
+        } else if (!strncmp(edd->params.host_bus_type, "IBND", 4) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: arch/i386/kernel/edd.c:162:
+                p += sprintf(p,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: arch/i386/kernel/edd.c:162:
+                p += sprintf(p,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: arch/i386/kernel/edd.c:163:
+                             "\tTBD: %llx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: arch/i386/kernel/edd.c:163:
+                             "\tTBD: %llx\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: arch/i386/kernel/edd.c:164:
+                             edd->params.interface_path.ibnd.reserved);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: arch/i386/kernel/edd.c:164:
+                             edd->params.interface_path.ibnd.reserved);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: arch/i386/kernel/edd.c:166:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: arch/i386/kernel/edd.c:166:
+        }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#502: FILE: arch/i386/kernel/edd.c:166:
+
+        }

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#503: FILE: arch/i386/kernel/edd.c:167:
+        }
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#503: FILE: arch/i386/kernel/edd.c:167:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: arch/i386/kernel/edd.c:168:
+                p += sprintf(p, "\tunknown: %llx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: arch/i386/kernel/edd.c:168:
+                p += sprintf(p, "\tunknown: %llx\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: arch/i386/kernel/edd.c:169:
+                             edd->params.interface_path.unknown.reserved);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: arch/i386/kernel/edd.c:169:
+                             edd->params.interface_path.unknown.reserved);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#518: FILE: arch/i386/kernel/edd.c:182:
+	struct edd_info *edd=dev_get_drvdata(dev);
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: arch/i386/kernel/edd.c:183:
+        uint8_t c=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: arch/i386/kernel/edd.c:183:
+        uint8_t c=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#519: FILE: arch/i386/kernel/edd.c:183:
+        uint8_t c=0;
                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#519: FILE: arch/i386/kernel/edd.c:183:
+        uint8_t c=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#520: FILE: arch/i386/kernel/edd.c:184:
+	int i, nonzero_path=0;
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: arch/i386/kernel/edd.c:185:
+	int i, nonzero_path=0;
+	if (!dev || !edd || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#521: FILE: arch/i386/kernel/edd.c:185:
+	if (!dev || !edd || !buf || off) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: arch/i386/kernel/edd.c:188:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: arch/i386/kernel/edd.c:188:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: arch/i386/kernel/edd.c:188:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: arch/i386/kernel/edd.c:189:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: arch/i386/kernel/edd.c:189:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#525: FILE: arch/i386/kernel/edd.c:189:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {
             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#525: FILE: arch/i386/kernel/edd.c:189:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: arch/i386/kernel/edd.c:192:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: arch/i386/kernel/edd.c:192:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: arch/i386/kernel/edd.c:192:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: arch/i386/kernel/edd.c:193:
+        for (i=30; i<=73; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: arch/i386/kernel/edd.c:193:
+        for (i=30; i<=73; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#529: FILE: arch/i386/kernel/edd.c:193:
+        for (i=30; i<=73; i++) {
               ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#529: FILE: arch/i386/kernel/edd.c:193:
+        for (i=30; i<=73; i++) {
                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: arch/i386/kernel/edd.c:194:
+		c = *(((uint8_t *)edd)+i+4);
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: arch/i386/kernel/edd.c:194:
+		c = *(((uint8_t *)edd)+i+4);
 		                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: arch/i386/kernel/edd.c:199:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: arch/i386/kernel/edd.c:199:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: arch/i386/kernel/edd.c:200:
+        if (!nonzero_path) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: arch/i386/kernel/edd.c:200:
+        if (!nonzero_path) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#536: FILE: arch/i386/kernel/edd.c:200:
+        if (!nonzero_path) {
+		return 0;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: arch/i386/kernel/edd.c:202:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: arch/i386/kernel/edd.c:202:
+        }$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#550: FILE: arch/i386/kernel/edd.c:214:
+	struct edd_info *edd=dev_get_drvdata(dev);
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: arch/i386/kernel/edd.c:215:
+        char *p = buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: arch/i386/kernel/edd.c:215:
+        char *p = buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: arch/i386/kernel/edd.c:218:
+        for (i=0; i<8; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: arch/i386/kernel/edd.c:218:
+        for (i=0; i<8; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#554: FILE: arch/i386/kernel/edd.c:218:
+        for (i=0; i<8; i++) {
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#554: FILE: arch/i386/kernel/edd.c:218:
+        for (i=0; i<8; i++) {
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: arch/i386/kernel/edd.c:219:
+                if (isprint(edd->params.interface_type[i])) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: arch/i386/kernel/edd.c:219:
+                if (isprint(edd->params.interface_type[i])) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#555: FILE: arch/i386/kernel/edd.c:219:
+                if (isprint(edd->params.interface_type[i])) {
[...]
+                } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/i386/kernel/edd.c:220:
+                        p += sprintf(p, "%c", edd->params.interface_type[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: arch/i386/kernel/edd.c:220:
+                        p += sprintf(p, "%c", edd->params.interface_type[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: arch/i386/kernel/edd.c:221:
+                } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/i386/kernel/edd.c:221:
+                } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: arch/i386/kernel/edd.c:222:
+                        p += sprintf(p, " ");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: arch/i386/kernel/edd.c:222:
+                        p += sprintf(p, " ");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: arch/i386/kernel/edd.c:223:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: arch/i386/kernel/edd.c:223:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: arch/i386/kernel/edd.c:224:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: arch/i386/kernel/edd.c:224:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#561: FILE: arch/i386/kernel/edd.c:225:
+        if (!strncmp(edd->params.interface_type, "ATAPI", 5)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: arch/i386/kernel/edd.c:225:
+        if (!strncmp(edd->params.interface_type, "ATAPI", 5)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: arch/i386/kernel/edd.c:226:
+                p += sprintf(p, "\tdevice: %x  lun: %x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: arch/i386/kernel/edd.c:226:
+                p += sprintf(p, "\tdevice: %x  lun: %x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: arch/i386/kernel/edd.c:227:
+                             edd->params.device_path.atapi.device,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: arch/i386/kernel/edd.c:227:
+                             edd->params.device_path.atapi.device,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: arch/i386/kernel/edd.c:228:
+                             edd->params.device_path.atapi.lun);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: arch/i386/kernel/edd.c:228:
+                             edd->params.device_path.atapi.lun);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: arch/i386/kernel/edd.c:229:
+        } else if (!strncmp(edd->params.interface_type, "ATA", 3)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: arch/i386/kernel/edd.c:229:
+        } else if (!strncmp(edd->params.interface_type, "ATA", 3)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: arch/i386/kernel/edd.c:230:
+                p += sprintf(p, "\tdevice: %x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: arch/i386/kernel/edd.c:230:
+                p += sprintf(p, "\tdevice: %x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: arch/i386/kernel/edd.c:231:
+                             edd->params.device_path.ata.device);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: arch/i386/kernel/edd.c:231:
+                             edd->params.device_path.ata.device);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: arch/i386/kernel/edd.c:232:
+        } else if (!strncmp(edd->params.interface_type, "SCSI", 4)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: arch/i386/kernel/edd.c:232:
+        } else if (!strncmp(edd->params.interface_type, "SCSI", 4)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: arch/i386/kernel/edd.c:233:
+                p += sprintf(p, "\tid: %x  lun: %llx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/i386/kernel/edd.c:233:
+                p += sprintf(p, "\tid: %x  lun: %llx\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: arch/i386/kernel/edd.c:234:
+                             edd->params.device_path.scsi.id,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/i386/kernel/edd.c:234:
+                             edd->params.device_path.scsi.id,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: arch/i386/kernel/edd.c:235:
+                             edd->params.device_path.scsi.lun);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: arch/i386/kernel/edd.c:235:
+                             edd->params.device_path.scsi.lun);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: arch/i386/kernel/edd.c:236:
+        } else if (!strncmp(edd->params.interface_type, "USB", 3)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: arch/i386/kernel/edd.c:236:
+        } else if (!strncmp(edd->params.interface_type, "USB", 3)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: arch/i386/kernel/edd.c:237:
+                p += sprintf(p, "\tserial_number: %llx\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: arch/i386/kernel/edd.c:237:
+                p += sprintf(p, "\tserial_number: %llx\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: arch/i386/kernel/edd.c:237:
+                p += sprintf(p, "\tserial_number: %llx\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: arch/i386/kernel/edd.c:238:
+                             edd->params.device_path.usb.serial_number);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: arch/i386/kernel/edd.c:238:
+                             edd->params.device_path.usb.serial_number);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#575: FILE: arch/i386/kernel/edd.c:239:
+        } else if (!strncmp(edd->params.interface_type, "1394", 4)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: arch/i386/kernel/edd.c:239:
+        } else if (!strncmp(edd->params.interface_type, "1394", 4)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: arch/i386/kernel/edd.c:240:
+                p += sprintf(p, "\teui: %llx\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: arch/i386/kernel/edd.c:240:
+                p += sprintf(p, "\teui: %llx\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: arch/i386/kernel/edd.c:240:
+                p += sprintf(p, "\teui: %llx\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/i386/kernel/edd.c:241:
+                             edd->params.device_path.i1394.eui);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/i386/kernel/edd.c:241:
+                             edd->params.device_path.i1394.eui);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/i386/kernel/edd.c:242:
+        } else if (!strncmp(edd->params.interface_type, "FIBRE", 5)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/i386/kernel/edd.c:242:
+        } else if (!strncmp(edd->params.interface_type, "FIBRE", 5)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: arch/i386/kernel/edd.c:243:
+                p += sprintf(p, "\twwid: %llx lun: %llx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: arch/i386/kernel/edd.c:243:
+                p += sprintf(p, "\twwid: %llx lun: %llx\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: arch/i386/kernel/edd.c:244:
+                             edd->params.device_path.fibre.wwid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/i386/kernel/edd.c:244:
+                             edd->params.device_path.fibre.wwid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: arch/i386/kernel/edd.c:245:
+                             edd->params.device_path.fibre.lun);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: arch/i386/kernel/edd.c:245:
+                             edd->params.device_path.fibre.lun);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: arch/i386/kernel/edd.c:246:
+        } else if (!strncmp(edd->params.interface_type, "I2O", 3)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: arch/i386/kernel/edd.c:246:
+        } else if (!strncmp(edd->params.interface_type, "I2O", 3)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: arch/i386/kernel/edd.c:247:
+                p += sprintf(p, "\tidentity_tag: %llx\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: arch/i386/kernel/edd.c:247:
+                p += sprintf(p, "\tidentity_tag: %llx\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: arch/i386/kernel/edd.c:247:
+                p += sprintf(p, "\tidentity_tag: %llx\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: arch/i386/kernel/edd.c:248:
+                             edd->params.device_path.i2o.identity_tag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: arch/i386/kernel/edd.c:248:
+                             edd->params.device_path.i2o.identity_tag);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: arch/i386/kernel/edd.c:249:
+        } else if (!strncmp(edd->params.interface_type, "RAID", 4)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: arch/i386/kernel/edd.c:249:
+        } else if (!strncmp(edd->params.interface_type, "RAID", 4)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: arch/i386/kernel/edd.c:250:
+                p += sprintf(p, "\tidentity_tag: %x\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#586: FILE: arch/i386/kernel/edd.c:250:
+                p += sprintf(p, "\tidentity_tag: %x\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: arch/i386/kernel/edd.c:250:
+                p += sprintf(p, "\tidentity_tag: %x\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: arch/i386/kernel/edd.c:251:
+                             edd->params.device_path.raid.array_number);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: arch/i386/kernel/edd.c:251:
+                             edd->params.device_path.raid.array_number);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: arch/i386/kernel/edd.c:252:
+        } else if (!strncmp(edd->params.interface_type, "SATA", 4)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/i386/kernel/edd.c:252:
+        } else if (!strncmp(edd->params.interface_type, "SATA", 4)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: arch/i386/kernel/edd.c:253:
+                p += sprintf(p, "\tdevice: %x\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: arch/i386/kernel/edd.c:253:
+                p += sprintf(p, "\tdevice: %x\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/i386/kernel/edd.c:253:
+                p += sprintf(p, "\tdevice: %x\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: arch/i386/kernel/edd.c:254:
+                             edd->params.device_path.sata.device);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: arch/i386/kernel/edd.c:254:
+                             edd->params.device_path.sata.device);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: arch/i386/kernel/edd.c:255:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: arch/i386/kernel/edd.c:255:
+        } else {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#608: FILE: arch/i386/kernel/edd.c:272:
+	struct edd_info *edd=dev_get_drvdata(dev);
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: arch/i386/kernel/edd.c:273:
+        uint8_t c=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/i386/kernel/edd.c:273:
+        uint8_t c=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#609: FILE: arch/i386/kernel/edd.c:273:
+        uint8_t c=0;
                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#609: FILE: arch/i386/kernel/edd.c:273:
+        uint8_t c=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#610: FILE: arch/i386/kernel/edd.c:274:
+	int i, nonzero_path=0;
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: arch/i386/kernel/edd.c:275:
+	int i, nonzero_path=0;
+	if (!dev || !edd || !buf || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#611: FILE: arch/i386/kernel/edd.c:275:
+	if (!dev || !edd || !buf || off) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: arch/i386/kernel/edd.c:278:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: arch/i386/kernel/edd.c:278:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: arch/i386/kernel/edd.c:278:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: arch/i386/kernel/edd.c:279:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: arch/i386/kernel/edd.c:279:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#615: FILE: arch/i386/kernel/edd.c:279:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {
             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#615: FILE: arch/i386/kernel/edd.c:279:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: arch/i386/kernel/edd.c:282:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: arch/i386/kernel/edd.c:282:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: arch/i386/kernel/edd.c:282:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: arch/i386/kernel/edd.c:283:
+        for (i=30; i<=73; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: arch/i386/kernel/edd.c:283:
+        for (i=30; i<=73; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#619: FILE: arch/i386/kernel/edd.c:283:
+        for (i=30; i<=73; i++) {
               ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#619: FILE: arch/i386/kernel/edd.c:283:
+        for (i=30; i<=73; i++) {
                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#620: FILE: arch/i386/kernel/edd.c:284:
+		c = *(((uint8_t *)edd)+i+4);
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#620: FILE: arch/i386/kernel/edd.c:284:
+		c = *(((uint8_t *)edd)+i+4);
 		                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: arch/i386/kernel/edd.c:289:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: arch/i386/kernel/edd.c:289:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: arch/i386/kernel/edd.c:290:
+        if (!nonzero_path) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: arch/i386/kernel/edd.c:290:
+        if (!nonzero_path) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#626: FILE: arch/i386/kernel/edd.c:290:
+        if (!nonzero_path) {
+		return 0;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: arch/i386/kernel/edd.c:292:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: arch/i386/kernel/edd.c:292:
+        }$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#641: FILE: arch/i386/kernel/edd.c:305:
+	struct edd_info *edd=dev_get_drvdata(dev);
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: arch/i386/kernel/edd.c:306:
+        int i, warn_padding=0, nonzero_path=0, warn_key=0, warn_checksum=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: arch/i386/kernel/edd.c:306:
+        int i, warn_padding=0, nonzero_path=0, warn_key=0, warn_checksum=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#642: FILE: arch/i386/kernel/edd.c:306:
+        int i, warn_padding=0, nonzero_path=0, warn_key=0, warn_checksum=0;
                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#642: FILE: arch/i386/kernel/edd.c:306:
+        int i, warn_padding=0, nonzero_path=0, warn_key=0, warn_checksum=0;
                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#642: FILE: arch/i386/kernel/edd.c:306:
+        int i, warn_padding=0, nonzero_path=0, warn_key=0, warn_checksum=0;
                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#642: FILE: arch/i386/kernel/edd.c:306:
+        int i, warn_padding=0, nonzero_path=0, warn_key=0, warn_checksum=0;
                                                                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#643: FILE: arch/i386/kernel/edd.c:307:
+        uint8_t checksum=0, c=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/i386/kernel/edd.c:307:
+        uint8_t checksum=0, c=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#643: FILE: arch/i386/kernel/edd.c:307:
+        uint8_t checksum=0, c=0;
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#643: FILE: arch/i386/kernel/edd.c:307:
+        uint8_t checksum=0, c=0;
                              ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#643: FILE: arch/i386/kernel/edd.c:307:
+        uint8_t checksum=0, c=0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: arch/i386/kernel/edd.c:308:
+        char *p = buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/i386/kernel/edd.c:308:
+        char *p = buf;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#645: FILE: arch/i386/kernel/edd.c:309:
+	if (!dev || !edd || !buf || off) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: arch/i386/kernel/edd.c:312:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: arch/i386/kernel/edd.c:312:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/i386/kernel/edd.c:312:
+        $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#650: FILE: arch/i386/kernel/edd.c:314:
+	p += edd_dump_raw_data(p, ((char *)edd)+4, sizeof(*edd)-4);
 	                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#650: FILE: arch/i386/kernel/edd.c:314:
+	p += edd_dump_raw_data(p, ((char *)edd)+4, sizeof(*edd)-4);
 	                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: arch/i386/kernel/edd.c:315:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: arch/i386/kernel/edd.c:320:
+^Icase 0x21: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#667: FILE: arch/i386/kernel/edd.c:331:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#669: FILE: arch/i386/kernel/edd.c:333:
+	if (edd->interface_support & EDD_EXT_FIXED_DISK_ACCESS) {
+		p += sprintf(p, "\tFixed disk access\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#672: FILE: arch/i386/kernel/edd.c:336:
+	if (edd->interface_support & EDD_EXT_DEVICE_LOCKING_AND_EJECTING) {
+		p += sprintf(p, "\tDevice locking and ejecting\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#675: FILE: arch/i386/kernel/edd.c:339:
+	if (edd->interface_support & EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT) {
+		p += sprintf(p, "\tEnhanced Disk Drive support\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#678: FILE: arch/i386/kernel/edd.c:342:
+	if (edd->interface_support & EDD_EXT_64BIT_EXTENSIONS) {
+		p += sprintf(p, "\t64-bit extensions\n");
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: arch/i386/kernel/edd.c:345:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: arch/i386/kernel/edd.c:356:
+^I^Ip += sprintf(p, "\tmedia_change_notification\n"); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: arch/i386/kernel/edd.c:363:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#707: FILE: arch/i386/kernel/edd.c:371:
+        /* Spec violation here.  Adaptec AIC7899 returns 0xDDBE$

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: arch/i386/kernel/edd.c:372:
+           here, when it should be (per spec) 0xBEDD.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#708: FILE: arch/i386/kernel/edd.c:372:
+        /* Spec violation here.  Adaptec AIC7899 returns 0xDDBE
+           here, when it should be (per spec) 0xBEDD.

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: arch/i386/kernel/edd.c:373:
+        */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#710: FILE: arch/i386/kernel/edd.c:374:
+        if (edd->params.key == 0xDDBE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: arch/i386/kernel/edd.c:374:
+        if (edd->params.key == 0xDDBE) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#710: FILE: arch/i386/kernel/edd.c:374:
+        if (edd->params.key == 0xDDBE) {
+		warn_key=1;
+        }

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#711: FILE: arch/i386/kernel/edd.c:375:
+		warn_key=1;
 		        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: arch/i386/kernel/edd.c:376:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: arch/i386/kernel/edd.c:376:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#714: FILE: arch/i386/kernel/edd.c:378:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: arch/i386/kernel/edd.c:378:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#714: FILE: arch/i386/kernel/edd.c:378:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {
             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#714: FILE: arch/i386/kernel/edd.c:378:
+        if (! (edd->params.key == 0xBEDD || edd->params.key == 0xDDBE)) {
+		return (p - buf);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: arch/i386/kernel/edd.c:381:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: arch/i386/kernel/edd.c:381:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: arch/i386/kernel/edd.c:381:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#718: FILE: arch/i386/kernel/edd.c:382:
+        for (i=30; i<=73; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: arch/i386/kernel/edd.c:382:
+        for (i=30; i<=73; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#718: FILE: arch/i386/kernel/edd.c:382:
+        for (i=30; i<=73; i++) {
               ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#718: FILE: arch/i386/kernel/edd.c:382:
+        for (i=30; i<=73; i++) {
                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#719: FILE: arch/i386/kernel/edd.c:383:
+		c = *(((uint8_t *)edd)+i+4);
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#719: FILE: arch/i386/kernel/edd.c:383:
+		c = *(((uint8_t *)edd)+i+4);
 		                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#720: FILE: arch/i386/kernel/edd.c:384:
+		if (c) nonzero_path++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: arch/i386/kernel/edd.c:385:
+                checksum += c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: arch/i386/kernel/edd.c:385:
+                checksum += c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: arch/i386/kernel/edd.c:386:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: arch/i386/kernel/edd.c:386:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#723: FILE: arch/i386/kernel/edd.c:387:
+        if (checksum) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: arch/i386/kernel/edd.c:387:
+        if (checksum) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#724: FILE: arch/i386/kernel/edd.c:388:
+		warn_checksum=1;
 		             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: arch/i386/kernel/edd.c:389:
+                if (!nonzero_path) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: arch/i386/kernel/edd.c:389:
+                if (!nonzero_path) {$

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#726: FILE: arch/i386/kernel/edd.c:390:
+			p += sprintf(p, "Warning: Spec violation.  Device Path checksum invalid (0x%02x should be 0x00).\n", checksum);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#727: FILE: arch/i386/kernel/edd.c:391:
+^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: arch/i386/kernel/edd.c:394:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: arch/i386/kernel/edd.c:394:
+        }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#732: FILE: arch/i386/kernel/edd.c:396:
+	p += __edd_unparse_host_bus (dev, p, count - (p - buf), off);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#736: FILE: arch/i386/kernel/edd.c:400:
+	if (warn_key) {
+                p += sprintf(p, "Warning: Spec violation.  Key should be 0xBEDD, is 0xDDBE\n");
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#737: FILE: arch/i386/kernel/edd.c:401:
+                p += sprintf(p, "Warning: Spec violation.  Key should be 0xBEDD, is 0xDDBE\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: arch/i386/kernel/edd.c:401:
+                p += sprintf(p, "Warning: Spec violation.  Key should be 0xBEDD, is 0xDDBE\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#739: FILE: arch/i386/kernel/edd.c:403:
+        if (warn_padding) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: arch/i386/kernel/edd.c:403:
+        if (warn_padding) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#739: FILE: arch/i386/kernel/edd.c:403:
+        if (warn_padding) {
+                p += sprintf(p, "Warning: Spec violation.  Padding should be 0x20, is 0x00\n");
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#740: FILE: arch/i386/kernel/edd.c:404:
+                p += sprintf(p, "Warning: Spec violation.  Padding should be 0x20, is 0x00\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: arch/i386/kernel/edd.c:404:
+                p += sprintf(p, "Warning: Spec violation.  Padding should be 0x20, is 0x00\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: arch/i386/kernel/edd.c:405:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/i386/kernel/edd.c:405:
+        }$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#742: FILE: arch/i386/kernel/edd.c:406:
+	if (warn_checksum) {
+                p += sprintf(p, "Warning: Spec violation.  Device Path checksum invalid (0x%02x should be 0x00).\n", checksum);
+	}

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#743: FILE: arch/i386/kernel/edd.c:407:
+                p += sprintf(p, "Warning: Spec violation.  Device Path checksum invalid (0x%02x should be 0x00).\n", checksum);

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: arch/i386/kernel/edd.c:407:
+                p += sprintf(p, "Warning: Spec violation.  Device Path checksum invalid (0x%02x should be 0x00).\n", checksum);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/i386/kernel/edd.c:407:
+                p += sprintf(p, "Warning: Spec violation.  Device Path checksum invalid (0x%02x should be 0x00).\n", checksum);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#749: FILE: arch/i386/kernel/edd.c:413:
+static EDD_DEVICE_ATTR(info,0444,edd_info_show);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#749: FILE: arch/i386/kernel/edd.c:413:
+static EDD_DEVICE_ATTR(info,0444,edd_info_show);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#750: FILE: arch/i386/kernel/edd.c:414:
+static EDD_DEVICE_ATTR(interface,0444,edd_show_interface);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#750: FILE: arch/i386/kernel/edd.c:414:
+static EDD_DEVICE_ATTR(interface,0444,edd_show_interface);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#751: FILE: arch/i386/kernel/edd.c:415:
+static EDD_DEVICE_ATTR(host_bus,0444,edd_show_host_bus);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#751: FILE: arch/i386/kernel/edd.c:415:
+static EDD_DEVICE_ATTR(host_bus,0444,edd_show_host_bus);
                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#753: FILE: arch/i386/kernel/edd.c:417:
+static struct device_attribute * def_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#761: FILE: arch/i386/kernel/edd.c:425:
+edd_create_file(struct device *dev, struct device_attribute * attr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#766: FILE: arch/i386/kernel/edd.c:430:
+static int edd_populate_dir(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#768: FILE: arch/i386/kernel/edd.c:432:
+	struct device_attribute * attr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: arch/i386/kernel/edd.c:435:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#773: FILE: arch/i386/kernel/edd.c:437:
+		if ((error = edd_create_file(dev,attr))) {
 		                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#773: FILE: arch/i386/kernel/edd.c:437:
+		if ((error = edd_create_file(dev,attr))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#773: FILE: arch/i386/kernel/edd.c:437:
+		if ((error = edd_create_file(dev,attr))) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#783: FILE: arch/i386/kernel/edd.c:447:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#784: FILE: arch/i386/kernel/edd.c:448:
+	if (!dev) return 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#796: FILE: arch/i386/kernel/edd.c:460:
+	if (error) return error;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#814: FILE: arch/i386/kernel/edd.c:478:
+	printk(KERN_INFO "BIOS EDD facility v%s, %d devices found\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: arch/i386/kernel/edd.c:480:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#818: FILE: arch/i386/kernel/edd.c:482:
+		printk(KERN_INFO "EDD information not available.\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#823: FILE: arch/i386/kernel/edd.c:487:
+	if (rc) return rc;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#831: FILE: arch/i386/kernel/edd.c:495:
+	for (i=0; i<eddnr && i<EDDMAXNR; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#831: FILE: arch/i386/kernel/edd.c:495:
+	for (i=0; i<eddnr && i<EDDMAXNR; i++) {
 	           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#831: FILE: arch/i386/kernel/edd.c:495:
+	for (i=0; i<eddnr && i<EDDMAXNR; i++) {
 	                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#833: FILE: arch/i386/kernel/edd.c:497:
+		if (edd_devices[i]) {
+			edd_device_register(edd_devices[i], i);
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#841: FILE: arch/i386/kernel/edd.c:505:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#847: FILE: arch/i386/kernel/edd.c:511:
+	for (i=0; i<eddnr && i<EDDMAXNR; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#847: FILE: arch/i386/kernel/edd.c:511:
+	for (i=0; i<eddnr && i<EDDMAXNR; i++) {
 	           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#847: FILE: arch/i386/kernel/edd.c:511:
+	for (i=0; i<eddnr && i<EDDMAXNR; i++) {
 	                      ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#877: FILE: arch/i386/kernel/i386_ksyms.c:184:
+EXPORT_SYMBOL(eddnr);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#894: FILE: arch/i386/kernel/setup.c:470:
+#if defined(CONFIG_EDD) || defined(CONFIG_EDD_MODULE)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: arch/i386/kernel/setup.c:479:
+     eddnr = EDD_NR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: arch/i386/kernel/setup.c:480:
+     memcpy(edd, EDD_BUF, sizeof(edd));$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#927: FILE: include/asm-i386/edd.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#928: FILE: include/asm-i386/edd.h:2:
+ * linux/include/asm-i386/edd.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#951: FILE: include/asm-i386/edd.h:25:
+#define EDDNR 0x1e9	/* addr of number of edd_info structs at EDDBUF
+			   in empty_zero_block - treat this as 1 byte  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#951: FILE: include/asm-i386/edd.h:25:
+			   in empty_zero_block - treat this as 1 byte  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#954: FILE: include/asm-i386/edd.h:28:
+#define EDDEXTSIZE 4    /* change these if you muck with the structures */   $

CHECK:BIT_MACRO: Prefer using the BIT macro
#957: FILE: include/asm-i386/edd.h:31:
+#define EDD_EXT_FIXED_DISK_ACCESS           (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#958: FILE: include/asm-i386/edd.h:32:
+#define EDD_EXT_DEVICE_LOCKING_AND_EJECTING (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#959: FILE: include/asm-i386/edd.h:33:
+#define EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#960: FILE: include/asm-i386/edd.h:34:
+#define EDD_EXT_64BIT_EXTENSIONS            (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#962: FILE: include/asm-i386/edd.h:36:
+#define EDD_INFO_DMA_BOUNDRY_ERROR_TRANSPARENT (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#963: FILE: include/asm-i386/edd.h:37:
+#define EDD_INFO_GEOMETRY_VALID                (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#964: FILE: include/asm-i386/edd.h:38:
+#define EDD_INFO_REMOVABLE                     (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#965: FILE: include/asm-i386/edd.h:39:
+#define EDD_INFO_WRITE_VERIFY                  (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#966: FILE: include/asm-i386/edd.h:40:
+#define EDD_INFO_MEDIA_CHANGE_NOTIFICATION     (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#967: FILE: include/asm-i386/edd.h:41:
+#define EDD_INFO_LOCKABLE                      (1 << 5)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: include/asm-i386/edd.h:42:
+#define EDD_INFO_NO_MEDIA_PRESENT              (1 << 6) $

CHECK:BIT_MACRO: Prefer using the BIT macro
#968: FILE: include/asm-i386/edd.h:42:
+#define EDD_INFO_NO_MEDIA_PRESENT              (1 << 6) 

CHECK:BIT_MACRO: Prefer using the BIT macro
#969: FILE: include/asm-i386/edd.h:43:
+#define EDD_INFO_USE_INT13_FN50                (1 << 7)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#971: FILE: include/asm-i386/edd.h:45:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#977: FILE: include/asm-i386/edd.h:51:
+        u16 info_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#977: FILE: include/asm-i386/edd.h:51:
+        u16 info_flags;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#995: FILE: include/asm-i386/edd.h:69:
+		} __attribute__((packed)) isa;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1002: FILE: include/asm-i386/edd.h:76:
+		} __attribute__((packed)) pci;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1006: FILE: include/asm-i386/edd.h:80:
+		} __attribute__((packed)) ibnd;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1009: FILE: include/asm-i386/edd.h:83:
+		} __attribute__((packed)) xprs;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1012: FILE: include/asm-i386/edd.h:86:
+		} __attribute__((packed)) htpt;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1015: FILE: include/asm-i386/edd.h:89:
+		} __attribute__((packed)) unknown;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1024: FILE: include/asm-i386/edd.h:98:
+		} __attribute__((packed)) ata;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1032: FILE: include/asm-i386/edd.h:106:
+		} __attribute__((packed)) atapi;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1038: FILE: include/asm-i386/edd.h:112:
+		} __attribute__((packed)) scsi;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1042: FILE: include/asm-i386/edd.h:116:
+		} __attribute__((packed)) usb;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1046: FILE: include/asm-i386/edd.h:120:
+		} __attribute__((packed)) i1394;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1050: FILE: include/asm-i386/edd.h:124:
+		} __attribute__((packed)) fibre;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1054: FILE: include/asm-i386/edd.h:128:
+		} __attribute__((packed)) i2o;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1066: FILE: include/asm-i386/edd.h:140:
+		} __attribute__((packed)) sata;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1070: FILE: include/asm-i386/edd.h:144:
+		} __attribute__((packed)) unknown;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1074: FILE: include/asm-i386/edd.h:148:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1081: FILE: include/asm-i386/edd.h:155:
+} __attribute__((packed));

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: include/asm-i386/setup.h:40:
+#define EDD_NR     (*(unsigned char *) (PARAM+EDDNR))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1096: FILE: include/asm-i386/setup.h:40:
+#define EDD_NR     (*(unsigned char *) (PARAM+EDDNR))
                                              ^

CHECK:SPACING: No space is necessary after a cast
#1097: FILE: include/asm-i386/setup.h:41:
+#define EDD_BUF     ((struct edd_info *) (PARAM+EDDBUF))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1097: FILE: include/asm-i386/setup.h:41:
+#define EDD_BUF     ((struct edd_info *) (PARAM+EDDBUF))
                                                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429198.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 212 errors, 163 warnings, 32 checks, 860 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429198.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
