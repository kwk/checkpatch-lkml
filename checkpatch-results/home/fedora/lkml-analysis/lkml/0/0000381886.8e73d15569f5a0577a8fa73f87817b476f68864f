WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Here is a patch to use seqlock for real_lookup race with d_lookup as suggested

WARNING:TYPO_SPELLING: 'againt' may be misspelled - perhaps 'against'?
#35: 
d_lookup which uses seqlock to protect againt rename race.
                                       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: fs/dcache.c:951:
+	struct dentry * dentry = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: fs/dcache.c:954:
+        do {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: fs/dcache.c:954:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: fs/dcache.c:955:
+                seq = read_seqbegin(&rename_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: fs/dcache.c:955:
+                seq = read_seqbegin(&rename_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: fs/dcache.c:956:
+                dentry = __d_lookup(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: fs/dcache.c:956:
+                dentry = __d_lookup(parent, name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: fs/dcache.c:957:
+                if (dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: fs/dcache.c:957:
+                if (dentry)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/dcache.c:963:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/dcache.c:963:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/dcache.c:963:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: fs/namei.c:278:
+	struct dentry * dentry = __d_lookup(parent, name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: fs/namei.c:280:
+^I/* lockess __d_lookup may fail due to concurrent d_move() $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: include/linux/dcache.h:241:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: include/linux/dcache.h:241:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#172: FILE: include/linux/dcache.h:241:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#172: FILE: include/linux/dcache.h:241:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381886.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 8 warnings, 1 checks, 107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381886.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
