CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: arch/mips/mm/dma-coherent.c:201:
+void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 	       enum dma_data_direction direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: arch/mips/mm/dma-ip27.c:208:
+void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 	       enum dma_data_direction direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: arch/mips/mm/dma-ip32.c:374:
+void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
+	enum dma_data_direction direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: arch/mips/mm/dma-noncoherent.c:310:
+void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
+	enum dma_data_direction direction)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: drivers/net/lasi_82596.c:122:
+#define  CHECK_WBACK(priv, addr,len) \
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#164: FILE: drivers/net/lasi_82596.c:122:
+#define  CHECK_WBACK(priv, addr,len) \
+	do { dma_cache_sync((priv)->dev, (void *)addr, len, DMA_TO_DEVICE); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: drivers/net/lasi_82596.c:125:
+#define  CHECK_INV(priv, addr,len) \
                              ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#169: FILE: drivers/net/lasi_82596.c:125:
+#define  CHECK_INV(priv, addr,len) \
+	do { dma_cache_sync((priv)->dev, (void *)addr, len, DMA_FROM_DEVICE); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#170: FILE: drivers/net/lasi_82596.c:126:
+	do { dma_cache_sync((priv)->dev, (void *)addr, len, DMA_FROM_DEVICE); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: drivers/net/lasi_82596.c:128:
+#define  CHECK_WBACK_INV(priv, addr,len) \
                                    ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#174: FILE: drivers/net/lasi_82596.c:128:
+#define  CHECK_WBACK_INV(priv, addr,len) \
+	do { dma_cache_sync((priv)->dev, (void *)addr, len, DMA_BIDIRECTIONAL); } while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->iscp
#184: FILE: drivers/net/lasi_82596.c:452:
+	CHECK_INV(lp, &(lp->iscp), sizeof(struct i596_iscp));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->iscp
#188: FILE: drivers/net/lasi_82596.c:455:
+		CHECK_INV(lp, &(lp->iscp), sizeof(struct i596_iscp));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#197: FILE: drivers/net/lasi_82596.c:469:
+	CHECK_INV(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#201: FILE: drivers/net/lasi_82596.c:472:
+		CHECK_INV(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scp
#238: FILE: drivers/net/lasi_82596.c:666:
+	CHECK_WBACK(lp, &(lp->scp), sizeof(struct i596_scp));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->iscp
#239: FILE: drivers/net/lasi_82596.c:667:
+	CHECK_WBACK(lp, &(lp->iscp), sizeof(struct i596_iscp));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#248: FILE: drivers/net/lasi_82596.c:681:
+	CHECK_WBACK(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->cf_cmd
#256: FILE: drivers/net/lasi_82596.c:688:
+	CHECK_WBACK(lp, &(lp->cf_cmd), sizeof(struct cf_cmd));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->sa_cmd
#263: FILE: drivers/net/lasi_82596.c:694:
+	CHECK_WBACK(lp, &(lp->sa_cmd), sizeof(struct sa_cmd));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->tdr_cmd
#269: FILE: drivers/net/lasi_82596.c:699:
+	CHECK_WBACK(lp, &(lp->tdr_cmd), sizeof(struct tdr_cmd));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#278: FILE: drivers/net/lasi_82596.c:711:
+	CHECK_WBACK(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#341: FILE: drivers/net/lasi_82596.c:910:
+	CHECK_WBACK(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#350: FILE: drivers/net/lasi_82596.c:928:
+	CHECK_WBACK(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#374: FILE: drivers/net/lasi_82596.c:967:
+		CHECK_WBACK(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lp->scb
#398: FILE: drivers/net/lasi_82596.c:1064:
+		CHECK_WBACK_INV(lp, &(lp->scb), sizeof(struct i596_scb));

CHECK:CAMELCASE: Avoid CamelCase: <MessageLocation>
#501: FILE: drivers/scsi/53c700.c:365:
+	script_patch_32(hostdata->dev, script, MessageLocation,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <StatusAddress>
#504: FILE: drivers/scsi/53c700.c:367:
+	script_patch_32(hostdata->dev, script, StatusAddress,

CHECK:CAMELCASE: Avoid CamelCase: <ReceiveMsgAddress>
#507: FILE: drivers/scsi/53c700.c:369:
+	script_patch_32(hostdata->dev, script, ReceiveMsgAddress,

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: drivers/scsi/53c700.c:824:
+^I^I^I                MessageCount, 1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:CAMELCASE: Avoid CamelCase: <MessageCount>
#519: FILE: drivers/scsi/53c700.c:824:
+			                MessageCount, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: drivers/scsi/53c700.c:837:
+^I^I                1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: drivers/scsi/53c700.c:852:
+^I^I                1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: drivers/scsi/53c700.c:935:
+^I^I                1);$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#575: FILE: drivers/scsi/53c700.c:1021:
+				dma_cache_sync(hostdata->dev, slot->SG, sizeof(slot->SG[0])*2, DMA_TO_DEVICE);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#575: FILE: drivers/scsi/53c700.c:1021:
+				dma_cache_sync(hostdata->dev, slot->SG, sizeof(slot->SG[0])*2, DMA_TO_DEVICE);
 				                                                           ^

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#576: FILE: drivers/scsi/53c700.c:1022:
+				dma_cache_sync(hostdata->dev, SCp->sense_buffer, sizeof(SCp->sense_buffer), DMA_FROM_DEVICE);

CHECK:CAMELCASE: Avoid CamelCase: <SCp>
#576: FILE: drivers/scsi/53c700.c:1022:
+				dma_cache_sync(hostdata->dev, SCp->sense_buffer, sizeof(SCp->sense_buffer), DMA_FROM_DEVICE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: drivers/scsi/53c700.c:1139:
+^I^I^I                    CommandAddress, slot->pCmd);$

CHECK:CAMELCASE: Avoid CamelCase: <CommandAddress>
#589: FILE: drivers/scsi/53c700.c:1139:
+			                    CommandAddress, slot->pCmd);

CHECK:CAMELCASE: Avoid CamelCase: <pCmd>
#589: FILE: drivers/scsi/53c700.c:1139:
+			                    CommandAddress, slot->pCmd);

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: drivers/scsi/53c700.c:1143:
+^I^I^I                    SGScriptStartAddress,$

CHECK:CAMELCASE: Avoid CamelCase: <SGScriptStartAddress>
#594: FILE: drivers/scsi/53c700.c:1143:
+			                    SGScriptStartAddress,

CHECK:CAMELCASE: Avoid CamelCase: <CommandCount>
#649: FILE: drivers/scsi/53c700.c:1444:
+	script_patch_16(hostdata->dev, hostdata->script, CommandCount,

ERROR:CODE_INDENT: code indent should use tabs where possible
#650: FILE: drivers/scsi/53c700.c:1445:
+^I                SCp->cmd_len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: drivers/scsi/53c700.c:1449:
+^I                    SGScriptStartAddress, to32bit(&slot->pSG[0].ins));$

CHECK:CAMELCASE: Avoid CamelCase: <pSG>
#656: FILE: drivers/scsi/53c700.c:1449:
+	                    SGScriptStartAddress, to32bit(&slot->pSG[0].ins));

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#679: FILE: drivers/scsi/53c700.c:1635:
+				dma_cache_sync(hostdata->dev, slot->SG, sizeof(slot->SG), DMA_TO_DEVICE);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'script' - possible side-effects?
#704: FILE: drivers/scsi/53c700.h:418:
+#define script_patch_32(dev, script, symbol, value) \
 { \
 	int i; \
 	for(i=0; i< (sizeof(A_##symbol##_used) / sizeof(__u32)); i++) { \
 		__u32 val = bS_to_cpu((script)[A_##symbol##_used[i]]) + value; \
 		(script)[A_##symbol##_used[i]] = bS_to_host(val); \
+		dma_cache_sync((dev), &(script)[A_##symbol##_used[i]], 4, DMA_TO_DEVICE); \
 		DEBUG((" script, patching %s at %d to 0x%lx\n", \
 		       #symbol, A_##symbol##_used[i], (value))); \
 	} \
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#704: FILE: drivers/scsi/53c700.h:418:
+#define script_patch_32(dev, script, symbol, value) \
 { \
 	int i; \
 	for(i=0; i< (sizeof(A_##symbol##_used) / sizeof(__u32)); i++) { \
 		__u32 val = bS_to_cpu((script)[A_##symbol##_used[i]]) + value; \
 		(script)[A_##symbol##_used[i]] = bS_to_host(val); \
+		dma_cache_sync((dev), &(script)[A_##symbol##_used[i]], 4, DMA_TO_DEVICE); \
 		DEBUG((" script, patching %s at %d to 0x%lx\n", \
 		       #symbol, A_##symbol##_used[i], (value))); \
 	} \
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#704: FILE: drivers/scsi/53c700.h:418:
+#define script_patch_32(dev, script, symbol, value) \
 { \
 	int i; \
 	for(i=0; i< (sizeof(A_##symbol##_used) / sizeof(__u32)); i++) { \
 		__u32 val = bS_to_cpu((script)[A_##symbol##_used[i]]) + value; \
 		(script)[A_##symbol##_used[i]] = bS_to_host(val); \
+		dma_cache_sync((dev), &(script)[A_##symbol##_used[i]], 4, DMA_TO_DEVICE); \
 		DEBUG((" script, patching %s at %d to 0x%lx\n", \
 		       #symbol, A_##symbol##_used[i], (value))); \
 	} \
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'script' - possible side-effects?
#718: FILE: drivers/scsi/53c700.h:430:
+#define script_patch_32_abs(dev, script, symbol, value) \
 { \
 	int i; \
 	for(i=0; i< (sizeof(A_##symbol##_used) / sizeof(__u32)); i++) { \
 		(script)[A_##symbol##_used[i]] = bS_to_host(value); \
+		dma_cache_sync((dev), &(script)[A_##symbol##_used[i]], 4, DMA_TO_DEVICE); \
 		DEBUG((" script, patching %s at %d to 0x%lx\n", \
 		       #symbol, A_##symbol##_used[i], (value))); \
 	} \
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#718: FILE: drivers/scsi/53c700.h:430:
+#define script_patch_32_abs(dev, script, symbol, value) \
 { \
 	int i; \
 	for(i=0; i< (sizeof(A_##symbol##_used) / sizeof(__u32)); i++) { \
 		(script)[A_##symbol##_used[i]] = bS_to_host(value); \
+		dma_cache_sync((dev), &(script)[A_##symbol##_used[i]], 4, DMA_TO_DEVICE); \
 		DEBUG((" script, patching %s at %d to 0x%lx\n", \
 		       #symbol, A_##symbol##_used[i], (value))); \
 	} \
 }

CHECK:SPACING: No space is necessary after a cast
#770: FILE: drivers/serial/mpsc.c:558:
+		dma_cache_sync(pi->port.dev, (void *) txre, MPSC_TXRE_SIZE, DMA_FROM_DEVICE);

CHECK:SPACING: No space is necessary after a cast
#779: FILE: drivers/serial/mpsc.c:934:
+	dma_cache_sync(pi->port.dev, (void *) pi->dma_region, MPSC_DMA_ALLOC_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: drivers/serial/mpsc.c:935:
+	dma_cache_sync(pi->port.dev, (void *) pi->dma_region, MPSC_DMA_ALLOC_SIZE,
 		DMA_BIDIRECTIONAL);

CHECK:SPACING: No space is necessary after a cast
#797: FILE: drivers/serial/mpsc.c:1032:
+		dma_cache_sync(pi->port.dev, (void *) bp, MPSC_RXBE_SIZE, DMA_FROM_DEVICE);

CHECK:SPACING: No space is necessary after a cast
#824: FILE: drivers/serial/mpsc.c:1146:
+	dma_cache_sync(pi->port.dev, (void *) txre, MPSC_TXRE_SIZE, DMA_BIDIRECTIONAL);

CHECK:SPACING: No space is necessary after a cast
#833: FILE: drivers/serial/mpsc.c:1195:
+		dma_cache_sync(pi->port.dev, (void *) bp, MPSC_TXBE_SIZE, DMA_BIDIRECTIONAL);

CHECK:SPACING: No space is necessary after a cast
#842: FILE: drivers/serial/mpsc.c:1220:
+		dma_cache_sync(pi->port.dev, (void *) txre, MPSC_TXRE_SIZE, DMA_FROM_DEVICE);

CHECK:SPACING: No space is necessary after a cast
#851: FILE: drivers/serial/mpsc.c:1238:
+			dma_cache_sync(pi->port.dev, (void *) txre, MPSC_TXRE_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: drivers/serial/mpsc.c:1239:
+			dma_cache_sync(pi->port.dev, (void *) txre, MPSC_TXRE_SIZE,
 				DMA_FROM_DEVICE);

CHECK:SPACING: No space is necessary after a cast
#860: FILE: drivers/serial/mpsc.c:1655:
+		dma_cache_sync(pi->port.dev, (void *) bp, MPSC_TXBE_SIZE, DMA_BIDIRECTIONAL);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#886: FILE: include/asm-avr32/dma-mapping.h:11:
+extern void dma_cache_sync(struct device *dev, void *vaddr, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: include/asm-avr32/dma-mapping.h:12:
+extern void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
+	int direction);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#952: FILE: include/asm-ia64/dma-mapping.h:53:
+dma_cache_sync (struct device *dev, void *vaddr, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: include/asm-ia64/dma-mapping.h:54:
+dma_cache_sync (struct device *dev, void *vaddr, size_t size,
+	enum dma_data_direction dir)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#966: FILE: include/asm-m68k/dma-mapping.h:44:
 }
+static inline void dma_cache_sync(struct device *dev, void *vaddr, size_t size,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#979: FILE: include/asm-mips/dma-mapping.h:68:
+extern void dma_cache_sync(struct device *dev, void *vaddr, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: include/asm-mips/dma-mapping.h:69:
+extern void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 	       enum dma_data_direction direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: include/asm-powerpc/dma-mapping.h:258:
+static inline void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 		enum dma_data_direction direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1071: FILE: include/asm-x86_64/dma-mapping.h:189:
+dma_cache_sync(struct device *dev, void *vaddr, size_t size,
+	enum dma_data_direction dir)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014539.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 7 warnings, 53 checks, 828 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014539.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
