WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
module to perform efficient matches based on lower level selinux constructs,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#66: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: include/linux/selinux.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'operater' may be misspelled - perhaps 'operator'?
#94: FILE: include/linux/selinux.h:24:
+ *	@op: the operater the rule uses
   	         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: include/linux/selinux.h:33:
+                            struct selinux_audit_rule **rule);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: include/linux/selinux.h:33:
+                            struct selinux_audit_rule **rule);$

WARNING:TYPO_SPELLING: 'operater' may be misspelled - perhaps 'operator'?
#118: FILE: include/linux/selinux.h:48:
+ *	@op: the operater the rule uses
   	         ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: include/linux/selinux.h:56:
+                             struct selinux_audit_rule *rule,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: include/linux/selinux.h:56:
+                             struct selinux_audit_rule *rule,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: include/linux/selinux.h:57:
+                             struct audit_context *actx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: include/linux/selinux.h:57:
+                             struct audit_context *actx);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: include/linux/selinux.h:82:
+                                          char *rulestr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: include/linux/selinux.h:82:
+                                          char *rulestr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: include/linux/selinux.h:83:
+                                          struct selinux_audit_rule **rule)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: include/linux/selinux.h:83:
+                                          struct selinux_audit_rule **rule)$

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#155: FILE: include/linux/selinux.h:85:
+	return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:RETURN_VOID: void function return statements are not generally useful
#161: FILE: include/linux/selinux.h:91:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: include/linux/selinux.h:94:
+                                           struct selinux_audit_rule *rule,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: include/linux/selinux.h:94:
+                                           struct selinux_audit_rule *rule,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: include/linux/selinux.h:95:
+                                           struct audit_context *actx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/linux/selinux.h:95:
+                                           struct audit_context *actx)$

WARNING:RETURN_VOID: void function return statements are not generally useful
#173: FILE: include/linux/selinux.h:103:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: security/selinux/avc.c:817:
+^I^I^I                    0, 0, 0, 0, NULL);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#220: FILE: security/selinux/avc.c:819:
+			/* save the first error encountered for the return
+			   value and continue processing the callbacks */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#220: FILE: security/selinux/avc.c:819:
+			   value and continue processing the callbacks */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#237: FILE: security/selinux/exports.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: security/selinux/exports.c:24:
+	struct task_security_struct *tsec = tsk->security;
+	if (selinux_enabled)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#296: FILE: security/selinux/ss/mls.c:402:
+	/* we need freestr because mls_context_to_sid will change
+	   the value of tmpstr */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#296: FILE: security/selinux/ss/mls.c:402:
+	   the value of tmpstr */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#297: FILE: security/selinux/ss/mls.c:403:
+	tmpstr = freestr = kstrdup(str, gfp_mask);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: security/selinux/ss/mls.c:408:
+^I^I                        NULL, SECSID_NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: security/selinux/ss/services.c:1830:
+                            struct selinux_audit_rule **rule)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: security/selinux/ss/services.c:1830:
+                            struct selinux_audit_rule **rule)$

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#384: FILE: security/selinux/ss/services.c:1841:
+		return -ENOTSUPP;

WARNING:TYPO_SPELLING: 'presense' may be misspelled - perhaps 'presence'?
#396: FILE: security/selinux/ss/services.c:1853:
+		/* we do not allow a range, indicated by the presense of '-' */
 		                                             ^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tmprule)...) over kzalloc(sizeof(struct selinux_audit_rule)...)
#405: FILE: security/selinux/ss/services.c:1862:
+	tmprule = kzalloc(sizeof(struct selinux_audit_rule), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: security/selinux/ss/services.c:1913:
+                             struct selinux_audit_rule *rule,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: security/selinux/ss/services.c:1913:
+                             struct selinux_audit_rule *rule,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: security/selinux/ss/services.c:1914:
+                             struct audit_context *actx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: security/selinux/ss/services.c:1914:
+                             struct audit_context *actx)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: security/selinux/ss/services.c:1922:
+^I^I          "selinux_audit_rule_match: missing rule\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'selinux_audit_rule_match', this function's name, in a string
#465: FILE: security/selinux/ss/services.c:1922:
+		          "selinux_audit_rule_match: missing rule\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: security/selinux/ss/services.c:1930:
+^I^I          "selinux_audit_rule_match: stale rule\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'selinux_audit_rule_match', this function's name, in a string
#473: FILE: security/selinux/ss/services.c:1930:
+		          "selinux_audit_rule_match: stale rule\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: security/selinux/ss/services.c:1938:
+^I^I          "selinux_audit_rule_match: unrecognized SID %d\n",$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'selinux_audit_rule_match', this function's name, in a string
#481: FILE: security/selinux/ss/services.c:1938:
+		          "selinux_audit_rule_match: unrecognized SID %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: security/selinux/ss/services.c:1939:
+^I^I          ctxid);$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#487: FILE: security/selinux/ss/services.c:1944:
+	/* a field/op pair that is not caught here will simply fall through

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#488: FILE: security/selinux/ss/services.c:1945:
+	/* a field/op pair that is not caught here will simply fall through
+	   without a match */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#488: FILE: security/selinux/ss/services.c:1945:
+	   without a match */

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: security/selinux/ss/services.c:1980:
+^I^I         &ctxt->range.level[0] : &ctxt->range.level[1]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: security/selinux/ss/services.c:1984:
+^I^I^I                     level);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: security/selinux/ss/services.c:1988:
+^I^I^I                      level);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: security/selinux/ss/services.c:1992:
+^I^I^I                       level) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: security/selinux/ss/services.c:1993:
+^I^I^I         !mls_level_eq(&rule->au_ctxt.range.level[0],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: security/selinux/ss/services.c:1994:
+^I^I^I                       level));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: security/selinux/ss/services.c:1998:
+^I^I^I                      level);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: security/selinux/ss/services.c:2002:
+^I^I^I                      &rule->au_ctxt.range.level[0]) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: security/selinux/ss/services.c:2003:
+^I^I^I         !mls_level_eq(level,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: security/selinux/ss/services.c:2004:
+^I^I^I                       &rule->au_ctxt.range.level[0]));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: security/selinux/ss/services.c:2008:
+^I^I^I                      &rule->au_ctxt.range.level[0]);$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#561: FILE: security/selinux/ss/services.c:2018:
+static int (*aurule_callback)(void) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: security/selinux/ss/services.c:2021:
+                               u16 class, u32 perms, u32 *retained)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: security/selinux/ss/services.c:2021:
+                               u16 class, u32 perms, u32 *retained)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: security/selinux/ss/services.c:2035:
+^I                       SECSID_NULL, SECSID_NULL, SECCLASS_NULL, 0);$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#584: FILE: security/selinux/ss/services.c:2041:
+__initcall(aurule_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081096.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 34 warnings, 2 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081096.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
