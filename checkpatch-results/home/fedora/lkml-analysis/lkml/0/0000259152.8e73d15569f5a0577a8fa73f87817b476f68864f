ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: arch/ppc64/kernel/setup.c:520:
+ ^I^Iu32 *reg = (u32 *)get_property(prom_stdout, "reg", NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#59: FILE: arch/ppc64/kernel/setup.c:520:
+ ^I^Iu32 *reg = (u32 *)get_property(prom_stdout, "reg", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: arch/ppc64/kernel/setup.c:520:
+ ^I^Iu32 *reg = (u32 *)get_property(prom_stdout, "reg", NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: arch/ppc64/kernel/setup.c:521:
+ ^I^Ichar *compat = (char *)get_property(prom_stdout, "compatible", NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: arch/ppc64/kernel/setup.c:521:
+ ^I^Ichar *compat = (char *)get_property(prom_stdout, "compatible", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: arch/ppc64/kernel/setup.c:521:
+ ^I^Ichar *compat = (char *)get_property(prom_stdout, "compatible", NULL);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: arch/ppc64/kernel/setup.c:522:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: arch/ppc64/kernel/setup.c:522:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: arch/ppc64/kernel/setup.c:523:
+ ^I^Iif (reg && compat && (strcmp(compat, "hvterm-protocol") == 0)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#62: FILE: arch/ppc64/kernel/setup.c:523:
+ ^I^Iif (reg && compat && (strcmp(compat, "hvterm-protocol") == 0)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: arch/ppc64/kernel/setup.c:523:
+ ^I^Iif (reg && compat && (strcmp(compat, "hvterm-protocol") == 0)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: arch/ppc64/kernel/setup.c:524:
+ ^I^I^I/* Host Virtual Serial Interface */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#63: FILE: arch/ppc64/kernel/setup.c:524:
+ ^I^I^I/* Host Virtual Serial Interface */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/ppc64/kernel/setup.c:524:
+ ^I^I^I/* Host Virtual Serial Interface */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: arch/ppc64/kernel/setup.c:525:
+ ^I^I^Iint offset;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: arch/ppc64/kernel/setup.c:525:
+ ^I^I^Iint offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/ppc64/kernel/setup.c:525:
+ ^I^I^Iint offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: arch/ppc64/kernel/setup.c:526:
+ ^I^I^Iswitch (reg[0]) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#65: FILE: arch/ppc64/kernel/setup.c:526:
+ ^I^I^Iswitch (reg[0]) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#65: FILE: arch/ppc64/kernel/setup.c:526:
+ 			int offset;
+ 			switch (reg[0]) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: arch/ppc64/kernel/setup.c:526:
+ ^I^I^Iswitch (reg[0]) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#65: FILE: arch/ppc64/kernel/setup.c:526:
+ 			switch (reg[0]) {
+ 				case 0x30000000:
[...]
+ 				case 0x30000001:
[...]
+ 				default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: arch/ppc64/kernel/setup.c:527:
+ ^I^I^I^Icase 0x30000000:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: arch/ppc64/kernel/setup.c:527:
+ ^I^I^I^Icase 0x30000000:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/ppc64/kernel/setup.c:527:
+ ^I^I^I^Icase 0x30000000:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: arch/ppc64/kernel/setup.c:528:
+ ^I^I^I^I^Ioffset = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#67: FILE: arch/ppc64/kernel/setup.c:528:
+ ^I^I^I^I^Ioffset = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/ppc64/kernel/setup.c:528:
+ ^I^I^I^I^Ioffset = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: arch/ppc64/kernel/setup.c:529:
+ ^I^I^I^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: arch/ppc64/kernel/setup.c:529:
+ ^I^I^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: arch/ppc64/kernel/setup.c:529:
+ ^I^I^I^I^Ibreak;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: arch/ppc64/kernel/setup.c:530:
+ ^I^I^I^Icase 0x30000001:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#69: FILE: arch/ppc64/kernel/setup.c:530:
+ ^I^I^I^Icase 0x30000001:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/ppc64/kernel/setup.c:530:
+ ^I^I^I^Icase 0x30000001:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/ppc64/kernel/setup.c:531:
+ ^I^I^I^I^Ioffset = 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: arch/ppc64/kernel/setup.c:531:
+ ^I^I^I^I^Ioffset = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/ppc64/kernel/setup.c:531:
+ ^I^I^I^I^Ioffset = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: arch/ppc64/kernel/setup.c:532:
+ ^I^I^I^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#71: FILE: arch/ppc64/kernel/setup.c:532:
+ ^I^I^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: arch/ppc64/kernel/setup.c:532:
+ ^I^I^I^I^Ibreak;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: arch/ppc64/kernel/setup.c:533:
+ ^I^I^I^Idefault:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#72: FILE: arch/ppc64/kernel/setup.c:533:
+ ^I^I^I^Idefault:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/ppc64/kernel/setup.c:533:
+ ^I^I^I^Idefault:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: arch/ppc64/kernel/setup.c:534:
+ ^I^I^I^I^Ireturn -ENODEV;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#73: FILE: arch/ppc64/kernel/setup.c:534:
+ ^I^I^I^I^Ireturn -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/ppc64/kernel/setup.c:534:
+ ^I^I^I^I^Ireturn -ENODEV;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/ppc64/kernel/setup.c:535:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: arch/ppc64/kernel/setup.c:535:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/ppc64/kernel/setup.c:535:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: arch/ppc64/kernel/setup.c:536:
+ ^I^I^Ireturn add_preferred_console("hvsi", offset, NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: arch/ppc64/kernel/setup.c:536:
+ ^I^I^Ireturn add_preferred_console("hvsi", offset, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: arch/ppc64/kernel/setup.c:536:
+ ^I^I^Ireturn add_preferred_console("hvsi", offset, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: arch/ppc64/kernel/setup.c:537:
+ ^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: arch/ppc64/kernel/setup.c:537:
+ ^I^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/ppc64/kernel/setup.c:537:
+ ^I^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: arch/ppc64/kernel/setup.c:538:
+ ^I^I^I/* pSeries LPAR virtual console */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#77: FILE: arch/ppc64/kernel/setup.c:538:
+ ^I^I^I/* pSeries LPAR virtual console */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: arch/ppc64/kernel/setup.c:538:
+ ^I^I^I/* pSeries LPAR virtual console */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: arch/ppc64/kernel/setup.c:539:
+ ^I^I^Ireturn add_preferred_console("hvc", 0, NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: arch/ppc64/kernel/setup.c:539:
+ ^I^I^Ireturn add_preferred_console("hvc", 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: arch/ppc64/kernel/setup.c:539:
+ ^I^I^Ireturn add_preferred_console("hvc", 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: arch/ppc64/kernel/setup.c:540:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#79: FILE: arch/ppc64/kernel/setup.c:540:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: arch/ppc64/kernel/setup.c:540:
+ ^I^I}$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: drivers/char/hvsi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: drivers/char/hvsi.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: drivers/char/hvsi.c:13:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: drivers/char/hvsi.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: drivers/char/hvsi.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: drivers/char/hvsi.c:18:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: drivers/char/hvsi.c:18:
+ $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#141: FILE: drivers/char/hvsi.c:55:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#148: FILE: drivers/char/hvsi.c:62:
+#define HVSI_TIMEOUT (5*HZ)
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(sizeof(long)) over __attribute__((__aligned__(sizeof(long))))
#159: FILE: drivers/char/hvsi.c:73:
+#define __ALIGNED__	__attribute__((__aligned__(sizeof(long))))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#169: FILE: drivers/char/hvsi.c:83:
+	uint8_t throttle_buf[128];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#170: FILE: drivers/char/hvsi.c:84:
+	uint8_t outbuf[N_OUTBUF]; /* to implement write_room and chars_in_buffer */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#172: FILE: drivers/char/hvsi.c:86:
+	uint8_t inbuf[HVSI_MAX_PACKET + HVSI_MAX_READ];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#173: FILE: drivers/char/hvsi.c:87:
+	uint8_t *inbuf_end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#176: FILE: drivers/char/hvsi.c:90:
+	uint32_t vtermno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#177: FILE: drivers/char/hvsi.c:91:
+	uint32_t virq;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#179: FILE: drivers/char/hvsi.c:93:
+	uint16_t mctrl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#180: FILE: drivers/char/hvsi.c:94:
+	uint8_t state;  /* HVSI protocol state */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#181: FILE: drivers/char/hvsi.c:95:
+	uint8_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#183: FILE: drivers/char/hvsi.c:97:
+	uint8_t sysrq;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#186: FILE: drivers/char/hvsi.c:100:
+};
+static struct hvsi_struct hvsi_ports[MAX_NR_HVSI_CONSOLES];

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#199: FILE: drivers/char/hvsi.c:113:
+};
+#define HVSI_CONSOLE 0x1

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#220: FILE: drivers/char/hvsi.c:134:
+	uint8_t  type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#221: FILE: drivers/char/hvsi.c:135:
+	uint8_t  len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#222: FILE: drivers/char/hvsi.c:136:
+	uint16_t seqno;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#223: FILE: drivers/char/hvsi.c:137:
+} __attribute__((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#226: FILE: drivers/char/hvsi.c:140:
+	uint8_t  type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#227: FILE: drivers/char/hvsi.c:141:
+	uint8_t  len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#228: FILE: drivers/char/hvsi.c:142:
+	uint16_t seqno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#229: FILE: drivers/char/hvsi.c:143:
+	uint8_t  data[HVSI_MAX_OUTGOING_DATA];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#230: FILE: drivers/char/hvsi.c:144:
+} __attribute__((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#233: FILE: drivers/char/hvsi.c:147:
+	uint8_t  type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#234: FILE: drivers/char/hvsi.c:148:
+	uint8_t  len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#235: FILE: drivers/char/hvsi.c:149:
+	uint16_t seqno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#236: FILE: drivers/char/hvsi.c:150:
+	uint16_t verb;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#238: FILE: drivers/char/hvsi.c:152:
+	uint32_t word;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#239: FILE: drivers/char/hvsi.c:153:
+	uint32_t mask;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#240: FILE: drivers/char/hvsi.c:154:
+} __attribute__((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#243: FILE: drivers/char/hvsi.c:157:
+	uint8_t  type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#244: FILE: drivers/char/hvsi.c:158:
+	uint8_t  len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#245: FILE: drivers/char/hvsi.c:159:
+	uint16_t seqno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#246: FILE: drivers/char/hvsi.c:160:
+	uint16_t verb;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#247: FILE: drivers/char/hvsi.c:161:
+} __attribute__((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#250: FILE: drivers/char/hvsi.c:164:
+	uint8_t  type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#251: FILE: drivers/char/hvsi.c:165:
+	uint8_t  len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#252: FILE: drivers/char/hvsi.c:166:
+	uint16_t seqno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#253: FILE: drivers/char/hvsi.c:167:
+	uint16_t verb;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#254: FILE: drivers/char/hvsi.c:168:
+	uint16_t query_seqno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#256: FILE: drivers/char/hvsi.c:170:
+		uint8_t  version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#257: FILE: drivers/char/hvsi.c:171:
+		uint32_t mctrl_word;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#259: FILE: drivers/char/hvsi.c:173:
+} __attribute__((packed));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#265: FILE: drivers/char/hvsi.c:179:
+	return (hp->state == HVSI_OPEN)
+			|| (hp->state == HVSI_WAIT_FOR_MCTRL_RESPONSE);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#271: FILE: drivers/char/hvsi.c:185:
+	static const char *state_names[] = {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#280: FILE: drivers/char/hvsi.c:194:
+	if (hp->state > (sizeof(state_names)/sizeof(char*)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#280: FILE: drivers/char/hvsi.c:194:
+	if (hp->state > (sizeof(state_names)/sizeof(char*)))
 	                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: drivers/char/hvsi.c:225:
+	struct hvsi_header *header = (struct hvsi_header *)packet;
+	return header->type >= VS_QUERY_RESPONSE_PACKET_HEADER;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#330: FILE: drivers/char/hvsi.c:244:
+	pr_debug("%s: %i chars remain\n", __FUNCTION__, remaining);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#346: FILE: drivers/char/hvsi.c:260:
+static void dump_hex(const uint8_t *data, int len)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#350: FILE: drivers/char/hvsi.c:264:
+	printk("    ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#351: FILE: drivers/char/hvsi.c:265:
+	for (i=0; i < len; i++)
 	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: drivers/char/hvsi.c:266:
+		printk("%.2x", data[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#354: FILE: drivers/char/hvsi.c:268:
+	printk("\n    ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#355: FILE: drivers/char/hvsi.c:269:
+	for (i=0; i < len; i++) {
 	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#357: FILE: drivers/char/hvsi.c:271:
+			printk("%c", data[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#359: FILE: drivers/char/hvsi.c:273:
+			printk(".");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#361: FILE: drivers/char/hvsi.c:275:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#368: FILE: drivers/char/hvsi.c:282:
+	printk("type 0x%x, len %i, seqno %i:\n", header->type, header->len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/char/hvsi.c:283:
+	printk("type 0x%x, len %i, seqno %i:\n", header->type, header->len,
+			header->seqno);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: drivers/char/hvsi.c:294:
+			(unsigned long *)buf, (unsigned long *)buf+1) == H_Success)
 			                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: drivers/char/hvsi.c:304:
+static struct tty_struct *hvsi_recv_control(struct hvsi_struct *hp,
+		uint8_t *packet)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#395: FILE: drivers/char/hvsi.c:309:
+	switch (header->verb) {
+		case VSV_MODEM_CTL_UPDATE:
[...]
+		case VSV_CLOSE_PROTOCOL:
[...]
+		default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#406: FILE: drivers/char/hvsi.c:320:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#413: FILE: drivers/char/hvsi.c:327:
+			printk(KERN_WARNING "hvsi%i: unknown HVSI control packet: ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/char/hvsi.c:328:
+			printk(KERN_WARNING "hvsi%i: unknown HVSI control packet: ",
+				hp->index);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#426: FILE: drivers/char/hvsi.c:340:
+	switch (hp->state) {
+		case HVSI_WAIT_FOR_VER_RESPONSE:
[...]
+		case HVSI_WAIT_FOR_MCTRL_RESPONSE:
[...]
+		default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#439: FILE: drivers/char/hvsi.c:353:
+			printk(KERN_ERR "hvsi%i: unexpected query response: ", hp->index);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#456: FILE: drivers/char/hvsi.c:370:
+	packet.query_seqno = query_seqno+1;
 	                                ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#458: FILE: drivers/char/hvsi.c:372:
+	pr_debug("%s: sending %i bytes\n", __FUNCTION__, packet.len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#459: FILE: drivers/char/hvsi.c:373:
+	dbg_dump_hex((uint8_t*)&packet, packet.len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#463: FILE: drivers/char/hvsi.c:377:
+		printk(KERN_ERR "hvsi%i: couldn't send query response!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: drivers/char/hvsi.c:378:
+		printk(KERN_ERR "hvsi%i: couldn't send query response!\n",
+			hp->index);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#475: FILE: drivers/char/hvsi.c:389:
+	switch (hp->state) {
+		case HVSI_WAIT_FOR_VER_QUERY:
[...]
+		default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#481: FILE: drivers/char/hvsi.c:395:
+			printk(KERN_ERR "hvsi%i: unexpected query: ", hp->index);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#491: FILE: drivers/char/hvsi.c:405:
+	for (i=0; i < len; i++) {
 	      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/char/hvsi.c:431:
+static struct tty_struct *hvsi_recv_data(struct hvsi_struct *hp,
+		const uint8_t *packet)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#520: FILE: drivers/char/hvsi.c:434:
+	const uint8_t *data = packet + sizeof(struct hvsi_header);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#530: FILE: drivers/char/hvsi.c:444:
+		pr_debug("%s: got >TTY_THRESHOLD_THROTTLE bytes\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#541: FILE: drivers/char/hvsi.c:455:
+		pr_debug("%s: deferring overflow\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: drivers/char/hvsi.c:463:
+/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: drivers/char/hvsi.c:470:
+static int hvsi_load_chunk(struct hvsi_struct *hp, struct tty_struct **flip,
+		struct tty_struct **hangup)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#558: FILE: drivers/char/hvsi.c:472:
+	uint8_t *packet = hp->inbuf;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#568: FILE: drivers/char/hvsi.c:482:
+	pr_debug("%s: got %i bytes\n", __FUNCTION__, chunklen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#578: FILE: drivers/char/hvsi.c:492:
+			printk(KERN_ERR "hvsi%i: got malformed packet\n", hp->index);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#585: FILE: drivers/char/hvsi.c:499:
+		pr_debug("%s: handling %i-byte packet\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: drivers/char/hvsi.c:500:
+		pr_debug("%s: handling %i-byte packet\n", __FUNCTION__,
+				len_packet(packet));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#589: FILE: drivers/char/hvsi.c:503:
+		switch (header->type) {
+			case VS_DATA_PACKET_HEADER:
[...]
+			case VS_CONTROL_PACKET_HEADER:
[...]
+			case VS_QUERY_RESPONSE_PACKET_HEADER:
[...]
+			case VS_QUERY_PACKET_HEADER:
[...]
+			default:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hp->tty"
#593: FILE: drivers/char/hvsi.c:507:
+				if (hp->tty == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#607: FILE: drivers/char/hvsi.c:521:
+				printk(KERN_ERR "hvsi%i: unknown HVSI packet type 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: drivers/char/hvsi.c:522:
+				printk(KERN_ERR "hvsi%i: unknown HVSI packet type 0x%x\n",
+						hp->index, header->type);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#616: FILE: drivers/char/hvsi.c:530:
+			pr_debug("%s: hangup\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: drivers/char/hvsi.c:532:
+^I^I^I * we need to send the hangup now before receiving any more data. $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#633: FILE: drivers/char/hvsi.c:547:
+	pr_debug("%s: delivering %i bytes overflow\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: drivers/char/hvsi.c:548:
+	pr_debug("%s: delivering %i bytes overflow\n", __FUNCTION__,
+			hp->n_throttle);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#653: FILE: drivers/char/hvsi.c:567:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#673: FILE: drivers/char/hvsi.c:587:
+		if (hangup) {
+			tty_hangup(hangup);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#680: FILE: drivers/char/hvsi.c:594:
+	if (hp->tty && hp->n_throttle
+			&& (!test_bit(TTY_THROTTLED, &hp->tty->flags))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#682: FILE: drivers/char/hvsi.c:596:
+		 * rest now */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#688: FILE: drivers/char/hvsi.c:602:
+	if (flip) {
+		tty_flip_buffer_push(flip);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: drivers/char/hvsi.c:623:
+^I} $

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: drivers/char/hvsi.c:634:
+	DECLARE_WAITQUEUE(myself, current);
+	set_current_state(TASK_INTERRUPTIBLE);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#750: FILE: drivers/char/hvsi.c:664:
+	pr_debug("%s: sending %i bytes\n", __FUNCTION__, packet.len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#751: FILE: drivers/char/hvsi.c:665:
+	dbg_dump_hex((uint8_t*)&packet, packet.len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#755: FILE: drivers/char/hvsi.c:669:
+		printk(KERN_ERR "hvsi%i: couldn't send query (%i)!\n", hp->index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: drivers/char/hvsi.c:670:
+		printk(KERN_ERR "hvsi%i: couldn't send query (%i)!\n", hp->index,
+			wrote);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#772: FILE: drivers/char/hvsi.c:686:
+		printk(KERN_ERR "hvsi%i: didn't get modem flags\n", hp->index);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#777: FILE: drivers/char/hvsi.c:691:
+	pr_debug("%s: mctrl 0x%x\n", __FUNCTION__, hp->mctrl);

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#788: FILE: drivers/char/hvsi.c:702:
+	packet.type = VS_CONTROL_PACKET_HEADER,
+	packet.seqno = atomic_inc_return(&hp->seqno);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#797: FILE: drivers/char/hvsi.c:711:
+	pr_debug("%s: sending %i bytes\n", __FUNCTION__, packet.len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#798: FILE: drivers/char/hvsi.c:712:
+	dbg_dump_hex((uint8_t*)&packet, packet.len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#802: FILE: drivers/char/hvsi.c:716:
+		printk(KERN_ERR "hvsi%i: couldn't set DTR!\n", hp->index);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#811: FILE: drivers/char/hvsi.c:725:
+	uint8_t buf[HVSI_MAX_READ] __ALIGNED__;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#815: FILE: drivers/char/hvsi.c:729:
+		if (0 == hvsi_read(hp, buf, HVSI_MAX_READ))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#835: FILE: drivers/char/hvsi.c:749:
+		printk(KERN_ERR "hvsi%i: couldn't send version query\n", hp->index);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#851: FILE: drivers/char/hvsi.c:765:
+	BUG_ON(count > HVSI_MAX_OUTGOING_DATA);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#875: FILE: drivers/char/hvsi.c:789:
+	pr_debug("%s: sending %i bytes\n", __FUNCTION__, packet.len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#876: FILE: drivers/char/hvsi.c:790:
+	dbg_dump_hex((uint8_t*)&packet, packet.len);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#881: FILE: drivers/char/hvsi.c:795:
+static int hvsi_open(struct tty_struct *tty, struct file *filp)
                                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#888: FILE: drivers/char/hvsi.c:802:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#909: FILE: drivers/char/hvsi.c:823:
+		printk(KERN_ERR "%s: HVSI handshaking failed\n", tty->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#915: FILE: drivers/char/hvsi.c:829:
+		printk(KERN_ERR "%s: couldn't get initial modem flags\n", tty->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#921: FILE: drivers/char/hvsi.c:835:
+		printk(KERN_ERR "%s: couldn't set DTR\n", tty->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: drivers/char/hvsi.c:849:
+	DECLARE_WAITQUEUE(myself, current);
+	set_current_state(TASK_UNINTERRUPTIBLE);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#961: FILE: drivers/char/hvsi.c:875:
+static void hvsi_close(struct tty_struct *tty, struct file *filp)
                                                             ^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#966: FILE: drivers/char/hvsi.c:880:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#968: FILE: drivers/char/hvsi.c:882:
+	if (tty_hung_up_p(filp))
 	                  ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1007: FILE: drivers/char/hvsi.c:921:
+		printk(KERN_ERR "hvsi_close %lu: oops, count is %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hvsi_close', this function's name, in a string
#1007: FILE: drivers/char/hvsi.c:921:
+		printk(KERN_ERR "hvsi_close %lu: oops, count is %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1017: FILE: drivers/char/hvsi.c:931:
+	pr_debug("%s\n", __FUNCTION__);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1047: FILE: drivers/char/hvsi.c:961:
+	static long start_j = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1056: FILE: drivers/char/hvsi.c:970:
+	if (hp->n_outbuf > 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1058: FILE: drivers/char/hvsi.c:972:
+	else {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1060: FILE: drivers/char/hvsi.c:974:
+		pr_debug("%s: outbuf emptied after %li jiffies\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: drivers/char/hvsi.c:975:
+		pr_debug("%s: outbuf emptied after %li jiffies\n", __FUNCTION__,
+				jiffies - start_j);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1066: FILE: drivers/char/hvsi.c:980:
+		if (test_bit(TTY_DO_WRITE_WAKEUP, &hp->tty->flags)
+				&& hp->tty->ldisc.write_wakeup)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1089: FILE: drivers/char/hvsi.c:1003:
+static int hvsi_write(struct tty_struct *tty, int from_user,
+		     const unsigned char *buf, int count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kbuf"
#1100: FILE: drivers/char/hvsi.c:1014:
+		if (kbuf == NULL)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1113: FILE: drivers/char/hvsi.c:1027:
+		pr_debug("%s: not open\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1125: FILE: drivers/char/hvsi.c:1039:
+		BUG_ON(hp->n_outbuf < 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1150: FILE: drivers/char/hvsi.c:1064:
+		pr_debug("%s: wanted %i, only wrote %i\n", __FUNCTION__, origcount,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: drivers/char/hvsi.c:1065:
+		pr_debug("%s: wanted %i, only wrote %i\n", __FUNCTION__, origcount,
+			total);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1164: FILE: drivers/char/hvsi.c:1078:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1175: FILE: drivers/char/hvsi.c:1089:
+	pr_debug("%s\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: drivers/char/hvsi.c:1113:
+static int hvsi_tiocmset(struct tty_struct *tty, struct file *file,
+		unsigned int set, unsigned int clear)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1203: FILE: drivers/char/hvsi.c:1117:
+	uint16_t new_mctrl;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1222: FILE: drivers/char/hvsi.c:1136:
+
+

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#1223: FILE: drivers/char/hvsi.c:1137:
+static struct tty_operations hvsi_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1256: FILE: drivers/char/hvsi.c:1170:
+	for (i=0; i < hvsi_count; i++) {
 	      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1262: FILE: drivers/char/hvsi.c:1176:
+			printk(KERN_ERR "HVSI: couldn't reserve irq 0x%x (error %i)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: drivers/char/hvsi.c:1177:
+			printk(KERN_ERR "HVSI: couldn't reserve irq 0x%x (error %i)\n",
+				hp->virq, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1270: FILE: drivers/char/hvsi.c:1184:
+	printk(KERN_INFO "HVSI: registered %i devices\n", hvsi_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: drivers/char/hvsi.c:1193:
+static void hvsi_console_print(struct console *console, const char *buf,
+		unsigned int count)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1286: FILE: drivers/char/hvsi.c:1200:
+	mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: drivers/char/hvsi.c:1228:
+static struct tty_driver *hvsi_console_device(struct console *console,
+	int *index)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vty"
#1365: FILE: drivers/char/hvsi.c:1279:
+			vty != NULL;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1368: FILE: drivers/char/hvsi.c:1282:
+		uint32_t *vtermno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1369: FILE: drivers/char/hvsi.c:1283:
+		uint32_t *irq;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1391: FILE: drivers/char/hvsi.c:1305:
+		if (hp->virq == NO_IRQ) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1392: FILE: drivers/char/hvsi.c:1306:
+			printk(KERN_ERR "%s: couldn't create irq mapping for 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1393: FILE: drivers/char/hvsi.c:1307:
+			printk(KERN_ERR "%s: couldn't create irq mapping for 0x%x\n",
+				__FUNCTION__, hp->virq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1393: FILE: drivers/char/hvsi.c:1307:
+				__FUNCTION__, hp->virq);

CHECK:BRACES: Unbalanced braces around else statement
#1395: FILE: drivers/char/hvsi.c:1309:
+		} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 115 warnings, 76 checks, 1360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
