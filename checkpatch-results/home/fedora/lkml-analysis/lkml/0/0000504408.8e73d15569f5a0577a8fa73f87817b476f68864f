Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
diff -Naur -X /home/jgarzik/lib/dontdiff /home/jgarzik/tmp/linux-2.4.14-pre2/include/linux/zlib_fs.h linux_2_4/include/linux/zlib_fs.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#25: FILE: include/linux/zlib_fs.h:1:
+/* zlib.h -- interface of the 'zlib' general purpose compression library

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#26: FILE: include/linux/zlib_fs.h:2:
+/* zlib.h -- interface of the 'zlib' general purpose compression library
+  version 1.1.3, July 9th, 1998

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#49: FILE: include/linux/zlib_fs.h:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: include/linux/zlib_fs.h:42:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#67: FILE: include/linux/zlib_fs.h:43:
+/* 
+     The 'zlib' compression library provides in-memory compression and

WARNING:NEW_TYPEDEFS: do not add new typedefs
#87: FILE: include/linux/zlib_fs.h:63:
+typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#87: FILE: include/linux/zlib_fs.h:63:
+typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#87: FILE: include/linux/zlib_fs.h:63:
+typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#88: FILE: include/linux/zlib_fs.h:64:
+typedef void   (*free_func)  OF((voidpf opaque, voidpf address));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#92: FILE: include/linux/zlib_fs.h:68:
+typedef struct z_stream_s {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: include/linux/zlib_fs.h:69:
+    Bytef    *next_in;  /* next input byte */$

CHECK:CAMELCASE: Avoid CamelCase: <Bytef>
#93: FILE: include/linux/zlib_fs.h:69:
+    Bytef    *next_in;  /* next input byte */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: include/linux/zlib_fs.h:70:
+    uInt     avail_in;  /* number of bytes available at next_in */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/linux/zlib_fs.h:71:
+    uLong    total_in;  /* total nb of input bytes read so far */$

CHECK:CAMELCASE: Avoid CamelCase: <uLong>
#95: FILE: include/linux/zlib_fs.h:71:
+    uLong    total_in;  /* total nb of input bytes read so far */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: include/linux/zlib_fs.h:73:
+    Bytef    *next_out; /* next output byte should be put there */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: include/linux/zlib_fs.h:74:
+    uInt     avail_out; /* remaining free space at next_out */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: include/linux/zlib_fs.h:75:
+    uLong    total_out; /* total nb of bytes output so far */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: include/linux/zlib_fs.h:77:
+    char     *msg;      /* last error message, NULL if no error */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/linux/zlib_fs.h:78:
+    struct internal_state FAR *state; /* not visible by applications */$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#102: FILE: include/linux/zlib_fs.h:78:
+    struct internal_state FAR *state; /* not visible by applications */
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/linux/zlib_fs.h:80:
+    void     *workspace; /* memory allocated for this stream */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: include/linux/zlib_fs.h:82:
+    int     data_type;  /* best guess about the data type: ascii or binary */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/linux/zlib_fs.h:83:
+    uLong   adler;      /* adler32 value of the uncompressed data */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: include/linux/zlib_fs.h:84:
+    uLong   reserved;   /* reserved for future use */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#111: FILE: include/linux/zlib_fs.h:87:
+typedef z_stream FAR *z_streamp;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#111: FILE: include/linux/zlib_fs.h:87:
+typedef z_stream FAR *z_streamp;
                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#114: FILE: include/linux/zlib_fs.h:90:
+/*
+   The application must update next_in and avail_in when avail_in has

WARNING:TYPO_SPELLING: 'MSDOS' may be misspelled - perhaps ''?
#131: FILE: include/linux/zlib_fs.h:107:
+   if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,
                                                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: include/linux/zlib_fs.h:121:
+                        /* constants */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: include/linux/zlib_fs.h:164:
+                        /* basic functions */$

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_zlibVersion>
#190: FILE: include/linux/zlib_fs.h:166:
+ZEXTERN const char * ZEXPORT zlib_fs_zlibVersion OF((void));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#192: FILE: include/linux/zlib_fs.h:168:
+/* The application can compare zlibVersion and ZLIB_VERSION for consistency.
+   If the first character differs, the library code actually used is

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: include/linux/zlib_fs.h:173:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#198: FILE: include/linux/zlib_fs.h:174:
+/* 
+ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: include/linux/zlib_fs.h:195:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#222: FILE: include/linux/zlib_fs.h:198:
+/*
+    deflate compresses as much data as possible, and stops when the input

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: include/linux/zlib_fs.h:251:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#297: FILE: include/linux/zlib_fs.h:273:
+
+

ERROR:POINTER_LOCATION: "fooEnd bar" should be "foo End bar"
#298: FILE: include/linux/zlib_fs.h:274:
+ZEXTERN int ZEXPORT zlib_fs_deflateEnd OF((z_streamp strm));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateEnd>
#298: FILE: include/linux/zlib_fs.h:274:
+ZEXTERN int ZEXPORT zlib_fs_deflateEnd OF((z_streamp strm));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#300: FILE: include/linux/zlib_fs.h:276:
+/*
+     All dynamically allocated data structures for this stream are freed.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#311: FILE: include/linux/zlib_fs.h:287:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#314: FILE: include/linux/zlib_fs.h:290:
+/*
+   Returns the number of bytes that needs to be allocated for a per-

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: include/linux/zlib_fs.h:295:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#320: FILE: include/linux/zlib_fs.h:296:
+/* 
+ZEXTERN int ZEXPORT zlib_fs_inflateInit OF((z_streamp strm));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: include/linux/zlib_fs.h:315:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: include/linux/zlib_fs.h:318:
+/*
+    inflate decompresses as much data as possible, and stops when the input

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: include/linux/zlib_fs.h:364:
+  dictionary chosen by the compressor and returns Z_NEED_DICT; otherwise $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#408: FILE: include/linux/zlib_fs.h:384:
+
+

ERROR:POINTER_LOCATION: "fooEnd bar" should be "foo End bar"
#409: FILE: include/linux/zlib_fs.h:385:
+ZEXTERN int ZEXPORT zlib_fs_inflateEnd OF((z_streamp strm));

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateEnd>
#409: FILE: include/linux/zlib_fs.h:385:
+ZEXTERN int ZEXPORT zlib_fs_inflateEnd OF((z_streamp strm));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#411: FILE: include/linux/zlib_fs.h:387:
+/*
+     All dynamically allocated data structures for this stream are freed.

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: include/linux/zlib_fs.h:396:
+                        /* Advanced functions */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#423: FILE: include/linux/zlib_fs.h:399:
+/*
+    The following functions are needed only in some special applications.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: include/linux/zlib_fs.h:402:
+/*   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#427: FILE: include/linux/zlib_fs.h:403:
+/*   
+ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: include/linux/zlib_fs.h:404:
+                                     int  level,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: include/linux/zlib_fs.h:405:
+                                     int  method,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: include/linux/zlib_fs.h:406:
+                                     int  windowBits,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: include/linux/zlib_fs.h:407:
+                                     int  memLevel,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: include/linux/zlib_fs.h:408:
+                                     int  strategy));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: include/linux/zlib_fs.h:445:
+                            $

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: include/linux/zlib_fs.h:445:
+                            $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: include/linux/zlib_fs.h:445:
+                            $

ERROR:POINTER_LOCATION: "fooSetDictionary bar" should be "foo SetDictionary bar"
#470: FILE: include/linux/zlib_fs.h:446:
+ZEXTERN int ZEXPORT zlib_fs_deflateSetDictionary OF((z_streamp strm,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateSetDictionary>
#470: FILE: include/linux/zlib_fs.h:446:
+ZEXTERN int ZEXPORT zlib_fs_deflateSetDictionary OF((z_streamp strm,

CHECK:CAMELCASE: Avoid CamelCase: <dictLength>
#472: FILE: include/linux/zlib_fs.h:448:
+						     uInt  dictLength));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#474: FILE: include/linux/zlib_fs.h:450:
+/*
+     Initializes the compression dictionary from the given byte sequence

ERROR:POINTER_LOCATION: "fooCopy bar" should be "foo Copy bar"
#506: FILE: include/linux/zlib_fs.h:482:
+ZEXTERN int ZEXPORT zlib_fs_deflateCopy OF((z_streamp dest,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateCopy>
#506: FILE: include/linux/zlib_fs.h:482:
+ZEXTERN int ZEXPORT zlib_fs_deflateCopy OF((z_streamp dest,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#509: FILE: include/linux/zlib_fs.h:485:
+/*
+     Sets the destination stream as a complete copy of the source stream.

ERROR:POINTER_LOCATION: "fooReset bar" should be "foo Reset bar"
#524: FILE: include/linux/zlib_fs.h:500:
+ZEXTERN int ZEXPORT zlib_fs_deflateReset OF((z_streamp strm));

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateReset>
#524: FILE: include/linux/zlib_fs.h:500:
+ZEXTERN int ZEXPORT zlib_fs_deflateReset OF((z_streamp strm));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#526: FILE: include/linux/zlib_fs.h:502:
+/*
+     This function is equivalent to deflateEnd followed by deflateInit,

ERROR:POINTER_LOCATION: "fooParams bar" should be "foo Params bar"
#535: FILE: include/linux/zlib_fs.h:511:
+ZEXTERN int ZEXPORT zlib_fs_deflateParams OF((z_streamp strm,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateParams>
#535: FILE: include/linux/zlib_fs.h:511:
+ZEXTERN int ZEXPORT zlib_fs_deflateParams OF((z_streamp strm,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#539: FILE: include/linux/zlib_fs.h:515:
+/*
+     Dynamically update the compression level and compression strategy.  The

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: include/linux/zlib_fs.h:532:
+/*   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#557: FILE: include/linux/zlib_fs.h:533:
+/*   
+ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: include/linux/zlib_fs.h:534:
+                                     int  windowBits));$

ERROR:POINTER_LOCATION: "fooSetDictionary bar" should be "foo SetDictionary bar"
#579: FILE: include/linux/zlib_fs.h:555:
+ZEXTERN int ZEXPORT zlib_fs_inflateSetDictionary OF((z_streamp strm,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateSetDictionary>
#579: FILE: include/linux/zlib_fs.h:555:
+ZEXTERN int ZEXPORT zlib_fs_inflateSetDictionary OF((z_streamp strm,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#583: FILE: include/linux/zlib_fs.h:559:
+/*
+     Initializes the decompression dictionary from the given uncompressed byte

ERROR:POINTER_LOCATION: "fooSync bar" should be "foo Sync bar"
#598: FILE: include/linux/zlib_fs.h:574:
+ZEXTERN int ZEXPORT zlib_fs_inflateSync OF((z_streamp strm));

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateSync>
#598: FILE: include/linux/zlib_fs.h:574:
+ZEXTERN int ZEXPORT zlib_fs_inflateSync OF((z_streamp strm));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: include/linux/zlib_fs.h:575:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#600: FILE: include/linux/zlib_fs.h:576:
+/* 
+    Skips invalid compressed data until a full flush point (see above the

WARNING:REPEATED_WORD: Possible repeated word: 'current'
#607: FILE: include/linux/zlib_fs.h:583:
+  case, the application may save the current current value of total_in which

ERROR:POINTER_LOCATION: "fooReset bar" should be "foo Reset bar"
#613: FILE: include/linux/zlib_fs.h:589:
+ZEXTERN int ZEXPORT zlib_fs_inflateReset OF((z_streamp strm));

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateReset>
#613: FILE: include/linux/zlib_fs.h:589:
+ZEXTERN int ZEXPORT zlib_fs_inflateReset OF((z_streamp strm));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#615: FILE: include/linux/zlib_fs.h:591:
+/*
+     This function is equivalent to inflateEnd followed by inflateInit,

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: include/linux/zlib_fs.h:599:
+                        /* checksum functions */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#626: FILE: include/linux/zlib_fs.h:602:
+/*
+     These functions are not related to compression but are exported

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#634: FILE: include/linux/zlib_fs.h:610:
+/*
+     Update a running Adler-32 checksum with the bytes buf[0..len-1] and

ERROR:POINTER_LOCATION: "foo zlib_fs_crc32   bar" should be "foo zlib_fs_crc32 bar"
#648: FILE: include/linux/zlib_fs.h:624:
+ZEXTERN uLong ZEXPORT zlib_fs_crc32   OF((uLong crc, const Bytef *buf, uInt len));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#650: FILE: include/linux/zlib_fs.h:626:
+/*
+     Update a running crc with the bytes buf[0..len-1] and return the updated

CHECK:LINE_SPACING: Please don't use multiple blank lines
#664: FILE: include/linux/zlib_fs.h:640:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: include/linux/zlib_fs.h:641:
+                        /* various hacks, don't look :) */$

ERROR:POINTER_LOCATION: "fooInit_ bar" should be "foo Init_ bar"
#670: FILE: include/linux/zlib_fs.h:646:
+ZEXTERN int ZEXPORT zlib_fs_deflateInit_ OF((z_streamp strm, int level,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateInit_>
#670: FILE: include/linux/zlib_fs.h:646:
+ZEXTERN int ZEXPORT zlib_fs_deflateInit_ OF((z_streamp strm, int level,

ERROR:CODE_INDENT: code indent should use tabs where possible
#671: FILE: include/linux/zlib_fs.h:647:
+                                     const char *version, int stream_size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: include/linux/zlib_fs.h:647:
+                                     const char *version, int stream_size));$

ERROR:POINTER_LOCATION: "fooInit_ bar" should be "foo Init_ bar"
#672: FILE: include/linux/zlib_fs.h:648:
+ZEXTERN int ZEXPORT zlib_fs_inflateInit_ OF((z_streamp strm,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateInit_>
#672: FILE: include/linux/zlib_fs.h:648:
+ZEXTERN int ZEXPORT zlib_fs_inflateInit_ OF((z_streamp strm,

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: include/linux/zlib_fs.h:649:
+                                     const char *version, int stream_size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: include/linux/zlib_fs.h:649:
+                                     const char *version, int stream_size));$

ERROR:POINTER_LOCATION: "fooInit2_ bar" should be "foo Init2_ bar"
#674: FILE: include/linux/zlib_fs.h:650:
+ZEXTERN int ZEXPORT zlib_fs_deflateInit2_ OF((z_streamp strm, int  level, int  method,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateInit2_>
#674: FILE: include/linux/zlib_fs.h:650:
+ZEXTERN int ZEXPORT zlib_fs_deflateInit2_ OF((z_streamp strm, int  level, int  method,

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: include/linux/zlib_fs.h:651:
+                                      int windowBits, int memLevel,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: include/linux/zlib_fs.h:651:
+                                      int windowBits, int memLevel,$

CHECK:CAMELCASE: Avoid CamelCase: <windowBits>
#675: FILE: include/linux/zlib_fs.h:651:
+                                      int windowBits, int memLevel,

CHECK:CAMELCASE: Avoid CamelCase: <memLevel>
#675: FILE: include/linux/zlib_fs.h:651:
+                                      int windowBits, int memLevel,

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: include/linux/zlib_fs.h:652:
+                                      int strategy, const char *version,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: include/linux/zlib_fs.h:652:
+                                      int strategy, const char *version,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: include/linux/zlib_fs.h:653:
+                                      int stream_size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: include/linux/zlib_fs.h:653:
+                                      int stream_size));$

ERROR:POINTER_LOCATION: "fooInit2_ bar" should be "foo Init2_ bar"
#678: FILE: include/linux/zlib_fs.h:654:
+ZEXTERN int ZEXPORT zlib_fs_inflateInit2_ OF((z_streamp strm, int  windowBits,

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateInit2_>
#678: FILE: include/linux/zlib_fs.h:654:
+ZEXTERN int ZEXPORT zlib_fs_inflateInit2_ OF((z_streamp strm, int  windowBits,

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: include/linux/zlib_fs.h:655:
+                                      const char *version, int stream_size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: include/linux/zlib_fs.h:655:
+                                      const char *version, int stream_size));$

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateInit>
#680: FILE: include/linux/zlib_fs.h:656:
+#define zlib_fs_deflateInit(strm, level) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: include/linux/zlib_fs.h:657:
+        zlib_fs_deflateInit_((strm), (level), ZLIB_VERSION, sizeof(z_stream))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: include/linux/zlib_fs.h:657:
+        zlib_fs_deflateInit_((strm), (level), ZLIB_VERSION, sizeof(z_stream))$

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateInit>
#682: FILE: include/linux/zlib_fs.h:658:
+#define zlib_fs_inflateInit(strm) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: include/linux/zlib_fs.h:659:
+        zlib_fs_inflateInit_((strm), ZLIB_VERSION, sizeof(z_stream))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: include/linux/zlib_fs.h:659:
+        zlib_fs_inflateInit_((strm), ZLIB_VERSION, sizeof(z_stream))$

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_deflateInit2>
#684: FILE: include/linux/zlib_fs.h:660:
+#define zlib_fs_deflateInit2(strm, level, method, windowBits, memLevel, strategy) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: include/linux/zlib_fs.h:661:
+        zlib_fs_deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: include/linux/zlib_fs.h:661:
+        zlib_fs_deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: include/linux/zlib_fs.h:661:
+        zlib_fs_deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: include/linux/zlib_fs.h:661:
+        zlib_fs_deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: include/linux/zlib_fs.h:661:
+        zlib_fs_deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: include/linux/zlib_fs.h:661:
+        zlib_fs_deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: include/linux/zlib_fs.h:662:
+                      (strategy), ZLIB_VERSION, sizeof(z_stream))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: include/linux/zlib_fs.h:662:
+                      (strategy), ZLIB_VERSION, sizeof(z_stream))$

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateInit2>
#687: FILE: include/linux/zlib_fs.h:663:
+#define zlib_fs_inflateInit2(strm, windowBits) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: include/linux/zlib_fs.h:664:
+        zlib_fs_inflateInit2_((strm), (windowBits), ZLIB_VERSION, sizeof(z_stream))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: include/linux/zlib_fs.h:664:
+        zlib_fs_inflateInit2_((strm), (windowBits), ZLIB_VERSION, sizeof(z_stream))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#690: FILE: include/linux/zlib_fs.h:666:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: include/linux/zlib_fs.h:668:
+    struct internal_state {int dummy;}; /* hack for buggy compilers */$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#692: FILE: include/linux/zlib_fs.h:668:
+    struct internal_state {int dummy;}; /* hack for buggy compilers */
                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_zError>
#695: FILE: include/linux/zlib_fs.h:671:
+ZEXTERN const char   * ZEXPORT zlib_fs_zError           OF((int err));

CHECK:CAMELCASE: Avoid CamelCase: <zlib_fs_inflateSyncPoint>
#696: FILE: include/linux/zlib_fs.h:672:
+ZEXTERN int            ZEXPORT zlib_fs_inflateSyncPoint OF((z_streamp z));

CHECK:CAMELCASE: Avoid CamelCase: <uLongf>
#697: FILE: include/linux/zlib_fs.h:673:
+ZEXTERN const uLongf * ZEXPORT zlib_fs_get_crc_table    OF((void));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000504408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 58 warnings, 37 checks, 679 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000504408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
