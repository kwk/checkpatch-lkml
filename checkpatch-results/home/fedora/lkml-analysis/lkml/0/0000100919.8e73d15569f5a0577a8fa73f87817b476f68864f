WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/gfs2/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#52: FILE: fs/gfs2/dir.c:11:
+/*
+* Implements Extendible Hashing as described in:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:IF_1: Consider removing the #if 1 and its #endif
#118: FILE: fs/gfs2/dir.c:77:
+#if 1

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#127: FILE: fs/gfs2/dir.c:86:
+			    uint32_t index, uint32_t len, uint64_t leaf_no,

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/gfs2/dir.c:90:
+^I^I         struct buffer_head **bhp)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/gfs2/dir.c:90:
+int gfs2_dir_get_buffer(struct gfs2_inode *ip, uint64_t block, int new,
+		         struct buffer_head **bhp)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: fs/gfs2/dir.c:114:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: fs/gfs2/dir.c:118:
+                               $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: fs/gfs2/dir.c:118:
+                               $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/gfs2/dir.c:118:
+                               $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#172: FILE: fs/gfs2/dir.c:131:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: fs/gfs2/dir.c:139:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#192: FILE: fs/gfs2/dir.c:151:
+			       uint64_t offset, unsigned int size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#196: FILE: fs/gfs2/dir.c:155:
+	uint64_t lblock, dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#197: FILE: fs/gfs2/dir.c:156:
+	uint32_t extlen = 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#214: FILE: fs/gfs2/dir.c:173:
+		if (error)
+		return error;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#265: FILE: fs/gfs2/dir.c:224:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: fs/gfs2/dir.c:238:
+static int gfs2_dir_read_stuffed(struct gfs2_inode *ip, char *buf,
+				unsigned int offset, unsigned int size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#294: FILE: fs/gfs2/dir.c:253:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#305: FILE: fs/gfs2/dir.c:264:
+			      uint64_t offset, unsigned int size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#308: FILE: fs/gfs2/dir.c:267:
+	uint64_t lblock, dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#309: FILE: fs/gfs2/dir.c:268:
+	uint32_t extlen = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#351: FILE: fs/gfs2/dir.c:310:
+		if (dblock) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#357: FILE: fs/gfs2/dir.c:316:
+		} else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#418: FILE: fs/gfs2/dir.c:377:
+		return IS_LEAF;
+	} else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#441: FILE: fs/gfs2/dir.c:400:
+	uint16_t cur_rec_len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: fs/gfs2/dir.c:426:
+        /* Only the first dent could ever have de_inum.no_addr == 0 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#490: FILE: fs/gfs2/dir.c:449:
+	uint16_t cur_rec_len, prev_rec_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#500: FILE: fs/gfs2/dir.c:459:
+	/* If there is no prev entry, this is the first entry in the block.
+	   The de_rec_len is already as big as it needs to be.  Just zero

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: fs/gfs2/dir.c:460:
+	   out the inode number and return.  */

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#504: FILE: fs/gfs2/dir.c:463:
+		cur->de_inum.no_addr = 0;	/* No endianess worries */
 		                         	      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: fs/gfs2/dir.c:505:
+		struct gfs2_leaf *leaf = (struct gfs2_leaf *)bh->b_data;
+		entries = be16_to_cpu(leaf->lf_entries);

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: fs/gfs2/dir.c:509:
+		struct gfs2_dinode *dinode = (struct gfs2_dinode *)bh->b_data;
+		entries = be32_to_cpu(dinode->di_entries);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#570: FILE: fs/gfs2/dir.c:529:
+		uint16_t cur_rec_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#571: FILE: fs/gfs2/dir.c:530:
+		uint16_t cur_name_len;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#585: FILE: fs/gfs2/dir.c:544:
+				new->de_rec_len = cpu_to_be16(cur_rec_len - GFS2_DIRENT_SIZE(cur_name_len));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#588: FILE: fs/gfs2/dir.c:547:
+				dent->de_rec_len = cpu_to_be16(cur_rec_len - be16_to_cpu(new->de_rec_len));

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: fs/gfs2/dir.c:586:
+		struct gfs2_leaf *leaf = (struct gfs2_leaf *)bh->b_data;
+		entries = be16_to_cpu(leaf->lf_entries);

WARNING:LINE_SPACING: Missing a blank line after declarations
#630: FILE: fs/gfs2/dir.c:589:
+		struct gfs2_dinode *dinode = (struct gfs2_dinode *)bh->b_data;
+		entries = be32_to_cpu(dinode->di_entries);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#637: FILE: fs/gfs2/dir.c:596:
+		uint16_t cur_rec_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#638: FILE: fs/gfs2/dir.c:597:
+		uint32_t cur_name_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#655: FILE: fs/gfs2/dir.c:614:
+	uint32_t hash;

WARNING:LINE_SPACING: Missing a blank line after declarations
#666: FILE: fs/gfs2/dir.c:625:
+		struct gfs2_leaf *leaf = (struct gfs2_leaf *)bh->b_data;
+		entries = be16_to_cpu(leaf->lf_entries);

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: fs/gfs2/dir.c:628:
+		struct gfs2_dinode *dinode = (struct gfs2_dinode *)bh->b_data;
+		entries = be32_to_cpu(dinode->di_entries);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#720: FILE: fs/gfs2/dir.c:679:
+	uint64_t leaf_no;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: fs/gfs2/dir.c:683:
+	error = gfs2_dir_read_data(dip, (char *)&leaf_no,
+				    index * sizeof(uint64_t),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#737: FILE: fs/gfs2/dir.c:696:
+	uint64_t leaf_no;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#769: FILE: fs/gfs2/dir.c:728:
+	uint32_t hsize, index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#770: FILE: fs/gfs2/dir.c:729:
+	uint32_t hash;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#811: FILE: fs/gfs2/dir.c:770:
+	}
+	while (!error);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#832: FILE: fs/gfs2/dir.c:791:
+	uint32_t x;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#833: FILE: fs/gfs2/dir.c:792:
+	uint64_t *lp, bn;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: fs/gfs2/dir.c:822:
+	gfs2_buffer_copy_tail(bh, sizeof(struct gfs2_leaf), dibh,
+			     sizeof(struct gfs2_dinode));

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#876: FILE: fs/gfs2/dir.c:835:
+	}
+	while (dirent_next(dip, bh, &dent) == 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#879: FILE: fs/gfs2/dir.c:838:
+	/*  Adjust the last dirent's record length
+	   (Remember that dent still points to the last entry.)  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#879: FILE: fs/gfs2/dir.c:838:
+	   (Remember that dent still points to the last entry.)  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#888: FILE: fs/gfs2/dir.c:847:
+	/*  We're done with the new leaf block, now setup the new
+	    hash table.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#888: FILE: fs/gfs2/dir.c:847:
+	    hash table.  */

WARNING:SPACING: space prohibited before semicolon
#903: FILE: fs/gfs2/dir.c:862:
+	for (x = sdp->sd_hash_ptrs, y = -1; x; x >>= 1, y++) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#903: FILE: fs/gfs2/dir.c:862:
+	for (x = sdp->sd_hash_ptrs, y = -1; x; x >>= 1, y++) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#928: FILE: fs/gfs2/dir.c:887:
+	uint32_t start, len, half_len, divider;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#929: FILE: fs/gfs2/dir.c:888:
+	uint64_t bn, *lp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#930: FILE: fs/gfs2/dir.c:889:
+	uint32_t name_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#972: FILE: fs/gfs2/dir.c:931:
+	/* Change the pointers.
+	   Don't bother distinguishing stuffed from non-stuffed.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#973: FILE: fs/gfs2/dir.c:932:
+	   This code is complicated enough already. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#978: FILE: fs/gfs2/dir.c:937:
+	error = gfs2_dir_read_data(dip, (char *)lp, start * sizeof(uint64_t),
+				    half_len * sizeof(uint64_t));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: fs/gfs2/dir.c:950:
+	error = gfs2_dir_write_data(dip, (char *)lp, start * sizeof(uint64_t),
+				     half_len * sizeof(uint64_t));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1013: FILE: fs/gfs2/dir.c:972:
+		if (dent->de_inum.no_addr &&
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1025: FILE: fs/gfs2/dir.c:984:
+			nleaf->lf_entries = be16_to_cpu(nleaf->lf_entries)+1;
 			                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1032: FILE: fs/gfs2/dir.c:991:
+			oleaf->lf_entries = be16_to_cpu(oleaf->lf_entries)-1;
 			                                                  ^

CHECK:BRACES: Unbalanced braces around else statement
#1039: FILE: fs/gfs2/dir.c:998:
+		} else

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1044: FILE: fs/gfs2/dir.c:1003:
+	}
+	while (dent);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1047: FILE: fs/gfs2/dir.c:1006:
+	/* If none of the entries got moved into the new leaf,
+	   artificially fill in the first entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1047: FILE: fs/gfs2/dir.c:1006:
+	   artificially fill in the first entry. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1092: FILE: fs/gfs2/dir.c:1051:
+	uint32_t hsize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1093: FILE: fs/gfs2/dir.c:1052:
+	uint64_t *buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1094: FILE: fs/gfs2/dir.c:1053:
+	uint64_t *from, *to;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1095: FILE: fs/gfs2/dir.c:1054:
+	uint64_t block;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: fs/gfs2/dir.c:1070:
+		error = gfs2_dir_read_data(dip, (char *)buf,
+					    block * sdp->sd_hash_bsize,

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#1123: FILE: fs/gfs2/dir.c:1082:
+			*to++ = *from;	/*  No endianess worries  */
 			              	       ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1128: FILE: fs/gfs2/dir.c:1087:
+		error = gfs2_dir_write_data(dip,
+					     (char *)buf + sdp->sd_hash_bsize,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1169: FILE: fs/gfs2/dir.c:1128:
+	uint32_t hash_a, hash_b;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1180: FILE: fs/gfs2/dir.c:1139:
+	if (hash_a > hash_b)
[...]
+	else if (hash_a < hash_b)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1184: FILE: fs/gfs2/dir.c:1143:
+	else {

WARNING:TYPO_SPELLING: 'collsions' may be misspelled - perhaps 'collisions'?
#1211: FILE: fs/gfs2/dir.c:1170:
+ * Jump through some hoops to make sure that if there are hash collsions,
                                                                ^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1226: FILE: fs/gfs2/dir.c:1185:
+	uint64_t off, off_next;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1250: FILE: fs/gfs2/dir.c:1209:
+			if (off_next == off) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1254: FILE: fs/gfs2/dir.c:1213:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1275: FILE: fs/gfs2/dir.c:1234:
+	/* Increment the *offset by one, so the next time we come into the
+	   do_filldir fxn, we get the next entry instead of the last one in the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1276: FILE: fs/gfs2/dir.c:1235:
+	   current leaf */

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1324: FILE: fs/gfs2/dir.c:1283:
+	}
+	while (dirent_next(dip, bh, &de) == 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1365: FILE: fs/gfs2/dir.c:1324:
+	uint64_t ln;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1395: FILE: fs/gfs2/dir.c:1354:
+		larr = kcalloc(leaves, sizeof(struct buffer_head *),GFP_KERNEL);
 		                                                   ^

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1419: FILE: fs/gfs2/dir.c:1378:
+		}
+		while (dirent_next(dip, bh, &de) == 0);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1443: FILE: fs/gfs2/dir.c:1402:
+			}
+			while (dirent_next(dip, tmp_bh, &de) == 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1513: FILE: fs/gfs2/dir.c:1472:
+	uint32_t hsize, index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1514: FILE: fs/gfs2/dir.c:1473:
+	uint32_t hash;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1515: FILE: fs/gfs2/dir.c:1474:
+	uint64_t leaf_no, bn;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1544: FILE: fs/gfs2/dir.c:1503:
+		if (gfs2_dirent_alloc(dip, bh, filename->len, &dent)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1581: FILE: fs/gfs2/dir.c:1540:
+				gfs2_metatype_set(nbh,
+						 GFS2_METATYPE_LF,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1584: FILE: fs/gfs2/dir.c:1543:
+				gfs2_buffer_clear_tail(nbh,
+					sizeof(struct gfs2_meta_header));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1622: FILE: fs/gfs2/dir.c:1581:
+		dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1668: FILE: fs/gfs2/dir.c:1627:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1693: FILE: fs/gfs2/dir.c:1652:
+	uint32_t hsize, len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1694: FILE: fs/gfs2/dir.c:1653:
+	uint32_t ht_offset, lp_offset, ht_offset_cur = -1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1695: FILE: fs/gfs2/dir.c:1654:
+	uint32_t hash, index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1696: FILE: fs/gfs2/dir.c:1655:
+	uint64_t *lp;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1719: FILE: fs/gfs2/dir.c:1678:
+			error = gfs2_dir_read_data(dip, (char *)lp,
+						ht_offset * sizeof(uint64_t),

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1786: FILE: fs/gfs2/dir.c:1745:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1869: FILE: fs/gfs2/dir.c:1828:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1909: FILE: fs/gfs2/dir.c:1868:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1980: FILE: fs/gfs2/dir.c:1939:
+	dip->i_di.di_mtime = dip->i_di.di_ctime = get_seconds();

WARNING:REPEATED_WORD: Possible repeated word: 'each'
#2100: FILE: fs/gfs2/dir.c:2059:
+ * @lc: the function to call for each each

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2111: FILE: fs/gfs2/dir.c:2070:
+	uint32_t hsize, len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2112: FILE: fs/gfs2/dir.c:2071:
+	uint32_t ht_offset, lp_offset, ht_offset_cur = -1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2113: FILE: fs/gfs2/dir.c:2072:
+	uint32_t index = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2114: FILE: fs/gfs2/dir.c:2073:
+	uint64_t *lp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2115: FILE: fs/gfs2/dir.c:2074:
+	uint64_t leaf_no;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2134: FILE: fs/gfs2/dir.c:2093:
+			error = gfs2_dir_read_data(dip, (char *)lp,
+						ht_offset * sizeof(uint64_t),

CHECK:BRACES: braces {} should be used on all arms of this statement
#2145: FILE: fs/gfs2/dir.c:2104:
+		if (leaf_no) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2159: FILE: fs/gfs2/dir.c:2118:
+		} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2186: FILE: fs/gfs2/dir.c:2145:
+			uint64_t leaf_no, void *data)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2192: FILE: fs/gfs2/dir.c:2151:
+	uint64_t blk;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2231: FILE: fs/gfs2/dir.c:2190:
+		struct gfs2_rgrpd *rgd;
+		rgd = get_gl2rgd(rlist.rl_ghs[x].gh_gl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2240: FILE: fs/gfs2/dir.c:2199:
+	error = gfs2_trans_begin(sdp,
+			rg_blocks + (DIV_RU(size, sdp->sd_jbsize) + 1) +

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2316: FILE: fs/gfs2/dir.c:2275:
+	/* Make this a regular file in case we crash.
+	   (We don't want to free these blocks a second time.)  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2316: FILE: fs/gfs2/dir.c:2275:
+	   (We don't want to free these blocks a second time.)  */

WARNING:TYPO_SPELLING: 'filname' may be misspelled - perhaps 'filename'?
#2337: FILE: fs/gfs2/dir.c:2296:
+ * @filname: the filename that's going to be added
     ^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2347: FILE: fs/gfs2/dir.c:2306:
+	uint32_t hsize, hash, index;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#2381: FILE: fs/gfs2/dir.c:2340:
+		}
+		while (!error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2401: FILE: fs/gfs2/dir.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2427: FILE: fs/gfs2/dir.h:27:
+			      uint64_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2432: FILE: fs/gfs2/dir.h:32:
+int gfs2_dirent_alloc(struct gfs2_inode *dip, struct buffer_head *bh,
+		     int name_len, struct gfs2_dirent **dent_out);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2435: FILE: fs/gfs2/dir.h:35:
+int gfs2_dir_search(struct gfs2_inode *dip, struct qstr *filename,
+		   struct gfs2_inum *inum, unsigned int *type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2437: FILE: fs/gfs2/dir.h:37:
+int gfs2_dir_add(struct gfs2_inode *dip, struct qstr *filename,
+		struct gfs2_inum *inum, unsigned int type);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2439: FILE: fs/gfs2/dir.h:39:
+int gfs2_dir_read(struct gfs2_inode *dip, uint64_t * offset, void *opaque,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2440: FILE: fs/gfs2/dir.h:40:
+int gfs2_dir_read(struct gfs2_inode *dip, uint64_t * offset, void *opaque,
+		 gfs2_filldir_t filldir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2442: FILE: fs/gfs2/dir.h:42:
+int gfs2_dir_mvino(struct gfs2_inode *dip, struct qstr *filename,
+		  struct gfs2_inum *new_inum, unsigned int new_type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2447: FILE: fs/gfs2/dir.h:47:
+int gfs2_diradd_alloc_required(struct gfs2_inode *dip, struct qstr *filename,
+			      int *alloc_required);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2449: FILE: fs/gfs2/dir.h:49:
+                         struct buffer_head **bhp);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2449: FILE: fs/gfs2/dir.h:49:
+int gfs2_dir_get_buffer(struct gfs2_inode *ip, uint64_t block, int new,
+                         struct buffer_head **bhp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2449: FILE: fs/gfs2/dir.h:49:
+                         struct buffer_head **bhp);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 37 warnings, 90 checks, 2407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
