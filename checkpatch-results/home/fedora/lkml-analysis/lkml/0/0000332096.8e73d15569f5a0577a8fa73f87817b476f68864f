WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
  when sysfs_create_symlink() is called but just allocates one kobject to act

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: fs/sysfs/symlink.c:18:
+int sysfs_symlink(struct inode * dir, struct dentry *dentry, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#48: FILE: fs/sysfs/symlink.c:18:
+int sysfs_symlink(struct inode * dir, struct dentry *dentry, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#49: FILE: fs/sysfs/symlink.c:19:
+int sysfs_symlink(struct inode * dir, struct dentry *dentry, 
+		   const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#49: FILE: fs/sysfs/symlink.c:19:
+		   const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: fs/sysfs/symlink.c:80:
+	struct kobject * link;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: fs/sysfs/symlink.c:99:
+^Ilink = kmalloc(sizeof(struct kobject), GFP_KERNEL); $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*link)...) over kmalloc(sizeof(struct kobject)...)
#81: FILE: fs/sysfs/symlink.c:99:
+	link = kmalloc(sizeof(struct kobject), GFP_KERNEL); 

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/sysfs/symlink.c:124:
+	struct list_head * tmp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: fs/sysfs/symlink.c:129:
+		struct kobject * k = list_entry(tmp, struct kobject, k_sibling);

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: fs/sysfs/symlink.c:130:
+		struct kobject * k = list_entry(tmp, struct kobject, k_sibling);
+		tmp = tmp->next;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'k->k_symlink'
#108: FILE: fs/sysfs/symlink.c:131:
+		if (!strcmp(kobject_name(k), name) && (k->k_symlink)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332096.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 2 warnings, 3 checks, 70 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332096.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
