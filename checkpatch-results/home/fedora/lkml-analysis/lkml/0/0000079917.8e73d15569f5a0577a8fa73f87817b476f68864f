WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: drivers/rtc/rtc-ds1337.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: drivers/rtc/rtc-ds1337.c:81:
+		dev_dbg(&client->dev, "%s: tm is secs=%d, mins=%d, hours=%d, "
+				      "mday=%d, mon=%d, year=%d, wday=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#151: FILE: drivers/rtc/rtc-ds1337.c:82:
+				      __FUNCTION__, tm->tm_sec, tm->tm_min,

WARNING:SPLIT_STRING: quoted string split across lines
#171: FILE: drivers/rtc/rtc-ds1337.c:102:
+	dev_dbg(&client->dev, "%s: secs=%d, mins=%d, hours=%d, "
+		"mday=%d, mon=%d, year=%d, wday=%d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#171: FILE: drivers/rtc/rtc-ds1337.c:102:
+		"mday=%d, mon=%d, year=%d, wday=%d\n", __FUNCTION__,

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: drivers/rtc/rtc-ds1337.c:150:
+	int err = ds1337_read(client, DS1337_REG_CONTROL, &control);
+	if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_control' to 'control_show'
#223: FILE: drivers/rtc/rtc-ds1337.c:154:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#225: FILE: drivers/rtc/rtc-ds1337.c:156:
+static DEVICE_ATTR(control, S_IRUGO, show_control, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#227: FILE: drivers/rtc/rtc-ds1337.c:158:
+static struct rtc_class_ops ds1337_rtc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#245: FILE: drivers/rtc/rtc-ds1337.c:176:
+	if ((err = i2c_detach_client(client)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#268: FILE: drivers/rtc/rtc-ds1337.c:199:
+	dev_dbg(&adapter->dev, "%s\n", __FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#275: FILE: drivers/rtc/rtc-ds1337.c:206:
+	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*client)...) over kzalloc(sizeof(struct i2c_client)...)
#275: FILE: drivers/rtc/rtc-ds1337.c:206:
+	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == 0'
#296: FILE: drivers/rtc/rtc-ds1337.c:227:
+		if ((ds1337_read(client, DS1337_REG_DAY, &val) < 0) ||
+		    (val == 0) || (val & 0xf8))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == 0'
#301: FILE: drivers/rtc/rtc-ds1337.c:232:
+		if ((ds1337_read(client, DS1337_REG_DATE, &val) < 0) ||
+		    (val == 0) || (val & 0xc0) || ((val & 0x0f) > 9) ||
+		    (val >= 0x32))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val >= 0x32'
#301: FILE: drivers/rtc/rtc-ds1337.c:232:
+		if ((ds1337_read(client, DS1337_REG_DATE, &val) < 0) ||
+		    (val == 0) || (val & 0xc0) || ((val & 0x0f) > 9) ||
+		    (val >= 0x32))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == 0'
#307: FILE: drivers/rtc/rtc-ds1337.c:238:
+		if ((ds1337_read(client, DS1337_REG_MONTH, &val) < 0) ||
+		    (val == 0) || (val & 0x60) || ((val & 0x0f) > 9) ||
+		    ((val >= 0x13) && (val <= 0x19)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val >= 0x13'
#307: FILE: drivers/rtc/rtc-ds1337.c:238:
+		if ((ds1337_read(client, DS1337_REG_MONTH, &val) < 0) ||
+		    (val == 0) || (val & 0x60) || ((val & 0x0f) > 9) ||
+		    ((val >= 0x13) && (val <= 0x19)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val <= 0x19'
#307: FILE: drivers/rtc/rtc-ds1337.c:238:
+		if ((ds1337_read(client, DS1337_REG_MONTH, &val) < 0) ||
+		    (val == 0) || (val & 0x60) || ((val & 0x0f) > 9) ||
+		    ((val >= 0x13) && (val <= 0x19)))

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#320: FILE: drivers/rtc/rtc-ds1337.c:251:
+	strlcpy(client->name, ds1337_driver.driver.name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#323: FILE: drivers/rtc/rtc-ds1337.c:254:
+	if ((err = i2c_attach_client(client)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: drivers/rtc/rtc-ds1337.c:258:
+	rtc = rtc_device_register(ds1337_driver.driver.name, &client->dev,
+				 &ds1337_rtc_ops, THIS_MODULE);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 8 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
