WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: arch/ia64/Kconfig:402:
+config IOMAP_CHECK
+	bool "Support iochk interfaces for IO error detection."
+	depends on PCI && EXPERIMENTAL
+	---help---
+	  Saying Y provides iochk infrastructure for "RAS-aware" drivers
+	  to detect and recover some IO errors, which strongly required by
+	  some of very-high-reliable systems.
+	  The implementation of this infrastructure is highly depend on arch,
+	  bus system, chipset and so on.
+	  Currently, very few drivers or architectures implement this support.
+
+	  If you don't know what to do here, say N.
+
  source "drivers/pci/Kconfig"

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: arch/ia64/lib/iomap_check.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#98: FILE: arch/ia64/lib/iomap_check.c:11:
+void iochk_clear(iocookie *cookie, struct pci_dev *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#99: FILE: arch/ia64/lib/iomap_check.c:12:
+int  iochk_read(iocookie *cookie);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#107: FILE: arch/ia64/lib/iomap_check.c:20:
+void notify_bridge_error(struct pci_dev *bridge);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: arch/ia64/lib/iomap_check.c:21:
+void clear_bridge_error(struct pci_dev *bridge);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: arch/ia64/lib/iomap_check.c:22:
+void save_bridge_error(void);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cookie->list
#121: FILE: arch/ia64/lib/iomap_check.c:34:
+	INIT_LIST_HEAD(&(cookie->list));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space prohibited after that open parenthesis '('
#144: FILE: arch/ia64/lib/iomap_check.c:57:
+	if ( cookie->error || have_error(cookie->dev)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#145: FILE: arch/ia64/lib/iomap_check.c:58:
+	if ( cookie->error || have_error(cookie->dev)
+		|| (cookie->host && have_error(cookie->host)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#145: FILE: arch/ia64/lib/iomap_check.c:58:
+		|| (cookie->host && have_error(cookie->host)) )

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#162: FILE: arch/ia64/lib/iomap_check.c:75:
+	for (pbus = dev->bus; pbus->parent && pbus->parent->self;
+		pbus = pbus->parent);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: arch/ia64/lib/iomap_check.c:96:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited after that open parenthesis '('
#186: FILE: arch/ia64/lib/iomap_check.c:99:
+	if ( (status & PCI_STATUS_REC_TARGET_ABORT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#187: FILE: arch/ia64/lib/iomap_check.c:100:
+	if ( (status & PCI_STATUS_REC_TARGET_ABORT)
+		|| (status & PCI_STATUS_REC_MASTER_ABORT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#188: FILE: arch/ia64/lib/iomap_check.c:101:
+		|| (status & PCI_STATUS_REC_MASTER_ABORT)
+		|| (status & PCI_STATUS_DETECTED_PARITY) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#188: FILE: arch/ia64/lib/iomap_check.c:101:
+		|| (status & PCI_STATUS_DETECTED_PARITY) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#218: FILE: arch/ia64/lib/iomap_check.c:131:
+	u16 status = ( PCI_STATUS_REC_TARGET_ABORT

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: arch/ia64/lib/iomap_check.c:132:
+                     | PCI_STATUS_REC_MASTER_ABORT$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: arch/ia64/lib/iomap_check.c:132:
+                     | PCI_STATUS_REC_MASTER_ABORT$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: arch/ia64/lib/iomap_check.c:133:
+                     | PCI_STATUS_DETECTED_PARITY );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: arch/ia64/lib/iomap_check.c:133:
+                     | PCI_STATUS_DETECTED_PARITY );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#220: FILE: arch/ia64/lib/iomap_check.c:133:
+                     | PCI_STATUS_DETECTED_PARITY );

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#223: FILE: arch/ia64/lib/iomap_check.c:136:
+	switch (bridge->hdr_type) {
+		case PCI_HEADER_TYPE_NORMAL: /* 0 */
[...]
+		case PCI_HEADER_TYPE_BRIDGE: /* 1 */
[...]
+		case PCI_HEADER_TYPE_CARDBUS: /* 2 */
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: arch/ia64/lib/iomap_check.c:145:
+			BUG();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#252: FILE: arch/ia64/lib/iomap_check.c:165:
+EXPORT_SYMBOL(iochk_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#253: FILE: arch/ia64/lib/iomap_check.c:166:
+EXPORT_SYMBOL(iochk_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#254: FILE: arch/ia64/lib/iomap_check.c:167:
+EXPORT_SYMBOL(iochk_clear);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#255: FILE: arch/ia64/lib/iomap_check.c:168:
+EXPORT_SYMBOL(iochk_devices);	/* for MCA driver */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#270: FILE: include/asm-ia64/io.h:79:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/asm-ia64/io.h:189:
+extern void ia64_mca_barrier(unsigned long value);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: include/asm-ia64/io.h:198:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: include/asm-ia64/io.h:202:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: include/asm-ia64/io.h:214:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/asm-ia64/io.h:218:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: include/asm-ia64/io.h:230:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: include/asm-ia64/io.h:234:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: include/asm-ia64/io.h:242:
+___ia64_inb (unsigned long port)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#346: FILE: include/asm-ia64/io.h:244:
+	volatile unsigned char *addr = __ia64_mk_io_addr(port);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#355: FILE: include/asm-ia64/io.h:253:
+___ia64_inw (unsigned long port)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#357: FILE: include/asm-ia64/io.h:255:
+	volatile unsigned short *addr = __ia64_mk_io_addr(port);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#366: FILE: include/asm-ia64/io.h:264:
+___ia64_inl (unsigned long port)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#368: FILE: include/asm-ia64/io.h:266:
+	volatile unsigned int *addr = __ia64_mk_io_addr(port);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: include/asm-ia64/io.h:396:
+___ia64_readb (const volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#389: FILE: include/asm-ia64/io.h:396:
+___ia64_readb (const volatile void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: include/asm-ia64/io.h:401:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#395: FILE: include/asm-ia64/io.h:402:
+	val = *(volatile unsigned char __force *)addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: include/asm-ia64/io.h:404:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#403: FILE: include/asm-ia64/io.h:410:
+___ia64_readw (const volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#403: FILE: include/asm-ia64/io.h:410:
+___ia64_readw (const volatile void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: include/asm-ia64/io.h:415:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#409: FILE: include/asm-ia64/io.h:416:
+	val = *(volatile unsigned short __force *)addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#411: FILE: include/asm-ia64/io.h:418:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#417: FILE: include/asm-ia64/io.h:424:
+___ia64_readl (const volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#417: FILE: include/asm-ia64/io.h:424:
+___ia64_readl (const volatile void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: include/asm-ia64/io.h:429:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

CHECK:SPACING: No space is necessary after a cast
#423: FILE: include/asm-ia64/io.h:430:
+	val = *(volatile unsigned int __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#423: FILE: include/asm-ia64/io.h:430:
+	val = *(volatile unsigned int __force *) addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#425: FILE: include/asm-ia64/io.h:432:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#431: FILE: include/asm-ia64/io.h:438:
+___ia64_readq (const volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#431: FILE: include/asm-ia64/io.h:438:
+___ia64_readq (const volatile void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: include/asm-ia64/io.h:443:
+	read_lock_irqsave(&iochk_lock,flags);
 	                             ^

CHECK:SPACING: No space is necessary after a cast
#437: FILE: include/asm-ia64/io.h:444:
+	val = *(volatile unsigned long __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#437: FILE: include/asm-ia64/io.h:444:
+	val = *(volatile unsigned long __force *) addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: include/asm-ia64/io.h:446:
+	read_unlock_irqrestore(&iochk_lock,flags);
 	                                  ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#469: FILE: arch/ia64/kernel/mca.c:83:
+extern void save_bridge_error(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#470: FILE: arch/ia64/kernel/mca.c:84:
+extern rwlock_t iochk_lock;

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#579: FILE: arch/ia64/kernel/mca_drv.c:40:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#627: FILE: arch/ia64/kernel/mca_drv.c:423:
+		for (i = 0; i < PCI_ROM_RESOURCE; i++) {
+		  if (tdev->resource[i].start <= addr

WARNING:TABSTOP: Statements should start on a tabstop
#628: FILE: arch/ia64/kernel/mca_drv.c:424:
+		  if (tdev->resource[i].start <= addr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#629: FILE: arch/ia64/kernel/mca_drv.c:425:
+		  if (tdev->resource[i].start <= addr
+		      && addr <= tdev->resource[i].end)

WARNING:TABSTOP: Statements should start on a tabstop
#631: FILE: arch/ia64/kernel/mca_drv.c:427:
+		  if ((tdev->resource[i].flags

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#632: FILE: arch/ia64/kernel/mca_drv.c:428:
+		      & (PCI_BASE_ADDRESS_SPACE|PCI_BASE_ADDRESS_MEM_TYPE_MASK))
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#633: FILE: arch/ia64/kernel/mca_drv.c:429:
+		      == (PCI_BASE_ADDRESS_SPACE_MEMORY|PCI_BASE_ADDRESS_MEM_TYPE_64))
 		                                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155577.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 39 warnings, 11 checks, 587 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155577.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
