WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#38: FILE: fs/fuse/file.c:359:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#42: FILE: fs/fuse/file.c:363:
+		struct page *page = req->pages[i];
+		if (write)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#49: FILE: fs/fuse/file.c:370:
+			       unsigned nbytes, int write)

CHECK:SPACING: No space is necessary after a cast
#51: FILE: fs/fuse/file.c:372:
+	unsigned long user_addr = (unsigned long) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#52: FILE: fs/fuse/file.c:373:
+	unsigned offset = user_addr & ~PAGE_MASK;

CHECK:SPACING: No space is necessary after a cast
#55: FILE: fs/fuse/file.c:376:
+	nbytes = min(nbytes, (unsigned) FUSE_MAX_PAGES_PER_REQ << PAGE_SHIFT);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#55: FILE: fs/fuse/file.c:376:
+	nbytes = min(nbytes, (unsigned) FUSE_MAX_PAGES_PER_REQ << PAGE_SHIFT);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#75: FILE: fs/fuse/file.c:396:
+	unsigned nmax = write ? fc->max_write : fc->max_read;

WARNING:LINE_SPACING: Missing a blank line after declarations
#79: FILE: fs/fuse/file.c:400:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#83: FILE: fs/fuse/file.c:404:
+		unsigned tmp;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#84: FILE: fs/fuse/file.c:405:
+		unsigned nres;

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: fs/fuse/file.c:408:
+		int err = fuse_get_user_pages(req, buf, nbytes, !write);
+		if (err) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#116: FILE: fs/fuse/file.c:437:
+	if (res > 0) {
[...]
+	} else if (write && (res == -EINTR || res == -EIO))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#152: FILE: fs/fuse/file.c:473:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#186: FILE: fs/fuse/fuse_i.h:38:
+#define FUSE_DIRECT_IO           (1 << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: fs/fuse/fuse_i.h:209:
+	unsigned max_write;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 11 warnings, 4 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
