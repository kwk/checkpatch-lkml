WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
As an aside, I believe the hunk to arch/i386/kernel/signal.c can be dropped in

WARNING:TYPO_SPELLING: 'unlikey' may be misspelled - perhaps 'unlikely'?
#31: 
a post 2.6.10-rc1 tree as something similar using unlikey() has been put in.
                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: arch/i386/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#105: FILE: arch/i386/kernel/kgdb.c:23:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
     ^^^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#121: FILE: arch/i386/kernel/kgdb.c:39:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#126: FILE: arch/i386/kernel/kgdb.c:44:
+/* Likewise, the vector number here (since GDB only gets the signal
+   number through the usual means, and that's not very specific).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: arch/i386/kernel/kgdb.c:44:
+   number through the usual means, and that's not very specific).  */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#129: FILE: arch/i386/kernel/kgdb.c:47:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#192: FILE: arch/i386/kernel/kgdb.c:110:
+#if 0				/* can't change these */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#199: FILE: arch/i386/kernel/kgdb.c:117:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: arch/i386/kernel/kgdb.c:120:
+	unsigned enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#203: FILE: arch/i386/kernel/kgdb.c:121:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#204: FILE: arch/i386/kernel/kgdb.c:122:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: arch/i386/kernel/kgdb.c:123:
+	unsigned addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#218: FILE: arch/i386/kernel/kgdb.c:136:
+	unsigned dr7;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#220: FILE: arch/i386/kernel/kgdb.c:138:
+	asm volatile ("movl %%db7, %0\n":"=r" (dr7)
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: arch/i386/kernel/kgdb.c:141:
+		unsigned addr0, addr1, addr2, addr3;

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: arch/i386/kernel/kgdb.c:142:
+		unsigned addr0, addr1, addr2, addr3;
+		asm volatile ("movl %%db0, %0\n"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#227: FILE: arch/i386/kernel/kgdb.c:145:
+			      "movl %%db3, %3\n":"=r" (addr0), "=r"(addr1),
 			                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxB)
#228: FILE: arch/i386/kernel/kgdb.c:146:
+			      "=r"(addr2), "=r"(addr3):);
 			                              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#267: FILE: arch/i386/kernel/kgdb.c:185:
+	if (correctit) {
+		asm volatile ("movl %0, %%db7\n"::"r" (dr7));
+	}

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#275: FILE: arch/i386/kernel/kgdb.c:193:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#275: FILE: arch/i386/kernel/kgdb.c:193:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <eVector>
#278: FILE: arch/i386/kernel/kgdb.c:196:
+void kgdb_post_master_code(struct pt_regs *regs, int eVector, int err_code)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <exceptionVector>
#285: FILE: arch/i386/kernel/kgdb.c:203:
+int kgdb_arch_handle_exception(int exceptionVector, int signo,

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#293: FILE: arch/i386/kernel/kgdb.c:211:
+	int newPC;

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#304: FILE: arch/i386/kernel/kgdb.c:222:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#306: FILE: arch/i386/kernel/kgdb.c:224:
+		if (kgdb_hex2long(&ptr, &addr)) {
+			linux_regs->eip = addr;
+		}

ERROR:SPACING: space required after that ',' (ctx:VxO)
#313: FILE: arch/i386/kernel/kgdb.c:231:
+		atomic_set(&cpu_doing_single_step,-1);
 		                                 ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#313: FILE: arch/i386/kernel/kgdb.c:231:
+		atomic_set(&cpu_doing_single_step,-1);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: arch/i386/kernel/kgdb.c:238:
+				atomic_set(&cpu_doing_single_step,smp_processor_id());
 				                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#323: FILE: arch/i386/kernel/kgdb.c:241:
+		asm volatile ("movl %%db6, %0\n":"=r" (dr6));
 		                                ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#338: FILE: arch/i386/kernel/kgdb.c:256:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#344: FILE: arch/i386/kernel/kgdb.c:262:
+ * spots. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: arch/i386/kernel/kgdb.c:264:
+static int kgdb_notify(struct notifier_block *self, unsigned long cmd,
+		void *ptr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: arch/i386/kernel/kgdb.c:270:
+	if (cmd == DIE_PAGE_FAULT)
[...]
+	else if (user_mode(regs)) {
[...]
+	} else if (cmd == DIE_NMI_IPI) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: arch/i386/kernel/kgdb.c:275:
+			CHK_DEBUGGER(args->trapnr, args->signr, args->err,
+					args->regs,);

ERROR:SPACING: space required after that ',' (ctx:VxB)
#357: FILE: arch/i386/kernel/kgdb.c:275:
+					args->regs,);
 					          ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#366: FILE: arch/i386/kernel/kgdb.c:284:
+	CHK_DEBUGGER(args->trapnr, args->signr, args->err, args->regs,);
 	                                                             ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#375: FILE: arch/i386/kernel/kgdb.c:293:
+int kgdb_arch_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#380: FILE: arch/i386/kernel/kgdb.c:298:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#418: FILE: arch/i386/kernel/setup.c:120:
+extern void early_trap_init(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#492: FILE: arch/i386/kernel/traps.c:739:
+	 * to continue sanely */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#514: FILE: arch/i386/kernel/traps.c:1013:
+void __init early_trap_init(void) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#515: FILE: arch/i386/kernel/traps.c:1014:
+	set_intr_gate(1,&debug);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#515: FILE: arch/i386/kernel/traps.c:1014:
+	set_intr_gate(1,&debug);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#517: FILE: arch/i386/kernel/traps.c:1016:
+	set_intr_gate(14,&page_fault);
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#517: FILE: arch/i386/kernel/traps.c:1016:
+	set_intr_gate(14,&page_fault);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#530: FILE: arch/i386/kernel/traps.c:1033:
+	set_system_gate(4,&overflow); /* int4/5 can be called from all */
 	                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#530: FILE: arch/i386/kernel/traps.c:1033:
+	set_system_gate(4,&overflow); /* int4/5 can be called from all */
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: arch/i386/mm/fault.c:436:
+	if (notify_die(DIE_PAGE_FAULT, "page fault", regs, error_code, 14,
+				SIGSEGV) == NOTIFY_BAD)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#580: FILE: include/asm-i386/kgdb.h:1:
+#ifndef _ASM_KGDB_H_

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#622: FILE: include/asm-i386/kgdb.h:43:
+#define BREAKPOINT() asm("   int $3");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#625: FILE: include/asm-i386/kgdb.h:46:
+#define CHECK_EXCEPTION_STACK() ^I1$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#636: FILE: include/asm-i386/system.h:16:
+ * any of the following */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 26 warnings, 12 checks, 563 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
