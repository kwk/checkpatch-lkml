WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/block/ioctl.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: drivers/block/ioctl.c:265:
+static int w_long(struct inode *inode, struct file *file,
+			unsigned int cmd, unsigned long arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#67: FILE: drivers/block/ioctl.c:271:
+	set_fs (KERNEL_DS);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#69: FILE: drivers/block/ioctl.c:273:
+	set_fs (old_fs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: drivers/block/ioctl.c:280:
+static int broken_blkgetsize(struct inode *inode, struct file *file,
+				unsigned int cmd, unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: drivers/block/ioctl.c:294:
+static int compat_hdio_getgeo(struct inode *inode, struct file *file,
+		unsigned int cmd, struct gendisk *disk, unsigned long arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#97: FILE: drivers/block/ioctl.c:301:
+	set_fs (KERNEL_DS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: drivers/block/ioctl.c:303:
+	err = blkdev_driver_ioctl(inode, file, disk,
+			HDIO_GETGEO, (unsigned long)&geo);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: drivers/block/ioctl.c:304:
+	set_fs (old_fs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#103: FILE: drivers/block/ioctl.c:307:
+		err = copy_to_user (ugeo, &geo, 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#104: FILE: drivers/block/ioctl.c:308:
+		err |= __put_user (geo.start, &ugeo->start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: drivers/block/ioctl.c:314:
+static int compat_hdio_ioctl(struct inode *inode, struct file *file,
+		struct gendisk *disk, unsigned int cmd, unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: drivers/block/ioctl.c:323:
+	error = blkdev_driver_ioctl(inode, file, disk, cmd,
+					(unsigned long)&kval);

ERROR:SPACING: space required before the open parenthesis '('
#124: FILE: drivers/block/ioctl.c:328:
+		if(put_user(kval, uvp))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/block/ioctl.c:342:
+static int compat_blkpg_ioctl(struct block_device *bdev, unsigned int cmd,
+				unsigned long arg)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(fd_ioctl_trans_table)
#263: FILE: drivers/block/ioctl.c:467:
+#define NR_FD_IOCTL_TRANS (sizeof(fd_ioctl_trans_table)/sizeof(fd_ioctl_trans_table[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#263: FILE: drivers/block/ioctl.c:467:
+#define NR_FD_IOCTL_TRANS (sizeof(fd_ioctl_trans_table)/sizeof(fd_ioctl_trans_table[0]))
                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: drivers/block/ioctl.c:470:
+static int compat_fd_ioctl(struct inode *inode, struct file *file,
+		struct gendisk *disk, unsigned int cmd, unsigned long arg)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#281: FILE: drivers/block/ioctl.c:485:
+	switch (cmd) {
+		case FDSETPRM32:
+		case FDDEFPRM32:
+		case FDGETPRM32:
[...]
+		case FDSETDRVPRM32:
+		case FDGETDRVPRM32:
[...]
+		case FDGETDRVSTAT32:
+		case FDPOLLDRVSTAT32:
[...]
+		case FDGETFDCSTAT32:
[...]
+		case FDWERRORGET32:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#291: FILE: drivers/block/ioctl.c:495:
+			f = karg = kmalloc(sizeof(struct floppy_struct), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*karg)...) over kmalloc(sizeof(struct floppy_struct)...)
#291: FILE: drivers/block/ioctl.c:495:
+			f = karg = kmalloc(sizeof(struct floppy_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#320: FILE: drivers/block/ioctl.c:524:
+			f = karg = kmalloc(sizeof(struct floppy_drive_params), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*karg)...) over kmalloc(sizeof(struct floppy_drive_params)...)
#320: FILE: drivers/block/ioctl.c:524:
+			f = karg = kmalloc(sizeof(struct floppy_drive_params), GFP_KERNEL);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#338: FILE: drivers/block/ioctl.c:542:
+			err |= __copy_from_user(&f->max_errors, &uf->max_errors, sizeof(f->max_errors));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#341: FILE: drivers/block/ioctl.c:545:
+			err |= __copy_from_user(f->autodetect, uf->autodetect, sizeof(f->autodetect));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*karg)...) over kmalloc(sizeof(struct floppy_drive_struct)...)
#352: FILE: drivers/block/ioctl.c:556:
+			karg = kmalloc(sizeof(struct floppy_drive_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*karg)...) over kmalloc(sizeof(struct floppy_fdc_state)...)
#357: FILE: drivers/block/ioctl.c:561:
+			karg = kmalloc(sizeof(struct floppy_fdc_state), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*karg)...) over kmalloc(sizeof(struct floppy_write_errors)...)
#362: FILE: drivers/block/ioctl.c:566:
+			karg = kmalloc(sizeof(struct floppy_write_errors), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#369: FILE: drivers/block/ioctl.c:573:
+	set_fs (KERNEL_DS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#371: FILE: drivers/block/ioctl.c:575:
+	set_fs (old_fs);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#374: FILE: drivers/block/ioctl.c:578:
+	switch (cmd) {
+		case FDGETPRM32:
[...]
+		case FDGETDRVPRM32:
[...]
+		case FDGETDRVSTAT32:
+		case FDPOLLDRVSTAT32:
[...]
+		case FDGETFDCSTAT32:
[...]
+		case FDWERRORGET32:
[...]
+		default:

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#411: FILE: drivers/block/ioctl.c:615:
+			err |= __copy_to_user(&uf->max_errors, &f->max_errors, sizeof(f->max_errors));

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#481: FILE: drivers/block/ioctl.c:685:
+out:	if (karg) kfree(karg);
+	return err;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#481: FILE: drivers/block/ioctl.c:685:
+out:	if (karg) kfree(karg);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#485: FILE: drivers/block/ioctl.c:689:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: drivers/block/ioctl.c:691:
+#define BLKBSZGET_32   _IOR(0x12,112,int)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: drivers/block/ioctl.c:691:
+#define BLKBSZGET_32   _IOR(0x12,112,int)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: drivers/block/ioctl.c:692:
+#define BLKBSZSET_32   _IOW(0x12,113,int)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: drivers/block/ioctl.c:692:
+#define BLKBSZSET_32   _IOW(0x12,113,int)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: drivers/block/ioctl.c:693:
+#define BLKGETSIZE64_32        _IOR(0x12,114,int)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: drivers/block/ioctl.c:693:
+#define BLKGETSIZE64_32        _IOR(0x12,114,int)
                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: drivers/block/ioctl.c:718:
+		ret = blkdev_locked_ioctl(file, bdev, BLKBSZGET,
+				(unsigned long)compat_ptr(arg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/block/ioctl.c:724:
+		ret = blkdev_locked_ioctl(file, bdev, BLKBSZSET,
+				(unsigned long)compat_ptr(arg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: drivers/block/ioctl.c:730:
+		ret = blkdev_locked_ioctl(file, bdev, BLKGETSIZE64,
+				(unsigned long)compat_ptr(arg));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137828.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 14 warnings, 20 checks, 1107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137828.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
