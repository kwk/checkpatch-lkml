WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
diff -NurpP --minimal linux-2.6.4-20040314_2308/include/linux/posix_acl.h linux-2.6.4-20040314_2308-bme0.04.1/include/linux/posix_acl.h

ERROR:SPACING: space required after that ',' (ctx:VxV)
#58: FILE: include/linux/fs.h:160:
+#define IS_RDONLY(inode,mount)	(IS_RDONLY_INODE(inode) || MNT_IS_RDONLY(mount))
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/fs.h:1231:
+extern int vfs_permission(struct inode *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#67: FILE: include/linux/fs.h:1231:
+extern int vfs_permission(struct inode *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#67: FILE: include/linux/fs.h:1231:
+extern int vfs_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#67: FILE: include/linux/fs.h:1231:
+extern int vfs_permission(struct inode *, int, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#79: FILE: fs/open.c:229:
+	if (IS_RDONLY(inode, nd.mnt))
 	                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#88: FILE: fs/open.c:353:
+	if (IS_RDONLY(inode, nd.mnt))
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#97: FILE: fs/open.c:410:
+	if (IS_RDONLY(inode, nd.mnt))
 	                     ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWOTH' are not preferred. Consider using octal permissions '0002'.
#107: FILE: fs/open.c:492:
+		if (!res && (mode & S_IWOTH)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#108: FILE: fs/open.c:493:
+		   && !special_file(nd.dentry->d_inode->i_mode)
 		                    ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#108: FILE: fs/open.c:493:
+		if (!res && (mode & S_IWOTH)
+		   && !special_file(nd.dentry->d_inode->i_mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#109: FILE: fs/open.c:494:
+		   && (IS_RDONLY(nd.dentry->d_inode, nd.mnt)))
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#109: FILE: fs/open.c:494:
+		   && (IS_RDONLY(nd.dentry->d_inode, nd.mnt)))
 		                                     ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#109: FILE: fs/open.c:494:
+		   && !special_file(nd.dentry->d_inode->i_mode)
+		   && (IS_RDONLY(nd.dentry->d_inode, nd.mnt)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#127: FILE: fs/open.c:631:
+	if (IS_RDONLY(inode, nd.mnt))
 	                     ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: fs/open.c:652:
+static int chown_common(struct vfsmount *mnt, struct dentry * dentry, uid_t user, gid_t group)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/open.c:694:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/open.c:694:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: fs/open.c:707:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: fs/open.c:707:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#188: FILE: fs/namei.c:217:
+	if (nd && (mask & MAY_WRITE) && MNT_IS_RDONLY(nd->mnt) &&
 	    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: fs/namei.c:218:
+	if (nd && (mask & MAY_WRITE) && MNT_IS_RDONLY(nd->mnt) &&
+		(S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#195: FILE: fs/namei.c:223:
+		retval = vfs_permission(inode, submask, nd);
 		                                        ^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#203: FILE: fs/namei.c:1069:
+static inline int mnt_may_create(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/namei.c:1070:
+       if (child->d_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#204: FILE: fs/namei.c:1070:
+       if (child->d_inode)
+               return -EEXIST;

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: fs/namei.c:1071:
+               return -EEXIST;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/namei.c:1071:
+               return -EEXIST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: fs/namei.c:1072:
+       if (IS_DEADDIR(dir))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#206: FILE: fs/namei.c:1072:
+       if (IS_DEADDIR(dir))
+               return -ENOENT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: fs/namei.c:1073:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: fs/namei.c:1073:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: fs/namei.c:1074:
+       if (mnt->mnt_flags & MNT_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#208: FILE: fs/namei.c:1074:
+       if (mnt->mnt_flags & MNT_RDONLY)
+               return -EROFS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/namei.c:1075:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/namei.c:1075:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: fs/namei.c:1076:
+       return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#213: FILE: fs/namei.c:1079:
+static inline int mnt_may_unlink(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: fs/namei.c:1080:
+       if (!child->d_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#214: FILE: fs/namei.c:1080:
+       if (!child->d_inode)
+               return -ENOENT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: fs/namei.c:1081:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: fs/namei.c:1081:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: fs/namei.c:1082:
+       if (mnt->mnt_flags & MNT_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#216: FILE: fs/namei.c:1082:
+       if (mnt->mnt_flags & MNT_RDONLY)
+               return -EROFS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: fs/namei.c:1083:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/namei.c:1083:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/namei.c:1084:
+       return 0;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#273: FILE: fs/namei.c:1683:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#273: FILE: fs/namei.c:1683:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

WARNING:INDENTED_LABEL: labels should not be indented
#277: FILE: fs/namei.c:1687:
+	exit2:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#285: FILE: fs/namei.c:1759:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#285: FILE: fs/namei.c:1759:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: arch/sparc64/solaris/fs.c:408:
+		if (IS_RDONLY(inode, mnt)) i = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#318: FILE: arch/sparc64/solaris/fs.c:444:
+		if (IS_RDONLY(inode, mnt)) i = 1;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#396: FILE: fs/hfs/inode.c:519:
+	return vfs_permission(inode, mask, nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#408: FILE: fs/hfsplus/inode.c:263:
+	return vfs_permission(inode, mask, nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#420: FILE: fs/intermezzo/dir.c:867:
+        rc = vfs_permission(inode, mask, nd);
                                          ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: fs/intermezzo/dir.c:867:
+        rc = vfs_permission(inode, mask, nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: fs/intermezzo/dir.c:867:
+        rc = vfs_permission(inode, mask, nd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: fs/intermezzo/vfs.c:261:
+                if (IS_RDONLY_INODE(inode)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: fs/intermezzo/vfs.c:261:
+                if (IS_RDONLY_INODE(inode)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: fs/intermezzo/vfs.c:376:
+        if (IS_RDONLY_INODE(inode)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: fs/intermezzo/vfs.c:376:
+        if (IS_RDONLY_INODE(inode)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: fs/intermezzo/vfs.c:2319:
+        if (IS_RDONLY_INODE(inode)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: fs/intermezzo/vfs.c:2319:
+        if (IS_RDONLY_INODE(inode)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: fs/nfs/dir.c:782:
+	if (IS_RDONLY(dir, nd->mnt) &&
+		(nd->intent.open.flags & (O_CREAT|O_TRUNC|FMODE_WRITE)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#495: FILE: fs/nfs/dir.c:782:
+		(nd->intent.open.flags & (O_CREAT|O_TRUNC|FMODE_WRITE)))
 		                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#495: FILE: fs/nfs/dir.c:782:
+		(nd->intent.open.flags & (O_CREAT|O_TRUNC|FMODE_WRITE)))
 		                                         ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#513: FILE: fs/nfs/dir.c:1569:
+	res = vfs_permission(inode, mask, nd);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#525: FILE: fs/proc/base.c:452:
+	if (vfs_permission(inode, mask, nd) != 0)
 	                                ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000296151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 49 warnings, 7 checks, 422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000296151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
