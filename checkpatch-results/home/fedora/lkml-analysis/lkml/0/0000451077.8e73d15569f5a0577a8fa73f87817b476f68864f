ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#79: FILE: net/irda/af_irda.c:28:
+ *     along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#80: FILE: net/irda/af_irda.c:29:
+ *     Foundation, Inc., 59 Temple Place, Suite 330, Boston,$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: net/irda/af_irda.c:70:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#105: FILE: net/irda/af_irda.c:70:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#105: FILE: net/irda/af_irda.c:70:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type *' should also have an identifier name
#105: FILE: net/irda/af_irda.c:70:
+extern int  irlap_driver_rcv(struct sk_buff *, struct net_device *,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#135: FILE: net/irda/af_irda.c:214:
+			ERROR("%s: max_sdu_size must be 0\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#143: FILE: net/irda/af_irda.c:221:
+			ERROR("%s: max_sdu_size cannot be 0\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#152: FILE: net/irda/af_irda.c:230:
+	IRDA_DEBUG(2, __FUNCTION__ "(), max_data_size=%d\n",

CHECK:SPACING: No space is necessary after a cast
#169: FILE: net/irda/af_irda.c:255:
+	self = (struct irda_sock *) instance;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#185: FILE: net/irda/af_irda.c:273:
+			ERROR("%s: max_sdu_size must be 0\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#193: FILE: net/irda/af_irda.c:280:
+			ERROR("%s: max_sdu_size cannot be 0\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#202: FILE: net/irda/af_irda.c:289:
+	IRDA_DEBUG(2, __FUNCTION__ "(), max_data_size=%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#239: FILE: net/irda/af_irda.c:350:
+		IRDA_DEBUG(1, __FUNCTION__

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: net/irda/af_irda.c:371:
+static void irda_getvalue_confirm(int result, __u16 obj_id,
 					  struct ias_value *value, void *priv)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#257: FILE: net/irda/af_irda.c:377:
+		WARNING("%s: lost myself!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#272: FILE: net/irda/af_irda.c:427:
+		WARNING("%s: lost myself!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#290: FILE: net/irda/af_irda.c:485:
+		WARNING("%s: busy!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#329: FILE: net/irda/af_irda.c:562:
+		WARNING("%s: busy with a previous query\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#360: FILE: net/irda/af_irda.c:717:
+	IRDA_DEBUG(1, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#400: FILE: net/irda/af_irda.c:811:
+			IRDA_DEBUG(0, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#491: FILE: net/irda/af_irda.c:1022:
+			IRDA_DEBUG(0, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#557: FILE: net/irda/af_irda.c:1144:
+			ERROR("%s: protocol not supported!\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: net/irda/af_irda.c:1218:
+        if (sk == NULL)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: net/irda/af_irda.c:1218:
+        if (sk == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#591: FILE: net/irda/af_irda.c:1218:
+        if (sk == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#635: FILE: net/irda/af_irda.c:1314:
+		IRDA_DEBUG(2, __FUNCTION__

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#656: FILE: net/irda/af_irda.c:1331:
+	/*
+	 * Just send the message to TinyTP, and let it deal with possible

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#685: FILE: net/irda/af_irda.c:1370:
+		IRDA_DEBUG(2, __FUNCTION__

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#763: FILE: net/irda/af_irda.c:1557:
+	/*
+	 * Check that we don't send out to big frames. This is an unreliable

WARNING:SPLIT_STRING: quoted string split across lines
#769: FILE: net/irda/af_irda.c:1562:
 		IRDA_DEBUG(0, __FUNCTION__ "(), Warning to much data! "
+			   "Chopping frame from %d to %d bytes!\n", len,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#790: FILE: net/irda/af_irda.c:1579:
+	/*
+	 * Just send the message to TinyTP, and let it deal with possible

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#814: FILE: net/irda/af_irda.c:1620:
+	/*
+	 * Check that we don't send out to big frames. This is an unreliable

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: net/irda/af_irda.c:1625:
 		IRDA_DEBUG(0, __FUNCTION__ "(), Warning to much data! "
+			   "Chopping frame from %d to %d bytes!\n", len,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#856: FILE: net/irda/af_irda.c:1688:
+static unsigned int irda_poll(struct file * file, struct socket *sock,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->tx_flow == FLOW_START'
#865: FILE: net/irda/af_irda.c:1723:
+			if ((self->tx_flow == FLOW_START) &&
 			    sock_writeable(sk))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#874: FILE: net/irda/af_irda.c:1731:
+		if ((self->tx_flow == FLOW_START) &&
 		    sock_writeable(sk))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->tx_flow == FLOW_START'
#874: FILE: net/irda/af_irda.c:1731:
+		if ((self->tx_flow == FLOW_START) &&
 		    sock_writeable(sk))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1052: FILE: net/irda/af_irda.c:1989:
+			IRDA_DEBUG(1, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1069: FILE: net/irda/af_irda.c:2008:
+			IRDA_DEBUG(2, __FUNCTION__

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: net/irda/af_irda.c:2013:
+			WARNING("%s: not allowed to set MAXSDUSIZE for this socket type!\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1077: FILE: net/irda/af_irda.c:2013:
+					__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: net/irda/af_irda.c:2286:
+			WARNING("%s: busy with a previous query\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1199: FILE: net/irda/af_irda.c:2286:
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1217: FILE: net/irda/af_irda.c:2382:
+			IRDA_DEBUG(1, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1226: FILE: net/irda/af_irda.c:2401:
+			IRDA_DEBUG(1, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1234: FILE: net/irda/af_irda.c:2408:
+			IRDA_DEBUG(1, __FUNCTION__

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451077.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 35 warnings, 7 checks, 1199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451077.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
