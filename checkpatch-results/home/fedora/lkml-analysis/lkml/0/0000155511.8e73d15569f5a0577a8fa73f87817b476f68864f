WARNING:TYPO_SPELLING: 'tranformed' may be misspelled - perhaps 'transformed'?
#40: 
 named linux-2.6.13/vmlinux tranformed to binary with objdump and
                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'cleanning' may be misspelled - perhaps 'cleaning'?
#69: 
 from the real-mode C source, because a bit of cleanning is needed from
                                               ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: scripts/gzcopy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#169: FILE: scripts/gzcopy.c:46:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: scripts/gzcopy.c:49:
+static inline unsigned strlen(const char *str)

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: scripts/gzcopy.c:52:
+	const char *ptr = str;
+	while (*ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#186: FILE: scripts/gzcopy.c:63:
+}
+#define strcpy my_strcpy

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#193: FILE: scripts/gzcopy.c:70:
+}
+#define strcat my_strcat

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#195: FILE: scripts/gzcopy.c:72:
+static inline unsigned strcmp(const char *s1, const char *s2)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: scripts/gzcopy.c:86:
+    "Copyright 2003 Etienne Lorrain, BSD-like license.\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: scripts/gzcopy.c:87:
+    "USAGE:\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: scripts/gzcopy.c:88:
+    "    gzcopy -h              -> display this help\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: scripts/gzcopy.c:89:
+    "    gzcopy -V              -> display the version\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: scripts/gzcopy.c:90:
+    "    gzcopy -v              -> be verbose\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: scripts/gzcopy.c:91:
+    "    gzcopy -c infile.gz    -> show the comment. (-c0 for raw form)\n"^I/* was -s */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: scripts/gzcopy.c:92:
+    "    gzcopy -c='' infile.gz outfile.gz    -> set (clear if '') the comment\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: scripts/gzcopy.c:93:
+    "    gzcopy -a=\"<a comment>\" in.gz out.gz -> add/append a comment\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: scripts/gzcopy.c:94:
+    "    gzcopy -p='<a comment>' in.gz out.gz -> add/prepend a comment.\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: scripts/gzcopy.c:95:
+    "    gzcopy -k infile.gz    -> show the header CRC. (-k0 for raw form)\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: scripts/gzcopy.c:96:
+    "    gzcopy -k={0,1} infile.gz outfile.gz  -> (de)activate the header CRC\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: scripts/gzcopy.c:97:
+    "    gzcopy -b infile.gz    -> show the text/binary flag\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: scripts/gzcopy.c:98:
+    "    gzcopy -b={0,1} infile.gz outfile.gz  -> set the flag: binary=0/text=1\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: scripts/gzcopy.c:99:
+    "    gzcopy -n infile.gz    -> show the original name. (-n0 for raw form)\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: scripts/gzcopy.c:100:
+    "    gzcopy -n=filename in.gz out.gz       -> set (clear if '') original name\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: scripts/gzcopy.c:101:
+    "NOTE:\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: scripts/gzcopy.c:102:
+    " Use multiple command: gzcopy -c= -a='com' -a='m' -pl='ent' in.gz out.gz .\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: scripts/gzcopy.c:103:
+    " Use option -a{s,l,t} or -p{s,l,t} to check/force a {space,linefeed,tab}\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: scripts/gzcopy.c:104:
+    "  in between comment parts. Use filename \"-\" for stdin and/or stdout.\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: scripts/gzcopy.c:105:
+    " Use the -f option to force overwriting output file, or if you want\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: scripts/gzcopy.c:106:
+    " the output in the input file - you then need a lot of virtual memory.\n";$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: scripts/gzcopy.c:119:
+	if (errno) perror ("gzcopy");		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#242: FILE: scripts/gzcopy.c:119:
+	if (errno) perror ("gzcopy");		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: scripts/gzcopy.c:120:
+	fprintf (stderr, "gzcopy: ");		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: scripts/gzcopy.c:121:
+	fprintf (stderr, format , ## args);	\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#244: FILE: scripts/gzcopy.c:121:
+	fprintf (stderr, format , ## args);	\
 	                        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: scripts/gzcopy.c:122:
+	fprintf (stderr, "\n");			\

WARNING:SPLIT_STRING: quoted string split across lines
#252: FILE: scripts/gzcopy.c:129:
+STR malformed_crc_param[] = "header crc option is neither "
+				"enable (-k=1) nor disable (-k=0)" ENDHLP;

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#260: FILE: scripts/gzcopy.c:137:
+STR not_gzip_file[] = "input file \"%s\" is not a gzip file, "
+			"signature: 0x%X.";

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#261: FILE: scripts/gzcopy.c:138:
+STR bad_header_crc[] = "bad header crc32: is 0x%X, " "should be 0x%X.";

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: scripts/gzcopy.c:142:
+STR outfile_already_exists[] = "output file \"%s\" already exists and "
+				"option -f not specified.\n";

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#272: FILE: scripts/gzcopy.c:149:
+	if (verbose)				\
+	    fprintf (stderr, format , ## args);	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: scripts/gzcopy.c:150:
+	    fprintf (stderr, format , ## args);	\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#273: FILE: scripts/gzcopy.c:150:
+	    fprintf (stderr, format , ## args);	\
 	                            ^

WARNING:TYPO_SPELLING: 'standart' may be misspelled - perhaps 'standard'?
#277: FILE: scripts/gzcopy.c:154:
+STR standart_input[] = "standart input";
                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'standart' may be misspelled - perhaps 'standard'?
#278: FILE: scripts/gzcopy.c:155:
+STR standart_output[] = "standart output";
                          ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#333: FILE: scripts/gzcopy.c:210:
+	unsigned modif_time;	/* nb second since 1/1/1970 */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#338: FILE: scripts/gzcopy.c:215:
+} __attribute__ ((packed));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#343: FILE: scripts/gzcopy.c:220:
+static inline unsigned crc32(unsigned crc, const unsigned char *buf, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#343: FILE: scripts/gzcopy.c:220:
+static inline unsigned crc32(unsigned crc, const unsigned char *buf, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#343: FILE: scripts/gzcopy.c:220:
+static inline unsigned crc32(unsigned crc, const unsigned char *buf, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#352: FILE: scripts/gzcopy.c:229:
+		unsigned c = (crc ^ *buf++) & 0xff;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#362: FILE: scripts/gzcopy.c:239:
+static unsigned initheader_crc32(struct gzheader_str *hdr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#364: FILE: scripts/gzcopy.c:241:
+	unsigned crc = crc32(0, 0, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: scripts/gzcopy.c:242:
+	unsigned crc = crc32(0, 0, 0);
+	return crc32(crc, (unsigned char *)hdr, sizeof(struct gzheader_str));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#368: FILE: scripts/gzcopy.c:245:
+static unsigned addbyte_crc32(unsigned crc, int val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#368: FILE: scripts/gzcopy.c:245:
+static unsigned addbyte_crc32(unsigned crc, int val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: scripts/gzcopy.c:266:
+	unsigned header_crc = 0, calculated_header_crc;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#433: FILE: scripts/gzcopy.c:310:
+				if (argv[cpt][2] != '='
+				    || (argv[cpt][3] != '0' && argv[cpt][3] != '1')) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#449: FILE: scripts/gzcopy.c:326:
+				if (argv[cpt][2] != '='
+				    || (argv[cpt][3] != '0' && argv[cpt][3] != '1')) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#486: FILE: scripts/gzcopy.c:363:
+					unsigned len;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#517: FILE: scripts/gzcopy.c:394:
+						if (newprecomment == 0)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#521: FILE: scripts/gzcopy.c:398:
+						if (newprecomment == 0)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#528: FILE: scripts/gzcopy.c:405:
+						if (tmp == 0)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#533: FILE: scripts/gzcopy.c:410:
+						if (checkspc != '\0' && *ptr != checkspc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#534: FILE: scripts/gzcopy.c:411:
+						if (checkspc != '\0' && *ptr != checkspc
+							&& newprecomment[0] != checkspc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#544: FILE: scripts/gzcopy.c:421:
+					unsigned len;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#575: FILE: scripts/gzcopy.c:452:
+						if (newpostcomment == 0)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#579: FILE: scripts/gzcopy.c:456:
+						if (newpostcomment == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: scripts/gzcopy.c:462:
+						ptr = realloc(newpostcomment,
+							 strlen(newpostcomment) + len + 1);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#586: FILE: scripts/gzcopy.c:463:
+						if (ptr == 0)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#591: FILE: scripts/gzcopy.c:468:
+						if (checkspc != '\0' && *ptr != checkspc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#592: FILE: scripts/gzcopy.c:469:
+						if (checkspc != '\0' && *ptr != checkspc
+						    && *start != checkspc)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#622: FILE: scripts/gzcopy.c:499:
+	if (newname || newcomment || newpostcomment || newprecomment
+		|| activate_header_crc != -1 || set_text_flag != -1) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!infile"
#641: FILE: scripts/gzcopy.c:518:
+		if (infile == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: scripts/gzcopy.c:528:
+		int tmp = fgetc(infile);
+		if (tmp == EOF) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#663: FILE: scripts/gzcopy.c:540:
+	if (header.signature_0x8B1F != 0x8B1F || header.compression_method != Z_DEFLATED
+		|| header.flags & FLAGS_unknown)

WARNING:LINE_SPACING: Missing a blank line after declarations
#668: FILE: scripts/gzcopy.c:545:
+		int tmp = fgetc(infile);
+		if (tmp == EOF) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#688: FILE: scripts/gzcopy.c:565:
+			if ((extrafield = malloc(extrafield_len)) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#705: FILE: scripts/gzcopy.c:582:
+		unsigned name_len = 0, name_alloced = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#719: FILE: scripts/gzcopy.c:596:
+					if ((ptr = realloc(name, name_alloced += 1024)) == 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#723: FILE: scripts/gzcopy.c:600:
+					if ((name = malloc(name_alloced = 1024)) == 0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#733: FILE: scripts/gzcopy.c:610:
+		unsigned comment_len = 0, comment_alloced = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#747: FILE: scripts/gzcopy.c:624:
+					if ((ptr = realloc(comment, comment_alloced += 1024))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#752: FILE: scripts/gzcopy.c:629:
+					if ((comment = malloc(comment_alloced = 1024)) == 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#763: FILE: scripts/gzcopy.c:640:
+		int tmp = fgetc(infile);
+		if (tmp == EOF) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#903: FILE: scripts/gzcopy.c:780:
+			if (checkprespc != '\0'
+			    && *ptr != checkprespc && comment[0] != checkprespc)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#939: FILE: scripts/gzcopy.c:816:
+			if (checkpostspc != '\0'
+			    && *ptr != checkpostspc && newpostcomment[0] != checkpostspc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#956: FILE: scripts/gzcopy.c:833:
+		unsigned full_length = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#960: FILE: scripts/gzcopy.c:837:
+			if (full_content != 0) {
[...]
+			} else if (outfilename == infilename)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#962: FILE: scripts/gzcopy.c:839:
+				unsigned char *ptr = full_content;
+				for (;;) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#966: FILE: scripts/gzcopy.c:843:
+						if (ferror(infile)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#989: FILE: scripts/gzcopy.c:866:
+				struct stat buf;
+				if (stat(outfilename, &buf) != -1 && errno != ENOENT) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!outfile"
#998: FILE: scripts/gzcopy.c:875:
+			if (outfile == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1017: FILE: scripts/gzcopy.c:894:
+			if (fputc(extrafield_len, outfile) == EOF
+				|| fputc(extrafield_len >> 8, outfile) == EOF)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1020: FILE: scripts/gzcopy.c:897:
+			calculated_header_crc = addbyte_crc32(calculated_header_crc,
+								extrafield_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1022: FILE: scripts/gzcopy.c:899:
+			calculated_header_crc = addbyte_crc32(calculated_header_crc,
+								extrafield_len >> 8);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: scripts/gzcopy.c:905:
+				calculated_header_crc = addbyte_crc32(calculated_header_crc,
+								*ptr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1033: FILE: scripts/gzcopy.c:910:
+			unsigned name_len = strlen(name) + 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: scripts/gzcopy.c:917:
+				calculated_header_crc = addbyte_crc32(calculated_header_crc,
+								*ptr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1045: FILE: scripts/gzcopy.c:922:
+			unsigned comment_len = strlen(comment) + 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: scripts/gzcopy.c:929:
+				calculated_header_crc = addbyte_crc32(calculated_header_crc,
+								*ptr);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1059: FILE: scripts/gzcopy.c:936:
+			if (fputc(calculated_header_crc, outfile) == EOF
+				|| fputc(calculated_header_crc >> 8, outfile) == EOF)

WARNING:INDENTED_LABEL: labels should not be indented
#1086: FILE: scripts/gzcopy.c:963:
+      label_end:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "infile"
#1094: FILE: scripts/gzcopy.c:971:
+	if (infile != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "outfile"
#1101: FILE: scripts/gzcopy.c:978:
+	if (outfile != NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#1109: FILE: scripts/gzcopy.c:986:
+      label_not_gzip_file:

WARNING:INDENTED_LABEL: labels should not be indented
#1114: FILE: scripts/gzcopy.c:991:
+      label_not_enough_memory:

WARNING:INDENTED_LABEL: labels should not be indented
#1119: FILE: scripts/gzcopy.c:996:
+      label_read_input_file_error:

WARNING:INDENTED_LABEL: labels should not be indented
#1124: FILE: scripts/gzcopy.c:1001:
+      label_cannot_write_to_file:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1133: FILE: scripts/gzparam.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1172: FILE: scripts/gzparam.c:40:
+const unsigned runadr = 0, minram = 0, option = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1178: FILE: scripts/gzparam.c:46:
+const unsigned min_gujin_version = 0x102;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1188: FILE: scripts/gzparam.c:56:
+const unsigned paramadr = 0 /* , realfct_size = 0 */ ;

WARNING:SPACING: space prohibited before semicolon
#1188: FILE: scripts/gzparam.c:56:
+const unsigned paramadr = 0 /* , realfct_size = 0 */ ;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1197: FILE: scripts/gzparam.c:65:
+#if defined (CONFIG_PHYSICAL_START) && CONFIG_PHYSICAL_START != 0x100000

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1198: FILE: scripts/gzparam.c:66:
+const unsigned loadadr = CONFIG_PHYSICAL_START;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1212: FILE: scripts/gzparam.c:80:
+/* Please help checking and completing this array.
+   filed from www.sandpile.org CPUID.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#1216: FILE: scripts/gzparam.c:84:
+   all usefull information.
        ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1219: FILE: scripts/gzparam.c:87:
+   If everything fails, you can also debug to a serial line or a printer. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1220: FILE: scripts/gzparam.c:88:
+const unsigned maskcpu = 0x80000000	/* refuse to start if no IA32 BIOS (not a PC) */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1234: FILE: scripts/gzparam.c:102:
+#elif defined (CONFIG_M486)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1239: FILE: scripts/gzparam.c:107:
+#elif defined (CONFIG_M586) || defined (CONFIG_MK6) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1239: FILE: scripts/gzparam.c:107:
+#elif defined (CONFIG_M586) || defined (CONFIG_MK6) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1240: FILE: scripts/gzparam.c:108:
+#elif defined (CONFIG_M586) || defined (CONFIG_MK6) \
+	|| defined (CONFIG_MCRUSOE) || defined (CONFIG_MWINCHIPC6)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1240: FILE: scripts/gzparam.c:108:
+	|| defined (CONFIG_MCRUSOE) || defined (CONFIG_MWINCHIPC6)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1240: FILE: scripts/gzparam.c:108:
+	|| defined (CONFIG_MCRUSOE) || defined (CONFIG_MWINCHIPC6)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1244: FILE: scripts/gzparam.c:112:
+#elif defined (CONFIG_M686) || defined (CONFIG_MPENTIUMII) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1244: FILE: scripts/gzparam.c:112:
+#elif defined (CONFIG_M686) || defined (CONFIG_MPENTIUMII) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1245: FILE: scripts/gzparam.c:113:
+#elif defined (CONFIG_M686) || defined (CONFIG_MPENTIUMII) \
+	|| defined (CONFIG_MPENTIUMIII) || defined (CONFIG_MPENTIUMM) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1245: FILE: scripts/gzparam.c:113:
+	|| defined (CONFIG_MPENTIUMIII) || defined (CONFIG_MPENTIUMM) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1245: FILE: scripts/gzparam.c:113:
+	|| defined (CONFIG_MPENTIUMIII) || defined (CONFIG_MPENTIUMM) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1246: FILE: scripts/gzparam.c:114:
+	|| defined (CONFIG_MPENTIUMIII) || defined (CONFIG_MPENTIUMM) \
+	|| defined (CONFIG_MK7) || defined (CONFIG_MWINCHIP2) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1246: FILE: scripts/gzparam.c:114:
+	|| defined (CONFIG_MK7) || defined (CONFIG_MWINCHIP2) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1246: FILE: scripts/gzparam.c:114:
+	|| defined (CONFIG_MK7) || defined (CONFIG_MWINCHIP2) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1247: FILE: scripts/gzparam.c:115:
+	|| defined (CONFIG_MK7) || defined (CONFIG_MWINCHIP2) \
+	|| defined (CONFIG_MCYRIXIII) || defined (CONFIG_MVIAC3_2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1247: FILE: scripts/gzparam.c:115:
+	|| defined (CONFIG_MCYRIXIII) || defined (CONFIG_MVIAC3_2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1247: FILE: scripts/gzparam.c:115:
+	|| defined (CONFIG_MCYRIXIII) || defined (CONFIG_MVIAC3_2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1250: FILE: scripts/gzparam.c:118:
+#elif defined (CONFIG_MPENTIUM4) || defined (CONFIG_MK8)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1250: FILE: scripts/gzparam.c:118:
+#elif defined (CONFIG_MPENTIUM4) || defined (CONFIG_MK8)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1252: FILE: scripts/gzparam.c:120:
+#elif defined (CONFIG_IA64)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1255: FILE: scripts/gzparam.c:123:
+#elif defined (CONFIG_IA64_2)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1261: FILE: scripts/gzparam.c:129:
+const unsigned maskDflags = 0

CHECK:CAMELCASE: Avoid CamelCase: <maskDflags>
#1261: FILE: scripts/gzparam.c:129:
+const unsigned maskDflags = 0

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1275: FILE: scripts/gzparam.c:143:
+const unsigned maskCflags = 0

CHECK:CAMELCASE: Avoid CamelCase: <maskCflags>
#1275: FILE: scripts/gzparam.c:143:
+const unsigned maskCflags = 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1282: FILE: scripts/gzparam.c:150:
+const unsigned maskBflags = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1282: FILE: scripts/gzparam.c:150:
+const unsigned maskBflags = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:CAMELCASE: Avoid CamelCase: <maskBflags>
#1282: FILE: scripts/gzparam.c:150:
+const unsigned maskBflags = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1285: FILE: scripts/gzparam.c:153:
+const unsigned maskAflags = 0

CHECK:CAMELCASE: Avoid CamelCase: <maskAflags>
#1285: FILE: scripts/gzparam.c:153:
+const unsigned maskAflags = 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1300: FILE: scripts/gzparam.c:168:
+const unsigned maskvesa = 0

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1311: FILE: scripts/gzparam.c:179:
+#if defined (CONFIG_VGA_CONSOLE) || defined (CONFIG_MDA_CONSOLE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1311: FILE: scripts/gzparam.c:179:
+#if defined (CONFIG_VGA_CONSOLE) || defined (CONFIG_MDA_CONSOLE)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1321: FILE: scripts/gzparam.c:189:
+const unsigned maskresolution = 0

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1328: FILE: scripts/gzparam.c:196:
+int main (int argc, char **argv) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1328: FILE: scripts/gzparam.c:196:
+int main (int argc, char **argv) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1329: FILE: scripts/gzparam.c:197:
+	printf ("min_gujin_version=0x%X maskcpu=0x%X ",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1332: FILE: scripts/gzparam.c:200:
+		printf ("maskDflags=0x%X ", maskDflags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1334: FILE: scripts/gzparam.c:202:
+		printf ("maskAflags=0x%X ", maskAflags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1335: FILE: scripts/gzparam.c:203:
+#if defined (CONFIG_PHYSICAL_START) && CONFIG_PHYSICAL_START != 0x100000

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1336: FILE: scripts/gzparam.c:204:
+	printf ("loadadr=0x%X ", loadadr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1338: FILE: scripts/gzparam.c:206:
+	printf ("maskvesa=0x%X maskresolution=0x%X\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 121 warnings, 31 checks, 1240 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
