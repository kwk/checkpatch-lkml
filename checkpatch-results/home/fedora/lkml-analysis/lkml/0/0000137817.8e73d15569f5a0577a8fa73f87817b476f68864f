ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#54: FILE: drivers/char/tty_io.c:155:
+static long tty_compat_ioctl(struct file * file, unsigned int cmd, unsigned long arg);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: drivers/char/tty_io.c:2464:
+static int serial_struct_ioctl(struct inode *inode, struct file *file,
+				unsigned cmd, unsigned long arg)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#88: FILE: drivers/char/tty_io.c:2464:
+				unsigned cmd, unsigned long arg)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#90: FILE: drivers/char/tty_io.c:2466:
+	typedef struct serial_struct SS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#91: FILE: drivers/char/tty_io.c:2467:
+	typedef struct serial_struct32 SS32;

CHECK:SPACING: No space is necessary after a cast
#112: FILE: drivers/char/tty_io.c:2488:
+	err = tty_ioctl(inode, file, cmd, (unsigned long) (&ss));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#120: FILE: drivers/char/tty_io.c:2496:
+		__put_user((unsigned long) ss.iomem_base >> 32 ?

CHECK:SPACING: No space is necessary after a cast
#121: FILE: drivers/char/tty_io.c:2497:
+			   0xffffffff : (unsigned) (unsigned long) ss.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#121: FILE: drivers/char/tty_io.c:2497:
+			   0xffffffff : (unsigned) (unsigned long) ss.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ss.iomem_base'
#122: FILE: drivers/char/tty_io.c:2498:
+			   0xffffffff : (unsigned) (unsigned long) ss.
+			   iomem_base, &ss32->iomem_base);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#126: FILE: drivers/char/tty_io.c:2502:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: drivers/char/tty_io.c:2507:
+static long tty_compat_ioctl(struct file *file, unsigned int cmd,
+				unsigned long arg)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137817.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 6 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137817.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
