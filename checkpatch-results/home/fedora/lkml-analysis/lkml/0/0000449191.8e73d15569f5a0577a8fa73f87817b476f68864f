WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#60: FILE: mm/page_alloc.c:89:
+	BUG_ON(PagePrivate(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#61: FILE: mm/page_alloc.c:90:
+	BUG_ON(page->mapping != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#61: FILE: mm/page_alloc.c:90:
+	BUG_ON(page->mapping != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#62: FILE: mm/page_alloc.c:91:
+	BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#63: FILE: mm/page_alloc.c:92:
+	BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#64: FILE: mm/page_alloc.c:93:
+	BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#65: FILE: mm/page_alloc.c:94:
+	BUG_ON(PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#68: FILE: mm/page_alloc.c:97:
+	BUG_ON(page_count(page) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#97: FILE: mm/page_alloc.c:123:
+		BUG_ON(area >= zone->free_area + MAX_ORDER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: mm/page_alloc.c:136:
+		BUG_ON(bad_range(zone, buddy1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: mm/page_alloc.c:137:
+		BUG_ON(bad_range(zone, buddy2));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: mm/page_alloc.c:159:
+		BUG_ON(bad_range(zone, page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: mm/page_alloc.c:168:
+	BUG_ON(bad_range(zone, page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: mm/page_alloc.c:208:
+			BUG_ON(bad_range(zone, page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: mm/page_alloc.c:264:
+balance_classzone(zone_t * classzone, unsigned int gfp_mask,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: mm/page_alloc.c:265:
+balance_classzone(zone_t * classzone, unsigned int gfp_mask,
+			unsigned int order, int * freed)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: mm/page_alloc.c:265:
+			unsigned int order, int * freed)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#181: FILE: mm/page_alloc.c:270:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#191: FILE: mm/page_alloc.c:777:
+	BUG_ON(zone_start_paddr & ~PAGE_MASK);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 15 warnings, 2 checks, 147 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
