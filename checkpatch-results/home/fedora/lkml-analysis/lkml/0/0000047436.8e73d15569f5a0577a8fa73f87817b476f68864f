WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: mm/numa_slab.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: mm/numa_slab.c:32:
+static struct page *numactl_alloc(const struct page_allocator *a,
+				int order, gfp_t flags, int node)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#80: FILE: mm/numa_slab.c:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: mm/numa_slab.c:44:
+struct page_allocator *numactl_allocator(const struct page_allocator *base,
+	int node, gfp_t flags)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#105: FILE: mm/numa_slab.c:67:
+	spinlock_t lock;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__numa_slab_destroy', this function's name, in a string
#114: FILE: mm/numa_slab.c:76:
+	TPRINTK(KERN_CRIT "__numa_slab_destroy(%s)\n", n->sc.name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: mm/numa_slab.c:79:
+		base.free(NULL,n->node[node]);
 		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bring_up_node', this function's name, in a string
#128: FILE: mm/numa_slab.c:90:
+	TPRINTK(KERN_CRIT "bring_up_node(%s, %d)\n", n->sc.name, node);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#138: FILE: mm/numa_slab.c:100:
+	s = n->node[node] = base.create(&base, sc->page_alloc, node,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_create', this function's name, in a string
#154: FILE: mm/numa_slab.c:116:
+	TPRINTK(KERN_CRIT "numa_slab_create(%s, %s, %d, %s, %d, %d, %d ,%d ,%d ,%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: mm/numa_slab.c:117:
+	TPRINTK(KERN_CRIT "numa_slab_create(%s, %s, %d, %s, %d, %d, %d ,%d ,%d ,%d)\n",
+			slab_alloc->name, page_alloc->name, node, name, size,

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#167: FILE: mm/numa_slab.c:129:
+	n = base.alloc(numa_cache, in_atomic() ? GFP_ATOMIC : GFP_KERNEL);

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: mm/numa_slab.c:135:
+	slab_allocator_fill(&n->sc, slab_alloc, page_alloc, node, name, size, align,
+			order, objsize, inuse, offset);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_alloc_node', this function's name, in a string
#188: FILE: mm/numa_slab.c:150:
+	TPRINTK(KERN_CRIT "numa_slab_alloc_node(%s, %x, %d)\n", sc->name, flags, node);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_alloc', this function's name, in a string
#207: FILE: mm/numa_slab.c:169:
+	TPRINTK(KERN_CRIT "numa_slab_alloc(%s, %x)\n", sc->name, flags);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#210: FILE: mm/numa_slab.c:172:
+	if (unlikely(current->flags & (PF_SPREAD_SLAB | PF_MEMPOLICY))
+		&& !in_interrupt()) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: mm/numa_slab.c:174:
+^I ^I^Inode = cpuset_mem_spread_node();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: mm/numa_slab.c:174:
+^I ^I^Inode = cpuset_mem_spread_node();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: mm/numa_slab.c:176:
+                ^Inode = slab_node(current->mempolicy);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: mm/numa_slab.c:176:
+                ^Inode = slab_node(current->mempolicy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: mm/numa_slab.c:176:
+                ^Inode = slab_node(current->mempolicy);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_destroy', this function's name, in a string
#223: FILE: mm/numa_slab.c:185:
+	TPRINTK(KERN_CRIT "numa_slab_destroy(%s)\n", sc->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_pointer_valid', this function's name, in a string
#237: FILE: mm/numa_slab.c:199:
+	TPRINTK(KERN_CRIT "numa_slab_pointer_valid(%s, %p)\n", sc->name, object);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: mm/numa_slab.c:207:
+static unsigned long numa_slab_object_size(struct slab_cache *sc,
+						 const void *object)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_object_size', this function's name, in a string
#250: FILE: mm/numa_slab.c:212:
+	TPRINTK(KERN_CRIT "numa_slab_object_size(%s, %p)\n", sc->name, object);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_free', this function's name, in a string
#259: FILE: mm/numa_slab.c:221:
+	TPRINTK(KERN_CRIT "numa_slab_free(%s, %p)\n", sc ? sc->name : "<none>", object);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_dup', this function's name, in a string
#267: FILE: mm/numa_slab.c:229:
+	TPRINTK(KERN_CRIT "numa_slab_dup(%s)\n", sc->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: mm/numa_slab.c:244:
+static int numa_slab_shrink(struct slab_cache *sc,
+	int (*move_object)(struct slab_cache *, void *))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_shrink', this function's name, in a string
#288: FILE: mm/numa_slab.c:250:
+	TPRINTK(KERN_CRIT "numa_slab_shrink(%s, %p)\n", sc->name, move_object);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: mm/numa_slab.c:268:
+static unsigned long numa_slab_objects(struct slab_cache *sc,
+	unsigned long *active, unsigned long *partial)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#314: FILE: mm/numa_slab.c:276:
+	printk(KERN_CRIT "numa_slab_objects(%s)\n", sc->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_slab_objects', this function's name, in a string
#314: FILE: mm/numa_slab.c:276:
+	printk(KERN_CRIT "numa_slab_objects(%s)\n", sc->name);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#377: FILE: init/Kconfig:416:
+config NUMA_SLAB
+	default y
+	bool "NUMA Slab allocator (for lots of memory)"
+	depends on MODULAR_SLAB && NUMA
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047436.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 19 warnings, 11 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047436.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
