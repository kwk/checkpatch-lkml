WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
their own files instead of being buried (almost hidden) in readme/txt files.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: Documentation/video4linux/v4lgrab.c:1:
+/* Simple Video4Linux image grabber. */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#294: FILE: Documentation/video4linux/v4lgrab.c:31:
+#define READ_VIDEO_PIXEL(buf, format, depth, r, g, b)                   \
+{                                                                       \
+	switch (format)                                                 \
+	{                                                               \
+		case VIDEO_PALETTE_GREY:                                \
+			switch (depth)                                  \
+			{                                               \
+				case 4:                                 \
+				case 6:                                 \
+				case 8:                                 \
+					(r) = (g) = (b) = (*buf++ << 8);\
+					break;                          \
+									\
+				case 16:                                \
+					(r) = (g) = (b) =               \
+						*((unsigned short *) buf);      \
+					buf += 2;                       \
+					break;                          \
+			}                                               \
+			break;                                          \
+									\
+									\
+		case VIDEO_PALETTE_RGB565:                              \
+		{                                                       \
+			unsigned short tmp = *(unsigned short *)buf;    \
+			(r) = tmp&0xF800;                               \
+			(g) = (tmp<<5)&0xFC00;                          \
+			(b) = (tmp<<11)&0xF800;                         \
+			buf += 2;                                       \
+		}                                                       \
+		break;                                                  \
+									\
+		case VIDEO_PALETTE_RGB555:                              \
+			(r) = (buf[0]&0xF8)<<8;                         \
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
+			buf += 2;                                       \
+			break;                                          \
+									\
+		case VIDEO_PALETTE_RGB24:                               \
+			(r) = buf[0] << 8; (g) = buf[1] << 8;           \
+			(b) = buf[2] << 8;                              \
+			buf += 3;                                       \
+			break;                                          \
+									\
+		default:                                                \
+			fprintf(stderr,                                 \
+				"Format %d not yet supported\n",        \
+				format);                                \
+	}                                                               \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#294: FILE: Documentation/video4linux/v4lgrab.c:31:
+#define READ_VIDEO_PIXEL(buf, format, depth, r, g, b)                   \
+{                                                                       \
+	switch (format)                                                 \
+	{                                                               \
+		case VIDEO_PALETTE_GREY:                                \
+			switch (depth)                                  \
+			{                                               \
+				case 4:                                 \
+				case 6:                                 \
+				case 8:                                 \
+					(r) = (g) = (b) = (*buf++ << 8);\
+					break;                          \
+									\
+				case 16:                                \
+					(r) = (g) = (b) =               \
+						*((unsigned short *) buf);      \
+					buf += 2;                       \
+					break;                          \
+			}                                               \
+			break;                                          \
+									\
+									\
+		case VIDEO_PALETTE_RGB565:                              \
+		{                                                       \
+			unsigned short tmp = *(unsigned short *)buf;    \
+			(r) = tmp&0xF800;                               \
+			(g) = (tmp<<5)&0xFC00;                          \
+			(b) = (tmp<<11)&0xF800;                         \
+			buf += 2;                                       \
+		}                                                       \
+		break;                                                  \
+									\
+		case VIDEO_PALETTE_RGB555:                              \
+			(r) = (buf[0]&0xF8)<<8;                         \
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
+			buf += 2;                                       \
+			break;                                          \
+									\
+		case VIDEO_PALETTE_RGB24:                               \
+			(r) = buf[0] << 8; (g) = buf[1] << 8;           \
+			(b) = buf[2] << 8;                              \
+			buf += 3;                                       \
+			break;                                          \
+									\
+		default:                                                \
+			fprintf(stderr,                                 \
+				"Format %d not yet supported\n",        \
+				format);                                \
+	}                                                               \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#294: FILE: Documentation/video4linux/v4lgrab.c:31:
+#define READ_VIDEO_PIXEL(buf, format, depth, r, g, b)                   \
+{                                                                       \
+	switch (format)                                                 \
+	{                                                               \
+		case VIDEO_PALETTE_GREY:                                \
+			switch (depth)                                  \
+			{                                               \
+				case 4:                                 \
+				case 6:                                 \
+				case 8:                                 \
+					(r) = (g) = (b) = (*buf++ << 8);\
+					break;                          \
+									\
+				case 16:                                \
+					(r) = (g) = (b) =               \
+						*((unsigned short *) buf);      \
+					buf += 2;                       \
+					break;                          \
+			}                                               \
+			break;                                          \
+									\
+									\
+		case VIDEO_PALETTE_RGB565:                              \
+		{                                                       \
+			unsigned short tmp = *(unsigned short *)buf;    \
+			(r) = tmp&0xF800;                               \
+			(g) = (tmp<<5)&0xFC00;                          \
+			(b) = (tmp<<11)&0xF800;                         \
+			buf += 2;                                       \
+		}                                                       \
+		break;                                                  \
+									\
+		case VIDEO_PALETTE_RGB555:                              \
+			(r) = (buf[0]&0xF8)<<8;                         \
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
+			buf += 2;                                       \
+			break;                                          \
+									\
+		case VIDEO_PALETTE_RGB24:                               \
+			(r) = buf[0] << 8; (g) = buf[1] << 8;           \
+			(b) = buf[2] << 8;                              \
+			buf += 3;                                       \
+			break;                                          \
+									\
+		default:                                                \
+			fprintf(stderr,                                 \
+				"Format %d not yet supported\n",        \
+				format);                                \
+	}                                                               \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#294: FILE: Documentation/video4linux/v4lgrab.c:31:
+#define READ_VIDEO_PIXEL(buf, format, depth, r, g, b)                   \
+{                                                                       \
+	switch (format)                                                 \
+	{                                                               \
+		case VIDEO_PALETTE_GREY:                                \
+			switch (depth)                                  \
+			{                                               \
+				case 4:                                 \
+				case 6:                                 \
+				case 8:                                 \
+					(r) = (g) = (b) = (*buf++ << 8);\
+					break;                          \
+									\
+				case 16:                                \
+					(r) = (g) = (b) =               \
+						*((unsigned short *) buf);      \
+					buf += 2;                       \
+					break;                          \
+			}                                               \
+			break;                                          \
+									\
+									\
+		case VIDEO_PALETTE_RGB565:                              \
+		{                                                       \
+			unsigned short tmp = *(unsigned short *)buf;    \
+			(r) = tmp&0xF800;                               \
+			(g) = (tmp<<5)&0xFC00;                          \
+			(b) = (tmp<<11)&0xF800;                         \
+			buf += 2;                                       \
+		}                                                       \
+		break;                                                  \
+									\
+		case VIDEO_PALETTE_RGB555:                              \
+			(r) = (buf[0]&0xF8)<<8;                         \
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
+			buf += 2;                                       \
+			break;                                          \
+									\
+		case VIDEO_PALETTE_RGB24:                               \
+			(r) = buf[0] << 8; (g) = buf[1] << 8;           \
+			(b) = buf[2] << 8;                              \
+			buf += 3;                                       \
+			break;                                          \
+									\
+		default:                                                \
+			fprintf(stderr,                                 \
+				"Format %d not yet supported\n",        \
+				format);                                \
+	}                                                               \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'g' - possible side-effects?
#294: FILE: Documentation/video4linux/v4lgrab.c:31:
+#define READ_VIDEO_PIXEL(buf, format, depth, r, g, b)                   \
+{                                                                       \
+	switch (format)                                                 \
+	{                                                               \
+		case VIDEO_PALETTE_GREY:                                \
+			switch (depth)                                  \
+			{                                               \
+				case 4:                                 \
+				case 6:                                 \
+				case 8:                                 \
+					(r) = (g) = (b) = (*buf++ << 8);\
+					break;                          \
+									\
+				case 16:                                \
+					(r) = (g) = (b) =               \
+						*((unsigned short *) buf);      \
+					buf += 2;                       \
+					break;                          \
+			}                                               \
+			break;                                          \
+									\
+									\
+		case VIDEO_PALETTE_RGB565:                              \
+		{                                                       \
+			unsigned short tmp = *(unsigned short *)buf;    \
+			(r) = tmp&0xF800;                               \
+			(g) = (tmp<<5)&0xFC00;                          \
+			(b) = (tmp<<11)&0xF800;                         \
+			buf += 2;                                       \
+		}                                                       \
+		break;                                                  \
+									\
+		case VIDEO_PALETTE_RGB555:                              \
+			(r) = (buf[0]&0xF8)<<8;                         \
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
+			buf += 2;                                       \
+			break;                                          \
+									\
+		case VIDEO_PALETTE_RGB24:                               \
+			(r) = buf[0] << 8; (g) = buf[1] << 8;           \
+			(b) = buf[2] << 8;                              \
+			buf += 3;                                       \
+			break;                                          \
+									\
+		default:                                                \
+			fprintf(stderr,                                 \
+				"Format %d not yet supported\n",        \
+				format);                                \
+	}                                                               \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#294: FILE: Documentation/video4linux/v4lgrab.c:31:
+#define READ_VIDEO_PIXEL(buf, format, depth, r, g, b)                   \
+{                                                                       \
+	switch (format)                                                 \
+	{                                                               \
+		case VIDEO_PALETTE_GREY:                                \
+			switch (depth)                                  \
+			{                                               \
+				case 4:                                 \
+				case 6:                                 \
+				case 8:                                 \
+					(r) = (g) = (b) = (*buf++ << 8);\
+					break;                          \
+									\
+				case 16:                                \
+					(r) = (g) = (b) =               \
+						*((unsigned short *) buf);      \
+					buf += 2;                       \
+					break;                          \
+			}                                               \
+			break;                                          \
+									\
+									\
+		case VIDEO_PALETTE_RGB565:                              \
+		{                                                       \
+			unsigned short tmp = *(unsigned short *)buf;    \
+			(r) = tmp&0xF800;                               \
+			(g) = (tmp<<5)&0xFC00;                          \
+			(b) = (tmp<<11)&0xF800;                         \
+			buf += 2;                                       \
+		}                                                       \
+		break;                                                  \
+									\
+		case VIDEO_PALETTE_RGB555:                              \
+			(r) = (buf[0]&0xF8)<<8;                         \
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
+			buf += 2;                                       \
+			break;                                          \
+									\
+		case VIDEO_PALETTE_RGB24:                               \
+			(r) = buf[0] << 8; (g) = buf[1] << 8;           \
+			(b) = buf[2] << 8;                              \
+			buf += 3;                                       \
+			break;                                          \
+									\
+		default:                                                \
+			fprintf(stderr,                                 \
+				"Format %d not yet supported\n",        \
+				format);                                \
+	}                                                               \
+}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#296: FILE: Documentation/video4linux/v4lgrab.c:33:
+	switch (format)                                                 \
+	{                                                               \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#299: FILE: Documentation/video4linux/v4lgrab.c:36:
+			switch (depth)                                  \
+			{                                               \

CHECK:SPACING: No space is necessary after a cast
#309: FILE: Documentation/video4linux/v4lgrab.c:46:
+						*((unsigned short *) buf);      \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#319: FILE: Documentation/video4linux/v4lgrab.c:56:
+			(r) = tmp&0xF800;                               \
 			         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#320: FILE: Documentation/video4linux/v4lgrab.c:57:
+			(g) = (tmp<<5)&0xFC00;                          \
 			          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#320: FILE: Documentation/video4linux/v4lgrab.c:57:
+			(g) = (tmp<<5)&0xFC00;                          \
 			              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#321: FILE: Documentation/video4linux/v4lgrab.c:58:
+			(b) = (tmp<<11)&0xF800;                         \
 			          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#321: FILE: Documentation/video4linux/v4lgrab.c:58:
+			(b) = (tmp<<11)&0xF800;                         \
 			               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#327: FILE: Documentation/video4linux/v4lgrab.c:64:
+			(r) = (buf[0]&0xF8)<<8;                         \
 			             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#327: FILE: Documentation/video4linux/v4lgrab.c:64:
+			(r) = (buf[0]&0xF8)<<8;                         \
 			                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#328: FILE: Documentation/video4linux/v4lgrab.c:65:
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
 			                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#328: FILE: Documentation/video4linux/v4lgrab.c:65:
+			(g) = ((buf[0] << 5 | buf[1] >> 3)&0xF8)<<8;    \
 			                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#329: FILE: Documentation/video4linux/v4lgrab.c:66:
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \
 			                             ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#329: FILE: Documentation/video4linux/v4lgrab.c:66:
+			(b) = ((buf[1] << 2 ) & 0xF8)<<8;               \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#346: FILE: Documentation/video4linux/v4lgrab.c:83:
+int get_brightness_adj(unsigned char *image, long size, int *brightness) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: Documentation/video4linux/v4lgrab.c:84:
+  long i, tot = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  long i, tot = 0;
+  for (i=0;i<size*3;i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)
+    tot += image[i];

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)
         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)
           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)
             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)
                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#348: FILE: Documentation/video4linux/v4lgrab.c:85:
+  for (i=0;i<size*3;i++)
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: Documentation/video4linux/v4lgrab.c:86:
+    tot += image[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: Documentation/video4linux/v4lgrab.c:87:
+  *brightness = (128 - tot/(size*3))/3;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: Documentation/video4linux/v4lgrab.c:87:
+  *brightness = (128 - tot/(size*3))/3;
                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#350: FILE: Documentation/video4linux/v4lgrab.c:87:
+  *brightness = (128 - tot/(size*3))/3;
                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: Documentation/video4linux/v4lgrab.c:87:
+  *brightness = (128 - tot/(size*3))/3;
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: Documentation/video4linux/v4lgrab.c:88:
+  return !((tot/(size*3)) >= 126 && (tot/(size*3)) <= 130);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#351: FILE: Documentation/video4linux/v4lgrab.c:88:
+  return !((tot/(size*3)) >= 126 && (tot/(size*3)) <= 130);
                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#351: FILE: Documentation/video4linux/v4lgrab.c:88:
+  return !((tot/(size*3)) >= 126 && (tot/(size*3)) <= 130);
                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#351: FILE: Documentation/video4linux/v4lgrab.c:88:
+  return !((tot/(size*3)) >= 126 && (tot/(size*3)) <= 130);
                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#351: FILE: Documentation/video4linux/v4lgrab.c:88:
+  return !((tot/(size*3)) >= 126 && (tot/(size*3)) <= 130);
                                               ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#354: FILE: Documentation/video4linux/v4lgrab.c:91:
+int main(int argc, char ** argv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: Documentation/video4linux/v4lgrab.c:93:
+  int fd = open(FILE, O_RDONLY), f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: Documentation/video4linux/v4lgrab.c:94:
+  struct video_capability cap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: Documentation/video4linux/v4lgrab.c:95:
+  struct video_window win;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: Documentation/video4linux/v4lgrab.c:96:
+  struct video_picture vpic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: Documentation/video4linux/v4lgrab.c:98:
+  unsigned char *buffer, *src;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: Documentation/video4linux/v4lgrab.c:99:
+  int bpp = 24, r, g, b;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: Documentation/video4linux/v4lgrab.c:100:
+  unsigned int i, src_depth;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: Documentation/video4linux/v4lgrab.c:102:
+  if (fd < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#365: FILE: Documentation/video4linux/v4lgrab.c:102:
+  if (fd < 0) {
+    perror(FILE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: Documentation/video4linux/v4lgrab.c:103:
+    perror(FILE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: Documentation/video4linux/v4lgrab.c:104:
+    exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: Documentation/video4linux/v4lgrab.c:105:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: Documentation/video4linux/v4lgrab.c:107:
+  if (ioctl(fd, VIDIOCGCAP, &cap) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#370: FILE: Documentation/video4linux/v4lgrab.c:107:
+  if (ioctl(fd, VIDIOCGCAP, &cap) < 0) {
+    perror("VIDIOGCAP");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: Documentation/video4linux/v4lgrab.c:108:
+    perror("VIDIOGCAP");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: Documentation/video4linux/v4lgrab.c:109:
+    fprintf(stderr, "(" FILE " not a video4linux device?)\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: Documentation/video4linux/v4lgrab.c:110:
+    close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: Documentation/video4linux/v4lgrab.c:111:
+    exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: Documentation/video4linux/v4lgrab.c:112:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: Documentation/video4linux/v4lgrab.c:114:
+  if (ioctl(fd, VIDIOCGWIN, &win) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#377: FILE: Documentation/video4linux/v4lgrab.c:114:
+  if (ioctl(fd, VIDIOCGWIN, &win) < 0) {
+    perror("VIDIOCGWIN");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: Documentation/video4linux/v4lgrab.c:115:
+    perror("VIDIOCGWIN");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: Documentation/video4linux/v4lgrab.c:116:
+    close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: Documentation/video4linux/v4lgrab.c:117:
+    exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: Documentation/video4linux/v4lgrab.c:118:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: Documentation/video4linux/v4lgrab.c:120:
+  if (ioctl(fd, VIDIOCGPICT, &vpic) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#383: FILE: Documentation/video4linux/v4lgrab.c:120:
+  if (ioctl(fd, VIDIOCGPICT, &vpic) < 0) {
+    perror("VIDIOCGPICT");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: Documentation/video4linux/v4lgrab.c:121:
+    perror("VIDIOCGPICT");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: Documentation/video4linux/v4lgrab.c:122:
+    close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: Documentation/video4linux/v4lgrab.c:123:
+    exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: Documentation/video4linux/v4lgrab.c:124:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: Documentation/video4linux/v4lgrab.c:126:
+  if (cap.type & VID_TYPE_MONOCHROME) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#389: FILE: Documentation/video4linux/v4lgrab.c:126:
+  if (cap.type & VID_TYPE_MONOCHROME) {
+    vpic.depth=8;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: Documentation/video4linux/v4lgrab.c:127:
+    vpic.depth=8;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#390: FILE: Documentation/video4linux/v4lgrab.c:127:
+    vpic.depth=8;
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: Documentation/video4linux/v4lgrab.c:128:
+    vpic.palette=VIDEO_PALETTE_GREY;    /* 8bit grey */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#391: FILE: Documentation/video4linux/v4lgrab.c:128:
+    vpic.palette=VIDEO_PALETTE_GREY;    /* 8bit grey */
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: Documentation/video4linux/v4lgrab.c:129:
+    if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#392: FILE: Documentation/video4linux/v4lgrab.c:129:
+    if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {
+      vpic.depth=6;

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: Documentation/video4linux/v4lgrab.c:129:
+    if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: Documentation/video4linux/v4lgrab.c:130:
+      vpic.depth=6;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#393: FILE: Documentation/video4linux/v4lgrab.c:130:
+      vpic.depth=6;
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: Documentation/video4linux/v4lgrab.c:131:
+      if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {$

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: Documentation/video4linux/v4lgrab.c:131:
+      if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#395: FILE: Documentation/video4linux/v4lgrab.c:132:
+	vpic.depth=4;
 	          ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#396: FILE: Documentation/video4linux/v4lgrab.c:133:
+	if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {
+	  fprintf(stderr, "Unable to find a supported capture format.\n");

ERROR:SPACING: space required before the open parenthesis '('
#396: FILE: Documentation/video4linux/v4lgrab.c:133:
+	if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: Documentation/video4linux/v4lgrab.c:138:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: Documentation/video4linux/v4lgrab.c:139:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: Documentation/video4linux/v4lgrab.c:140:
+  } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#403: FILE: Documentation/video4linux/v4lgrab.c:140:
+  } else {
+    vpic.depth=24;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: Documentation/video4linux/v4lgrab.c:141:
+    vpic.depth=24;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#404: FILE: Documentation/video4linux/v4lgrab.c:141:
+    vpic.depth=24;
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: Documentation/video4linux/v4lgrab.c:142:
+    vpic.palette=VIDEO_PALETTE_RGB24;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#405: FILE: Documentation/video4linux/v4lgrab.c:142:
+    vpic.palette=VIDEO_PALETTE_RGB24;
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: Documentation/video4linux/v4lgrab.c:144:
+    if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#407: FILE: Documentation/video4linux/v4lgrab.c:144:
+    if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {
+      vpic.palette=VIDEO_PALETTE_RGB565;

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: Documentation/video4linux/v4lgrab.c:144:
+    if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: Documentation/video4linux/v4lgrab.c:145:
+      vpic.palette=VIDEO_PALETTE_RGB565;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#408: FILE: Documentation/video4linux/v4lgrab.c:145:
+      vpic.palette=VIDEO_PALETTE_RGB565;
                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: Documentation/video4linux/v4lgrab.c:146:
+      vpic.depth=16;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#409: FILE: Documentation/video4linux/v4lgrab.c:146:
+      vpic.depth=16;
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: Documentation/video4linux/v4lgrab.c:148:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {$

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#411: FILE: Documentation/video4linux/v4lgrab.c:148:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
                                       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#411: FILE: Documentation/video4linux/v4lgrab.c:148:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#411: FILE: Documentation/video4linux/v4lgrab.c:148:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#412: FILE: Documentation/video4linux/v4lgrab.c:149:
+	vpic.palette=VIDEO_PALETTE_RGB555;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#413: FILE: Documentation/video4linux/v4lgrab.c:150:
+	vpic.depth=15;
 	          ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#415: FILE: Documentation/video4linux/v4lgrab.c:152:
+	if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
+	  fprintf(stderr, "Unable to find a supported capture format.\n");

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#415: FILE: Documentation/video4linux/v4lgrab.c:152:
+	if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
 	                                ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#415: FILE: Documentation/video4linux/v4lgrab.c:152:
+	if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#415: FILE: Documentation/video4linux/v4lgrab.c:152:
+	if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {

WARNING:TABSTOP: Statements should start on a tabstop
#417: FILE: Documentation/video4linux/v4lgrab.c:154:
+	  return -1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: Documentation/video4linux/v4lgrab.c:156:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: Documentation/video4linux/v4lgrab.c:157:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: Documentation/video4linux/v4lgrab.c:158:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: Documentation/video4linux/v4lgrab.c:160:
+  buffer = malloc(win.width * win.height * bpp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: Documentation/video4linux/v4lgrab.c:161:
+  if (!buffer) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#424: FILE: Documentation/video4linux/v4lgrab.c:161:
+  if (!buffer) {
+    fprintf(stderr, "Out of memory.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: Documentation/video4linux/v4lgrab.c:162:
+    fprintf(stderr, "Out of memory.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: Documentation/video4linux/v4lgrab.c:163:
+    exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: Documentation/video4linux/v4lgrab.c:164:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: Documentation/video4linux/v4lgrab.c:166:
+  do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#429: FILE: Documentation/video4linux/v4lgrab.c:166:
+  do {
+    int newbright;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: Documentation/video4linux/v4lgrab.c:167:
+    int newbright;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: Documentation/video4linux/v4lgrab.c:168:
+    int newbright;
+    read(fd, buffer, win.width * win.height * bpp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: Documentation/video4linux/v4lgrab.c:168:
+    read(fd, buffer, win.width * win.height * bpp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: Documentation/video4linux/v4lgrab.c:169:
+    f = get_brightness_adj(buffer, win.width * win.height, &newbright);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: Documentation/video4linux/v4lgrab.c:170:
+    if (f) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#433: FILE: Documentation/video4linux/v4lgrab.c:170:
+    if (f) {
+      vpic.brightness += (newbright << 8);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: Documentation/video4linux/v4lgrab.c:171:
+      vpic.brightness += (newbright << 8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: Documentation/video4linux/v4lgrab.c:172:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {$

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#435: FILE: Documentation/video4linux/v4lgrab.c:172:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
                                       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#435: FILE: Documentation/video4linux/v4lgrab.c:172:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {
                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#435: FILE: Documentation/video4linux/v4lgrab.c:172:
+      if(ioctl(fd, VIDIOCSPICT, &vpic)==-1) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: Documentation/video4linux/v4lgrab.c:175:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: Documentation/video4linux/v4lgrab.c:176:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: Documentation/video4linux/v4lgrab.c:177:
+  } while (f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: Documentation/video4linux/v4lgrab.c:179:
+  fprintf(stdout, "P6\n%d %d 255\n", win.width, win.height);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: Documentation/video4linux/v4lgrab.c:181:
+  src = buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: Documentation/video4linux/v4lgrab.c:183:
+  for (i = 0; i < win.width * win.height; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#446: FILE: Documentation/video4linux/v4lgrab.c:183:
+  for (i = 0; i < win.width * win.height; i++) {
+    READ_VIDEO_PIXEL(src, vpic.palette, src_depth, r, g, b);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: Documentation/video4linux/v4lgrab.c:184:
+    READ_VIDEO_PIXEL(src, vpic.palette, src_depth, r, g, b);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: Documentation/video4linux/v4lgrab.c:185:
+    fputc(r>>8, stdout);$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#448: FILE: Documentation/video4linux/v4lgrab.c:185:
+    fputc(r>>8, stdout);
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: Documentation/video4linux/v4lgrab.c:186:
+    fputc(g>>8, stdout);$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#449: FILE: Documentation/video4linux/v4lgrab.c:186:
+    fputc(g>>8, stdout);
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: Documentation/video4linux/v4lgrab.c:187:
+    fputc(b>>8, stdout);$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#450: FILE: Documentation/video4linux/v4lgrab.c:187:
+    fputc(b>>8, stdout);
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: Documentation/video4linux/v4lgrab.c:188:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: Documentation/video4linux/v4lgrab.c:190:
+  close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: Documentation/video4linux/v4lgrab.c:191:
+  return 0;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075537.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 95 warnings, 28 checks, 402 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075537.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
