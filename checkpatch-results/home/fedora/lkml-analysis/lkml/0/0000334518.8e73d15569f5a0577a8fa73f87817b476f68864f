WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/s390/Kconfig:104:
+config SCLP_VT220_TTY
+	bool "Support for SCLP VT220-compatible terminal"
+	depends on SCLP
+	help
+	  Include support for an IBM SCLP VT220-compatible terminal.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: drivers/s390/Kconfig:110:
+config SCLP_VT220_CONSOLE
+	bool "Support for console on SCLP VT220-compatible terminal"
+	depends on SCLP_VT220_TTY
+	help
+	  Include support for using an IBM SCLP VT220-compatible terminal as a
+	  Linux system console.
+

CHECK:CAMELCASE: Avoid CamelCase: <EvTyp_VT220Msg>
#88: FILE: drivers/s390/char/sclp.h:29:
+#define EvTyp_VT220Msg		0x1A

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <EvTyp_VT220Msg_Mask>
#96: FILE: drivers/s390/char/sclp.h:38:
+#define EvTyp_VT220Msg_Mask	0x00000040

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#142: FILE: drivers/s390/char/sclp_vt220.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#143: FILE: drivers/s390/char/sclp_vt220.c:2:
+ *  drivers/s390/char/sclp_vt220.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#169: FILE: drivers/s390/char/sclp_vt220.c:28:
+#include <asm/uaccess.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: drivers/s390/char/sclp_vt220.c:31:
+#define SCLP_VT220_PRINT_HEADER ^I"sclp vt220 tty driver: "$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#220: FILE: drivers/s390/char/sclp_vt220.c:79:
+ * a single buffer */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#224: FILE: drivers/s390/char/sclp_vt220.c:83:
+ * yet sent */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#231: FILE: drivers/s390/char/sclp_vt220.c:90:
+static int sclp_vt220_initialized = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#235: FILE: drivers/s390/char/sclp_vt220.c:94:
+ * another buffer */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: drivers/s390/char/sclp_vt220.c:109:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#268: FILE: drivers/s390/char/sclp_vt220.c:127:
+	list_add_tail((struct list_head *) page, &sclp_vt220_empty);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next"
#275: FILE: drivers/s390/char/sclp_vt220.c:134:
+	if (next != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sclp_vt220_tty"
#281: FILE: drivers/s390/char/sclp_vt220.c:140:
+	if (sclp_vt220_tty != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sclp_vt220_tty->ldisc.write_wakeup != NULL'
#282: FILE: drivers/s390/char/sclp_vt220.c:141:
+		if ((sclp_vt220_tty->flags & (1 << TTY_DO_WRITE_WAKEUP)) &&
+		    (sclp_vt220_tty->ldisc.write_wakeup != NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sclp_vt220_tty->ldisc.write_wakeup"
#283: FILE: drivers/s390/char/sclp_vt220.c:142:
+		    (sclp_vt220_tty->ldisc.write_wakeup != NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (sclp_vt220_tty->ldisc.write_wakeup)
#284: FILE: drivers/s390/char/sclp_vt220.c:143:
+			(sclp_vt220_tty->ldisc.write_wakeup)(sclp_vt220_tty);

CHECK:SPACING: No space is necessary after a cast
#299: FILE: drivers/s390/char/sclp_vt220.c:158:
+	request = (struct sclp_vt220_request *) data;

CHECK:SPACING: No space is necessary after a cast
#301: FILE: drivers/s390/char/sclp_vt220.c:160:
+	sccb = (struct sclp_vt220_sccb *) request->sclp_req.sccb;

CHECK:SPACING: No space is necessary after a cast
#319: FILE: drivers/s390/char/sclp_vt220.c:178:
+	vt220_request = (struct sclp_vt220_request *) data;

CHECK:SPACING: No space is necessary after a cast
#324: FILE: drivers/s390/char/sclp_vt220.c:183:
+	sccb = (struct sclp_vt220_sccb *) vt220_request->sclp_req.sccb;

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#328: FILE: drivers/s390/char/sclp_vt220.c:187:
+	case 0x0020 :
 	            ^

CHECK:SPACING: No space is necessary after a cast
#338: FILE: drivers/s390/char/sclp_vt220.c:197:
+		if (sclp_remove_processed((struct sccb_header *) sccb) > 0) {

CHECK:SPACING: No space is necessary after a cast
#353: FILE: drivers/s390/char/sclp_vt220.c:212:
+			(unsigned long) vt220_request;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#355: FILE: drivers/s390/char/sclp_vt220.c:214:
+			jiffies + SCLP_BUFFER_RETRY_INTERVAL*HZ;
 			                                    ^

CHECK:SPACING: No space is necessary after a cast
#373: FILE: drivers/s390/char/sclp_vt220.c:232:
+		sclp_vt220_callback(&request->sclp_req, (void *) request);

CHECK:SPACING: No space is necessary after a cast
#379: FILE: drivers/s390/char/sclp_vt220.c:238:
+	request->sclp_req.callback_data = (void *) request;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: drivers/s390/char/sclp_vt220.c:257:
+	 * the rest */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sclp_vt220_current_request"
#415: FILE: drivers/s390/char/sclp_vt220.c:274:
+	if (sclp_vt220_current_request != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: drivers/s390/char/sclp_vt220.c:275:
+^I^Isccb = (struct sclp_vt220_sccb *) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#416: FILE: drivers/s390/char/sclp_vt220.c:275:
+		sccb = (struct sclp_vt220_sccb *) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "request"
#428: FILE: drivers/s390/char/sclp_vt220.c:287:
+	if (request != NULL)

CHECK:SPACING: No space is necessary after a cast
#445: FILE: drivers/s390/char/sclp_vt220.c:304:
+			((addr_t) page + PAGE_SIZE)) - 1;

CHECK:SPACING: No space is necessary after a cast
#450: FILE: drivers/s390/char/sclp_vt220.c:309:
+	sccb = (struct sclp_vt220_sccb *) page;

CHECK:SPACING: No space is necessary after a cast
#451: FILE: drivers/s390/char/sclp_vt220.c:310:
+	memset((void *) sccb, 0, sizeof(struct sclp_vt220_sccb));

CHECK:SPACING: No space is necessary after a cast
#465: FILE: drivers/s390/char/sclp_vt220.c:324:
+	sccb = (struct sclp_vt220_sccb *) request->sclp_req.sccb;

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: drivers/s390/char/sclp_vt220.c:324:
+	struct sclp_vt220_sccb *sccb;
+	sccb = (struct sclp_vt220_sccb *) request->sclp_req.sccb;

CHECK:SPACING: No space is necessary after a cast
#474: FILE: drivers/s390/char/sclp_vt220.c:333:
+	sccb = (struct sclp_vt220_sccb *) request->sclp_req.sccb;

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: drivers/s390/char/sclp_vt220.c:333:
+	struct sclp_vt220_sccb *sccb;
+	sccb = (struct sclp_vt220_sccb *) request->sclp_req.sccb;

CHECK:SPACING: No space is necessary after a cast
#498: FILE: drivers/s390/char/sclp_vt220.c:357:
+	sccb = (struct sclp_vt220_sccb *) request->sclp_req.sccb;

CHECK:SPACING: No space is necessary after a cast
#499: FILE: drivers/s390/char/sclp_vt220.c:358:
+	buffer = (void *) ((addr_t) sccb + sccb->header.length);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#503: FILE: drivers/s390/char/sclp_vt220.c:362:
+		for (from=0, to=0;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#503: FILE: drivers/s390/char/sclp_vt220.c:362:
+		for (from=0, to=0;
 		               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#507: FILE: drivers/s390/char/sclp_vt220.c:366:
+			if (from_user) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#510: FILE: drivers/s390/char/sclp_vt220.c:369:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#513: FILE: drivers/s390/char/sclp_vt220.c:372:
+			if (c == 0x0a) {
[...]
+			} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#514: FILE: drivers/s390/char/sclp_vt220.c:373:
+				if (to + 1 < sclp_vt220_space_left(request)) {
[...]
+				} else
[...]

CHECK:SPACING: No space is necessary after a cast
#515: FILE: drivers/s390/char/sclp_vt220.c:374:
+					((unsigned char *) buffer)[to++] = c;

CHECK:SPACING: No space is necessary after a cast
#516: FILE: drivers/s390/char/sclp_vt220.c:375:
+					((unsigned char *) buffer)[to++] = 0x0d;

CHECK:BRACES: Unbalanced braces around else statement
#517: FILE: drivers/s390/char/sclp_vt220.c:376:
+				} else

CHECK:BRACES: Unbalanced braces around else statement
#520: FILE: drivers/s390/char/sclp_vt220.c:379:
+			} else

CHECK:SPACING: No space is necessary after a cast
#521: FILE: drivers/s390/char/sclp_vt220.c:380:
+				((unsigned char *) buffer)[to++] = c;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#526: FILE: drivers/s390/char/sclp_vt220.c:385:
+		return from;
+	} else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#527: FILE: drivers/s390/char/sclp_vt220.c:386:
+		if (from_user) {
[...]
+		else
[...]

CHECK:SPACING: No space is necessary after a cast
#528: FILE: drivers/s390/char/sclp_vt220.c:387:
+			if (copy_from_user(buffer, (void *) msg, count) != 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#531: FILE: drivers/s390/char/sclp_vt220.c:390:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#532: FILE: drivers/s390/char/sclp_vt220.c:391:
+			memcpy(buffer, (const void *) msg, count);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#548: FILE: drivers/s390/char/sclp_vt220.c:407:
+#define BUFFER_MAX_DELAY	HZ/2
                         	  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#548: FILE: drivers/s390/char/sclp_vt220.c:407:
+#define BUFFER_MAX_DELAY	HZ/2

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: drivers/s390/char/sclp_vt220.c:409:
+/* $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sclp_vt220_current_request"
#577: FILE: drivers/s390/char/sclp_vt220.c:436:
+		if (sclp_vt220_current_request == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: drivers/s390/char/sclp_vt220.c:444:
+					wait_event(sclp_vt220_waitq,
+						!list_empty(&sclp_vt220_empty));

CHECK:SPACING: No space is necessary after a cast
#588: FILE: drivers/s390/char/sclp_vt220.c:447:
+			page = (void *) sclp_vt220_empty.next;

CHECK:SPACING: No space is necessary after a cast
#589: FILE: drivers/s390/char/sclp_vt220.c:448:
+			list_del((struct list_head *) page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: drivers/s390/char/sclp_vt220.c:454:
+		written = sclp_vt220_add_msg(sclp_vt220_current_request,
+				buf, count, from_user, convertlf);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sclp_vt220_current_request"
#612: FILE: drivers/s390/char/sclp_vt220.c:471:
+	if (sclp_vt220_current_request != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sclp_vt220_tty"
#650: FILE: drivers/s390/char/sclp_vt220.c:509:
+	if (sclp_vt220_tty == NULL)

CHECK:SPACING: No space is necessary after a cast
#653: FILE: drivers/s390/char/sclp_vt220.c:512:
+	buffer = (char *) ((addr_t) evbuf + sizeof(struct evbuf_header));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#666: FILE: drivers/s390/char/sclp_vt220.c:525:
+		 * for the buffer to be emptied. */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#683: FILE: drivers/s390/char/sclp_vt220.c:542:
+sclp_vt220_open(struct tty_struct *tty, struct file *filp)
                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#695: FILE: drivers/s390/char/sclp_vt220.c:554:
+sclp_vt220_close(struct tty_struct *tty, struct file *filp)
                                                       ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: drivers/s390/char/sclp_vt220.c:579:
+ * series of characters to the tty device using put_char().  $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sclp_vt220_current_request"
#746: FILE: drivers/s390/char/sclp_vt220.c:605:
+	if (sclp_vt220_current_request != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sclp_vt220_current_request"
#767: FILE: drivers/s390/char/sclp_vt220.c:626:
+	if (sclp_vt220_current_request != NULL)

CHECK:SPACING: No space is necessary after a cast
#832: FILE: drivers/s390/char/sclp_vt220.c:691:
+			page = (void *) get_zeroed_page(GFP_KERNEL | GFP_DMA);

CHECK:SPACING: No space is necessary after a cast
#835: FILE: drivers/s390/char/sclp_vt220.c:694:
+		list_add_tail((struct list_head *) page, &sclp_vt220_empty);

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#840: FILE: drivers/s390/char/sclp_vt220.c:699:
+static struct tty_operations sclp_vt220_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#861: FILE: drivers/s390/char/sclp_vt220.c:720:
+	 * symmetry between VM and LPAR systems regarding ttyS1. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#872: FILE: drivers/s390/char/sclp_vt220.c:731:
+		printk(KERN_ERR SCLP_VT220_PRINT_HEADER

WARNING:SPLIT_STRING: quoted string split across lines
#874: FILE: drivers/s390/char/sclp_vt220.c:733:
+		       "could not register tty - "
+		       "sclp_register returned %d\n", rc);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#892: FILE: drivers/s390/char/sclp_vt220.c:751:
+		printk(KERN_ERR SCLP_VT220_PRINT_HEADER

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: drivers/s390/char/sclp_vt220.c:753:
+		       "could not register tty - "
+		       "tty_register_driver returned %d\n", rc);

CHECK:SPACING: No space is necessary after a cast
#909: FILE: drivers/s390/char/sclp_vt220.c:768:
+	__sclp_vt220_write(0, (const unsigned char *) buf, count, 1, 1);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#932: FILE: drivers/s390/char/sclp_vt220.c:791:
+static struct console sclp_vt220_console =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 22 warnings, 54 checks, 893 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
