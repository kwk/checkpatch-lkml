WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#39: 
adds support for mount/umount propogation for autofs initiated 
                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#50: 
adds support for mount/umount propogation for autofs initiated operations,
                              ^^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#63: FILE: fs/namespace.c:208:
+	if (clone_flag) {
[...]
+		spin_unlock(&vfsmount_lock);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#69: FILE: fs/namespace.c:213:
+	} else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#84: FILE: fs/namespace.c:352:
+	int actual_refs=0;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#85: FILE: fs/namespace.c:353:
+	int minimum_refs=0;
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#143: FILE: fs/namespace.c:400:
+	if (mount_busy(mnt,2))
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/namespace.c:424:
+	if (mnt->mnt_parent != mnt &&
+		IS_MNT_SHARED(mnt->mnt_parent)) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#158: FILE: fs/namespace.c:426:
+		struct vfspnode *parent_pnode
+			= mnt->mnt_parent->mnt_pnode;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#159: FILE: fs/namespace.c:427:
+		BUG_ON(!parent_pnode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/namespace.c:429:
+		pnode_umount(parent_pnode,
+			mnt->mnt_mountpoint,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#165: FILE: fs/namespace.c:433:
+			BUG_ON(!mnt->mnt_pnode);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#352: FILE: fs/pnode.c:247:
+			ret = do_refcount_check(child_mnt, refcnt+1);
 			                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#373: FILE: fs/pnode.c:274:
+				if ((ret = vfs_busy(member_mnt, mntpt, root, mnt, refnt)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#381: FILE: fs/pnode.c:281:
+				if ((ret = vfs_busy(slave_mnt, mntpt, root, mnt, refcnt)))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#394: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#394: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#394: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#394: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#394: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169542.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 9 warnings, 6 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169542.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
