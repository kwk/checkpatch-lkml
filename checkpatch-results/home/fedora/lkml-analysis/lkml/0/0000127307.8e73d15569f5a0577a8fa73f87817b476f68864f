WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> removing that code and using just a fixed-size array of function pointers. 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#98: FILE: include/linux/notifier.h:36:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#98: FILE: include/linux/notifier.h:36:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#98: FILE: include/linux/notifier.h:36:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#117: FILE: include/linux/notifier.h:55:
+#define ATOMIC_INIT_NOTIFIER_HEAD(name) do {	\
+		init_MUTEX(&(name)->rwsem);	\
+		(name)->head = NULL;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#121: FILE: include/linux/notifier.h:59:
+#define BLOCKING_INIT_NOTIFIER_HEAD(name) do {	\
+		init_rwsem(&(name)->rwsem);	\
+		(name)->head = NULL;		\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#125: FILE: include/linux/notifier.h:63:
+#define RAW_INIT_NOTIFIER_HEAD(name) do {	\
+		(name)->head = NULL;		\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#129: FILE: include/linux/notifier.h:67:
+#define ATOMIC_NOTIFIER_HEAD(name)				\
+	struct atomic_notifier_head name = {			\
+		.sem = __SEMAPHORE_INITIALIZER((name).sem, 1),	\
+		.head = NULL }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#133: FILE: include/linux/notifier.h:71:
+#define BLOCKING_NOTIFIER_HEAD(name)				\
+	struct blocking_notifier_head name = {			\
+		.rwsem = __RWSEM_INITIALIZER((name).rwsem),	\
+		.head = NULL }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/notifier.h:81:
+extern int atomic_notifier_chain_register(struct atomic_notifier_head *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: include/linux/notifier.h:82:
+extern int atomic_notifier_chain_register(struct atomic_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/notifier.h:83:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blocking_notifier_head *' should also have an identifier name
#148: FILE: include/linux/notifier.h:83:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#148: FILE: include/linux/notifier.h:83:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: include/linux/notifier.h:84:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/linux/notifier.h:85:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct raw_notifier_head *' should also have an identifier name
#150: FILE: include/linux/notifier.h:85:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#150: FILE: include/linux/notifier.h:85:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: include/linux/notifier.h:86:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/notifier.h:88:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct atomic_notifier_head *' should also have an identifier name
#153: FILE: include/linux/notifier.h:88:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#153: FILE: include/linux/notifier.h:88:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/linux/notifier.h:89:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/notifier.h:90:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blocking_notifier_head *' should also have an identifier name
#155: FILE: include/linux/notifier.h:90:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#155: FILE: include/linux/notifier.h:90:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: include/linux/notifier.h:91:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/notifier.h:92:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct raw_notifier_head *' should also have an identifier name
#157: FILE: include/linux/notifier.h:92:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#157: FILE: include/linux/notifier.h:92:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/linux/notifier.h:93:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/notifier.h:95:
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct atomic_notifier_head *' should also have an identifier name
#160: FILE: include/linux/notifier.h:95:
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/notifier.h:96:
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *,
+		unsigned long val, void *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/notifier.h:97:
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blocking_notifier_head *' should also have an identifier name
#162: FILE: include/linux/notifier.h:97:
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: include/linux/notifier.h:98:
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *,
+		unsigned long val, void *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/notifier.h:99:
+extern int raw_notifier_call_chain(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct raw_notifier_head *' should also have an identifier name
#164: FILE: include/linux/notifier.h:99:
+extern int raw_notifier_call_chain(struct raw_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: include/linux/notifier.h:100:
+extern int raw_notifier_call_chain(struct raw_notifier_head *,
+		unsigned long val, void *v);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#171: FILE: include/linux/notifier.h:105:
+#define NOTIFY_BAD		(NOTIFY_STOP_MASK|0x0002)
                   		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: kernel/sys.c:101:
+ */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: kernel/sys.c:104:
+static int notifier_chain_register(struct notifier_block **nl,
+		struct notifier_block *n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: kernel/sys.c:117:
+static int notifier_chain_unregister(struct notifier_block **nl,
+		struct notifier_block *n)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: kernel/sys.c:128:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: kernel/sys.c:128:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: kernel/sys.c:130:
+static int notifier_call_chain(struct notifier_block **nl,
+		unsigned long val, void *v)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: kernel/sys.c:148:
+ */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: kernel/sys.c:162:
+int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#263: FILE: kernel/sys.c:172:
+EXPORT_SYMBOL(atomic_notifier_chain_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: kernel/sys.c:185:
+int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#287: FILE: kernel/sys.c:196:
+EXPORT_SYMBOL(atomic_notifier_chain_unregister);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/sys.c:216:
+int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#330: FILE: kernel/sys.c:226:
+EXPORT_SYMBOL(atomic_notifier_call_chain);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: kernel/sys.c:231:
+ */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: kernel/sys.c:245:
+int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#377: FILE: kernel/sys.c:255:
+EXPORT_SYMBOL(blocking_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: kernel/sys.c:268:
+int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#401: FILE: kernel/sys.c:278:
+EXPORT_SYMBOL(blocking_notifier_chain_unregister);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: kernel/sys.c:297:
+int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#439: FILE: kernel/sys.c:307:
+EXPORT_SYMBOL(blocking_notifier_call_chain);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/sys.c:312:
+ */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: kernel/sys.c:326:
+int raw_notifier_chain_register(struct raw_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#463: FILE: kernel/sys.c:331:
+EXPORT_SYMBOL(raw_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: kernel/sys.c:344:
+int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#481: FILE: kernel/sys.c:349:
+EXPORT_SYMBOL(raw_notifier_chain_unregister);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: kernel/sys.c:367:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: kernel/sys.c:367:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: kernel/sys.c:369:
+int raw_notifier_call_chain(struct raw_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#506: FILE: kernel/sys.c:374:
+EXPORT_SYMBOL(raw_notifier_call_chain);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127307.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 29 warnings, 35 checks, 435 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127307.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
