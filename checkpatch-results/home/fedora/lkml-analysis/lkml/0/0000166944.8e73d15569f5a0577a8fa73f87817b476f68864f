ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/drivers/Kconfig	2005-07-18 13:40:31.011368352 +0800

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/nodemanager/Kconfig:3:
+config NODEMANAGER
+	tristate "Node Manager"
+	help
+	Node addresses and ID"s are provided from user space and made
+	available to kernel components from this module.
+
+endmenu

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: drivers/nodemanager/nodemanager.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: drivers/nodemanager/nodemanager.c:11:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: drivers/nodemanager/nodemanager.c:16:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: drivers/nodemanager/nodemanager.c:19:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#108: FILE: drivers/nodemanager/nodemanager.c:24:
+/* TODO:
+   - generic addresses (IPV4/6)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: drivers/nodemanager/nodemanager.c:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#154: FILE: drivers/nodemanager/nodemanager.c:70:
+	ssize_t (*show)(struct node *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#154: FILE: drivers/nodemanager/nodemanager.c:70:
+	ssize_t (*show)(struct node *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#155: FILE: drivers/nodemanager/nodemanager.c:71:
+	ssize_t (*store)(struct node *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#155: FILE: drivers/nodemanager/nodemanager.c:71:
+	ssize_t (*store)(struct node *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#155: FILE: drivers/nodemanager/nodemanager.c:71:
+	ssize_t (*store)(struct node *, const char *, size_t);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#161: FILE: drivers/nodemanager/nodemanager.c:77:
+		    .ca_mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#169: FILE: drivers/nodemanager/nodemanager.c:85:
+		    .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#177: FILE: drivers/nodemanager/nodemanager.c:93:
+		    .ca_mode = S_IRUGO | S_IWUSR },

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#190: FILE: drivers/nodemanager/nodemanager.c:106:
+/* Hierarchy of four kinds of objects: clusters, cluster, nodes, node.
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#267: FILE: drivers/nodemanager/nodemanager.c:183:
+	spinlock_t		nd_lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: drivers/nodemanager/nodemanager.c:184:
+^Istruct config_item^Ind_item; $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#269: FILE: drivers/nodemanager/nodemanager.c:185:
+	char			nd_name[NODEMANAGER_MAX_NAME_LEN+1];
 	    			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: drivers/nodemanager/nodemanager.c:226:
+ * cluster references throughout where nodes are looked up */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#312: FILE: drivers/nodemanager/nodemanager.c:228:
+static struct cluster *single_cluster = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: drivers/nodemanager/nodemanager.c:230:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#345: FILE: drivers/nodemanager/nodemanager.c:261:
+		if (addr < node->nd_ipv4_address)
[...]
+		else if (addr > node->nd_ipv4_address)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#349: FILE: drivers/nodemanager/nodemanager.c:265:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret_p"
#355: FILE: drivers/nodemanager/nodemanager.c:271:
+	if (ret_p != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret_parent"
#357: FILE: drivers/nodemanager/nodemanager.c:273:
+	if (ret_parent != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!single_cluster"
#368: FILE: drivers/nodemanager/nodemanager.c:284:
+	if (nodeid >= NODEMANAGER_MAX_NODES || single_cluster == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cluster"
#387: FILE: drivers/nodemanager/nodemanager.c:303:
+	if (cluster == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: drivers/nodemanager/nodemanager.c:338:
+
+

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#435: FILE: drivers/nodemanager/nodemanager.c:351:
+	tmp = simple_strtoul(p, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#443: FILE: drivers/nodemanager/nodemanager.c:359:
+	if (cluster->cl_nodes[tmp])
[...]
+	else  {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#445: FILE: drivers/nodemanager/nodemanager.c:361:
+	else  {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#450: FILE: drivers/nodemanager/nodemanager.c:366:
+	if (p == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#484: FILE: drivers/nodemanager/nodemanager.c:400:
+	if (node_ip_tree_lookup(cluster, ipv4_addr, &p, &parent))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#486: FILE: drivers/nodemanager/nodemanager.c:402:
+	else {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#511: FILE: drivers/nodemanager/nodemanager.c:427:
+	tmp = simple_strtoul(p, &p, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: drivers/nodemanager/nodemanager.c:434:
+	 * when a different one is already set */

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: drivers/nodemanager/nodemanager.c:458:
+	int i;
+	for (i = 0; i < ARRAY_SIZE(node_attrs); i++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#546: FILE: drivers/nodemanager/nodemanager.c:462:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node_attr->store"
#573: FILE: drivers/nodemanager/nodemanager.c:489:
+	if (node_attr->store == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#600: FILE: drivers/nodemanager/nodemanager.c:516:
+	if (node == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ret"
#611: FILE: drivers/nodemanager/nodemanager.c:527:
+	if (ret == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cluster->cl_local_node == node->nd_nodeid'
#622: FILE: drivers/nodemanager/nodemanager.c:538:
+	if (cluster->cl_has_local &&
+	    (cluster->cl_local_node == node->nd_nodeid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#645: FILE: drivers/nodemanager/nodemanager.c:561:
+	struct node *node = to_node(item);
+	kfree(node);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ret"
#681: FILE: drivers/nodemanager/nodemanager.c:597:
+	if (ret == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#696: FILE: drivers/nodemanager/nodemanager.c:612:
+	BUG_ON(single_cluster != cluster);

WARNING:LINE_SPACING: Missing a blank line after declarations
#711: FILE: drivers/nodemanager/nodemanager.c:627:
+	struct cluster *cluster = to_cluster(item);
+	kfree(cluster->cl_group.default_groups);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#724: FILE: drivers/nodemanager/nodemanager.c:640:
+		printk(KERN_ERR "nodemanager: Registration returned %d\n", ret);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#744: FILE: drivers/nodemanager/nodemanager.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: drivers/nodemanager/nodemanager.h:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: drivers/nodemanager/nodemanager.h:16:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#762: FILE: drivers/nodemanager/nodemanager.h:19:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166944.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 23 warnings, 21 checks, 714 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166944.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
