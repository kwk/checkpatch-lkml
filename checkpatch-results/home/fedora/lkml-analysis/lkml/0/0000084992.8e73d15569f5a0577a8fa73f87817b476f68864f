WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#35: FILE: Makefile:4:
+EXTRAVERSION = .6
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#62: FILE: arch/alpha/kernel/setup.c:488:
+		struct cpu *p = kzalloc(sizeof(*p), GFP_KERNEL);
+		if (!p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#254: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#491: FILE: drivers/block/cciss.c:1196:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <CommandList_struct>
#495: FILE: drivers/block/cciss.c:1200:
+	CommandList_struct *cmd = rq->completion_data;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#501: FILE: drivers/block/cciss.c:1206:
+	if (cmd->Request.Type.Direction == XFER_READ)

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#501: FILE: drivers/block/cciss.c:1206:
+	if (cmd->Request.Type.Direction == XFER_READ)

CHECK:CAMELCASE: Avoid CamelCase: <Direction>
#501: FILE: drivers/block/cciss.c:1206:
+	if (cmd->Request.Type.Direction == XFER_READ)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#508: FILE: drivers/block/cciss.c:1213:
+	for(i=0; i<cmd->Header.SGList; i++) {
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#508: FILE: drivers/block/cciss.c:1213:
+	for(i=0; i<cmd->Header.SGList; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#508: FILE: drivers/block/cciss.c:1213:
+	for(i=0; i<cmd->Header.SGList; i++) {

CHECK:CAMELCASE: Avoid CamelCase: <Header>
#508: FILE: drivers/block/cciss.c:1213:
+	for(i=0; i<cmd->Header.SGList; i++) {

CHECK:CAMELCASE: Avoid CamelCase: <SGList>
#508: FILE: drivers/block/cciss.c:1213:
+	for(i=0; i<cmd->Header.SGList; i++) {

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#509: FILE: drivers/block/cciss.c:1214:
+		temp64.val32.lower = cmd->SG[i].Addr.lower;

CHECK:CAMELCASE: Avoid CamelCase: <Len>
#511: FILE: drivers/block/cciss.c:1216:
+		pci_unmap_page(h->pdev, temp64.val, cmd->SG[i].Len, ddir);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#517: FILE: drivers/block/cciss.c:1222:
+	printk("Done with %p\n", rq);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#522: FILE: drivers/block/cciss.c:1227:
+	cmd_free(h, cmd,1);
 	               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#608: FILE: drivers/char/tlclk.c:330:
+static DEVICE_ATTR(received_ref_clk3a, (S_IWUSR|S_IWGRP), NULL,
                                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#608: FILE: drivers/char/tlclk.c:330:
+static DEVICE_ATTR(received_ref_clk3a, (S_IWUSR|S_IWGRP), NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#617: FILE: drivers/char/tlclk.c:352:
+static DEVICE_ATTR(received_ref_clk3b, (S_IWUSR|S_IWGRP), NULL,
                                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#617: FILE: drivers/char/tlclk.c:352:
+static DEVICE_ATTR(received_ref_clk3b, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#626: FILE: drivers/char/tlclk.c:374:
+static DEVICE_ATTR(enable_clk3b_output, (S_IWUSR|S_IWGRP), NULL,
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#626: FILE: drivers/char/tlclk.c:374:
+static DEVICE_ATTR(enable_clk3b_output, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#635: FILE: drivers/char/tlclk.c:395:
+static DEVICE_ATTR(enable_clk3a_output, (S_IWUSR|S_IWGRP), NULL,
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#635: FILE: drivers/char/tlclk.c:395:
+static DEVICE_ATTR(enable_clk3a_output, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#644: FILE: drivers/char/tlclk.c:416:
+static DEVICE_ATTR(enable_clkb1_output, (S_IWUSR|S_IWGRP), NULL,
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#644: FILE: drivers/char/tlclk.c:416:
+static DEVICE_ATTR(enable_clkb1_output, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#653: FILE: drivers/char/tlclk.c:438:
+static DEVICE_ATTR(enable_clka1_output, (S_IWUSR|S_IWGRP), NULL,
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#653: FILE: drivers/char/tlclk.c:438:
+static DEVICE_ATTR(enable_clka1_output, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#662: FILE: drivers/char/tlclk.c:459:
+static DEVICE_ATTR(enable_clkb0_output, (S_IWUSR|S_IWGRP), NULL,
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#662: FILE: drivers/char/tlclk.c:459:
+static DEVICE_ATTR(enable_clkb0_output, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#671: FILE: drivers/char/tlclk.c:480:
+static DEVICE_ATTR(enable_clka0_output, (S_IWUSR|S_IWGRP), NULL,
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#671: FILE: drivers/char/tlclk.c:480:
+static DEVICE_ATTR(enable_clka0_output, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#680: FILE: drivers/char/tlclk.c:522:
+static DEVICE_ATTR(select_amcb2_transmit_clock, (S_IWUSR|S_IWGRP), NULL,
                                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#680: FILE: drivers/char/tlclk.c:522:
+static DEVICE_ATTR(select_amcb2_transmit_clock, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#689: FILE: drivers/char/tlclk.c:563:
+static DEVICE_ATTR(select_amcb1_transmit_clock, (S_IWUSR|S_IWGRP), NULL,
                                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#689: FILE: drivers/char/tlclk.c:563:
+static DEVICE_ATTR(select_amcb1_transmit_clock, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#698: FILE: drivers/char/tlclk.c:584:
+static DEVICE_ATTR(select_redundant_clock, (S_IWUSR|S_IWGRP), NULL,
                                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#698: FILE: drivers/char/tlclk.c:584:
+static DEVICE_ATTR(select_redundant_clock, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#707: FILE: drivers/char/tlclk.c:605:
+static DEVICE_ATTR(select_ref_frequency, (S_IWUSR|S_IWGRP), NULL,
                                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#707: FILE: drivers/char/tlclk.c:605:
+static DEVICE_ATTR(select_ref_frequency, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#716: FILE: drivers/char/tlclk.c:626:
+static DEVICE_ATTR(filter_select, (S_IWUSR|S_IWGRP), NULL, store_filter_select);
                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#716: FILE: drivers/char/tlclk.c:626:
+static DEVICE_ATTR(filter_select, (S_IWUSR|S_IWGRP), NULL, store_filter_select);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#725: FILE: drivers/char/tlclk.c:646:
+static DEVICE_ATTR(hardware_switching_mode, (S_IWUSR|S_IWGRP), NULL,
                                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#725: FILE: drivers/char/tlclk.c:646:
+static DEVICE_ATTR(hardware_switching_mode, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#734: FILE: drivers/char/tlclk.c:667:
+static DEVICE_ATTR(hardware_switching, (S_IWUSR|S_IWGRP), NULL,
                                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#734: FILE: drivers/char/tlclk.c:667:
+static DEVICE_ATTR(hardware_switching, (S_IWUSR|S_IWGRP), NULL,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#743: FILE: drivers/char/tlclk.c:687:
+static DEVICE_ATTR(refalign, (S_IWUSR|S_IWGRP), NULL, store_refalign);
                                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#743: FILE: drivers/char/tlclk.c:687:
+static DEVICE_ATTR(refalign, (S_IWUSR|S_IWGRP), NULL, store_refalign);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#752: FILE: drivers/char/tlclk.c:707:
+static DEVICE_ATTR(mode_select, (S_IWUSR|S_IWGRP), NULL, store_mode_select);
                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#752: FILE: drivers/char/tlclk.c:707:
+static DEVICE_ATTR(mode_select, (S_IWUSR|S_IWGRP), NULL, store_mode_select);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#761: FILE: drivers/char/tlclk.c:727:
+static DEVICE_ATTR(reset, (S_IWUSR|S_IWGRP), NULL, store_reset);
                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#761: FILE: drivers/char/tlclk.c:727:
+static DEVICE_ATTR(reset, (S_IWUSR|S_IWGRP), NULL, store_reset);

CHECK:CAMELCASE: Avoid CamelCase: <MD5Context>
#854: FILE: fs/cifs/cifsencrypt.c:85:
+	struct  MD5Context context;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iov == NULL'
#859: FILE: fs/cifs/cifsencrypt.c:88:
+	if((iov == NULL) || (signature == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'signature == NULL'
#859: FILE: fs/cifs/cifsencrypt.c:88:
+	if((iov == NULL) || (signature == NULL))

ERROR:SPACING: space required before the open parenthesis '('
#859: FILE: fs/cifs/cifsencrypt.c:88:
+	if((iov == NULL) || (signature == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iov"
#859: FILE: fs/cifs/cifsencrypt.c:88:
+	if((iov == NULL) || (signature == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!signature"
#859: FILE: fs/cifs/cifsencrypt.c:88:
+	if((iov == NULL) || (signature == NULL))

CHECK:CAMELCASE: Avoid CamelCase: <MD5Init>
#863: FILE: fs/cifs/cifsencrypt.c:91:
+	MD5Init(&context);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#864: FILE: fs/cifs/cifsencrypt.c:92:
+	MD5Update(&context,key,CIFS_SESSION_KEY_SIZE+16);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#864: FILE: fs/cifs/cifsencrypt.c:92:
+	MD5Update(&context,key,CIFS_SESSION_KEY_SIZE+16);
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#864: FILE: fs/cifs/cifsencrypt.c:92:
+	MD5Update(&context,key,CIFS_SESSION_KEY_SIZE+16);
 	                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <MD5Update>
#864: FILE: fs/cifs/cifsencrypt.c:92:
+	MD5Update(&context,key,CIFS_SESSION_KEY_SIZE+16);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#865: FILE: fs/cifs/cifsencrypt.c:93:
+	for(i=0;i<n_vec;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#865: FILE: fs/cifs/cifsencrypt.c:93:
+	for(i=0;i<n_vec;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#865: FILE: fs/cifs/cifsencrypt.c:93:
+	for(i=0;i<n_vec;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#865: FILE: fs/cifs/cifsencrypt.c:93:
+	for(i=0;i<n_vec;i++) {
 	               ^

ERROR:SPACING: space required before the open parenthesis '('
#865: FILE: fs/cifs/cifsencrypt.c:93:
+	for(i=0;i<n_vec;i++) {

ERROR:SPACING: space required before the open parenthesis '('
#866: FILE: fs/cifs/cifsencrypt.c:94:
+		if(iov[i].iov_base == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#866: FILE: fs/cifs/cifsencrypt.c:94:
+		if(iov[i].iov_base == NULL) {
[...]
+		} else if(iov[i].iov_len == 0)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iov[i].iov_base"
#866: FILE: fs/cifs/cifsencrypt.c:94:
+		if(iov[i].iov_base == NULL) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#867: FILE: fs/cifs/cifsencrypt.c:95:
+			cERROR(1,("null iovec entry"));
 			        ^

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#867: FILE: fs/cifs/cifsencrypt.c:95:
+			cERROR(1,("null iovec entry"));

ERROR:SPACING: space required before the open parenthesis '('
#869: FILE: fs/cifs/cifsencrypt.c:97:
+		} else if(iov[i].iov_len == 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#872: FILE: fs/cifs/cifsencrypt.c:100:
+		/* The first entry includes a length field (which does not get
+		   signed that occupies the first 4 bytes before the header */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#872: FILE: fs/cifs/cifsencrypt.c:100:
+		   signed that occupies the first 4 bytes before the header */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#873: FILE: fs/cifs/cifsencrypt.c:101:
+		if(i==0) {
 		    ^

ERROR:SPACING: space required before the open parenthesis '('
#873: FILE: fs/cifs/cifsencrypt.c:101:
+		if(i==0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#873: FILE: fs/cifs/cifsencrypt.c:101:
+		if(i==0) {
[...]
+		} else
[...]

ERROR:SPACING: space prohibited before that close parenthesis ')'
#874: FILE: fs/cifs/cifsencrypt.c:102:
+			if (iov[0].iov_len <= 8 ) /* cmd field at offset 9 */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#876: FILE: fs/cifs/cifsencrypt.c:104:
+			MD5Update(&context,iov[0].iov_base+4, iov[0].iov_len-4);
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#876: FILE: fs/cifs/cifsencrypt.c:104:
+			MD5Update(&context,iov[0].iov_base+4, iov[0].iov_len-4);
 			                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#876: FILE: fs/cifs/cifsencrypt.c:104:
+			MD5Update(&context,iov[0].iov_base+4, iov[0].iov_len-4);
 			                                                    ^

CHECK:BRACES: Unbalanced braces around else statement
#877: FILE: fs/cifs/cifsencrypt.c:105:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#878: FILE: fs/cifs/cifsencrypt.c:106:
+			MD5Update(&context,iov[i].iov_base, iov[i].iov_len);
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#882: FILE: fs/cifs/cifsencrypt.c:109:
+	MD5Final(signature,&context);
 	                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#882: FILE: fs/cifs/cifsencrypt.c:109:
+	MD5Final(signature,&context);
 	                   ^

CHECK:CAMELCASE: Avoid CamelCase: <MD5Final>
#882: FILE: fs/cifs/cifsencrypt.c:109:
+	MD5Final(signature,&context);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1042: FILE: include/asm-m32r/uaccess.h:81:
+^I^I: "1" (addr), "r" ((int)(size)), ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1119: FILE: include/asm-m32r/uaccess.h:172:
+	__get_user_check((x),(ptr),sizeof(*(ptr)))
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1119: FILE: include/asm-m32r/uaccess.h:172:
+	__get_user_check((x),(ptr),sizeof(*(ptr)))
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1129: FILE: include/asm-m32r/uaccess.h:191:
+	__put_user_check((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1129: FILE: include/asm-m32r/uaccess.h:191:
+	__put_user_check((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1138: FILE: include/asm-m32r/uaccess.h:214:
+	__get_user_nocheck((x),(ptr),sizeof(*(ptr)))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1138: FILE: include/asm-m32r/uaccess.h:214:
+	__get_user_nocheck((x),(ptr),sizeof(*(ptr)))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1140: FILE: include/asm-m32r/uaccess.h:216:
+#define __get_user_nocheck(x,ptr,size)					\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1140: FILE: include/asm-m32r/uaccess.h:216:
+#define __get_user_nocheck(x,ptr,size)					\
                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1140: FILE: include/asm-m32r/uaccess.h:216:
+#define __get_user_nocheck(x,ptr,size)					\
+({									\
+	long __gu_err = 0;						\
+	unsigned long __gu_val;						\
+	might_sleep();							\
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
+	__gu_err;							\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1145: FILE: include/asm-m32r/uaccess.h:221:
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1145: FILE: include/asm-m32r/uaccess.h:221:
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1145: FILE: include/asm-m32r/uaccess.h:221:
+	__get_user_size(__gu_val,(ptr),(size),__gu_err);		\
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1150: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1150: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1150: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
+({									\
+	long __gu_err = -EFAULT;					\
+	unsigned long __gu_val = 0;					\
+	const __typeof__(*(ptr)) __user *__gu_addr = (ptr);		\
+	might_sleep();							\
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
+	__gu_err;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#1150: FILE: include/asm-m32r/uaccess.h:226:
+#define __get_user_check(x,ptr,size)					\
+({									\
+	long __gu_err = -EFAULT;					\
+	unsigned long __gu_val = 0;					\
+	const __typeof__(*(ptr)) __user *__gu_addr = (ptr);		\
+	might_sleep();							\
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
+	__gu_err;							\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/asm-m32r/uaccess.h:232:
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/asm-m32r/uaccess.h:232:
+	if (access_ok(VERIFY_READ,__gu_addr,size))			\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1157: FILE: include/asm-m32r/uaccess.h:233:
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1157: FILE: include/asm-m32r/uaccess.h:233:
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1157: FILE: include/asm-m32r/uaccess.h:233:
+		__get_user_size(__gu_val,__gu_addr,(size),__gu_err);	\
 		                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1162: FILE: include/asm-m32r/uaccess.h:238:
+extern long __get_user_bad(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1164: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1164: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1164: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1164: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1164: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'retval' - possible side-effects?
#1164: FILE: include/asm-m32r/uaccess.h:240:
+#define __get_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\
+	}								\
+} while (0)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1168: FILE: include/asm-m32r/uaccess.h:244:
+	switch (size) {							\
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
+	  default: (x) = __get_user_bad();				\

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#1169: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1169: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1169: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1169: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1169: FILE: include/asm-m32r/uaccess.h:245:
+	  case 1: __get_user_asm(x,ptr,retval,"ub"); break;		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#1170: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1170: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1170: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1170: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1170: FILE: include/asm-m32r/uaccess.h:246:
+	  case 2: __get_user_asm(x,ptr,retval,"uh"); break;		\

WARNING:TABSTOP: Statements should start on a tabstop
#1171: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1171: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1171: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1171: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1171: FILE: include/asm-m32r/uaccess.h:247:
+	  case 4: __get_user_asm(x,ptr,retval,""); break;		\

WARNING:TABSTOP: Statements should start on a tabstop
#1172: FILE: include/asm-m32r/uaccess.h:248:
+	  default: (x) = __get_user_bad();				\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1172: FILE: include/asm-m32r/uaccess.h:248:
+	  default: (x) = __get_user_bad();				\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1176: FILE: include/asm-m32r/uaccess.h:252:
+#define __get_user_asm(x, addr, err, itype)				\
+	__asm__ __volatile__(						\
+		"	.fillinsn\n"					\
+		"1:	ld"itype" %1,@%2\n"				\
+		"	.fillinsn\n"					\
+		"2:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"	.balign 4\n"					\
+		"3:	ldi %0,%3\n"					\
+		"	seth r14,#high(2b)\n"				\
+		"	or3 r14,r14,#low(2b)\n"				\
+		"	jmp r14\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.balign 4\n"					\
+		"	.long 1b,3b\n"					\
+		".previous"						\
+		: "=&r" (err), "=&r" (x)				\
+		: "r" (addr), "i" (-EFAULT), "0" (err)			\
+		: "r14", "memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#1176: FILE: include/asm-m32r/uaccess.h:252:
+#define __get_user_asm(x, addr, err, itype)				\
+	__asm__ __volatile__(						\
+		"	.fillinsn\n"					\
+		"1:	ld"itype" %1,@%2\n"				\
+		"	.fillinsn\n"					\
+		"2:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"	.balign 4\n"					\
+		"3:	ldi %0,%3\n"					\
+		"	seth r14,#high(2b)\n"				\
+		"	or3 r14,r14,#low(2b)\n"				\
+		"	jmp r14\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.balign 4\n"					\
+		"	.long 1b,3b\n"					\
+		".previous"						\
+		: "=&r" (err), "=&r" (x)				\
+		: "r" (addr), "i" (-EFAULT), "0" (err)			\
+		: "r14", "memory")

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1179: FILE: include/asm-m32r/uaccess.h:255:
+		"1:	ld"itype" %1,@%2\n"				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1204: FILE: include/asm-m32r/uaccess.h:293:
+	__put_user_nocheck((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1204: FILE: include/asm-m32r/uaccess.h:293:
+	__put_user_nocheck((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))
 	                                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1240: FILE: include/asm-m32r/uaccess.h:316:
+#define __put_user_u64(x, addr, err)					\
+        __asm__ __volatile__(						\
+                "       .fillinsn\n"					\
+                "1:     st %L1,@%2\n"					\
+                "       .fillinsn\n"					\
+                "2:     st %H1,@(4,%2)\n"				\
+                "       .fillinsn\n"					\
+                "3:\n"							\
+                ".section .fixup,\"ax\"\n"				\
+                "       .balign 4\n"					\
+                "4:     ldi %0,%3\n"					\
+                "       seth r14,#high(3b)\n"				\
+                "       or3 r14,r14,#low(3b)\n"				\
+                "       jmp r14\n"					\
+                ".previous\n"						\
+                ".section __ex_table,\"a\"\n"				\
+                "       .balign 4\n"					\
+                "       .long 1b,4b\n"					\
+                "       .long 2b,4b\n"					\
+                ".previous"						\
+                : "=&r" (err)						\
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)		\
                 : "r14", "memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#1240: FILE: include/asm-m32r/uaccess.h:316:
+#define __put_user_u64(x, addr, err)					\
+        __asm__ __volatile__(						\
+                "       .fillinsn\n"					\
+                "1:     st %L1,@%2\n"					\
+                "       .fillinsn\n"					\
+                "2:     st %H1,@(4,%2)\n"				\
+                "       .fillinsn\n"					\
+                "3:\n"							\
+                ".section .fixup,\"ax\"\n"				\
+                "       .balign 4\n"					\
+                "4:     ldi %0,%3\n"					\
+                "       seth r14,#high(3b)\n"				\
+                "       or3 r14,r14,#low(3b)\n"				\
+                "       jmp r14\n"					\
+                ".previous\n"						\
+                ".section __ex_table,\"a\"\n"				\
+                "       .balign 4\n"					\
+                "       .long 1b,4b\n"					\
+                "       .long 2b,4b\n"					\
+                ".previous"						\
+                : "=&r" (err)						\
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)		\
                 : "r14", "memory")

ERROR:CODE_INDENT: code indent should use tabs where possible
#1241: FILE: include/asm-m32r/uaccess.h:317:
+        __asm__ __volatile__(^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: include/asm-m32r/uaccess.h:317:
+        __asm__ __volatile__(^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1242: FILE: include/asm-m32r/uaccess.h:318:
+                "       .fillinsn\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: include/asm-m32r/uaccess.h:318:
+                "       .fillinsn\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1243: FILE: include/asm-m32r/uaccess.h:319:
+                "1:     st %L1,@%2\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: include/asm-m32r/uaccess.h:319:
+                "1:     st %L1,@%2\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1244: FILE: include/asm-m32r/uaccess.h:320:
+                "       .fillinsn\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: include/asm-m32r/uaccess.h:320:
+                "       .fillinsn\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1245: FILE: include/asm-m32r/uaccess.h:321:
+                "2:     st %H1,@(4,%2)\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: include/asm-m32r/uaccess.h:321:
+                "2:     st %H1,@(4,%2)\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1246: FILE: include/asm-m32r/uaccess.h:322:
+                "       .fillinsn\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: include/asm-m32r/uaccess.h:322:
+                "       .fillinsn\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1247: FILE: include/asm-m32r/uaccess.h:323:
+                "3:\n"^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: include/asm-m32r/uaccess.h:323:
+                "3:\n"^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1248: FILE: include/asm-m32r/uaccess.h:324:
+                ".section .fixup,\"ax\"\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1248: FILE: include/asm-m32r/uaccess.h:324:
+                ".section .fixup,\"ax\"\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1249: FILE: include/asm-m32r/uaccess.h:325:
+                "       .balign 4\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: include/asm-m32r/uaccess.h:325:
+                "       .balign 4\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1250: FILE: include/asm-m32r/uaccess.h:326:
+                "4:     ldi %0,%3\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: include/asm-m32r/uaccess.h:326:
+                "4:     ldi %0,%3\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1251: FILE: include/asm-m32r/uaccess.h:327:
+                "       seth r14,#high(3b)\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: include/asm-m32r/uaccess.h:327:
+                "       seth r14,#high(3b)\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1252: FILE: include/asm-m32r/uaccess.h:328:
+                "       or3 r14,r14,#low(3b)\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: include/asm-m32r/uaccess.h:328:
+                "       or3 r14,r14,#low(3b)\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1253: FILE: include/asm-m32r/uaccess.h:329:
+                "       jmp r14\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: include/asm-m32r/uaccess.h:329:
+                "       jmp r14\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1254: FILE: include/asm-m32r/uaccess.h:330:
+                ".previous\n"^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: include/asm-m32r/uaccess.h:330:
+                ".previous\n"^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1255: FILE: include/asm-m32r/uaccess.h:331:
+                ".section __ex_table,\"a\"\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: include/asm-m32r/uaccess.h:331:
+                ".section __ex_table,\"a\"\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1256: FILE: include/asm-m32r/uaccess.h:332:
+                "       .balign 4\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1256: FILE: include/asm-m32r/uaccess.h:332:
+                "       .balign 4\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1257: FILE: include/asm-m32r/uaccess.h:333:
+                "       .long 1b,4b\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: include/asm-m32r/uaccess.h:333:
+                "       .long 1b,4b\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1258: FILE: include/asm-m32r/uaccess.h:334:
+                "       .long 2b,4b\n"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: include/asm-m32r/uaccess.h:334:
+                "       .long 2b,4b\n"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1259: FILE: include/asm-m32r/uaccess.h:335:
+                ".previous"^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: include/asm-m32r/uaccess.h:335:
+                ".previous"^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: include/asm-m32r/uaccess.h:336:
+                : "=&r" (err)^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: include/asm-m32r/uaccess.h:336:
+                : "=&r" (err)^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1261: FILE: include/asm-m32r/uaccess.h:337:
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: include/asm-m32r/uaccess.h:337:
+                : "r" (x), "r" (addr), "i" (-EFAULT), "0" (err)^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1278: FILE: include/asm-m32r/uaccess.h:368:
+extern void __put_user_bad(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1375: FILE: include/asm-m32r/uaccess.h:643:
+	__generic_copy_from_user((to),(from),(n));	\
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1375: FILE: include/asm-m32r/uaccess.h:643:
+	__generic_copy_from_user((to),(from),(n));	\
 	                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageBuddy>
#1416: FILE: include/linux/page-flags.h:325:
+#define __SetPageBuddy(page)	__set_bit(PG_buddy, &(page)->flags)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageBuddy>
#1417: FILE: include/linux/page-flags.h:326:
+#define __ClearPageBuddy(page)	__clear_bit(PG_buddy, &(page)->flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1430: FILE: include/net/ip.h:98:
+extern int		ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *));

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1545: FILE: mm/page_alloc.c:157:
+			1 << PG_buddy );

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1590: FILE: mm/page_alloc.c:288:
+		BUG_ON(page_count(page) != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1611: FILE: mm/page_alloc.c:371:
+			1 << PG_buddy ))))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1621: FILE: mm/page_alloc.c:530:
+			1 << PG_buddy ))))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1742: FILE: net/bridge/br_netfilter.c:810:
+^I        br_nf_dev_queue_xmit);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1773: FILE: net/ipv4/ip_output.c:422:
+int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff*))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1781: FILE: net/ipv4/ip_output.c:674:
+EXPORT_SYMBOL(ip_fragment);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 89 errors, 53 warnings, 57 checks, 1334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
