WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
tcp_sendmsg:991: copy = -375, mss_now = 512, skb->len = 887, skb_tailroom(skb) = 521, seglen = 37. 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#73: FILE: net/ipv4/tcp.c:454:
+#define CHECK_TCP_RET() check_tcp_ret(err, __FILE__, __LINE__, __FUNCTION__)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#75: FILE: net/ipv4/tcp.c:456:
+void check_tcp_ret(int ret, char *file, int line, char *func) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: net/ipv4/tcp.c:457:
+  if(ret < 0) {$

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: net/ipv4/tcp.c:457:
+  if(ret < 0) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#77: FILE: net/ipv4/tcp.c:458:
+	switch(-ret) {
+	  case EAGAIN: case EBADF: case EPIPE: case ENOSPC: case EIO: case ECONNRESET:
+	  case EINTR: case ETIMEDOUT: case EFAULT: case EINVAL: case EMSGSIZE: case ENOMEM:
+	  case ENOBUFS: case ENOTCONN: case ECONNREFUSED: case ERESTARTSYS: case EHOSTUNREACH:
[...]
+	  default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: net/ipv4/tcp.c:458:
+	switch(-ret) {

WARNING:TABSTOP: Statements should start on a tabstop
#78: FILE: net/ipv4/tcp.c:459:
+	  case EAGAIN: case EBADF: case EPIPE: case ENOSPC: case EIO: case ECONNRESET:

WARNING:TABSTOP: Statements should start on a tabstop
#79: FILE: net/ipv4/tcp.c:460:
+	  case EINTR: case ETIMEDOUT: case EFAULT: case EINVAL: case EMSGSIZE: case ENOMEM:

WARNING:TABSTOP: Statements should start on a tabstop
#80: FILE: net/ipv4/tcp.c:461:
+	  case ENOBUFS: case ENOTCONN: case ECONNREFUSED: case ERESTARTSYS: case EHOSTUNREACH:

WARNING:TABSTOP: Statements should start on a tabstop
#83: FILE: net/ipv4/tcp.c:464:
+	  default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#84: FILE: net/ipv4/tcp.c:465:
+		printk(KERN_ERR "%s:%d:%s: err is unexpectedly %d.\n", file, line, func, ret);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: net/ipv4/tcp.c:467:
+  }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#89: FILE: net/ipv4/tcp.c:470:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#97: FILE: net/ipv4/tcp.c:903:
+	if(timeo < 0)
+	  printk(KERN_ERR "wait_for_tcp_memory: timeo == %ld\n", timeo);

ERROR:SPACING: space required before the open parenthesis '('
#97: FILE: net/ipv4/tcp.c:903:
+	if(timeo < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#98: FILE: net/ipv4/tcp.c:904:
+	  printk(KERN_ERR "wait_for_tcp_memory: timeo == %ld\n", timeo);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#105: FILE: net/ipv4/tcp.c:937:
 	if ((1 << sk->state) & ~(TCPF_ESTABLISHED | TCPF_CLOSE_WAIT))
+	  if((err = wait_for_tcp_connect(sk, flags, &timeo)) != 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#108: FILE: net/ipv4/tcp.c:938:
+	  if((err = wait_for_tcp_connect(sk, flags, &timeo)) != 0) {

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: net/ipv4/tcp.c:938:
+	  if((err = wait_for_tcp_connect(sk, flags, &timeo)) != 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#108: FILE: net/ipv4/tcp.c:938:
+	  if((err = wait_for_tcp_connect(sk, flags, &timeo)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TABSTOP: Statements should start on a tabstop
#111: FILE: net/ipv4/tcp.c:941:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#121: FILE: net/ipv4/tcp.c:962:
+			if (err) {
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

WARNING:TABSTOP: Statements should start on a tabstop
#122: FILE: net/ipv4/tcp.c:963:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

ERROR:SPACING: space required before the open parenthesis '('
#122: FILE: net/ipv4/tcp.c:963:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#122: FILE: net/ipv4/tcp.c:963:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#122: FILE: net/ipv4/tcp.c:963:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

WARNING:TABSTOP: Statements should start on a tabstop
#123: FILE: net/ipv4/tcp.c:964:
+			  else CHECK_TCP_RET();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#123: FILE: net/ipv4/tcp.c:964:
+			  else CHECK_TCP_RET();

WARNING:TABSTOP: Statements should start on a tabstop
#124: FILE: net/ipv4/tcp.c:965:
+			  goto do_fault2;

WARNING:LONG_LINE: line length of 228 exceeds 100 columns
#142: FILE: net/ipv4/tcp.c:991:
+					if(copy < 0) printk(KERN_ERR "tcp_sendmsg:%d: copy = %d, mss_now = %d, skb->len = %d, skb_tailroom(skb) = %d, seglen = %d.\n", __LINE__ copy, mss_now, skb->len, skb_tailroom(skb), seglen);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#142: FILE: net/ipv4/tcp.c:991:
+					if(copy < 0) printk(KERN_ERR "tcp_sendmsg:%d: copy = %d, mss_now = %d, skb->len = %d, skb_tailroom(skb) = %d, seglen = %d.\n", __LINE__ copy, mss_now, skb->len, skb_tailroom(skb), seglen);

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: net/ipv4/tcp.c:991:
+					if(copy < 0) printk(KERN_ERR "tcp_sendmsg:%d: copy = %d, mss_now = %d, skb->len = %d, skb_tailroom(skb) = %d, seglen = %d.\n", __LINE__ copy, mss_now, skb->len, skb_tailroom(skb), seglen);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#142: FILE: net/ipv4/tcp.c:991:
+					if(copy < 0) printk(KERN_ERR "tcp_sendmsg:%d: copy = %d, mss_now = %d, skb->len = %d, skb_tailroom(skb) = %d, seglen = %d.\n", __LINE__ copy, mss_now, skb->len, skb_tailroom(skb), seglen);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#168: FILE: net/ipv4/tcp.c:1108:
+			if (err) {
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

WARNING:TABSTOP: Statements should start on a tabstop
#169: FILE: net/ipv4/tcp.c:1109:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: net/ipv4/tcp.c:1109:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#169: FILE: net/ipv4/tcp.c:1109:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#169: FILE: net/ipv4/tcp.c:1109:
+			  if(copied) check_tcp_ret(copied, __FILE__, __LINE__, __FUNCTION__);

WARNING:TABSTOP: Statements should start on a tabstop
#170: FILE: net/ipv4/tcp.c:1110:
+			  else CHECK_TCP_RET();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#170: FILE: net/ipv4/tcp.c:1110:
+			  else CHECK_TCP_RET();

WARNING:TABSTOP: Statements should start on a tabstop
#171: FILE: net/ipv4/tcp.c:1111:
+			  goto do_fault;

CHECK:BRACES: braces {} should be used on all arms of this statement
#222: FILE: net/ipv4/tcp.c:1163:
+	if (copied) {
[...]
 	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#233: FILE: net/ipv4/tcp.c:1327:
+	if(timeo < 0)
+	  printk(KERN_ERR "tcp_data_wait: timeo == %ld.\n", timeo);

ERROR:SPACING: space required before the open parenthesis '('
#233: FILE: net/ipv4/tcp.c:1327:
+	if(timeo < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#234: FILE: net/ipv4/tcp.c:1328:
+	  printk(KERN_ERR "tcp_data_wait: timeo == %ld.\n", timeo);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#243: FILE: net/ipv4/tcp.c:2072:
+		if (signal_pending(current)) {
+  		    CHECK_TCP_RET();

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: net/ipv4/tcp.c:2073:
+  ^I^I    CHECK_TCP_RET();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: net/ipv4/tcp.c:2073:
+  ^I^I    CHECK_TCP_RET();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: net/ipv4/tcp.c:2073:
+  ^I^I    CHECK_TCP_RET();$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000557309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 31 warnings, 2 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000557309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
