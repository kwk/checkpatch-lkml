WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Here is the current slablru patch.  This version improves the locking as per

WARNING:TYPO_SPELLING: 'Varients' may be misspelled - perhaps 'Variants'?
#34: 
Varients of this patch have been around since the begining of June.  It was
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#34: 
Varients of this patch have been around since the begining of June.  It was
                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'varient' may be misspelled - perhaps 'variant'?
#36: 
varient is available for 2.5.30.  
^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#	           ChangeSet	1.667   -> 1.670  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#	         fs/dcache.c	1.20    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#	          fs/dquot.c	1.18    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#	         mm/vmscan.c	1.60    -> 1.63   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#	           mm/slab.c	1.17    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#	include/linux/slab.h	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#	include/linux/dcache.h	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#	          fs/inode.c	1.36    -> 1.37   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# 02/08/04	patch@oscar.et.ca	1.668

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# slablru_19-1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# 02/08/04	patch@oscar.et.ca	1.669

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# slablru_19-2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# 02/08/04	ed@oscar.et.ca	1.670

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# fix syntax error

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#71: 
--- a/fs/dcache.c	Sun Aug  4 20:39:29 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: fs/dcache.c:539:
+ * more memory. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: fs/dcache.c:1274:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: fs/dcache.c:1276:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#180: FILE: fs/inode.c:675:
+	for(; goal; goal--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#262: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_pruner_t' should also have an identifier name
#262: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#263: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#264: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#264: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#265: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr)                 SetPageReferenced(virt_to_page(addr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#268: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#271: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#271: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#271: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#274: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#274: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#274: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#277: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#277: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#277: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: mm/slab.c:219:
+^Iint ^I^I^Icount;^I^I/* count used to trigger shrink */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: mm/slab.c:258:
+#define^IDFLGS_NONLRU^I0x000002UL^I/* there are reciently allocated $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#307: FILE: mm/slab.c:259:
+#define	DFLGS_NONLRU	0x000002UL	/* there are reciently allocated 
+					   non lru pages in this cache */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#307: FILE: mm/slab.c:259:
+					   non lru pages in this cache */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: mm/slab.c:391:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: mm/slab.c:391:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: mm/slab.c:392:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: mm/slab.c:395:
+void kmem_set_pruner(kmem_cache_t * cachep, kmem_pruner_t thepruner) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#324: FILE: mm/slab.c:395:
+void kmem_set_pruner(kmem_cache_t * cachep, kmem_pruner_t thepruner) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: mm/slab.c:400:
+/* $

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#336: FILE: mm/slab.c:407:
+	int ret =0;
 	        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: mm/slab.c:408:
+	int ret =0;
+	if (cachep->gfporder) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: mm/slab.c:410:
+		struct page *bpage = virt_to_page(slabp->s_mem - slabp->colouroff);
+		if (bpage != page)

CHECK:BRACES: braces {} should be used on all arms of this statement
#343: FILE: mm/slab.c:414:
+	if (cachep->pruner != NULL) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#343: FILE: mm/slab.c:414:
+	if (cachep->pruner != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: mm/slab.c:417:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#346: FILE: mm/slab.c:417:
+	} else 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: mm/slab.c:423:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: mm/slab.c:425:
+int kmem_do_prunes(int gfp_mask) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: mm/slab.c:430:
+        if (gfp_mask & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: mm/slab.c:430:
+        if (gfp_mask & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: mm/slab.c:431:
+                down(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: mm/slab.c:431:
+                down(&cache_chain_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: mm/slab.c:432:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: mm/slab.c:432:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: mm/slab.c:433:
+                if (down_trylock(&cache_chain_sem))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: mm/slab.c:433:
+                if (down_trylock(&cache_chain_sem))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: mm/slab.c:434:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: mm/slab.c:434:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: mm/slab.c:436:
+        list_for_each(p,&cache_chain) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: mm/slab.c:436:
+        list_for_each(p,&cache_chain) {$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#365: FILE: mm/slab.c:436:
+        list_for_each(p,&cache_chain) {
                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#365: FILE: mm/slab.c:436:
+        list_for_each(p,&cache_chain) {
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: mm/slab.c:437:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: mm/slab.c:437:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#367: FILE: mm/slab.c:438:
+		if (cachep->pruner != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#375: FILE: mm/slab.c:446:
+
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: mm/slab.c:448:
+        up(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: mm/slab.c:448:
+        up(&cache_chain_sem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: mm/slab.c:623:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: mm/slab.c:1033:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: mm/slab.c:1049:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: mm/slab.c:1049:
+ $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#454: FILE: mm/slab.c:1054:
+	return ret<<cachep->gfporder;
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: mm/slab.c:1057:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: mm/slab.c:1058:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: mm/slab.c:1061:
+ * pages since the last time we shrunk this cache. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: mm/slab.c:1072:
+^I ^Iif (!cachep->growing) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#472: FILE: mm/slab.c:1072:
+^I ^Iif (!cachep->growing) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: mm/slab.c:1075:
+				int nr = __kmem_cache_shrink_locked(cachep);
+				cachep->dflags &= ~DFLGS_NONLRU;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#477: FILE: mm/slab.c:1077:
+				return nr<<cachep->gfporder;
 				         ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#478: FILE: mm/slab.c:1078:
+				return nr<<cachep->gfporder;
+			} else {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#482: FILE: mm/slab.c:1082:
+				return 1<<cachep->gfporder;
 				        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: mm/slab.c:1085:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: mm/slab.c:1089:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#492: FILE: mm/slab.c:1092:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: mm/slab.c:1279:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: mm/slab.c:1280:
+^I * We want the pagemap_lru_lock, in UP spin locks to not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: mm/slab.c:1282:
+^I * optimizating for speed, we process if we do not get it. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: mm/slab.c:1304:
+^I^Iif (locked) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: mm/slab.c:1329:
+^I/* do not use kmem_freepages - we are not in the lru yet... */      $

CHECK:BRACES: braces {} should be used on all arms of this statement
#563: FILE: mm/slab.c:1396:
+	if (unlikely(cachep->gfporder)) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#564: FILE: mm/slab.c:1397:
+		void *objb = slabp->s_mem-slabp->colouroff;
 		                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#565: FILE: mm/slab.c:1398:
+		void *objb = slabp->s_mem-slabp->colouroff;
+		kmem_touch_page(objb);

CHECK:BRACES: Unbalanced braces around else statement
#566: FILE: mm/slab.c:1399:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#580: FILE: mm/vmscan.c:141:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: mm/vmscan.c:273:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: mm/vmscan.c:540:
+^I^I * and moves the page(s) to the inactive clean list. $

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#626: FILE: mm/vmscan.c:544:
+			UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#629: FILE: mm/vmscan.c:547:
+				if (nr_deactivated += kmem_shrink_slab(page)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: mm/vmscan.c:550:
+^I ^I^I^I^Ispin_lock(&pagemap_lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#632: FILE: mm/vmscan.c:550:
+^I ^I^I^I^Ispin_lock(&pagemap_lru_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: mm/vmscan.c:553:
+^I ^I^Ispin_lock(&pagemap_lru_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#635: FILE: mm/vmscan.c:553:
+^I ^I^Ispin_lock(&pagemap_lru_lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: mm/vmscan.c:559:
+^I^I/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#653: FILE: mm/vmscan.c:591:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441960.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 69 warnings, 24 checks, 581 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441960.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
