CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#60: FILE: include/asm-x86_64/mmzone.h:51:
+#define NODE_MIN_SIZE	(64*1024*1024)
                      	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#60: FILE: include/asm-x86_64/mmzone.h:51:
+#define NODE_MIN_SIZE	(64*1024*1024)
                      	        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/asm-x86_64/e820.h:49:
+extern unsigned long e820_hole_size(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: arch/x86_64/mm/numa.c:282:
+ * This function is used to find out if the start and end correspond to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: arch/x86_64/mm/numa.c:288:
+	if ((start < (MAX_DMA32_PFN << PAGE_SHIFT)) &&
+			(end >= (MAX_DMA32_PFN << PAGE_SHIFT)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/x86_64/mm/numa.c:295:
+ ^Iint i, big;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: arch/x86_64/mm/numa.c:295:
+ ^Iint i, big;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/x86_64/mm/numa.c:295:
+ ^Iint i, big;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: arch/x86_64/mm/numa.c:297:
+ ^Iunsigned long sz, old_sz;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: arch/x86_64/mm/numa.c:297:
+ ^Iunsigned long sz, old_sz;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/x86_64/mm/numa.c:297:
+ ^Iunsigned long sz, old_sz;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#134: FILE: arch/x86_64/mm/numa.c:319:
+		printk(KERN_INFO"Not enough memory for %d nodes.  Reducing "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#134: FILE: arch/x86_64/mm/numa.c:319:
+		printk(KERN_INFO"Not enough memory for %d nodes.  Reducing "

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#135: FILE: arch/x86_64/mm/numa.c:320:
+		printk(KERN_INFO"Not enough memory for %d nodes.  Reducing "
+				"the number of nodes\n", numa_fake);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#137: FILE: arch/x86_64/mm/numa.c:322:
+		printk(KERN_INFO"Number of fake nodes will be = %d\n", numa_fake);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#137: FILE: arch/x86_64/mm/numa.c:322:
+		printk(KERN_INFO"Number of fake nodes will be = %d\n", numa_fake);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#147: FILE: arch/x86_64/mm/numa.c:332:
+	printk(KERN_INFO"Fake node Size: %luMB hole_size: %luMB big nodes: %d\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#147: FILE: arch/x86_64/mm/numa.c:332:
+	printk(KERN_INFO"Fake node Size: %luMB hole_size: %luMB big nodes: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: arch/x86_64/mm/numa.c:333:
+	printk(KERN_INFO"Fake node Size: %luMB hole_size: %luMB big nodes: %d\n",
+			(sz >> 20), (hole_size >> 20), big);

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: arch/x86_64/mm/numa.c:345:
+ ^I^Istart = nodes[i].start = end;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: arch/x86_64/mm/numa.c:345:
+ ^I^Istart = nodes[i].start = end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/x86_64/mm/numa.c:345:
+ ^I^Istart = nodes[i].start = end;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#161: FILE: arch/x86_64/mm/numa.c:345:
+ 		start = nodes[i].start = end;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/x86_64/mm/numa.c:350:
+ ^I^I^Isz = max_addr - start;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: arch/x86_64/mm/numa.c:350:
+ ^I^I^Isz = max_addr - start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/x86_64/mm/numa.c:350:
+ ^I^I^Isz = max_addr - start;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/x86_64/mm/numa.c:351:
+ ^I^Iend = nodes[i].start + sz;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: arch/x86_64/mm/numa.c:351:
+ ^I^Iend = nodes[i].start + sz;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/x86_64/mm/numa.c:351:
+ ^I^Iend = nodes[i].start + sz;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: arch/x86_64/kernel/e820.c:206:
+		    ei->addr+ei->size <= start ||
 		            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 14 warnings, 10 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
