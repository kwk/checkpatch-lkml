WARNING:TYPO_SPELLING: 'ths' may be misspelled - perhaps 'the'?
#50: 
need ths CONFIG_BLK_DEV_RAM_LZMA build option to make use of lzma
     ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#70: FILE: init/do_mounts.h:94:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#102: FILE: init/do_mounts_rd.c:31:
 
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: init/do_mounts_rd.c:51:
+ * ^Icompressed image formats (gzip, lzma)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#167: FILE: init/do_mounts_rd.c:96:
+		printk(KERN_NOTICE

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: init/do_mounts_rd.c:102:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#188: FILE: init/do_mounts_rd.c:178:
+	switch (nblocks) {
+		case CRAMDISK_LZMA :     /* lzma image found */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#189: FILE: init/do_mounts_rd.c:179:
+		case CRAMDISK_LZMA :     /* lzma image found */
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#197: FILE: init/do_mounts_rd.c:184:
+			printk(KERN_ALERT "RAMDISK: you don't have "

WARNING:SPLIT_STRING: quoted string split across lines
#198: FILE: init/do_mounts_rd.c:185:
+			printk(KERN_ALERT "RAMDISK: you don't have "
+					"CONFIG_BLK_DEV_RAM_LZMA\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#202: FILE: init/do_mounts_rd.c:188:
+		case CRAMDISK_GZ :      /* gzip image found */
 		                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#207: FILE: init/do_mounts_rd.c:193:
+			printk(KERN_ALERT "RAMDISK: you don't have "

WARNING:SPLIT_STRING: quoted string split across lines
#208: FILE: init/do_mounts_rd.c:194:
+			printk(KERN_ALERT "RAMDISK: you don't have "
+					"CONFIG_BLK_DEV_RAM_GZ\n");

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#211: FILE: init/do_mounts_rd.c:197:
+		default :
 		        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#222: FILE: init/do_mounts_rd.c:245:
+	printk(KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into"

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#223: FILE: init/do_mounts_rd.c:246:
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,
 		               	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#223: FILE: init/do_mounts_rd.c:246:
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,
 		               	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#223: FILE: init/do_mounts_rd.c:246:
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,
 		               	                                ^

WARNING:SPLIT_STRING: quoted string split across lines
#223: FILE: init/do_mounts_rd.c:246:
+	printk(KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into"
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,

WARNING:MISSING_SPACE: break quoted strings at a space character
#223: FILE: init/do_mounts_rd.c:246:
+	printk(KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into"
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#224: FILE: init/do_mounts_rd.c:247:
+		nblocks>devblocks ? "s" : "");
 		       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#273: FILE: init/do_mounts_rd.c:459:
+ * it's input data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#277: FILE: init/do_mounts_rd.c:463:
+ * need extra memory for the dictionary, the default size is 8 MB */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: init/do_mounts_rd.c:464:
+#define _LZMA_OUT_READ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#285: FILE: init/do_mounts_rd.c:471:
+typedef struct _cbuffer

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#286: FILE: init/do_mounts_rd.c:472:
+typedef struct _cbuffer
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <ILzmaInCallback>
#287: FILE: init/do_mounts_rd.c:473:
+	ILzmaInCallback in_callback;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: init/do_mounts_rd.c:476:
+} cbuffer; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: init/do_mounts_rd.c:477:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: init/do_mounts_rd.c:477:
+  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: init/do_mounts_rd.c:484:
+	read_size = sys_read(bo->lzma_read_fd, bo->buffer,
+		_LZMA_READ_COMPRESSED_BUFFER_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: init/do_mounts_rd.c:500:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#316: FILE: init/do_mounts_rd.c:502:
+		printk(KERN_ERR "RAMDISK: ran out of compressed data\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: init/do_mounts_rd.c:509:
+		unsigned char b;
+		if (sys_read(in_fd, &b, 1) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#324: FILE: init/do_mounts_rd.c:510:
+			printk(KERN_ERR "RAMDISK: ran out of compressed "

WARNING:SPLIT_STRING: quoted string split across lines
#325: FILE: init/do_mounts_rd.c:511:
+			printk(KERN_ERR "RAMDISK: ran out of compressed "
+				"data\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: init/do_mounts_rd.c:516:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: init/do_mounts_rd.c:519:
+		unsigned char b;
+		if (sys_read(in_fd, &b, 1) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#334: FILE: init/do_mounts_rd.c:520:
+			printk(KERN_ERR "RAMDISK: ran out of compressed "

WARNING:SPLIT_STRING: quoted string split across lines
#335: FILE: init/do_mounts_rd.c:521:
+			printk(KERN_ERR "RAMDISK: ran out of compressed "
+				"data\n");

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#338: FILE: init/do_mounts_rd.c:524:
+		if (b!=0) {
 		     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#339: FILE: init/do_mounts_rd.c:525:
+			printk(KERN_ERR "RAMDISK: either this is not a lzma"

WARNING:SPLIT_STRING: quoted string split across lines
#340: FILE: init/do_mounts_rd.c:526:
+			printk(KERN_ERR "RAMDISK: either this is not a lzma"
+				"compressed ramdisk or it's bigger 4 GB\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#340: FILE: init/do_mounts_rd.c:526:
+			printk(KERN_ERR "RAMDISK: either this is not a lzma"
+				"compressed ramdisk or it's bigger 4 GB\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: init/do_mounts_rd.c:530:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: init/do_mounts_rd.c:532:
+^Iif (prop0 >= (9*5*5)) { $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#346: FILE: init/do_mounts_rd.c:532:
+	if (prop0 >= (9*5*5)) { 
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#346: FILE: init/do_mounts_rd.c:532:
+	if (prop0 >= (9*5*5)) { 
 	                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#347: FILE: init/do_mounts_rd.c:533:
+		printk(KERN_ERR "RAMDISK: lzma Properties error\n");

CHECK:CAMELCASE: Avoid CamelCase: <CProb>
#357: FILE: init/do_mounts_rd.c:543:
+		* sizeof(CProb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: init/do_mounts_rd.c:545:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: init/do_mounts_rd.c:547:
+^Iif (lzma_internal == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: init/do_mounts_rd.c:548:
+		printk(KERN_ERR "RAMDISK: failed to get memory "

WARNING:SPLIT_STRING: quoted string split across lines
#363: FILE: init/do_mounts_rd.c:549:
+		printk(KERN_ERR "RAMDISK: failed to get memory "
+			"for lzma_internal\n");

CHECK:CAMELCASE: Avoid CamelCase: <Read>
#367: FILE: init/do_mounts_rd.c:553:
+	bo.in_callback.Read = lzma_read_in;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: init/do_mounts_rd.c:556:
+^Iif (bo.buffer == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#371: FILE: init/do_mounts_rd.c:557:
+		printk(KERN_ERR "RAMDISK: failed to get memory "

WARNING:SPLIT_STRING: quoted string split across lines
#372: FILE: init/do_mounts_rd.c:558:
+		printk(KERN_ERR "RAMDISK: failed to get memory "
+			"for bo.buffer\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#377: FILE: init/do_mounts_rd.c:563:
+	for (i = 0; i < 4; i++) {
+		dictionary_size += (u32)(properties[1 + i]) << (i * 8);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: init/do_mounts_rd.c:571:
+^Iif (dictionary == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#386: FILE: init/do_mounts_rd.c:572:
+		printk(KERN_ERR "RAMDISK: failed to get memory "

WARNING:SPLIT_STRING: quoted string split across lines
#387: FILE: init/do_mounts_rd.c:573:
+		printk(KERN_ERR "RAMDISK: failed to get memory "
+			"for dictionary\n");

CHECK:CAMELCASE: Avoid CamelCase: <LzmaDecoderInit>
#391: FILE: init/do_mounts_rd.c:577:
+	res = LzmaDecoderInit((unsigned char *)lzma_internal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: init/do_mounts_rd.c:578:
+	res = LzmaDecoderInit((unsigned char *)lzma_internal,
+		lzma_internal_size,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: init/do_mounts_rd.c:584:
+^I^Iif (out_buffer == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#399: FILE: init/do_mounts_rd.c:585:
+			printk(KERN_ERR "RAMDISK: failed to get memory"

WARNING:SPLIT_STRING: quoted string split across lines
#400: FILE: init/do_mounts_rd.c:586:
+			printk(KERN_ERR "RAMDISK: failed to get memory"
+				"for out_buffer\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#400: FILE: init/do_mounts_rd.c:586:
+			printk(KERN_ERR "RAMDISK: failed to get memory"
+				"for out_buffer\n");

CHECK:CAMELCASE: Avoid CamelCase: <LzmaDecode>
#405: FILE: init/do_mounts_rd.c:591:
+			res = LzmaDecode((unsigned char *)lzma_internal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: init/do_mounts_rd.c:592:
+			res = LzmaDecode((unsigned char *)lzma_internal,
+				out_buffer, _LZMA_WRITE_BUFFER_SIZE,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#417: FILE: init/do_mounts_rd.c:603:
+				printk(KERN_ERR "can't write everything,"

WARNING:SPLIT_STRING: quoted string split across lines
#418: FILE: init/do_mounts_rd.c:604:
+				printk(KERN_ERR "can't write everything,"
+					"the ramdisk is too small\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: init/do_mounts_rd.c:620:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: drivers/block/Kconfig:413:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: lib/lzmadecode.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#488: FILE: lib/lzmadecode.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#489: FILE: lib/lzmadecode.h:2:
+/* 
+  LzmaDecode.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: lib/lzmadecode.h:11:
+  It means that you can select one of these two licenses and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: lib/lzmadecode.h:15:
+  Igor Pavlov, as the author of this code, expressly permits you to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: lib/lzmadecode.h:16:
+  statically or dynamically link your code (or bind by name) to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: lib/lzmadecode.h:17:
+  interfaces of this file without subjecting your linked code to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: lib/lzmadecode.h:18:
+  terms of the CPL or GNU LGPL. Any modifications or additions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: lib/lzmadecode.h:32:
+/* It can increase speed on some 32-bit CPUs, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#520: FILE: lib/lzmadecode.h:33:
+/* It can increase speed on some 32-bit CPUs, 
+   but memory usage will be doubled in that case */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#520: FILE: lib/lzmadecode.h:33:
+   but memory usage will be doubled in that case */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: lib/lzmadecode.h:35:
+#define _LZMA_LOC_OPT $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#536: FILE: lib/lzmadecode.h:49:
+typedef struct _ILzmaInCallback

CHECK:CAMELCASE: Avoid CamelCase: <_ILzmaInCallback>
#536: FILE: lib/lzmadecode.h:49:
+typedef struct _ILzmaInCallback

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#537: FILE: lib/lzmadecode.h:50:
+typedef struct _ILzmaInCallback
+{

CHECK:CAMELCASE: Avoid CamelCase: <bufferSize>
#538: FILE: lib/lzmadecode.h:51:
+	int (*Read)(void *object, unsigned char **buffer, u32 *bufferSize);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: lib/lzmadecode.h:58:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#546: FILE: lib/lzmadecode.h:59:
+/* 
+bufferSize = (LZMA_BASE_SIZE + (LZMA_LIT_SIZE << (lc + lp)))* sizeof(CProb)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: lib/lzmadecode.h:61:
+by default CProb is unsigned short, $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#553: FILE: lib/lzmadecode.h:66:
+int LzmaDecoderInit(

CHECK:CAMELCASE: Avoid CamelCase: <dictionarySize>
#556: FILE: lib/lzmadecode.h:69:
+	unsigned char *dictionary, u32 dictionarySize,

CHECK:CAMELCASE: Avoid CamelCase: <inCallback>
#558: FILE: lib/lzmadecode.h:71:
+	ILzmaInCallback *inCallback

CHECK:CAMELCASE: Avoid CamelCase: <inStream>
#560: FILE: lib/lzmadecode.h:73:
+	unsigned char *inStream, u32 inSize

CHECK:CAMELCASE: Avoid CamelCase: <inSize>
#560: FILE: lib/lzmadecode.h:73:
+	unsigned char *inStream, u32 inSize

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#565: FILE: lib/lzmadecode.h:78:
+int LzmaDecode(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: lib/lzmadecode.h:79:
+^Iunsigned char *buffer, $

CHECK:CAMELCASE: Avoid CamelCase: <outStream>
#576: FILE: lib/lzmadecode.h:89:
+	unsigned char *outStream, u32 outSize,

CHECK:CAMELCASE: Avoid CamelCase: <outSize>
#576: FILE: lib/lzmadecode.h:89:
+	unsigned char *outStream, u32 outSize,

CHECK:CAMELCASE: Avoid CamelCase: <outSizeProcessed>
#577: FILE: lib/lzmadecode.h:90:
+	u32 *outSizeProcessed);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#582: FILE: lib/lzmadecode.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#583: FILE: lib/lzmadecode.c:2:
+/*
+   LZMA Decoder (optimized for Speed version)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: lib/lzmadecode.c:10:
+It means that you can select one of these two licenses and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: lib/lzmadecode.c:14:
+Igor Pavlov, as the author of this Code, expressly permits you to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#596: FILE: lib/lzmadecode.c:15:
+statically or dynamically link your Code (or bind by name) to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: lib/lzmadecode.c:16:
+interfaces of this file without subjecting your linked Code to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#598: FILE: lib/lzmadecode.c:17:
+terms of the CPL or GNU LGPL. Any modifications or additions $

CHECK:CAMELCASE: Avoid CamelCase: <kNumTopBits>
#604: FILE: lib/lzmadecode.c:23:
+#define kNumTopBits 24

CHECK:CAMELCASE: Avoid CamelCase: <kTopValue>
#605: FILE: lib/lzmadecode.c:24:
+#define kTopValue ((u32)1 << kNumTopBits)

CHECK:CAMELCASE: Avoid CamelCase: <kNumBitModelTotalBits>
#607: FILE: lib/lzmadecode.c:26:
+#define kNumBitModelTotalBits 11

CHECK:CAMELCASE: Avoid CamelCase: <kBitModelTotal>
#608: FILE: lib/lzmadecode.c:27:
+#define kBitModelTotal (1 << kNumBitModelTotalBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#608: FILE: lib/lzmadecode.c:27:
+#define kBitModelTotal (1 << kNumBitModelTotalBits)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <kNumMoveBits>
#609: FILE: lib/lzmadecode.c:28:
+#define kNumMoveBits 5

CHECK:CAMELCASE: Avoid CamelCase: <Buffer>
#611: FILE: lib/lzmadecode.c:30:
+#define RC_READ_BYTE (*Buffer++)

CHECK:CAMELCASE: Avoid CamelCase: <Code>
#613: FILE: lib/lzmadecode.c:32:
+#define RC_INIT2 Code = 0; range = 0xFFFFFFFF; \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#613: FILE: lib/lzmadecode.c:32:
+#define RC_INIT2 Code = 0; range = 0xFFFFFFFF; \
+{ int i; for(i = 0; i < 5; i++) { RC_TEST; Code = (Code << 8) | RC_READ_BYTE; }}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:SPACING: space required before the open parenthesis '('
#614: FILE: lib/lzmadecode.c:33:
+{ int i; for(i = 0; i < 5; i++) { RC_TEST; Code = (Code << 8) | RC_READ_BYTE; }}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#618: FILE: lib/lzmadecode.c:37:
+#define RC_TEST { if (Buffer == buffer_lim) \
+	{ u32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \
+		buffer_lim = Buffer + size; if (size == 0) return LZMA_RESULT_DATA_ERROR; }}

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#619: FILE: lib/lzmadecode.c:38:
+	{ u32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <InCallback>
#619: FILE: lib/lzmadecode.c:38:
+	{ u32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#622: FILE: lib/lzmadecode.c:41:
+#define RC_INIT Buffer = buffer_lim = 0; RC_INIT2

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#626: FILE: lib/lzmadecode.c:45:
+#define RC_TEST { if (Buffer == buffer_lim) return LZMA_RESULT_DATA_ERROR; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#628: FILE: lib/lzmadecode.c:47:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; buffer_lim = buffer + bufferSize; RC_INIT2

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buffer' - possible side-effects?
#628: FILE: lib/lzmadecode.c:47:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; buffer_lim = buffer + bufferSize; RC_INIT2

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bufferSize' may be better as '(bufferSize)' to avoid precedence issues
#628: FILE: lib/lzmadecode.c:47:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; buffer_lim = buffer + bufferSize; RC_INIT2

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#632: FILE: lib/lzmadecode.c:51:
+#define RC_NORMALIZE if (range < kTopValue) { RC_TEST; range <<= 8; Code = (Code << 8) | RC_READ_BYTE; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#632: FILE: lib/lzmadecode.c:51:
+#define RC_NORMALIZE if (range < kTopValue) { RC_TEST; range <<= 8; Code = (Code << 8) | RC_READ_BYTE; }

CHECK:CAMELCASE: Avoid CamelCase: <IfBit0>
#634: FILE: lib/lzmadecode.c:53:
+#define IfBit0(p) RC_NORMALIZE; bound = (range >> kNumBitModelTotalBits) * *(p); if (Code < bound)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#634: FILE: lib/lzmadecode.c:53:
+#define IfBit0(p) RC_NORMALIZE; bound = (range >> kNumBitModelTotalBits) * *(p); if (Code < bound)

CHECK:CAMELCASE: Avoid CamelCase: <UpdateBit0>
#635: FILE: lib/lzmadecode.c:54:
+#define UpdateBit0(p) range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#635: FILE: lib/lzmadecode.c:54:
+#define UpdateBit0(p) range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#635: FILE: lib/lzmadecode.c:54:
+#define UpdateBit0(p) range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#635: FILE: lib/lzmadecode.c:54:
+#define UpdateBit0(p) range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <UpdateBit1>
#636: FILE: lib/lzmadecode.c:55:
+#define UpdateBit1(p) range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#636: FILE: lib/lzmadecode.c:55:
+#define UpdateBit1(p) range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#636: FILE: lib/lzmadecode.c:55:
+#define UpdateBit1(p) range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#636: FILE: lib/lzmadecode.c:55:
+#define UpdateBit1(p) range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#638: FILE: lib/lzmadecode.c:57:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+{ UpdateBit0(p); mi <<= 1; A0; } else \
+{ UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#638: FILE: lib/lzmadecode.c:57:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+{ UpdateBit0(p); mi <<= 1; A0; } else \
+{ UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mi' - possible side-effects?
#638: FILE: lib/lzmadecode.c:57:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+{ UpdateBit0(p); mi <<= 1; A0; } else \
+{ UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mi' may be better as '(mi)' to avoid precedence issues
#638: FILE: lib/lzmadecode.c:57:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+{ UpdateBit0(p); mi <<= 1; A0; } else \
+{ UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: lib/lzmadecode.c:59:
+{ UpdateBit1(p); mi = (mi + mi) + 1; A1; } $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: lib/lzmadecode.c:61:
+#define RC_GET_BIT(p, mi) RC_GET_BIT2(p, mi, ; , ;)               $

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#642: FILE: lib/lzmadecode.c:61:
+#define RC_GET_BIT(p, mi) RC_GET_BIT2(p, mi, ; , ;)               
                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <RangeDecoderBitTreeDecode>
#644: FILE: lib/lzmadecode.c:63:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \

CHECK:CAMELCASE: Avoid CamelCase: <numLevels>
#644: FILE: lib/lzmadecode.c:63:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'probs' may be better as '(probs)' to avoid precedence issues
#644: FILE: lib/lzmadecode.c:63:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \
+{ int i = numLevels; res = 1; \
+	do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
+	res -= (1 << numLevels); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'numLevels' - possible side-effects?
#644: FILE: lib/lzmadecode.c:63:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \
+{ int i = numLevels; res = 1; \
+	do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
+	res -= (1 << numLevels); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#644: FILE: lib/lzmadecode.c:63:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \
+{ int i = numLevels; res = 1; \
+	do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
+	res -= (1 << numLevels); }

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#646: FILE: lib/lzmadecode.c:65:
+	do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
 	           ^

ERROR:SPACING: space required before the open parenthesis '('
#646: FILE: lib/lzmadecode.c:65:
+	do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: lib/lzmadecode.c:68:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <kNumPosBitsMax>
#650: FILE: lib/lzmadecode.c:69:
+#define kNumPosBitsMax 4

CHECK:CAMELCASE: Avoid CamelCase: <kNumPosStatesMax>
#651: FILE: lib/lzmadecode.c:70:
+#define kNumPosStatesMax (1 << kNumPosBitsMax)

CHECK:BIT_MACRO: Prefer using the BIT macro
#651: FILE: lib/lzmadecode.c:70:
+#define kNumPosStatesMax (1 << kNumPosBitsMax)

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumLowBits>
#653: FILE: lib/lzmadecode.c:72:
+#define kLenNumLowBits 3

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumLowSymbols>
#654: FILE: lib/lzmadecode.c:73:
+#define kLenNumLowSymbols (1 << kLenNumLowBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#654: FILE: lib/lzmadecode.c:73:
+#define kLenNumLowSymbols (1 << kLenNumLowBits)

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumMidBits>
#655: FILE: lib/lzmadecode.c:74:
+#define kLenNumMidBits 3

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumMidSymbols>
#656: FILE: lib/lzmadecode.c:75:
+#define kLenNumMidSymbols (1 << kLenNumMidBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#656: FILE: lib/lzmadecode.c:75:
+#define kLenNumMidSymbols (1 << kLenNumMidBits)

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumHighBits>
#657: FILE: lib/lzmadecode.c:76:
+#define kLenNumHighBits 8

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumHighSymbols>
#658: FILE: lib/lzmadecode.c:77:
+#define kLenNumHighSymbols (1 << kLenNumHighBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#658: FILE: lib/lzmadecode.c:77:
+#define kLenNumHighSymbols (1 << kLenNumHighBits)

CHECK:CAMELCASE: Avoid CamelCase: <LenChoice>
#660: FILE: lib/lzmadecode.c:79:
+#define LenChoice 0

CHECK:CAMELCASE: Avoid CamelCase: <LenChoice2>
#661: FILE: lib/lzmadecode.c:80:
+#define LenChoice2 (LenChoice + 1)

CHECK:CAMELCASE: Avoid CamelCase: <LenLow>
#662: FILE: lib/lzmadecode.c:81:
+#define LenLow (LenChoice2 + 1)

CHECK:CAMELCASE: Avoid CamelCase: <LenMid>
#663: FILE: lib/lzmadecode.c:82:
+#define LenMid (LenLow + (kNumPosStatesMax << kLenNumLowBits))

CHECK:CAMELCASE: Avoid CamelCase: <LenHigh>
#664: FILE: lib/lzmadecode.c:83:
+#define LenHigh (LenMid + (kNumPosStatesMax << kLenNumMidBits))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: lib/lzmadecode.c:84:
+#define kNumLenProbs (LenHigh + kLenNumHighSymbols) $

CHECK:CAMELCASE: Avoid CamelCase: <kNumLenProbs>
#665: FILE: lib/lzmadecode.c:84:
+#define kNumLenProbs (LenHigh + kLenNumHighSymbols) 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#667: FILE: lib/lzmadecode.c:86:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <kNumStates>
#668: FILE: lib/lzmadecode.c:87:
+#define kNumStates 12

CHECK:CAMELCASE: Avoid CamelCase: <kNumLitStates>
#669: FILE: lib/lzmadecode.c:88:
+#define kNumLitStates 7

CHECK:CAMELCASE: Avoid CamelCase: <kStartPosModelIndex>
#671: FILE: lib/lzmadecode.c:90:
+#define kStartPosModelIndex 4

CHECK:CAMELCASE: Avoid CamelCase: <kEndPosModelIndex>
#672: FILE: lib/lzmadecode.c:91:
+#define kEndPosModelIndex 14

CHECK:CAMELCASE: Avoid CamelCase: <kNumFullDistances>
#673: FILE: lib/lzmadecode.c:92:
+#define kNumFullDistances (1 << (kEndPosModelIndex >> 1))

CHECK:CAMELCASE: Avoid CamelCase: <kNumPosSlotBits>
#675: FILE: lib/lzmadecode.c:94:
+#define kNumPosSlotBits 6

CHECK:CAMELCASE: Avoid CamelCase: <kNumLenToPosStates>
#676: FILE: lib/lzmadecode.c:95:
+#define kNumLenToPosStates 4

CHECK:CAMELCASE: Avoid CamelCase: <kNumAlignBits>
#678: FILE: lib/lzmadecode.c:97:
+#define kNumAlignBits 4

CHECK:CAMELCASE: Avoid CamelCase: <kAlignTableSize>
#679: FILE: lib/lzmadecode.c:98:
+#define kAlignTableSize (1 << kNumAlignBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#679: FILE: lib/lzmadecode.c:98:
+#define kAlignTableSize (1 << kNumAlignBits)

CHECK:CAMELCASE: Avoid CamelCase: <kMatchMinLen>
#681: FILE: lib/lzmadecode.c:100:
+#define kMatchMinLen 2

CHECK:CAMELCASE: Avoid CamelCase: <IsMatch>
#683: FILE: lib/lzmadecode.c:102:
+#define IsMatch 0

CHECK:CAMELCASE: Avoid CamelCase: <IsRep>
#684: FILE: lib/lzmadecode.c:103:
+#define IsRep (IsMatch + (kNumStates << kNumPosBitsMax))

CHECK:CAMELCASE: Avoid CamelCase: <IsRepG0>
#685: FILE: lib/lzmadecode.c:104:
+#define IsRepG0 (IsRep + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <IsRepG1>
#686: FILE: lib/lzmadecode.c:105:
+#define IsRepG1 (IsRepG0 + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <IsRepG2>
#687: FILE: lib/lzmadecode.c:106:
+#define IsRepG2 (IsRepG1 + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <IsRep0Long>
#688: FILE: lib/lzmadecode.c:107:
+#define IsRep0Long (IsRepG2 + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <PosSlot>
#689: FILE: lib/lzmadecode.c:108:
+#define PosSlot (IsRep0Long + (kNumStates << kNumPosBitsMax))

CHECK:CAMELCASE: Avoid CamelCase: <SpecPos>
#690: FILE: lib/lzmadecode.c:109:
+#define SpecPos (PosSlot + (kNumLenToPosStates << kNumPosSlotBits))

CHECK:CAMELCASE: Avoid CamelCase: <Align>
#691: FILE: lib/lzmadecode.c:110:
+#define Align (SpecPos + kNumFullDistances - kEndPosModelIndex)

CHECK:CAMELCASE: Avoid CamelCase: <LenCoder>
#692: FILE: lib/lzmadecode.c:111:
+#define LenCoder (Align + kAlignTableSize)

CHECK:CAMELCASE: Avoid CamelCase: <RepLenCoder>
#693: FILE: lib/lzmadecode.c:112:
+#define RepLenCoder (LenCoder + kNumLenProbs)

CHECK:CAMELCASE: Avoid CamelCase: <Literal>
#694: FILE: lib/lzmadecode.c:113:
+#define Literal (RepLenCoder + kNumLenProbs)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#702: FILE: lib/lzmadecode.c:121:
+typedef struct _LzmaVarState

CHECK:CAMELCASE: Avoid CamelCase: <_LzmaVarState>
#702: FILE: lib/lzmadecode.c:121:
+typedef struct _LzmaVarState

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#703: FILE: lib/lzmadecode.c:122:
+typedef struct _LzmaVarState
+{

CHECK:CAMELCASE: Avoid CamelCase: <Dictionary>
#711: FILE: lib/lzmadecode.c:130:
+	unsigned char *Dictionary;

CHECK:CAMELCASE: Avoid CamelCase: <GlobalPos>
#714: FILE: lib/lzmadecode.c:133:
+	u32 GlobalPos;

CHECK:CAMELCASE: Avoid CamelCase: <Reps>
#715: FILE: lib/lzmadecode.c:134:
+	u32 Reps[4];

CHECK:CAMELCASE: Avoid CamelCase: <State>
#719: FILE: lib/lzmadecode.c:138:
+	int State;

CHECK:CAMELCASE: Avoid CamelCase: <RemainLen>
#720: FILE: lib/lzmadecode.c:139:
+	int RemainLen;

CHECK:CAMELCASE: Avoid CamelCase: <TempDictionary>
#721: FILE: lib/lzmadecode.c:140:
+	unsigned char TempDictionary[4];

CHECK:CAMELCASE: Avoid CamelCase: <LzmaVarState>
#722: FILE: lib/lzmadecode.c:141:
+} LzmaVarState;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#724: FILE: lib/lzmadecode.c:143:
+int LzmaDecoderInit(

CHECK:CAMELCASE: Avoid CamelCase: <numProbs>
#741: FILE: lib/lzmadecode.c:160:
+	u32 numProbs = Literal + ((u32)LZMA_LIT_SIZE << (lc + lp));

WARNING:LINE_SPACING: Missing a blank line after declarations
#743: FILE: lib/lzmadecode.c:162:
+	u32 i;
+	if (bufferSize < numProbs * sizeof(CProb) + sizeof(LzmaVarState))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#749: FILE: lib/lzmadecode.c:168:
+	vs->Reps[0] = vs->Reps[1] = vs->Reps[2] = vs->Reps[3] = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: lib/lzmadecode.c:176:
+^I^Ip[i] = kBitModelTotal >> 1; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: lib/lzmadecode.c:194:
+int LzmaDecode(unsigned char *buffer, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: lib/lzmadecode.c:195:
+int LzmaDecode(unsigned char *buffer, 
+		unsigned char *outStream, u32 outSize,

CHECK:CAMELCASE: Avoid CamelCase: <previousByte>
#789: FILE: lib/lzmadecode.c:208:
+	unsigned char previousByte;

CHECK:CAMELCASE: Avoid CamelCase: <nowPos>
#792: FILE: lib/lzmadecode.c:211:
+	u32 nowPos = 0;

CHECK:CAMELCASE: Avoid CamelCase: <posStateMask>
#793: FILE: lib/lzmadecode.c:212:
+	u32 posStateMask = (1 << (vs->pb)) - 1;

CHECK:CAMELCASE: Avoid CamelCase: <literalPosMask>
#794: FILE: lib/lzmadecode.c:213:
+	u32 literalPosMask = (1 << (vs->lp)) - 1;

CHECK:CAMELCASE: Avoid CamelCase: <globalPos>
#797: FILE: lib/lzmadecode.c:216:
+	u32 globalPos = vs->GlobalPos;

CHECK:CAMELCASE: Avoid CamelCase: <dictionaryPos>
#801: FILE: lib/lzmadecode.c:220:
+	u32 dictionaryPos = vs->dictionary_pos;

CHECK:CAMELCASE: Avoid CamelCase: <tempDictionary>
#803: FILE: lib/lzmadecode.c:222:
+	unsigned char tempDictionary[4];

WARNING:LINE_SPACING: Missing a blank line after declarations
#804: FILE: lib/lzmadecode.c:223:
+	unsigned char tempDictionary[4];
+	if (dictionarySize == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#815: FILE: lib/lzmadecode.c:234:
+	while(len != 0 && nowPos < outSize) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#817: FILE: lib/lzmadecode.c:236:
+		u32 pos = dictionaryPos - rep0;
+		if (pos >= dictionarySize)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#819: FILE: lib/lzmadecode.c:238:
+		outStream[nowPos++] = dictionary[dictionaryPos] =

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#831: FILE: lib/lzmadecode.c:250:
+int LzmaDecode(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#864: FILE: lib/lzmadecode.c:283:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#873: FILE: lib/lzmadecode.c:292:
+	while(nowPos < outSize) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#876: FILE: lib/lzmadecode.c:295:
+		int posState = (int)(

CHECK:CAMELCASE: Avoid CamelCase: <posState>
#876: FILE: lib/lzmadecode.c:295:
+		int posState = (int)(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: lib/lzmadecode.c:296:
+^I^I^I^I(nowPos $

WARNING:LINE_SPACING: Missing a blank line after declarations
#888: FILE: lib/lzmadecode.c:307:
+			int symbol = 1;
+			UpdateBit0(prob)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: lib/lzmadecode.c:308:
+^I^I^I^Iprob = p + Literal + (LZMA_LIT_SIZE * $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#890: FILE: lib/lzmadecode.c:309:
+					(((

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: lib/lzmadecode.c:310:
+^I^I^I^I^I   (nowPos $

CHECK:CAMELCASE: Avoid CamelCase: <matchByte>
#899: FILE: lib/lzmadecode.c:318:
+				int matchByte;

WARNING:LINE_SPACING: Missing a blank line after declarations
#902: FILE: lib/lzmadecode.c:321:
+				u32 pos = dictionaryPos - rep0;
+				if (pos >= dictionarySize)

CHECK:CAMELCASE: Avoid CamelCase: <probLit>
#910: FILE: lib/lzmadecode.c:329:
+					CProb *probLit;

WARNING:LINE_SPACING: Missing a blank line after declarations
#911: FILE: lib/lzmadecode.c:330:
+					CProb *probLit;
+					matchByte <<= 1;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#914: FILE: lib/lzmadecode.c:333:
+					RC_GET_BIT2(probLit, symbol, if (bit != 0) break, if (bit == 0) break)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 32)
#914: FILE: lib/lzmadecode.c:333:
+					RC_GET_BIT2(probLit, symbol, if (bit != 0) break, if (bit == 0) break)
+				} while (symbol < 0x100);

WARNING:LINE_SPACING: Missing a blank line after declarations
#919: FILE: lib/lzmadecode.c:338:
+				CProb *probLit = prob + symbol;
+				RC_GET_BIT(probLit, symbol)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#929: FILE: lib/lzmadecode.c:348:
+			if (state < 4) state = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#930: FILE: lib/lzmadecode.c:349:
+			else if (state < 10) state -= 3;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#931: FILE: lib/lzmadecode.c:350:
+			else state -= 6;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#947: FILE: lib/lzmadecode.c:366:
+					prob = p + IsRep0Long + (state << kNumPosBitsMax) + posState;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: lib/lzmadecode.c:372:
+^I^I^I^I^I^Iif (nowPos $

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#953: FILE: lib/lzmadecode.c:372:
+						if (nowPos 

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#962: FILE: lib/lzmadecode.c:381:
+						if (pos >= dictionarySize)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#966: FILE: lib/lzmadecode.c:385:
+						if (++dictionaryPos == dictionarySize)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (48, 64)
#966: FILE: lib/lzmadecode.c:385:
+						if (++dictionaryPos == dictionarySize)
+								dictionaryPos = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#978: FILE: lib/lzmadecode.c:397:
+					u32 distance;
+					UpdateBit1(prob);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#989: FILE: lib/lzmadecode.c:408:
+						} else {

CHECK:CAMELCASE: Avoid CamelCase: <numBits>
#1004: FILE: lib/lzmadecode.c:423:
+				int numBits, offset;

CHECK:CAMELCASE: Avoid CamelCase: <probLen>
#1005: FILE: lib/lzmadecode.c:424:
+				CProb *probLen = prob + LenChoice;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1006: FILE: lib/lzmadecode.c:425:
+				CProb *probLen = prob + LenChoice;
+				IfBit0(probLen) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1016: FILE: lib/lzmadecode.c:435:
+						probLen = prob + LenMid + (posState << kLenNumMidBits);

CHECK:CAMELCASE: Avoid CamelCase: <posSlot>
#1031: FILE: lib/lzmadecode.c:450:
+				int posSlot;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1032: FILE: lib/lzmadecode.c:451:
+				int posSlot;
+				state += kNumLitStates;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: lib/lzmadecode.c:453:
+^I^I^I^I^I((len < kNumLenToPosStates ? len : kNumLenToPosStates - 1) << $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1034: FILE: lib/lzmadecode.c:453:
+					((len < kNumLenToPosStates ? len : kNumLenToPosStates - 1) << 

CHECK:CAMELCASE: Avoid CamelCase: <numDirectBits>
#1038: FILE: lib/lzmadecode.c:457:
+					int numDirectBits = ((posSlot >> 1) - 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1039: FILE: lib/lzmadecode.c:458:
+					int numDirectBits = ((posSlot >> 1) - 1);
+					rep0 = (2 | ((u32)posSlot & 1));

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1045: FILE: lib/lzmadecode.c:464:
+						do {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1049: FILE: lib/lzmadecode.c:468:
+							if (Code >= range) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1053: FILE: lib/lzmadecode.c:472:
+						} while (--numDirectBits != 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1061: FILE: lib/lzmadecode.c:480:
+						int mi = 1;
+						do {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1061: FILE: lib/lzmadecode.c:480:
+						do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1063: FILE: lib/lzmadecode.c:482:
+							CProb *prob3 = prob + mi;
+							RC_GET_BIT2(prob3, mi, ; , rep0 |= i);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1063: FILE: lib/lzmadecode.c:482:
+							RC_GET_BIT2(prob3, mi, ; , rep0 |= i);
 							                         ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1065: FILE: lib/lzmadecode.c:484:
+						} while(--numDirectBits != 0);

ERROR:SPACING: space required before the open parenthesis '('
#1065: FILE: lib/lzmadecode.c:484:
+						} while(--numDirectBits != 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1078: FILE: lib/lzmadecode.c:497:
+^I^I^Iif (rep0 > nowPos $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: lib/lzmadecode.c:501:
+^I^I^I   ) $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1084: FILE: lib/lzmadecode.c:503:
+			do
+			{

WARNING:LINE_SPACING: Missing a blank line after declarations
#1088: FILE: lib/lzmadecode.c:507:
+				u32 pos = dictionaryPos - rep0;
+				if (pos >= dictionarySize)

ERROR:SPACING: space required before the open parenthesis '('
#1100: FILE: lib/lzmadecode.c:519:
+			while(len != 0 && nowPos < outSize);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1100: FILE: lib/lzmadecode.c:519:
+			while(len != 0 && nowPos < outSize);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1100: FILE: lib/lzmadecode.c:519:
+			}
+			while(len != 0 && nowPos < outSize);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 81 warnings, 125 checks, 1034 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
