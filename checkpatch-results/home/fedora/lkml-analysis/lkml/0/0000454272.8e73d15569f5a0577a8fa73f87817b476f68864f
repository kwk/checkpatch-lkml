WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#20: 
In message <Pine.LNX.4.44.0206190907520.2053-100000@home.transmeta.com> you wri

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#21: 
te:
^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: include/linux/bitops.h:5:
+#define DECLARE_BITMAP(name,bits) \
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#74: FILE: include/linux/bitops.h:6:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#74: FILE: include/linux/bitops.h:6:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#74: FILE: include/linux/bitops.h:6:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'num' - possible side-effects?
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
+do {									     \
+	if (__alignof__(*(a)) == __alignof__(long)			     \
+	    && __alignof__(*(b)) == __alignof__(long)			     \
+	    && __builtin_constant_p(num)				     \
+	    && (num) == sizeof(long)) {					     \
+		    *((unsigned long *)(dst)) =				     \
+			    (*(unsigned long *)(a) & *(unsigned long *)(b)); \
+	} else								     \
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
+do {									     \
+	if (__alignof__(*(a)) == __alignof__(long)			     \
+	    && __alignof__(*(b)) == __alignof__(long)			     \
+	    && __builtin_constant_p(num)				     \
+	    && (num) == sizeof(long)) {					     \
+		    *((unsigned long *)(dst)) =				     \
+			    (*(unsigned long *)(a) & *(unsigned long *)(b)); \
+	} else								     \
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
+do {									     \
+	if (__alignof__(*(a)) == __alignof__(long)			     \
+	    && __alignof__(*(b)) == __alignof__(long)			     \
+	    && __builtin_constant_p(num)				     \
+	    && (num) == sizeof(long)) {					     \
+		    *((unsigned long *)(dst)) =				     \
+			    (*(unsigned long *)(a) & *(unsigned long *)(b)); \
+	} else								     \
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#82: FILE: include/linux/bitops.h:14:
+#define and_region(num,dst,a,b)						     \
+do {									     \
+	if (__alignof__(*(a)) == __alignof__(long)			     \
+	    && __alignof__(*(b)) == __alignof__(long)			     \
+	    && __builtin_constant_p(num)				     \
+	    && (num) == sizeof(long)) {					     \
+		    *((unsigned long *)(dst)) =				     \
+			    (*(unsigned long *)(a) & *(unsigned long *)(b)); \
+	} else								     \
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 20)
#84: FILE: include/linux/bitops.h:16:
+	if (__alignof__(*(a)) == __alignof__(long)			     \
[...]
+		    *((unsigned long *)(dst)) =				     \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#85: FILE: include/linux/bitops.h:17:
+	if (__alignof__(*(a)) == __alignof__(long)			     \
+	    && __alignof__(*(b)) == __alignof__(long)			     \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#86: FILE: include/linux/bitops.h:18:
+	    && __alignof__(*(b)) == __alignof__(long)			     \
+	    && __builtin_constant_p(num)				     \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#87: FILE: include/linux/bitops.h:19:
+	    && __builtin_constant_p(num)				     \
+	    && (num) == sizeof(long)) {					     \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#91: FILE: include/linux/bitops.h:23:
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#91: FILE: include/linux/bitops.h:23:
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#91: FILE: include/linux/bitops.h:23:
+		__and_region((num), (void*)(dst), (void*)(a), (void*)(b));   \

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: include/linux/bitops.h:24:
+} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: kernel/bitops.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#173: FILE: kernel/bitops.c:13:
+	for (i = 0; i < num && ((unsigned long)a+i) % __alignof__(long); i++)
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#177: FILE: kernel/bitops.c:17:
+	if (((unsigned long)b+i)%__alignof__(long) == 0
 	                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#177: FILE: kernel/bitops.c:17:
+	if (((unsigned long)b+i)%__alignof__(long) == 0
 	                        ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#178: FILE: kernel/bitops.c:18:
+	if (((unsigned long)b+i)%__alignof__(long) == 0
+	    && ((unsigned long)dst+i)%__alignof__(long) == 0) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: kernel/bitops.c:18:
+	    && ((unsigned long)dst+i)%__alignof__(long) == 0) {
 	                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#178: FILE: kernel/bitops.c:18:
+	    && ((unsigned long)dst+i)%__alignof__(long) == 0) {
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#180: FILE: kernel/bitops.c:20:
+			*(unsigned long *)(dst+i)
 			                      ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#181: FILE: kernel/bitops.c:21:
+			*(unsigned long *)(dst+i)
+				= (*(unsigned long *)(a+i)

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#181: FILE: kernel/bitops.c:21:
+				= (*(unsigned long *)(a+i)
 				                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#182: FILE: kernel/bitops.c:22:
+				   & *(unsigned long *)(b+i));
 				                         ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#191: FILE: kernel/bitops.c:31:
+EXPORT_SYMBOL(__and_region);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: sound/core/seq/seq_queue.h:55:
+	DECLARE_BITMAP(clients_bitmap,SNDRV_SEQ_MAX_CLIENTS);
 	                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 5 warnings, 20 checks, 130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
