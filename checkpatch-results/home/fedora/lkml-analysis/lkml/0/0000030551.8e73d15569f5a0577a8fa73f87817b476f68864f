WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#64: FILE: fs/unionfs/super.c:22:
+ * vfs inode.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#69: FILE: fs/unionfs/super.c:27:
+	static struct address_space_operations unionfs_empty_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#73: FILE: fs/unionfs/super.c:31:
+		printk(KERN_ERR "No kernel memory when allocating inode "

WARNING:SPLIT_STRING: quoted string split across lines
#74: FILE: fs/unionfs/super.c:32:
+		printk(KERN_ERR "No kernel memory when allocating inode "
+				"private data!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#75: FILE: fs/unionfs/super.c:33:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#91: FILE: fs/unionfs/super.c:49:
+		printk(KERN_ERR "No kernel memory when allocating lower-"

WARNING:SPLIT_STRING: quoted string split across lines
#92: FILE: fs/unionfs/super.c:50:
+		printk(KERN_ERR "No kernel memory when allocating lower-"
+				"pointer array!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: fs/unionfs/super.c:51:
+		BUG();

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#108: FILE: fs/unionfs/super.c:66:
+	 * Basically, if i_count == 1, iput will then decrement it and this
 	                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#111: FILE: fs/unionfs/super.c:69:
+	 * calling iput on the hidden inode.  iput() _will_ do it for us (by
 	           ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#111: FILE: fs/unionfs/super.c:69:
+	 * calling iput on the hidden inode.  iput() _will_ do it for us (by
 	                                      ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#114: FILE: fs/unionfs/super.c:72:
+	 * our i_nlink to 0 here to trick iput() into calling our clear_inode.
 	                                  ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#125: FILE: fs/unionfs/super.c:83:
+ * size (and its pages) and then clear our own inode, which will do an iput
                                                                        ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: fs/unionfs/super.c:102:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#147: FILE: fs/unionfs/super.c:105:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: fs/unionfs/super.c:113:
+		BUG_ON(branch_count(sb, bindex) != 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#164: FILE: fs/unionfs/super.c:122:
+ * the union. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: fs/unionfs/super.c:145:
+ * code. */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#190: FILE: fs/unionfs/super.c:148:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#194: FILE: fs/unionfs/super.c:152:
+ * Called by iput() when the inode reference count reached zero
              ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: fs/unionfs/super.c:171:
+	 * by our read_inode when it was created initially.  */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#221: FILE: fs/unionfs/super.c:179:
+			iput(hidden_inode);
 			^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#234: FILE: fs/unionfs/super.c:192:
+	if (!c) {
+		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: fs/unionfs/super.c:207:
+static void init_once(void *v, kmem_cache_t * cachep, unsigned long flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#274: FILE: fs/unionfs/super.c:232:
+	if (unionfs_inode_cachep)
+		kmem_cache_destroy(unionfs_inode_cachep);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#289: FILE: fs/unionfs/super.c:247:
+		if ((rdstate->uds_access + RDCACHE_JIFFIES) > jiffies)

CHECK:SPACING: No space is necessary after a cast
#345: FILE: fs/unionfs/super.c:303:
+	tmp_page = (char*) __get_free_page(GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#345: FILE: fs/unionfs/super.c:303:
+	tmp_page = (char*) __get_free_page(GFP_KERNEL);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#354: FILE: fs/unionfs/super.c:312:
+	seq_printf(m, ",dirs=");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: fs/unionfs/super.c:315:
+		path = d_path(dtohd_index(sb->s_root, bindex),
+			   dtohm_index(sb->s_root, bindex), tmp_page,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#363: FILE: fs/unionfs/super.c:321:
+		if (bindex != bend) {
+			seq_printf(m, ":");
+		}

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#364: FILE: fs/unionfs/super.c:322:
+			seq_printf(m, ":");

CHECK:SPACING: No space is necessary after a cast
#370: FILE: fs/unionfs/super.c:328:
+		free_page((unsigned long) tmp_page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030551.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 28 warnings, 3 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030551.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
