ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/include/linux/net.h	2004-08-13 11:48:43 -07:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#46: FILE: include/linux/net.h:172:
+extern void	     net_random_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#76: FILE: net/core/utils.c:28:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#78: FILE: net/core/utils.c:30:
+/*
+  This is a maximally equidistributed combined Tausworthe generator

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: net/core/utils.c:33:
+   x_n = (s1_n ^ s2_n ^ s3_n) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: net/core/utils.c:47:
+   ftp://ftp.iro.umontreal.ca/pub/simulation/lecuyer/papers/tausme.ps $

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: net/core/utils.c:54:
+        ... the k_j most significant bits of z_j must be non-$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: net/core/utils.c:55:
+        zero, for each j. (Note: this restriction also applies to the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: net/core/utils.c:55:
+        zero, for each j. (Note: this restriction also applies to the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: net/core/utils.c:56:
+        computer code given in [4], but was mistakenly not mentioned in$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: net/core/utils.c:57:
+        that paper.)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: net/core/utils.c:58:
+   $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#119: FILE: net/core/utils.c:71:
+#define TAUSWORTHE(s,a,b,c,d) ((s&c)<<d) ^ (((s <<a) ^ s)>>b)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#135: FILE: net/core/utils.c:87:
+#define LCG(n) (69069 * n)

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: net/core/utils.c:106:
+	struct nrnd_state *state = &get_cpu_var(net_rand_state);
+	r = __net_random(state);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: net/core/utils.c:111:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: net/core/utils.c:115:
+	struct nrnd_state *state = &get_cpu_var(net_rand_state);
+	__net_srandom(state, entropy);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#178: FILE: net/core/utils.c:126:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: net/core/utils.c:127:
+		struct nrnd_state *state = &per_cpu(net_rand_state,i);
 		                                                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 4 warnings, 14 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260522.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
