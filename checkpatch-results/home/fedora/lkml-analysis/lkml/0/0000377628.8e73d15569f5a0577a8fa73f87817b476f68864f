WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#if NR_CPUS < BITS_PER_LONG, otherwise, use a structure with an array

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -urpN linux-2.5.67-bk6/drivers/base/node.c cpu-2.5.67-bk6-1/drivers/base/node.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: drivers/base/node.c:38:
+        ^Iint j = sprintf(buf,"%lx\n", cpus_coerce(tmp));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: drivers/base/node.c:38:
+        ^Iint j = sprintf(buf,"%lx\n", cpus_coerce(tmp));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: drivers/base/node.c:38:
+        ^Iint j = sprintf(buf,"%lx\n", cpus_coerce(tmp));$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#60: FILE: drivers/base/node.c:38:
+        	int j = sprintf(buf,"%lx\n", cpus_coerce(tmp));
         	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/bitmap.h:1:
+#ifndef __LINUX_BITMAP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#85: FILE: include/linux/bitmap.h:13:
+static inline int bitmap_empty(volatile unsigned long *bitmap, int bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: include/linux/bitmap.h:16:
+	int k;
+	for (k = 0; k < BITS_TO_LONGS(bits); ++k)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#95: FILE: include/linux/bitmap.h:23:
+static inline int bitmap_full(volatile unsigned long *bitmap, int bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: include/linux/bitmap.h:26:
+	int k;
+	for (k = 0; k < BITS_TO_LONGS(bits); ++k)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#105: FILE: include/linux/bitmap.h:33:
+static inline int bitmap_equal(volatile unsigned long *bitmap1, volatile unsigned long *bitmap2, int bits)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#105: FILE: include/linux/bitmap.h:33:
+static inline int bitmap_equal(volatile unsigned long *bitmap1, volatile unsigned long *bitmap2, int bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#108: FILE: include/linux/bitmap.h:36:
+	int k;
+	for (k = 0; k < BITS_TO_LONGS(bits); ++k)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#115: FILE: include/linux/bitmap.h:43:
+static inline void bitmap_complement(volatile unsigned long *bitmap, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#123: FILE: include/linux/bitmap.h:51:
+static inline void bitmap_clear(volatile unsigned long *bitmap, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#128: FILE: include/linux/bitmap.h:56:
+static inline void bitmap_fill(volatile unsigned long *bitmap, int bits)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#130: FILE: include/linux/bitmap.h:58:
+	memset((unsigned long *)bitmap, 0xff, BITS_TO_LONGS(bits)*sizeof(unsigned long));
 	                                                         ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#133: FILE: include/linux/bitmap.h:61:
+static inline void bitmap_copy(volatile unsigned long *dst, volatile unsigned long *src, int bits)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#135: FILE: include/linux/bitmap.h:63:
+	memcpy((unsigned long *)dst, (unsigned long *)src, BITS_TO_LONGS(bits)*sizeof(unsigned long));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#135: FILE: include/linux/bitmap.h:63:
+	memcpy((unsigned long *)dst, (unsigned long *)src, BITS_TO_LONGS(bits)*sizeof(unsigned long));
 	                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#138: FILE: include/linux/bitmap.h:66:
+static inline void bitmap_shift_left(volatile unsigned long *,volatile unsigned long *,int,int);
                                                              ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#138: FILE: include/linux/bitmap.h:66:
+static inline void bitmap_shift_left(volatile unsigned long *,volatile unsigned long *,int,int);
                                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#138: FILE: include/linux/bitmap.h:66:
+static inline void bitmap_shift_left(volatile unsigned long *,volatile unsigned long *,int,int);
                                                                                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#138: FILE: include/linux/bitmap.h:66:
+static inline void bitmap_shift_left(volatile unsigned long *,volatile unsigned long *,int,int);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#139: FILE: include/linux/bitmap.h:67:
+static inline void bitmap_shift_right(volatile unsigned long *dst, volatile unsigned long *src, int shift, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#139: FILE: include/linux/bitmap.h:67:
+static inline void bitmap_shift_right(volatile unsigned long *dst, volatile unsigned long *src, int shift, int bits)

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#151: FILE: include/linux/bitmap.h:79:
+static inline void bitmap_shift_left(volatile unsigned long *dst, volatile unsigned long *src, int shift, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#151: FILE: include/linux/bitmap.h:79:
+static inline void bitmap_shift_left(volatile unsigned long *dst, volatile unsigned long *src, int shift, int bits)

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#163: FILE: include/linux/bitmap.h:91:
+static inline void bitmap_and(volatile unsigned long *dst, volatile unsigned long *bitmap1, volatile unsigned long *bitmap2, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#163: FILE: include/linux/bitmap.h:91:
+static inline void bitmap_and(volatile unsigned long *dst, volatile unsigned long *bitmap1, volatile unsigned long *bitmap2, int bits)

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#171: FILE: include/linux/bitmap.h:99:
+static inline void bitmap_or(volatile unsigned long *dst, volatile unsigned long *bitmap1, volatile unsigned long *bitmap2, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#171: FILE: include/linux/bitmap.h:99:
+static inline void bitmap_or(volatile unsigned long *dst, volatile unsigned long *bitmap1, volatile unsigned long *bitmap2, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#180: FILE: include/linux/bitmap.h:108:
+static inline int bitmap_weight(volatile unsigned long *bitmap, int bits)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#190: FILE: include/linux/bitmap.h:118:
+static inline int bitmap_weight(volatile unsigned long *bitmap, int bits)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#208: FILE: include/linux/cpumask.h:1:
+#ifndef __LINUX_CPUMASK_H

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#218: FILE: include/linux/cpumask.h:11:
+struct cpumask
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#222: FILE: include/linux/cpumask.h:15:
+typedef struct cpumask cpumask_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: include/linux/cpumask.h:22:
+#define cpus_and(dst,src1,src2)	bitmap_and((dst).mask,(src1).mask, (src2).mask, NR_CPUS)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: include/linux/cpumask.h:22:
+#define cpus_and(dst,src1,src2)	bitmap_and((dst).mask,(src1).mask, (src2).mask, NR_CPUS)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: include/linux/cpumask.h:22:
+#define cpus_and(dst,src1,src2)	bitmap_and((dst).mask,(src1).mask, (src2).mask, NR_CPUS)
                                	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/linux/cpumask.h:23:
+#define cpus_or(dst,src1,src2)	bitmap_or((dst).mask, (src1).mask, (src2).mask, NR_CPUS)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/linux/cpumask.h:23:
+#define cpus_or(dst,src1,src2)	bitmap_or((dst).mask, (src1).mask, (src2).mask, NR_CPUS)
                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#248: FILE: include/linux/cpumask.h:41:
+#define CPU_MASK_ALL	{ {[0 ... CPU_ARRAY_SIZE-1] = ~0UL} }
                     	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#249: FILE: include/linux/cpumask.h:42:
+#define CPU_MASK_NONE	{ {[0 ... CPU_ARRAY_SIZE-1] =  0UL} }
                      	                        ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#253: FILE: include/linux/cpumask.h:46:
+typedef unsigned long cpumask_t;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#255: FILE: include/linux/cpumask.h:48:
+#define cpu_set(cpu, map)		do { map |= 1UL << (cpu); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#255: FILE: include/linux/cpumask.h:48:
+#define cpu_set(cpu, map)		do { map |= 1UL << (cpu); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#256: FILE: include/linux/cpumask.h:49:
+#define cpu_clear(cpu, map)		do { map &= ~(1UL << (cpu)); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#256: FILE: include/linux/cpumask.h:49:
+#define cpu_clear(cpu, map)		do { map &= ~(1UL << (cpu)); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: include/linux/cpumask.h:53:
+#define cpus_and(dst,src1,src2)		do { dst = (src1) & (src2); } while (0)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: include/linux/cpumask.h:53:
+#define cpus_and(dst,src1,src2)		do { dst = (src1) & (src2); } while (0)
                          ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#260: FILE: include/linux/cpumask.h:53:
+#define cpus_and(dst,src1,src2)		do { dst = (src1) & (src2); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: include/linux/cpumask.h:54:
+#define cpus_or(dst,src1,src2)		do { dst = (src1) | (src2); } while (0)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: include/linux/cpumask.h:54:
+#define cpus_or(dst,src1,src2)		do { dst = (src1) | (src2); } while (0)
                         ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#261: FILE: include/linux/cpumask.h:54:
+#define cpus_or(dst,src1,src2)		do { dst = (src1) | (src2); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#262: FILE: include/linux/cpumask.h:55:
+#define cpus_clear(map)			do { map = 0UL; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#263: FILE: include/linux/cpumask.h:56:
+#define cpus_complement(map)		do { map = ~(map); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#263: FILE: include/linux/cpumask.h:56:
+#define cpus_complement(map)		do { map = ~(map); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#273: FILE: include/linux/cpumask.h:66:
+#define cpus_shift_right(dst, src, n)	do { dst = (src) >> (n); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#274: FILE: include/linux/cpumask.h:67:
+#define cpus_shift_left(dst, src, n)	do { dst = (src) >> (n); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: include/linux/cpumask.h:96:
+#define cpu_online(cpu)			({ BUG_ON((cpu) != 0); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#310: FILE: include/linux/cpumask.h:103:
+	while (cpu < NR_CPUS && !cpu_online(cpu));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#314: FILE: include/linux/cpumask.h:107:
+#define for_each_cpu(cpu, map)						\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#314: FILE: include/linux/cpumask.h:107:
+#define for_each_cpu(cpu, map)						\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: include/linux/cpumask.h:108:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))
 	                                                            ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#315: FILE: include/linux/cpumask.h:108:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_cpu(cpu,map))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#316: FILE: include/linux/cpumask.h:109:
+#define for_each_online_cpu(cpu, map)					\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#316: FILE: include/linux/cpumask.h:109:
+#define for_each_online_cpu(cpu, map)					\
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: include/linux/cpumask.h:110:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))
 	                                                                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#317: FILE: include/linux/cpumask.h:110:
+	for (cpu = first_cpu(map); cpu < NR_CPUS; cpu = next_online_cpu(cpu,map))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: include/linux/rcupdate.h:71:
+^Icpumask_t^Ircu_cpu_mask; ^I/* CPUs that need to switch in order  */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/sched.h:471:
+extern void set_cpus_allowed(task_t *p, cpumask_t new_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#517: FILE: kernel/rcupdate.c:124:
+	if (!cpu_isset(cpu, rcu_ctrlblk.rcu_cpu_mask)) {
 		return;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#591: FILE: kernel/sched.c:897:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this_cpu, int idle, int *imbalance, cpumask_t cpumask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: kernel/sched.c:1104:
+		cpumask_t cpumask = node_to_cpumask(node);
+		cpu_set(this_cpu, cpumask);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#689: FILE: kernel/sched.c:2305:
+	BUG_ON(cpus_empty(new_mask));

WARNING:LINE_SPACING: Missing a blank line after declarations
#736: FILE: kernel/sched.c:2388:
+			cpumask_t tmp;
+			cpus_and(tmp, p->cpus_allowed, cpu_online_map);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#761: FILE: kernel/softirq.c:320:
+	BUG_ON(smp_processor_id() != cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377628.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 50 warnings, 12 checks, 656 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377628.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
