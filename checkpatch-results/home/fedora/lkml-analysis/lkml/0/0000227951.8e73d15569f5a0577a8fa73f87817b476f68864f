WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -ruN 831-range-old/kernel/power/range.c 831-range-new/kernel/power/range.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: kernel/power/range.c:1:
+/* Suspend2 routines for manipulating ranges.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#44: FILE: kernel/power/range.c:6:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'continguous' may be misspelled - perhaps 'contiguous'?
#48: FILE: kernel/power/range.c:10:
+ * A lot of the data that suspend saves involves continguous ranges of memory
                                                  ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#54: FILE: kernel/power/range.c:16:
+ * ^Iunsigned long min;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#55: FILE: kernel/power/range.c:17:
+ * ^Iunsigned long max;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#56: FILE: kernel/power/range.c:18:
+ * ^Istruct range * next;$

WARNING:TYPO_SPELLING: 'outweight' may be misspelled - perhaps 'outweigh'?
#62: FILE: kernel/power/range.c:24:
+ * ranges more than outweight these instances.
                     ^^^^^^^^^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#91: FILE: kernel/power/range.c:53:
+struct range * unused_ranges = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: kernel/power/range.c:53:
+struct range * unused_ranges = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#92: FILE: kernel/power/range.c:54:
+int nr_unused_ranges = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#93: FILE: kernel/power/range.c:55:
+int max_ranges_used = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#94: FILE: kernel/power/range.c:56:
+int num_range_pages = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#95: FILE: kernel/power/range.c:57:
+static unsigned long ranges_allocated = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#96: FILE: kernel/power/range.c:58:
+struct range * first_range_page = NULL, * last_range_page = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#96: FILE: kernel/power/range.c:58:
+struct range * first_range_page = NULL, * last_range_page = NULL;
                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: kernel/power/range.c:72:
+	struct range * ranges;

CHECK:BRACES: braces {} should be used on all arms of this statement
#114: FILE: kernel/power/range.c:76:
+		if (test_suspend_state(SUSPEND_NOW_RESUMING)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: kernel/power/range.c:77:
+			struct page * pageaddr;

CHECK:SPACING: No space is necessary after a cast
#117: FILE: kernel/power/range.c:79:
+			while ((this = (void **) get_zeroed_page(GFP_ATOMIC))) {

ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: kernel/power/range.c:87:
+			while(eaten_memory) {

CHECK:SPACING: No space is necessary after a cast
#128: FILE: kernel/power/range.c:90:
+				free_page((unsigned long) this);

CHECK:BRACES: Unbalanced braces around else statement
#130: FILE: kernel/power/range.c:92:
+		} else

CHECK:SPACING: No space is necessary after a cast
#131: FILE: kernel/power/range.c:93:
+			this = (void *) get_grabbed_pages(0);

CHECK:SPACING: No space is necessary after a cast
#138: FILE: kernel/power/range.c:100:
+			first_range_page = (struct range *) this;

CHECK:SPACING: No space is necessary after a cast
#140: FILE: kernel/power/range.c:102:
+			*RANGEPAGELINK(last_range_page) |= (unsigned long) this;

CHECK:SPACING: No space is necessary after a cast
#142: FILE: kernel/power/range.c:104:
+		last_range_page = (struct range *) this;

CHECK:SPACING: No space is necessary after a cast
#143: FILE: kernel/power/range.c:105:
+		ranges = (struct range *) this;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: kernel/power/range.c:107:
+			(ranges+i)->next = (ranges+i+1);
 			       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: kernel/power/range.c:107:
+			(ranges+i)->next = (ranges+i+1);
 			                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: kernel/power/range.c:107:
+			(ranges+i)->next = (ranges+i+1);
 			                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#153: FILE: kernel/power/range.c:115:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: kernel/power/range.c:116:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: kernel/power/range.c:128:
+^Istruct range * this_range_page = first_range_page, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: kernel/power/range.c:128:
+	struct range * this_range_page = first_range_page, 

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#167: FILE: kernel/power/range.c:129:
+		* next_range_page = NULL;
 		^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: kernel/power/range.c:132:
+		printk(" *** Warning: %ld ranges still allocated when "

WARNING:SPLIT_STRING: quoted string split across lines
#171: FILE: kernel/power/range.c:133:
+		printk(" *** Warning: %ld ranges still allocated when "
+				"free_ranges() called.\n", ranges_allocated);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_ranges', this function's name, in a string
#171: FILE: kernel/power/range.c:133:
+				"free_ranges() called.\n", ranges_allocated);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: kernel/power/range.c:136:
+^I^Inext_range_page = (struct range *) $

CHECK:SPACING: No space is necessary after a cast
#174: FILE: kernel/power/range.c:136:
+		next_range_page = (struct range *) 

CHECK:SPACING: No space is necessary after a cast
#177: FILE: kernel/power/range.c:139:
+		free_pages((unsigned long) this_range_page, 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#181: FILE: kernel/power/range.c:143:
+	nr_unused_ranges = num_range_pages = ranges_allocated = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#182: FILE: kernel/power/range.c:144:
+	unused_ranges = last_range_page = first_range_page = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: kernel/power/range.c:154:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: kernel/power/range.c:159:
+static struct range * get_range(void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: kernel/power/range.c:161:
+	struct range * result;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: kernel/power/range.c:162:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!unused_ranges'
#201: FILE: kernel/power/range.c:163:
+	if ((!unused_ranges) && (add_range_pages(1)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#210: FILE: kernel/power/range.c:172:
+	result->minimum = result->maximum = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: kernel/power/range.c:184:
+void put_range(struct range * range)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: kernel/power/range.c:187:
+		printk("Error! put_range called with NULL range.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_range', this function's name, in a string
#225: FILE: kernel/power/range.c:187:
+		printk("Error! put_range called with NULL range.\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#228: FILE: kernel/power/range.c:190:
+	range->minimum = range->maximum = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: kernel/power/range.c:202:
+void put_range_chain(struct rangechain * chain)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: kernel/power/range.c:205:
+	struct range * this;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#248: FILE: kernel/power/range.c:210:
+			this->minimum = this->maximum = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#249: FILE: kernel/power/range.c:211:
+			this=this->next;
 			    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: kernel/power/range.c:240:
+void print_chain(int debuglevel, struct rangechain * chain, int printmethod)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: kernel/power/range.c:242:
+	struct range * this = chain->first;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: kernel/power/range.c:244:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'console_loglevel < debuglevel'
#283: FILE: kernel/power/range.c:245:
+	if ((console_loglevel < debuglevel) || (!this) ||
+			(!TEST_DEBUG_STATE(SUSPEND_RANGES)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!this'
#283: FILE: kernel/power/range.c:245:
+	if ((console_loglevel < debuglevel) || (!this) ||
+			(!TEST_DEBUG_STATE(SUSPEND_RANGES)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: kernel/power/range.c:246:
+	if ((console_loglevel < debuglevel) || (!this) ||
+			(!TEST_DEBUG_STATE(SUSPEND_RANGES)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: kernel/power/range.c:253:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#297: FILE: kernel/power/range.c:259:
+		switch (printmethod) {
+			case 0:
[...]
+			case 1:
[...]
+			case 2:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: kernel/power/range.c:262:
+				suspend_message(SUSPEND_RANGES, debuglevel, 1, "(%p) ",
+					this);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: kernel/power/range.c:264:
+				suspend_message(SUSPEND_RANGES, debuglevel, 1, "%lx-%lx; ",
+					this->minimum, this->maximum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: kernel/power/range.c:268:
+				suspend_message(SUSPEND_RANGES, debuglevel, 1, "(%p)",
+					this);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/power/range.c:270:
+				suspend_message(SUSPEND_RANGES, debuglevel, 1, "%lu-%lu; ",
+					this->minimum, this->maximum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: kernel/power/range.c:274:
+				suspend_message(SUSPEND_RANGES, debuglevel, 1, "(%p)",
+					this);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: kernel/power/range.c:276:
+				suspend_message(SUSPEND_RANGES, debuglevel, 1, "%p-%p; ",
+					page_address(mem_map+this->minimum),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: kernel/power/range.c:276:
+					page_address(mem_map+this->minimum),
 					                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#315: FILE: kernel/power/range.c:277:
+					page_address(mem_map+this->maximum) +
 					                    ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#319: FILE: kernel/power/range.c:281:
+		size+= this->maximum - this->minimum + 1;
 		    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#322: FILE: kernel/power/range.c:284:
+		if (!(count%4))
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: kernel/power/range.c:287:
+^I$

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#326: FILE: kernel/power/range.c:288:
+	if ((count%4))
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#329: FILE: kernel/power/range.c:291:
+	suspend_message(SUSPEND_RANGES, debuglevel, 1,"%d entries/%ld allocated. "
 	                                             ^

WARNING:SPLIT_STRING: quoted string split across lines
#330: FILE: kernel/power/range.c:292:
+	suspend_message(SUSPEND_RANGES, debuglevel, 1,"%d entries/%ld allocated. "
+			"Allocated %d and freed %d. Size %d.",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: kernel/power/range.c:293:
+^I^I^Icount, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: kernel/power/range.c:308:
+ * Takes a value to be stored and a pointer to a chain and adds the value to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: kernel/power/range.c:320:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: kernel/power/range.c:328:
+int add_to_range_chain(struct rangechain * chain, unsigned long value)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: kernel/power/range.c:330:
+	struct range * this, * prev = NULL, * prevtoprev = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#368: FILE: kernel/power/range.c:330:
+	struct range * this, * prev = NULL, * prevtoprev = NULL;
 	                     ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#368: FILE: kernel/power/range.c:330:
+	struct range * this, * prev = NULL, * prevtoprev = NULL;
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: kernel/power/range.c:332:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#372: FILE: kernel/power/range.c:334:
+		chain->last = chain->first = get_range();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#374: FILE: kernel/power/range.c:336:
+			printk("Error unable to allocate the first range for "

WARNING:SPLIT_STRING: quoted string split across lines
#375: FILE: kernel/power/range.c:337:
+			printk("Error unable to allocate the first range for "
+					"the chain.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: kernel/power/range.c:346:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: kernel/power/range.c:350:
+	if (chain->lastaccessed && chain->prevtolastaccessed &&
+		       chain->prevtoprev) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: kernel/power/range.c:365:
+			struct range * new = get_range();

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: kernel/power/range.c:366:
+			struct range * new = get_range();
+			if (!new)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this->minimum <= value'
#424: FILE: kernel/power/range.c:386:
+		if ((this->minimum <= value) && (this->maximum >= value)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this->maximum >= value'
#424: FILE: kernel/power/range.c:386:
+		if ((this->minimum <= value) && (this->maximum >= value)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#426: FILE: kernel/power/range.c:388:
+				printk("%s:", chain->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: kernel/power/range.c:390:
+				printk("%p:", chain);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#429: FILE: kernel/power/range.c:391:
+				printk("Trying to add a value (%ld/0x%lx) already "

WARNING:SPLIT_STRING: quoted string split across lines
#430: FILE: kernel/power/range.c:392:
+				printk("Trying to add a value (%ld/0x%lx) already "
+				"included in chain.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/power/range.c:409:
+^I^I^Iif ((this->next) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this->next'
#447: FILE: kernel/power/range.c:409:
+			if ((this->next) && 
+					(this->next->minimum == value + 1)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: kernel/power/range.c:410:
+			if ((this->next) && 
+					(this->next->minimum == value + 1)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#449: FILE: kernel/power/range.c:411:
+				struct range * oldnext = this->next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: kernel/power/range.c:412:
+				struct range * oldnext = this->next;
+				this->maximum = this->next->maximum;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chain->last'
#452: FILE: kernel/power/range.c:414:
+				if ((chain->last) == oldnext)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: kernel/power/range.c:418:
+^I^I^I^Ichain->lastaccessed = NULL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: kernel/power/range.c:427:
+^I^I^I} $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#476: FILE: kernel/power/range.c:438:
+			struct range * new = get_range();

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: kernel/power/range.c:439:
+			struct range * new = get_range();
+			if (!new) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#478: FILE: kernel/power/range.c:440:
+				printk("Error unable to append a new range to "

WARNING:SPLIT_STRING: quoted string split across lines
#479: FILE: kernel/power/range.c:441:
+				printk("Error unable to append a new range to "
+						"the chain.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#500: FILE: kernel/power/range.c:462:
+	printk("\nFell out the bottom of add_to_range_chain. This shouldn't "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_to_range_chain', this function's name, in a string
#500: FILE: kernel/power/range.c:462:
+	printk("\nFell out the bottom of add_to_range_chain. This shouldn't "

WARNING:SPLIT_STRING: quoted string split across lines
#501: FILE: kernel/power/range.c:463:
+	printk("\nFell out the bottom of add_to_range_chain. This shouldn't "
+			"happen!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: kernel/power/range.c:474:
+int append_range_to_range_chain(struct rangechain * chain, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#512: FILE: kernel/power/range.c:474:
+int append_range_to_range_chain(struct rangechain * chain, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: kernel/power/range.c:475:
+int append_range_to_range_chain(struct rangechain * chain, 
+		unsigned long minimum, unsigned long maximum)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#515: FILE: kernel/power/range.c:477:
+	struct range * newrange = NULL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: kernel/power/range.c:481:
+		printk("Error unable to append a new range to the chain.\n");

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#524: FILE: kernel/power/range.c:486:
+	chain->size+= (maximum - minimum + 1);
 	           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#529: FILE: kernel/power/range.c:491:
+	if (chain->last) {
[...]
+	} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: kernel/power/range.c:494:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#532: FILE: kernel/power/range.c:494:
+	} else 

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#533: FILE: kernel/power/range.c:495:
+		chain->last = chain->first = newrange;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#543: FILE: kernel/power/range.c:505:
+	switch (chain) {
+		case 0:
[...]
+		case 1:
[...]
+		case 2:

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#547: FILE: kernel/power/range.c:509:
+			result = append_range_to_range_chain(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#551: FILE: kernel/power/range.c:513:
+			result = append_range_to_range_chain(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#554: FILE: kernel/power/range.c:516:
+				result = append_range_to_range_chain(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#566: FILE: kernel/power/range.c:528:
+	struct range * this_range_page = first_range_page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: kernel/power/range.c:530:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#570: FILE: kernel/power/range.c:532:
+		struct range * this_range = this_range_page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#571: FILE: kernel/power/range.c:533:
+		struct range * this_range = this_range_page;
+		for (i = 0; i < RANGES_PER_PAGE; i++) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#573: FILE: kernel/power/range.c:535:
+				struct range * orig = this_range->next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: kernel/power/range.c:536:
+				struct range * orig = this_range->next;
+				this_range->next =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: kernel/power/range.c:539:
+				suspend_message(SUSPEND_RANGES, SUSPEND_VERBOSE, 1,
+					"Relativised range %d on this page is %p. Absolutised range is %p.\n",

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void absolutise_ranges() should probably be void absolutise_ranges(void)
#596: FILE: kernel/power/range.c:558:
+void absolutise_ranges()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#598: FILE: kernel/power/range.c:560:
+	struct range * this_range_page = first_range_page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: kernel/power/range.c:562:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#602: FILE: kernel/power/range.c:564:
+		struct range * this_range = this_range_page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#603: FILE: kernel/power/range.c:565:
+		struct range * this_range = this_range_page;
+		for (i = 0; i < RANGES_PER_PAGE; i++) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#605: FILE: kernel/power/range.c:567:
+				struct range * orig = this_range->next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: kernel/power/range.c:568:
+^I^I^I^Ithis_range->next = $

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: kernel/power/range.c:568:
+				struct range * orig = this_range->next;
+				this_range->next = 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: kernel/power/range.c:571:
+				suspend_message(SUSPEND_RANGES, SUSPEND_VERBOSE, 1,
+					"Relativised range %d on this page is %p. Absolutised range is %p.\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: kernel/power/range.c:581:
+void absolutise_chain(struct rangechain * chain)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: kernel/power/range.c:597:
+void relativise_chain(struct rangechain * chain)

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#655: FILE: kernel/power/range.c:617:
+static unsigned long * range_pagelist = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#655: FILE: kernel/power/range.c:617:
+static unsigned long * range_pagelist = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#657: FILE: kernel/power/range.c:619:
+unsigned long * get_rangepages_list_entry(int index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#660: FILE: kernel/power/range.c:622:
+	unsigned long * current_list_page = range_pagelist;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: kernel/power/range.c:624:
+	BUG_ON(index > num_range_pages);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#668: FILE: kernel/power/range.c:630:
+		current_list_page = *((unsigned long **) current_list_page);

CHECK:SPACING: No space is necessary after a cast
#670: FILE: kernel/power/range.c:632:
+	return (unsigned long *) current_list_page[offset];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#675: FILE: kernel/power/range.c:637:
+	struct range * this_range_page = first_range_page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#677: FILE: kernel/power/range.c:639:
+	unsigned long * current_list_page = range_pagelist;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: kernel/power/range.c:640:
+	unsigned long * prev_list_page = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: kernel/power/range.c:644:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: kernel/power/range.c:647:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#688: FILE: kernel/power/range.c:650:
+				(unsigned long *) get_grabbed_pages(0);

CHECK:SPACING: No space is necessary after a cast
#690: FILE: kernel/power/range.c:652:
+				current_list_page = (unsigned long *) get_zeroed_page(GFP_ATOMIC);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: kernel/power/range.c:655:
+				printk("Number of range pages is %d.\n", num_range_pages);

CHECK:BRACES: braces {} should be used on all arms of this statement
#698: FILE: kernel/power/range.c:660:
+			if (!prev_list_page)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: kernel/power/range.c:662:
+			else {

CHECK:SPACING: No space is necessary after a cast
#701: FILE: kernel/power/range.c:663:
+				*prev_list_page = (unsigned long) current_list_page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: kernel/power/range.c:667:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: kernel/power/range.c:671:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#711: FILE: kernel/power/range.c:673:
+			current_list_page[j] = (unsigned long) this_range_page;

CHECK:SPACING: No space is necessary after a cast
#713: FILE: kernel/power/range.c:675:
+			this_range_page = (struct range *) (((unsigned long)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: kernel/power/range.c:678:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#721: FILE: kernel/power/range.c:683:
+			current_list_page = (unsigned long *) current_list_page[0];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#729: FILE: kernel/power/range.c:691:
+	unsigned long * last;

CHECK:SPACING: No space is necessary after a cast
#733: FILE: kernel/power/range.c:695:
+		range_pagelist = *((unsigned long **) range_pagelist);

CHECK:SPACING: No space is necessary after a cast
#734: FILE: kernel/power/range.c:696:
+		free_pages((unsigned long) last, 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#738: FILE: kernel/power/range.c:700:
+int PageRangePage(char * seeking)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: kernel/power/range.c:703:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: kernel/power/range.c:705:
+^I^Iif (get_rangepages_list_entry(i) == $

CHECK:SPACING: No space is necessary after a cast
#744: FILE: kernel/power/range.c:706:
+			(unsigned long *) seeking)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#749: FILE: kernel/power/range.c:711:
+}
+/* relocate_rangepages

ERROR:TRAILING_WHITESPACE: trailing whitespace
#750: FILE: kernel/power/range.c:712:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: kernel/power/range.c:714:
+ * to ensure they won't be overwritten by the kernel we're restoring. $

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int relocate_rangepages() should probably be int relocate_rangepages(void)
#754: FILE: kernel/power/range.c:716:
+int relocate_rangepages()

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#759: FILE: kernel/power/range.c:721:
+	unsigned long * prev_page = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#763: FILE: kernel/power/range.c:725:
+		unsigned long * this_page = get_rangepages_list_entry(i);

CHECK:SPACING: No space is necessary after a cast
#772: FILE: kernel/power/range.c:734:
+		while ((m = (void *) get_zeroed_page(GFP_ATOMIC))) {

CHECK:SPACING: No space is necessary after a cast
#775: FILE: kernel/power/range.c:737:
+				copy_page(m, (void *) this_page);

CHECK:SPACING: No space is necessary after a cast
#776: FILE: kernel/power/range.c:738:
+				free_page((unsigned long) this_page);

CHECK:SPACING: No space is necessary after a cast
#781: FILE: kernel/power/range.c:743:
+						(i | (unsigned long) m);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: kernel/power/range.c:754:
+			printk("\nRan out of memory trying to relocate "

WARNING:SPLIT_STRING: quoted string split across lines
#793: FILE: kernel/power/range.c:755:
+			printk("\nRan out of memory trying to relocate "
+				"rangepages (tried %d pages).\n", numeaten);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: kernel/power/range.c:760:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#800: FILE: kernel/power/range.c:762:
+	while(c) {

CHECK:SPACING: No space is necessary after a cast
#804: FILE: kernel/power/range.c:766:
+			free_pages((unsigned long) f, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: kernel/power/range.c:769:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: kernel/power/range.c:770:
+^Iif (oom) $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#814: FILE: kernel/power/range.c:776:
+EXPORT_SYMBOL(put_rangepages_list);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#815: FILE: kernel/power/range.c:777:
+EXPORT_SYMBOL(get_rangepages_list);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#816: FILE: kernel/power/range.c:778:
+EXPORT_SYMBOL(get_rangepages_list_entry);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#817: FILE: kernel/power/range.c:779:
+EXPORT_SYMBOL(absolutise_chain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#818: FILE: kernel/power/range.c:780:
+EXPORT_SYMBOL(relativise_chain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#819: FILE: kernel/power/range.c:781:
+EXPORT_SYMBOL(put_range);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#820: FILE: kernel/power/range.c:782:
+EXPORT_SYMBOL(put_range_chain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#821: FILE: kernel/power/range.c:783:
+EXPORT_SYMBOL(add_to_range_chain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#822: FILE: kernel/power/range.c:784:
+EXPORT_SYMBOL(PageRangePage);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227951.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 91 errors, 45 warnings, 69 checks, 784 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227951.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
