WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
--- linux-2.5.59-lch2/include/linux/brlock.h	17 Jan 2003 11:15:51 -0000	1.1.1.1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/cpu.h:1:
+#ifndef _LINUX_CPU_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/sched.h:459:
+extern void migrate_all_tasks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/sched.h:465:
+extern void wake_idle_cpu(unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/smp.h:116:
+extern int register_cpu_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/smp.h:117:
+extern void unregister_cpu_notifier(struct notifier_block *nb);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#203: FILE: kernel/cpu.c:36:
+ * cpu' with certain environment variables set.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#219: FILE: kernel/cpu.c:52:
+	envp [i++] = "HOME=/";

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#220: FILE: kernel/cpu.c:53:
+	envp [i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#221: FILE: kernel/cpu.c:54:
+	envp [i++] = cpu_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#222: FILE: kernel/cpu.c:55:
+	envp [i++] = action_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#223: FILE: kernel/cpu.c:56:
+	envp [i] = NULL;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#225: FILE: kernel/cpu.c:58:
+	return call_usermodehelper(argv [0], argv, envp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: kernel/cpu.c:65:
+^Iif ((ret = down_interruptible(&cpucontrol)) != 0) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#232: FILE: kernel/cpu.c:65:
+	if ((ret = down_interruptible(&cpucontrol)) != 0) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: kernel/cpu.c:84:
+		printk("CPU disable failed: %i\n", ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#254: FILE: kernel/cpu.c:87:
+	BUG_ON(cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: kernel/cpu.c:90:
+           not running now). */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#257: FILE: kernel/cpu.c:90:
+	/* Move other tasks off to other CPUs (simple since they are
+           not running now). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: kernel/cpu.c:90:
+           not running now). */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#272: FILE: kernel/cpu.c:105:
+	printk("Done DEAD notifier.\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#283: FILE: kernel/cpu.c:116:
+			if (p->thread_info->cpu == cpu
+			    && !(p->state & TASK_ZOMBIE))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#284: FILE: kernel/cpu.c:117:
+				printk("Left %s\n", p->comm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#288: FILE: kernel/cpu.c:121:
+	printk("Done cpu down: %i.\n", ret);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#298: FILE: kernel/cpu.c:131:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#298: FILE: kernel/cpu.c:131:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: kernel/cpu.c:139:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: kernel/cpu.c:139:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: kernel/cpu.c:143:
+	printk("cpu%d sending cpu%d %s\n", smp_processor_id(), cpu->sysdev.id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: kernel/cpu.c:144:
+	printk("cpu%d sending cpu%d %s\n", smp_processor_id(), cpu->sysdev.id,
+		(buf[0] == '1') ? "ONLINE" : "OFFLINE");

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0600' used
#327: FILE: kernel/cpu.c:160:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: kernel/cpu.c:167:
+       return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#334: FILE: kernel/cpu.c:167:
+       return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#357: FILE: kernel/cpu.c:220:
+}
+void unregister_cpu_notifier(struct notifier_block *nb)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#360: FILE: kernel/cpu.c:223:
+}
+int __devinit cpu_up(unsigned int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#360: FILE: kernel/cpu.c:223:
+int __devinit cpu_up(unsigned int cpu)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#362: FILE: kernel/cpu.c:225:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#364: FILE: kernel/cpu.c:227:
+}
+int cpu_down(unsigned int cpu)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: kernel/cpu.c:229:
+       return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#366: FILE: kernel/cpu.c:229:
+       return -ENOSYS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#388: FILE: kernel/cpu.c:251:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#401: FILE: kernel/cpu.c:264:
+__initcall(register_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#403: FILE: kernel/cpu.c:266:
+EXPORT_SYMBOL_GPL(register_cpu_notifier);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#404: FILE: kernel/cpu.c:267:
+EXPORT_SYMBOL_GPL(unregister_cpu_notifier);

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: kernel/rcupdate.c:212:
+        tasklet_kill(&RCU_tasklet(cpu));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: kernel/rcupdate.c:212:
+        tasklet_kill(&RCU_tasklet(cpu));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: kernel/rcupdate.c:213:
+        list_del_init(&RCU_curlist(cpu));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: kernel/rcupdate.c:213:
+        list_del_init(&RCU_curlist(cpu));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: kernel/rcupdate.c:214:
+        list_del_init(&RCU_nxtlist(cpu));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: kernel/rcupdate.c:214:
+        list_del_init(&RCU_nxtlist(cpu));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: kernel/rcupdate.c:215:
+        memset(&per_cpu(rcu_data, cpu), 0, sizeof(struct rcu_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: kernel/rcupdate.c:215:
+        memset(&per_cpu(rcu_data, cpu), 0, sizeof(struct rcu_data));$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#424: FILE: kernel/rcupdate.c:218:
 static int __devinit rcu_cpu_notify(struct notifier_block *self, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: kernel/rcupdate.c:227:
+                rcu_offline_cpu(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: kernel/rcupdate.c:227:
+                rcu_offline_cpu(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: kernel/rcupdate.c:228:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: kernel/rcupdate.c:228:
+                break;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#483: FILE: kernel/sched.c:943:
+	/* CPU going down is a special case: we don't pull more tasks
+	   onboard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#483: FILE: kernel/sched.c:943:
+	   onboard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#549: FILE: kernel/sched.c:2248:
+/* Move (not current) task off this cpu, onto dest cpu.  Reference to
+   task must be held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#549: FILE: kernel/sched.c:2248:
+   task must be held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#579: FILE: kernel/sched.c:2278:
+/* Slow but sure.  We don't fight against load_balance, new people
+   setting affinity, or try_to_wake_up's fast path pulling things in,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#580: FILE: kernel/sched.c:2279:
+   as cpu_online() no longer true. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#595: FILE: kernel/sched.c:2294:
+		/* Kernel threads which are bound to specific
+		   processors need to look after themselves

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#596: FILE: kernel/sched.c:2295:
+		   with their own callbacks */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t->mm"
#597: FILE: kernel/sched.c:2296:
+		if (t->mm == NULL && t->cpus_allowed != ~0UL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#634: FILE: kernel/sched.c:2333:
+		schedule_timeout(30*HZ);
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: kernel/sched.c:2388:
+		move_task_away(req->task,
+			any_online_cpu(req->task->cpus_allowed));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#698: FILE: kernel/sched.c:2393:
+	printk("Migration thread for %u exiting\n", cpu);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#722: FILE: kernel/sched.c:2417:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#749: FILE: kernel/softirq.c:301:
+static struct task_struct *ksoftirq_killer = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#756: FILE: kernel/softirq.c:308:
+		BUG();

WARNING:MEMORY_BARRIER: memory barrier without comment
#775: FILE: kernel/softirq.c:327:
+		rmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#785: FILE: kernel/softirq.c:342:
+	printk("ksoftirqd for %i dying\n", cpu);

WARNING:MEMORY_BARRIER: memory barrier without comment
#787: FILE: kernel/softirq.c:344:
+	wmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#793: FILE: kernel/softirq.c:350:
 static int __devinit cpu_callback(struct notifier_block *nfb,

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: kernel/softirq.c:367:
+ ^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#813: FILE: kernel/softirq.c:367:
+ ^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: kernel/softirq.c:367:
+ ^I^Ibreak;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#819: FILE: kernel/softirq.c:373:
+		/* Kill ksoftirqd: get ref in case it exits before we
+		   wake it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#819: FILE: kernel/softirq.c:373:
+		   wake it */

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#856: FILE: kernel/softirq.c:409:
 static struct notifier_block __devinitdata cpu_nfb = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#886: FILE: kernel/timer.c:1174:
 static int __devinit timer_cpu_notify(struct notifier_block *self, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#894: FILE: kernel/timer.c:1183:
+	/* wait for pending timers?
+	case CPU_OFFLINE:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#982: FILE: kernel/workqueue.c:292:
+		BUG_ON(!cwq->thread);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1050: FILE: kernel/workqueue.c:339:
+		wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1052: FILE: kernel/workqueue.c:341:
+		wmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1056: FILE: kernel/workqueue.c:345:
+		printk("Workqueue thread %s for cpu %i exited\n",

CHECK:BRACES: Unbalanced braces around else statement
#1058: FILE: kernel/workqueue.c:347:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1059: FILE: kernel/workqueue.c:348:
+		printk("NO workqueue thread %s for cpu %i\n",

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1092: FILE: kernel/workqueue.c:370:
+static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1105: FILE: kernel/workqueue.c:383:
+				printk("workqueue for %i failed\n", hotcpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1113: FILE: kernel/workqueue.c:391:
+			printk("Cleaning up workqueue for %s\n", wq->name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396110.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 58 warnings, 14 checks, 981 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396110.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
