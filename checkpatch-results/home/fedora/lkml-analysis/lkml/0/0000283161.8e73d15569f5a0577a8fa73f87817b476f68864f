ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#48: 
--- a/include/linux/kernel.h	Sun May  9 20:27:15 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: space required after that ',' (ctx:OxV)
#54: FILE: include/linux/kernel.h:83:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));
                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: include/linux/kernel.h:83:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#54: FILE: include/linux/kernel.h:83:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#54: FILE: include/linux/kernel.h:83:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#54: FILE: include/linux/kernel.h:83:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: lib/Kconfig:24:
+config QSORT
+	bool "Quick Sort"
+
 #
 # compression support is select'ed if needed
 #

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: lib/qsort.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: lib/qsort.c:25:
+  do {^I^I^I^I^I      \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#111: FILE: lib/qsort.c:25:
+  do {					      \
+      size_t __size = (size);		      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: lib/qsort.c:26:
+      size_t __size = (size);^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: lib/qsort.c:27:
+      char *__a = (a), *__b = (b);^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: lib/qsort.c:28:
+      do {^I^I^I^I      \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#114: FILE: lib/qsort.c:28:
+      do {				      \
+	  char __tmp = *__a;		      \

WARNING:TABSTOP: Statements should start on a tabstop
#115: FILE: lib/qsort.c:29:
+	  char __tmp = *__a;		      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: lib/qsort.c:33:
+    } while (0)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#122: FILE: lib/qsort.c:36:
+/* Discontinue quicksort algorithm when partition gets below this
+   size.  This particular magic number was chosen to work best on a

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#123: FILE: lib/qsort.c:37:
+   Sun 4/260. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#127: FILE: lib/qsort.c:41:
+ * obligations. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#128: FILE: lib/qsort.c:42:
+typedef struct {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#137: FILE: lib/qsort.c:51:
+ * per byte (CHAR_BIT) * sizeof(size_t).  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#146: FILE: lib/qsort.c:60:
+/* Order size using quicksort.  This implementation incorporates four
+   optimizations discussed in Sedgewick:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: lib/qsort.c:86:
+      int (*cmp)(const void*, const void*))$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#179: FILE: lib/qsort.c:93:
+	if (total_elems == 0) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: lib/qsort.c:108:
+			/* Select median value from among LO, MID, and
+			   HI. Rearrange LO and HI so the three values

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#198: FILE: lib/qsort.c:112:
+			   and RIGHT_PTR in the while loops. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#202: FILE: lib/qsort.c:116:
+			if ((*cmp)((void*)mid, (void*)lo) < 0)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#202: FILE: lib/qsort.c:116:
+			if ((*cmp)((void*)mid, (void*)lo) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#204: FILE: lib/qsort.c:118:
+			if ((*cmp)((void*)hi, (void*)mid) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#204: FILE: lib/qsort.c:118:
+			if ((*cmp)((void*)hi, (void*)mid) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#208: FILE: lib/qsort.c:122:
+			if ((*cmp)((void*)mid, (void*)lo) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#208: FILE: lib/qsort.c:122:
+			if ((*cmp)((void*)mid, (void*)lo) < 0)

WARNING:INDENTED_LABEL: labels should not be indented
#210: FILE: lib/qsort.c:124:
+		jump_over:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: lib/qsort.c:130:
+			/* Here's the famous ``collapse the walls''
+			   section of quicksort.  Gotta like those

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: lib/qsort.c:133:
+			   than others. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#221: FILE: lib/qsort.c:135:
+				while ((*cmp)((void*)left_ptr, (void*)mid) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#221: FILE: lib/qsort.c:135:
+				while ((*cmp)((void*)left_ptr, (void*)mid) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#224: FILE: lib/qsort.c:138:
+				while ((*cmp)((void*)mid, (void*)right_ptr) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#224: FILE: lib/qsort.c:138:
+				while ((*cmp)((void*)mid, (void*)right_ptr) < 0)

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#241: FILE: lib/qsort.c:155:
+			}
+			while (left_ptr <= right_ptr);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#244: FILE: lib/qsort.c:158:
+			/* Set up pointers for next iteration.  First
+			   determine whether left and right partitions

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: lib/qsort.c:162:
+			   continue sorting the smaller one. */

CHECK:SPACING: No space is necessary after a cast
#250: FILE: lib/qsort.c:164:
+			if ((size_t) (right_ptr - lo) <= max_thresh) {

CHECK:SPACING: No space is necessary after a cast
#251: FILE: lib/qsort.c:165:
+				if ((size_t) (hi - left_ptr) <= max_thresh)

CHECK:SPACING: No space is necessary after a cast
#257: FILE: lib/qsort.c:171:
+			} else if ((size_t) (hi - left_ptr) <= max_thresh)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#273: FILE: lib/qsort.c:187:
+	/* Once the BASE_PTR array is partially sorted by quicksort
+	   the rest is completely sorted using insertion sort, since

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#277: FILE: lib/qsort.c:191:
+	   array (*not* one beyond it!). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#286: FILE: lib/qsort.c:200:
+		/* Find smallest element in first threshold and place
+		   it at the array's beginning.  This is the smallest

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#288: FILE: lib/qsort.c:202:
+		   insertion sort's inner loop. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#291: FILE: lib/qsort.c:205:
+			if ((*cmp)((void*)run_ptr, (void*)tmp_ptr) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#291: FILE: lib/qsort.c:205:
+			if ((*cmp)((void*)run_ptr, (void*)tmp_ptr) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#298: FILE: lib/qsort.c:212:
+		 * right-hand-side.  */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#303: FILE: lib/qsort.c:217:
+			while ((*cmp)((void*)run_ptr, (void*)tmp_ptr) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#303: FILE: lib/qsort.c:217:
+			while ((*cmp)((void*)run_ptr, (void*)tmp_ptr) < 0)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#324: FILE: lib/qsort.c:238:
+EXPORT_SYMBOL(qsort);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283161.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 34 warnings, 4 checks, 262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283161.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
