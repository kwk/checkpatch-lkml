ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#65: 
--- a/include/linux/udp.h	Thu Nov 14 12:55:45 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: net/ipv4/af_inet.c:1164:
+extern void fib_proc_exit(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: net/ipv4/af_inet.c:1165:
+extern int  ip_misc_proc_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#110: FILE: net/ipv4/af_inet.c:1166:
+extern int  raw_proc_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#111: FILE: net/ipv4/af_inet.c:1167:
+extern void raw_proc_exit(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#112: FILE: net/ipv4/af_inet.c:1168:
+extern int  tcp_get_info(char *buffer, char **start, off_t offset, int length);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#113: FILE: net/ipv4/af_inet.c:1169:
+extern int  udp_proc_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#114: FILE: net/ipv4/af_inet.c:1170:
+extern void udp_proc_exit(void);

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#162: FILE: net/ipv4/raw.c:43:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seq' may be better as '(seq)' to avoid precedence issues
#236: FILE: net/ipv4/raw.c:692:
+#define raw_seq_private(seq) ((struct raw_iter_state *)&seq->private)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#241: FILE: net/ipv4/raw.c:697:
+	struct raw_iter_state* state = raw_seq_private(seq);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#255: FILE: net/ipv4/raw.c:711:
+	struct raw_iter_state* state = raw_seq_private(seq);

WARNING:INLINE: plain inline is preferred over __inline__
#302: FILE: net/ipv4/raw.c:758:
+static __inline__ char *get_raw_sock(struct sock *sp, char *tmpbuf, int i)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: net/ipv4/raw.c:781:
+		seq_printf(seq, "%-127s\n",
 			       "  sl  local_address rem_address   st tx_queue "

CHECK:BRACES: Unbalanced braces around else statement
#336: FILE: net/ipv4/raw.c:784:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#381: FILE: net/ipv4/raw.c:793:
+static struct seq_operations raw_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#393: FILE: net/ipv4/raw.c:805:
+static struct file_operations raw_seq_fops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#405: FILE: net/ipv4/raw.c:817:
+	p = create_proc_entry("raw", S_IRUGO, proc_net);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000413910.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 12 warnings, 3 checks, 350 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000413910.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
