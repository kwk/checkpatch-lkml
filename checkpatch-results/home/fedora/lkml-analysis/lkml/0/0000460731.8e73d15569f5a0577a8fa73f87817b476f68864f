WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#32: 
       error = filp->f_op->lock(filp, cmd, &file_lock);
                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -Naur linux-2.4.10/fs/lockd/svclock.c linux-2.4.10-patch/fs/lockd/svclock.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#45: FILE: fs/lockd/svclock.c:241:
+            /* If the filesystem defined its own lock operation, invoke it. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#46: FILE: fs/lockd/svclock.c:242:
+           if ((block->b_file->f_file.f_op) && (block->b_file->f_file.f_op->lock)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#46: FILE: fs/lockd/svclock.c:242:
+           if ((block->b_file->f_file.f_op) && (block->b_file->f_file.f_op->lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#46: FILE: fs/lockd/svclock.c:242:
+           if ((block->b_file->f_file.f_op) && (block->b_file->f_file.f_op->lock)) {
+                 int error;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block->b_file->f_file.f_op'
#46: FILE: fs/lockd/svclock.c:242:
+           if ((block->b_file->f_file.f_op) && (block->b_file->f_file.f_op->lock)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block->b_file->f_file.f_op->lock'
#46: FILE: fs/lockd/svclock.c:242:
+           if ((block->b_file->f_file.f_op) && (block->b_file->f_file.f_op->lock)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#47: FILE: fs/lockd/svclock.c:243:
+                 int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: fs/lockd/svclock.c:243:
+                 int error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#48: FILE: fs/lockd/svclock.c:244:
+                 error = block->b_file->f_file.f_op->lock(&block->b_file->f_file, F_SETLK, fl);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#48: FILE: fs/lockd/svclock.c:244:
+                 int error;
+                 error = block->b_file->f_file.f_op->lock(&block->b_file->f_file, F_SETLK, fl);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: fs/lockd/svclock.c:244:
+                 error = block->b_file->f_file.f_op->lock(&block->b_file->f_file, F_SETLK, fl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#49: FILE: fs/lockd/svclock.c:245:
+                 dprintk("nlmsvc_delete_block: filesystem (un)lock operation returned %d\n", error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: fs/lockd/svclock.c:245:
+                 dprintk("nlmsvc_delete_block: filesystem (un)lock operation returned %d\n", error);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#50: FILE: fs/lockd/svclock.c:246:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: fs/lockd/svclock.c:246:
+           }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#58: FILE: fs/lockd/svclock.c:329:
      if (!(conflock = posix_test_lock(&file->f_file, &lock->fl))) {
[...]
+           error = 0;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#60: FILE: fs/lockd/svclock.c:330:
      if (!(conflock = posix_test_lock(&file->f_file, &lock->fl))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: fs/lockd/svclock.c:331:
+           /* If the filesystem defined its own lock operation, invoke it. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: fs/lockd/svclock.c:332:
+           error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: fs/lockd/svclock.c:332:
+           error = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: fs/lockd/svclock.c:333:
+           if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: fs/lockd/svclock.c:333:
+           if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#63: FILE: fs/lockd/svclock.c:333:
+           if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {
+                 error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op'
#63: FILE: fs/lockd/svclock.c:333:
+           if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op->lock'
#63: FILE: fs/lockd/svclock.c:333:
+           if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: fs/lockd/svclock.c:334:
+                 error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/lockd/svclock.c:334:
+                 error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: fs/lockd/svclock.c:335:
+                 dprintk("nlmsvc_lock: filesystem lock operation returned %d\n", error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: fs/lockd/svclock.c:335:
+                 dprintk("nlmsvc_lock: filesystem lock operation returned %d\n", error);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: fs/lockd/svclock.c:336:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: fs/lockd/svclock.c:336:
+           }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: fs/lockd/svclock.c:338:
+           if (error == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: fs/lockd/svclock.c:338:
+           if (error == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#68: FILE: fs/lockd/svclock.c:338:
+           if (error == 0)
+                 error = posix_lock_file(&file->f_file, &lock->fl, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: fs/lockd/svclock.c:339:
+                 error = posix_lock_file(&file->f_file, &lock->fl, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: fs/lockd/svclock.c:339:
+                 error = posix_lock_file(&file->f_file, &lock->fl, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: fs/lockd/svclock.c:368:
+     if (posix_locks_deadlock(&lock->fl, conflock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#77: FILE: fs/lockd/svclock.c:368:
+     if (posix_locks_deadlock(&lock->fl, conflock)) {
+           up(&file->f_sema);

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: fs/lockd/svclock.c:369:
+           up(&file->f_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: fs/lockd/svclock.c:369:
+           up(&file->f_sema);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: fs/lockd/svclock.c:370:
+           return nlm_lck_denied; /* EDEADLK */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: fs/lockd/svclock.c:370:
+           return nlm_lck_denied; /* EDEADLK */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: fs/lockd/svclock.c:371:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: fs/lockd/svclock.c:382:
+     if (!conflock) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#89: FILE: fs/lockd/svclock.c:382:
+     if (!conflock) {
+           printk("nlmsvc_lock: BUG! Trying to block without a conflock!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: fs/lockd/svclock.c:383:
+           printk("nlmsvc_lock: BUG! Trying to block without a conflock!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: fs/lockd/svclock.c:383:
+           printk("nlmsvc_lock: BUG! Trying to block without a conflock!\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#90: FILE: fs/lockd/svclock.c:383:
+           printk("nlmsvc_lock: BUG! Trying to block without a conflock!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: fs/lockd/svclock.c:384:
+           BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: fs/lockd/svclock.c:384:
+           BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: fs/lockd/svclock.c:384:
+           BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: fs/lockd/svclock.c:385:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: fs/lockd/svclock.c:418:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#102: FILE: fs/lockd/svclock.c:418:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {
+           int error;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op'
#102: FILE: fs/lockd/svclock.c:418:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op->lock'
#102: FILE: fs/lockd/svclock.c:418:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: fs/lockd/svclock.c:419:
+           int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: fs/lockd/svclock.c:419:
+           int error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: fs/lockd/svclock.c:421:
+           error = file->f_file.f_op->lock(&file->f_file, F_GETLK, &lock->fl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: fs/lockd/svclock.c:421:
+           error = file->f_file.f_op->lock(&file->f_file, F_GETLK, &lock->fl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: fs/lockd/svclock.c:422:
+           if ((!error) && (lock->fl.fl_type != F_UNLCK))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/lockd/svclock.c:422:
+           if ((!error) && (lock->fl.fl_type != F_UNLCK))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#106: FILE: fs/lockd/svclock.c:422:
+           if ((!error) && (lock->fl.fl_type != F_UNLCK))
+           {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#106: FILE: fs/lockd/svclock.c:422:
+           if ((!error) && (lock->fl.fl_type != F_UNLCK))
+           {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!error'
#106: FILE: fs/lockd/svclock.c:422:
+           if ((!error) && (lock->fl.fl_type != F_UNLCK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lock->fl.fl_type != F_UNLCK'
#106: FILE: fs/lockd/svclock.c:422:
+           if ((!error) && (lock->fl.fl_type != F_UNLCK))

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: fs/lockd/svclock.c:423:
+           {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: fs/lockd/svclock.c:423:
+           {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: fs/lockd/svclock.c:424:
+                 conflock->caller = "somehost";  /* FIXME */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/lockd/svclock.c:424:
+                 conflock->caller = "somehost";  /* FIXME */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: fs/lockd/svclock.c:425:
+                 conflock->oh.len = 0;   /* don't return OH info */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: fs/lockd/svclock.c:425:
+                 conflock->oh.len = 0;   /* don't return OH info */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: fs/lockd/svclock.c:426:
+                 conflock->fl = lock->fl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: fs/lockd/svclock.c:426:
+                 conflock->fl = lock->fl;$

WARNING:LONG_LINE_STRING: line length of 128 exceeds 100 columns
#111: FILE: fs/lockd/svclock.c:427:
+                 dprintk("nlmsvc_testlock: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: fs/lockd/svclock.c:427:
+                 dprintk("nlmsvc_testlock: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: fs/lockd/svclock.c:427:
+                 dprintk("nlmsvc_testlock: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",$

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#111: FILE: fs/lockd/svclock.c:427:
+                 dprintk("nlmsvc_testlock: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#112: FILE: fs/lockd/svclock.c:428:
+                       error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: fs/lockd/svclock.c:428:
+                       error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: fs/lockd/svclock.c:428:
+                 dprintk("nlmsvc_testlock: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",
+                       error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: fs/lockd/svclock.c:428:
+                       error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: fs/lockd/svclock.c:429:
+                 return nlm_lck_denied;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: fs/lockd/svclock.c:429:
+                 return nlm_lck_denied;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: fs/lockd/svclock.c:430:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: fs/lockd/svclock.c:430:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: fs/lockd/svclock.c:431:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/lockd/svclock.c:471:
+     error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/lockd/svclock.c:472:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#128: FILE: fs/lockd/svclock.c:472:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {
+           error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op'
#128: FILE: fs/lockd/svclock.c:472:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op->lock'
#128: FILE: fs/lockd/svclock.c:472:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/lockd/svclock.c:473:
+           error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/lockd/svclock.c:473:
+           error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: fs/lockd/svclock.c:474:
+           dprintk("nlmsvc_unlock: filesystem (un)lock operation returned error %d\n", error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/lockd/svclock.c:474:
+           dprintk("nlmsvc_unlock: filesystem (un)lock operation returned error %d\n", error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/lockd/svclock.c:475:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/lockd/svclock.c:477:
+     if (error == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#133: FILE: fs/lockd/svclock.c:477:
+     if (error == 0)
+           error = posix_lock_file(&file->f_file, &lock->fl, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/lockd/svclock.c:478:
+           error = posix_lock_file(&file->f_file, &lock->fl, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/lockd/svclock.c:478:
+           error = posix_lock_file(&file->f_file, &lock->fl, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: fs/lockd/svclock.c:572:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 5)
#144: FILE: fs/lockd/svclock.c:572:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {
+     struct file_lock getlock;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op'
#144: FILE: fs/lockd/svclock.c:572:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op->lock'
#144: FILE: fs/lockd/svclock.c:572:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: fs/lockd/svclock.c:573:
+     struct file_lock getlock;$

WARNING:TYPO_SPELLING: 'inforation' may be misspelled - perhaps 'information'?
#147: FILE: fs/lockd/svclock.c:575:
+     /* save requestor lock inforation since GETLK will overwrite it */
                             ^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: fs/lockd/svclock.c:576:
+     getlock.fl_pid   = lock->fl.fl_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: fs/lockd/svclock.c:577:
+     getlock.fl_type  = lock->fl.fl_type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/lockd/svclock.c:578:
+     getlock.fl_start = lock->fl.fl_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: fs/lockd/svclock.c:579:
+     getlock.fl_end   = lock->fl.fl_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/lockd/svclock.c:581:
+     error = file->f_file.f_op->lock(&file->f_file, F_GETLK, &lock->fl);$

WARNING:TYPO_SPELLING: 'inforation' may be misspelled - perhaps 'information'?
#155: FILE: fs/lockd/svclock.c:583:
+     /* restore requestor lock inforation.  */
                                ^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/lockd/svclock.c:584:
+     lock->fl.fl_pid   = getlock.fl_pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/lockd/svclock.c:585:
+     lock->fl.fl_type  = getlock.fl_type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: fs/lockd/svclock.c:586:
+     lock->fl.fl_start = getlock.fl_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/lockd/svclock.c:587:
+     lock->fl.fl_end   = getlock.fl_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/lockd/svclock.c:589:
+     if ((!error) && (lock->fl.fl_type != F_UNLCK)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#161: FILE: fs/lockd/svclock.c:589:
+     if ((!error) && (lock->fl.fl_type != F_UNLCK)) {
+           dprintk("nlmsvc_grant_blocked: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!error'
#161: FILE: fs/lockd/svclock.c:589:
+     if ((!error) && (lock->fl.fl_type != F_UNLCK)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lock->fl.fl_type != F_UNLCK'
#161: FILE: fs/lockd/svclock.c:589:
+     if ((!error) && (lock->fl.fl_type != F_UNLCK)) {

WARNING:LONG_LINE_STRING: line length of 127 exceeds 100 columns
#162: FILE: fs/lockd/svclock.c:590:
+           dprintk("nlmsvc_grant_blocked: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: fs/lockd/svclock.c:590:
+           dprintk("nlmsvc_grant_blocked: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/lockd/svclock.c:590:
+           dprintk("nlmsvc_grant_blocked: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",$

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#162: FILE: fs/lockd/svclock.c:590:
+           dprintk("nlmsvc_grant_blocked: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/lockd/svclock.c:591:
+                 error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: fs/lockd/svclock.c:591:
+           dprintk("nlmsvc_grant_blocked: filesystem (get)lock operation returned error %d type %d pid %d start %Ld end %Ld\n",
+                 error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/lockd/svclock.c:591:
+                 error, lock->fl.fl_type, lock->fl.fl_pid, lock->fl.fl_start, lock->fl.fl_end);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: fs/lockd/svclock.c:592:
+           dprintk("lockd: lock still blocked\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: fs/lockd/svclock.c:592:
+           dprintk("lockd: lock still blocked\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: fs/lockd/svclock.c:594:
+           /* If the blocker is local and recorded in the vfs lock structures, use its$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: fs/lockd/svclock.c:595:
+           conflock to wait on.  If the lock is denied due to the filesystem call, we$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: fs/lockd/svclock.c:595:
+           /* If the blocker is local and recorded in the vfs lock structures, use its
+           conflock to wait on.  If the lock is denied due to the filesystem call, we

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: fs/lockd/svclock.c:596:
+           don't have a conflicting lock so retry in a while. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: fs/lockd/svclock.c:596:
+           don't have a conflicting lock so retry in a while. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: fs/lockd/svclock.c:598:
+           if ((conflock = posix_test_lock(&file->f_file, &lock->fl)) != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/lockd/svclock.c:598:
+           if ((conflock = posix_test_lock(&file->f_file, &lock->fl)) != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#170: FILE: fs/lockd/svclock.c:598:
+           if ((conflock = posix_test_lock(&file->f_file, &lock->fl)) != NULL) {
+                 nlmsvc_insert_block(block, NLM_NEVER);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#170: FILE: fs/lockd/svclock.c:598:
+           if ((conflock = posix_test_lock(&file->f_file, &lock->fl)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: fs/lockd/svclock.c:599:
+                 nlmsvc_insert_block(block, NLM_NEVER);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: fs/lockd/svclock.c:599:
+                 nlmsvc_insert_block(block, NLM_NEVER);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: fs/lockd/svclock.c:600:
+                 posix_block_lock(conflock, &lock->fl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: fs/lockd/svclock.c:600:
+                 posix_block_lock(conflock, &lock->fl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: fs/lockd/svclock.c:601:
+                 up(&file->f_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: fs/lockd/svclock.c:601:
+                 up(&file->f_sema);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: fs/lockd/svclock.c:602:
+                 return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: fs/lockd/svclock.c:602:
+                 return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: fs/lockd/svclock.c:603:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: fs/lockd/svclock.c:603:
+           }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: fs/lockd/svclock.c:604:
+           else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: fs/lockd/svclock.c:604:
+           else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#176: FILE: fs/lockd/svclock.c:604:
+           else {
+                 dprintk("nlmsvc_grant_blocked: NO conflock RECORDED IN THE VFS!\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#176: FILE: fs/lockd/svclock.c:604:
+           }
+           else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#176: FILE: fs/lockd/svclock.c:604:
+           else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/lockd/svclock.c:605:
+                 dprintk("nlmsvc_grant_blocked: NO conflock RECORDED IN THE VFS!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/lockd/svclock.c:605:
+                 dprintk("nlmsvc_grant_blocked: NO conflock RECORDED IN THE VFS!\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: fs/lockd/svclock.c:606:
+                 nlmsvc_insert_block(block, jiffies + 30 * HZ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: fs/lockd/svclock.c:606:
+                 nlmsvc_insert_block(block, jiffies + 30 * HZ);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/lockd/svclock.c:607:
+                 up(&file->f_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/lockd/svclock.c:607:
+                 up(&file->f_sema);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: fs/lockd/svclock.c:608:
+                 return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/lockd/svclock.c:608:
+                 return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/lockd/svclock.c:609:
+                 }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/lockd/svclock.c:609:
+                 }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/lockd/svclock.c:611:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/lockd/svclock.c:611:
+           }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#183: FILE: fs/lockd/svclock.c:611:
+
+           }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/lockd/svclock.c:612:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/lockd/svclock.c:629:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#195: FILE: fs/lockd/svclock.c:629:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {
+           error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op'
#195: FILE: fs/lockd/svclock.c:629:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_file.f_op->lock'
#195: FILE: fs/lockd/svclock.c:629:
+     if ((file->f_file.f_op) && (file->f_file.f_op->lock)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/lockd/svclock.c:630:
+           error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/lockd/svclock.c:630:
+           error = file->f_file.f_op->lock(&file->f_file, F_SETLK, &lock->fl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/lockd/svclock.c:631:
+           dprintk("nlmsvc_grant_blocked: filesystem lock operation returned error %d\n", error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/lockd/svclock.c:631:
+           dprintk("nlmsvc_grant_blocked: filesystem lock operation returned error %d\n", error);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/lockd/svclock.c:632:
+           if (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/lockd/svclock.c:632:
+           if (error) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#198: FILE: fs/lockd/svclock.c:632:
+           if (error) {
+                 printk(KERN_WARNING "lockd: unexpected error %d in %s!\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/lockd/svclock.c:633:
+                 printk(KERN_WARNING "lockd: unexpected error %d in %s!\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/lockd/svclock.c:633:
+                 printk(KERN_WARNING "lockd: unexpected error %d in %s!\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#199: FILE: fs/lockd/svclock.c:633:
+                 printk(KERN_WARNING "lockd: unexpected error %d in %s!\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/lockd/svclock.c:634:
+                       error, __FUNCTION__);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: fs/lockd/svclock.c:634:
+                 printk(KERN_WARNING "lockd: unexpected error %d in %s!\n",
+                       error, __FUNCTION__);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/lockd/svclock.c:634:
+                       error, __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#200: FILE: fs/lockd/svclock.c:634:
+                       error, __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: fs/lockd/svclock.c:635:
+                 nlmsvc_insert_block(block, jiffies + 10 * HZ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: fs/lockd/svclock.c:635:
+                 nlmsvc_insert_block(block, jiffies + 10 * HZ);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: fs/lockd/svclock.c:636:
+                 up(&file->f_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/lockd/svclock.c:636:
+                 up(&file->f_sema);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/lockd/svclock.c:637:
+                 return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/lockd/svclock.c:637:
+                 return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: fs/lockd/svclock.c:638:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/lockd/svclock.c:638:
+           }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/lockd/svclock.c:639:
+     }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: fs/locks.c:664:
+int posix_locks_deadlock(struct file_lock *caller_fl,
                        struct file_lock *block_fl)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/fs.h:608:
+extern int posix_locks_deadlock(struct file_lock *, struct file_lock *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#229: FILE: include/linux/fs.h:608:
+extern int posix_locks_deadlock(struct file_lock *, struct file_lock *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#229: FILE: include/linux/fs.h:608:
+extern int posix_locks_deadlock(struct file_lock *, struct file_lock *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 63 errors, 114 warnings, 24 checks, 184 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
