WARNING:TYPO_SPELLING: 'suppoort' may be misspelled - perhaps 'support'?
#15: 
Subject: [wip-PATCH] rfi: PAGE_CACHE_SIZE suppoort
                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -ur /md0/kernels/2.4/v2.4.6-pre8/arch/i386/boot/install.sh pgc-2.4.6-pre8/arch/i386/boot/install.sh

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: fs/buffer.c:1287:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#106: FILE: fs/buffer.c:1673:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#118: FILE: fs/buffer.c:1699:
+				unsigned offset = i * blocksize;

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: fs/buffer.c:1700:
+				unsigned offset = i * blocksize;
+				map += offset >> PAGE_SHIFT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#163: FILE: fs/ext2/dir.c:68:
+	unsigned limit = PAGE_SIZE;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#171: FILE: fs/ext2/dir.c:74:
+		limit = dir->i_size & (PAGE_CACHE_SIZE-1);
 		                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#183: FILE: fs/ext2/dir.c:84:
+		for (offs = limit; offs<PAGE_SIZE; offs += chunk_size) {
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: fs/ext2/dir.c:86:
+			ext2_dirent *p;
+			p = (ext2_dirent*)(kaddr + offs);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#185: FILE: fs/ext2/dir.c:86:
+			p = (ext2_dirent*)(kaddr + offs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: fs/ext2/dir.c:91:
+printk("limit=%u  idx=%d  size=%Ld\n", limit, page - base, dir->i_size);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#192: FILE: fs/ext2/dir.c:91:
+printk("limit=%u  idx=%d  size=%Ld\n", limit, page - base, dir->i_size);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#210: FILE: fs/ext2/dir.c:138:
+		dir->i_ino, error, (base->index<<PAGE_CACHE_SHIFT)+offs,
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: fs/ext2/dir.c:138:
+		dir->i_ino, error, (base->index<<PAGE_CACHE_SHIFT)+offs,
 		                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#219: FILE: fs/ext2/dir.c:147:
+		dir->i_ino, (base->index<<PAGE_CACHE_SHIFT)+offs,
 		                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: fs/ext2/dir.c:147:
+		dir->i_ino, (base->index<<PAGE_CACHE_SHIFT)+offs,
 		                                           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#228: FILE: fs/ext2/dir.c:156:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/ext2/dir.c:157:
+	unsigned i;
+	for (i=0; i<PAGE_CACHE_PAGES; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#229: FILE: fs/ext2/dir.c:157:
+	for (i=0; i<PAGE_CACHE_PAGES; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#229: FILE: fs/ext2/dir.c:157:
+	for (i=0; i<PAGE_CACHE_PAGES; i++)
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#230: FILE: fs/ext2/dir.c:158:
+		__ext2_check_page(page, page+i);
 		                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#299: FILE: fs/ext2/dir.c:337:
+		unsigned i;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#310: FILE: fs/ext2/dir.c:342:
+		for (i=0; i<PAGE_CACHE_PAGES; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#310: FILE: fs/ext2/dir.c:342:
+		for (i=0; i<PAGE_CACHE_PAGES; i++) {
 		           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#312: FILE: fs/ext2/dir.c:344:
+			struct page *map = page + i;
+			kaddr = kmap(map);

CHECK:SPACING: No space is necessary after a cast
#313: FILE: fs/ext2/dir.c:345:
+			de = (ext2_dirent *) kaddr;

CHECK:SPACING: No space is necessary after a cast
#315: FILE: fs/ext2/dir.c:347:
+			for ( ; (char *) de <= kaddr ; de = ext2_next_entry(de))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: fs/ext2/dir.c:348:
+				if (ext2_match (namelen, name, de)) {

CHECK:SPACING: No space is necessary after a cast
#337: FILE: fs/ext2/dir.c:365:
+		de = ext2_next_entry((ext2_dirent *) kmap(page));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#349: FILE: fs/ext2/dir.c:390:
+	unsigned from = (char *)de-(char*)page_address(map);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#349: FILE: fs/ext2/dir.c:390:
+	unsigned from = (char *)de-(char*)page_address(map);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#349: FILE: fs/ext2/dir.c:390:
+	unsigned from = (char *)de-(char*)page_address(map);
 	                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#377: FILE: fs/ext2/dir.c:428:
+		unsigned i;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#396: FILE: fs/ext2/dir.c:433:
+		for (i=0; i<PAGE_CACHE_PAGES; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#396: FILE: fs/ext2/dir.c:433:
+		for (i=0; i<PAGE_CACHE_PAGES; i++) {
 		           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#403: FILE: fs/ext2/dir.c:440:
+				if (ext2_match (namelen, name, de))

CHECK:SPACING: No space is necessary after a cast
#411: FILE: fs/ext2/dir.c:448:
+				de = (ext2_dirent *) ((char *) de + rec_len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#421: FILE: fs/ext2/dir.c:457:
+	from = (char*)de - (kaddr - (PAGE_SIZE - reclen));

CHECK:BIT_MACRO: Prefer using the BIT macro
#468: FILE: include/linux/pagemap.h:29:
+#define PAGE_CACHE_PAGES	(1UL << CONFIG_PAGE_CACHE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#471: FILE: include/linux/pagemap.h:32:
+#define PAGE_CACHE_SIZE		(1UL << PAGE_CACHE_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#475: FILE: include/linux/pagemap.h:36:
+#define __page_cache_page(page)	(page - ((page - mem_map) & PAGE_CACHE_PMASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#475: FILE: include/linux/pagemap.h:36:
+#define __page_cache_page(page)	(page - ((page - mem_map) & PAGE_CACHE_PMASK))

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: include/linux/pagemap.h:60:
+	struct page *page;
+	page = alloc_pages(gfp, PAGE_CACHE_ORDER);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#503: FILE: include/linux/pagemap.h:62:
+		unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: include/linux/pagemap.h:63:
+		unsigned i;
+		for (i=0; i<PAGE_CACHE_PAGES; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#504: FILE: include/linux/pagemap.h:63:
+		for (i=0; i<PAGE_CACHE_PAGES; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#504: FILE: include/linux/pagemap.h:63:
+		for (i=0; i<PAGE_CACHE_PAGES; i++)
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: include/linux/pagemap.h:64:
+			SetPageCache(page+i);
 			                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#547: FILE: mm/filemap.c:1281:
+		unsigned this = PAGE_SIZE - offset;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#602: FILE: mm/filemap.c:1707:
+		pte ++;
 		    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < addr_min'
#768: FILE: mm/memory.c:1270:
+		if ((address < addr_min) || (address > addr_max))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address > addr_max'
#768: FILE: mm/memory.c:1270:
+		if ((address < addr_min) || (address > addr_max))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: mm/memory.c:1283:
+		else if (page_count(ppage) > 1 &&
 			   !(vma->vm_flags & VM_SHARED))

WARNING:SPACING: space prohibited before semicolon
#815: FILE: mm/memory.c:1308:
+	} while (++i < PAGE_CACHE_PAGES) ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'order != PAGE_CACHE_ORDER'
#826: FILE: mm/page_alloc.c:90:
+	if (PageCachePage(page) && (order != PAGE_CACHE_ORDER)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#827: FILE: mm/page_alloc.c:91:
+		printk("PageCachePage and order == %lu\n", order);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#828: FILE: mm/page_alloc.c:92:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#831: FILE: mm/page_alloc.c:95:
+	for (index=0; index < (1<<order); index++)
 	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#831: FILE: mm/page_alloc.c:95:
+	for (index=0; index < (1<<order); index++)
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#832: FILE: mm/page_alloc.c:96:
+		ClearPageCache(page+index);
 		                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000525780.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 25 warnings, 22 checks, 731 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000525780.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
