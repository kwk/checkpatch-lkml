WARNING:TYPO_SPELLING: 'archtectures' may be misspelled - perhaps 'architectures'?
#38: 
is enough for other archtectures. 
                    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'initalized' may be misspelled - perhaps 'initialized'?
#43: 
management structure (it means new pgdat) must be initalized ITSELF
                                                  ^^^^^^^^^^

ERROR:SPACING: space required before the open brace '{'
#74: FILE: mm/memory_hotplug.c:68:
+	if (!pgdat){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#75: FILE: mm/memory_hotplug.c:69:
+		printk(KERN_ERR "%s node_data allocation failed\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#75: FILE: mm/memory_hotplug.c:69:
+	if (!pgdat){
+		printk(KERN_ERR "%s node_data allocation failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: mm/memory_hotplug.c:70:
+		printk(KERN_ERR "%s node_data allocation failed\n",
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#76: FILE: mm/memory_hotplug.c:70:
+			__FUNCTION__);

ERROR:SPACING: space required before the open brace '{'
#87: FILE: mm/memory_hotplug.c:81:
+	if (IS_ERR(p)){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#88: FILE: mm/memory_hotplug.c:82:
+		printk(KERN_ERR "%s kswapd creation failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#88: FILE: mm/memory_hotplug.c:82:
+		printk(KERN_ERR "%s kswapd creation failed\n", __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#100: FILE: mm/memory_hotplug.c:94:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: mm/memory_hotplug.c:104:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/mmzone.h> instead of <asm/mmzone.h>
#135: FILE: include/linux/memory_hotplug.h:8:
+#include <asm/mmzone.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/memory_hotplug.h:67:
+extern unsigned long arch_pernode_size(int node);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/memory_hotplug.h:76:
+extern void set_node_data_array(int, pg_data_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/memory_hotplug.h:77:
+extern void clear_node_data_array(pg_data_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pg_data_t *' should also have an identifier name
#155: FILE: include/linux/memory_hotplug.h:77:
+extern void clear_node_data_array(pg_data_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/memory_hotplug.h:90:
+extern int new_pgdat_init(int, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/memory_hotplug.h:91:
+extern void release_pgdat(pg_data_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pg_data_t *' should also have an identifier name
#169: FILE: include/linux/memory_hotplug.h:91:
+extern void release_pgdat(pg_data_t *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103414.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 10 warnings, 8 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103414.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
