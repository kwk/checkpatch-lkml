WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
>for procfs means that we'll need to check the argument and grab dcache_lock

WARNING:INDENTED_LABEL: labels should not be indented
#135: FILE: fs/bad_inode.c:50:
+	create:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#136: FILE: fs/bad_inode.c:51:
+	lookup:			EIO_ERROR,
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#136: FILE: fs/bad_inode.c:51:
+	lookup:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#137: FILE: fs/bad_inode.c:52:
+	link:			EIO_ERROR,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#137: FILE: fs/bad_inode.c:52:
+	link:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#138: FILE: fs/bad_inode.c:53:
+	unlink:			EIO_ERROR,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#138: FILE: fs/bad_inode.c:53:
+	unlink:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#139: FILE: fs/bad_inode.c:54:
+	symlink:		EIO_ERROR,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#139: FILE: fs/bad_inode.c:54:
+	symlink:		EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#140: FILE: fs/bad_inode.c:55:
+	mkdir:			EIO_ERROR,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#140: FILE: fs/bad_inode.c:55:
+	mkdir:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#141: FILE: fs/bad_inode.c:56:
+	rmdir:			EIO_ERROR,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#141: FILE: fs/bad_inode.c:56:
+	rmdir:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#142: FILE: fs/bad_inode.c:57:
+	mknod:			EIO_ERROR,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#142: FILE: fs/bad_inode.c:57:
+	mknod:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#143: FILE: fs/bad_inode.c:58:
+	rename:			EIO_ERROR,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#143: FILE: fs/bad_inode.c:58:
+	rename:			EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#144: FILE: fs/bad_inode.c:59:
+	readlink:		EIO_ERROR,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#144: FILE: fs/bad_inode.c:59:
+	readlink:		EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#145: FILE: fs/bad_inode.c:60:
+	follow_link:		bad_follow_link,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#145: FILE: fs/bad_inode.c:60:
+	follow_link:		bad_follow_link,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#146: FILE: fs/bad_inode.c:61:
+	truncate:		EIO_ERROR,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#146: FILE: fs/bad_inode.c:61:
+	truncate:		EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#147: FILE: fs/bad_inode.c:62:
+	permission:		EIO_ERROR,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#147: FILE: fs/bad_inode.c:62:
+	permission:		EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#148: FILE: fs/bad_inode.c:63:
+	permission_locked:	EIO_ERROR,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#148: FILE: fs/bad_inode.c:63:
+	permission_locked:	EIO_ERROR,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#149: FILE: fs/bad_inode.c:64:
+	revalidate:		EIO_ERROR,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#149: FILE: fs/bad_inode.c:64:
+	revalidate:		EIO_ERROR,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: fs/namei.c:156:
+inline int vfs_permission(struct inode * inode, int mask)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#169: FILE: fs/namei.c:204:
+static inline int permission_locked(struct inode *inode, int mask) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#170: FILE: fs/namei.c:205:
+static inline int permission_locked(struct inode *inode, int mask) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#171: FILE: fs/namei.c:206:
+	struct inode_operations *i_op = inode->i_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: fs/namei.c:207:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: fs/namei.c:208:
+	if(i_op) {

ERROR:SPACING: space required before the open parenthesis '('
#174: FILE: fs/namei.c:209:
+		if(i_op->permission_locked) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#176: FILE: fs/namei.c:211:
+			return i_op->permission_locked(inode, mask);
+		} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/namei.c:212:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: fs/namei.c:215:
+^I^I^I * slow path $

ERROR:SPACING: space required before the open parenthesis '('
#182: FILE: fs/namei.c:217:
+			if(i_op->permission)

WARNING:INDENTED_LABEL: labels should not be indented
#261: FILE: fs/nfs/dir.c:57:
+	create:			nfs_create,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#262: FILE: fs/nfs/dir.c:58:
+	lookup:			nfs_lookup,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#262: FILE: fs/nfs/dir.c:58:
+	lookup:			nfs_lookup,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#263: FILE: fs/nfs/dir.c:59:
+	link:			nfs_link,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#263: FILE: fs/nfs/dir.c:59:
+	link:			nfs_link,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#264: FILE: fs/nfs/dir.c:60:
+	unlink:			nfs_unlink,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#264: FILE: fs/nfs/dir.c:60:
+	unlink:			nfs_unlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#265: FILE: fs/nfs/dir.c:61:
+	symlink:		nfs_symlink,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#265: FILE: fs/nfs/dir.c:61:
+	symlink:		nfs_symlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#266: FILE: fs/nfs/dir.c:62:
+	mkdir:			nfs_mkdir,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#266: FILE: fs/nfs/dir.c:62:
+	mkdir:			nfs_mkdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#267: FILE: fs/nfs/dir.c:63:
+	rmdir:			nfs_rmdir,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#267: FILE: fs/nfs/dir.c:63:
+	rmdir:			nfs_rmdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#268: FILE: fs/nfs/dir.c:64:
+	mknod:			nfs_mknod,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#268: FILE: fs/nfs/dir.c:64:
+	mknod:			nfs_mknod,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#269: FILE: fs/nfs/dir.c:65:
+	rename:			nfs_rename,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#269: FILE: fs/nfs/dir.c:65:
+	rename:			nfs_rename,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#270: FILE: fs/nfs/dir.c:66:
+	permission:		nfs_permission,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#270: FILE: fs/nfs/dir.c:66:
+	permission:		nfs_permission,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#271: FILE: fs/nfs/dir.c:67:
+	permission_locked:	nfs_permission_locked,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#271: FILE: fs/nfs/dir.c:67:
+	permission_locked:	nfs_permission_locked,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#272: FILE: fs/nfs/dir.c:68:
+	revalidate:		nfs_revalidate,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#272: FILE: fs/nfs/dir.c:68:
+	revalidate:		nfs_revalidate,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#273: FILE: fs/nfs/dir.c:69:
+	setattr:		nfs_notify_change,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#273: FILE: fs/nfs/dir.c:69:
+	setattr:		nfs_notify_change,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/nfs/dir.c:1103:
+int nfs_permission_locked(struct inode *inode, int mask) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: fs/nfs/dir.c:1123:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: fs/nfs/dir.c:1130:
+int nfs_permission(struct inode *inode, int mask) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: fs/nfs/dir.c:1134:
+^Iif(error != -EAGAIN) $

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: fs/nfs/dir.c:1134:
+	if(error != -EAGAIN) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: fs/nfs/dir.c:1138:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: fs/proc/base.c:316:
+	struct task_struct *task = proc_task(inode);
+	if((ret = vfs_permission(inode, mask)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#322: FILE: fs/proc/base.c:316:
+	if((ret = vfs_permission(inode, mask)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#322: FILE: fs/proc/base.c:316:
+	if((ret = vfs_permission(inode, mask)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open parenthesis '('
#328: FILE: fs/proc/base.c:322:
+	if(!task->fs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: fs/proc/base.c:328:
+           up if the roots aren't trivially the same */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#334: FILE: fs/proc/base.c:328:
+	/* It's not safe to grab a reference to task->fs, so we give
+           up if the roots aren't trivially the same */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#334: FILE: fs/proc/base.c:328:
+           up if the roots aren't trivially the same */

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: fs/proc/base.c:330:
+	if(task->fs->root != current->fs->root)

ERROR:SPACING: space required before the open parenthesis '('
#339: FILE: fs/proc/base.c:333:
+	if(task->fs->rootmnt != current->fs->rootmnt)

WARNING:INDENTED_LABEL: labels should not be indented
#359: FILE: fs/proc/base.c:967:
+	lookup:            proc_lookupfd,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#360: FILE: fs/proc/base.c:968:
+	permission:	   proc_permission,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#360: FILE: fs/proc/base.c:968:
+	permission:	   proc_permission,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#361: FILE: fs/proc/base.c:969:
+	permission_locked: proc_permission_locked,
 	                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#361: FILE: fs/proc/base.c:969:
+	permission_locked: proc_permission_locked,

WARNING:SPACING: Unnecessary space before function pointer arguments
#372: FILE: include/linux/fs.h:760:
+	int (*permission_locked) (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#372: FILE: include/linux/fs.h:760:
+	int (*permission_locked) (struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#372: FILE: include/linux/fs.h:760:
+	int (*permission_locked) (struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: include/linux/nfs_fs.h:241:
+extern int nfs_permission_locked(struct inode *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#383: FILE: include/linux/nfs_fs.h:241:
+extern int nfs_permission_locked(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#383: FILE: include/linux/nfs_fs.h:241:
+extern int nfs_permission_locked(struct inode *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460772.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 42 warnings, 2 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460772.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
