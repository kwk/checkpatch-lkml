WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#31: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#83: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:53:
+#define QPN_MAX                 (1 << 24)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#116: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:86:
+#define IB_PMA_PORT_XMIT_DATA	__constant_htons(0x0001)

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#117: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:87:
+#define IB_PMA_PORT_RCV_DATA	__constant_htons(0x0002)

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#118: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:88:
+#define IB_PMA_PORT_XMIT_PKTS	__constant_htons(0x0003)

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#119: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:89:
+#define IB_PMA_PORT_RCV_PKTS	__constant_htons(0x0004)

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#120: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:90:
+#define IB_PMA_PORT_XMIT_WAIT	__constant_htons(0x0005)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#126: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:96:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#133: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:103:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#154: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:124:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#171: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:141:
+} __attribute__ ((packed));

WARNING:TYPO_SPELLING: 'responsibilty' may be misspelled - perhaps 'responsibility'?
#249: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:219:
+ * It is the consumer's responsibilty to make sure that no QP
                         ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#263: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:233:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#298: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:268:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#392: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:362:
+static inline struct ipath_swqe *get_swqe_ptr(struct ipath_qp *qp, unsigned n)

CHECK:SPACING: No space is necessary after a cast
#394: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:364:
+	return (struct ipath_swqe *)((char *) qp->s_wq +

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#403: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:373:
+static inline struct ipath_rwqe *get_rwqe_ptr(struct ipath_rq *rq, unsigned n)

CHECK:SPACING: No space is necessary after a cast
#405: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:375:
+	return (struct ipath_rwqe *)((char *) rq->wq +

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#421: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:391:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#430: FILE: drivers/infiniband/hw/ipath/ipath_verbs.h:400:
+	spinlock_t lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#567: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#613: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:47:
+extern unsigned ib_ipath_debug;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#615: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:49:
+#define _VERBS_ERROR(fmt,...) \
                         ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#615: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:49:
+#define _VERBS_ERROR(fmt,...) \
+	do { \
+		printk(KERN_ERR "%s: " fmt, "ib_ipath", ##__VA_ARGS__); \
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#617: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:51:
+		printk(KERN_ERR "%s: " fmt, "ib_ipath", ##__VA_ARGS__); \

ERROR:SPACING: space required before the open parenthesis '('
#618: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:52:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:54:
+#define _VERBS_UNIT_ERROR(unit,fmt,...) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:54:
+#define _VERBS_UNIT_ERROR(unit,fmt,...) \
                                   ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#620: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:54:
+#define _VERBS_UNIT_ERROR(unit,fmt,...) \
+	do { \
+		printk(KERN_ERR "%s: " fmt, "ib_ipath", ##__VA_ARGS__); \
+	} while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#622: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:56:
+		printk(KERN_ERR "%s: " fmt, "ib_ipath", ##__VA_ARGS__); \

ERROR:SPACING: space required before the open parenthesis '('
#623: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:57:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#639: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:73:
+#define _VERBS_INFO(fmt,...) \
                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#641: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:75:
+		if(unlikely(ib_ipath_debug&__VERBS_INFO)) \
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#641: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:75:
+		if(unlikely(ib_ipath_debug&__VERBS_INFO)) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#642: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:76:
+			printk(KERN_INFO "%s: " fmt,"ib_ipath",##__VA_ARGS__); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#642: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:76:
+			printk(KERN_INFO "%s: " fmt,"ib_ipath",##__VA_ARGS__); \
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#642: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:76:
+			printk(KERN_INFO "%s: " fmt,"ib_ipath",##__VA_ARGS__); \
 			                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#643: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:77:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:79:
+#define _VERBS_DBG(fmt,...) \
                       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#647: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:81:
+		if(unlikely(ib_ipath_debug&__VERBS_DBG)) \
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:81:
+		if(unlikely(ib_ipath_debug&__VERBS_DBG)) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#648: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:82:
+			printk(KERN_DEBUG "%s: " fmt, __func__,##__VA_ARGS__); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#648: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:82:
+			printk(KERN_DEBUG "%s: " fmt, __func__,##__VA_ARGS__); \
 			                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#649: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:83:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#651: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:85:
+#define _VERBS_VDBG(fmt,...) \
                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#653: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:87:
+		if(unlikely(ib_ipath_debug&__VERBS_VDBG))  \
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#653: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:87:
+		if(unlikely(ib_ipath_debug&__VERBS_VDBG))  \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#654: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:88:
+			printk(KERN_DEBUG "%s: " fmt, __func__,##__VA_ARGS__); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#654: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:88:
+			printk(KERN_DEBUG "%s: " fmt, __func__,##__VA_ARGS__); \
 			                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:89:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:91:
+#define _VERBS_SMADBG(fmt,...) \
                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#659: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:93:
+		if(unlikely(ib_ipath_debug&__VERBS_SMADBG)) \
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#659: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:93:
+		if(unlikely(ib_ipath_debug&__VERBS_SMADBG)) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#660: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:94:
+			printk(KERN_DEBUG "%s: " fmt, __func__,##__VA_ARGS__); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#660: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:94:
+			printk(KERN_DEBUG "%s: " fmt, __func__,##__VA_ARGS__); \
 			                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#661: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:95:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#665: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:99:
+#define _VERBS_INFO(fmt,...)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:100:
+#define _VERBS_DBG(fmt,...)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:101:
+#define _VERBS_VDBG(fmt,...)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#668: FILE: drivers/infiniband/hw/ipath/verbs_debug.h:102:
+#define _VERBS_SMADBG(fmt,...)
                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121941.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 24 warnings, 11 checks, 638 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121941.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
