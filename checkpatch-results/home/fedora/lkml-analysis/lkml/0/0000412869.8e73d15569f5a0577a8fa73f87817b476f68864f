WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#52: 
>to have another handler inbetween, which it definitely isn't.
                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#96: FILE: arch/i386/kernel/i386_ksyms.c:95:
+EXPORT_SYMBOL(request_nmi);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#97: FILE: arch/i386/kernel/i386_ksyms.c:96:
+EXPORT_SYMBOL(release_nmi);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#117: FILE: arch/i386/kernel/irq.c:134:
+extern void nmi_append_user_names(struct seq_file *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#126: FILE: arch/i386/kernel/irq.c:171:
+	seq_printf(p, "                ");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: arch/i386/kernel/nmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#155: FILE: arch/i386/kernel/nmi.c:22:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#156: FILE: arch/i386/kernel/nmi.c:23:
+#include <asm/nmi.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: arch/i386/kernel/nmi.c:27:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#186: FILE: arch/i386/kernel/nmi.c:53:
+	INIT_LIST_HEAD(&(handler->link));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->complete
#187: FILE: arch/i386/kernel/nmi.c:54:
+	complete(&(handler->complete));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#195: FILE: arch/i386/kernel/nmi.c:62:
+	if (!list_empty(&(handler->link)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#209: FILE: arch/i386/kernel/nmi.c:76:
+			list_add_rcu(&(handler->link), curr_h->link.prev);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#211: FILE: arch/i386/kernel/nmi.c:78:
+			list_add_rcu(&(handler->link), &(curr_h->link));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around curr_h->link
#211: FILE: arch/i386/kernel/nmi.c:78:
+			list_add_rcu(&(handler->link), &(curr_h->link));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#213: FILE: arch/i386/kernel/nmi.c:80:
+		list_add_rcu(&(handler->link), &nmi_handler_list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->link
#222: FILE: arch/i386/kernel/nmi.c:89:
+	list_del_rcu(&(handler->link));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->complete
#223: FILE: arch/i386/kernel/nmi.c:90:
+	init_completion(&(handler->complete));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->rcu
#224: FILE: arch/i386/kernel/nmi.c:91:
+	call_rcu(&(handler->rcu), free_nmi_handler, handler);

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: arch/i386/kernel/nmi.c:95:
+           interrupted, we must wait until it finished. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#228: FILE: arch/i386/kernel/nmi.c:95:
+	/* Wait for handler to finish being freed.  This can't be
+           interrupted, we must wait until it finished. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#228: FILE: arch/i386/kernel/nmi.c:95:
+           interrupted, we must wait until it finished. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around handler->complete
#229: FILE: arch/i386/kernel/nmi.c:96:
+	wait_for_completion(&(handler->complete));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: arch/i386/kernel/nmi.c:113:
+static void mem_parity_error(unsigned char reason, struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#248: FILE: arch/i386/kernel/nmi.c:115:
+	printk("Uhhuh. NMI received. Dazed and confused, but trying to continue\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: arch/i386/kernel/nmi.c:116:
+	printk("You probably have a hardware problem with your RAM chips\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: arch/i386/kernel/nmi.c:123:
+static void io_check_error(unsigned char reason, struct pt_regs * regs)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#260: FILE: arch/i386/kernel/nmi.c:127:
+	printk("NMI: IOCK error (debug interrupt?)\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: arch/i386/kernel/nmi.c:134:
+	while (--i) udelay(1000);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#267: FILE: arch/i386/kernel/nmi.c:134:
+	while (--i) udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: arch/i386/kernel/nmi.c:139:
+static void unknown_nmi_error(struct pt_regs * regs, int cpu)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#276: FILE: arch/i386/kernel/nmi.c:143:
+	 * is. */

ERROR:SPACING: space prohibited after that open parenthesis '('
#277: FILE: arch/i386/kernel/nmi.c:144:
+	if( MCA_bus ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#277: FILE: arch/i386/kernel/nmi.c:144:
+	if( MCA_bus ) {

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: arch/i386/kernel/nmi.c:144:
+	if( MCA_bus ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: arch/i386/kernel/nmi.c:149:
+	printk("Uhhuh. Received NMI for unknown reason on CPU %d.\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: arch/i386/kernel/nmi.c:150:
+	printk("Dazed and confused, but trying to continue\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#284: FILE: arch/i386/kernel/nmi.c:151:
+	printk("Do you have a strange power saving mode enabled?\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: arch/i386/kernel/nmi.c:155:
+static int nmi_std (void * dev_id, struct pt_regs * regs, int cpu, int handled)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: arch/i386/kernel/nmi.c:155:
+static int nmi_std (void * dev_id, struct pt_regs * regs, int cpu, int handled)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#288: FILE: arch/i386/kernel/nmi.c:155:
+static int nmi_std (void * dev_id, struct pt_regs * regs, int cpu, int handled)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#305: FILE: arch/i386/kernel/nmi.c:172:
+static struct nmi_handler nmi_std_handler =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: arch/i386/kernel/nmi.c:180:
+asmlinkage void do_nmi(struct pt_regs * regs, long error_code)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: arch/i386/kernel/nmi.c:187:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: arch/i386/kernel/nmi.c:187:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: arch/i386/kernel/nmi.c:188:
+ 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: arch/i386/kernel/nmi.c:189:
+ ^Inmi_enter();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: arch/i386/kernel/nmi.c:189:
+ ^Inmi_enter();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: arch/i386/kernel/nmi.c:189:
+ ^Inmi_enter();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: arch/i386/kernel/nmi.c:190:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: arch/i386/kernel/nmi.c:190:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: arch/i386/kernel/nmi.c:191:
+ ^Icpu = smp_processor_id();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: arch/i386/kernel/nmi.c:191:
+ ^Icpu = smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: arch/i386/kernel/nmi.c:191:
+ ^Icpu = smp_processor_id();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: arch/i386/kernel/nmi.c:206:
+^I^I^I$

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#340: FILE: arch/i386/kernel/nmi.c:207:
+		case NOTIFY_DONE:
+		default:
+			;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

CHECK:BRACES: braces {} should be used on all arms of this statement
#346: FILE: arch/i386/kernel/nmi.c:213:
+	if (!handled)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#348: FILE: arch/i386/kernel/nmi.c:215:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: arch/i386/kernel/nmi.c:238:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: arch/i386/kernel/nmi.c:238:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: arch/i386/kernel/nmi.c:239:
+ ^Inmi_exit();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: arch/i386/kernel/nmi.c:239:
+ ^Inmi_exit();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: arch/i386/kernel/nmi.c:239:
+ ^Inmi_exit();$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#397: FILE: arch/i386/kernel/nmi_watchdog.c:28:
+#include <asm/nmi.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#404: FILE: arch/i386/kernel/nmi_watchdog.c:34:
+/* This is for I/O APIC, until we can figure out how to tell if it's from the
+   I/O APIC.  If the NMI  was not handled before now, we handle it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#404: FILE: arch/i386/kernel/nmi_watchdog.c:34:
+   I/O APIC.  If the NMI  was not handled before now, we handle it. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: arch/i386/kernel/nmi_watchdog.c:42:
+/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: arch/i386/kernel/nmi_watchdog.c:122:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: arch/i386/kernel/nmi_watchdog.c:122:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#425: FILE: arch/i386/kernel/nmi_watchdog.c:122:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: arch/i386/kernel/nmi_watchdog.c:123:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,
+	int handled);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#429: FILE: arch/i386/kernel/nmi_watchdog.c:126:
+static struct nmi_handler nmi_watchdog_handler =
+{

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#436: FILE: arch/i386/kernel/nmi_watchdog.c:133:
+	/* One less than oprofile's priority.  We must be immediately after
+	   oprofile, and higher than everything else. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#436: FILE: arch/i386/kernel/nmi_watchdog.c:133:
+	   oprofile, and higher than everything else. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#437: FILE: arch/i386/kernel/nmi_watchdog.c:134:
+	.priority = NMI_HANDLER_MAX_PRIORITY-1
 	                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#459: FILE: arch/i386/kernel/nmi_watchdog.c:171:
+			printk(KERN_WARNING

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#474: FILE: arch/i386/kernel/nmi_watchdog.c:209:
+static int nmi_pm_callback(struct pm_dev * dev, pm_request_t rqst, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#474: FILE: arch/i386/kernel/nmi_watchdog.c:209:
+static int nmi_pm_callback(struct pm_dev * dev, pm_request_t rqst, void * data)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#490: FILE: arch/i386/kernel/nmi_watchdog.c:271:
+		wrmsr(MSR_K7_PERFCTR0, -(cpu_khz/nmi_hz*1000), -1);
 		                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#490: FILE: arch/i386/kernel/nmi_watchdog.c:271:
+		wrmsr(MSR_K7_PERFCTR0, -(cpu_khz/nmi_hz*1000), -1);
 		                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#515: FILE: arch/i386/kernel/nmi_watchdog.c:305:
+		wrmsr(MSR_P6_PERFCTR0, -(cpu_khz/nmi_hz*1000), -1);
 		                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#515: FILE: arch/i386/kernel/nmi_watchdog.c:305:
+		wrmsr(MSR_P6_PERFCTR0, -(cpu_khz/nmi_hz*1000), -1);
 		                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#550: FILE: arch/i386/kernel/nmi_watchdog.c:349:
+		wrmsr(MSR_P4_IQ_COUNTER0, -(cpu_khz/nmi_hz*1000), -1);
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#550: FILE: arch/i386/kernel/nmi_watchdog.c:349:
+		wrmsr(MSR_P4_IQ_COUNTER0, -(cpu_khz/nmi_hz*1000), -1);
 		                                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#572: FILE: arch/i386/kernel/nmi_watchdog.c:444:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#572: FILE: arch/i386/kernel/nmi_watchdog.c:444:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#572: FILE: arch/i386/kernel/nmi_watchdog.c:444:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: arch/i386/kernel/nmi_watchdog.c:445:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs, int cpu,
+	int handled)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#595: FILE: arch/i386/kernel/nmi_watchdog.c:465:
+	if (! watchdog_reset(handled))
 	    ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#635: FILE: arch/i386/kernel/traps.c:54:
+void init_nmi(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#766: FILE: arch/i386/oprofile/nmi_int.c:57:
+static int nmi_callback(void * dev_id, struct pt_regs * regs, int cpu, int handled)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#766: FILE: arch/i386/oprofile/nmi_int.c:57:
+static int nmi_callback(void * dev_id, struct pt_regs * regs, int cpu, int handled)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#777: FILE: arch/i386/oprofile/nmi_int.c:66:
+static struct nmi_handler nmi_handler =
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#785: FILE: arch/i386/oprofile/nmi_int.c:74:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#793: FILE: arch/i386/oprofile/nmi_int.c:111:
+static void nmi_cpu_shutdown(void * dummy);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: include/asm-i386/nmi.h:34:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#880: FILE: include/asm-i386/nmi.h:42:
+struct nmi_handler
+{

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#908: FILE: include/linux/nmi.h:2:
+ *	linux/include/linux/nmi.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#932: FILE: include/linux/nmi.h:9:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#938: FILE: include/linux/nmi_watchdog.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#948: FILE: include/linux/nmi_watchdog.h:11:
+ * $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: include/linux/nmi_watchdog.h:17:
+extern void touch_nmi_watchdog(void);

ERROR:SPACING: space required before the open parenthesis '('
#956: FILE: include/linux/nmi_watchdog.h:19:
+# define touch_nmi_watchdog() do { } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000412869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 36 warnings, 31 checks, 844 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000412869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
