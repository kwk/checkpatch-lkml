ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Jean Delvare <khali at linux-fr dot org>'
#32: 
Signed-off-by: Jean Delvare <khali at linux-fr dot org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/i2c/chips/adm1025.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#120: FILE: drivers/i2c/chips/adm1025.c:44:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: drivers/i2c/chips/adm1025.c:45:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: drivers/i2c/chips/adm1025.c:78:
+#define ADM1025_REG_CHIP_ID ^I^I0x3F$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: drivers/i2c/chips/adm1025.c:98:
+#define IN_FROM_REG(reg,scale)	(((reg) * (scale) + 96) / 192)
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: drivers/i2c/chips/adm1025.c:99:
+#define IN_TO_REG(val,scale)	((val) <= 0 ? 0 : \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#175: FILE: drivers/i2c/chips/adm1025.c:99:
+#define IN_TO_REG(val,scale)	((val) <= 0 ? 0 : \
+				 (val) * 192 >= (scale) * 255 ? 255 : \
+				 ((val) * 192 + (scale)/2) / (scale))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'scale' - possible side-effects?
#175: FILE: drivers/i2c/chips/adm1025.c:99:
+#define IN_TO_REG(val,scale)	((val) <= 0 ? 0 : \
+				 (val) * 192 >= (scale) * 255 ? 255 : \
+				 ((val) * 192 + (scale)/2) / (scale))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#177: FILE: drivers/i2c/chips/adm1025.c:101:
+				 ((val) * 192 + (scale)/2) / (scale))
 				                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#180: FILE: drivers/i2c/chips/adm1025.c:104:
+#define TEMP_TO_REG(val)	((val) <= -127500 ? -128 : \
+				 (val) >= 126500 ? 127 : \
+				 (((val) < 0 ? (val)-500 : (val)+500) / 1000))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#182: FILE: drivers/i2c/chips/adm1025.c:106:
+				 (((val) < 0 ? (val)-500 : (val)+500) / 1000))
 				                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#182: FILE: drivers/i2c/chips/adm1025.c:106:
+				 (((val) < 0 ? (val)-500 : (val)+500) / 1000))
 				                                ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#232: FILE: drivers/i2c/chips/adm1025.c:156:
+static int adm1025_id = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#238: FILE: drivers/i2c/chips/adm1025.c:162:
+#define show_in(offset) \
+static ssize_t show_in##offset(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in[offset], \
+		       in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_min[offset], \
+		       in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_max[offset], \
+		       in_scale[offset])); \
+} \
+static DEVICE_ATTR(in##offset##_input, S_IRUGO, show_in##offset, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#238: FILE: drivers/i2c/chips/adm1025.c:162:
+#define show_in(offset) \
+static ssize_t show_in##offset(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in[offset], \
+		       in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_min[offset], \
+		       in_scale[offset])); \
+} \
+static ssize_t show_in##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%u\n", IN_FROM_REG(data->in_max[offset], \
+		       in_scale[offset])); \
+} \
+static DEVICE_ATTR(in##offset##_input, S_IRUGO, show_in##offset, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#257: FILE: drivers/i2c/chips/adm1025.c:181:
+static DEVICE_ATTR(in##offset##_input, S_IRUGO, show_in##offset, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#265: FILE: drivers/i2c/chips/adm1025.c:189:
+#define show_temp(offset) \
+static ssize_t show_temp##offset(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
+} \
+static ssize_t show_temp##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_min[offset-1])); \
+} \
+static ssize_t show_temp##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_max[offset-1])); \
+}\
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, show_temp##offset, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#265: FILE: drivers/i2c/chips/adm1025.c:189:
+#define show_temp(offset) \
+static ssize_t show_temp##offset(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
+} \
+static ssize_t show_temp##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_min[offset-1])); \
+} \
+static ssize_t show_temp##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_max[offset-1])); \
+}\
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, show_temp##offset, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#265: FILE: drivers/i2c/chips/adm1025.c:189:
+#define show_temp(offset) \
+static ssize_t show_temp##offset(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
+} \
+static ssize_t show_temp##offset##_min(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_min[offset-1])); \
+} \
+static ssize_t show_temp##offset##_max(struct device *dev, char *buf) \
+{ \
+	struct adm1025_data *data = adm1025_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_max[offset-1])); \
+}\
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, show_temp##offset, NULL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#269: FILE: drivers/i2c/chips/adm1025.c:193:
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp[offset-1])); \
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#274: FILE: drivers/i2c/chips/adm1025.c:198:
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_min[offset-1])); \
 	                                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#279: FILE: drivers/i2c/chips/adm1025.c:203:
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp_max[offset-1])); \
 	                                                               ^

ERROR:SPACING: space required after that close brace '}'
#280: FILE: drivers/i2c/chips/adm1025.c:204:
+}\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#281: FILE: drivers/i2c/chips/adm1025.c:205:
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, show_temp##offset, NULL);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#285: FILE: drivers/i2c/chips/adm1025.c:209:
+#define set_in(offset) \
+static ssize_t set_in##offset##_min(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->in_min[offset] = IN_TO_REG(simple_strtol(buf, NULL, 10), \
+			       in_scale[offset]); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_IN_MIN(offset), \
+				  data->in_min[offset]); \
+	return count; \
+} \
+static ssize_t set_in##offset##_max(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->in_max[offset] = IN_TO_REG(simple_strtol(buf, NULL, 10), \
+			       in_scale[offset]); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_IN_MAX(offset), \
+				  data->in_max[offset]); \
+	return count; \
+} \
+static DEVICE_ATTR(in##offset##_min, S_IWUSR | S_IRUGO, \
+	show_in##offset##_min, set_in##offset##_min); \
+static DEVICE_ATTR(in##offset##_max, S_IWUSR | S_IRUGO, \
+	show_in##offset##_max, set_in##offset##_max);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#285: FILE: drivers/i2c/chips/adm1025.c:209:
+#define set_in(offset) \
+static ssize_t set_in##offset##_min(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->in_min[offset] = IN_TO_REG(simple_strtol(buf, NULL, 10), \
+			       in_scale[offset]); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_IN_MIN(offset), \
+				  data->in_min[offset]); \
+	return count; \
+} \
+static ssize_t set_in##offset##_max(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->in_max[offset] = IN_TO_REG(simple_strtol(buf, NULL, 10), \
+			       in_scale[offset]); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_IN_MAX(offset), \
+				  data->in_max[offset]); \
+	return count; \
+} \
+static DEVICE_ATTR(in##offset##_min, S_IWUSR | S_IRUGO, \
+	show_in##offset##_min, set_in##offset##_min); \
+static DEVICE_ATTR(in##offset##_max, S_IWUSR | S_IRUGO, \
+	show_in##offset##_max, set_in##offset##_max);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#291: FILE: drivers/i2c/chips/adm1025.c:215:
+	data->in_min[offset] = IN_TO_REG(simple_strtol(buf, NULL, 10), \

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#302: FILE: drivers/i2c/chips/adm1025.c:226:
+	data->in_max[offset] = IN_TO_REG(simple_strtol(buf, NULL, 10), \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#308: FILE: drivers/i2c/chips/adm1025.c:232:
+static DEVICE_ATTR(in##offset##_min, S_IWUSR | S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#310: FILE: drivers/i2c/chips/adm1025.c:234:
+static DEVICE_ATTR(in##offset##_max, S_IWUSR | S_IRUGO, \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#319: FILE: drivers/i2c/chips/adm1025.c:243:
+#define set_temp(offset) \
+static ssize_t set_temp##offset##_min(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->temp_min[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_LOW(offset-1), \
+				  data->temp_min[offset-1]); \
+	return count; \
+} \
+static ssize_t set_temp##offset##_max(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->temp_max[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_HIGH(offset-1), \
+				  data->temp_max[offset-1]); \
+	return count; \
+} \
+static DEVICE_ATTR(temp##offset##_min, S_IWUSR | S_IRUGO, \
+	show_temp##offset##_min, set_temp##offset##_min); \
+static DEVICE_ATTR(temp##offset##_max, S_IWUSR | S_IRUGO, \
+	show_temp##offset##_max, set_temp##offset##_max);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#319: FILE: drivers/i2c/chips/adm1025.c:243:
+#define set_temp(offset) \
+static ssize_t set_temp##offset##_min(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->temp_min[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_LOW(offset-1), \
+				  data->temp_min[offset-1]); \
+	return count; \
+} \
+static ssize_t set_temp##offset##_max(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->temp_max[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_HIGH(offset-1), \
+				  data->temp_max[offset-1]); \
+	return count; \
+} \
+static DEVICE_ATTR(temp##offset##_min, S_IWUSR | S_IRUGO, \
+	show_temp##offset##_min, set_temp##offset##_min); \
+static DEVICE_ATTR(temp##offset##_max, S_IWUSR | S_IRUGO, \
+	show_temp##offset##_max, set_temp##offset##_max);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#319: FILE: drivers/i2c/chips/adm1025.c:243:
+#define set_temp(offset) \
+static ssize_t set_temp##offset##_min(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->temp_min[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_LOW(offset-1), \
+				  data->temp_min[offset-1]); \
+	return count; \
+} \
+static ssize_t set_temp##offset##_max(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct adm1025_data *data = i2c_get_clientdata(client); \
+	data->temp_max[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_HIGH(offset-1), \
+				  data->temp_max[offset-1]); \
+	return count; \
+} \
+static DEVICE_ATTR(temp##offset##_min, S_IWUSR | S_IRUGO, \
+	show_temp##offset##_min, set_temp##offset##_min); \
+static DEVICE_ATTR(temp##offset##_max, S_IWUSR | S_IRUGO, \
+	show_temp##offset##_max, set_temp##offset##_max);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#325: FILE: drivers/i2c/chips/adm1025.c:249:
+	data->temp_min[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
 	                     ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#325: FILE: drivers/i2c/chips/adm1025.c:249:
+	data->temp_min[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#326: FILE: drivers/i2c/chips/adm1025.c:250:
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_LOW(offset-1), \
 	                                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#327: FILE: drivers/i2c/chips/adm1025.c:251:
+				  data->temp_min[offset-1]); \
 				                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#335: FILE: drivers/i2c/chips/adm1025.c:259:
+	data->temp_max[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \
 	                     ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#335: FILE: drivers/i2c/chips/adm1025.c:259:
+	data->temp_max[offset-1] = TEMP_TO_REG(simple_strtol(buf, NULL, 10)); \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#336: FILE: drivers/i2c/chips/adm1025.c:260:
+	i2c_smbus_write_byte_data(client, ADM1025_REG_TEMP_HIGH(offset-1), \
 	                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#337: FILE: drivers/i2c/chips/adm1025.c:261:
+				  data->temp_max[offset-1]); \
 				                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#340: FILE: drivers/i2c/chips/adm1025.c:264:
+static DEVICE_ATTR(temp##offset##_min, S_IWUSR | S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#342: FILE: drivers/i2c/chips/adm1025.c:266:
+static DEVICE_ATTR(temp##offset##_max, S_IWUSR | S_IRUGO, \

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: drivers/i2c/chips/adm1025.c:274:
+	struct adm1025_data *data = adm1025_update_device(dev);
+	return sprintf(buf, "%u\n", data->alarms);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#351: FILE: drivers/i2c/chips/adm1025.c:275:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#352: FILE: drivers/i2c/chips/adm1025.c:276:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: drivers/i2c/chips/adm1025.c:281:
+	struct adm1025_data *data = adm1025_update_device(dev);
+	return sprintf(buf, "%u\n", vid_from_reg(data->vid, data->vrm));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_vid' to 'in1_ref_show'
#358: FILE: drivers/i2c/chips/adm1025.c:282:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#359: FILE: drivers/i2c/chips/adm1025.c:283:
+static DEVICE_ATTR(in1_ref, S_IRUGO, show_vid, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: drivers/i2c/chips/adm1025.c:288:
+	struct adm1025_data *data = adm1025_update_device(dev);
+	return sprintf(buf, "%u\n", data->vrm);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#366: FILE: drivers/i2c/chips/adm1025.c:290:
+}
+static ssize_t set_vrm(struct device *dev, const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: drivers/i2c/chips/adm1025.c:294:
+	struct adm1025_data *data = i2c_get_clientdata(client);
+	data->vrm = simple_strtoul(buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#370: FILE: drivers/i2c/chips/adm1025.c:294:
+	data->vrm = simple_strtoul(buf, NULL, 10);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_vrm' to 'vrm_show' 'set_vrm' to 'vrm_store'
#372: FILE: drivers/i2c/chips/adm1025.c:296:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#373: FILE: drivers/i2c/chips/adm1025.c:297:
+static DEVICE_ATTR(vrm, S_IRUGO | S_IWUSR, show_vrm, set_vrm);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#401: FILE: drivers/i2c/chips/adm1025.c:325:
+	if (!(data = kmalloc(sizeof(struct adm1025_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct adm1025_data)...)
#401: FILE: drivers/i2c/chips/adm1025.c:325:
+	if (!(data = kmalloc(sizeof(struct adm1025_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#408: FILE: drivers/i2c/chips/adm1025.c:332:
+	/* The common I2C client data is placed right before the
+	   ADM1025-specific data. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: drivers/i2c/chips/adm1025.c:332:
+	   ADM1025-specific data. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#429: FILE: drivers/i2c/chips/adm1025.c:353:
+		if ((config & 0x80) != 0x00
+		 || (i2c_smbus_read_byte_data(new_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#431: FILE: drivers/i2c/chips/adm1025.c:355:
+		     ADM1025_REG_STATUS1) & 0xC0) != 0x00
+		 || (i2c_smbus_read_byte_data(new_client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: drivers/i2c/chips/adm1025.c:368:
+		man_id = i2c_smbus_read_byte_data(new_client,
+			 ADM1025_REG_MAN_ID);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: drivers/i2c/chips/adm1025.c:370:
+		chip_id = i2c_smbus_read_byte_data(new_client,
+			  ADM1025_REG_CHIP_ID);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: drivers/i2c/chips/adm1025.c:371:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#452: FILE: drivers/i2c/chips/adm1025.c:376:
+		} else
+		if (man_id == 0xA1) { /* Philips */

CHECK:BRACES: Unbalanced braces around else statement
#452: FILE: drivers/i2c/chips/adm1025.c:376:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#455: FILE: drivers/i2c/chips/adm1025.c:379:
+			if (address != 0x2E
+			 && (chip_id & 0xF0) == 0x20) { /* NE1619 */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/i2c/chips/adm1025.c:386:
+			dev_info(&adapter->dev,
+			    "Unsupported chip (man_id=0x%02X, "

WARNING:SPLIT_STRING: quoted string split across lines
#463: FILE: drivers/i2c/chips/adm1025.c:387:
+			    "Unsupported chip (man_id=0x%02X, "
+			    "chip_id=0x%02X).\n", man_id, chip_id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#468: FILE: drivers/i2c/chips/adm1025.c:392:
+	if (kind == adm1025) {
[...]
+	} else if (kind == ne1619) {
[...]

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#475: FILE: drivers/i2c/chips/adm1025.c:399:
+	strlcpy(new_client->name, name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#481: FILE: drivers/i2c/chips/adm1025.c:405:
+	if ((err = i2c_attach_client(new_client)))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#544: FILE: drivers/i2c/chips/adm1025.c:468:
+	for (i=0; i<6; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#544: FILE: drivers/i2c/chips/adm1025.c:468:
+	for (i=0; i<6; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#552: FILE: drivers/i2c/chips/adm1025.c:476:
+	for (i=0; i<2; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#552: FILE: drivers/i2c/chips/adm1025.c:476:
+	for (i=0; i<2; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#567: FILE: drivers/i2c/chips/adm1025.c:491:
+					  (reg&0x7E)|0x01);
 					      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#567: FILE: drivers/i2c/chips/adm1025.c:491:
+					  (reg&0x7E)|0x01);
 					            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#574: FILE: drivers/i2c/chips/adm1025.c:498:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#576: FILE: drivers/i2c/chips/adm1025.c:500:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#591: FILE: drivers/i2c/chips/adm1025.c:515:
+	if ((jiffies - data->last_updated > HZ * 2) ||
+	    (jiffies < data->last_updated) ||
+	    !data->valid) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#592: FILE: drivers/i2c/chips/adm1025.c:516:
+	    (jiffies < data->last_updated) ||

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#597: FILE: drivers/i2c/chips/adm1025.c:521:
+		for (i=0; i<6; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#597: FILE: drivers/i2c/chips/adm1025.c:521:
+		for (i=0; i<6; i++) {
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/i2c/chips/adm1025.c:523:
+			data->in[i] = i2c_smbus_read_byte_data(client,
+				      ADM1025_REG_IN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: drivers/i2c/chips/adm1025.c:525:
+			data->in_min[i] = i2c_smbus_read_byte_data(client,
+					  ADM1025_REG_IN_MIN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: drivers/i2c/chips/adm1025.c:527:
+			data->in_max[i] = i2c_smbus_read_byte_data(client,
+					  ADM1025_REG_IN_MAX(i));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#605: FILE: drivers/i2c/chips/adm1025.c:529:
+		for (i=0; i<2; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#605: FILE: drivers/i2c/chips/adm1025.c:529:
+		for (i=0; i<2; i++) {
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: drivers/i2c/chips/adm1025.c:531:
+			data->temp[i] = i2c_smbus_read_byte_data(client,
+					ADM1025_REG_TEMP(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: drivers/i2c/chips/adm1025.c:533:
+			data->temp_min[i] = i2c_smbus_read_byte_data(client,
+					    ADM1025_REG_TEMP_LOW(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: drivers/i2c/chips/adm1025.c:535:
+			data->temp_max[i] = i2c_smbus_read_byte_data(client,
+					    ADM1025_REG_TEMP_HIGH(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: drivers/i2c/chips/adm1025.c:538:
+		data->alarms = i2c_smbus_read_byte_data(client,
+			       ADM1025_REG_STATUS1)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000267767.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 35 warnings, 40 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000267767.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
