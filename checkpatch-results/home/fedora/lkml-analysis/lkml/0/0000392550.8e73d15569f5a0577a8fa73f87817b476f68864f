WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
diff -ruN -X../cludes linux-2.5.62-uc0.orig/scripts/mk_elfconfig.c linux-2.5.62-uc0/scripts/mk_elfconfig.c

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#32: FILE: scripts/mk_elfconfig.c:7:
+/* Bogus old v850 magic number, used by old tools; it's not defined in most
+   <elf.h> files, so define it here.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#32: FILE: scripts/mk_elfconfig.c:7:
+   <elf.h> files, so define it here.  */

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Half>
#40: FILE: scripts/mk_elfconfig.c:15:
+	Elf32_Half mach_type;	/* 32- and 64-bit versions are the same. */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#50: FILE: scripts/mk_elfconfig.c:54:
+	if (memcmp(endian_test.c, "\x01\x02", 2) == 0) {
[...]
+		host_little_endian = 0;
[...]
-	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#58: FILE: scripts/mk_elfconfig.c:60:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#63: FILE: scripts/mk_elfconfig.c:65:
+		Elf32_Ehdr ehdr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#64: FILE: scripts/mk_elfconfig.c:66:
+		Elf32_Ehdr ehdr;
+		if (fread((char *)&ehdr + EI_NIDENT,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#64: FILE: scripts/mk_elfconfig.c:66:
+		if (fread((char *)&ehdr + EI_NIDENT,
+			  sizeof(Elf32_Ehdr) - EI_NIDENT,
+			  1, stdin) != 1)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#73: FILE: scripts/mk_elfconfig.c:75:
+		Elf64_Ehdr ehdr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#74: FILE: scripts/mk_elfconfig.c:76:
+		Elf64_Ehdr ehdr;
+		if (fread((char *)&ehdr + EI_NIDENT,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#74: FILE: scripts/mk_elfconfig.c:76:
+		if (fread((char *)&ehdr + EI_NIDENT,
+			  sizeof(Elf64_Ehdr) - EI_NIDENT,
+			  1, stdin) != 1)
+		{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ei[EI_DATA] == ELFDATA2LSB'
#85: FILE: scripts/mk_elfconfig.c:87:
+	if ((ei[EI_DATA] == ELFDATA2LSB) != host_little_endian)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#94: FILE: scripts/mk_elfconfig.c:96:
+		/* It would be nice to do this by actually examining an elf
+		   symbol -- then it needn't be machine specific -- but

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#97: FILE: scripts/mk_elfconfig.c:99:
+		   files anyway.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#98: FILE: scripts/mk_elfconfig.c:100:
+		printf ("#define KERNEL_SYMBOL_PREFIX \"_\"\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SIZEOF_PARENTHESIS: sizeof KERNEL_SYMBOL_PREFIX should be sizeof(KERNEL_SYMBOL_PREFIX)
#116: FILE: scripts/modpost.c:20:
+#define KERNEL_SYMBOL_PREFIX_LEN ((sizeof KERNEL_SYMBOL_PREFIX) - 1)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#136: FILE: scripts/modpost.c:306:
+		if (memcmp(symname, KERNEL_SYMBOL_PREFIX "__ksymtab_",
+			   KERNEL_SYMBOL_PREFIX_LEN + 10) == 0)
+		{

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#145: FILE: scripts/modpost.c:315:
+				static char *symname_buf = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#146: FILE: scripts/modpost.c:316:
+				static size_t symname_buf_len = 0;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#148: FILE: scripts/modpost.c:318:
+				if (! symname_buf) {
 				    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: scripts/modpost.c:326:
+						NOFAIL(realloc(symname_buf,
+							     symname_buf_len));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: scripts/modpost.c:329:
+				strcpy (symname_buf, KERNEL_SYMBOL_PREFIX);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#160: FILE: scripts/modpost.c:330:
+				strcat (symname_buf, real_symname);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000392550.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 11 warnings, 7 checks, 133 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000392550.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
