CHECK:SPACING: No space is necessary after a cast
#109: FILE: drivers/block/ll_rw_blk.c:1790:
+	bio = bio_map_user(q, NULL, (unsigned long) ubuf, len, rw == READ);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#115: FILE: drivers/block/ll_rw_blk.c:1796:
+		if (rw == WRITE) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#118: FILE: drivers/block/ll_rw_blk.c:1799:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#122: FILE: drivers/block/ll_rw_blk.c:1803:
+	rq->bio = rq->biotail = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#126: FILE: drivers/block/ll_rw_blk.c:1807:
+	rq->buffer = rq->data = buf;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#131: FILE: drivers/block/ll_rw_blk.c:1812:
+	if (buf)
+		kfree(buf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#140: FILE: drivers/block/ll_rw_blk.c:1821:
+EXPORT_SYMBOL(blk_rq_map_user);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#169: FILE: drivers/block/ll_rw_blk.c:1850:
+EXPORT_SYMBOL(blk_rq_unmap_user);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#214: FILE: drivers/block/ll_rw_blk.c:1895:
+EXPORT_SYMBOL(blk_execute_rq);

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: drivers/cdrom/cdrom.c:1883:
+			struct request_sense *s = rq->sense;
+			ret = -EIO;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#407: FILE: drivers/cdrom/cdrom.c:1884:
+			printk("cdrom: cdda rip sense %02x/%02x/%02x\n", s->sense_key, s->asc, s->ascq);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#407: FILE: drivers/cdrom/cdrom.c:1884:
+			printk("cdrom: cdda rip sense %02x/%02x/%02x\n", s->sense_key, s->asc, s->ascq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#442: FILE: drivers/cdrom/cdrom.c:1919:
+			printk("cdrom: dropping to single frame dma\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: drivers/cdrom/cdrom.c:1924:
+		printk("cdrom: dropping to old style cdda\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: include/linux/blkdev.h:517:
+extern struct request *blk_rq_map_user(request_queue_t *, int, void __user *, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#546: FILE: include/linux/blkdev.h:517:
+extern struct request *blk_rq_map_user(request_queue_t *, int, void __user *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#546: FILE: include/linux/blkdev.h:517:
+extern struct request *blk_rq_map_user(request_queue_t *, int, void __user *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#546: FILE: include/linux/blkdev.h:517:
+extern struct request *blk_rq_map_user(request_queue_t *, int, void __user *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#546: FILE: include/linux/blkdev.h:517:
+extern struct request *blk_rq_map_user(request_queue_t *, int, void __user *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/linux/blkdev.h:518:
+extern int blk_rq_unmap_user(struct request *, void __user *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#547: FILE: include/linux/blkdev.h:518:
+extern int blk_rq_unmap_user(struct request *, void __user *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#547: FILE: include/linux/blkdev.h:518:
+extern int blk_rq_unmap_user(struct request *, void __user *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#547: FILE: include/linux/blkdev.h:518:
+extern int blk_rq_unmap_user(struct request *, void __user *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#547: FILE: include/linux/blkdev.h:518:
+extern int blk_rq_unmap_user(struct request *, void __user *, unsigned int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: include/linux/blkdev.h:519:
+extern int blk_execute_rq(request_queue_t *, struct gendisk *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#548: FILE: include/linux/blkdev.h:519:
+extern int blk_execute_rq(request_queue_t *, struct gendisk *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#548: FILE: include/linux/blkdev.h:519:
+extern int blk_execute_rq(request_queue_t *, struct gendisk *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#548: FILE: include/linux/blkdev.h:519:
+extern int blk_execute_rq(request_queue_t *, struct gendisk *, struct request *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000298652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 20 warnings, 8 checks, 483 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000298652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
