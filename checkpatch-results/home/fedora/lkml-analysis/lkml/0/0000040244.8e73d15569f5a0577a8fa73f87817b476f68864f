WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#66: FILE: arch/x86_64/kernel/e820.c:242:
+	printk("Nosave not set when anti-frag is enabled");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/dcache.c:857:
+	dentry = kmem_cache_alloc(dentry_cache,
+				set_rclmflags(GFP_KERNEL, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: fs/ext3/super.c:448:
+	ei = kmem_cache_alloc(ext3_inode_cachep,
+				set_rclmflags(SLAB_NOFS, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/jbd/journal.c:1739:
+	ret = kmem_cache_alloc(journal_head_cache,
+				set_rclmflags(GFP_NOFS, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: fs/jbd/journal.c:1750:
+			ret = kmem_cache_alloc(journal_head_cache,
+				set_rclmflags(GFP_NOFS, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: fs/jbd/revoke.c:210:
+	journal->j_revoke_table[0] = kmem_cache_alloc(revoke_table_cache,
+				set_rclmflags(GFP_KERNEL, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: fs/jbd/revoke.c:234:
+	journal->j_revoke_table[1] = kmem_cache_alloc(revoke_table_cache,
+				set_rclmflags(GFP_KERNEL, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: fs/ntfs/inode.c:328:
+	ni = kmem_cache_alloc(ntfs_big_inode_cache,
+				set_rclmflags(SLAB_NOFS, __GFP_KERNRCLM));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: fs/ntfs/inode.c:354:
+	ni = kmem_cache_alloc(ntfs_inode_cache,
+				set_rclmflags(SLAB_NOFS, __GFP_KERNRCLM));

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: fs/reiserfs/super.c:500:
+^I^I^I    ^Iset_rclmflags(SLAB_KERNEL, __GFP_KERNRCLM));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: fs/reiserfs/super.c:500:
+^I^I^I    ^Iset_rclmflags(SLAB_KERNEL, __GFP_KERNRCLM));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: fs/reiserfs/super.c:500:
+	    kmem_cache_alloc(reiserfs_inode_cachep,
+			    	set_rclmflags(SLAB_KERNEL, __GFP_KERNRCLM));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#244: FILE: include/linux/gfp.h:60:
+			__GFP_KERNRCLM|__GFP_EASYRCLM)
 			              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#248: FILE: include/linux/gfp.h:63:
+#define GFP_RECLAIM_MASK (__GFP_KERNRCLM|__GFP_EASYRCLM)
                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: include/linux/gfp.h:104:
+	BUG_ON((gfp & GFP_RECLAIM_MASK) == GFP_RECLAIM_MASK);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'falgs' may be misspelled - perhaps 'flags'?
#299: FILE: include/linux/page-flags.h:99:
+ * anti-fragmentation falgs could be stored
                       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageKernRclm>
#334: FILE: include/linux/page-flags.h:248:
+#define __SetPageKernRclm(page)	do {} while (0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageKernRclm>
#335: FILE: include/linux/page-flags.h:249:
+#define __ClearPageKernRclm(page) do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageEasyRclm>
#340: FILE: include/linux/page-flags.h:254:
+#define __SetPageEasyRclm(page)	do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageEasyRclm>
#341: FILE: include/linux/page-flags.h:255:
+#define __ClearPageEasyRclm(page) do {} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: include/linux/page-flags.h:272:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: lib/radix-tree.c:97:
+	ret = kmem_cache_alloc(radix_tree_node_cachep,
+					set_rclmflags(gfp_mask, __GFP_KERNRCLM));

WARNING:LINE_SPACING: Missing a blank line after declarations
#424: FILE: mm/page_alloc.c:145:
+	gfp_t badflags = (__GFP_EASYRCLM | __GFP_KERNRCLM);
+	WARN_ON((gfp_flags & badflags) == badflags);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#471: FILE: mm/page_alloc.c:737:
+			area = &(zone->free_area[current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: mm/page_alloc.c:742:
+			page = list_entry(area->free_list[rclmtype].next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: mm/page_alloc.c:750:
+			expand(zone, page, order, current_order, area,
+							start_rclmtype);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: mm/page_alloc.c:755:
+				move_freepages_block(zone, page,
+							start_rclmtype);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#555: FILE: mm/shmem.c:95:
+						PAGE_CACHE_SHIFT-PAGE_SHIFT);
 						                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: mm/shmem.c:973:
+	page = alloc_page_vma(set_rclmflags(gfp | __GFP_ZERO, __GFP_KERNRCLM),
+								&pvma, 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040244.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 23 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040244.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
