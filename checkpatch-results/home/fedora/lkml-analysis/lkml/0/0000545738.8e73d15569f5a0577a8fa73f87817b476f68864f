WARNING:TYPO_SPELLING: 'patchs' may be misspelled - perhaps 'patches'?
#75: 
back up into two patchs - one to change the normal directory ops to the
                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'supresses' may be misspelled - perhaps 'suppresses'?
#177: 
The 'n' supresses the file name listing.
        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'optmization' may be misspelled - perhaps 'optimization'?
#191: 
  - Binary search index optmization
                        ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'optmize' may be misspelled - perhaps 'optimize'?
#200: 
that some of the cases I was trying to optmize are so rare that the code
                                       ^^^^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#233: FILE: fs/ext2/dir.c:30:
+static inline unsigned get_blocksize(struct inode *inode)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#238: FILE: fs/ext2/dir.c:35:
+static inline unsigned get_blockshift(struct inode *inode)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#245: FILE: fs/ext2/dir.c:42:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#245: FILE: fs/ext2/dir.c:42:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#245: FILE: fs/ext2/dir.c:42:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                        ^

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#248: FILE: fs/ext2/dir.c:45:
+#define unlock_page(page) UnlockPage(page)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:IF_1: Consider removing the #if 1 and its #endif
#250: FILE: fs/ext2/dir.c:47:
+#if 1

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#260: FILE: fs/ext2/dir.c:57:
+//	printk("release %p count=%i locked=%i\n", page, atomic_read(&page->count), PageLocked(page));

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#266: FILE: fs/ext2/dir.c:63:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: fs/ext2/dir.c:64:
+static int fixme_commit_chunk(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: fs/ext2/dir.c:64:
+static int fixme_commit_chunk(struct page *page, unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: fs/ext2/dir.c:68:
+	int err = 0;
+	dir->i_version = ++event;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#282: FILE: fs/ext2/dir.c:79:
+	unsigned chunk_size = get_blocksize(dir);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#283: FILE: fs/ext2/dir.c:80:
+	char *kaddr = (char*)page_address(page);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#285: FILE: fs/ext2/dir.c:82:
+	unsigned offs, rec_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#286: FILE: fs/ext2/dir.c:83:
+	unsigned limit = PAGE_CACHE_SIZE;

CHECK:CAMELCASE: Avoid CamelCase: <Ebadsize>
#293: FILE: fs/ext2/dir.c:90:
+			goto Ebadsize;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#294: FILE: fs/ext2/dir.c:91:
+		for (offs = limit; offs<PAGE_CACHE_SIZE; offs += chunk_size) {
 		                       ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#295: FILE: fs/ext2/dir.c:92:
+			ext2_dirent *p = (ext2_dirent*)(kaddr + offs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: fs/ext2/dir.c:93:
+			ext2_dirent *p = (ext2_dirent*)(kaddr + offs);
+			p->rec_len = cpu_to_le16(chunk_size);

CHECK:SPACING: No space is necessary after a cast
#302: FILE: fs/ext2/dir.c:99:
+		p = (ext2_dirent *) (kaddr + offs);

CHECK:CAMELCASE: Avoid CamelCase: <Eshort>
#306: FILE: fs/ext2/dir.c:103:
+			goto Eshort;

CHECK:CAMELCASE: Avoid CamelCase: <Ealign>
#308: FILE: fs/ext2/dir.c:105:
+			goto Ealign;

CHECK:CAMELCASE: Avoid CamelCase: <Enamelen>
#310: FILE: fs/ext2/dir.c:107:
+			goto Enamelen;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#311: FILE: fs/ext2/dir.c:108:
+		if (((offs + rec_len - 1) ^ offs) & ~(chunk_size-1))
 		                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Espan>
#312: FILE: fs/ext2/dir.c:109:
+			goto Espan;

CHECK:CAMELCASE: Avoid CamelCase: <Einumber>
#314: FILE: fs/ext2/dir.c:111:
+			goto Einumber;

CHECK:CAMELCASE: Avoid CamelCase: <Eend>
#317: FILE: fs/ext2/dir.c:114:
+		goto Eend;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: fs/ext2/dir.c:123:
+	ext2_error(sb, "fixme_check_page",
+		"size of directory #%lu is not a multiple of chunk size",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#345: FILE: fs/ext2/dir.c:142:
+	ext2_error (sb, "fixme_check_page", "bad entry in directory #%lu: %s - "

WARNING:SPLIT_STRING: quoted string split across lines
#346: FILE: fs/ext2/dir.c:143:
+	ext2_error (sb, "fixme_check_page", "bad entry in directory #%lu: %s - "
+		"offset=%lu, inode=%lu, rec_len=%d, name_len=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#347: FILE: fs/ext2/dir.c:144:
+		dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#347: FILE: fs/ext2/dir.c:144:
+		dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                                  ^

CHECK:SPACING: No space is necessary after a cast
#348: FILE: fs/ext2/dir.c:145:
+		(unsigned long) le32_to_cpu(p->inode),

CHECK:SPACING: No space is necessary after a cast
#352: FILE: fs/ext2/dir.c:149:
+	p = (ext2_dirent *) (kaddr + offs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: fs/ext2/dir.c:150:
+	ext2_error (sb, "fixme_check_page",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: fs/ext2/dir.c:151:
+	ext2_error (sb, "fixme_check_page",
+		"entry in directory #%lu spans the page boundary"

WARNING:SPLIT_STRING: quoted string split across lines
#355: FILE: fs/ext2/dir.c:152:
+		"entry in directory #%lu spans the page boundary"
+		"offset=%lu, inode=%lu",

WARNING:MISSING_SPACE: break quoted strings at a space character
#355: FILE: fs/ext2/dir.c:152:
+		"entry in directory #%lu spans the page boundary"
+		"offset=%lu, inode=%lu",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#356: FILE: fs/ext2/dir.c:153:
+		dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#356: FILE: fs/ext2/dir.c:153:
+		dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                           ^

CHECK:SPACING: No space is necessary after a cast
#357: FILE: fs/ext2/dir.c:154:
+		(unsigned long) le32_to_cpu(p->inode));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: fs/ext2/dir.c:160:
+static struct page * fixme_acquire_page(struct inode *dir, unsigned long n)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#366: FILE: fs/ext2/dir.c:163:
+	struct page *page = read_cache_page (mapping, n, (filler_t*)mapping->a_ops->readpage, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#366: FILE: fs/ext2/dir.c:163:
+	struct page *page = read_cache_page (mapping, n, (filler_t*)mapping->a_ops->readpage, NULL);

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#371: FILE: fs/ext2/dir.c:168:
+		if (!Page_Uptodate(page))

CHECK:SPACING: No space is necessary after a cast
#390: FILE: fs/ext2/dir.c:187:
+	return (ext2_dirent *) ((char*)p + le16_to_cpu(p->rec_len));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#390: FILE: fs/ext2/dir.c:187:
+	return (ext2_dirent *) ((char*)p + le16_to_cpu(p->rec_len));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#407: FILE: fs/ext2/dir.c:204:
+#define COMBSORT(size, i, j, COMPARE, EXCHANGE) { \
+	unsigned gap = size, more, i; \
+	do { \
+		if (gap > 1) gap = gap*10/13; \
+		if (gap - 9 < 2) gap = 11; \
+		for (i = size - 1, more = gap > 1; i >= gap; i--) { \
+			int j = i - gap; \
+			if (COMPARE) { EXCHANGE; more = 1; } } \
+	} while (more); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#407: FILE: fs/ext2/dir.c:204:
+#define COMBSORT(size, i, j, COMPARE, EXCHANGE) { \
+	unsigned gap = size, more, i; \
+	do { \
+		if (gap > 1) gap = gap*10/13; \
+		if (gap - 9 < 2) gap = 11; \
+		for (i = size - 1, more = gap > 1; i >= gap; i--) { \
+			int j = i - gap; \
+			if (COMPARE) { EXCHANGE; more = 1; } } \
+	} while (more); }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#408: FILE: fs/ext2/dir.c:205:
+	unsigned gap = size, more, i; \

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#410: FILE: fs/ext2/dir.c:207:
+		if (gap > 1) gap = gap*10/13; \
 		                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#410: FILE: fs/ext2/dir.c:207:
+		if (gap > 1) gap = gap*10/13; \
 		                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#410: FILE: fs/ext2/dir.c:207:
+		if (gap > 1) gap = gap*10/13; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#411: FILE: fs/ext2/dir.c:208:
+		if (gap - 9 < 2) gap = 11; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#414: FILE: fs/ext2/dir.c:211:
+			if (COMPARE) { EXCHANGE; more = 1; } } \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#419: FILE: fs/ext2/dir.c:216:
+#define exchange(x, y) do { typeof(x) z = x; x = y; y = z; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#419: FILE: fs/ext2/dir.c:216:
+#define exchange(x, y) do { typeof(x) z = x; x = y; y = z; } while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: fs/ext2/dir.c:219:
+static int prepare_chunk (struct page *page, char *chunk)

CHECK:SPACING: No space is necessary after a cast
#424: FILE: fs/ext2/dir.c:221:
+	unsigned offset = chunk - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#424: FILE: fs/ext2/dir.c:221:
+	unsigned offset = chunk - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#425: FILE: fs/ext2/dir.c:222:
+	unsigned size = page->mapping->host->i_sb->s_blocksize;

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: fs/ext2/dir.c:223:
+	unsigned size = page->mapping->host->i_sb->s_blocksize;
+	if (offset > PAGE_CACHE_SIZE || offset + size > PAGE_CACHE_SIZE) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: fs/ext2/dir.c:223:
+	if (offset > PAGE_CACHE_SIZE || offset + size > PAGE_CACHE_SIZE) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#426: FILE: fs/ext2/dir.c:223:
+	if (offset > PAGE_CACHE_SIZE || offset + size > PAGE_CACHE_SIZE) BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#430: FILE: fs/ext2/dir.c:227:
+static int commit_chunk (struct page *page, char *chunk)

CHECK:SPACING: No space is necessary after a cast
#432: FILE: fs/ext2/dir.c:229:
+	unsigned offset = chunk - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#432: FILE: fs/ext2/dir.c:229:
+	unsigned offset = chunk - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#433: FILE: fs/ext2/dir.c:230:
+	unsigned size = page->mapping->host->i_sb->s_blocksize;

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: fs/ext2/dir.c:231:
+	unsigned size = page->mapping->host->i_sb->s_blocksize;
+	if (offset > PAGE_CACHE_SIZE || offset + size > PAGE_CACHE_SIZE) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: fs/ext2/dir.c:231:
+	if (offset > PAGE_CACHE_SIZE || offset + size > PAGE_CACHE_SIZE) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#434: FILE: fs/ext2/dir.c:231:
+	if (offset > PAGE_CACHE_SIZE || offset + size > PAGE_CACHE_SIZE) BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#438: FILE: fs/ext2/dir.c:235:
+char *acquire_block (struct inode *inode, u32 block, struct page **ppage)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#440: FILE: fs/ext2/dir.c:237:
+	unsigned blockshift = get_blockshift(inode);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#441: FILE: fs/ext2/dir.c:238:
+	unsigned page2block = PAGE_CACHE_SHIFT - blockshift;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#442: FILE: fs/ext2/dir.c:239:
+	unsigned index = (block >> page2block) & ~PAGE_CACHE_MASK;

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#444: FILE: fs/ext2/dir.c:241:
+	struct page *page = read_cache_page (mapping, index, (filler_t *) mapping->a_ops->readpage, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#444: FILE: fs/ext2/dir.c:241:
+	struct page *page = read_cache_page (mapping, index, (filler_t *) mapping->a_ops->readpage, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: fs/ext2/dir.c:241:
+	struct page *page = read_cache_page (mapping, index, (filler_t *) mapping->a_ops->readpage, NULL);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#446: FILE: fs/ext2/dir.c:243:
+	if (!IS_ERR(page)) // can we please have just one way of passing back the error?
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#455: FILE: fs/ext2/dir.c:252:
+	return page_address(*ppage = page) + ((block & ~(-1<<page2block)) << blockshift);
 	                                                   ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#466: FILE: fs/ext2/dir.c:263:
+struct dx_root
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#469: FILE: fs/ext2/dir.c:266:
+	struct dx_root_info
+	{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#478: FILE: fs/ext2/dir.c:275:
+	struct dx_entry
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: fs/ext2/dir.c:278:
+^I} $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#496: FILE: fs/ext2/dir.c:287:
+struct dx_frame
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#502: FILE: fs/ext2/dir.c:293:
+	unsigned count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#503: FILE: fs/ext2/dir.c:294:
+	unsigned limit;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#544: FILE: fs/ext2/dir.c:297:
+unsigned dx_hack_hash (const char *name, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#544: FILE: fs/ext2/dir.c:297:
+unsigned dx_hack_hash (const char *name, int len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: fs/ext2/dir.c:300:
+	u32 hash0 = 0x12a3fe2d, hash1 = 0x37abe8f9;
+	while (len--)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#547: FILE: fs/ext2/dir.c:300:
+	while (len--)
+	{

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: fs/ext2/dir.c:303:
+		u32 hash = hash1 + (hash0 ^ (*name++ * 71523));
+		if (hash & 0x80000000) hash -= 0x7fffffff;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#550: FILE: fs/ext2/dir.c:303:
+		if (hash & 0x80000000) hash -= 0x7fffffff;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: fs/ext2/dir.c:310:
+#define dx_hash(s,n) (dx_hack_hash(s,n) << 1)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: fs/ext2/dir.c:310:
+#define dx_hash(s,n) (dx_hack_hash(s,n) << 1)
                                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#563: FILE: fs/ext2/dir.c:316:
+int dx_probe (struct inode *dir, u32 hash, struct dx_frame *dxframe)

CHECK:SPACING: No space is necessary after a cast
#568: FILE: fs/ext2/dir.c:321:
+	struct dx_root *root = (struct dx_root *) acquire_block (dir, 0, &page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#568: FILE: fs/ext2/dir.c:321:
+	struct dx_root *root = (struct dx_root *) acquire_block (dir, 0, &page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: fs/ext2/dir.c:322:
+	struct dx_root *root = (struct dx_root *) acquire_block (dir, 0, &page);
+	dxtrace(printk("Look up %u", hash));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#569: FILE: fs/ext2/dir.c:322:
+	dxtrace(printk("Look up %u", hash));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#570: FILE: fs/ext2/dir.c:323:
+	if (!root) return -EINVAL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#573: FILE: fs/ext2/dir.c:326:
+	at = at0 = root->entries;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#574: FILE: fs/ext2/dir.c:327:
+	if (!(count = le32_to_cpu(at[0].hash))) BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#574: FILE: fs/ext2/dir.c:327:
+	if (!(count = le32_to_cpu(at[0].hash))) BUG();

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#574: FILE: fs/ext2/dir.c:327:
+	if (!(count = le32_to_cpu(at[0].hash))) BUG();

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#577: FILE: fs/ext2/dir.c:330:
+	while (search--)
+	{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: fs/ext2/dir.c:332:
+		dxtrace(printk("."));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#580: FILE: fs/ext2/dir.c:333:
+		if (le32_to_cpu((++at)->hash) > hash)
+		{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#586: FILE: fs/ext2/dir.c:339:
+	dxtrace(printk(" in %u:%u\n", at - at0, le32_to_cpu(at->block)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->info
#587: FILE: fs/ext2/dir.c:340:
+	dxframe->info = &(root->info);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#589: FILE: fs/ext2/dir.c:342:
+	dxframe->data = (char *) root;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#593: FILE: fs/ext2/dir.c:346:
+	dxframe->limit = (get_blocksize(dir) - sizeof(struct dx_root_info)) / sizeof(struct dx_entry);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#602: FILE: fs/ext2/dir.c:355:
+struct dx_map_entry
+{

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#607: FILE: fs/ext2/dir.c:360:
+#define MAX_DX_MAP (PAGE_SIZE/EXT2_DIR_REC_LEN(1) + 1)
                              ^

WARNING:LONG_LINE: line length of 219 exceeds 100 columns
#608: FILE: fs/ext2/dir.c:361:
+/* Assumes file blocksize <= PAGE_SIZE */                                                                                                     static int dx_make_map (ext2_dirent *de, int size, struct dx_map_entry map[])

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#608: FILE: fs/ext2/dir.c:361:
+/* Assumes file blocksize <= PAGE_SIZE */                                                                                                     static int dx_make_map (ext2_dirent *de, int size, struct dx_map_entry map[])

CHECK:SPACING: No space is necessary after a cast
#612: FILE: fs/ext2/dir.c:365:
+	char *base = (char *) de;

CHECK:SPACING: No space is necessary after a cast
#613: FILE: fs/ext2/dir.c:366:
+	while ((char *) de < base + size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#613: FILE: fs/ext2/dir.c:366:
+	char *base = (char *) de;
+	while ((char *) de < base + size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#613: FILE: fs/ext2/dir.c:366:
+	while ((char *) de < base + size)
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#615: FILE: fs/ext2/dir.c:368:
+		map[count].hash = dx_hash (de->name, de->name_len);

CHECK:SPACING: No space is necessary after a cast
#616: FILE: fs/ext2/dir.c:369:
+		map[count].offs = (u32) ((char *) de - base);

CHECK:SPACING: No space is necessary after a cast
#617: FILE: fs/ext2/dir.c:370:
+		de = (ext2_dirent *) ((char *) de + le16_to_cpu(de->rec_len));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#627: FILE: fs/ext2/dir.c:380:
+ext2_dirent *dx_copy (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#627: FILE: fs/ext2/dir.c:380:
+ext2_dirent *dx_copy (

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#628: FILE: fs/ext2/dir.c:381:
+	char *from, char *to, unsigned size, // should pass from, to as de's (uli)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#633: FILE: fs/ext2/dir.c:386:
+	unsigned rec_len = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: fs/ext2/dir.c:387:
+	unsigned rec_len = 0;
+	if (!count) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#634: FILE: fs/ext2/dir.c:387:
+	if (!count) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#634: FILE: fs/ext2/dir.c:387:
+	if (!count) BUG();

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#635: FILE: fs/ext2/dir.c:388:
+	while (count--)
+	{

CHECK:SPACING: No space is necessary after a cast
#637: FILE: fs/ext2/dir.c:390:
+		de = (ext2_dirent *) (from + map[start++].offs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: fs/ext2/dir.c:392:
+		if (to + rec_len > top) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#639: FILE: fs/ext2/dir.c:392:
+		if (to + rec_len > top) BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#640: FILE: fs/ext2/dir.c:393:
+		memcpy (to, de, rec_len);

CHECK:SPACING: No space is necessary after a cast
#641: FILE: fs/ext2/dir.c:394:
+		((ext2_dirent *) to)->rec_len = cpu_to_le16(rec_len);

CHECK:SPACING: No space is necessary after a cast
#644: FILE: fs/ext2/dir.c:397:
+	return (ext2_dirent *) (to - rec_len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#647: FILE: fs/ext2/dir.c:400:
+static inline void set_rec_len (ext2_dirent *de, unsigned len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#647: FILE: fs/ext2/dir.c:400:
+static inline void set_rec_len (ext2_dirent *de, unsigned len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: fs/ext2/dir.c:405:
+static inline void set_rec_full (ext2_dirent *de, char *limit)

CHECK:SPACING: No space is necessary after a cast
#654: FILE: fs/ext2/dir.c:407:
+	set_rec_len (de, limit - (char *) de); // need to clear top?

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#654: FILE: fs/ext2/dir.c:407:
+	set_rec_len (de, limit - (char *) de); // need to clear top?

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#662: FILE: fs/ext2/dir.c:415:
+void kstring (char *name, unsigned len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#662: FILE: fs/ext2/dir.c:415:
+void kstring (char *name, unsigned len)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#664: FILE: fs/ext2/dir.c:417:
+	while (len--) printk("%c", *name++);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#664: FILE: fs/ext2/dir.c:417:
+	while (len--) printk("%c", *name++);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#668: FILE: fs/ext2/dir.c:421:
+struct stats { unsigned names; unsigned used; }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#668: FILE: fs/ext2/dir.c:421:
+struct stats { unsigned names; unsigned used; }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#669: FILE: fs/ext2/dir.c:422:
+dx_show_leaf (ext2_dirent *de, int size, int names)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#671: FILE: fs/ext2/dir.c:424:
+	unsigned count = 0, used = 0;

CHECK:SPACING: No space is necessary after a cast
#672: FILE: fs/ext2/dir.c:425:
+	char *base = (char *) de;

WARNING:LINE_SPACING: Missing a blank line after declarations
#673: FILE: fs/ext2/dir.c:426:
+	char *base = (char *) de;
+	printk("names: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#673: FILE: fs/ext2/dir.c:426:
+	printk("names: ");

CHECK:SPACING: No space is necessary after a cast
#674: FILE: fs/ext2/dir.c:427:
+	while ((char *) de < base + size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#674: FILE: fs/ext2/dir.c:427:
+	while ((char *) de < base + size)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#676: FILE: fs/ext2/dir.c:429:
+		if (names)
+		{

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#679: FILE: fs/ext2/dir.c:432:
+			printk(":%u.%u ", dx_hash (de->name, de->name_len), (u32) ((char *) de - base));

CHECK:SPACING: No space is necessary after a cast
#679: FILE: fs/ext2/dir.c:432:
+			printk(":%u.%u ", dx_hash (de->name, de->name_len), (u32) ((char *) de - base));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#679: FILE: fs/ext2/dir.c:432:
+			printk(":%u.%u ", dx_hash (de->name, de->name_len), (u32) ((char *) de - base));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#679: FILE: fs/ext2/dir.c:432:
+			printk(":%u.%u ", dx_hash (de->name, de->name_len), (u32) ((char *) de - base));

CHECK:SPACING: No space is necessary after a cast
#682: FILE: fs/ext2/dir.c:435:
+		de = (ext2_dirent *) ((char *) de + le16_to_cpu(de->rec_len));

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: fs/ext2/dir.c:436:
+ ^I^Icount++;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#683: FILE: fs/ext2/dir.c:436:
+ ^I^Icount++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: fs/ext2/dir.c:436:
+ ^I^Icount++;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#685: FILE: fs/ext2/dir.c:438:
+	printk("(%i)\n", count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#689: FILE: fs/ext2/dir.c:442:
+void dx_show_buckets (struct inode *dir)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#692: FILE: fs/ext2/dir.c:445:
+	int blockshift = EXT2_BLOCK_SIZE_BITS (sb), blocksize = 1 << blockshift;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#693: FILE: fs/ext2/dir.c:446:
+	unsigned count, i, used = 0, names = 0;

CHECK:SPACING: No space is necessary after a cast
#696: FILE: fs/ext2/dir.c:449:
+	struct dx_root *root = (struct dx_root *) acquire_block (dir, 0, &page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#696: FILE: fs/ext2/dir.c:449:
+	struct dx_root *root = (struct dx_root *) acquire_block (dir, 0, &page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: fs/ext2/dir.c:450:
+	struct dx_root *root = (struct dx_root *) acquire_block (dir, 0, &page);
+	if (!root) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#697: FILE: fs/ext2/dir.c:450:
+	if (!root) return;

CHECK:SPACING: No space is necessary after a cast
#699: FILE: fs/ext2/dir.c:452:
+	count = *(u32 *) at;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#700: FILE: fs/ext2/dir.c:453:
+	printk("%i indexed blocks...\n", count);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#701: FILE: fs/ext2/dir.c:454:
+	for (i = 0; i < count; i++, at++)
+	{

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#703: FILE: fs/ext2/dir.c:456:
+		u32 block = le32_to_cpu(at->block), h = le32_to_cpu(at->hash), hash = i? h: 0;
 		                                                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#703: FILE: fs/ext2/dir.c:456:
+		u32 block = le32_to_cpu(at->block), h = le32_to_cpu(at->hash), hash = i? h: 0;
 		                                                                          ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#704: FILE: fs/ext2/dir.c:457:
+		u32 range = i == count - 1? ~h: (le32_to_cpu((at + 1)->hash) - hash);
 		                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#704: FILE: fs/ext2/dir.c:457:
+		u32 range = i == count - 1? ~h: (le32_to_cpu((at + 1)->hash) - hash);
 		                              ^

CHECK:SPACING: No space is necessary after a cast
#706: FILE: fs/ext2/dir.c:459:
+		ext2_dirent *leaf = (ext2_dirent *) acquire_block (dir, block, &page2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#706: FILE: fs/ext2/dir.c:459:
+		ext2_dirent *leaf = (ext2_dirent *) acquire_block (dir, block, &page2);

WARNING:LINE_SPACING: Missing a blank line after declarations
#707: FILE: fs/ext2/dir.c:460:
+		ext2_dirent *leaf = (ext2_dirent *) acquire_block (dir, block, &page2);
+		printk("%u:%u hash %u/%u ", i, block, hash, range);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#707: FILE: fs/ext2/dir.c:460:
+		printk("%u:%u hash %u/%u ", i, block, hash, range);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#708: FILE: fs/ext2/dir.c:461:
+		if (!leaf) continue;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#709: FILE: fs/ext2/dir.c:462:
+		stats = dx_show_leaf (leaf, blocksize, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#712: FILE: fs/ext2/dir.c:465:
+		release_page (page2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#714: FILE: fs/ext2/dir.c:467:
+	release_page (page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: fs/ext2/dir.c:468:
+	printk("names %u, fullness %u (%u%%)\n", names, used/count, (used/count)*100/blocksize);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: fs/ext2/dir.c:468:
+	printk("names %u, fullness %u (%u%%)\n", names, used/count, (used/count)*100/blocksize);
 	                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: fs/ext2/dir.c:468:
+	printk("names %u, fullness %u (%u%%)\n", names, used/count, (used/count)*100/blocksize);
 	                                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#715: FILE: fs/ext2/dir.c:468:
+	printk("names %u, fullness %u (%u%%)\n", names, used/count, (used/count)*100/blocksize);
 	                                                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: fs/ext2/dir.c:468:
+	printk("names %u, fullness %u (%u%%)\n", names, used/count, (used/count)*100/blocksize);
 	                                                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#718: FILE: fs/ext2/dir.c:471:
+static void dx_show_index (struct dx_frame *dxframe)

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: fs/ext2/dir.c:475:
+	int i = 0;
+	printk("Index: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#722: FILE: fs/ext2/dir.c:475:
+	printk("Index: ");

CHECK:SPACING: No space is necessary after a cast
#723: FILE: fs/ext2/dir.c:476:
+	for (; i < *(u32 *) entries; i++)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#723: FILE: fs/ext2/dir.c:476:
+	for (; i < *(u32 *) entries; i++)
+	{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#725: FILE: fs/ext2/dir.c:478:
+		printk("%u@%u ", le32_to_cpu(entries[i].hash), le32_to_cpu(entries[i].block));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#727: FILE: fs/ext2/dir.c:480:
+	printk("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#736: FILE: fs/ext2/dir.c:489:
+static inline int ext2_match (int len, const char *name, ext2_dirent *de)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: fs/ext2/dir.c:498:
+static inline unsigned $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#746: FILE: fs/ext2/dir.c:499:
+ext2_validate_entry(char *base, unsigned offset, unsigned mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#746: FILE: fs/ext2/dir.c:499:
+ext2_validate_entry(char *base, unsigned offset, unsigned mask)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#748: FILE: fs/ext2/dir.c:501:
+	ext2_dirent *de = (ext2_dirent*)(base + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#749: FILE: fs/ext2/dir.c:502:
+	ext2_dirent *p = (ext2_dirent*)(base + (offset&mask));

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#749: FILE: fs/ext2/dir.c:502:
+	ext2_dirent *p = (ext2_dirent*)(base + (offset&mask));
 	                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#750: FILE: fs/ext2/dir.c:503:
+	ext2_dirent *p = (ext2_dirent*)(base + (offset&mask));
+	while ((char*)p < (char*)de)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#750: FILE: fs/ext2/dir.c:503:
+	while ((char*)p < (char*)de)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#750: FILE: fs/ext2/dir.c:503:
+	while ((char*)p < (char*)de)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#777: FILE: fs/ext2/dir.c:530:
+static inline void ext2_set_de_type (ext2_dirent *de, struct inode *inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#780: FILE: fs/ext2/dir.c:533:
+	mode_t mode = inode->i_mode;
+	if (EXT2_HAS_INCOMPAT_FEATURE(inode->i_sb, EXT2_FEATURE_INCOMPAT_FILETYPE))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#781: FILE: fs/ext2/dir.c:534:
+		de->file_type = ext2_type_by_mode[(mode & S_IFMT)>>S_SHIFT];
 		                                                 ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#784: FILE: fs/ext2/dir.c:537:
+static int ext2_readdir (struct file *filp, void *dirent, filldir_t filldir)
                                       ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#784: FILE: fs/ext2/dir.c:537:
+static int ext2_readdir (struct file *filp, void *dirent, filldir_t filldir)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#789: FILE: fs/ext2/dir.c:542:
+	unsigned offset = pos & ~PAGE_CACHE_MASK;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#792: FILE: fs/ext2/dir.c:545:
+	int start = is_dx(inode)? 1: 0;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#792: FILE: fs/ext2/dir.c:545:
+	int start = is_dx(inode)? 1: 0;
 	                           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#797: FILE: fs/ext2/dir.c:550:
+	unsigned chunk_mask = ~(get_blocksize(inode)-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#797: FILE: fs/ext2/dir.c:550:
+	unsigned chunk_mask = ~(get_blocksize(inode)-1);
 	                                            ^

CHECK:SPACING: No space is necessary after a cast
#827: FILE: fs/ext2/dir.c:567:
+		kaddr = (char *) page_address(page);

CHECK:SPACING: No space is necessary after a cast
#832: FILE: fs/ext2/dir.c:572:
+		de = (ext2_dirent *) (kaddr+offset);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#832: FILE: fs/ext2/dir.c:572:
+		de = (ext2_dirent *) (kaddr+offset);
 		                           ^

CHECK:SPACING: No space is necessary after a cast
#834: FILE: fs/ext2/dir.c:574:
+		for (; (char*) de <= limit; de = ext2_next_entry(de))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#834: FILE: fs/ext2/dir.c:574:
+		for (; (char*) de <= limit; de = ext2_next_entry(de))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: fs/ext2/dir.c:584:
+				over = filldir(dirent, de->name, de->name_len,
+						(n<<PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#860: FILE: fs/ext2/dir.c:584:
+						(n<<PAGE_CACHE_SHIFT) | offset,
 						  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#883: FILE: fs/ext2/dir.c:607:
+ext2_dirent *ext2_find_entry (struct inode *dir, struct dentry *dentry, struct page **res_page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#887: FILE: fs/ext2/dir.c:611:
+	unsigned reclen = EXT2_DIR_REC_LEN(namelen);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#897: FILE: fs/ext2/dir.c:621:
+	if (is_dx(dir))
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#899: FILE: fs/ext2/dir.c:623:
+		u32 hash = dx_hash (name, namelen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#902: FILE: fs/ext2/dir.c:626:
+		unsigned blocksize = get_blocksize (dir);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: fs/ext2/dir.c:626:
+		unsigned blocksize = get_blocksize (dir);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#903: FILE: fs/ext2/dir.c:627:
+		int err = dx_probe (dir, hash, &dxframe); // don't ignore the error!!

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#905: FILE: fs/ext2/dir.c:629:
+		while (1)
+		{

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#907: FILE: fs/ext2/dir.c:631:
+			if (!(data = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) goto dxfail;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#907: FILE: fs/ext2/dir.c:631:
+			if (!(data = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) goto dxfail;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#907: FILE: fs/ext2/dir.c:631:
+			if (!(data = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) goto dxfail;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#907: FILE: fs/ext2/dir.c:631:
+			if (!(data = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) goto dxfail;

CHECK:SPACING: No space is necessary after a cast
#908: FILE: fs/ext2/dir.c:632:
+			de = (ext2_dirent *) data;

CHECK:SPACING: No space is necessary after a cast
#909: FILE: fs/ext2/dir.c:633:
+			for (; (char *) de <= data + blocksize - reclen; de = ext2_next_entry(de))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#910: FILE: fs/ext2/dir.c:634:
+				if (ext2_match (namelen, name, de))
+				{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#910: FILE: fs/ext2/dir.c:634:
+				if (ext2_match (namelen, name, de))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#912: FILE: fs/ext2/dir.c:636:
+^I^I^I^I^Idxtrace(printk("Found %s in %i:%i page %p\n", name, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#912: FILE: fs/ext2/dir.c:636:
+					dxtrace(printk("Found %s in %i:%i page %p\n", name, 

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#913: FILE: fs/ext2/dir.c:637:
+						dxframe.at - dxframe.entries, le32_to_cpu(dxframe.at->block),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: fs/ext2/dir.c:637:
+					dxtrace(printk("Found %s in %i:%i page %p\n", name, 
+						dxframe.at - dxframe.entries, le32_to_cpu(dxframe.at->block),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dxframe.at'
#920: FILE: fs/ext2/dir.c:644:
+			if (++(dxframe.at) - dxframe.entries == dxframe.count) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#920: FILE: fs/ext2/dir.c:644:
+			if (++(dxframe.at) - dxframe.entries == dxframe.count) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#921: FILE: fs/ext2/dir.c:645:
+			if ((le32_to_cpu(dxframe.at->hash) & -2) != hash) break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#922: FILE: fs/ext2/dir.c:646:
+			dxtrace(printk("Try next, block %i\n", le32_to_cpu(dxframe.at->block)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#969: FILE: fs/ext2/dir.c:656:
+		char *kaddr;
+		page = fixme_acquire_page(dir, n);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#973: FILE: fs/ext2/dir.c:660:
+		kaddr = (char*)page_address(page);

CHECK:SPACING: No space is necessary after a cast
#974: FILE: fs/ext2/dir.c:661:
+		de = (ext2_dirent *) kaddr;

CHECK:SPACING: No space is necessary after a cast
#976: FILE: fs/ext2/dir.c:663:
+		for (; (char *) de <= kaddr; de = ext2_next_entry(de))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#977: FILE: fs/ext2/dir.c:664:
+			if (ext2_match (namelen, name, de))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#988: FILE: fs/ext2/dir.c:675:
+ext2_dirent *ext2_parent (struct inode *dir, struct page **p)

CHECK:SPACING: No space is necessary after a cast
#994: FILE: fs/ext2/dir.c:681:
+		de = ext2_next_entry((ext2_dirent *) page_address(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1001: FILE: fs/ext2/dir.c:688:
+ino_t ext2_find_inode (struct inode * dir, struct dentry *dentry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1001: FILE: fs/ext2/dir.c:688:
+ino_t ext2_find_inode (struct inode * dir, struct dentry *dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1006: FILE: fs/ext2/dir.c:693:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1007: FILE: fs/ext2/dir.c:694:
+	de = ext2_find_entry (dir, dentry, &page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1017: FILE: fs/ext2/dir.c:704:
+void ext2_set_entry (struct inode *dir, ext2_dirent *de, struct page *page, struct inode *inode)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1019: FILE: fs/ext2/dir.c:706:
+	unsigned from = (char *)de-(char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1019: FILE: fs/ext2/dir.c:706:
+	unsigned from = (char *)de-(char*)page_address(page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1019: FILE: fs/ext2/dir.c:706:
+	unsigned from = (char *)de-(char*)page_address(page);
 	                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1020: FILE: fs/ext2/dir.c:707:
+	unsigned to = from + le16_to_cpu(de->rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1026: FILE: fs/ext2/dir.c:713:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1028: FILE: fs/ext2/dir.c:715:
+	ext2_set_de_type (de, inode);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1031: FILE: fs/ext2/dir.c:718:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1038: FILE: fs/ext2/dir.c:725:
+int ext2_add_entry (struct dentry *dentry, struct inode *inode)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1043: FILE: fs/ext2/dir.c:730:
+	unsigned reclen = EXT2_DIR_REC_LEN(namelen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1050: FILE: fs/ext2/dir.c:737:
+	unsigned from, to;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1054: FILE: fs/ext2/dir.c:741:
+	if (is_dx(dir))
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1058: FILE: fs/ext2/dir.c:745:
+		u32 hash = dx_hash (name, namelen), hash2, block2;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1059: FILE: fs/ext2/dir.c:746:
+		unsigned blockshift = get_blockshift (dir), blocksize = 1 << blockshift;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1059: FILE: fs/ext2/dir.c:746:
+		unsigned blockshift = get_blockshift (dir), blocksize = 1 << blockshift;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1060: FILE: fs/ext2/dir.c:747:
+		unsigned count, split, continued;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1065: FILE: fs/ext2/dir.c:752:
+		if ((err = dx_probe (dir, hash, &dxframe))) return err;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1065: FILE: fs/ext2/dir.c:752:
+		if ((err = dx_probe (dir, hash, &dxframe))) return err;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1065: FILE: fs/ext2/dir.c:752:
+		if ((err = dx_probe (dir, hash, &dxframe))) return err;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1069: FILE: fs/ext2/dir.c:756:
+		if (!(b1 = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) return err;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1069: FILE: fs/ext2/dir.c:756:
+		if (!(b1 = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) return err;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1069: FILE: fs/ext2/dir.c:756:
+		if (!(b1 = acquire_block (dir, le32_to_cpu(dxframe.at->block), &page))) return err;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1070: FILE: fs/ext2/dir.c:757:
+		prepare_chunk (page, b1);

CHECK:SPACING: No space is necessary after a cast
#1071: FILE: fs/ext2/dir.c:758:
+		de = (ext2_dirent *) b1;

CHECK:SPACING: No space is necessary after a cast
#1073: FILE: fs/ext2/dir.c:760:
+		while ((char *) de < b1 + blocksize)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1073: FILE: fs/ext2/dir.c:760:
+		while ((char *) de < b1 + blocksize)
+		{

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1077: FILE: fs/ext2/dir.c:764:
+			if (!de->inode && rec_len >= reclen) goto dx_got_it;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1078: FILE: fs/ext2/dir.c:765:
+			if (rec_len >= name_len + reclen) goto dx_got_it;

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: fs/ext2/dir.c:766:
+			de = (ext2_dirent *) ((char *) de + rec_len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1083: FILE: fs/ext2/dir.c:770:
+		dxtrace(printk("entry count %i, limit %i\n", dxframe.count, dxframe.limit));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1085: FILE: fs/ext2/dir.c:772:
+		if (dxframe.count == dxframe.limit)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1092: FILE: fs/ext2/dir.c:779:
+		if (!(b2 = acquire_block (dir, block2 = dir->i_size >> blockshift, &page2)))
+		{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1092: FILE: fs/ext2/dir.c:779:
+		if (!(b2 = acquire_block (dir, block2 = dir->i_size >> blockshift, &page2)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1092: FILE: fs/ext2/dir.c:779:
+		if (!(b2 = acquire_block (dir, block2 = dir->i_size >> blockshift, &page2)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1094: FILE: fs/ext2/dir.c:781:
+			BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1100: FILE: fs/ext2/dir.c:787:
+		prepare_chunk (page2, b2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1101: FILE: fs/ext2/dir.c:788:
+		if (!page2->buffers) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1101: FILE: fs/ext2/dir.c:788:
+		if (!page2->buffers) BUG();

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1102: FILE: fs/ext2/dir.c:789:
+		if (!page->buffers) BUG();
+		{

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1102: FILE: fs/ext2/dir.c:789:
+		if (!page->buffers) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1102: FILE: fs/ext2/dir.c:789:
+		if (!page->buffers) BUG();

CHECK:SPACING: No space is necessary after a cast
#1106: FILE: fs/ext2/dir.c:793:
+			count = dx_make_map ((ext2_dirent *) b1, blocksize, map);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1106: FILE: fs/ext2/dir.c:793:
+			struct dx_map_entry map[MAX_DX_MAP];
+			count = dx_make_map ((ext2_dirent *) b1, blocksize, map);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1106: FILE: fs/ext2/dir.c:793:
+			count = dx_make_map ((ext2_dirent *) b1, blocksize, map);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1107: FILE: fs/ext2/dir.c:794:
+			split = count/2; // need to adjust to actual middle
 			             ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1112: FILE: fs/ext2/dir.c:799:
+			dxtrace(printk("Split block %i at %u, %i/%i\n", dxframe.at->block, hash2, split, count-split));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1112: FILE: fs/ext2/dir.c:799:
+			dxtrace(printk("Split block %i at %u, %i/%i\n", dxframe.at->block, hash2, split, count-split));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1112: FILE: fs/ext2/dir.c:799:
+			dxtrace(printk("Split block %i at %u, %i/%i\n", dxframe.at->block, hash2, split, count-split));
 			                                                                                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1115: FILE: fs/ext2/dir.c:802:
+			de2 = dx_copy (b1, b2, blocksize, map, split, count - split);

CHECK:SPACING: No space is necessary after a cast
#1116: FILE: fs/ext2/dir.c:803:
+			b3 = (char *) de2 + de2->rec_len;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1117: FILE: fs/ext2/dir.c:804:
+			de = dx_copy (b1, b3, blocksize - (b3 - b2), map, 0, split);

CHECK:SPACING: No space is necessary after a cast
#1118: FILE: fs/ext2/dir.c:805:
+			memcpy(b1, b3, (char *) de + de->rec_len - b3);

CHECK:SPACING: No space is necessary after a cast
#1119: FILE: fs/ext2/dir.c:806:
+			de = (ext2_dirent *) ((char *) de - b3 + b1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1120: FILE: fs/ext2/dir.c:807:
+			set_rec_full (de, b1 + blocksize);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1121: FILE: fs/ext2/dir.c:808:
+			set_rec_full (de2, b2 + blocksize);

CHECK:SPACING: No space is necessary after a cast
#1123: FILE: fs/ext2/dir.c:810:
+			dxtrace(dx_show_leaf ((ext2_dirent *) b1, blocksize, 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1123: FILE: fs/ext2/dir.c:810:
+			dxtrace(dx_show_leaf ((ext2_dirent *) b1, blocksize, 1));

CHECK:SPACING: No space is necessary after a cast
#1124: FILE: fs/ext2/dir.c:811:
+			dxtrace(dx_show_leaf ((ext2_dirent *) b2, blocksize, 1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1124: FILE: fs/ext2/dir.c:811:
+			dxtrace(dx_show_leaf ((ext2_dirent *) b2, blocksize, 1));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1127: FILE: fs/ext2/dir.c:814:
+			dxtrace(printk("Insert %s/%u ", name, hash));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1128: FILE: fs/ext2/dir.c:815:
+			if (hash >= hash2)
+			{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1130: FILE: fs/ext2/dir.c:817:
+				dxtrace(printk("above"));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1146: FILE: fs/ext2/dir.c:822:
+			dxtrace(printk("\n"));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1148: FILE: fs/ext2/dir.c:824:
+		commit_chunk (page2, b2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1149: FILE: fs/ext2/dir.c:825:
+		release_page (page2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1151: FILE: fs/ext2/dir.c:827:
+		prepare_chunk (dxframe.page, dxframe.data);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1152: FILE: fs/ext2/dir.c:828:
+		if (!dxframe.page->buffers) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1152: FILE: fs/ext2/dir.c:828:
+		if (!dxframe.page->buffers) BUG();

CHECK:SPACING: No space is necessary after a cast
#1153: FILE: fs/ext2/dir.c:829:
+		memmove (at + 1, at, (char *) (entries + dxframe.count) - (char *) (at));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1153: FILE: fs/ext2/dir.c:829:
+		memmove (at + 1, at, (char *) (entries + dxframe.count) - (char *) (at));

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1157: FILE: fs/ext2/dir.c:833:
+		entries[0].hash = cpu_to_le32(++dxframe.count); /* first hash field is entry count */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1158: FILE: fs/ext2/dir.c:834:
+		dxtrace(dx_show_index (&dxframe));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1159: FILE: fs/ext2/dir.c:835:
+		commit_chunk (dxframe.page, dxframe.data);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1162: FILE: fs/ext2/dir.c:838:
+		release_page (dxframe.page);

CHECK:SPACING: No space is necessary after a cast
#1167: FILE: fs/ext2/dir.c:843:
+		from = (char *) de - (char *) page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1179: FILE: fs/ext2/dir.c:855:
+		kaddr = (char*)page_address(page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1184: FILE: fs/ext2/dir.c:860:
+			if (ext2_match (namelen, name, de))

CHECK:SPACING: No space is necessary after a cast
#1192: FILE: fs/ext2/dir.c:868:
+			de = (ext2_dirent *) ((char *) de + rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1196: FILE: fs/ext2/dir.c:872:
+	BUG();

CHECK:SPACING: No space is necessary after a cast
#1200: FILE: fs/ext2/dir.c:876:
+	from = (char *) de - (char *) page_address(page);

CHECK:SPACING: No space is necessary after a cast
#1207: FILE: fs/ext2/dir.c:883:
+		ext2_dirent *de1 = (ext2_dirent *) ((char *) de + name_len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1208: FILE: fs/ext2/dir.c:884:
+		ext2_dirent *de1 = (ext2_dirent *) ((char *) de + name_len);
+		de1->rec_len = cpu_to_le16(rec_len - name_len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1213: FILE: fs/ext2/dir.c:889:
+	memcpy (de->name, name, namelen);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1215: FILE: fs/ext2/dir.c:891:
+	ext2_set_de_type (de, inode);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1218: FILE: fs/ext2/dir.c:894:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1242: FILE: fs/ext2/dir.c:906:
+int ext2_del_entry (ext2_dirent *dir, struct page * page )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1242: FILE: fs/ext2/dir.c:906:
+int ext2_del_entry (ext2_dirent *dir, struct page * page )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1242: FILE: fs/ext2/dir.c:906:
+int ext2_del_entry (ext2_dirent *dir, struct page * page )

CHECK:SPACING: No space is necessary after a cast
#1245: FILE: fs/ext2/dir.c:909:
+	struct inode *inode = (struct inode*) mapping->host;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1245: FILE: fs/ext2/dir.c:909:
+	struct inode *inode = (struct inode*) mapping->host;

CHECK:SPACING: No space is necessary after a cast
#1246: FILE: fs/ext2/dir.c:910:
+	char *kaddr = (char*) page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1246: FILE: fs/ext2/dir.c:910:
+	char *kaddr = (char*) page_address(page);

CHECK:SPACING: No space is necessary after a cast
#1247: FILE: fs/ext2/dir.c:911:
+	unsigned from = ((char*) dir - kaddr) & ~(get_blocksize(inode)-1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1247: FILE: fs/ext2/dir.c:911:
+	unsigned from = ((char*) dir - kaddr) & ~(get_blocksize(inode)-1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1247: FILE: fs/ext2/dir.c:911:
+	unsigned from = ((char*) dir - kaddr) & ~(get_blocksize(inode)-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1247: FILE: fs/ext2/dir.c:911:
+	unsigned from = ((char*) dir - kaddr) & ~(get_blocksize(inode)-1);
 	                                                              ^

CHECK:SPACING: No space is necessary after a cast
#1248: FILE: fs/ext2/dir.c:912:
+	unsigned to = ((char*) dir - kaddr) + le16_to_cpu(dir->rec_len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1248: FILE: fs/ext2/dir.c:912:
+	unsigned to = ((char*) dir - kaddr) + le16_to_cpu(dir->rec_len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1248: FILE: fs/ext2/dir.c:912:
+	unsigned to = ((char*) dir - kaddr) + le16_to_cpu(dir->rec_len);

CHECK:SPACING: No space is necessary after a cast
#1250: FILE: fs/ext2/dir.c:914:
+	ext2_dirent *de = (ext2_dirent *) (kaddr + from);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1255: FILE: fs/ext2/dir.c:919:
+	while ((char*)de < (char*)dir) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1255: FILE: fs/ext2/dir.c:919:
+	while ((char*)de < (char*)dir) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1260: FILE: fs/ext2/dir.c:924:
+		from = (char*)pde - (char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1260: FILE: fs/ext2/dir.c:924:
+		from = (char*)pde - (char*)page_address(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1263: FILE: fs/ext2/dir.c:927:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1265: FILE: fs/ext2/dir.c:929:
+		pde->rec_len = cpu_to_le16(to-from);
 		                             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1269: FILE: fs/ext2/dir.c:933:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1277: FILE: fs/ext2/dir.c:941:
+int ext2_make_empty (struct inode *dir, struct inode *parent)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1281: FILE: fs/ext2/dir.c:945:
+	unsigned blocksize = get_blocksize(dir);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1286: FILE: fs/ext2/dir.c:950:
+	int make_dx = test_opt (sb, DXTREE);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1287: FILE: fs/ext2/dir.c:951:
+	int start = make_dx? 1: 0;
 	                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1287: FILE: fs/ext2/dir.c:951:
+	int start = make_dx? 1: 0;
 	                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1292: FILE: fs/ext2/dir.c:956:
+	struct page *page = grab_cache_page(mapping, start);
+	unlock_page(page); maybe_lock_page(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1300: FILE: fs/ext2/dir.c:964:
+	base = (char*)page_address(page);

CHECK:SPACING: No space is necessary after a cast
#1302: FILE: fs/ext2/dir.c:966:
+	de = (ext2_dirent *) base;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1305: FILE: fs/ext2/dir.c:969:
+	memcpy (de->name, ".\0\0", 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1307: FILE: fs/ext2/dir.c:971:
+	ext2_set_de_type (de, dir);

CHECK:SPACING: No space is necessary after a cast
#1309: FILE: fs/ext2/dir.c:973:
+	de = (ext2_dirent *) (base + EXT2_DIR_REC_LEN(1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1312: FILE: fs/ext2/dir.c:976:
+	set_rec_len (de, blocksize - EXT2_DIR_REC_LEN(1));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1313: FILE: fs/ext2/dir.c:977:
+	memcpy (de->name, "..\0", 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1314: FILE: fs/ext2/dir.c:978:
+	ext2_set_de_type (de, dir);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1317: FILE: fs/ext2/dir.c:981:
+	if (make_dx)
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1319: FILE: fs/ext2/dir.c:983:
+		struct page *rootpage = grab_cache_page (mapping, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1320: FILE: fs/ext2/dir.c:984:
+		struct page *rootpage = grab_cache_page (mapping, 0);
+		unlock_page(rootpage); maybe_lock_page(rootpage);

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1321: FILE: fs/ext2/dir.c:985:
+		err = mapping->a_ops->prepare_write(NULL, rootpage, 0, blocksize); // must generalize this

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1322: FILE: fs/ext2/dir.c:986:
+		if (rootpage)
+		{

CHECK:SPACING: No space is necessary after a cast
#1324: FILE: fs/ext2/dir.c:988:
+			struct dx_root *root = (struct dx_root *) page_address(rootpage);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: fs/ext2/dir.c:990:
+			struct dx_entry *entries = root->entries;
+			dxtrace_on(printk("Making indexed directory\n"));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1326: FILE: fs/ext2/dir.c:990:
+			dxtrace_on(printk("Making indexed directory\n"));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1331: FILE: fs/ext2/dir.c:995:
+			set_rec_len (&root->fake, blocksize);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1332: FILE: fs/ext2/dir.c:996:
+			err = fixme_commit_chunk (rootpage, 0, blocksize);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1350: FILE: fs/ext2/dir.c:1014:
+int ext2_is_empty (struct inode *dir)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1355: FILE: fs/ext2/dir.c:1019:
+	int start = is_dx(dir)? 1: 0;
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1355: FILE: fs/ext2/dir.c:1019:
+	int start = is_dx(dir)? 1: 0;
 	                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1359: FILE: fs/ext2/dir.c:1023:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1363: FILE: fs/ext2/dir.c:1027:
+		ext2_dirent *de;
+		page = fixme_acquire_page(dir, i + start);

CHECK:SPACING: No space is necessary after a cast
#1368: FILE: fs/ext2/dir.c:1032:
+		kaddr = (char *) page_address(page);

CHECK:SPACING: No space is necessary after a cast
#1369: FILE: fs/ext2/dir.c:1033:
+		de = (ext2_dirent *) kaddr;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1370: FILE: fs/ext2/dir.c:1034:
+		kaddr += PAGE_CACHE_SIZE-EXT2_DIR_REC_LEN(1);
 		                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1379: FILE: fs/ext2/dir.c:1043:
+				if (de->name_len < 2) {
[...]
+				} else if (de->name[1] != '.')
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1401: FILE: fs/ext2/dir.c:1061:
+ssize_t hack_show_dir (struct file *filp, char *buf, size_t siz, loff_t *ppos)
                                     ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1401: FILE: fs/ext2/dir.c:1061:
+ssize_t hack_show_dir (struct file *filp, char *buf, size_t siz, loff_t *ppos)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1403: FILE: fs/ext2/dir.c:1063:
+	dx_show_buckets (filp->f_dentry->d_inode);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1407: FILE: fs/ext2/dir.c:1067:
+struct file_operations ext2_dir_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#1408: FILE: fs/ext2/dir.c:1068:
+	read:		hack_show_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1409: FILE: fs/ext2/dir.c:1069:
+	readdir:	ext2_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1409: FILE: fs/ext2/dir.c:1069:
+	readdir:	ext2_readdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1410: FILE: fs/ext2/dir.c:1070:
+	fsync:		ext2_sync_file,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1410: FILE: fs/ext2/dir.c:1070:
+	fsync:		ext2_sync_file,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#1423: FILE: fs/ext2/inode.c:233:
+static Indirect *ext2_get_branch(struct inode *inode,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1527: FILE: fs/ext2/namei.c:2:
+ * linux/fs/ext2/namei.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1703: FILE: fs/ext2/namei.c:59:
+	int err = ext2_add_entry(dentry, inode);
+	if (!err) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1713: FILE: fs/ext2/namei.c:64:
+	iput(inode);
 	^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1728: FILE: fs/ext2/namei.c:76:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1742: FILE: fs/ext2/namei.c:84:
+^I^Iif (!inode) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1982: FILE: fs/ext2/namei.c:125:
+static int ext2_symlink (struct inode * dir, struct dentry * dentry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1982: FILE: fs/ext2/namei.c:125:
+static int ext2_symlink (struct inode * dir, struct dentry * dentry,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1982: FILE: fs/ext2/namei.c:125:
+static int ext2_symlink (struct inode * dir, struct dentry * dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1983: FILE: fs/ext2/namei.c:126:
+static int ext2_symlink (struct inode * dir, struct dentry * dentry,
+	const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1983: FILE: fs/ext2/namei.c:126:
+	const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1985: FILE: fs/ext2/namei.c:128:
+	struct super_block * sb = dir->i_sb;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1987: FILE: fs/ext2/namei.c:130:
+	unsigned l = strlen(symname)+1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1987: FILE: fs/ext2/namei.c:130:
+	unsigned l = strlen(symname)+1;
 	                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1999: FILE: fs/ext2/namei.c:136:
+	inode = ext2_new_inode (dir, S_IFLNK | S_IRWXUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1999: FILE: fs/ext2/namei.c:136:
+	inode = ext2_new_inode (dir, S_IFLNK | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2015: FILE: fs/ext2/namei.c:141:
+	if (l > sizeof (inode->u.ext2_i.i_data)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->u.ext2_i.i_data'
#2015: FILE: fs/ext2/namei.c:141:
+	if (l > sizeof (inode->u.ext2_i.i_data)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2025: FILE: fs/ext2/namei.c:151:
+		memcpy((char*)&inode->u.ext2_i.i_data,symname,l);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2025: FILE: fs/ext2/namei.c:151:
+		memcpy((char*)&inode->u.ext2_i.i_data,symname,l);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2025: FILE: fs/ext2/namei.c:151:
+		memcpy((char*)&inode->u.ext2_i.i_data,symname,l);
 		                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2026: FILE: fs/ext2/namei.c:152:
+		inode->i_size = l-1;
 		                 ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2128: FILE: fs/ext2/namei.c:162:
+	iput (inode);
 	^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2128: FILE: fs/ext2/namei.c:162:
+	iput (inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2133: FILE: fs/ext2/namei.c:166:
+static int ext2_link (struct dentry * old_dentry, struct inode * dir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2133: FILE: fs/ext2/namei.c:166:
+static int ext2_link (struct dentry * old_dentry, struct inode * dir,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2133: FILE: fs/ext2/namei.c:166:
+static int ext2_link (struct dentry * old_dentry, struct inode * dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2134: FILE: fs/ext2/namei.c:167:
+static int ext2_link (struct dentry * old_dentry, struct inode * dir,
+	struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2229: FILE: fs/ext2/namei.c:184:
+static int ext2_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2229: FILE: fs/ext2/namei.c:184:
+static int ext2_mkdir(struct inode * dir, struct dentry * dentry, int mode)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2244: FILE: fs/ext2/namei.c:194:
+	inode = ext2_new_inode (dir, S_IFDIR | mode);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2293: FILE: fs/ext2/namei.c:220:
+	iput(inode);
 	^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2301: FILE: fs/ext2/namei.c:226:
+static int ext2_unlink(struct inode * dir, struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2305: FILE: fs/ext2/namei.c:228:
+	struct inode * inode = dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2306: FILE: fs/ext2/namei.c:229:
+	struct ext2_dir_entry_2 * de;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2307: FILE: fs/ext2/namei.c:230:
+	struct page * page;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2312: FILE: fs/ext2/namei.c:233:
+	de = ext2_find_entry (dir, dentry, &page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2321: FILE: fs/ext2/namei.c:237:
+	err = ext2_del_entry (de, page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2349: FILE: fs/ext2/namei.c:248:
+static int ext2_rmdir (struct inode * dir, struct dentry *dentry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2349: FILE: fs/ext2/namei.c:248:
+static int ext2_rmdir (struct inode * dir, struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2379: FILE: fs/ext2/namei.c:250:
+	struct inode * inode = dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2393: FILE: fs/ext2/namei.c:264:
+static int ext2_rename (struct inode * old_dir, struct dentry * old_dentry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2393: FILE: fs/ext2/namei.c:264:
+static int ext2_rename (struct inode * old_dir, struct dentry * old_dentry,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2393: FILE: fs/ext2/namei.c:264:
+static int ext2_rename (struct inode * old_dir, struct dentry * old_dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2394: FILE: fs/ext2/namei.c:265:
+static int ext2_rename (struct inode * old_dir, struct dentry * old_dentry,
+	struct inode * new_dir,	struct dentry * new_dentry )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2394: FILE: fs/ext2/namei.c:265:
+	struct inode * new_dir,	struct dentry * new_dentry )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2394: FILE: fs/ext2/namei.c:265:
+	struct inode * new_dir,	struct dentry * new_dentry )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2394: FILE: fs/ext2/namei.c:265:
+	struct inode * new_dir,	struct dentry * new_dentry )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2396: FILE: fs/ext2/namei.c:267:
+	struct inode * old_inode = old_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2397: FILE: fs/ext2/namei.c:268:
+	struct inode * new_inode = new_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2398: FILE: fs/ext2/namei.c:269:
+	struct page * dir_page = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2399: FILE: fs/ext2/namei.c:270:
+	struct ext2_dir_entry_2 * dir_de = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2400: FILE: fs/ext2/namei.c:271:
+	struct page * old_page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2401: FILE: fs/ext2/namei.c:272:
+	struct ext2_dir_entry_2 * old_de;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2404: FILE: fs/ext2/namei.c:275:
+	old_de = ext2_find_entry (old_dir, old_dentry, &old_page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2468: FILE: fs/ext2/namei.c:291:
+		if (dir_de && !ext2_is_empty (new_inode))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2472: FILE: fs/ext2/namei.c:295:
+		new_de = ext2_find_entry (new_dir, new_dentry, &new_page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2514: FILE: fs/ext2/namei.c:320:
+	ext2_del_entry (old_de, old_page);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2554: FILE: fs/ext2/super.c:191:
+		else if (!strcmp (this_char, "index"))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2554: FILE: fs/ext2/super.c:191:
 		}
+		else if (!strcmp (this_char, "index"))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2556: FILE: fs/ext2/super.c:193:
+			set_opt (*mount_options, DXTREE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2558: FILE: fs/ext2/super.c:195:
+			printk("EXT2 Index option not supported\n");

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dir' may be better as '(dir)' to avoid precedence issues
#2641: FILE: include/linux/ext2_fs.h:535:
+#define is_dx(dir) (dir->u.ext2_i.i_flags & EXT2_INDEX_FL)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2663: FILE: include/linux/ext2_fs.h:630:
+typedef struct ext2_dir_entry_2 ext2_dirent;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2665: FILE: include/linux/ext2_fs.h:632:
+extern int ext2_make_empty (struct inode *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2665: FILE: include/linux/ext2_fs.h:632:
+extern int ext2_make_empty (struct inode *, struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2665: FILE: include/linux/ext2_fs.h:632:
+extern int ext2_make_empty (struct inode *, struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2665: FILE: include/linux/ext2_fs.h:632:
+extern int ext2_make_empty (struct inode *, struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2666: FILE: include/linux/ext2_fs.h:633:
+extern ext2_dirent *ext2_find_entry (struct inode *,struct dentry *, struct page **);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2666: FILE: include/linux/ext2_fs.h:633:
+extern ext2_dirent *ext2_find_entry (struct inode *,struct dentry *, struct page **);
                                                    ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2666: FILE: include/linux/ext2_fs.h:633:
+extern ext2_dirent *ext2_find_entry (struct inode *,struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2666: FILE: include/linux/ext2_fs.h:633:
+extern ext2_dirent *ext2_find_entry (struct inode *,struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2666: FILE: include/linux/ext2_fs.h:633:
+extern ext2_dirent *ext2_find_entry (struct inode *,struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#2666: FILE: include/linux/ext2_fs.h:633:
+extern ext2_dirent *ext2_find_entry (struct inode *,struct dentry *, struct page **);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2667: FILE: include/linux/ext2_fs.h:634:
+extern int ext2_add_entry (struct dentry *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2667: FILE: include/linux/ext2_fs.h:634:
+extern int ext2_add_entry (struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2667: FILE: include/linux/ext2_fs.h:634:
+extern int ext2_add_entry (struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2667: FILE: include/linux/ext2_fs.h:634:
+extern int ext2_add_entry (struct dentry *, struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2668: FILE: include/linux/ext2_fs.h:635:
+extern int ext2_del_entry (ext2_dirent *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2668: FILE: include/linux/ext2_fs.h:635:
+extern int ext2_del_entry (ext2_dirent *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext2_dirent *' should also have an identifier name
#2668: FILE: include/linux/ext2_fs.h:635:
+extern int ext2_del_entry (ext2_dirent *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2668: FILE: include/linux/ext2_fs.h:635:
+extern int ext2_del_entry (ext2_dirent *, struct page *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2669: FILE: include/linux/ext2_fs.h:636:
+extern void ext2_set_entry (struct inode *, ext2_dirent *, struct page *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2669: FILE: include/linux/ext2_fs.h:636:
+extern void ext2_set_entry (struct inode *, ext2_dirent *, struct page *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2669: FILE: include/linux/ext2_fs.h:636:
+extern void ext2_set_entry (struct inode *, ext2_dirent *, struct page *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext2_dirent *' should also have an identifier name
#2669: FILE: include/linux/ext2_fs.h:636:
+extern void ext2_set_entry (struct inode *, ext2_dirent *, struct page *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2669: FILE: include/linux/ext2_fs.h:636:
+extern void ext2_set_entry (struct inode *, ext2_dirent *, struct page *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2669: FILE: include/linux/ext2_fs.h:636:
+extern void ext2_set_entry (struct inode *, ext2_dirent *, struct page *, struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2670: FILE: include/linux/ext2_fs.h:637:
+extern ino_t ext2_find_inode (struct inode *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2670: FILE: include/linux/ext2_fs.h:637:
+extern ino_t ext2_find_inode (struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2670: FILE: include/linux/ext2_fs.h:637:
+extern ino_t ext2_find_inode (struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2670: FILE: include/linux/ext2_fs.h:637:
+extern ino_t ext2_find_inode (struct inode *, struct dentry *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2671: FILE: include/linux/ext2_fs.h:638:
+extern int ext2_is_empty (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2671: FILE: include/linux/ext2_fs.h:638:
+extern int ext2_is_empty (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2671: FILE: include/linux/ext2_fs.h:638:
+extern int ext2_is_empty (struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2672: FILE: include/linux/ext2_fs.h:639:
+extern ext2_dirent *ext2_parent (struct inode *, struct page **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2672: FILE: include/linux/ext2_fs.h:639:
+extern ext2_dirent *ext2_parent (struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2672: FILE: include/linux/ext2_fs.h:639:
+extern ext2_dirent *ext2_parent (struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#2672: FILE: include/linux/ext2_fs.h:639:
+extern ext2_dirent *ext2_parent (struct inode *, struct page **);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#2711: FILE: mm/filemap.c:509:
+	flags = page->flags & ~((1 << PG_uptodate) | (1 << PG_error) | (1 << PG_dirty) | (1 << PG_referenced) | (1 << PG_arch_1)| (1 << PG_checked));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#2711: FILE: mm/filemap.c:509:
+	flags = page->flags & ~((1 << PG_uptodate) | (1 << PG_error) | (1 << PG_dirty) | (1 << PG_referenced) | (1 << PG_arch_1)| (1 << PG_checked));
 	                                                                                                                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545738.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 132 errors, 263 warnings, 128 checks, 2467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545738.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
