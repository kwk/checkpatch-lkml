WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This patch contains the functions used to perform copyup operations in unionfs.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/copyup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#130: FILE: fs/unionfs/copyup.c:88:
+	} else if (S_ISBLK(old_mode)
+		   || S_ISCHR(old_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#131: FILE: fs/unionfs/copyup.c:89:
+		   || S_ISCHR(old_mode)
+		   || S_ISFIFO(old_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#132: FILE: fs/unionfs/copyup.c:90:
+		   || S_ISFIFO(old_mode)
+		   || S_ISSOCK(old_mode)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#144: FILE: fs/unionfs/copyup.c:102:
+		args.create.nd = NULL;
 		            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#149: FILE: fs/unionfs/copyup.c:107:
+		printk(KERN_ERR "Unknown inode type %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/unionfs/copyup.c:108:
+		printk(KERN_ERR "Unknown inode type %d\n",
+				old_mode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#151: FILE: fs/unionfs/copyup.c:109:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: fs/unionfs/copyup.c:136:
+	input_file = dentry_open(old_hidden_dentry,
+			unionfs_lower_mnt_idx(dentry, old_bindex), O_RDONLY | O_LARGEFILE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: fs/unionfs/copyup.c:152:
+	output_file = dentry_open(new_hidden_dentry,
+			unionfs_lower_mnt_idx(dentry, new_bindex), O_WRONLY | O_LARGEFILE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'write_bytes < read_bytes'
#241: FILE: fs/unionfs/copyup.c:199:
+		if (write_bytes < 0 || (write_bytes < read_bytes)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#274: FILE: fs/unionfs/copyup.c:232:
+ * pointer */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#312: FILE: fs/unionfs/copyup.c:270:
+	BUG_ON(new_bindex < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: fs/unionfs/copyup.c:271:
+	BUG_ON(new_bindex >= old_bindex);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#319: FILE: fs/unionfs/copyup.c:277:
+	if ((err = is_robranch_super(sb, new_bindex))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#337: FILE: fs/unionfs/copyup.c:295:
+	if (S_ISLNK(old_hidden_dentry->d_inode->i_mode)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#349: FILE: fs/unionfs/copyup.c:307:
+		err = old_hidden_dentry->d_inode->i_op->readlink(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: fs/unionfs/copyup.c:338:
+		err = __copyup_reg_data(dentry, new_hidden_dentry, new_bindex,
+				old_hidden_dentry, old_bindex, copyup_file, len);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#385: FILE: fs/unionfs/copyup.c:343:
+	if ((err = copyup_permissions(sb, old_hidden_dentry, new_hidden_dentry)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: fs/unionfs/copyup.c:356:
+	 * really care about the return value of vfs_unlink */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#424: FILE: fs/unionfs/copyup.c:382:
+ * "name".  */

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#461: FILE: fs/unionfs/copyup.c:419:
+/* This function replicates the directory structure upto given dentry
                                                     ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#471: FILE: fs/unionfs/copyup.c:429:
+static inline void __cleanup_dentry(struct dentry * dentry, int bindex,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: fs/unionfs/copyup.c:430:
+static inline void __cleanup_dentry(struct dentry * dentry, int bindex,
+					int old_bstart, int old_bend)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#516: FILE: fs/unionfs/copyup.c:474:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: fs/unionfs/copyup.c:477:
+static inline void __set_inode(struct dentry * upper, struct dentry * lower,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: fs/unionfs/copyup.c:477:
+static inline void __set_inode(struct dentry * upper, struct dentry * lower,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/unionfs/copyup.c:478:
+static inline void __set_inode(struct dentry * upper, struct dentry * lower,
+				int bindex)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: fs/unionfs/copyup.c:481:
+	unionfs_set_lower_inode_idx(upper->d_inode, bindex,
+			igrab(lower->d_inode));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#529: FILE: fs/unionfs/copyup.c:487:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: fs/unionfs/copyup.c:490:
+static inline void __set_dentry(struct dentry * upper, struct dentry * lower,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: fs/unionfs/copyup.c:490:
+static inline void __set_dentry(struct dentry * upper, struct dentry * lower,

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#542: FILE: fs/unionfs/copyup.c:500:
+/* This function replicates the directory structure upto given dentry
                                                     ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#543: FILE: fs/unionfs/copyup.c:501:
+ * in the bindex branch.  */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#572: FILE: fs/unionfs/copyup.c:530:
+	if ((err = is_robranch_super(dir->i_sb, bindex))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#633: FILE: fs/unionfs/copyup.c:591:
+	 * horrible to follow and should be replaced with cleaner code. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#651: FILE: fs/unionfs/copyup.c:609:
+		} else {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: fs/unionfs/copyup.c:628:
+			 * multiple references on the same dentry */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: fs/unionfs/copyup.c:645:
+				err = copyup_permissions(dir->i_sb,
+						child_dentry, hidden_dentry);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#695: FILE: fs/unionfs/copyup.c:653:
+
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012780.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 16 warnings, 18 checks, 665 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012780.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
