ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#62: 
--- a/arch/i386/kernel/entry.S	Fri Sep 24 18:58:47 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: arch/ppc/kernel/misc.S:1454:
+^I.long sys_ioprio_get^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#90: FILE: drivers/block/cfq-iosched.c:11:
+ *  noone else wants to use the disk. 100% is considered real-time io, and
     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Withing' may be misspelled - perhaps 'Within'?
#92: FILE: drivers/block/cfq-iosched.c:13:
+ *  io, a class may consume 100% disk bandwidth regardless. Withing a class,
                                                             ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'crq' - possible side-effects?
#141: FILE: drivers/block/cfq-iosched.c:66:
+#define cfq_account_io(crq)	\
+	((crq)->ioprio != IOPRIO_IDLE && (crq)->ioprio != IOPRIO_RT)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: drivers/block/cfq-iosched.c:196:
+	BUG_ON(!hlist_unhashed(&crq->hash));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: drivers/block/cfq-iosched.c:197:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: drivers/block/cfq-iosched.c:197:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: drivers/block/cfq-iosched.c:210:
+		BUG_ON(hlist_unhashed(&crq->hash));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#332: FILE: drivers/block/cfq-iosched.c:227:
+#define RB_EMPTY(node)		((node)->rb_node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: drivers/block/cfq-iosched.c:232:
+cfq_del_crq_rb(struct cfq_data *cfqd, struct cfq_queue *cfqq,struct cfq_rq *crq)
                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: drivers/block/cfq-iosched.c:278:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: drivers/block/cfq-iosched.c:414:
+^Icfqd->cid[crq->ioprio].busy_sectors += $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#517: FILE: drivers/block/cfq-iosched.c:492:
+	q_rq = q_io = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#645: FILE: drivers/block/cfq-iosched.c:612:
+	if (cfq_dispatch_requests(q, IOPRIO_IDLE, cfqd->cfq_idle_quantum, cfqd->cfq_idle_quantum_io))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: drivers/block/cfq-iosched.c:633:
+		BUG_ON(list_empty(cfqd->dispatch));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: drivers/block/cfq-iosched.c:636:
+		BUG_ON(q->last_merge == rq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#672: FILE: drivers/block/cfq-iosched.c:639:
+			BUG_ON(!hlist_unhashed(&crq->hash));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#711: FILE: drivers/block/cfq-iosched.c:671:
 
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#798: FILE: drivers/block/cfq-iosched.c:749:
 	if (cfqq) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: drivers/block/cfq-iosched.c:754:
+^I^I^Iprintk("prio hash collision %d %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#803: FILE: drivers/block/cfq-iosched.c:754:
+			printk("prio hash collision %d %d\n", 

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#807: FILE: drivers/block/cfq-iosched.c:758:
+				WARN_ON(cfqd->cid[cfqq->ioprio].busy_queues<0);
 				                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: drivers/block/cfq-iosched.c:760:
+^I^I^I^Ilist_move_tail(&cfqq->cfq_list, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: drivers/block/cfq-iosched.c:769:
+^I^I^Ilist_add_tail(&cfqq->cfq_list, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: drivers/block/cfq-iosched.c:777:
+^I^I^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#887: FILE: drivers/block/cfq-iosched.c:839:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: drivers/block/cfq-iosched.c:853:
+^I^I^Iprintk("%s: bad insert point %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#903: FILE: drivers/block/cfq-iosched.c:853:
+			printk("%s: bad insert point %d\n", 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: drivers/block/cfq-iosched.c:854:
+			       __FUNCTION__,where);
 			                   ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#904: FILE: drivers/block/cfq-iosched.c:854:
+			       __FUNCTION__,where);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1013: FILE: drivers/block/cfq-iosched.c:946:
+		BUG_ON(!hlist_unhashed(&crq->hash));

CHECK:SPACING: No space is necessary after a cast
#1049: FILE: drivers/block/cfq-iosched.c:1014:
+	struct cfq_data *cfqd = (struct cfq_data *) data;

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: drivers/block/cfq-iosched.c:1044:
+	cfqd->timer.data = (unsigned long) cfqd;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->crq_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#1091: FILE: drivers/block/cfq-iosched.c:1057:
+	cfqd->crq_hash = kmalloc(sizeof(struct hlist_head) * CFQ_MHASH_ENTRIES,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->cfq_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#1097: FILE: drivers/block/cfq-iosched.c:1062:
+	cfqd->cfq_hash = kmalloc(sizeof(struct hlist_head) * CFQ_QHASH_ENTRIES,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: drivers/block/cfq-iosched.c:1067:
+^Icfqd->crq_pool = mempool_create(BLKDEV_MIN_RQ, mempool_alloc_slab, $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1172: FILE: drivers/block/cfq-iosched.c:1187:
 };
+static struct cfq_fs_entry cfq_quantum_io_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1173: FILE: drivers/block/cfq-iosched.c:1188:
+	.attr = {.name = "quantum_io", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1177: FILE: drivers/block/cfq-iosched.c:1192:
+};
+static struct cfq_fs_entry cfq_idle_quantum_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1178: FILE: drivers/block/cfq-iosched.c:1193:
+	.attr = {.name = "idle_quantum", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1182: FILE: drivers/block/cfq-iosched.c:1197:
+};
+static struct cfq_fs_entry cfq_idle_quantum_io_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1183: FILE: drivers/block/cfq-iosched.c:1198:
+	.attr = {.name = "idle_quantum_io", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1192: FILE: drivers/block/cfq-iosched.c:1207:
 };
+static struct cfq_fs_entry cfq_grace_rt_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1193: FILE: drivers/block/cfq-iosched.c:1208:
+	.attr = {.name = "grace_rt", .mode = S_IRUGO | S_IWUSR },

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1197: FILE: drivers/block/cfq-iosched.c:1212:
+};
+static struct cfq_fs_entry cfq_grace_idle_entry = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1198: FILE: drivers/block/cfq-iosched.c:1213:
+	.attr = {.name = "grace_idle", .mode = S_IRUGO | S_IWUSR },

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1319: FILE: drivers/block/ll_rw_blk.c:3183:
+	printk("%s: set ioprio %d\n", current->comm, ioprio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1399: FILE: include/linux/elevator.h:79:
+extern void elv_set_congested(request_queue_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1399: FILE: include/linux/elevator.h:79:
+extern void elv_set_congested(request_queue_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1408: FILE: include/linux/elevator.h:125:
+#define RQ_ELV_DATA(rq)		(rq)->elevator_private

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1429: FILE: include/linux/fs.h:1584:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 21 warnings, 17 checks, 1318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
