WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#72: FILE: arch/i386/Kconfig:737:
+config MEMHOTPLUG
+	bool "Memory hotplug test"
+	depends on !X86_PAE
+	default n
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#187: FILE: include/linux/rmap.h:99:
+int try_to_unmap(struct page *, struct list_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#187: FILE: include/linux/rmap.h:99:
+int try_to_unmap(struct page *, struct list_head *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#224: FILE: mm/filemap.c:499:
+			BUG_ON(PageAgain(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: mm/filemap.c:743:
+		BUG_ON(PageAgain(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: mm/filemap.c:1213:
+	BUG_ON(PageAgain(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#250: FILE: mm/filemap.c:1323:
+	BUG_ON(PageAgain(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: mm/filemap.c:1529:
+	BUG_ON(PageAgain(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: mm/memory.c:1341:
+	BUG_ON(PageAgain(page));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#385: FILE: mm/page_alloc.c:1186:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: mm/page_alloc.c:1345:
+			BUG();

ERROR:SPACING: space required before the open parenthesis '('
#464: FILE: mm/page_alloc.c:1382:
+			for(; k >= 0; k--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!NODE_DATA"
#467: FILE: mm/page_alloc.c:1385:
+					if (NODE_DATA(node) == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:INDENTED_LABEL: labels should not be indented
#475: FILE: mm/page_alloc.c:1393:
+				next:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#488: FILE: mm/page_alloc.c:1406:
+		BUG_ON(j > sizeof(zonelist->zones) /

ERROR:SPACING: space required before the open parenthesis '('
#490: FILE: mm/page_alloc.c:1408:
+		for(; j < sizeof(zonelist->zones) /

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: mm/page_alloc.c:1411:
+  ^I} $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: mm/page_alloc.c:1411:
+  ^I} $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#493: FILE: mm/page_alloc.c:1411:
+  ^I} $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: mm/page_alloc.c:1411:
+  ^I} $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "NODE_DATA"
#510: FILE: mm/page_alloc.c:1426:
+		if (NODE_DATA(i) != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: mm/page_alloc.c:1500:
+void memmap_init_zone(struct page *start, unsigned long size, int nid,
 		unsigned long zone, unsigned long start_pfn)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: mm/page_alloc.c:1539:
+#endif^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#548: FILE: mm/page_alloc.c:1618:
+		else
[...]
 		zone->wait_table = (wait_queue_head_t *)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#558: FILE: mm/page_alloc.c:1675:
+			if (!cold) {
+			zone->free_area[i].map = 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: mm/page_alloc.c:1676:
+^I^I^Izone->free_area[i].map = $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#560: FILE: mm/page_alloc.c:1677:
+			  (unsigned long *)kmalloc(bitmap_size, GFP_KERNEL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#562: FILE: mm/page_alloc.c:1679:
+			} else
[...]
 			zone->free_area[i].map = 

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: mm/page_alloc.c:1679:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: mm/rmap.c:426:
+static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,
+    struct list_head *force)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: mm/rmap.c:426:
+    struct list_head *force)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!force"
#612: FILE: mm/rmap.c:474:
+		if (force == NULL || vma->vm_flags & VM_RESERVED) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vlist)...) over kmalloc(sizeof(struct page_va_list)...)
#617: FILE: mm/rmap.c:479:
+		vlist = kmalloc(sizeof(struct page_va_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vlist->mm"
#620: FILE: mm/rmap.c:482:
+		if (vlist->mm == NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#694: FILE: mm/swapfile.c:661:
+	again:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#714: FILE: mm/swapfile.c:809:
+			BUG_ON(PageAgain(page));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#725: FILE: mm/truncate.c:136:
+			 * is done in truncate_complete_page */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page->mapping"
#733: FILE: mm/truncate.c:170:
+			if (page->mapping == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#741: FILE: mm/truncate.c:178:
+				if (page == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#742: FILE: mm/truncate.c:179:
+					BUG_ON(again);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#748: FILE: mm/truncate.c:185:
+				BUG_ON(!again);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#769: FILE: mm/truncate.c:284:
+				BUG_ON(page->mapping != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#769: FILE: mm/truncate.c:284:
+				BUG_ON(page->mapping != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: mm/truncate.c:292:
+				BUG_ON(!PageAgain(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: mm/vmscan.c:1223:
+	pgdat->kswapd = kthread_create(kswapd, pgdat, "kswapd%d",
+	    pgdat->node_id);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#849: FILE: include/linux/memhotplug.h:1:
+#ifndef _LINUX_MEMHOTPLUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#864: FILE: include/linux/memhotplug.h:16:
+	struct page * (*remap_alloc_page)(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#865: FILE: include/linux/memhotplug.h:17:
+	int (*remap_delete_page)(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#866: FILE: include/linux/memhotplug.h:18:
+	int (*remap_copy_page)(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#866: FILE: include/linux/memhotplug.h:18:
+	int (*remap_copy_page)(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#867: FILE: include/linux/memhotplug.h:19:
+	int (*remap_lru_add_page)(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#867: FILE: include/linux/memhotplug.h:19:
+	int (*remap_lru_add_page)(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#868: FILE: include/linux/memhotplug.h:20:
+	int (*remap_release_buffers)(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#873: FILE: include/linux/memhotplug.h:25:
+extern int remapd(void *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#874: FILE: include/linux/memhotplug.h:26:
+extern int remap_onepage(struct page *, int, int, struct remap_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#874: FILE: include/linux/memhotplug.h:26:
+extern int remap_onepage(struct page *, int, int, struct remap_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#874: FILE: include/linux/memhotplug.h:26:
+extern int remap_onepage(struct page *, int, int, struct remap_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#874: FILE: include/linux/memhotplug.h:26:
+extern int remap_onepage(struct page *, int, int, struct remap_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct remap_operations *' should also have an identifier name
#874: FILE: include/linux/memhotplug.h:26:
+extern int remap_onepage(struct page *, int, int, struct remap_operations *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: include/linux/memhotplug.h:27:
+extern int remap_onepage_normal(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#875: FILE: include/linux/memhotplug.h:27:
+extern int remap_onepage_normal(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#875: FILE: include/linux/memhotplug.h:27:
+extern int remap_onepage_normal(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#875: FILE: include/linux/memhotplug.h:27:
+extern int remap_onepage_normal(struct page *, int, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#884: FILE: mm/memhotplug.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#885: FILE: mm/memhotplug.c:2:
+ *  linux/mm/memhotplug.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#908: FILE: mm/memhotplug.c:25:
+print_buffer(struct page* page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#910: FILE: mm/memhotplug.c:27:
+	struct address_space* mapping = page_mapping(page);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#914: FILE: mm/memhotplug.c:31:
+	bh = head = page_buffers(page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#915: FILE: mm/memhotplug.c:32:
+	printk("buffers:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#917: FILE: mm/memhotplug.c:34:
+		printk(" %lx %d", bh->b_state, atomic_read(&bh->b_count));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#921: FILE: mm/memhotplug.c:38:
+	printk("\n");

ERROR:SPACING: space required before the open parenthesis '('
#932: FILE: mm/memhotplug.c:49:
+	while(!list_empty(vlist)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#937: FILE: mm/memhotplug.c:54:
+		if (vma == NULL || !(vma->vm_flags & VM_LOCKED))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: mm/memhotplug.c:57:
+		error = get_user_pages(current, v1->mm, v1->addr, PAGE_SIZE,
+		    (vma->vm_flags & VM_WRITE) != 0, 0, NULL, NULL);

WARNING:INDENTED_LABEL: labels should not be indented
#941: FILE: mm/memhotplug.c:58:
+	out:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#962: FILE: mm/memhotplug.c:79:
+	BUG_ON(!PageLocked(page));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#968: FILE: mm/memhotplug.c:85:
+		printk("remap_preparepage: mapping %p page %p\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_preparepage', this function's name, in a string
#968: FILE: mm/memhotplug.c:85:
+		printk("remap_preparepage: mapping %p page %p\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: mm/memhotplug.c:86:
+		printk("remap_preparepage: mapping %p page %p\n",
+		    page->mapping, page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping"
#985: FILE: mm/memhotplug.c:102:
+		    mapping != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping->a_ops->writepage"
#986: FILE: mm/memhotplug.c:103:
+		    mapping->a_ops->writepage != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#988: FILE: mm/memhotplug.c:105:
+			if (clear_page_dirty_for_io(page)) {
[...]
+			} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1004: FILE: mm/memhotplug.c:121:
+					BUG();

CHECK:BRACES: Unbalanced braces around else statement
#1017: FILE: mm/memhotplug.c:134:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1040: FILE: mm/memhotplug.c:157:
+ * since it in the swap cache. $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1047: FILE: mm/memhotplug.c:164:
+			printk("page %p not mapped: count %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1048: FILE: mm/memhotplug.c:165:
+			printk("page %p not mapped: count %d\n",
+			    page, page_count(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1071: FILE: mm/memhotplug.c:188:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1076: FILE: mm/memhotplug.c:193:
+		printk("mapping changed %p -> %p, page %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: mm/memhotplug.c:194:
+		printk("mapping changed %p -> %p, page %p\n",
+		    mapping, page_mapping(page), page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: mm/memhotplug.c:196:
+	if (radix_tree_delete(&mapping->page_tree,
+	    PageSwapCache(page) ? page->private : page->index) == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1093: FILE: mm/memhotplug.c:210:
+	radix_tree_insert(&mapping->page_tree,
+	    PageSwapCache(page) ? page->private : page->index, newpage);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: mm/memhotplug.c:232:
+	while (page_mapped(page) &&
+	    (error = try_to_unmap(page, vlist)) == SWAP_AGAIN) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: mm/memhotplug.c:253:
+wait_on_page_freeable(struct page *page, struct address_space *mapping,
+			struct list_head *vlist, int truncated,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1152: FILE: mm/memhotplug.c:269:
+				printk("remap_onepage: still waiting on %p %d\n", page, nretry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1160: FILE: mm/memhotplug.c:277:
+		BUG_ON(page_count(page) == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping1"
#1162: FILE: mm/memhotplug.c:279:
+		if (mapping != mapping1 && mapping1 != NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1163: FILE: mm/memhotplug.c:280:
+			printk("mapping changed %p -> %p, page %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1164: FILE: mm/memhotplug.c:281:
+			printk("mapping changed %p -> %p, page %p\n",
+			    mapping, mapping1, page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: mm/memhotplug.c:294:
+free_truncated_pages(struct page *page, struct page *newpage,
+			 struct address_space *mapping)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1182: FILE: mm/memhotplug.c:299:
+	p = radix_tree_lookup(&mapping->page_tree,
+	    PageSwapCache(newpage) ? newpage->private : newpage->index);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1183: FILE: mm/memhotplug.c:300:
+	if (p != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1185: FILE: mm/memhotplug.c:302:
+		printk("page %p newpage %p radix %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: mm/memhotplug.c:303:
+		printk("page %p newpage %p radix %p\n",
+		    page, newpage, p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1187: FILE: mm/memhotplug.c:304:
+		BUG_ON(p == newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1189: FILE: mm/memhotplug.c:306:
+	BUG_ON(page_mapping(page) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#1189: FILE: mm/memhotplug.c:306:
+	BUG_ON(page_mapping(page) != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1192: FILE: mm/memhotplug.c:309:
+		printk("newpage count %d != 1, %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1193: FILE: mm/memhotplug.c:310:
+		printk("newpage count %d != 1, %p\n",
+		    page_count(newpage), newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1194: FILE: mm/memhotplug.c:311:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1197: FILE: mm/memhotplug.c:314:
+	newpage->mapping = page->mapping = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1210: FILE: mm/memhotplug.c:327:
+is_page_truncated(struct page *page, struct page *newpage,
+			 struct address_space *mapping)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1213: FILE: mm/memhotplug.c:330:
+	void *p;
+	spin_lock_irq(&mapping->tree_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: mm/memhotplug.c:336:
+	p = radix_tree_lookup(&mapping->page_tree,
+	    PageSwapCache(newpage) ? newpage->private : newpage->index);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1221: FILE: mm/memhotplug.c:338:
+	if (p == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1222: FILE: mm/memhotplug.c:339:
+		BUG_ON(page->mapping != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#1222: FILE: mm/memhotplug.c:339:
+		BUG_ON(page->mapping != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1233: FILE: mm/memhotplug.c:350:
+remap_exchange_pages(struct page *page, struct page *newpage,
+			 struct address_space *mapping)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: mm/memhotplug.c:368:
+radix_tree_rewind_page(struct page *page, struct page *newpage,
+		 struct address_space *mapping)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1261: FILE: mm/memhotplug.c:378:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!radix_tree_delete"
#1266: FILE: mm/memhotplug.c:383:
+	if (radix_tree_delete(&mapping->page_tree, index) == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1280: FILE: mm/memhotplug.c:397:
+	for(; page_count(newpage) > 2; waitcnt--) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1284: FILE: mm/memhotplug.c:401:
+			printk("You are hosed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1285: FILE: mm/memhotplug.c:402:
+			printk("newpage %p flags %lx %d %d, page %p flags %lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1286: FILE: mm/memhotplug.c:403:
+			printk("newpage %p flags %lx %d %d, page %p flags %lx %d\n",
+			    newpage, newpage->flags, page_count(newpage),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1289: FILE: mm/memhotplug.c:406:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1292: FILE: mm/memhotplug.c:409:
+	BUG_ON(PageUptodate(newpage));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1297: FILE: mm/memhotplug.c:414:
+		printk("newpage %p truncated. page %p\n", newpage, page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1298: FILE: mm/memhotplug.c:415:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1302: FILE: mm/memhotplug.c:419:
+	BUG_ON(page_count(newpage) != 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1323: FILE: mm/memhotplug.c:440:
+	BUG_ON(page_count(page) != 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1354: FILE: mm/memhotplug.c:471:
+        .remap_delete_page^I= remap_delete_page,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: mm/memhotplug.c:471:
+        .remap_delete_page^I= remap_delete_page,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1355: FILE: mm/memhotplug.c:472:
+        .remap_copy_page^I= remap_copy_page,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1355: FILE: mm/memhotplug.c:472:
+        .remap_copy_page^I= remap_copy_page,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1356: FILE: mm/memhotplug.c:473:
+        .remap_lru_add_page^I= remap_lru_add_page,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: mm/memhotplug.c:473:
+        .remap_lru_add_page^I= remap_lru_add_page,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1357: FILE: mm/memhotplug.c:474:
+        .remap_release_buffers^I= remap_release_buffer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: mm/memhotplug.c:474:
+        .remap_release_buffers^I= remap_release_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1358: FILE: mm/memhotplug.c:475:
+        .remap_prepare^I^I= remap_preparepage,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: mm/memhotplug.c:475:
+        .remap_prepare^I^I= remap_preparepage,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1359: FILE: mm/memhotplug.c:476:
+        .remap_stick_page^I= stick_mlocked_page$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: mm/memhotplug.c:476:
+        .remap_stick_page^I= stick_mlocked_page$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1366: FILE: mm/memhotplug.c:483:
+int remap_onepage(struct page *page, int nodeid, int fastmode,
+				struct remap_operations *ops)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1372: FILE: mm/memhotplug.c:489:
+	int nretry = fastmode ? HZ/50: HZ*10; /* XXXX */
 	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1372: FILE: mm/memhotplug.c:489:
+	int nretry = fastmode ? HZ/50: HZ*10; /* XXXX */
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1372: FILE: mm/memhotplug.c:489:
+	int nretry = fastmode ? HZ/50: HZ*10; /* XXXX */
 	                                 ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1374: FILE: mm/memhotplug.c:491:
+	if ((newpage = ops->remap_alloc_page(nodeid)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1377: FILE: mm/memhotplug.c:494:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#1387: FILE: mm/memhotplug.c:504:
+	if (mapping == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1394: FILE: mm/memhotplug.c:511:
+		printk("buffer reappeared\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1396: FILE: mm/memhotplug.c:513:
+	if ((nretry = wait_on_page_freeable(page, mapping, &vlist, truncated, nretry, ops)) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1403: FILE: mm/memhotplug.c:520:
+		BUG();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1405: FILE: mm/memhotplug.c:522:
+	switch (is_page_truncated(page, newpage, mapping)) {
+		case 0:
[...]
+		case -1:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1414: FILE: mm/memhotplug.c:531:
+			BUG_ON(page_mapping(page) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#1414: FILE: mm/memhotplug.c:531:
+			BUG_ON(page_mapping(page) != NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1419: FILE: mm/memhotplug.c:536:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1420: FILE: mm/memhotplug.c:537:
+	BUG_ON(mapping != page_mapping(page));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1486: FILE: mm/memhotplug.c:603:
+		printk("remapd already running\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remapd', this function's name, in a string
#1486: FILE: mm/memhotplug.c:603:
+		printk("remapd already running\n");

ERROR:SPACING: space required before the open parenthesis '('
#1491: FILE: mm/memhotplug.c:608:
+	while(nr_failed < 100) {

ERROR:SPACING: space required before the open parenthesis '('
#1493: FILE: mm/memhotplug.c:610:
+		for(active = 0; active < 2; active++) {

ERROR:SPACING: space required before the open parenthesis '('
#1496: FILE: mm/memhotplug.c:613:
+			for(i = 0; !list_empty(l) && i < 10; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1503: FILE: mm/memhotplug.c:620:
+						    list_entry(page->lru.prev,
+						    struct page, lru);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1505: FILE: mm/memhotplug.c:622:
+						if (&page->lru == l) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1507: FILE: mm/memhotplug.c:624:
+							/* scanned the whole
+							   list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1507: FILE: mm/memhotplug.c:624:
+							   list */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1511: FILE: mm/memhotplug.c:628:
+						if (page == page1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1512: FILE: mm/memhotplug.c:629:
+							BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1515: FILE: mm/memhotplug.c:632:
+						printk("used up fastmode\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1520: FILE: mm/memhotplug.c:637:
+					BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1524: FILE: mm/memhotplug.c:641:
+					/* the page is in pagevec_release();
+					   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1524: FILE: mm/memhotplug.c:641:
+					   shrink_cache says so. */

WARNING:INDENTED_LABEL: labels should not be indented
#1541: FILE: mm/memhotplug.c:658:
+	got_page:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1573: FILE: mm/memhotplug.c:690:
+			BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1586: FILE: mm/memhotplug.c:703:
+	for(i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1586: FILE: mm/memhotplug.c:703:
+	for(i = 0; i < NR_CPUS; i++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271070.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 98 warnings, 53 checks, 1434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271070.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
