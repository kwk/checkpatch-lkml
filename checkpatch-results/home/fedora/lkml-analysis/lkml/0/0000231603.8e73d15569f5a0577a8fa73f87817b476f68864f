WARNING:TYPO_SPELLING: 'Appearantly' may be misspelled - perhaps 'Apparently'?
#32: 
Appearantly I am not the first one to observe and be puzzled about log
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'appearantly' may be misspelled - perhaps 'apparently'?
#35: 
was posted by Kurt Garloff a while ago, but appearantly wasn't applied,
                                            ^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#40: 
the MTRR code itself, in that that code is not symmetric with respect to

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: arch/i386/kernel/cpu/mtrr/amd.c:10:
+	     unsigned long *size, mtrr_type * type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#95: FILE: arch/i386/kernel/cpu/mtrr/amd.c:20:
replace_reg)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: arch/i386/kernel/cpu/mtrr/amd.c:53:
+		unsigned long *size, mtrr_type * type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:12:
+	      unsigned long *size, mtrr_type * type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:98:
+int generic_get_free_region(unsigned long base, unsigned long size,
 /*  [SUMMARY] Get a free MTRR.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:120:
+		      unsigned long *size, mtrr_type * type)

CHECK:CAMELCASE: Avoid CamelCase: <MTRRdefType_MSR>
#250: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:266:
+	wrmsr(MTRRdefType_MSR, deftype_lo & ~0xcff, deftype_hi);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#301: FILE: arch/i386/kernel/cpu/mtrr/if.c:209:
+		if (gentry.base + size - 1 >= (1UL << (8 *
+		    || size >= (1UL << (8 * sizeof(gentry.size) -

CHECK:BRACES: braces {} should be used on all arms of this statement
#321: FILE: arch/i386/kernel/cpu/mtrr/if.c:265:
+		if (size != (__typeof__(gentry.size))size)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#322: FILE: arch/i386/kernel/cpu/mtrr/if.c:266:
+			gentry.base = gentry.size = gentry.type = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#323: FILE: arch/i386/kernel/cpu/mtrr/if.c:267:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#394: FILE: arch/i386/kernel/cpu/mtrr/main.c:338:
+		printk(KERN_WARNING "mtrr: zero sized request\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#461: FILE: arch/i386/kernel/cpu/mtrr/main.c:391:
+		if (likely(replace < 0))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#463: FILE: arch/i386/kernel/cpu/mtrr/main.c:393:
+		else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#507: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:46:
+		       unsigned long *size, mtrr_type * type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:54:
+extern int generic_get_free_region(unsigned long base, unsigned long

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 4 warnings, 9 checks, 387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
