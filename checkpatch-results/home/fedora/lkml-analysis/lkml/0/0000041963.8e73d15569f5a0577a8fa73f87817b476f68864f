WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: fs/lockd/host.c:43:
+nlmclnt_lookup_host(const struct sockaddr_in *sin, int proto, int version,
+			const char *hostname, int hostname_len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/lockd/host.c:54:
+nlmsvc_lookup_host(struct svc_rqst *rqstp,
+			const char *hostname, int hostname_len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: fs/lockd/host.c:75:
+	dprintk("lockd: nlm_lookup_host(%u.%u.%u.%u, p=%d, v=%d, my role=%s, name=%.*s)\n",
+			NIPQUAD(sin->sin_addr.s_addr), proto, version,

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#116: FILE: fs/lockd/host.c:76:
+			server? "server" : "client",
 			      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#118: FILE: fs/lockd/host.c:78:
+			hostname? hostname : "<none>");
 			        ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#133: FILE: fs/lockd/host.c:285:
+	server = (argp->proto & 1)? 1 : 0;
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/lockd/host.c:287:
+	host = nlm_lookup_host(server, sin, argp->proto >> 1, argp->vers,
+			argp->mon, argp->len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host"
#136: FILE: fs/lockd/host.c:288:
+	if (host == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#160: FILE: fs/lockd/svc4proc.c:41:
+	if (!(host = nlmsvc_lookup_host(rqstp, lock->caller, lock->len))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#205: FILE: fs/lockd/svcproc.c:69:
+	if (!(host = nlmsvc_lookup_host(rqstp, lock->caller, lock->len))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: include/linux/lockd/lockd.h:164:
+struct nlm_host * nlmclnt_lookup_host(const struct sockaddr_in *, int, int, const char *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct sockaddr_in *' should also have an identifier name
#231: FILE: include/linux/lockd/lockd.h:164:
+struct nlm_host * nlmclnt_lookup_host(const struct sockaddr_in *, int, int, const char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#231: FILE: include/linux/lockd/lockd.h:164:
+struct nlm_host * nlmclnt_lookup_host(const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#231: FILE: include/linux/lockd/lockd.h:164:
+struct nlm_host * nlmclnt_lookup_host(const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#231: FILE: include/linux/lockd/lockd.h:164:
+struct nlm_host * nlmclnt_lookup_host(const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#231: FILE: include/linux/lockd/lockd.h:164:
+struct nlm_host * nlmclnt_lookup_host(const struct sockaddr_in *, int, int, const char *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#232: FILE: include/linux/lockd/lockd.h:165:
+struct nlm_host * nlmsvc_lookup_host(struct svc_rqst *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct svc_rqst *' should also have an identifier name
#232: FILE: include/linux/lockd/lockd.h:165:
+struct nlm_host * nlmsvc_lookup_host(struct svc_rqst *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#232: FILE: include/linux/lockd/lockd.h:165:
+struct nlm_host * nlmsvc_lookup_host(struct svc_rqst *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#232: FILE: include/linux/lockd/lockd.h:165:
+struct nlm_host * nlmsvc_lookup_host(struct svc_rqst *, const char *, int);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct sockaddr_in *' should also have an identifier name
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/lockd/lockd.h:166:
+struct nlm_host * nlm_lookup_host(int server, const struct sockaddr_in *, int, int, const char *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000041963.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 20 warnings, 5 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000041963.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
