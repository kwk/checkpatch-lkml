WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Because of the recent discussion about latency in the kernel I asked William 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: arch/i386/Kconfig:507:
+config PREEMPT_TIMING
+	bool "Non-preemptible critical section timing"
+	help
+	  This option measures the time spent in non-preemptible critical
+	  sections and reports warnings when a boot-time configurable
+	  latency threshold is exceeded.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: arch/i386/kernel/traps.c:965:
+		printk("Preemption threshold = %dms\n", preempt_thresh);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#117: FILE: arch/i386/kernel/traps.c:969:
+__setup("preempt_thresh=", setup_preempt_thresh);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#125: FILE: arch/i386/kernel/traps.c:977:
+		__get_cpu_var(preempt_entry)
+				= (unsigned long)__builtin_return_address(0);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/i386/kernel/traps.c:984:
+	if (preempt_count() == 1 && system_state == SYSTEM_RUNNING &&
+					__get_cpu_var(preempt_entry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: arch/i386/kernel/traps.c:986:
+		u64 exit;
+		__get_cpu_var(preempt_exit)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#135: FILE: arch/i386/kernel/traps.c:987:
+		__get_cpu_var(preempt_exit)
+				= (unsigned long)__builtin_return_address(0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: arch/i386/kernel/traps.c:994:
+			if (__get_cpu_var(preempt_timings) > preempt_thresh &&
+							preempt_thresh) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#143: FILE: arch/i386/kernel/traps.c:995:
+				printk("%lums non-preemptible critical "

WARNING:SPLIT_STRING: quoted string split across lines
#144: FILE: arch/i386/kernel/traps.c:996:
+				printk("%lums non-preemptible critical "
+					"section violated %d ms preempt "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#145: FILE: arch/i386/kernel/traps.c:997:
+					"section violated %d ms preempt "
+					"threshold starting at ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: arch/i386/kernel/traps.c:1002:
+				print_symbol("%s and ending at ",
+					__get_cpu_var(preempt_entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: arch/i386/kernel/traps.c:1004:
+				print_symbol("%s\n",
+					__get_cpu_var(preempt_exit));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#161: FILE: arch/i386/kernel/traps.c:1013:
+EXPORT_SYMBOL(__dec_preempt_count);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#182: FILE: include/linux/preempt.h:17:
+#define __inc_preempt_count()	do { preempt_count()++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#183: FILE: include/linux/preempt.h:18:
+#define __dec_preempt_count()	do { preempt_count()--; } while (0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000268617.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 7 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000268617.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
