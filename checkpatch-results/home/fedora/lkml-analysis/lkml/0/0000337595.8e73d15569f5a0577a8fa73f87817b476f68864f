WARNING:TYPO_SPELLING: 'funtions' may be misspelled - perhaps 'functions'?
#35: 
 - Add atomic64_t and related funtions.
                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
 include/asm-s390/atomic.h        |  198 ++++++++++++++++++++++-----------------

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: arch/s390/kernel/compat_linux.c:1558:
+        char _f[8];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/s390/kernel/compat_linux.c:1558:
+        char _f[8];$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#123: FILE: arch/s390/kernel/compat_linux.c:1583:
+	err |= __put_user (s.totalhigh, &info->totalhigh);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: arch/s390/kernel/compat_linux.c:1584:
+	err |= __put_user (s.freehigh, &info->freehigh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: arch/s390/kernel/compat_linux.c:1585:
+	err |= __put_user (s.mem_unit, &info->mem_unit);

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: arch/s390/kernel/compat_linux.c:2828:
+        return do_fork(clone_flags & ~CLONE_IDLETASK, newsp, &regs, 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: arch/s390/kernel/compat_linux.c:2828:
+        return do_fork(clone_flags & ~CLONE_IDLETASK, newsp, &regs, 0,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#148: FILE: arch/s390/kernel/compat_linux.c:2832:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#155: FILE: arch/s390/kernel/compat_signal.c:565:
 		switch (regs->gprs[2]) {
+			case -ERESTART_RESTARTBLOCK:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#416: FILE: arch/s390/kernel/process.c:133:
+		show_trace(0,(unsigned long *) regs->gprs[15]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#416: FILE: arch/s390/kernel/process.c:133:
+		show_trace(0,(unsigned long *) regs->gprs[15]);
 		            ^

CHECK:SPACING: No space is necessary after a cast
#428: FILE: arch/s390/kernel/ptrace.c:324:
+		} else if (addr < (addr_t) &dummy32->regs.acrs[0]) {

CHECK:SPACING: No space is necessary after a cast
#432: FILE: arch/s390/kernel/ptrace.c:328:
+		} else if (addr < (addr_t) &dummy32->regs.orig_gpr2) {

CHECK:SPACING: No space is necessary after a cast
#433: FILE: arch/s390/kernel/ptrace.c:329:
+			offset = PT_ACR0 + addr - (addr_t) &dummy32->regs.acrs;

CHECK:SPACING: No space is necessary after a cast
#434: FILE: arch/s390/kernel/ptrace.c:330:
+			tmp = *(__u32*)((addr_t) __KSTK_PTREGS(child) + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#434: FILE: arch/s390/kernel/ptrace.c:330:
+			tmp = *(__u32*)((addr_t) __KSTK_PTREGS(child) + offset);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#438: FILE: arch/s390/kernel/ptrace.c:334:
+			tmp = *(__u32*)((addr_t) __KSTK_PTREGS(child) + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#438: FILE: arch/s390/kernel/ptrace.c:334:
+			tmp = *(__u32*)((addr_t) __KSTK_PTREGS(child) + offset);

CHECK:SPACING: No space is necessary after a cast
#448: FILE: arch/s390/kernel/ptrace.c:399:
+		} else if (addr < (addr_t) &dummy32->regs.acrs[0]) {

CHECK:SPACING: No space is necessary after a cast
#452: FILE: arch/s390/kernel/ptrace.c:403:
+		} else if (addr < (addr_t) &dummy32->regs.orig_gpr2) {

CHECK:SPACING: No space is necessary after a cast
#453: FILE: arch/s390/kernel/ptrace.c:404:
+			offset = PT_ACR0 + addr - (addr_t) &dummy32->regs.acrs;

CHECK:SPACING: No space is necessary after a cast
#454: FILE: arch/s390/kernel/ptrace.c:405:
+			*(__u32*)((addr_t) __KSTK_PTREGS(child) + offset) = tmp;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#454: FILE: arch/s390/kernel/ptrace.c:405:
+			*(__u32*)((addr_t) __KSTK_PTREGS(child) + offset) = tmp;

CHECK:SPACING: No space is necessary after a cast
#457: FILE: arch/s390/kernel/ptrace.c:408:
+			*(__u32*)((addr_t) __KSTK_PTREGS(child) + offset) = tmp;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#457: FILE: arch/s390/kernel/ptrace.c:408:
+			*(__u32*)((addr_t) __KSTK_PTREGS(child) + offset) = tmp;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#478: FILE: arch/s390/kernel/setup.c:420:
+	end_pfn = max_pfn = memory_end >> PAGE_SHIFT;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#495: FILE: arch/s390/kernel/setup.c:499:
+	lc->kernel_stack = ((unsigned long) &init_thread_union) + THREAD_SIZE;

CHECK:SPACING: No space is necessary after a cast
#498: FILE: arch/s390/kernel/setup.c:502:
+	lc->current_task = (unsigned long) init_thread_union.thread_info.task;

CHECK:SPACING: No space is necessary after a cast
#506: FILE: arch/s390/kernel/setup.c:509:
+	set_prefix((u32)(unsigned long) lc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: arch/s390/kernel/smp.c:519:
+        cpu_lowcore->current_task = (unsigned long) idle;$

CHECK:SPACING: No space is necessary after a cast
#551: FILE: arch/s390/kernel/smp.c:519:
+        cpu_lowcore->current_task = (unsigned long) idle;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: arch/s390/kernel/smp.c:519:
+        cpu_lowcore->current_task = (unsigned long) idle;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: arch/s390/kernel/smp.c:520:
+        cpu_lowcore->cpu_data.cpu_nr = cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: arch/s390/kernel/smp.c:520:
+        cpu_lowcore->cpu_data.cpu_nr = cpu;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: arch/s390/kernel/smp.c:522:
+	signal_processor(cpu,sigp_restart);
 	                    ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#570: FILE: arch/s390/kernel/smp.c:585:
+EXPORT_SYMBOL(cpu_possible_map);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around task->thread.ksp
#582: FILE: arch/s390/kernel/traps.c:86:
+		stack = (task == NULL) ? *stack_pointer : &(task->thread.ksp);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#582: FILE: arch/s390/kernel/traps.c:86:
+		stack = (task == NULL) ? *stack_pointer : &(task->thread.ksp);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#594: FILE: arch/s390/kernel/traps.c:125:
+			sp = (unsigned long *) task->thread.ksp;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#637: FILE: arch/s390/mm/fault.c:491:
 	pfault_refbk_t refbk =
+		{ 0x258, 0, 5, 2, __LC_CURRENT, 1ULL << 48, 1ULL << 48,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#647: FILE: arch/s390/mm/fault.c:558:
+	tsk = (struct task_struct *) __LC_PFAULT_INTPARM;

CHECK:SPACING: No space is necessary after a cast
#667: FILE: fs/partitions/ibm.c:102:
+		int *label = (int *) vlabel;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#697: FILE: include/asm-s390/atomic.h:25:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#698: FILE: include/asm-s390/atomic.h:26:
+	volatile int counter;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#699: FILE: include/asm-s390/atomic.h:27:
+} __attribute__ ((aligned (4))) atomic_t;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#699: FILE: include/asm-s390/atomic.h:27:
+} __attribute__ ((aligned (4))) atomic_t;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#716: FILE: include/asm-s390/atomic.h:39:
+			     : "a" (ptr), "d" (op_val) : "cc" );	\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#723: FILE: include/asm-s390/atomic.h:45:
+static __inline__ void atomic_add(int i, atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#723: FILE: include/asm-s390/atomic.h:45:
+static __inline__ void atomic_add(int i, atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#731: FILE: include/asm-s390/atomic.h:49:
 }
+static __inline__ int atomic_add_return(int i, atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#731: FILE: include/asm-s390/atomic.h:49:
+static __inline__ int atomic_add_return(int i, atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#731: FILE: include/asm-s390/atomic.h:49:
+static __inline__ int atomic_add_return(int i, atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#740: FILE: include/asm-s390/atomic.h:53:
 }
+static __inline__ int atomic_add_negative(int i, atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: include/asm-s390/atomic.h:53:
+static __inline__ int atomic_add_negative(int i, atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#740: FILE: include/asm-s390/atomic.h:53:
+static __inline__ int atomic_add_negative(int i, atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#749: FILE: include/asm-s390/atomic.h:57:
 }
+static __inline__ void atomic_sub(int i, atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: include/asm-s390/atomic.h:57:
+static __inline__ void atomic_sub(int i, atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#749: FILE: include/asm-s390/atomic.h:57:
+static __inline__ void atomic_sub(int i, atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#757: FILE: include/asm-s390/atomic.h:61:
 }
+static __inline__ void atomic_inc(volatile atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: include/asm-s390/atomic.h:61:
+static __inline__ void atomic_inc(volatile atomic_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#757: FILE: include/asm-s390/atomic.h:61:
+static __inline__ void atomic_inc(volatile atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#757: FILE: include/asm-s390/atomic.h:61:
+static __inline__ void atomic_inc(volatile atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#765: FILE: include/asm-s390/atomic.h:65:
 }
+static __inline__ int atomic_inc_return(volatile atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#765: FILE: include/asm-s390/atomic.h:65:
+static __inline__ int atomic_inc_return(volatile atomic_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#765: FILE: include/asm-s390/atomic.h:65:
+static __inline__ int atomic_inc_return(volatile atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#765: FILE: include/asm-s390/atomic.h:65:
+static __inline__ int atomic_inc_return(volatile atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#774: FILE: include/asm-s390/atomic.h:69:
 }
+static __inline__ int atomic_inc_and_test(volatile atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#774: FILE: include/asm-s390/atomic.h:69:
+static __inline__ int atomic_inc_and_test(volatile atomic_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#774: FILE: include/asm-s390/atomic.h:69:
+static __inline__ int atomic_inc_and_test(volatile atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#774: FILE: include/asm-s390/atomic.h:69:
+static __inline__ int atomic_inc_and_test(volatile atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#783: FILE: include/asm-s390/atomic.h:73:
 }
+static __inline__ void atomic_dec(volatile atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#783: FILE: include/asm-s390/atomic.h:73:
+static __inline__ void atomic_dec(volatile atomic_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#783: FILE: include/asm-s390/atomic.h:73:
+static __inline__ void atomic_dec(volatile atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#783: FILE: include/asm-s390/atomic.h:73:
+static __inline__ void atomic_dec(volatile atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#791: FILE: include/asm-s390/atomic.h:77:
 }
+static __inline__ int atomic_dec_return(volatile atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#791: FILE: include/asm-s390/atomic.h:77:
+static __inline__ int atomic_dec_return(volatile atomic_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#791: FILE: include/asm-s390/atomic.h:77:
+static __inline__ int atomic_dec_return(volatile atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#791: FILE: include/asm-s390/atomic.h:77:
+static __inline__ int atomic_dec_return(volatile atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#800: FILE: include/asm-s390/atomic.h:81:
 }
+static __inline__ int atomic_dec_and_test(volatile atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#800: FILE: include/asm-s390/atomic.h:81:
+static __inline__ int atomic_dec_and_test(volatile atomic_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#800: FILE: include/asm-s390/atomic.h:81:
+static __inline__ int atomic_dec_and_test(volatile atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#800: FILE: include/asm-s390/atomic.h:81:
+static __inline__ int atomic_dec_and_test(volatile atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#809: FILE: include/asm-s390/atomic.h:85:
 }
+static __inline__ void atomic_clear_mask(unsigned long mask, atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#809: FILE: include/asm-s390/atomic.h:85:
+static __inline__ void atomic_clear_mask(unsigned long mask, atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#809: FILE: include/asm-s390/atomic.h:85:
+static __inline__ void atomic_clear_mask(unsigned long mask, atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#813: FILE: include/asm-s390/atomic.h:89:
+}
+static __inline__ void atomic_set_mask(unsigned long mask, atomic_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#813: FILE: include/asm-s390/atomic.h:89:
+static __inline__ void atomic_set_mask(unsigned long mask, atomic_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#813: FILE: include/asm-s390/atomic.h:89:
+static __inline__ void atomic_set_mask(unsigned long mask, atomic_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#819: FILE: include/asm-s390/atomic.h:93:
 }
+#undef __CS_LOOP

WARNING:NEW_TYPEDEFS: do not add new typedefs
#823: FILE: include/asm-s390/atomic.h:96:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#824: FILE: include/asm-s390/atomic.h:97:
+	volatile long long counter;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#825: FILE: include/asm-s390/atomic.h:98:
+} __attribute__ ((aligned (8))) atomic64_t;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#825: FILE: include/asm-s390/atomic.h:98:
+} __attribute__ ((aligned (8))) atomic64_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#828: FILE: include/asm-s390/atomic.h:101:
+#define __CSG_LOOP(ptr, op_val, op_string) ({				\
+	typeof(ptr->counter) old_val, new_val;				\
+        __asm__ __volatile__("   lg    %0,0(%3)\n"			\
+                             "0: lgr   %1,%0\n"				\
+                             op_string "  %1,%4\n"			\
+                             "   csg   %0,%1,0(%3)\n"			\
+                             "   jl    0b"				\
+                             : "=&d" (old_val), "=&d" (new_val),	\
+			       "+m" (((atomic_t *)(ptr))->counter)	\
+			     : "a" (ptr), "d" (op_val) : "cc" );	\
+	new_val;							\
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: include/asm-s390/atomic.h:103:
+        __asm__ __volatile__("   lg    %0,0(%3)\n"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: include/asm-s390/atomic.h:103:
+        __asm__ __volatile__("   lg    %0,0(%3)\n"^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: include/asm-s390/atomic.h:104:
+                             "0: lgr   %1,%0\n"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: include/asm-s390/atomic.h:104:
+                             "0: lgr   %1,%0\n"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#832: FILE: include/asm-s390/atomic.h:105:
+                             op_string "  %1,%4\n"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: include/asm-s390/atomic.h:105:
+                             op_string "  %1,%4\n"^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: include/asm-s390/atomic.h:106:
+                             "   csg   %0,%1,0(%3)\n"^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: include/asm-s390/atomic.h:106:
+                             "   csg   %0,%1,0(%3)\n"^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: include/asm-s390/atomic.h:107:
+                             "   jl    0b"^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: include/asm-s390/atomic.h:107:
+                             "   jl    0b"^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#835: FILE: include/asm-s390/atomic.h:108:
+                             : "=&d" (old_val), "=&d" (new_val),^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: include/asm-s390/atomic.h:108:
+                             : "=&d" (old_val), "=&d" (new_val),^I\$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#837: FILE: include/asm-s390/atomic.h:110:
+			     : "a" (ptr), "d" (op_val) : "cc" );	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#841: FILE: include/asm-s390/atomic.h:114:
+#define atomic64_set(v,i)         (((v)->counter) = (i))
                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#843: FILE: include/asm-s390/atomic.h:116:
+static __inline__ void atomic64_add(int i, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#843: FILE: include/asm-s390/atomic.h:116:
+static __inline__ void atomic64_add(int i, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#847: FILE: include/asm-s390/atomic.h:120:
+}
+static __inline__ long long atomic64_add_return(int i, atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#847: FILE: include/asm-s390/atomic.h:120:
+static __inline__ long long atomic64_add_return(int i, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#847: FILE: include/asm-s390/atomic.h:120:
+static __inline__ long long atomic64_add_return(int i, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#851: FILE: include/asm-s390/atomic.h:124:
+}
+static __inline__ long long atomic64_add_negative(int i, atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#851: FILE: include/asm-s390/atomic.h:124:
+static __inline__ long long atomic64_add_negative(int i, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#851: FILE: include/asm-s390/atomic.h:124:
+static __inline__ long long atomic64_add_negative(int i, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#855: FILE: include/asm-s390/atomic.h:128:
+}
+static __inline__ void atomic64_sub(int i, atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#855: FILE: include/asm-s390/atomic.h:128:
+static __inline__ void atomic64_sub(int i, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#855: FILE: include/asm-s390/atomic.h:128:
+static __inline__ void atomic64_sub(int i, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#859: FILE: include/asm-s390/atomic.h:132:
+}
+static __inline__ void atomic64_inc(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#859: FILE: include/asm-s390/atomic.h:132:
+static __inline__ void atomic64_inc(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#859: FILE: include/asm-s390/atomic.h:132:
+static __inline__ void atomic64_inc(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#859: FILE: include/asm-s390/atomic.h:132:
+static __inline__ void atomic64_inc(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#863: FILE: include/asm-s390/atomic.h:136:
+}
+static __inline__ long long atomic64_inc_return(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#863: FILE: include/asm-s390/atomic.h:136:
+static __inline__ long long atomic64_inc_return(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#863: FILE: include/asm-s390/atomic.h:136:
+static __inline__ long long atomic64_inc_return(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#863: FILE: include/asm-s390/atomic.h:136:
+static __inline__ long long atomic64_inc_return(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#867: FILE: include/asm-s390/atomic.h:140:
+}
+static __inline__ long long atomic64_inc_and_test(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#867: FILE: include/asm-s390/atomic.h:140:
+static __inline__ long long atomic64_inc_and_test(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#867: FILE: include/asm-s390/atomic.h:140:
+static __inline__ long long atomic64_inc_and_test(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#867: FILE: include/asm-s390/atomic.h:140:
+static __inline__ long long atomic64_inc_and_test(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#871: FILE: include/asm-s390/atomic.h:144:
+}
+static __inline__ void atomic64_dec(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#871: FILE: include/asm-s390/atomic.h:144:
+static __inline__ void atomic64_dec(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#871: FILE: include/asm-s390/atomic.h:144:
+static __inline__ void atomic64_dec(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#871: FILE: include/asm-s390/atomic.h:144:
+static __inline__ void atomic64_dec(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#877: FILE: include/asm-s390/atomic.h:148:
 }
+static __inline__ long long atomic64_dec_return(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#877: FILE: include/asm-s390/atomic.h:148:
+static __inline__ long long atomic64_dec_return(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#877: FILE: include/asm-s390/atomic.h:148:
+static __inline__ long long atomic64_dec_return(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#877: FILE: include/asm-s390/atomic.h:148:
+static __inline__ long long atomic64_dec_return(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#881: FILE: include/asm-s390/atomic.h:152:
+}
+static __inline__ long long atomic64_dec_and_test(volatile atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#881: FILE: include/asm-s390/atomic.h:152:
+static __inline__ long long atomic64_dec_and_test(volatile atomic64_t * v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#881: FILE: include/asm-s390/atomic.h:152:
+static __inline__ long long atomic64_dec_and_test(volatile atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#881: FILE: include/asm-s390/atomic.h:152:
+static __inline__ long long atomic64_dec_and_test(volatile atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#885: FILE: include/asm-s390/atomic.h:156:
+}
+static __inline__ void atomic64_clear_mask(unsigned long mask, atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#885: FILE: include/asm-s390/atomic.h:156:
+static __inline__ void atomic64_clear_mask(unsigned long mask, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#885: FILE: include/asm-s390/atomic.h:156:
+static __inline__ void atomic64_clear_mask(unsigned long mask, atomic64_t * v)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#889: FILE: include/asm-s390/atomic.h:160:
+}
+static __inline__ void atomic64_set_mask(unsigned long mask, atomic64_t * v)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#889: FILE: include/asm-s390/atomic.h:160:
+static __inline__ void atomic64_set_mask(unsigned long mask, atomic64_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#889: FILE: include/asm-s390/atomic.h:160:
+static __inline__ void atomic64_set_mask(unsigned long mask, atomic64_t * v)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#974: FILE: include/asm-s390/hardirq.h:23:
+ * on the lowcore */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#997: FILE: include/asm-s390/hardirq.h:84:
+	BUG_ON( hardirq_count() );					\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited after that open parenthesis '('
#997: FILE: include/asm-s390/hardirq.h:84:
+	BUG_ON( hardirq_count() );					\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#997: FILE: include/asm-s390/hardirq.h:84:
+	BUG_ON( hardirq_count() );					\

ERROR:SPACING: space required before the open parenthesis '('
#999: FILE: include/asm-s390/hardirq.h:86:
+} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: include/asm-s390/hardirq.h:87:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1026: FILE: include/asm-s390/local.h:1:
+#ifndef _ASM_LOCAL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1031: FILE: include/asm-s390/local.h:6:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1039: FILE: include/asm-s390/local.h:14:
+#define local_set(v,i)	atomic_set(v,i)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1039: FILE: include/asm-s390/local.h:14:
+#define local_set(v,i)	atomic_set(v,i)
                       	            ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1048: FILE: include/asm-s390/local.h:23:
+typedef atomic64_t local_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1052: FILE: include/asm-s390/local.h:27:
+#define local_set(v,i)	atomic64_set(v,i)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1052: FILE: include/asm-s390/local.h:27:
+#define local_set(v,i)	atomic64_set(v,i)
                       	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1063: FILE: include/asm-s390/local.h:38:
+#define __local_add(i,v)	((v)->counter+=(i))
                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1063: FILE: include/asm-s390/local.h:38:
+#define __local_add(i,v)	((v)->counter+=(i))
                         	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1064: FILE: include/asm-s390/local.h:39:
+#define __local_sub(i,v)	((v)->counter-=(i))
                      ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#1064: FILE: include/asm-s390/local.h:39:
+#define __local_sub(i,v)	((v)->counter-=(i))
                         	             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1112: FILE: include/asm-s390/lowcore.h:177:
+        __u8         pad11[0xe00-0xc98];       /* 0xc98 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: include/asm-s390/lowcore.h:177:
+        __u8         pad11[0xe00-0xc98];       /* 0xc98 */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1112: FILE: include/asm-s390/lowcore.h:177:
+        __u8         pad11[0xe00-0xc98];       /* 0xc98 */
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1124: FILE: include/asm-s390/lowcore.h:255:
+        __u8         pad12[0xe00-0xde8];       /* 0xde8 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: include/asm-s390/lowcore.h:255:
+        __u8         pad12[0xe00-0xde8];       /* 0xde8 */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1124: FILE: include/asm-s390/lowcore.h:255:
+        __u8         pad12[0xe00-0xde8];       /* 0xde8 */
                                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1164: FILE: include/asm-s390/processor.h:165:
+extern void show_registers(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1165: FILE: include/asm-s390/processor.h:166:
+extern void show_trace(struct task_struct *task, unsigned long *sp);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1187: FILE: include/asm-s390/sections.h:1:
+#ifndef _S390_SECTIONS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1242: FILE: include/asm-s390/system.h:24:
+extern struct task_struct *__switch_to(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1242: FILE: include/asm-s390/system.h:24:
+extern struct task_struct *__switch_to(void *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1242: FILE: include/asm-s390/system.h:24:
+extern struct task_struct *__switch_to(void *, void *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1251: FILE: include/asm-s390/system.h:91:
+	prev = __switch_to(prev,next);					     \
 	                       ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1278: FILE: include/asm-s390/uaccess.h:232:
+	register __typeof__(*(ptr)) const * __from asm("4");	\
 	                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1279: FILE: include/asm-s390/uaccess.h:233:
+	register __typeof__(x) * __to asm("2");			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1291: FILE: include/asm-s390/uaccess.h:243:
+		: "a" (__to),"K" (-EFAULT),"a" (__from),"0" (0)	\
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1291: FILE: include/asm-s390/uaccess.h:243:
+		: "a" (__to),"K" (-EFAULT),"a" (__from),"0" (0)	\
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1291: FILE: include/asm-s390/uaccess.h:243:
+		: "a" (__to),"K" (-EFAULT),"a" (__from),"0" (0)	\
 		                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1321: FILE: include/asm-s390/uaccess.h:363:
+        might_sleep();^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: include/asm-s390/uaccess.h:363:
+        might_sleep();^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1329: FILE: include/asm-s390/uaccess.h:383:
+        might_sleep();^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1329: FILE: include/asm-s390/uaccess.h:383:
+        might_sleep();^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1337: FILE: include/asm-s390/uaccess.h:475:
+        might_sleep();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1337: FILE: include/asm-s390/uaccess.h:475:
+        might_sleep();$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337595.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 73 warnings, 51 checks, 1112 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337595.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
