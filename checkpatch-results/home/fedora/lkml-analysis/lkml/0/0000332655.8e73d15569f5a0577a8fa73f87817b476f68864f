WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
Content-Disposition: attachment; filename="linux-2.6.0-test6-long-vhpt.patch"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	           ChangeSet	v2.6.0-test6 -> 1.1376 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	include/asm-ia64/mmu_context.h	1.15    -> 1.17   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	include/asm-ia64/page.h	1.21    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#	arch/ia64/kernel/setup.c	1.59    -> 1.61   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#	arch/ia64/kernel/ivt.S	1.23    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#	include/asm-ia64/kregs.h	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#	include/asm-ia64/asmmacro.h	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#	arch/ia64/kernel/smpboot.c	1.39    -> 1.40   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	include/asm-ia64/pgtable.h	1.28    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	include/asm-ia64/tlb.h	1.16    -> 1.17   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	 arch/ia64/mm/init.c	1.48    -> 1.50   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	            Makefile	1.432   -> 1.433  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	arch/ia64/kernel/patch.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	  arch/ia64/mm/tlb.c	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	include/asm-ia64/tlbflush.h	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	   arch/ia64/Kconfig	1.46    -> 1.47   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	arch/ia64/kernel/traps.c	1.39    -> 1.40   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# 03/09/27	torvalds@home.osdl.org	1.1375

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# Linux 2.6.0-test6

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# 03/10/03	dsw@quasar.(none)	1.1376

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# Clean up compiler warnings and add comments

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#87: 
--- a/Makefile	Fri Oct  3 14:07:36 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#94: FILE: Makefile:4:
+EXTRAVERSION = -test6-vhpt
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#121: FILE: arch/ia64/kernel/ivt.S:16:
+ * 15/09/03 Darren Williams <dsw@cse.unsw.edu.au> update Long format VHPT support from 2.5.67 -> 2.6.0

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: arch/ia64/kernel/ivt.S:110:
+^I $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: arch/ia64/kernel/ivt.S:407:
+^I *^I $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#477: FILE: arch/ia64/kernel/smpboot.c:385:
+	if (alloc_vhpt(cpu)) {
+		panic("Couldn't allocate VHPT on CPU%d, size: %lx\n", cpu, long_vhpt_size);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#480: FILE: arch/ia64/kernel/smpboot.c:388:
+	printk(KERN_INFO "Allocated long format VHPT for CPU%d at: %lx, size: 0x%lx\n", cpu, vhpt_base[cpu], long_vhpt_size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#480: FILE: arch/ia64/kernel/smpboot.c:388:
+	printk(KERN_INFO "Allocated long format VHPT for CPU%d at: %lx, size: 0x%lx\n", cpu, vhpt_base[cpu], long_vhpt_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: arch/ia64/kernel/smpboot.c:390:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: arch/ia64/kernel/traps.c:457:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: arch/ia64/mm/init.c:278:
+#ifdef CONFIG_IA64_LONG_FORMAT_VHPT $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#523: FILE: arch/ia64/mm/init.c:284:
+ * Returns 0 on success.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: arch/ia64/mm/init.c:285:
+ unsigned int$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: arch/ia64/mm/init.c:288:
+#ifdef CONFIG_NUMA^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: arch/ia64/mm/init.c:290:
+^I$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#530: FILE: arch/ia64/mm/init.c:291:
+	page = alloc_pages_node(cpu_to_node(cpu), __GFP_HIGHMEM|GFP_ATOMIC, long_vhpt_bits - PAGE_SHIFT);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#530: FILE: arch/ia64/mm/init.c:291:
+	page = alloc_pages_node(cpu_to_node(cpu), __GFP_HIGHMEM|GFP_ATOMIC, long_vhpt_bits - PAGE_SHIFT);
 	                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#533: FILE: arch/ia64/mm/init.c:294:
+	vhpt_base[cpu] = (unsigned long) page_address(page);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#535: FILE: arch/ia64/mm/init.c:296:
+	vhpt_base[cpu] = (unsigned long)__get_free_pages(__GFP_HIGHMEM|GFP_ATOMIC, long_vhpt_bits - PAGE_SHIFT);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#535: FILE: arch/ia64/mm/init.c:296:
+	vhpt_base[cpu] = (unsigned long)__get_free_pages(__GFP_HIGHMEM|GFP_ATOMIC, long_vhpt_bits - PAGE_SHIFT);
 	                                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: arch/ia64/mm/init.c:315:
+	int cpu = smp_processor_id();
+	if (cpu == 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#550: FILE: arch/ia64/mm/init.c:315:
+	if (cpu == 0)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#552: FILE: arch/ia64/mm/init.c:317:
+		vhpt_base[cpu] = (unsigned long)__alloc_bootmem(long_vhpt_size, long_vhpt_size, __pa(MAX_DMA_ADDRESS));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#553: FILE: arch/ia64/mm/init.c:318:
+		if (vhpt_base[cpu] == 0) {
+			panic("Couldn't allocate VHPT on CPU%d, size: %lx\n", cpu, long_vhpt_size);
+		} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: arch/ia64/mm/init.c:320:
+^I^I} $

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#556: FILE: arch/ia64/mm/init.c:321:
+		printk(KERN_INFO "Allocated long format VHPT for CPU%d at: %lx, size: 0x%lx\n", cpu, vhpt_base[cpu], long_vhpt_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#556: FILE: arch/ia64/mm/init.c:321:
+		printk(KERN_INFO "Allocated long format VHPT for CPU%d at: %lx, size: 0x%lx\n", cpu, vhpt_base[cpu], long_vhpt_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: arch/ia64/mm/init.c:395:
+^Iia64_set_pta(pta | (VHPT_FORMAT_BIT << 8) | (vhpt_bits << 2) | VHPT_ENABLE_BIT); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#650: FILE: arch/ia64/mm/tlb.c:116:
+	for (page = LONG_VHPT_BASE; page < LONG_VHPT_BASE+long_vhpt_size; page += PAGE_SIZE)
 	                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#661: FILE: arch/ia64/mm/tlb.c:138:
 
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#664: FILE: arch/ia64/mm/tlb.c:141:
+flush_vhpt_range (struct mm_struct *mm, unsigned long from, unsigned long to)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#674: FILE: arch/ia64/mm/tlb.c:151:
+		extern unsigned long vhpt_base[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#680: FILE: arch/ia64/mm/tlb.c:157:
+		while (cpu_mask != 0)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#684: FILE: arch/ia64/mm/tlb.c:161:
+			for (addr = from; addr < to; addr += PAGE_SIZE)
+			{

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#686: FILE: arch/ia64/mm/tlb.c:163:
+				offset = ia64_thash(addr) & (long_vhpt_size-1);
 				                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: include/asm-ia64/asmmacro.h:8:
+ * 25/09/03 Darren Williams <dsw@cse.unsw.edu.au> move Long format VHPT MACROS $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#719: FILE: include/asm-ia64/asmmacro.h:9:
+ * ^I    from ivt.S to here. I though that this would keep the placement of $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#719: FILE: include/asm-ia64/asmmacro.h:9:
+ * ^I    from ivt.S to here. I though that this would keep the placement of $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#730: FILE: include/asm-ia64/asmmacro.h:92:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#738: FILE: include/asm-ia64/asmmacro.h:100:
+#define FIND_PTE(va, ppte, fail, ok)								\
+	rsm psr.dt;				/* switch to using physical data addressing */	\
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
+	;;											\
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
+	;;											\
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
+	srlz.d;											\
+	LOAD_PHYSICAL(p6, ppte, swapper_pg_dir); /* region 5 is rooted at swapper_pg_dir */	\
+												\
+	.pred.rel "mutex", p6, p7;								\
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
+	;;											\
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
+	;;											\
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
+	;;											\
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
+	;;											\
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
+	;;											\
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'va' - possible side-effects?
#738: FILE: include/asm-ia64/asmmacro.h:100:
+#define FIND_PTE(va, ppte, fail, ok)								\
+	rsm psr.dt;				/* switch to using physical data addressing */	\
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
+	;;											\
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
+	;;											\
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
+	srlz.d;											\
+	LOAD_PHYSICAL(p6, ppte, swapper_pg_dir); /* region 5 is rooted at swapper_pg_dir */	\
+												\
+	.pred.rel "mutex", p6, p7;								\
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
+	;;											\
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
+	;;											\
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
+	;;											\
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
+	;;											\
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
+	;;											\
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ppte' - possible side-effects?
#738: FILE: include/asm-ia64/asmmacro.h:100:
+#define FIND_PTE(va, ppte, fail, ok)								\
+	rsm psr.dt;				/* switch to using physical data addressing */	\
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
+	;;											\
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
+	;;											\
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
+	srlz.d;											\
+	LOAD_PHYSICAL(p6, ppte, swapper_pg_dir); /* region 5 is rooted at swapper_pg_dir */	\
+												\
+	.pred.rel "mutex", p6, p7;								\
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
+	;;											\
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
+	;;											\
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
+	;;											\
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
+	;;											\
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
+	;;											\
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fail' - possible side-effects?
#738: FILE: include/asm-ia64/asmmacro.h:100:
+#define FIND_PTE(va, ppte, fail, ok)								\
+	rsm psr.dt;				/* switch to using physical data addressing */	\
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
+	;;											\
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
+	;;											\
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
+	srlz.d;											\
+	LOAD_PHYSICAL(p6, ppte, swapper_pg_dir); /* region 5 is rooted at swapper_pg_dir */	\
+												\
+	.pred.rel "mutex", p6, p7;								\
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
+	;;											\
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
+	;;											\
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
+	;;											\
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
+	;;											\
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
+	;;											\
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ok' - possible side-effects?
#738: FILE: include/asm-ia64/asmmacro.h:100:
+#define FIND_PTE(va, ppte, fail, ok)								\
+	rsm psr.dt;				/* switch to using physical data addressing */	\
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
+	;;											\
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
+	;;											\
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
+	srlz.d;											\
+	LOAD_PHYSICAL(p6, ppte, swapper_pg_dir); /* region 5 is rooted at swapper_pg_dir */	\
+												\
+	.pred.rel "mutex", p6, p7;								\
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
+	;;											\
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
+	;;											\
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
+	;;											\
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
+	;;											\
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
+	;;											\
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#738: FILE: include/asm-ia64/asmmacro.h:100:
+#define FIND_PTE(va, ppte, fail, ok)								\
+	rsm psr.dt;				/* switch to using physical data addressing */	\
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
+	;;											\
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
+	;;											\
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
+	srlz.d;											\
+	LOAD_PHYSICAL(p6, ppte, swapper_pg_dir); /* region 5 is rooted at swapper_pg_dir */	\
+												\
+	.pred.rel "mutex", p6, p7;								\
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
+	;;											\
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
+	;;											\
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
+	;;											\
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
+	;;											\
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
+	;;											\
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#740: FILE: include/asm-ia64/asmmacro.h:102:
+	mov ppte=IA64_KR(PT_BASE);		/* get the page table base address */		\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#741: FILE: include/asm-ia64/asmmacro.h:103:
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#741: FILE: include/asm-ia64/asmmacro.h:103:
+	shl mbz=va,3;				/* shift bit 60 into sign bit	*/		\
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#742: FILE: include/asm-ia64/asmmacro.h:104:
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#742: FILE: include/asm-ia64/asmmacro.h:104:
+	shr.u rgn=va,61;			/* get the region number into 'rgn' */		\
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#744: FILE: include/asm-ia64/asmmacro.h:106:
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#744: FILE: include/asm-ia64/asmmacro.h:106:
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#744: FILE: include/asm-ia64/asmmacro.h:106:
+	cmp.eq p6,p7=5,rgn;			/* is faulting address in region 5? */		\
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#745: FILE: include/asm-ia64/asmmacro.h:107:
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#745: FILE: include/asm-ia64/asmmacro.h:107:
+	shr.u temp=va,PGDIR_SHIFT;		/* get bits 33-63 of faulting address */	\
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#747: FILE: include/asm-ia64/asmmacro.h:109:
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
     	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: include/asm-ia64/asmmacro.h:109:
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
     	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: include/asm-ia64/asmmacro.h:109:
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
     	                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#747: FILE: include/asm-ia64/asmmacro.h:109:
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
     	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: include/asm-ia64/asmmacro.h:109:
+(p7)	dep ppte=rgn,ppte,(PAGE_SHIFT-3),3;	/* put region number bits in place */		\
     	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#752: FILE: include/asm-ia64/asmmacro.h:114:
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
     	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#752: FILE: include/asm-ia64/asmmacro.h:114:
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
     	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#752: FILE: include/asm-ia64/asmmacro.h:114:
+(p6)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT;							\
     	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#753: FILE: include/asm-ia64/asmmacro.h:115:
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
     	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#753: FILE: include/asm-ia64/asmmacro.h:115:
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
     	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#753: FILE: include/asm-ia64/asmmacro.h:115:
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
     	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#753: FILE: include/asm-ia64/asmmacro.h:115:
+(p7)	shr.u mbz=mbz,PGDIR_SHIFT+PAGE_SHIFT-3;							\
     	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#755: FILE: include/asm-ia64/asmmacro.h:117:
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
     	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#755: FILE: include/asm-ia64/asmmacro.h:117:
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
     	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#755: FILE: include/asm-ia64/asmmacro.h:117:
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
     	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#755: FILE: include/asm-ia64/asmmacro.h:117:
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
     	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#755: FILE: include/asm-ia64/asmmacro.h:117:
+(p6)	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* ppte=PTA + IFA(33,42)*8 */			\
     	                                ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#756: FILE: include/asm-ia64/asmmacro.h:118:
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#756: FILE: include/asm-ia64/asmmacro.h:118:
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
     	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: include/asm-ia64/asmmacro.h:118:
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
     	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: include/asm-ia64/asmmacro.h:118:
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
     	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: include/asm-ia64/asmmacro.h:118:
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
     	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#756: FILE: include/asm-ia64/asmmacro.h:118:
+(p7)	dep ppte=temp,ppte,3,(PAGE_SHIFT-6);	/* ppte=PTA + (((IFA(61,63) << 7) | IFA(33,39))*8) */ \
     	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: include/asm-ia64/asmmacro.h:119:
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#757: FILE: include/asm-ia64/asmmacro.h:119:
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: include/asm-ia64/asmmacro.h:119:
+	cmp.eq ok,fail=0,mbz;			/* unused address bits all zeroes? */		\
 	                ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#758: FILE: include/asm-ia64/asmmacro.h:120:
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#758: FILE: include/asm-ia64/asmmacro.h:120:
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#758: FILE: include/asm-ia64/asmmacro.h:120:
+	shr.u temp=va,PMD_SHIFT;			/* shift L2 index into position	*/		\
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#760: FILE: include/asm-ia64/asmmacro.h:122:
+	ld8 ppte=[ppte];			/* fetch the L1 entry (may be 0)*/		\
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#762: FILE: include/asm-ia64/asmmacro.h:124:
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
     	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#762: FILE: include/asm-ia64/asmmacro.h:124:
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
     	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#762: FILE: include/asm-ia64/asmmacro.h:124:
+(ok)	cmp.eq fail,ok=ppte,r0;			/* was L1 entry NULL?*/				\
     	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#763: FILE: include/asm-ia64/asmmacro.h:125:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#763: FILE: include/asm-ia64/asmmacro.h:125:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#763: FILE: include/asm-ia64/asmmacro.h:125:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#763: FILE: include/asm-ia64/asmmacro.h:125:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#763: FILE: include/asm-ia64/asmmacro.h:125:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L2 page table entry*/	\
 	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#765: FILE: include/asm-ia64/asmmacro.h:127:
+(ok)	ld8 ppte=[ppte];			/* fetch the L2 entry (may be 0)*/		\
     	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#766: FILE: include/asm-ia64/asmmacro.h:128:
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#766: FILE: include/asm-ia64/asmmacro.h:128:
+	shr.u temp=va,PAGE_SHIFT;		/* shift L3 index into position*/		\
 	             ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#768: FILE: include/asm-ia64/asmmacro.h:130:
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#768: FILE: include/asm-ia64/asmmacro.h:130:
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
     	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#768: FILE: include/asm-ia64/asmmacro.h:130:
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
     	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#768: FILE: include/asm-ia64/asmmacro.h:130:
+(ok)	cmp.eq.or.andcm fail,ok=ppte,r0;		/* was L2 entry NULL?*/				\
     	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#769: FILE: include/asm-ia64/asmmacro.h:131:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#769: FILE: include/asm-ia64/asmmacro.h:131:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#769: FILE: include/asm-ia64/asmmacro.h:131:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#769: FILE: include/asm-ia64/asmmacro.h:131:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#769: FILE: include/asm-ia64/asmmacro.h:131:
+	dep ppte=temp,ppte,3,(PAGE_SHIFT-3);	/* compute address of L3 page table entry*/
 	                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ppte' - possible side-effects?
#773: FILE: include/asm-ia64/asmmacro.h:135:
+#define LOAD_PTE_MISS(va, ppte, pte, hpte, failfn)						\
+	;;											\
+	FIND_PTE(va, ppte, p6, p7)								\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+	;;											\
+(p7)	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
+(p6)	br.cond.spnt failfn; 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#773: FILE: include/asm-ia64/asmmacro.h:135:
+#define LOAD_PTE_MISS(va, ppte, pte, hpte, failfn)						\
+	;;											\
+	FIND_PTE(va, ppte, p6, p7)								\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+	;;											\
+(p7)	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
+(p6)	br.cond.spnt failfn; 

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#773: FILE: include/asm-ia64/asmmacro.h:135:
+#define LOAD_PTE_MISS(va, ppte, pte, hpte, failfn)						\
+	;;											\
+	FIND_PTE(va, ppte, p6, p7)								\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+	;;											\
+(p7)	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
+(p6)	br.cond.spnt failfn; 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#777: FILE: include/asm-ia64/asmmacro.h:139:
+(p7)	ld8 pte=[ppte];										\
     	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#779: FILE: include/asm-ia64/asmmacro.h:141:
+(p7)	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
     	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#779: FILE: include/asm-ia64/asmmacro.h:141:
+(p7)	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
     	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#779: FILE: include/asm-ia64/asmmacro.h:141:
+(p7)	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
     	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: include/asm-ia64/asmmacro.h:142:
+(p6)^Ibr.cond.spnt failfn; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#783: FILE: include/asm-ia64/asmmacro.h:145:
+ * to avoid switching back and forth */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#785: FILE: include/asm-ia64/asmmacro.h:147:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'va' - possible side-effects?
#788: FILE: include/asm-ia64/asmmacro.h:150:
+#define LOAD_PTE_FAULT(va, ppte, pte, hpte, failfn)						\
+	thash hpte=va;										\
+	rsm psr.dt;										\
+	;;											\
+	tpa hpte=hpte;				/* make hash address physical */		\
+	ttag tag=va;										\
+	;;											\
+	srlz.d;											\
+	add temp=16,hpte;									\
+	add ppte=24,hpte;									\
+	;;											\
+	ld8 htag=[temp];									\
+	ld8 ppte=[ppte];									\
+	;;											\
+	cmp.ne p6,p7=htag, tag;			/* verify tag */				\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+(p6)	br.cond.spnt failfn;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ppte' - possible side-effects?
#788: FILE: include/asm-ia64/asmmacro.h:150:
+#define LOAD_PTE_FAULT(va, ppte, pte, hpte, failfn)						\
+	thash hpte=va;										\
+	rsm psr.dt;										\
+	;;											\
+	tpa hpte=hpte;				/* make hash address physical */		\
+	ttag tag=va;										\
+	;;											\
+	srlz.d;											\
+	add temp=16,hpte;									\
+	add ppte=24,hpte;									\
+	;;											\
+	ld8 htag=[temp];									\
+	ld8 ppte=[ppte];									\
+	;;											\
+	cmp.ne p6,p7=htag, tag;			/* verify tag */				\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+(p6)	br.cond.spnt failfn;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hpte' - possible side-effects?
#788: FILE: include/asm-ia64/asmmacro.h:150:
+#define LOAD_PTE_FAULT(va, ppte, pte, hpte, failfn)						\
+	thash hpte=va;										\
+	rsm psr.dt;										\
+	;;											\
+	tpa hpte=hpte;				/* make hash address physical */		\
+	ttag tag=va;										\
+	;;											\
+	srlz.d;											\
+	add temp=16,hpte;									\
+	add ppte=24,hpte;									\
+	;;											\
+	ld8 htag=[temp];									\
+	ld8 ppte=[ppte];									\
+	;;											\
+	cmp.ne p6,p7=htag, tag;			/* verify tag */				\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+(p6)	br.cond.spnt failfn;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#788: FILE: include/asm-ia64/asmmacro.h:150:
+#define LOAD_PTE_FAULT(va, ppte, pte, hpte, failfn)						\
+	thash hpte=va;										\
+	rsm psr.dt;										\
+	;;											\
+	tpa hpte=hpte;				/* make hash address physical */		\
+	ttag tag=va;										\
+	;;											\
+	srlz.d;											\
+	add temp=16,hpte;									\
+	add ppte=24,hpte;									\
+	;;											\
+	ld8 htag=[temp];									\
+	ld8 ppte=[ppte];									\
+	;;											\
+	cmp.ne p6,p7=htag, tag;			/* verify tag */				\
+	;;											\
+(p7)	ld8 pte=[ppte];										\
+(p6)	br.cond.spnt failfn;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#789: FILE: include/asm-ia64/asmmacro.h:151:
+	thash hpte=va;										\
 	          ^

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#792: FILE: include/asm-ia64/asmmacro.h:154:
+	tpa hpte=hpte;				/* make hash address physical */		\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#792: FILE: include/asm-ia64/asmmacro.h:154:
+	tpa hpte=hpte;				/* make hash address physical */		\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#793: FILE: include/asm-ia64/asmmacro.h:155:
+	ttag tag=va;										\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#796: FILE: include/asm-ia64/asmmacro.h:158:
+	add temp=16,hpte;									\
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: include/asm-ia64/asmmacro.h:158:
+	add temp=16,hpte;									\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#797: FILE: include/asm-ia64/asmmacro.h:159:
+	add ppte=24,hpte;									\
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: include/asm-ia64/asmmacro.h:159:
+	add ppte=24,hpte;									\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#799: FILE: include/asm-ia64/asmmacro.h:161:
+	ld8 htag=[temp];									\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#800: FILE: include/asm-ia64/asmmacro.h:162:
+	ld8 ppte=[ppte];									\
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#802: FILE: include/asm-ia64/asmmacro.h:164:
+	cmp.ne p6,p7=htag, tag;			/* verify tag */				\
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#802: FILE: include/asm-ia64/asmmacro.h:164:
+	cmp.ne p6,p7=htag, tag;			/* verify tag */				\
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#804: FILE: include/asm-ia64/asmmacro.h:166:
+(p7)	ld8 pte=[ppte];										\
     	       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hpte' - possible side-effects?
#808: FILE: include/asm-ia64/asmmacro.h:170:
+#define VHPT_INSERT(va, ppte, pte, hpte)							\
+	mov hpte=cr.iha;									\
+	mov tir=cr.itir;									\
+	;;											\
+	tpa hpte=hpte;				/* make hash address physical */		\
+	ttag tag=va;										\
+	;;											\
+	add temp=16,hpte;									\
+	;;											\
+	st8 [hpte]=pte,8;			/* fill out VHPT entry */			\
+	st8 [temp]=tag,8;									\
+	;;											\
+	st8 [hpte]=tir,8;									\
+	st8 [temp]=ppte;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#808: FILE: include/asm-ia64/asmmacro.h:170:
+#define VHPT_INSERT(va, ppte, pte, hpte)							\
+	mov hpte=cr.iha;									\
+	mov tir=cr.itir;									\
+	;;											\
+	tpa hpte=hpte;				/* make hash address physical */		\
+	ttag tag=va;										\
+	;;											\
+	add temp=16,hpte;									\
+	;;											\
+	st8 [hpte]=pte,8;			/* fill out VHPT entry */			\
+	st8 [temp]=tag,8;									\
+	;;											\
+	st8 [hpte]=tir,8;									\
+	st8 [temp]=ppte;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#809: FILE: include/asm-ia64/asmmacro.h:171:
+	mov hpte=cr.iha;									\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#810: FILE: include/asm-ia64/asmmacro.h:172:
+	mov tir=cr.itir;									\
 	       ^

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#812: FILE: include/asm-ia64/asmmacro.h:174:
+	tpa hpte=hpte;				/* make hash address physical */		\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#812: FILE: include/asm-ia64/asmmacro.h:174:
+	tpa hpte=hpte;				/* make hash address physical */		\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#813: FILE: include/asm-ia64/asmmacro.h:175:
+	ttag tag=va;										\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#815: FILE: include/asm-ia64/asmmacro.h:177:
+	add temp=16,hpte;									\
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#815: FILE: include/asm-ia64/asmmacro.h:177:
+	add temp=16,hpte;									\
 	           ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#817: FILE: include/asm-ia64/asmmacro.h:179:
+	st8 [hpte]=pte,8;			/* fill out VHPT entry */			\

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#817: FILE: include/asm-ia64/asmmacro.h:179:
+	st8 [hpte]=pte,8;			/* fill out VHPT entry */			\
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#817: FILE: include/asm-ia64/asmmacro.h:179:
+	st8 [hpte]=pte,8;			/* fill out VHPT entry */			\
 	              ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#818: FILE: include/asm-ia64/asmmacro.h:180:
+	st8 [temp]=tag,8;									\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#818: FILE: include/asm-ia64/asmmacro.h:180:
+	st8 [temp]=tag,8;									\
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#818: FILE: include/asm-ia64/asmmacro.h:180:
+	st8 [temp]=tag,8;									\
 	              ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#820: FILE: include/asm-ia64/asmmacro.h:182:
+	st8 [hpte]=tir,8;									\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#820: FILE: include/asm-ia64/asmmacro.h:182:
+	st8 [hpte]=tir,8;									\
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#820: FILE: include/asm-ia64/asmmacro.h:182:
+	st8 [hpte]=tir,8;									\
 	              ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#821: FILE: include/asm-ia64/asmmacro.h:183:
+	st8 [temp]=ppte;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#821: FILE: include/asm-ia64/asmmacro.h:183:
+	st8 [temp]=ppte;
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: include/asm-ia64/asmmacro.h:184:
+^I$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#823: FILE: include/asm-ia64/asmmacro.h:185:
+#define VHPT_UPDATE(cond, pte, hpte)								\
+(cond)	st8 [hpte]=pte,16;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#823: FILE: include/asm-ia64/asmmacro.h:185:
+#define VHPT_UPDATE(cond, pte, hpte)								\
+(cond)	st8 [hpte]=pte,16;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#824: FILE: include/asm-ia64/asmmacro.h:186:
+(cond)	st8 [hpte]=pte,16;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#824: FILE: include/asm-ia64/asmmacro.h:186:
+(cond)	st8 [hpte]=pte,16;
       	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#824: FILE: include/asm-ia64/asmmacro.h:186:
+(cond)	st8 [hpte]=pte,16;
       	              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cond' - possible side-effects?
#826: FILE: include/asm-ia64/asmmacro.h:188:
+#define VHPT_PURGE(cond, hpte)									\
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
+	;;											\
+(cond)	st8 [hpte]=tag;				/* hpte already points to tag (see above) */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#826: FILE: include/asm-ia64/asmmacro.h:188:
+#define VHPT_PURGE(cond, hpte)									\
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
+	;;											\
+(cond)	st8 [hpte]=tag;				/* hpte already points to tag (see above) */

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#827: FILE: include/asm-ia64/asmmacro.h:189:
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
       	       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#827: FILE: include/asm-ia64/asmmacro.h:189:
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
       	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#827: FILE: include/asm-ia64/asmmacro.h:189:
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
       	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#827: FILE: include/asm-ia64/asmmacro.h:189:
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
       	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#827: FILE: include/asm-ia64/asmmacro.h:189:
+(cond)	dep tag=-1,r0,63,1;			/* set tag-invalid bit */			\
       	                ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#829: FILE: include/asm-ia64/asmmacro.h:191:
+(cond)	st8 [hpte]=tag;				/* hpte already points to tag (see above) */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#829: FILE: include/asm-ia64/asmmacro.h:191:
+(cond)	st8 [hpte]=tag;				/* hpte already points to tag (see above) */
       	          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ppte' - possible side-effects?
#833: FILE: include/asm-ia64/asmmacro.h:195:
+#define LOAD_PTE_MISS(va, ppte, pte, hpte, failfn)						\
+	mov ppte=cr.iha;			/* get virtual address of L3 PTE */		\
+	movl r30=1f;				/* load continuation point */			\
+	;;											\
+1:	ld8 pte=[ppte]; \
+	mov b0=r29;				/* restore possibly destroyed b0 */		\
+	;;											\
+	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
+(p6)	br.cond.spnt failfn;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#833: FILE: include/asm-ia64/asmmacro.h:195:
+#define LOAD_PTE_MISS(va, ppte, pte, hpte, failfn)						\
+	mov ppte=cr.iha;			/* get virtual address of L3 PTE */		\
+	movl r30=1f;				/* load continuation point */			\
+	;;											\
+1:	ld8 pte=[ppte]; \
+	mov b0=r29;				/* restore possibly destroyed b0 */		\
+	;;											\
+	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
+(p6)	br.cond.spnt failfn;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#833: FILE: include/asm-ia64/asmmacro.h:195:
+#define LOAD_PTE_MISS(va, ppte, pte, hpte, failfn)						\
+	mov ppte=cr.iha;			/* get virtual address of L3 PTE */		\
+	movl r30=1f;				/* load continuation point */			\
+	;;											\
+1:	ld8 pte=[ppte]; \
+	mov b0=r29;				/* restore possibly destroyed b0 */		\
+	;;											\
+	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
+(p6)	br.cond.spnt failfn;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#834: FILE: include/asm-ia64/asmmacro.h:196:
+	mov ppte=cr.iha;			/* get virtual address of L3 PTE */		\
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#835: FILE: include/asm-ia64/asmmacro.h:197:
+	movl r30=1f;				/* load continuation point */			\
 	        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#837: FILE: include/asm-ia64/asmmacro.h:199:
+1:	ld8 pte=[ppte]; \
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#837: FILE: include/asm-ia64/asmmacro.h:199:
+1:	ld8 pte=[ppte]; \
   	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#838: FILE: include/asm-ia64/asmmacro.h:200:
+	mov b0=r29;				/* restore possibly destroyed b0 */		\
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#840: FILE: include/asm-ia64/asmmacro.h:202:
+	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#840: FILE: include/asm-ia64/asmmacro.h:202:
+	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#840: FILE: include/asm-ia64/asmmacro.h:202:
+	tbit.z p6,p0=pte,_PAGE_P_BIT;		/* page present bit cleared? */			\
 	                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ppte' - possible side-effects?
#843: FILE: include/asm-ia64/asmmacro.h:205:
+#define LOAD_PTE_FAULT(va, ppte, pte, hpte, failfn)						\
+	thash ppte=va;				/* get virtual address of L3 PTE */		\
+	movl r30=1f;				/* load continuation point */			\
+	;;											\
+1:	ld8 pte=[ppte];										\
+	mov b0=r29;				/* restore possibly destroyed b0 */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#843: FILE: include/asm-ia64/asmmacro.h:205:
+#define LOAD_PTE_FAULT(va, ppte, pte, hpte, failfn)						\
+	thash ppte=va;				/* get virtual address of L3 PTE */		\
+	movl r30=1f;				/* load continuation point */			\
+	;;											\
+1:	ld8 pte=[ppte];										\
+	mov b0=r29;				/* restore possibly destroyed b0 */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#844: FILE: include/asm-ia64/asmmacro.h:206:
+	thash ppte=va;				/* get virtual address of L3 PTE */		\
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#845: FILE: include/asm-ia64/asmmacro.h:207:
+	movl r30=1f;				/* load continuation point */			\
 	        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#847: FILE: include/asm-ia64/asmmacro.h:209:
+1:	ld8 pte=[ppte];										\
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#847: FILE: include/asm-ia64/asmmacro.h:209:
+1:	ld8 pte=[ppte];										\
   	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#848: FILE: include/asm-ia64/asmmacro.h:210:
+	mov b0=r29;				/* restore possibly destroyed b0 */
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#880: FILE: include/asm-ia64/mmu_context.h:24:
+ * used to space out the RIDs we present to the hardware without messing with Linux's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: include/asm-ia64/mmu_context.h:25:
+ * sequential allocation scheme. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: include/asm-ia64/mmu_context.h:26:
+ * Refer to 'Intel Itanium Processor Reference Manual for Software Development' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: include/asm-ia64/mmu_context.h:27:
+ * http://www.intel.com/design/itanium/manuals.htm $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#885: FILE: include/asm-ia64/mmu_context.h:29:
+#define redistribute_rid(rid)	(((rid) & ~0xffff) | (((rid) << 8) & 0xff00) | (((rid) >> 8) & 0xff))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rid' - possible side-effects?
#885: FILE: include/asm-ia64/mmu_context.h:29:
+#define redistribute_rid(rid)	(((rid) & ~0xffff) | (((rid) << 8) & 0xff00) | (((rid) >> 8) & 0xff))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#890: FILE: include/asm-ia64/mmu_context.h:34:
+#define ia64_rid(ctx,addr)	redistribute_rid(((ctx) << 3) | (addr >> 61))
                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#890: FILE: include/asm-ia64/mmu_context.h:34:
+#define ia64_rid(ctx,addr)	redistribute_rid(((ctx) << 3) | (addr >> 61))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: include/asm-ia64/mmu_context.h:195:
+^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#926: FILE: include/asm-ia64/page.h:155:
+typedef struct { unsigned long pte, itir, tag, ig; } long_pte_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#953: FILE: include/asm-ia64/pgtable.h:503:
+ /*
+ * Long format VHPT

CHECK:BIT_MACRO: Prefer using the BIT macro
#982: FILE: include/asm-ia64/tlbflush.h:24:
+# define INVALID_TAG (1UL << 63)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#988: FILE: include/asm-ia64/tlbflush.h:30:
+	long_pte_t *hpte;
+	hpte = (long_pte_t *)ia64_thash(addr);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1009: FILE: include/asm-ia64/tlbflush.h:96:
 	if (vma->vm_mm == current->active_mm)
+	{

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332655.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 131 errors, 67 warnings, 33 checks, 836 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332655.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
