WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#103: FILE: lib/inflate.c:144:
+STATIC int INIT huft_build OF((unsigned *, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#103: FILE: lib/inflate.c:144:
+STATIC int INIT huft_build OF((unsigned *, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#103: FILE: lib/inflate.c:144:
+STATIC int INIT huft_build OF((unsigned *, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: lib/inflate.c:169:
+static const unsigned border[] = {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '|=' (ctx:VxV)
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)
                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)
                                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)
                                                             ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)
                                                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)
                                                                  ^

ERROR:SPACING: space required before the open brace '{'
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: lib/inflate.c:242:
+#define NEEDBITS(n) do {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} while(0)

ERROR:SPACING: spaces required around that '>>=' (ctx:VxV)
#201: FILE: lib/inflate.c:243:
+#define DUMPBITS(n) do {b>>=(n);k-=(n);} while(0)
                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#201: FILE: lib/inflate.c:243:
+#define DUMPBITS(n) do {b>>=(n);k-=(n);} while(0)
                                ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#201: FILE: lib/inflate.c:243:
+#define DUMPBITS(n) do {b>>=(n);k-=(n);} while(0)
                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#201: FILE: lib/inflate.c:243:
+#define DUMPBITS(n) do {b>>=(n);k-=(n);} while(0)
                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: lib/inflate.c:243:
+#define DUMPBITS(n) do {b>>=(n);k-=(n);} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#201: FILE: lib/inflate.c:243:
+#define DUMPBITS(n) do {b>>=(n);k-=(n);} while(0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#258: FILE: lib/inflate.c:303:
+STATIC int INIT huft_build(unsigned *b, unsigned n, unsigned s, const ush * d,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#258: FILE: lib/inflate.c:303:
+STATIC int INIT huft_build(unsigned *b, unsigned n, unsigned s, const ush * d,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#258: FILE: lib/inflate.c:303:
+STATIC int INIT huft_build(unsigned *b, unsigned n, unsigned s, const ush * d,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: lib/inflate.c:303:
+STATIC int INIT huft_build(unsigned *b, unsigned n, unsigned s, const ush * d,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: lib/inflate.c:304:
+		      const ush * e, struct huft **t, int *m)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#458: FILE: lib/inflate.c:306:
+	unsigned a;		/* counter for codes of length k */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#459: FILE: lib/inflate.c:307:
+	unsigned c[BMAX + 1];	/* bit length count table */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#460: FILE: lib/inflate.c:308:
+	unsigned f;		/* i repeats in table every f entries */

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: lib/inflate.c:311:
+	int h;			/* table level */
+	register unsigned i;	/* counter, current code */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#471: FILE: lib/inflate.c:319:
+	unsigned v[N_MAX];	/* values in order of bit length */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#473: FILE: lib/inflate.c:321:
+	unsigned x[BMAX + 1];	/* bit offsets, then code stack */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#474: FILE: lib/inflate.c:322:
+	unsigned *xp;		/* pointer into x */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#476: FILE: lib/inflate.c:324:
+	unsigned z;		/* number of entries in current table */

CHECK:CAMELCASE: Avoid CamelCase: <Tracecv>
#485: FILE: lib/inflate.c:333:
+		Tracecv(*p, (stderr, (n - i >= ' ' && n - i <= '~' ?

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#506: FILE: lib/inflate.c:354:
+	if ((unsigned)l < j)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#513: FILE: lib/inflate.c:361:
+	if ((unsigned)l > i)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#521: FILE: lib/inflate.c:369:
+		if ((y -= c[j]) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#524: FILE: lib/inflate.c:372:
+	if ((y -= c[i]) < 0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#531: FILE: lib/inflate.c:379:
+	x[1] = j = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#544: FILE: lib/inflate.c:392:
+		if ((j = *p++) != 0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#553: FILE: lib/inflate.c:401:
+	x[0] = i = 0; /* first Huffman code is zero */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#577: FILE: lib/inflate.c:425:
+				z = (z = g - w) > (unsigned)l ? l : z;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#580: FILE: lib/inflate.c:428:
+				if ((f = 1 << (j = k - w)) > a + 1) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#589: FILE: lib/inflate.c:437:
+						while (++j < z) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#590: FILE: lib/inflate.c:438:
+							if ((f <<= 1) <= *++xp)

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: lib/inflate.c:444:
+    ^I^I^I^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#596: FILE: lib/inflate.c:444:
+    ^I^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: lib/inflate.c:444:
+    ^I^I^I^I}$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#603: FILE: lib/inflate.c:451:
+				if ((q = (struct huft *)malloc(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#603: FILE: lib/inflate.c:451:
+				if ((q = (struct huft *)malloc(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around q->v.t
#613: FILE: lib/inflate.c:461:
+				*(t = &(q->v.t)) = (struct huft *)NULL;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#637: FILE: lib/inflate.c:485:
+			r.b = (uch) (k - w);

CHECK:SPACING: No space is necessary after a cast
#642: FILE: lib/inflate.c:490:
+				r.e = (uch) (*p < 256 ? 16 : 15);

CHECK:SPACING: No space is necessary after a cast
#644: FILE: lib/inflate.c:492:
+				r.v.n = (ush) (*p);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#815: FILE: lib/inflate.c:563:
+	unsigned n, d;		/* length and index for copy */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#816: FILE: lib/inflate.c:564:
+	unsigned w;		/* current window position */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#818: FILE: lib/inflate.c:566:
+	unsigned ml, md;	/* masks for bl and bd bits */

WARNING:LINE_SPACING: Missing a blank line after declarations
#819: FILE: lib/inflate.c:567:
+	unsigned ml, md;	/* masks for bl and bd bits */
+	register ulg b;		/* bit buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#831: FILE: lib/inflate.c:579:
+		NEEDBITS((unsigned)bl);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#832: FILE: lib/inflate.c:580:
+		if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#832: FILE: lib/inflate.c:580:
+		if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#839: FILE: lib/inflate.c:587:
+			} while ((e = (t = t->v.t + ((unsigned)b &

CHECK:CAMELCASE: Avoid CamelCase: <Tracevv>
#844: FILE: lib/inflate.c:592:
+			Tracevv((stderr, "%c", slide[w - 1]));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#856: FILE: lib/inflate.c:604:
+			n = t->v.n + ((unsigned)b & mask_bits[e]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#860: FILE: lib/inflate.c:608:
+			NEEDBITS((unsigned)bd);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#861: FILE: lib/inflate.c:609:
+			if ((e = (t = td + ((unsigned)b & md))->e) > 16)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#861: FILE: lib/inflate.c:609:
+			if ((e = (t = td + ((unsigned)b & md))->e) > 16)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#868: FILE: lib/inflate.c:616:
+				} while ((e = (t = t->v.t + ((unsigned)b

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#872: FILE: lib/inflate.c:620:
+			d = w - t->v.n - ((unsigned)b & mask_bits[e]);

CHECK:BRACES: Unbalanced braces around else statement
#912: FILE: lib/inflate.c:634:
+				} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#940: FILE: lib/inflate.c:658:
+      underrun:

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#996: FILE: lib/inflate.c:665:
+	unsigned n;		/* number of bytes in block */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#997: FILE: lib/inflate.c:666:
+	unsigned w;		/* current window position */

WARNING:LINE_SPACING: Missing a blank line after declarations
#998: FILE: lib/inflate.c:667:
+	unsigned w;		/* current window position */
+	register ulg b;		/* bit buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1014: FILE: lib/inflate.c:683:
+	n = ((unsigned)b & 0xffff);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1017: FILE: lib/inflate.c:686:
+	if (n != (unsigned)((~b) & 0xffff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '~b'
#1017: FILE: lib/inflate.c:686:
+	if (n != (unsigned)((~b) & 0xffff))

WARNING:INDENTED_LABEL: labels should not be indented
#1044: FILE: lib/inflate.c:709:
+      underrun:

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1113: FILE: lib/inflate.c:729:
+	unsigned l[288];	/* length list for huft_build */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1127: FILE: lib/inflate.c:743:
+	if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1134: FILE: lib/inflate.c:750:
+	if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > 1) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1173: FILE: lib/inflate.c:775:
+	unsigned j;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1174: FILE: lib/inflate.c:776:
+	unsigned l;		/* last length */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1175: FILE: lib/inflate.c:777:
+	unsigned m;		/* mask for bit lengths table */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1176: FILE: lib/inflate.c:778:
+	unsigned n;		/* number of lengths to get */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1181: FILE: lib/inflate.c:783:
+	unsigned nb;		/* number of bit length codes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1182: FILE: lib/inflate.c:784:
+	unsigned nl;		/* number of literal/length codes */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1183: FILE: lib/inflate.c:785:
+	unsigned nd;		/* number of distance codes */
 	         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1183: FILE: lib/inflate.c:785:
+	unsigned nd;		/* number of distance codes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1186: FILE: lib/inflate.c:787:
+	unsigned ll[288 + 32];	/* literal/length and distance code lengths */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1189: FILE: lib/inflate.c:789:
+	unsigned ll[286 + 30];	/* literal/length and distance code lengths */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1220: FILE: lib/inflate.c:802:
+	nl = 257 + ((unsigned)b & 0x1f); /* number of literal/length codes */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1223: FILE: lib/inflate.c:805:
+	nd = 1 + ((unsigned)b & 0x1f);	/* number of distance codes */
 	^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1223: FILE: lib/inflate.c:805:
+	nd = 1 + ((unsigned)b & 0x1f);	/* number of distance codes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1226: FILE: lib/inflate.c:808:
+	nb = 4 + ((unsigned)b & 0xf);	/* number of bit length codes */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1230: FILE: lib/inflate.c:811:
+	if (nl > 288 || nd > 32)
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1233: FILE: lib/inflate.c:813:
+	if (nl > 286 || nd > 30)
 	                ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1344: FILE: lib/inflate.c:822:
+		ll[border[j]] = (unsigned)b & 7;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1354: FILE: lib/inflate.c:832:
+	if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != 0) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1363: FILE: lib/inflate.c:841:
+	n = nl + nd;
 	         ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1365: FILE: lib/inflate.c:843:
+	i = l = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1366: FILE: lib/inflate.c:844:
+	while ((unsigned)i < n) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1367: FILE: lib/inflate.c:845:
+		NEEDBITS((unsigned)bl);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1368: FILE: lib/inflate.c:846:
+		j = (td = tl + ((unsigned)b & m))->b;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1372: FILE: lib/inflate.c:850:
+			ll[i++] = l = j;	/* save last length in l */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1375: FILE: lib/inflate.c:853:
+			j = 3 + ((unsigned)b & 3);

WARNING:TABSTOP: Statements should start on a tabstop
#1377: FILE: lib/inflate.c:855:
+			    if ((unsigned)i + j > n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1377: FILE: lib/inflate.c:855:
+			    if ((unsigned)i + j > n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1383: FILE: lib/inflate.c:861:
+			j = 3 + ((unsigned)b & 7);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1385: FILE: lib/inflate.c:863:
+			if ((unsigned)i + j > n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1392: FILE: lib/inflate.c:870:
+			j = 11 + ((unsigned)b & 0x7f);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1394: FILE: lib/inflate.c:872:
+			if ((unsigned)i + j > n)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1417: FILE: lib/inflate.c:895:
+	if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != 0) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1427: FILE: lib/inflate.c:905:
+	if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0) {
 	                             ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1427: FILE: lib/inflate.c:905:
+	if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0) {

WARNING:INDENTED_LABEL: labels should not be indented
#1476: FILE: lib/inflate.c:935:
+      underrun:

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1494: FILE: lib/inflate.c:944:
+	unsigned t;		/* block type */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1495: FILE: lib/inflate.c:945:
+	unsigned t;		/* block type */
+	register ulg b;		/* bit buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1511: FILE: lib/inflate.c:961:
+	t = (unsigned)b & 3;

WARNING:INDENTED_LABEL: labels should not be indented
#1567: FILE: lib/inflate.c:981:
+      underrun:

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1611: FILE: lib/inflate.c:990:
+	unsigned h;		/* maximum struct huft's malloc'ed */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1624: FILE: lib/inflate.c:1003:
+		if ((r = inflate_block(&e)) != 0) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1708: FILE: lib/inflate.c:1056:
+	static const int p[] =
+	    { 0, 1, 2, 4, 5, 7, 8, 10, 11, 12, 16, 22, 23, 26 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'magic[1] != 0213'
#1861: FILE: lib/inflate.c:1104:
+	if (magic[0] != 037 || ((magic[1] != 0213) && (magic[1] != 0236))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'magic[1] != 0236'
#1861: FILE: lib/inflate.c:1104:
+	if (magic[0] != 037 || ((magic[1] != 0213) && (magic[1] != 0236))) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1894: FILE: lib/inflate.c:1137:
+		unsigned len = (unsigned)NEXTBYTE();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1894: FILE: lib/inflate.c:1137:
+		unsigned len = (unsigned)NEXTBYTE();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1895: FILE: lib/inflate.c:1138:
+		unsigned len = (unsigned)NEXTBYTE();
+		len |= ((unsigned)NEXTBYTE()) << 8;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1895: FILE: lib/inflate.c:1138:
+		len |= ((unsigned)NEXTBYTE()) << 8;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1914: FILE: lib/inflate.c:1157:
+	if ((res = inflate())) {

WARNING:INDENTED_LABEL: labels should not be indented
#1961: FILE: lib/inflate.c:1204:
+      underrun:		/* NEXTBYTE() goto's here if needed */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100834.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 82 warnings, 17 checks, 1924 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100834.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
