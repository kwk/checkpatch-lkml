WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: fs/proc/proc_misc.c:571:
+	int len;
+	extern int rcu_read_proc_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#315: FILE: fs/proc/proc_misc.c:571:
+	extern int rcu_read_proc_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: fs/proc/proc_misc.c:581:
+	int len;
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: fs/proc/proc_misc.c:581:
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: fs/proc/proc_misc.c:591:
+	int len;
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#335: FILE: fs/proc/proc_misc.c:591:
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: fs/proc/proc_misc.c:601:
+	int len;
+	extern int rcu_read_proc_ctrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#345: FILE: fs/proc/proc_misc.c:601:
+	extern int rcu_read_proc_ctrs_data(char *page);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#399: FILE: include/linux/rcupdate.h:202:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: include/linux/rcupdate.h:204:
+extern void rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: include/linux/rcupdate.h:205:
+extern void rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/rcupdate.h:206:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#439: FILE: include/linux/rcupdate.h:298:
+extern void synchronize_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#439: FILE: include/linux/rcupdate.h:298:
+extern void synchronize_sched(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: kernel/rcupdate.c:30:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#628: FILE: kernel/rcupdate.c:576:
+EXPORT_SYMBOL(call_rcu);  /* WARNING: GPL-only in April 2006. */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#629: FILE: kernel/rcupdate.c:577:
+EXPORT_SYMBOL(call_rcu_bh);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#631: FILE: kernel/rcupdate.c:579:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: GPL-only in April 2006. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#670: FILE: kernel/rcupdate.c:618:
+};
+struct rcu_ctrlblk {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#674: FILE: kernel/rcupdate.c:622:
 };
+static struct rcu_data rcu_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#679: FILE: kernel/rcupdate.c:627:
+};
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#680: FILE: kernel/rcupdate.c:628:
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =
+	{ ATOMIC_INIT(0), ATOMIC_INIT(0) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#704: FILE: kernel/rcupdate.c:647:
+	if (current->rcu_read_lock_nesting++ == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#717: FILE: kernel/rcupdate.c:660:
+		if (unlikely(flipctr != (rcu_ctrlblk.completed & 0x1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#756: FILE: kernel/rcupdate.c:691:
+	if (--current->rcu_read_lock_nesting == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->rcu_flipctr2"
#767: FILE: kernel/rcupdate.c:702:
+		if (unlikely(current->rcu_flipctr2 != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#778: FILE: kernel/rcupdate.c:713:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#780: FILE: kernel/rcupdate.c:715:
+		if (rcu_data.waitlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#789: FILE: kernel/rcupdate.c:724:
+		if (rcu_data.nextlist != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#836: FILE: kernel/rcupdate.c:769:
+	if (unlikely(flipctr != rcu_ctrlblk.completed)) {
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#867: FILE: kernel/rcupdate.c:800:
+	smp_mb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#883: FILE: kernel/rcupdate.c:816:
+		if (rcu_ctrlblk.completed == rcu_data.completed) {
+			return;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#892: FILE: kernel/rcupdate.c:825:
+	if (rcu_data.donelist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#908: FILE: kernel/rcupdate.c:841:
+	if (list == NULL) {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#956: FILE: kernel/rcupdate.c:888:
+synchronize_sched(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#965: FILE: kernel/rcupdate.c:893:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#980: FILE: kernel/rcupdate.c:906:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#981: FILE: kernel/rcupdate.c:907:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#982: FILE: kernel/rcupdate.c:908:
+		rcu_data.nextlist != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#988: FILE: kernel/rcupdate.c:914:
+/*&&&&*/printk("WARNING: experimental RCU implementation.\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1068: FILE: kernel/rcupdate.c:996:
+	return (cnt);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1073: FILE: kernel/rcupdate.c:1001:
+EXPORT_SYMBOL(call_rcu); /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1080: FILE: kernel/rcupdate.c:1005:
+EXPORT_SYMBOL(rcu_read_lock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1081: FILE: kernel/rcupdate.c:1006:
+EXPORT_SYMBOL(rcu_read_unlock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1082: FILE: kernel/rcupdate.c:1007:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: Removal in April 2006. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 23 warnings, 20 checks, 957 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
