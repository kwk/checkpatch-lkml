WARNING:TYPO_SPELLING: 'prefering' may be misspelled - perhaps 'preferring'?
#24: 
This cleans up space after if, for and while to be consistent - prefering 
                                                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#76: FILE: fs/cifs/readdir.c:77:
+		if (*ptmp_inode == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#79: FILE: fs/cifs/readdir.c:79:
+			if (*ptmp_inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#88: FILE: fs/cifs/readdir.c:86:
+		if (tmp_dentry == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#89: FILE: fs/cifs/readdir.c:87:
+			cERROR(1, ("Failed allocating dentry"));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#97: FILE: fs/cifs/readdir.c:94:
+		if (*ptmp_inode == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#106: FILE: fs/cifs/readdir.c:136:
+	cFYI(0, ("CIFS FFIRST: Attributes came in as 0x%x", attr));

CHECK:CAMELCASE: Avoid CamelCase: <cifsInfo>
#111: FILE: fs/cifs/readdir.c:140:
+		if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#111: FILE: fs/cifs/readdir.c:140:
+		if (atomic_read(&cifsInfo->inUse) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#111: FILE: fs/cifs/readdir.c:140:
+		if (atomic_read(&cifsInfo->inUse) == 0) {
 			tmp_inode->i_mode = cifs_sb->mnt_dir_mode;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#131: FILE: fs/cifs/readdir.c:278:
+	struct cifsFileInfo *cifsFile;

CHECK:CAMELCASE: Avoid CamelCase: <cifsFile>
#131: FILE: fs/cifs/readdir.c:278:
+	struct cifsFileInfo *cifsFile;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#136: FILE: fs/cifs/readdir.c:282:
+	if (file->private_data == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#155: FILE: fs/cifs/readdir.c:311:
+	if (full_path == NULL) {
 		return -ENOMEM;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#155: FILE: fs/cifs/readdir.c:311:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSFindFirst>
#166: FILE: fs/cifs/readdir.c:326:
+	rc = CIFSFindFirst(xid, pTcon, full_path, cifs_sb->local_nls,

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#166: FILE: fs/cifs/readdir.c:326:
+	rc = CIFSFindFirst(xid, pTcon, full_path, cifs_sb->local_nls,

CHECK:CAMELCASE: Avoid CamelCase: <pDirInfo>
#198: FILE: fs/cifs/readdir.c:354:
+	FILE_DIRECTORY_INFO *pDirInfo = (FILE_DIRECTORY_INFO *)old_entry;

CHECK:BRACES: braces {} should be used on all arms of this statement
#207: FILE: fs/cifs/readdir.c:359:
+	if (new_entry >= end_of_smb) {
[...]
 	} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: fs/cifs/readdir.c:361:
+^I^I^Inew_entry, end_of_smb, old_entry)); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: fs/cifs/readdir.c:361:
+		cFYI(1, ("search entry %p began after end of SMB %p old entry %p",
+			new_entry, end_of_smb, old_entry)); 

CHECK:CAMELCASE: Avoid CamelCase: <pFindData>
#224: FILE: fs/cifs/readdir.c:378:
+		FILE_UNIX_INFO *pFindData = (FILE_UNIX_INFO *)current_entry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: fs/cifs/readdir.c:387:
+^I^IFILE_DIRECTORY_INFO *pFindData = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: fs/cifs/readdir.c:392:
+^I^IFILE_FULL_DIRECTORY_INFO *pFindData = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: fs/cifs/readdir.c:397:
+^I^ISEARCH_ID_FULL_DIR_INFO *pFindData = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: fs/cifs/readdir.c:402:
+^I^IFILE_BOTH_DIRECTORY_INFO *pFindData = $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ufilename[0] == UNICODE_DOT'
#281: FILE: fs/cifs/readdir.c:419:
+				if ((ufilename[0] == UNICODE_DOT)
+				    && (ufilename[1] == UNICODE_DOT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ufilename[1] == UNICODE_DOT'
#281: FILE: fs/cifs/readdir.c:419:
+				if ((ufilename[0] == UNICODE_DOT)
+				    && (ufilename[1] == UNICODE_DOT))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#282: FILE: fs/cifs/readdir.c:420:
+				if ((ufilename[0] == UNICODE_DOT)
+				    && (ufilename[1] == UNICODE_DOT))

CHECK:CAMELCASE: Avoid CamelCase: <ppCurrentEntry>
#303: FILE: fs/cifs/readdir.c:444:
+	struct file *file, char **ppCurrentEntry, int *num_to_ret)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cifsFile == NULL'
#315: FILE: fs/cifs/readdir.c:453:
+	if ((cifsFile == NULL) || (ppCurrentEntry == NULL) || (num_to_ret == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ppCurrentEntry == NULL'
#315: FILE: fs/cifs/readdir.c:453:
+	if ((cifsFile == NULL) || (ppCurrentEntry == NULL) || (num_to_ret == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num_to_ret == NULL'
#315: FILE: fs/cifs/readdir.c:453:
+	if ((cifsFile == NULL) || (ppCurrentEntry == NULL) || (num_to_ret == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile"
#315: FILE: fs/cifs/readdir.c:453:
+	if ((cifsFile == NULL) || (ppCurrentEntry == NULL) || (num_to_ret == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppCurrentEntry"
#315: FILE: fs/cifs/readdir.c:453:
+	if ((cifsFile == NULL) || (ppCurrentEntry == NULL) || (num_to_ret == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!num_to_ret"
#315: FILE: fs/cifs/readdir.c:453:
+	if ((cifsFile == NULL) || (ppCurrentEntry == NULL) || (num_to_ret == NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: fs/cifs/readdir.c:471:
+^I^I^IcFYI(1, ("freeing SMB ff cache buf on search rewind")); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: fs/cifs/readdir.c:481:
+^Iwhile ((index_to_find >= cifsFile->srch_inf.index_of_last_entry) && $

CHECK:CAMELCASE: Avoid CamelCase: <endOfSearch>
#357: FILE: fs/cifs/readdir.c:482:
+	       (rc == 0) && (cifsFile->srch_inf.endOfSearch == FALSE)) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#357: FILE: fs/cifs/readdir.c:482:
+	       (rc == 0) && (cifsFile->srch_inf.endOfSearch == FALSE)) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: fs/cifs/readdir.c:483:
+^I ^IcFYI(1, ("calling findnext2"));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: fs/cifs/readdir.c:483:
+^I ^IcFYI(1, ("calling findnext2"));$

CHECK:CAMELCASE: Avoid CamelCase: <CIFSFindNext>
#359: FILE: fs/cifs/readdir.c:484:
+		rc = CIFSFindNext(xid, pTcon, cifsFile->netfid, &cifsFile->srch_inf);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: fs/cifs/readdir.c:493:
+^I^Ichar *end_of_smb = cifsFile->srch_inf.ntwrk_buf_start + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: fs/cifs/readdir.c:499:
+^I^IcFYI(1, ("found entry - pos_in_buf %d", pos_in_buf)); $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current_entry"
#381: FILE: fs/cifs/readdir.c:501:
+		for (i = 0; (i < (pos_in_buf)) && (current_entry != NULL); i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: fs/cifs/readdir.c:504:
+^I^I^I   ^Iskip */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#389: FILE: fs/cifs/readdir.c:504:
+^I^I^I   ^Iskip */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#389: FILE: fs/cifs/readdir.c:504:
+			/* if ( . or ..)
+			   	skip */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#389: FILE: fs/cifs/readdir.c:504:
+			   	skip */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current_entry == NULL'
#404: FILE: fs/cifs/readdir.c:515:
+		if ((current_entry == NULL) && (i < pos_in_buf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i < pos_in_buf'
#404: FILE: fs/cifs/readdir.c:515:
+		if ((current_entry == NULL) && (i < pos_in_buf)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#404: FILE: fs/cifs/readdir.c:515:
+		if ((current_entry == NULL) && (i < pos_in_buf)) {
+			cERROR(1, ("reached end of buf searching for pos in buf %d index to find %lld rc %d", pos_in_buf, index_to_find, rc)); /* BB removeme BB */
 		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_entry"
#404: FILE: fs/cifs/readdir.c:515:
+		if ((current_entry == NULL) && (i < pos_in_buf)) {

WARNING:LONG_LINE: line length of 163 exceeds 100 columns
#405: FILE: fs/cifs/readdir.c:516:
+			cERROR(1, ("reached end of buf searching for pos in buf %d index to find %lld rc %d", pos_in_buf, index_to_find, rc)); /* BB removeme BB */

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: fs/cifs/readdir.c:525:
+	if (pos_in_buf >= cifsFile->srch_inf.entries_in_buffer) {
[...]
 	} else
[...]

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#490: FILE: fs/cifs/readdir.c:587:
+		pqst->len = cifs_strfromUCS_le((char *)pqst->name, (wchar_t *)filename, len / 2, nlt);

CHECK:CAMELCASE: Avoid CamelCase: <cifs_strfromUCS_le>
#490: FILE: fs/cifs/readdir.c:587:
+		pqst->len = cifs_strfromUCS_le((char *)pqst->name, (wchar_t *)filename, len / 2, nlt);

CHECK:CAMELCASE: Avoid CamelCase: <pCifsF>
#507: FILE: fs/cifs/readdir.c:602:
+	struct cifsFileInfo *pCifsF;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'direntry == NULL'
#520: FILE: fs/cifs/readdir.c:612:
+	if ((direntry == NULL) || (file == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file == NULL'
#520: FILE: fs/cifs/readdir.c:612:
+	if ((direntry == NULL) || (file == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!direntry"
#520: FILE: fs/cifs/readdir.c:612:
+	if ((direntry == NULL) || (file == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#520: FILE: fs/cifs/readdir.c:612:
+	if ((direntry == NULL) || (file == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'scratch_buf == NULL'
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfindEntry == NULL'
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsF == NULL'
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:CAMELCASE: Avoid CamelCase: <pfindEntry>
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scratch_buf"
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfindEntry"
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pCifsF"
#526: FILE: fs/cifs/readdir.c:617:
+	if ((scratch_buf == NULL) || (pfindEntry == NULL) || (pCifsF == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#530: FILE: fs/cifs/readdir.c:620:
+	if (file->f_dentry == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#549: FILE: fs/cifs/readdir.c:635:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#549: FILE: fs/cifs/readdir.c:635:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#549: FILE: fs/cifs/readdir.c:635:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#549: FILE: fs/cifs/readdir.c:635:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#565: FILE: fs/cifs/readdir.c:647:
+	if (pCifsF->srch_inf.info_level == SMB_FIND_FILE_UNIX) {
[...]
 	} else {
[...]

ERROR:SPACING: space required after that ',' (ctx:VxO)
#566: FILE: fs/cifs/readdir.c:648:
+		unix_fill_in_inode(tmp_inode, (FILE_UNIX_INFO *)pfindEntry,&obj_type);
 		                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#566: FILE: fs/cifs/readdir.c:648:
+		unix_fill_in_inode(tmp_inode, (FILE_UNIX_INFO *)pfindEntry,&obj_type);
 		                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#569: FILE: fs/cifs/readdir.c:650:
+		fill_in_inode(tmp_inode, (FILE_DIRECTORY_INFO *)pfindEntry,&obj_type);
 		                                                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#569: FILE: fs/cifs/readdir.c:650:
+		fill_in_inode(tmp_inode, (FILE_DIRECTORY_INFO *)pfindEntry,&obj_type);
 		                                                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#576: FILE: fs/cifs/readdir.c:654:
+	if (rc) {
+		cFYI(1, ("filldir rc = %d", rc));
 	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cifsFile == NULL'
#589: FILE: fs/cifs/readdir.c:670:
+	if ((cifsFile == NULL) || (current_entry == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current_entry == NULL'
#589: FILE: fs/cifs/readdir.c:670:
+	if ((cifsFile == NULL) || (current_entry == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile"
#589: FILE: fs/cifs/readdir.c:670:
+	if ((cifsFile == NULL) || (current_entry == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_entry"
#589: FILE: fs/cifs/readdir.c:670:
+	if ((cifsFile == NULL) || (current_entry == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#670: FILE: fs/cifs/readdir.c:734:
+	if (file->f_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pTcon"
#679: FILE: fs/cifs/readdir.c:742:
+	if (pTcon == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#699: FILE: fs/cifs/readdir.c:769:
+		if (file->private_data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#709: FILE: fs/cifs/readdir.c:778:
+		if (file->private_data == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <emptyDir>
#718: FILE: fs/cifs/readdir.c:785:
+			if (cifsFile->srch_inf.emptyDir) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: fs/cifs/readdir.c:804:
+^I^I^IcFYI(1, ("fce error %d", rc)); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#756: FILE: fs/cifs/readdir.c:813:
+			 num_to_fill,cifsFile->srch_inf.ntwrk_buf_start));
 			            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_entry"
#765: FILE: fs/cifs/readdir.c:818:
+			if (current_entry == NULL) {

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#766: FILE: fs/cifs/readdir.c:819:
+				cERROR(1, ("beyond end of smb with num to fill %d i %d", num_to_fill,i)); /* BB removeme BB */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#766: FILE: fs/cifs/readdir.c:819:
+				cERROR(1, ("beyond end of smb with num to fill %d i %d", num_to_fill,i)); /* BB removeme BB */
 				                                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: fs/cifs/readdir.c:822:
+/*^I^I^Iif ((!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_SERVER_INUM)) || $

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#772: FILE: fs/cifs/readdir.c:823:
+			    (cifsFile->srch_inf.info_level != something that supports server inodes)) {

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#772: FILE: fs/cifs/readdir.c:823:
+/*			if ((!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_SERVER_INUM)) || 
+			    (cifsFile->srch_inf.info_level != something that supports server inodes)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#786: FILE: fs/cifs/readdir.c:832:
+			if (file->f_pos == cifsFile->srch_inf.index_of_last_entry) {
[...]
 			} else 
[...]

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#787: FILE: fs/cifs/readdir.c:833:
+				cFYI(1, ("last entry in buf at pos %lld %s", file->f_pos, tmp_buf)); /* BB removeme BB */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp_buf"
#795: FILE: fs/cifs/readdir.c:839:
+		if (tmp_buf != NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196791.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 16 warnings, 66 checks, 746 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196791.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
