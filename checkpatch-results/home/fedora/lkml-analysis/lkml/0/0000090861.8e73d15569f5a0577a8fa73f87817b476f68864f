WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#43: 
Signed-Off-By: Pavel Emelianov <xemul@openvz.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#44: 
Signed-Off-By: Kirill Korotaev <dev@openvz.org>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#101: FILE: include/linux/ipc.h:76:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: include/linux/ipc.h:93:
+^Isize_t ^Ishm_ctlall;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: include/linux/ipc.h:94:
+^Iint ^Ishm_ctlmni;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ids)...) over kmalloc(sizeof(struct ipc_ids)...)
#203: FILE: ipc/msg.c:86:
+	ids = kmalloc(sizeof(struct ipc_ids), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ids"
#204: FILE: ipc/msg.c:87:
+	if (ids == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->ipc_ns->msg_ids
#240: FILE: ipc/msg.c:123:
+#define msg_ids		(*(current->ipc_ns->msg_ids))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ids)...) over kmalloc(sizeof(struct ipc_ids)...)
#274: FILE: ipc/sem.c:121:
+	ids = kmalloc(sizeof(struct ipc_ids), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ids"
#275: FILE: ipc/sem.c:122:
+	if (ids == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->ipc_ns->sem_ids
#316: FILE: ipc/sem.c:162:
+#define sem_ids		(*(current->ipc_ns->sem_ids))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ids)...) over kmalloc(sizeof(struct ipc_ids)...)
#349: FILE: ipc/shm.c:65:
+	ids = kmalloc(sizeof(struct ipc_ids), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ids"
#350: FILE: ipc/shm.c:66:
+	if (ids == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->ipc_ns->shm_ids
#388: FILE: ipc/shm.c:104:
+#define shm_ids		(*(current->ipc_ns->shm_ids))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#490: FILE: ipc/util.c:68:
+void __ipc_init ipc_init_ids(struct ipc_ids* ids, int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ns)...) over kmalloc(sizeof(struct ipc_namespace)...)
#507: FILE: ipc/util.c:108:
+	ns = kmalloc(sizeof(struct ipc_namespace), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ns"
#508: FILE: ipc/util.c:109:
+	if (ns == NULL)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#606: FILE: ipc/util.h:52:
+void __ipc_init ipc_init_ids(struct ipc_ids* ids, int size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 5 warnings, 11 checks, 541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
