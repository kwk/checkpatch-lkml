WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Refreshed this patch to address the above issues. Please let me know if you see

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/cpu.h:36:
+extern void unregister_cpu(struct cpu *, struct node *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/asm-ia64/cpu.h:17:
+extern int arch_register_cpu(int num);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/asm-ia64/cpu.h:19:
+extern void arch_unregister_cpu(int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: arch/ia64/kernel/topology.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: arch/ia64/kernel/topology.c:9:
+ * ^I^I2002/08/07 Erich Focht <efocht@ess.nec.de>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: arch/ia64/kernel/topology.c:11:
+ *  ^IIntel Corporation - Ashok Raj$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmzone.h> instead of <asm/mmzone.h>
#225: FILE: arch/ia64/kernel/topology.c:21:
+#include <asm/mmzone.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: arch/ia64/kernel/topology.c:33:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: arch/ia64/kernel/topology.c:49:
+	int node = cpu_to_node(num);
+	parent = &sysfs_nodes[node];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: arch/ia64/kernel/topology.c:55:
+EXPORT_SYMBOL(arch_unregister_cpu);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#262: FILE: arch/ia64/kernel/topology.c:58:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sysfs_nodes)...) over kmalloc(sizeof(struct node)...)
#268: FILE: arch/ia64/kernel/topology.c:64:
+	sysfs_nodes = kmalloc(sizeof(struct node) * MAX_NUMNODES, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#276: FILE: arch/ia64/kernel/topology.c:72:
+		if ((err = register_node(&sysfs_nodes[i], i, 0)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sysfs_cpus)...) over kmalloc(sizeof(struct ia64_cpu)...)
#280: FILE: arch/ia64/kernel/topology.c:76:
+	sysfs_cpus = kmalloc(sizeof(struct ia64_cpu) * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#280: FILE: arch/ia64/kernel/topology.c:76:
+	sysfs_cpus = kmalloc(sizeof(struct ia64_cpu) * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#285: FILE: arch/ia64/kernel/topology.c:81:
+	memset(sysfs_cpus, 0, sizeof(struct ia64_cpu) * NR_CPUS);

ERROR:SPACING: space required before the open parenthesis '('
#288: FILE: arch/ia64/kernel/topology.c:84:
+		if((err = arch_register_cpu(i)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#288: FILE: arch/ia64/kernel/topology.c:84:
+		if((err = arch_register_cpu(i)))

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#294: FILE: arch/ia64/kernel/topology.c:90:
+__initcall(topology_init);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: include/asm-i386/cpu.h:14:
+extern int arch_register_cpu(int num);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/asm-i386/cpu.h:16:
+extern void arch_unregister_cpu(int);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#341: FILE: arch/i386/mach-default/topology.c:34:
+int arch_register_cpu(int num){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#341: FILE: arch/i386/mach-default/topology.c:34:
+int arch_register_cpu(int num){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: arch/i386/mach-default/topology.c:36:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: arch/i386/mach-default/topology.c:39:
+	int node = cpu_to_node(num);
+	if (node_online(node))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#355: FILE: arch/i386/mach-default/topology.c:48:
+void arch_unregister_cpu(int num) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: arch/i386/mach-default/topology.c:53:
+	int node = cpu_to_node(num);
+	if (node_online(node))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#367: FILE: arch/i386/mach-default/topology.c:60:
+EXPORT_SYMBOL(arch_unregister_cpu);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: arch/i386/mach-default/topology.c:63:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#383: FILE: drivers/base/cpu.c:49:
+static void __devinit register_cpu_control(struct cpu *cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#387: FILE: drivers/base/cpu.c:53:
 }
+void unregister_cpu(struct cpu *cpu, struct node *root)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#389: FILE: drivers/base/cpu.c:55:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#398: FILE: drivers/base/cpu.c:64:
+	return;
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#408: FILE: drivers/base/cpu.c:80:
+int __devinit register_cpu(struct cpu *cpu, int num, struct node *root)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#416: FILE: drivers/base/cpu.c:97:
 }
+#ifdef CONFIG_HOTPLUG_CPU

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246916.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 15 warnings, 13 checks, 237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246916.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
