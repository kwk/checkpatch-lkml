WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
--- 3b4165efeade40b65ea2e8188184e4f8d3d8d636/arch/i386/Kconfig  (mode:100644)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: arch/i386/Kconfig:21:
+config NEWTOD_VSYSCALL
+	depends on EXPERIMENTAL
+	bool "VSYSCALL gettimeofday() interface"
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#131: FILE: arch/i386/kernel/vmlinux.lds.S:64:
+  .vsyscall_0 VSYSCALL_GTOD_START: AT ((LOADADDR(.data.cacheline_aligned) + SIZEOF(.data.cacheline_aligned) + 4095) & ~(4095)) { *(.vsyscall_0) }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#137: FILE: arch/i386/kernel/vmlinux.lds.S:70:
+  .vsyscall_gtod_data : AT ((LOADADDR(.vsyscall_0) + SIZEOF(.vsyscall_0) + 63) & ~(63)) { *(.vsyscall_gtod_data) }

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#141: FILE: arch/i386/kernel/vmlinux.lds.S:74:
+  .vsyscall_gtod_lock : AT ((LOADADDR(.vsyscall_gtod_data) + SIZEOF(.vsyscall_gtod_data) + 15) & ~(15)) { *(.vsyscall_gtod_lock) }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#157: FILE: arch/i386/kernel/vsyscall-gtod.c:1:
+#include <linux/time.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#162: FILE: arch/i386/kernel/vsyscall-gtod.c:6:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: arch/i386/kernel/vsyscall-gtod.c:29:
+static inline _syscall2(int,gettimeofday,struct timeval *,tv,struct timezone *,tz);
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: arch/i386/kernel/vsyscall-gtod.c:29:
+static inline _syscall2(int,gettimeofday,struct timeval *,tv,struct timezone *,tz);
                                         ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#185: FILE: arch/i386/kernel/vsyscall-gtod.c:29:
+static inline _syscall2(int,gettimeofday,struct timeval *,tv,struct timezone *,tz);
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: arch/i386/kernel/vsyscall-gtod.c:29:
+static inline _syscall2(int,gettimeofday,struct timeval *,tv,struct timezone *,tz);
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#185: FILE: arch/i386/kernel/vsyscall-gtod.c:29:
+static inline _syscall2(int,gettimeofday,struct timeval *,tv,struct timezone *,tz);
                                                                               ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#187: FILE: arch/i386/kernel/vsyscall-gtod.c:31:
+static int vsyscall_mapped = 0; /* flag variable for remap_vsyscall() */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#188: FILE: arch/i386/kernel/vsyscall-gtod.c:32:
+extern struct timezone sys_tz;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#190: FILE: arch/i386/kernel/vsyscall-gtod.c:34:
+static inline void do_vgettimeofday(struct timeval* tv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#212: FILE: arch/i386/kernel/vsyscall-gtod.c:56:
+	tv->tv_usec += (unsigned long) nsec_delta;

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: arch/i386/kernel/vsyscall-gtod.c:71:
+	unsigned long seq;
+	do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: arch/i386/kernel/vsyscall-gtod.c:84:
+static time_t __vsyscall(1) asmlinkage vtime(time_t * t)

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: arch/i386/kernel/vsyscall-gtod.c:87:
+	struct timeval tv;
+	vgettimeofday(&tv,NULL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: arch/i386/kernel/vsyscall-gtod.c:87:
+	vgettimeofday(&tv,NULL);
 	                 ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#249: FILE: arch/i386/kernel/vsyscall-gtod.c:93:
+struct timesource_t* curr_timesource;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: arch/i386/kernel/vsyscall-gtod.c:96:
+void arch_update_vsyscall_gtod(nsec_t wall_time, cycle_t offset_base,
+				struct timesource_t* timesource, int ntp_adj)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#252: FILE: arch/i386/kernel/vsyscall-gtod.c:96:
+				struct timesource_t* timesource, int ntp_adj)

WARNING:REPEATED_WORD: Possible repeated word: 'hack'
#258: FILE: arch/i386/kernel/vsyscall-gtod.c:102:
+	/* XXX - hackitty hack hack. this is terrible! */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timesource->type == TIMESOURCE_MMIO_32'
#260: FILE: arch/i386/kernel/vsyscall-gtod.c:104:
+		if ((timesource->type == TIMESOURCE_MMIO_32)
+				|| (timesource->type == TIMESOURCE_MMIO_64)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timesource->type == TIMESOURCE_MMIO_64'
#260: FILE: arch/i386/kernel/vsyscall-gtod.c:104:
+		if ((timesource->type == TIMESOURCE_MMIO_32)
+				|| (timesource->type == TIMESOURCE_MMIO_64)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#261: FILE: arch/i386/kernel/vsyscall-gtod.c:105:
+		if ((timesource->type == TIMESOURCE_MMIO_32)
+				|| (timesource->type == TIMESOURCE_MMIO_64)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: arch/i386/kernel/vsyscall-gtod.c:109:
+			pmd_t *pmd = pmd_offset(pud,vaddr);
 			                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: arch/i386/kernel/vsyscall-gtod.c:111:
+			pte_t *pte = pte_offset_kernel(pmd, vaddr);
+			pte->pte_low |= _PAGE_USER;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#288: FILE: arch/i386/kernel/vsyscall-gtod.c:132:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#289: FILE: arch/i386/kernel/vsyscall-gtod.c:133:
+}
+extern char __vsyscall_0;

CHECK:SPACING: No space is necessary after a cast
#293: FILE: arch/i386/kernel/vsyscall-gtod.c:137:
+	unsigned long physaddr_page0 = (unsigned long) &__vsyscall_0 - PAGE_OFFSET;

CHECK:SPACING: No space is necessary after a cast
#304: FILE: arch/i386/kernel/vsyscall-gtod.c:148:
+	unsigned long physaddr_page0 = (unsigned long) &__vsyscall_0 - PAGE_OFFSET;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: arch/i386/kernel/vsyscall-gtod.c:164:
+	printk("VSYSCALL: consistency checks...");

CHECK:SPACING: No space is necessary after a cast
#321: FILE: arch/i386/kernel/vsyscall-gtod.c:165:
+	if ((unsigned long) &vgettimeofday != VSYSCALL_ADDR(__NR_vgettimeofday)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: arch/i386/kernel/vsyscall-gtod.c:166:
+		printk("vgettimeofday link addr broken\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#323: FILE: arch/i386/kernel/vsyscall-gtod.c:167:
+		printk("VSYSCALL: vsyscall_init failed!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsyscall_init', this function's name, in a string
#323: FILE: arch/i386/kernel/vsyscall-gtod.c:167:
+		printk("VSYSCALL: vsyscall_init failed!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#326: FILE: arch/i386/kernel/vsyscall-gtod.c:170:
+	if ((unsigned long) &vtime != VSYSCALL_ADDR(__NR_vtime)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#327: FILE: arch/i386/kernel/vsyscall-gtod.c:171:
+		printk("vtime link addr broken\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#328: FILE: arch/i386/kernel/vsyscall-gtod.c:172:
+		printk("VSYSCALL: vsyscall_init failed!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsyscall_init', this function's name, in a string
#328: FILE: arch/i386/kernel/vsyscall-gtod.c:172:
+		printk("VSYSCALL: vsyscall_init failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#332: FILE: arch/i386/kernel/vsyscall-gtod.c:176:
+		printk("fixmap first vsyscall 0x%lx should be 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: arch/i386/kernel/vsyscall-gtod.c:177:
+		printk("fixmap first vsyscall 0x%lx should be 0x%x\n",
+			__fix_to_virt(FIX_VSYSCALL_GTOD_FIRST_PAGE),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: arch/i386/kernel/vsyscall-gtod.c:179:
+		printk("VSYSCALL: vsyscall_init failed!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vsyscall_init', this function's name, in a string
#335: FILE: arch/i386/kernel/vsyscall-gtod.c:179:
+		printk("VSYSCALL: vsyscall_init failed!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: arch/i386/kernel/vsyscall-gtod.c:183:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: arch/i386/kernel/vsyscall-gtod.c:184:
+	printk("passed...mapping...");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#342: FILE: arch/i386/kernel/vsyscall-gtod.c:186:
+	printk("done.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#344: FILE: arch/i386/kernel/vsyscall-gtod.c:188:
+	printk("VSYSCALL: fixmap virt addr: 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: arch/i386/kernel/vsyscall-gtod.c:189:
+	printk("VSYSCALL: fixmap virt addr: 0x%lx\n",
+		__fix_to_virt(FIX_VSYSCALL_GTOD_FIRST_PAGE));

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#349: FILE: arch/i386/kernel/vsyscall-gtod.c:193:
+__initcall(remap_vsyscall);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#392: FILE: include/asm-i386/pgtable.h:172:
+#define PAGE_KERNEL_VSYSCALL_NOCACHE __pgprot(__PAGE_KERNEL_VSYSCALL|(__PAGE_KERNEL_RO | _PAGE_PCD))
                                                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#401: FILE: include/asm-i386/vsyscall-gtod.h:1:
+#ifndef _ASM_i386_VSYSCALL_GTOD_H_

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: include/asm-i386/vsyscall-gtod.h:8:
+ * and must also be same as addr in vmlinux.lds.S */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#413: FILE: include/asm-i386/vsyscall-gtod.h:13:
+	((VSYSCALL_GTOD_END-VSYSCALL_GTOD_START) >> PAGE_SHIFT)
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#415: FILE: include/asm-i386/vsyscall-gtod.h:15:
+	(VSYSCALL_GTOD_START+VSYSCALL_GTOD_SIZE*(vsyscall_nr))
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#415: FILE: include/asm-i386/vsyscall-gtod.h:15:
+	(VSYSCALL_GTOD_START+VSYSCALL_GTOD_SIZE*(vsyscall_nr))
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#420: FILE: include/asm-i386/vsyscall-gtod.h:20:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))
                                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#420: FILE: include/asm-i386/vsyscall-gtod.h:20:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_" #nr) over __attribute__((__section__(".vsyscall_" #nr)))
#420: FILE: include/asm-i386/vsyscall-gtod.h:20:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#420: FILE: include/asm-i386/vsyscall-gtod.h:20:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: include/asm-i386/vsyscall-gtod.h:23:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#423: FILE: include/asm-i386/vsyscall-gtod.h:23:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_gtod_data") over __attribute__((__section__(".vsyscall_gtod_data")))
#423: FILE: include/asm-i386/vsyscall-gtod.h:23:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#423: FILE: include/asm-i386/vsyscall-gtod.h:23:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#425: FILE: include/asm-i386/vsyscall-gtod.h:25:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#425: FILE: include/asm-i386/vsyscall-gtod.h:25:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_gtod_lock") over __attribute__((__section__(".vsyscall_gtod_lock")))
#425: FILE: include/asm-i386/vsyscall-gtod.h:25:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#425: FILE: include/asm-i386/vsyscall-gtod.h:25:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock")))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#427: FILE: include/asm-i386/vsyscall-gtod.h:27:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183682.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 35 warnings, 20 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183682.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
