WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > >On Tue, Oct 15, 2002 at 05:25:58PM +0200, Christian Guggenberger wrote:

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/fs.h:1437:
+extern ssize_t do_generic_file_write(struct file *, const char *, size_t, loff_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#73: FILE: include/linux/fs.h:1437:
+extern ssize_t do_generic_file_write(struct file *, const char *, size_t, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#73: FILE: include/linux/fs.h:1437:
+extern ssize_t do_generic_file_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#73: FILE: include/linux/fs.h:1437:
+extern ssize_t do_generic_file_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#73: FILE: include/linux/fs.h:1437:
+extern ssize_t do_generic_file_write(struct file *, const char *, size_t, loff_t *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: mm/filemap.c:2920:
+do_generic_file_write(struct file *file,const char *buf,size_t count, loff_t *ppos)
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: mm/filemap.c:2920:
+do_generic_file_write(struct file *file,const char *buf,size_t count, loff_t *ppos)
                                                        ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#126: FILE: mm/filemap.c:3148:
+EXPORT_SYMBOL(do_generic_file_write);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: mm/filemap.c:3151:
+generic_file_write(struct file *file,const char *buf,size_t count, loff_t *ppos)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: mm/filemap.c:3151:
+generic_file_write(struct file *file,const char *buf,size_t count, loff_t *ppos)
                                                     ^

CHECK:SPACING: No space is necessary after a cast
#134: FILE: mm/filemap.c:3156:
+	if ((ssize_t) count < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err > 0'
#143: FILE: mm/filemap.c:3165:
+	if ((err > 0) && (file->f_flags & O_DIRECT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423207.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 6 warnings, 3 checks, 75 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423207.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
