WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
swap-handling part of swsusp (the swap map structure, described in a comment)

WARNING:INLINE: plain inline is preferred over __inline__
#89: FILE: kernel/power/swsusp.c:175:
+static __inline__ int crypto_write(unsigned long addr, swp_entry_t *entry, void *mem)

WARNING:INLINE: plain inline is preferred over __inline__
#110: FILE: kernel/power/swsusp.c:195:
+static __inline__ int crypto_read(unsigned long offset, void *buf, void *mem)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#123: FILE: kernel/power/swsusp.c:206:
+		src.page = dst.page = virt_to_page(buf);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:INLINE: plain inline is preferred over __inline__
#132: FILE: kernel/power/swsusp.c:223:
+static __inline__ int crypto_write(unsigned long addr, swp_entry_t *entry, void *mem)

WARNING:INLINE: plain inline is preferred over __inline__
#139: FILE: kernel/power/swsusp.c:228:
+static __inline__ int crypto_read(unsigned long offset, void *buf, void *mem)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: kernel/power/swsusp.c:376:
+static void init_header(unsigned nr_pages, unsigned img_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: kernel/power/swsusp.c:376:
+static void init_header(unsigned nr_pages, unsigned img_pages)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#273: FILE: kernel/power/swsusp.c:440:
+typedef struct swp_map_page swp_map_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#289: FILE: kernel/power/swsusp.c:453:
+static swp_map_t *alloc_swp_map(unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#292: FILE: kernel/power/swsusp.c:456:
+	unsigned n = 0;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_swp_map', this function's name, in a string
#297: FILE: kernel/power/swsusp.c:461:
+	pr_debug("alloc_swp_map(): nr_pages = %d\n", nr_pages);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#346: FILE: kernel/power/swsusp.c:501:
+		if ((error = write_page((unsigned long)swp_map, &entry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#372: FILE: kernel/power/swsusp.c:524:
+static int save_image(swp_map_t *swp, unsigned nr_pages, void *buf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#374: FILE: kernel/power/swsusp.c:526:
+	unsigned n, k;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#376: FILE: kernel/power/swsusp.c:528:
+	unsigned mod = nr_pages / 100;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#379: FILE: kernel/power/swsusp.c:531:
+	if ((error = crypto_init(1, &tfm)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: kernel/power/swsusp.c:533:
+	printk("Writing data to swap (%d pages) ...     ", nr_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: kernel/power/swsusp.c:540:
+				error = crypto_write((unsigned long)buf,
+						swp->entries + k, tfm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: kernel/power/swsusp.c:546:
+				printk("\b\b\b\b%3d%%", n / mod);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#398: FILE: kernel/power/swsusp.c:550:
+	printk("\b\b\b\bdone\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#405: FILE: kernel/power/swsusp.c:557:
+	unsigned k;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: kernel/power/swsusp.c:593:
+	unsigned nr_pages;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#449: FILE: kernel/power/swsusp.c:615:
+	if ((error = save_image(swp_map, nr_pages, buffer)))

CHECK:CAMELCASE: Avoid CamelCase: <Free_pages_entries>
#450: FILE: kernel/power/swsusp.c:616:
+		goto Free_pages_entries;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#451: FILE: kernel/power/swsusp.c:617:
+	if ((error = snapshot_finish()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#454: FILE: kernel/power/swsusp.c:620:
+	if ((error = save_swp_map(swp_map, &swsusp_info.start)))

CHECK:CAMELCASE: Avoid CamelCase: <Free_map_entries>
#455: FILE: kernel/power/swsusp.c:621:
+		goto Free_map_entries;

CHECK:CAMELCASE: Avoid CamelCase: <Free_mem>
#461: FILE: kernel/power/swsusp.c:625:
+Free_mem:

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#491: FILE: kernel/power/swsusp.c:806:
+static int load_image(unsigned nr_pages, swp_entry_t start)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#495: FILE: kernel/power/swsusp.c:810:
+	unsigned n, k;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#498: FILE: kernel/power/swsusp.c:813:
+	unsigned mod = nr_pages / 100;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#504: FILE: kernel/power/swsusp.c:819:
+	if ((error = crypto_init(0, &tfm)))

CHECK:CAMELCASE: Avoid CamelCase: <Crypto_exit>
#510: FILE: kernel/power/swsusp.c:825:
+		goto Crypto_exit;

CHECK:CAMELCASE: Avoid CamelCase: <Free_buf>
#515: FILE: kernel/power/swsusp.c:830:
+		goto Free_buf;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#517: FILE: kernel/power/swsusp.c:832:
+	printk("Loading data from swap (%d pages) ...     ", nr_pages);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#520: FILE: kernel/power/swsusp.c:835:
+		if ((error = crypto_read(offset, (void *)swp, tfm)))

CHECK:CAMELCASE: Avoid CamelCase: <Free>
#521: FILE: kernel/power/swsusp.c:836:
+			goto Free;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: kernel/power/swsusp.c:844:
+				printk("\b\b\b\b%3d%%", n / mod);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#533: FILE: kernel/power/swsusp.c:848:
+	printk("\b\b\b\bdone\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#718: FILE: kernel/power/power.h:65:
+extern unsigned snapshot_pages_to_save(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#718: FILE: kernel/power/power.h:65:
+extern unsigned snapshot_pages_to_save(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#719: FILE: kernel/power/power.h:66:
+extern unsigned snapshot_image_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#719: FILE: kernel/power/power.h:66:
+extern unsigned snapshot_image_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#720: FILE: kernel/power/power.h:67:
+extern void snapshot_send_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#721: FILE: kernel/power/power.h:68:
+extern int snapshot_send_page(void *buf);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#722: FILE: kernel/power/power.h:69:
+extern int snapshot_recv_init(unsigned nr_pages, unsigned img_pages);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#722: FILE: kernel/power/power.h:69:
+extern int snapshot_recv_init(unsigned nr_pages, unsigned img_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#722: FILE: kernel/power/power.h:69:
+extern int snapshot_recv_init(unsigned nr_pages, unsigned img_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#723: FILE: kernel/power/power.h:70:
+extern int snapshot_recv_page(void *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#724: FILE: kernel/power/power.h:71:
+extern int snapshot_finish(void);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#741: FILE: kernel/power/snapshot.c:37:
+struct pbe *pagedir_nosave = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#743: FILE: kernel/power/snapshot.c:39:
+static unsigned nr_copy_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#744: FILE: kernel/power/snapshot.c:40:
+static unsigned nr_pb_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#754: FILE: kernel/power/snapshot.c:259:
+static void create_pbe_list(struct pbe *pblist, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#763: FILE: kernel/power/snapshot.c:302:
+static struct pbe *alloc_pagedir(unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#870: FILE: kernel/power/snapshot.c:519:
+unsigned snapshot_pages_to_save(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#875: FILE: kernel/power/snapshot.c:524:
+unsigned snapshot_image_pages(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#880: FILE: kernel/power/snapshot.c:529:
+static unsigned current_page = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#880: FILE: kernel/power/snapshot.c:529:
+static unsigned current_page = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#894: FILE: kernel/power/snapshot.c:543:
+	unsigned n;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#897: FILE: kernel/power/snapshot.c:546:
+	for (n = 0; n < PAGE_SIZE/sizeof(long) && p; n++) {
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#920: FILE: kernel/power/snapshot.c:569:
+int snapshot_recv_init(unsigned nr_pages, unsigned img_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#920: FILE: kernel/power/snapshot.c:569:
+int snapshot_recv_init(unsigned nr_pages, unsigned img_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#942: FILE: kernel/power/snapshot.c:591:
+	unsigned n;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#945: FILE: kernel/power/snapshot.c:594:
+	for (n = 0; n < PAGE_SIZE/sizeof(long) && p; n++) {
 	                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#962: FILE: kernel/power/snapshot.c:611:
+				printk(KERN_ERR "\nswsusp: Not enough memory for relocating PBEs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#970: FILE: kernel/power/snapshot.c:619:
+			printk(KERN_ERR "\nswsusp: Not enough memory for the image\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140292.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 42 warnings, 17 checks, 920 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140292.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
