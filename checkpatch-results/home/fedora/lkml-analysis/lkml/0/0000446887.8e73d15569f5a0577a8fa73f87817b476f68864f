WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#90: FILE: drivers/net/irda/vlsi_ir.c:47:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: drivers/net/irda/vlsi_ir.c:94:
+static int ringsize[] = {8,8};		/* default is tx=8 / rx=8 */
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#190: FILE: drivers/net/irda/vlsi_ir.c:122:
+static void vlsi_reg_debug(unsigned iobase, const char *s)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#199: FILE: drivers/net/irda/vlsi_ir.c:126:
+	printk(KERN_DEBUG "%s: ", s);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#201: FILE: drivers/net/irda/vlsi_ir.c:128:
+		printk("%02x", (unsigned)inb((iobase+i)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#201: FILE: drivers/net/irda/vlsi_ir.c:128:
+		printk("%02x", (unsigned)inb((iobase+i)));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: drivers/net/irda/vlsi_ir.c:128:
+		printk("%02x", (unsigned)inb((iobase+i)));
 		                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#202: FILE: drivers/net/irda/vlsi_ir.c:129:
+	printk("\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: drivers/net/irda/vlsi_ir.c:135:
+	unsigned i;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#232: FILE: drivers/net/irda/vlsi_ir.c:137:
+	printk(KERN_DEBUG "%s - ring %p / size %u / mask 0x%04x / len %u / dir %d / hw %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: drivers/net/irda/vlsi_ir.c:138:
+	printk(KERN_DEBUG "%s - ring %p / size %u / mask 0x%04x / len %u / dir %d / hw %p\n",
+		__FUNCTION__, r, r->size, r->mask, r->len, r->dir, r->rd[0].hw);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#233: FILE: drivers/net/irda/vlsi_ir.c:138:
+		__FUNCTION__, r, r->size, r->mask, r->len, r->dir, r->rd[0].hw);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#234: FILE: drivers/net/irda/vlsi_ir.c:139:
+	printk(KERN_DEBUG "%s - head = %d / tail = %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#234: FILE: drivers/net/irda/vlsi_ir.c:139:
+	printk(KERN_DEBUG "%s - head = %d / tail = %d\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: drivers/net/irda/vlsi_ir.c:140:
+	printk(KERN_DEBUG "%s - head = %d / tail = %d\n", __FUNCTION__,
+		atomic_read(&r->head) & r->mask, atomic_read(&r->tail) & r->mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#238: FILE: drivers/net/irda/vlsi_ir.c:143:
+		printk(KERN_DEBUG "%s - ring descr %u: ", __FUNCTION__, i);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#238: FILE: drivers/net/irda/vlsi_ir.c:143:
+		printk(KERN_DEBUG "%s - ring descr %u: ", __FUNCTION__, i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: drivers/net/irda/vlsi_ir.c:144:
+		printk("skb=%p data=%p hw=%p\n", rd->skb, rd->buf, rd->hw);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#240: FILE: drivers/net/irda/vlsi_ir.c:145:
+		printk(KERN_DEBUG "%s - hw: status=%02x count=%u addr=0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: drivers/net/irda/vlsi_ir.c:146:
+		printk(KERN_DEBUG "%s - hw: status=%02x count=%u addr=0x%08x\n",
+			__FUNCTION__, (unsigned) rd_get_status(rd),

CHECK:SPACING: No space is necessary after a cast
#241: FILE: drivers/net/irda/vlsi_ir.c:146:
+			__FUNCTION__, (unsigned) rd_get_status(rd),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#241: FILE: drivers/net/irda/vlsi_ir.c:146:
+			__FUNCTION__, (unsigned) rd_get_status(rd),

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#241: FILE: drivers/net/irda/vlsi_ir.c:146:
+			__FUNCTION__, (unsigned) rd_get_status(rd),

CHECK:SPACING: No space is necessary after a cast
#242: FILE: drivers/net/irda/vlsi_ir.c:147:
+			(unsigned) rd_get_count(rd), (unsigned) rd_get_addr(rd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: drivers/net/irda/vlsi_ir.c:147:
+			(unsigned) rd_get_count(rd), (unsigned) rd_get_addr(rd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: drivers/net/irda/vlsi_ir.c:147:
+			(unsigned) rd_get_count(rd), (unsigned) rd_get_addr(rd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#262: FILE: drivers/net/irda/vlsi_ir.c:157:
+	unsigned iobase = pci_resource_start(pdev, 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#263: FILE: drivers/net/irda/vlsi_ir.c:158:
+	unsigned i;

CHECK:SPACING: No space is necessary after a cast
#277: FILE: drivers/net/irda/vlsi_ir.c:166:
+	out += sprintf(out, "pci-power-state: %u\n", (unsigned) pdev->current_state);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: drivers/net/irda/vlsi_ir.c:166:
+	out += sprintf(out, "pci-power-state: %u\n", (unsigned) pdev->current_state);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#278: FILE: drivers/net/irda/vlsi_ir.c:167:
+	out += sprintf(out, "resources: irq=%u / io=0x%04x / dma_mask=0x%016Lx\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: drivers/net/irda/vlsi_ir.c:168:
+			pdev->irq, (unsigned)pci_resource_start(pdev, 0), (u64)pdev->dma_mask);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#282: FILE: drivers/net/irda/vlsi_ir.c:171:
+		out += sprintf(out, "%02x", (unsigned)inb((iobase+i)));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: drivers/net/irda/vlsi_ir.c:171:
+		out += sprintf(out, "%02x", (unsigned)inb((iobase+i)));
 		                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: drivers/net/irda/vlsi_ir.c:175:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#299: FILE: drivers/net/irda/vlsi_ir.c:182:
+	unsigned delta1, delta2;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: drivers/net/irda/vlsi_ir.c:184:
+	unsigned iobase = ndev->base_addr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: drivers/net/irda/vlsi_ir.c:190:
+^I^Inetif_device_present(ndev) ? "attached" : "detached", $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#322: FILE: drivers/net/irda/vlsi_ir.c:200:
+		(byte&IRMISC_IRRAIL) ? " irrail" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#323: FILE: drivers/net/irda/vlsi_ir.c:201:
+		(byte&IRMISC_IRPD) ? " irpd" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#324: FILE: drivers/net/irda/vlsi_ir.c:202:
+		(byte&IRMISC_UARTTST) ? " uarttest" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#325: FILE: drivers/net/irda/vlsi_ir.c:203:
+		(byte&IRMISC_UARTEN) ? "" : " disabled\n");
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#326: FILE: drivers/net/irda/vlsi_ir.c:204:
+	if (byte&IRMISC_UARTEN) {
 	        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#328: FILE: drivers/net/irda/vlsi_ir.c:206:
+			(byte&2) ? ((byte&1) ? "3e8" : "2e8")
 			     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#328: FILE: drivers/net/irda/vlsi_ir.c:206:
+			(byte&2) ? ((byte&1) ? "3e8" : "2e8")
 			                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#329: FILE: drivers/net/irda/vlsi_ir.c:207:
+				 : ((byte&1) ? "3f8" : "2f8"));
 				         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#333: FILE: drivers/net/irda/vlsi_ir.c:211:
+		(byte&CLKCTL_PD_INV) ? "powered" : "down",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#334: FILE: drivers/net/irda/vlsi_ir.c:212:
+		(byte&CLKCTL_LOCK) ? " locked" : "",
 		     ^

WARNING:LONG_LINE_STRING: line length of 101 exceeds 100 columns
#335: FILE: drivers/net/irda/vlsi_ir.c:213:
+		(byte&CLKCTL_EXTCLK) ? ((byte&CLKCTL_XCKSEL)?" / 40 MHz XCLK":" / 48 MHz XCLK") : "",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#335: FILE: drivers/net/irda/vlsi_ir.c:213:
+		(byte&CLKCTL_EXTCLK) ? ((byte&CLKCTL_XCKSEL)?" / 40 MHz XCLK":" / 48 MHz XCLK") : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#335: FILE: drivers/net/irda/vlsi_ir.c:213:
+		(byte&CLKCTL_EXTCLK) ? ((byte&CLKCTL_XCKSEL)?" / 40 MHz XCLK":" / 48 MHz XCLK") : "",
 		                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#335: FILE: drivers/net/irda/vlsi_ir.c:213:
+		(byte&CLKCTL_EXTCLK) ? ((byte&CLKCTL_XCKSEL)?" / 40 MHz XCLK":" / 48 MHz XCLK") : "",
 		                                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#335: FILE: drivers/net/irda/vlsi_ir.c:213:
+		(byte&CLKCTL_EXTCLK) ? ((byte&CLKCTL_XCKSEL)?" / 40 MHz XCLK":" / 48 MHz XCLK") : "",
 		                                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#336: FILE: drivers/net/irda/vlsi_ir.c:214:
+		(byte&CLKCTL_CLKSTP) ? "stopped" : "running",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#337: FILE: drivers/net/irda/vlsi_ir.c:215:
+		(byte&CLKCTL_WAKE) ? "enabled" : "disabled");
 		     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#339: FILE: drivers/net/irda/vlsi_ir.c:217:
+	out += sprintf(out, "MSTRPAGE: 0x%02x\n", (unsigned)byte);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#341: FILE: drivers/net/irda/vlsi_ir.c:219:
+	byte = inb(iobase+VLSI_PIO_IRINTR);
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#343: FILE: drivers/net/irda/vlsi_ir.c:221:
+		(byte&IRINTR_ACTEN) ? " ACTEN" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#344: FILE: drivers/net/irda/vlsi_ir.c:222:
+		(byte&IRINTR_RPKTEN) ? " RPKTEN" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#345: FILE: drivers/net/irda/vlsi_ir.c:223:
+		(byte&IRINTR_TPKTEN) ? " TPKTEN" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#346: FILE: drivers/net/irda/vlsi_ir.c:224:
+		(byte&IRINTR_OE_EN) ? " OE_EN" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#347: FILE: drivers/net/irda/vlsi_ir.c:225:
+		(byte&IRINTR_ACTIVITY) ? " ACTIVITY" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#348: FILE: drivers/net/irda/vlsi_ir.c:226:
+		(byte&IRINTR_RPKTINT) ? " RPKTINT" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#349: FILE: drivers/net/irda/vlsi_ir.c:227:
+		(byte&IRINTR_TPKTINT) ? " TPKTINT" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#350: FILE: drivers/net/irda/vlsi_ir.c:228:
+		(byte&IRINTR_OE_INT) ? " OE_INT" : "");
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#351: FILE: drivers/net/irda/vlsi_ir.c:229:
+	word = inw(iobase+VLSI_PIO_RINGPTR);
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#353: FILE: drivers/net/irda/vlsi_ir.c:231:
+	word = inw(iobase+VLSI_PIO_RINGBASE);
 	                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#355: FILE: drivers/net/irda/vlsi_ir.c:233:
+		((unsigned)word << 10)|(MSTRPAGE_VALUE<<24));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#355: FILE: drivers/net/irda/vlsi_ir.c:233:
+		((unsigned)word << 10)|(MSTRPAGE_VALUE<<24));
 		                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#355: FILE: drivers/net/irda/vlsi_ir.c:233:
+		((unsigned)word << 10)|(MSTRPAGE_VALUE<<24));
 		                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#356: FILE: drivers/net/irda/vlsi_ir.c:234:
+	word = inw(iobase+VLSI_PIO_RINGSIZE);
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#360: FILE: drivers/net/irda/vlsi_ir.c:238:
+	word = inw(iobase+VLSI_PIO_IRCFG);
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#362: FILE: drivers/net/irda/vlsi_ir.c:240:
+		(word&IRCFG_LOOP) ? " LOOP" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#363: FILE: drivers/net/irda/vlsi_ir.c:241:
+		(word&IRCFG_ENTX) ? " ENTX" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#364: FILE: drivers/net/irda/vlsi_ir.c:242:
+		(word&IRCFG_ENRX) ? " ENRX" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#365: FILE: drivers/net/irda/vlsi_ir.c:243:
+		(word&IRCFG_MSTR) ? " MSTR" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#366: FILE: drivers/net/irda/vlsi_ir.c:244:
+		(word&IRCFG_RXANY) ? " RXANY" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#367: FILE: drivers/net/irda/vlsi_ir.c:245:
+		(word&IRCFG_CRC16) ? " CRC16" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#368: FILE: drivers/net/irda/vlsi_ir.c:246:
+		(word&IRCFG_FIR) ? " FIR" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#369: FILE: drivers/net/irda/vlsi_ir.c:247:
+		(word&IRCFG_MIR) ? " MIR" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#370: FILE: drivers/net/irda/vlsi_ir.c:248:
+		(word&IRCFG_SIR) ? " SIR" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#371: FILE: drivers/net/irda/vlsi_ir.c:249:
+		(word&IRCFG_SIRFILT) ? " SIRFILT" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#372: FILE: drivers/net/irda/vlsi_ir.c:250:
+		(word&IRCFG_SIRTEST) ? " SIRTEST" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#373: FILE: drivers/net/irda/vlsi_ir.c:251:
+		(word&IRCFG_TXPOL) ? " TXPOL" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#374: FILE: drivers/net/irda/vlsi_ir.c:252:
+		(word&IRCFG_RXPOL) ? " RXPOL" : "");
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#375: FILE: drivers/net/irda/vlsi_ir.c:253:
+	word = inw(iobase+VLSI_PIO_IRENABLE);
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#377: FILE: drivers/net/irda/vlsi_ir.c:255:
+		(word&IRENABLE_IREN) ? " IRENABLE" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#378: FILE: drivers/net/irda/vlsi_ir.c:256:
+		(word&IRENABLE_CFGER) ? " CFGERR" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#379: FILE: drivers/net/irda/vlsi_ir.c:257:
+		(word&IRENABLE_FIR_ON) ? " FIR_ON" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#380: FILE: drivers/net/irda/vlsi_ir.c:258:
+		(word&IRENABLE_MIR_ON) ? " MIR_ON" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#381: FILE: drivers/net/irda/vlsi_ir.c:259:
+		(word&IRENABLE_SIR_ON) ? " SIR_ON" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#382: FILE: drivers/net/irda/vlsi_ir.c:260:
+		(word&IRENABLE_ENTXST) ? " ENTXST" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#383: FILE: drivers/net/irda/vlsi_ir.c:261:
+		(word&IRENABLE_ENRXST) ? " ENRXST" : "",
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#384: FILE: drivers/net/irda/vlsi_ir.c:262:
+		(word&IRENABLE_CRC16_ON) ? " CRC16_ON" : "");
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: drivers/net/irda/vlsi_ir.c:263:
+	word = inw(iobase+VLSI_PIO_PHYCTL);
 	                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#387: FILE: drivers/net/irda/vlsi_ir.c:265:
+		(unsigned)PHYCTL_TO_BAUD(word),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: drivers/net/irda/vlsi_ir.c:266:
+		(unsigned)PHYCTL_TO_PLSWID(word),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: drivers/net/irda/vlsi_ir.c:267:
+		(unsigned)PHYCTL_TO_PREAMB(word));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: drivers/net/irda/vlsi_ir.c:268:
+	word = inw(iobase+VLSI_PIO_NPHYCTL);
 	                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#392: FILE: drivers/net/irda/vlsi_ir.c:270:
+		(unsigned)PHYCTL_TO_BAUD(word),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#393: FILE: drivers/net/irda/vlsi_ir.c:271:
+		(unsigned)PHYCTL_TO_PLSWID(word),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#394: FILE: drivers/net/irda/vlsi_ir.c:272:
+		(unsigned)PHYCTL_TO_PREAMB(word));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#395: FILE: drivers/net/irda/vlsi_ir.c:273:
+	word = inw(iobase+VLSI_PIO_MAXPKT);
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#397: FILE: drivers/net/irda/vlsi_ir.c:275:
+	word = inw(iobase+VLSI_PIO_RCVBCNT) & RCVBCNT_MASK;
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: drivers/net/irda/vlsi_ir.c:279:
+^Iout += sprintf(out, "IrPHY setup: %d baud - %s encoding\n", idev->baud, $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#402: FILE: drivers/net/irda/vlsi_ir.c:280:
+		(idev->mode==IFF_SIR)?"SIR":((idev->mode==IFF_MIR)?"MIR":"FIR"));
 		           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#402: FILE: drivers/net/irda/vlsi_ir.c:280:
+		(idev->mode==IFF_SIR)?"SIR":((idev->mode==IFF_MIR)?"MIR":"FIR"));
 		                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#402: FILE: drivers/net/irda/vlsi_ir.c:280:
+		(idev->mode==IFF_SIR)?"SIR":((idev->mode==IFF_MIR)?"MIR":"FIR"));
 		                           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#402: FILE: drivers/net/irda/vlsi_ir.c:280:
+		(idev->mode==IFF_SIR)?"SIR":((idev->mode==IFF_MIR)?"MIR":"FIR"));
 		                                        ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#402: FILE: drivers/net/irda/vlsi_ir.c:280:
+		(idev->mode==IFF_SIR)?"SIR":((idev->mode==IFF_MIR)?"MIR":"FIR"));
 		                                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#402: FILE: drivers/net/irda/vlsi_ir.c:280:
+		(idev->mode==IFF_SIR)?"SIR":((idev->mode==IFF_MIR)?"MIR":"FIR"));
 		                                                        ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#408: FILE: drivers/net/irda/vlsi_ir.c:286:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#408: FILE: drivers/net/irda/vlsi_ir.c:286:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: drivers/net/irda/vlsi_ir.c:291:
+^I^Inow.tv_sec - idev->last_rx.tv_sec - delta1, delta2);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: drivers/net/irda/vlsi_ir.c:305:
+^I^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#431: FILE: drivers/net/irda/vlsi_ir.c:309:
+	unsigned i, j;

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: drivers/net/irda/vlsi_ir.c:321:
+	if (h == t)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#447: FILE: drivers/net/irda/vlsi_ir.c:323:
+	else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#448: FILE: drivers/net/irda/vlsi_ir.c:324:
+		if (((t+1)&r->mask) == h)
 		       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#448: FILE: drivers/net/irda/vlsi_ir.c:324:
+		if (((t+1)&r->mask) == h)
 		          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: drivers/net/irda/vlsi_ir.c:327:
+^I^I^Iout += sprintf(out, "(level = %d)\n", ((unsigned)(t-h) & r->mask)); $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#451: FILE: drivers/net/irda/vlsi_ir.c:327:
+			out += sprintf(out, "(level = %d)\n", ((unsigned)(t-h) & r->mask)); 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#451: FILE: drivers/net/irda/vlsi_ir.c:327:
+			out += sprintf(out, "(level = %d)\n", ((unsigned)(t-h) & r->mask)); 
 			                                                   ^

CHECK:SPACING: No space is necessary after a cast
#453: FILE: drivers/net/irda/vlsi_ir.c:329:
+		j = (unsigned) rd_get_count(rd);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#453: FILE: drivers/net/irda/vlsi_ir.c:329:
+		j = (unsigned) rd_get_count(rd);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#455: FILE: drivers/net/irda/vlsi_ir.c:331:
+				h, (unsigned)rd_get_status(rd), j);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#461: FILE: drivers/net/irda/vlsi_ir.c:337:
+				out += sprintf(out, " %02x", (unsigned)((unsigned char *)rd->buf)[i]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#461: FILE: drivers/net/irda/vlsi_ir.c:337:
+				out += sprintf(out, " %02x", (unsigned)((unsigned char *)rd->buf)[i]);

CHECK:SPACING: No space is necessary after a cast
#470: FILE: drivers/net/irda/vlsi_ir.c:346:
+			(unsigned) rd_get_status(rd),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#470: FILE: drivers/net/irda/vlsi_ir.c:346:
+			(unsigned) rd_get_status(rd),

CHECK:SPACING: No space is necessary after a cast
#471: FILE: drivers/net/irda/vlsi_ir.c:347:
+			(unsigned) rd_get_count(rd), (unsigned) rd_get_addr(rd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#471: FILE: drivers/net/irda/vlsi_ir.c:347:
+			(unsigned) rd_get_count(rd), (unsigned) rd_get_addr(rd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#471: FILE: drivers/net/irda/vlsi_ir.c:347:
+			(unsigned) rd_get_count(rd), (unsigned) rd_get_addr(rd));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#485: FILE: drivers/net/irda/vlsi_ir.c:359:
+		printk(KERN_ERR "%s: invalid ptr!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#485: FILE: drivers/net/irda/vlsi_ir.c:359:
+		printk(KERN_ERR "%s: invalid ptr!\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: drivers/net/irda/vlsi_ir.c:369:
+^Iout += sprintf(out, "clksrc: %s\n", $

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#499: FILE: drivers/net/irda/vlsi_ir.c:370:
+		(clksrc>=2) ? ((clksrc==3)?"40MHz XCLK":"48MHz XCLK")
 		       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#499: FILE: drivers/net/irda/vlsi_ir.c:370:
+		(clksrc>=2) ? ((clksrc==3)?"40MHz XCLK":"48MHz XCLK")
 		                      ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#499: FILE: drivers/net/irda/vlsi_ir.c:370:
+		(clksrc>=2) ? ((clksrc==3)?"40MHz XCLK":"48MHz XCLK")
 		                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#499: FILE: drivers/net/irda/vlsi_ir.c:370:
+		(clksrc>=2) ? ((clksrc==3)?"40MHz XCLK":"48MHz XCLK")
 		                                       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#500: FILE: drivers/net/irda/vlsi_ir.c:371:
+			    : ((clksrc==1)?"48MHz PLL":"autodetect"));
 			              ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#500: FILE: drivers/net/irda/vlsi_ir.c:371:
+			    : ((clksrc==1)?"48MHz PLL":"autodetect"));
 			                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#500: FILE: drivers/net/irda/vlsi_ir.c:371:
+			    : ((clksrc==1)?"48MHz PLL":"autodetect"));
 			                              ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#503: FILE: drivers/net/irda/vlsi_ir.c:374:
+	out += sprintf(out, "sirpulse: %s\n", (sirpulse)?"3/16 bittime":"short");
 	                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#503: FILE: drivers/net/irda/vlsi_ir.c:374:
+	out += sprintf(out, "sirpulse: %s\n", (sirpulse)?"3/16 bittime":"short");
 	                                                               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#504: FILE: drivers/net/irda/vlsi_ir.c:375:
+	out += sprintf(out, "qos_mtt_bits: 0x%02x\n", (unsigned)qos_mtt_bits);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "idev->pdev"
#510: FILE: drivers/net/irda/vlsi_ir.c:378:
+	if (idev->pdev != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#511: FILE: drivers/net/irda/vlsi_ir.c:379:
+		out += vlsi_proc_pdev(idev->pdev, out, len - (out-buf));
 		                                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#513: FILE: drivers/net/irda/vlsi_ir.c:381:
+			out += vlsi_proc_ndev(ndev, out, len - (out-buf));
 			                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#519: FILE: drivers/net/irda/vlsi_ir.c:387:
+			out += vlsi_proc_ring(idev->rx_ring, out, len - (out-buf));
 			                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#521: FILE: drivers/net/irda/vlsi_ir.c:389:
+			out += vlsi_proc_ring(idev->tx_ring, out, len - (out-buf));
 			                                                    ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#537: FILE: drivers/net/irda/vlsi_ir.c:398:
+static struct proc_dir_entry *vlsi_proc_root = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/net/irda/vlsi_ir.c:462:
+static ssize_t vlsi_proc_read(struct file *file, char *buf, size_t nbytes,
+			loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#722: FILE: drivers/net/irda/vlsi_ir.c:497:
+static struct file_operations vlsi_proc_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#723: FILE: drivers/net/irda/vlsi_ir.c:498:
+	open:		vlsi_proc_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#724: FILE: drivers/net/irda/vlsi_ir.c:499:
+	llseek:		vlsi_proc_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#724: FILE: drivers/net/irda/vlsi_ir.c:499:
+	llseek:		vlsi_proc_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#725: FILE: drivers/net/irda/vlsi_ir.c:500:
+	read:		vlsi_proc_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#725: FILE: drivers/net/irda/vlsi_ir.c:500:
+	read:		vlsi_proc_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#726: FILE: drivers/net/irda/vlsi_ir.c:501:
+	release:	vlsi_proc_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#726: FILE: drivers/net/irda/vlsi_ir.c:501:
+	release:	vlsi_proc_release,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: drivers/net/irda/vlsi_ir.c:508:
+static struct vlsi_ring *vlsi_alloc_ring(struct pci_dev *pdev, struct ring_descr_hw *hwmap,
+						unsigned size, unsigned len, int dir)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#733: FILE: drivers/net/irda/vlsi_ir.c:508:
+						unsigned size, unsigned len, int dir)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#733: FILE: drivers/net/irda/vlsi_ir.c:508:
+						unsigned size, unsigned len, int dir)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#746: FILE: drivers/net/irda/vlsi_ir.c:515:
+	if (!size  ||  ((size-1)&size)!=0)	/* must be >0 and power of 2 */
 	                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#746: FILE: drivers/net/irda/vlsi_ir.c:515:
+	if (!size  ||  ((size-1)&size)!=0)	/* must be >0 and power of 2 */
 	                        ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#746: FILE: drivers/net/irda/vlsi_ir.c:515:
+	if (!size  ||  ((size-1)&size)!=0)	/* must be >0 and power of 2 */
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#757: FILE: drivers/net/irda/vlsi_ir.c:526:
+	r->rd = (struct ring_descr *)(r+1);
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#767: FILE: drivers/net/irda/vlsi_ir.c:536:
+		rd->buf = kmalloc(len, GFP_KERNEL|GFP_DMA);
 		                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rd->buf"
#768: FILE: drivers/net/irda/vlsi_ir.c:537:
+		if (rd->buf == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#786: FILE: drivers/net/irda/vlsi_ir.c:552:
+			printk(KERN_ERR "%s: failed to create PCI-MAP for %p",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: drivers/net/irda/vlsi_ir.c:553:
+			printk(KERN_ERR "%s: failed to create PCI-MAP for %p",
+				__FUNCTION__, rd->buf);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#787: FILE: drivers/net/irda/vlsi_ir.c:553:
+				__FUNCTION__, rd->buf);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: drivers/net/irda/vlsi_ir.c:554:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#824: FILE: drivers/net/irda/vlsi_ir.c:579:
+		if (rd->buf)
+			kfree(rd->buf);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#835: FILE: drivers/net/irda/vlsi_ir.c:587:
+^Ichar ^I^I^I*ringarea;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev->rx_ring"
#860: FILE: drivers/net/irda/vlsi_ir.c:604:
+	if (idev->rx_ring == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev->tx_ring"
#866: FILE: drivers/net/irda/vlsi_ir.c:610:
+	if (idev->tx_ring == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#891: FILE: drivers/net/irda/vlsi_ir.c:619:
+	idev->rx_ring = idev->tx_ring = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#902: FILE: drivers/net/irda/vlsi_ir.c:630:
+	idev->rx_ring = idev->tx_ring = NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: drivers/net/irda/vlsi_ir.c:633:
+		pci_free_consistent(idev->pdev,HW_RING_AREA_SIZE,idev->virtaddr,idev->busaddr);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: drivers/net/irda/vlsi_ir.c:633:
+		pci_free_consistent(idev->pdev,HW_RING_AREA_SIZE,idev->virtaddr,idev->busaddr);
 		                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: drivers/net/irda/vlsi_ir.c:633:
+		pci_free_consistent(idev->pdev,HW_RING_AREA_SIZE,idev->virtaddr,idev->busaddr);
 		                                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: drivers/net/irda/vlsi_ir.c:656:
+^I^Iif (status & RD_RX_OVER)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: drivers/net/irda/vlsi_ir.c:658:
+^I^Iif (status & RD_RX_LENGTH)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#945: FILE: drivers/net/irda/vlsi_ir.c:660:
+^I^Iif (status & RD_RX_PHYERR)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: drivers/net/irda/vlsi_ir.c:662:
+^I^Iif (status & RD_RX_CRCERR)  $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#950: FILE: drivers/net/irda/vlsi_ir.c:665:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#950: FILE: drivers/net/irda/vlsi_ir.c:665:
+	else {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#952: FILE: drivers/net/irda/vlsi_ir.c:667:
+		crclen = (idev->mode==IFF_FIR) ? sizeof(u32) : sizeof(u16);
 		                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#955: FILE: drivers/net/irda/vlsi_ir.c:670:
+			printk(KERN_ERR "%s: strange frame (len=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: drivers/net/irda/vlsi_ir.c:671:
+			printk(KERN_ERR "%s: strange frame (len=%d)\n",
+				__FUNCTION__, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#956: FILE: drivers/net/irda/vlsi_ir.c:671:
+				__FUNCTION__, len);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#959: FILE: drivers/net/irda/vlsi_ir.c:674:
+		}
+		else if (!rd->skb) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#960: FILE: drivers/net/irda/vlsi_ir.c:675:
+			printk(KERN_ERR "%s: rx packet dropped\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#960: FILE: drivers/net/irda/vlsi_ir.c:675:
+			printk(KERN_ERR "%s: rx packet dropped\n", __FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#963: FILE: drivers/net/irda/vlsi_ir.c:678:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#963: FILE: drivers/net/irda/vlsi_ir.c:678:
+		else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#967: FILE: drivers/net/irda/vlsi_ir.c:682:
+			memcpy(skb_put(skb,len), rd->buf, len);
 			                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rd"
#993: FILE: drivers/net/irda/vlsi_ir.c:702:
+	for (rd = ring_last(r); rd != NULL; rd = ring_put(r)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#995: FILE: drivers/net/irda/vlsi_ir.c:704:
+			BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1000: FILE: drivers/net/irda/vlsi_ir.c:709:
+			if (rd->skb) {
[...]
+			else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1001: FILE: drivers/net/irda/vlsi_ir.c:710:
+				skb_reserve(rd->skb,1);
 				                   ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1004: FILE: drivers/net/irda/vlsi_ir.c:713:
+			}
+			else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rd"
#1023: FILE: drivers/net/irda/vlsi_ir.c:729:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1024: FILE: drivers/net/irda/vlsi_ir.c:730:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1033: FILE: drivers/net/irda/vlsi_ir.c:739:
+^I^I^Iif (ret & VLSI_RX_DROP)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1035: FILE: drivers/net/irda/vlsi_ir.c:741:
+^I^I^Iif (ret & VLSI_RX_OVER)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: drivers/net/irda/vlsi_ir.c:743:
+^I^I^Iif (ret & VLSI_RX_LENGTH)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: drivers/net/irda/vlsi_ir.c:745:
+^I^I^Iif (ret & VLSI_RX_FRAME)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: drivers/net/irda/vlsi_ir.c:747:
+^I^I^Iif (ret & VLSI_RX_CRC)  $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1044: FILE: drivers/net/irda/vlsi_ir.c:750:
+		}
+		else if (ret > 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1054: FILE: drivers/net/irda/vlsi_ir.c:760:
+	if (ring_first(r) == NULL) {
[...]
+	else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring_first"
#1054: FILE: drivers/net/irda/vlsi_ir.c:760:
+	if (ring_first(r) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1056: FILE: drivers/net/irda/vlsi_ir.c:762:
+		printk(KERN_ERR "%s: rx ring exhausted!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1056: FILE: drivers/net/irda/vlsi_ir.c:762:
+		printk(KERN_ERR "%s: rx ring exhausted!\n", __FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1059: FILE: drivers/net/irda/vlsi_ir.c:765:
+	}
+	else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1060: FILE: drivers/net/irda/vlsi_ir.c:766:
+		outw(0, ndev->base_addr+VLSI_PIO_PROMPT);
 		                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rd"
#1071: FILE: drivers/net/irda/vlsi_ir.c:777:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1072: FILE: drivers/net/irda/vlsi_ir.c:778:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1074: FILE: drivers/net/irda/vlsi_ir.c:780:
+		if (rd_is_active(rd)) {
[...]
+		else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1077: FILE: drivers/net/irda/vlsi_ir.c:783:
+				printk(KERN_INFO "%s - dropping rx packet\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1077: FILE: drivers/net/irda/vlsi_ir.c:783:
+				printk(KERN_INFO "%s - dropping rx packet\n", __FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1087: FILE: drivers/net/irda/vlsi_ir.c:793:
+		}
+		else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1093: FILE: drivers/net/irda/vlsi_ir.c:799:
+^I^I^Iif (ret & VLSI_RX_DROP)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1095: FILE: drivers/net/irda/vlsi_ir.c:801:
+^I^I^Iif (ret & VLSI_RX_OVER)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1097: FILE: drivers/net/irda/vlsi_ir.c:803:
+^I^I^Iif (ret & VLSI_RX_LENGTH)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: drivers/net/irda/vlsi_ir.c:805:
+^I^I^Iif (ret & VLSI_RX_FRAME)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1101: FILE: drivers/net/irda/vlsi_ir.c:807:
+^I^I^Iif (ret & VLSI_RX_CRC)  $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1104: FILE: drivers/net/irda/vlsi_ir.c:810:
+		}
+		else if (ret > 0) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1133: FILE: drivers/net/irda/vlsi_ir.c:839:
+	}
+	else	/* tx-skb already freed? - should never happen */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: drivers/net/irda/vlsi_ir.c:853:
+^Iunsigned iobase; $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1147: FILE: drivers/net/irda/vlsi_ir.c:853:
+	unsigned iobase; 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1149: FILE: drivers/net/irda/vlsi_ir.c:855:
+	unsigned mode;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1150: FILE: drivers/net/irda/vlsi_ir.c:856:
+	unsigned idle_retry;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1157: FILE: drivers/net/irda/vlsi_ir.c:863:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1158: FILE: drivers/net/irda/vlsi_ir.c:864:
+	printk(KERN_DEBUG "%s: %d -> %d\n", __FUNCTION__, idev->baud, idev->new_baud);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1158: FILE: drivers/net/irda/vlsi_ir.c:864:
+	printk(KERN_DEBUG "%s: %d -> %d\n", __FUNCTION__, idev->baud, idev->new_baud);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1165: FILE: drivers/net/irda/vlsi_ir.c:871:
+	}
+	else if (baudrate == 1152000) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1186: FILE: drivers/net/irda/vlsi_ir.c:901:
+	for (idle_retry=0; idle_retry < 100; idle_retry++) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1187: FILE: drivers/net/irda/vlsi_ir.c:902:
+		fifocnt = inw(ndev->base_addr+VLSI_PIO_RCVBCNT) & RCVBCNT_MASK;
 		                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1191: FILE: drivers/net/irda/vlsi_ir.c:906:
+			printk(KERN_WARNING "%s: waiting for rx fifo to become empty(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: drivers/net/irda/vlsi_ir.c:907:
+			printk(KERN_WARNING "%s: waiting for rx fifo to become empty(%d)\n",
+				__FUNCTION__, fifocnt);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1192: FILE: drivers/net/irda/vlsi_ir.c:907:
+				__FUNCTION__, fifocnt);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1193: FILE: drivers/net/irda/vlsi_ir.c:908:
+		if (dolock) {
[...]
+		else
[...]

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1195: FILE: drivers/net/irda/vlsi_ir.c:910:
+			udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1198: FILE: drivers/net/irda/vlsi_ir.c:913:
+		}
+		else

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1199: FILE: drivers/net/irda/vlsi_ir.c:914:
+			udelay(100);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1202: FILE: drivers/net/irda/vlsi_ir.c:917:
+		printk(KERN_ERR "%s: rx fifo not empty(%d)\n", __FUNCTION__, fifocnt);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1202: FILE: drivers/net/irda/vlsi_ir.c:917:
+		printk(KERN_ERR "%s: rx fifo not empty(%d)\n", __FUNCTION__, fifocnt);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1204: FILE: drivers/net/irda/vlsi_ir.c:919:
+	outw(0, iobase+VLSI_PIO_IRENABLE);
 	              ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1205: FILE: drivers/net/irda/vlsi_ir.c:920:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1214: FILE: drivers/net/irda/vlsi_ir.c:929:
+	mb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1272: FILE: drivers/net/irda/vlsi_ir.c:987:
+	unsigned iobase = ndev->base_addr;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1281: FILE: drivers/net/irda/vlsi_ir.c:995:
+	if (speed != -1  &&  speed != idev->baud) {
[...]
+		}
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1309: FILE: drivers/net/irda/vlsi_ir.c:1020:
+			if (ring_first(idev->tx_ring) == NULL) {
[...]
+			else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring_first"
#1309: FILE: drivers/net/irda/vlsi_ir.c:1020:
+			if (ring_first(idev->tx_ring) == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1314: FILE: drivers/net/irda/vlsi_ir.c:1025:
+			}
+			else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1324: FILE: drivers/net/irda/vlsi_ir.c:1035:
+	}
+	else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1329: FILE: drivers/net/irda/vlsi_ir.c:1039:
+		printk(KERN_ERR "%s: dropping len=0 packet\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1329: FILE: drivers/net/irda/vlsi_ir.c:1039:
+		printk(KERN_ERR "%s: dropping len=0 packet\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1341: FILE: drivers/net/irda/vlsi_ir.c:1049:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1347: FILE: drivers/net/irda/vlsi_ir.c:1054:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1354: FILE: drivers/net/irda/vlsi_ir.c:1059:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1362: FILE: drivers/net/irda/vlsi_ir.c:1064:
+		BUG();

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1392: FILE: drivers/net/irda/vlsi_ir.c:1086:
+		if (len >= r->len-5)
+			 printk(KERN_WARNING "%s: possible buffer overflow with SIR wrapping!\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1392: FILE: drivers/net/irda/vlsi_ir.c:1086:
+		if (len >= r->len-5)
 		                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1393: FILE: drivers/net/irda/vlsi_ir.c:1087:
+			 printk(KERN_WARNING "%s: possible buffer overflow with SIR wrapping!\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1394: FILE: drivers/net/irda/vlsi_ir.c:1088:
+^I^I^I ^I__FUNCTION__);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1394: FILE: drivers/net/irda/vlsi_ir.c:1088:
+^I^I^I ^I__FUNCTION__);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: drivers/net/irda/vlsi_ir.c:1088:
+			 printk(KERN_WARNING "%s: possible buffer overflow with SIR wrapping!\n",
+			 	__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1394: FILE: drivers/net/irda/vlsi_ir.c:1088:
+			 	__FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1396: FILE: drivers/net/irda/vlsi_ir.c:1090:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1396: FILE: drivers/net/irda/vlsi_ir.c:1090:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1400: FILE: drivers/net/irda/vlsi_ir.c:1094:
+		if (len > r->len) {
[...]
+		else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1401: FILE: drivers/net/irda/vlsi_ir.c:1095:
+			printk(KERN_ERR "%s: no space - skb too big (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: drivers/net/irda/vlsi_ir.c:1096:
+			printk(KERN_ERR "%s: no space - skb too big (%d)\n",
+				__FUNCTION__, skb->len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1402: FILE: drivers/net/irda/vlsi_ir.c:1096:
+				__FUNCTION__, skb->len);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1405: FILE: drivers/net/irda/vlsi_ir.c:1099:
+		}
+		else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1417: FILE: drivers/net/irda/vlsi_ir.c:1105:
+	if ((mtt = irda_get_mtt(skb)) > 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1418: FILE: drivers/net/irda/vlsi_ir.c:1106:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1418: FILE: drivers/net/irda/vlsi_ir.c:1106:
+	if ((mtt = irda_get_mtt(skb)) > 0) {
+	

ERROR:SPACING: space required before the open parenthesis '('
#1425: FILE: drivers/net/irda/vlsi_ir.c:1113:
+		for(;;) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1428: FILE: drivers/net/irda/vlsi_ir.c:1116:
+			if (now.tv_sec > ready.tv_sec
+			    ||  (now.tv_sec==ready.tv_sec && now.tv_usec>=ready.tv_usec))

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1428: FILE: drivers/net/irda/vlsi_ir.c:1116:
+			    ||  (now.tv_sec==ready.tv_sec && now.tv_usec>=ready.tv_usec))
 			                   ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1428: FILE: drivers/net/irda/vlsi_ir.c:1116:
+			    ||  (now.tv_sec==ready.tv_sec && now.tv_usec>=ready.tv_usec))
 			                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1429: FILE: drivers/net/irda/vlsi_ir.c:1117:
+^I^I^I    ^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1429: FILE: drivers/net/irda/vlsi_ir.c:1117:
+^I^I^I    ^Ibreak;$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1430: FILE: drivers/net/irda/vlsi_ir.c:1118:
+			udelay(100);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1459: FILE: drivers/net/irda/vlsi_ir.c:1135:
+/*
+ *	We need to disable IR output in order to switch to TX mode.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1472: FILE: drivers/net/irda/vlsi_ir.c:1148:
+	spin_lock_irqsave(&idev->lock,flags);
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1486: FILE: drivers/net/irda/vlsi_ir.c:1152:
+	if (!(inw(iobase+VLSI_PIO_IRENABLE) & IRENABLE_ENTXST)) {
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1509: FILE: drivers/net/irda/vlsi_ir.c:1155:
+		fifocnt = inw(ndev->base_addr+VLSI_PIO_RCVBCNT) & RCVBCNT_MASK;
 		                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1511: FILE: drivers/net/irda/vlsi_ir.c:1157:
+			printk(KERN_WARNING "%s: rx fifo not empty(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: drivers/net/irda/vlsi_ir.c:1158:
+			printk(KERN_WARNING "%s: rx fifo not empty(%d)\n",
+				__FUNCTION__, fifocnt);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1512: FILE: drivers/net/irda/vlsi_ir.c:1158:
+				__FUNCTION__, fifocnt);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1538: FILE: drivers/net/irda/vlsi_ir.c:1160:
+		config = inw(iobase+VLSI_PIO_IRCFG);
 		                   ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1539: FILE: drivers/net/irda/vlsi_ir.c:1161:
+		rmb();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1540: FILE: drivers/net/irda/vlsi_ir.c:1162:
+		outw(config | IRCFG_ENTX, iobase+VLSI_PIO_IRCFG);
 		                                ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1541: FILE: drivers/net/irda/vlsi_ir.c:1163:
+		mb();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1542: FILE: drivers/net/irda/vlsi_ir.c:1164:
+		outw(0, iobase+VLSI_PIO_PROMPT);
 		              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring_put"
#1552: FILE: drivers/net/irda/vlsi_ir.c:1168:
+	if (ring_put(r) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1554: FILE: drivers/net/irda/vlsi_ir.c:1170:
+		printk(KERN_DEBUG "%s: tx ring full - queue stopped\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1554: FILE: drivers/net/irda/vlsi_ir.c:1170:
+		printk(KERN_DEBUG "%s: tx ring full - queue stopped\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rd"
#1584: FILE: drivers/net/irda/vlsi_ir.c:1192:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {

ERROR:SPACING: space required before the open brace '{'
#1603: FILE: drivers/net/irda/vlsi_ir.c:1207:
+		else if (ret > 0){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1603: FILE: drivers/net/irda/vlsi_ir.c:1207:
 		}
+		else if (ret > 0){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rd"
#1621: FILE: drivers/net/irda/vlsi_ir.c:1213:
+	if (idev->new_baud  &&  rd == NULL)	/* tx ring empty and speed change pending */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1626: FILE: drivers/net/irda/vlsi_ir.c:1217:
+	config = inw(iobase+VLSI_PIO_IRCFG);
 	                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rd"
#1631: FILE: drivers/net/irda/vlsi_ir.c:1219:
+	if (rd == NULL)			/* tx ring empty: re-enable rx */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1636: FILE: drivers/net/irda/vlsi_ir.c:1222:
+	else if (!(inw(iobase+VLSI_PIO_IRENABLE) & IRENABLE_ENTXST)) {
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1639: FILE: drivers/net/irda/vlsi_ir.c:1225:
+		fifocnt = inw(iobase+VLSI_PIO_RCVBCNT) & RCVBCNT_MASK;
 		                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1641: FILE: drivers/net/irda/vlsi_ir.c:1227:
+			printk(KERN_WARNING "%s: rx fifo not empty(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1642: FILE: drivers/net/irda/vlsi_ir.c:1228:
+			printk(KERN_WARNING "%s: rx fifo not empty(%d)\n",
+				__FUNCTION__, fifocnt);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1642: FILE: drivers/net/irda/vlsi_ir.c:1228:
+				__FUNCTION__, fifocnt);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1643: FILE: drivers/net/irda/vlsi_ir.c:1229:
+		outw(config | IRCFG_ENTX, iobase+VLSI_PIO_IRCFG);
 		                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rd"
#1672: FILE: drivers/net/irda/vlsi_ir.c:1248:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1673: FILE: drivers/net/irda/vlsi_ir.c:1249:
+	for (rd = ring_first(r); rd != NULL; rd = ring_get(r)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1675: FILE: drivers/net/irda/vlsi_ir.c:1251:
+		if (rd_is_active(rd)) {
[...]
+		else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1683: FILE: drivers/net/irda/vlsi_ir.c:1259:
+			printk(KERN_INFO "%s - dropping tx packet\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1683: FILE: drivers/net/irda/vlsi_ir.c:1259:
+			printk(KERN_INFO "%s - dropping tx packet\n", __FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1686: FILE: drivers/net/irda/vlsi_ir.c:1262:
+		}
+		else

ERROR:SPACING: space required before the open brace '{'
#1697: FILE: drivers/net/irda/vlsi_ir.c:1273:
+		else if (ret > 0){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1697: FILE: drivers/net/irda/vlsi_ir.c:1273:
+		}
+		else if (ret > 0){

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1742: FILE: drivers/net/irda/vlsi_ir.c:1296:
+		udelay(500);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1746: FILE: drivers/net/irda/vlsi_ir.c:1300:
+			if (lock&CLKCTL_LOCK) {
 			        ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1750: FILE: drivers/net/irda/vlsi_ir.c:1304:
+			udelay(50);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1752: FILE: drivers/net/irda/vlsi_ir.c:1306:
+		if (count < 3) {
[...]
+				__FUNCTION__, clksrc);
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1754: FILE: drivers/net/irda/vlsi_ir.c:1308:
+				printk(KERN_ERR "%s: no PLL or failed to lock!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1755: FILE: drivers/net/irda/vlsi_ir.c:1309:
+				printk(KERN_ERR "%s: no PLL or failed to lock!\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1755: FILE: drivers/net/irda/vlsi_ir.c:1309:
+					__FUNCTION__);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1760: FILE: drivers/net/irda/vlsi_ir.c:1314:
+			}
+			else			/* was: clksrc=0(auto) */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1765: FILE: drivers/net/irda/vlsi_ir.c:1317:
+			printk(KERN_INFO "%s: PLL not locked, fallback to clksrc=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1766: FILE: drivers/net/irda/vlsi_ir.c:1318:
+			printk(KERN_INFO "%s: PLL not locked, fallback to clksrc=%d\n",
+				__FUNCTION__, clksrc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1766: FILE: drivers/net/irda/vlsi_ir.c:1318:
+				__FUNCTION__, clksrc);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1768: FILE: drivers/net/irda/vlsi_ir.c:1320:
+		}
+		else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1774: FILE: drivers/net/irda/vlsi_ir.c:1324:
+	if (clksrc != 1) {
[...]
-			break;
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1776: FILE: drivers/net/irda/vlsi_ir.c:1326:
+		/* we get here if either no PLL detected in auto-mode or
+		   an external clock source was explicitly specified */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1776: FILE: drivers/net/irda/vlsi_ir.c:1326:
+		   an external clock source was explicitly specified */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1781: FILE: drivers/net/irda/vlsi_ir.c:1330:
+^I^I^Iclkctl |= CLKCTL_XCKSEL;^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1788: FILE: drivers/net/irda/vlsi_ir.c:1335:
+	}
+	else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1861: FILE: drivers/net/irda/vlsi_ir.c:1384:
+	unsigned	iobase;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1945: FILE: drivers/net/irda/vlsi_ir.c:1398:
+	outb(IRINTR_INT_MASK, iobase+VLSI_PIO_IRINTR); /* w/c pending IRQ, disable all INT */
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1949: FILE: drivers/net/irda/vlsi_ir.c:1400:
+	outw(0, iobase+VLSI_PIO_IRENABLE);	/* disable IrPHY-interface */
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1955: FILE: drivers/net/irda/vlsi_ir.c:1404:
+	outw(0, iobase+VLSI_PIO_IRCFG);
 	              ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1956: FILE: drivers/net/irda/vlsi_ir.c:1405:
+	wmb();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1959: FILE: drivers/net/irda/vlsi_ir.c:1407:
+	outw(MAX_PACKET_LENGTH, iobase+VLSI_PIO_MAXPKT);  /* max possible value=0x0fff */
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1962: FILE: drivers/net/irda/vlsi_ir.c:1409:
+	outw(BUS_TO_RINGBASE(idev->busaddr), iobase+VLSI_PIO_RINGBASE);
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1967: FILE: drivers/net/irda/vlsi_ir.c:1412:
+^I^Iiobase+VLSI_PIO_RINGSIZE);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1967: FILE: drivers/net/irda/vlsi_ir.c:1412:
+	outw(TX_RX_TO_RINGSIZE(idev->tx_ring->size, idev->rx_ring->size),
+		iobase+VLSI_PIO_RINGSIZE);	

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1967: FILE: drivers/net/irda/vlsi_ir.c:1412:
+		iobase+VLSI_PIO_RINGSIZE);	
 		      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1971: FILE: drivers/net/irda/vlsi_ir.c:1414:
+	ptr = inw(iobase+VLSI_PIO_RINGPTR);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1984: FILE: drivers/net/irda/vlsi_ir.c:1422:
+	outb(IRINTR_INT_MASK, iobase+VLSI_PIO_IRINTR);	/* just in case - w/c pending IRQ's */
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1994: FILE: drivers/net/irda/vlsi_ir.c:1430:
+	outb(IRINTR_RPKTEN|IRINTR_TPKTEN, iobase+VLSI_PIO_IRINTR);
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1994: FILE: drivers/net/irda/vlsi_ir.c:1430:
+	outb(IRINTR_RPKTEN|IRINTR_TPKTEN, iobase+VLSI_PIO_IRINTR);
 	                                        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2021: FILE: drivers/net/irda/vlsi_ir.c:1439:
+	unsigned iobase = ndev->base_addr;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2071: FILE: drivers/net/irda/vlsi_ir.c:1459:
+	outw(0, iobase+VLSI_PIO_PROMPT);	/* kick hw state machine */
 	              ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2089: FILE: drivers/net/irda/vlsi_ir.c:1468:
+	unsigned iobase = ndev->base_addr;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2092: FILE: drivers/net/irda/vlsi_ir.c:1471:
+	spin_lock_irqsave(&idev->lock,flags);
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2093: FILE: drivers/net/irda/vlsi_ir.c:1472:
+	outw(0, iobase+VLSI_PIO_IRENABLE);
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2094: FILE: drivers/net/irda/vlsi_ir.c:1473:
+	outw(0, iobase+VLSI_PIO_IRCFG);			/* disable everything */
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2098: FILE: drivers/net/irda/vlsi_ir.c:1476:
+	outb(IRINTR_INT_MASK, iobase+VLSI_PIO_IRINTR);	/* w/c pending + disable further IRQ */
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2100: FILE: drivers/net/irda/vlsi_ir.c:1478:
+	spin_unlock_irqrestore(&idev->lock,flags);
 	                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2150: FILE: drivers/net/irda/vlsi_ir.c:1493:
+static struct net_device_stats * vlsi_get_stats(struct net_device *ndev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2173: FILE: drivers/net/irda/vlsi_ir.c:1504:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2174: FILE: drivers/net/irda/vlsi_ir.c:1505:
+	vlsi_reg_debug(ndev->base_addr, __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2204: FILE: drivers/net/irda/vlsi_ir.c:1519:
+		printk(KERN_CRIT "%s: failed to restart hw - %s(%s) unusable!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2205: FILE: drivers/net/irda/vlsi_ir.c:1520:
+		printk(KERN_CRIT "%s: failed to restart hw - %s(%s) unusable!\n",
+			__FUNCTION__, idev->pdev->name, ndev->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2205: FILE: drivers/net/irda/vlsi_ir.c:1520:
+			__FUNCTION__, idev->pdev->name, ndev->name);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2258: FILE: drivers/net/irda/vlsi_ir.c:1578:
+	unsigned	iobase;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2260: FILE: drivers/net/irda/vlsi_ir.c:1580:
+^Iint ^I^Iboguscount = 32;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2261: FILE: drivers/net/irda/vlsi_ir.c:1581:
+	unsigned	got_act;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2267: FILE: drivers/net/irda/vlsi_ir.c:1587:
+		spin_lock_irqsave(&idev->lock,flags);
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2268: FILE: drivers/net/irda/vlsi_ir.c:1588:
+		irintr = inb(iobase+VLSI_PIO_IRINTR);
 		                   ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#2269: FILE: drivers/net/irda/vlsi_ir.c:1589:
+		rmb();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2270: FILE: drivers/net/irda/vlsi_ir.c:1590:
+		outb(irintr, iobase+VLSI_PIO_IRINTR); /* acknowledge asap */
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2271: FILE: drivers/net/irda/vlsi_ir.c:1591:
+		spin_unlock_irqrestore(&idev->lock,flags);
 		                                  ^

ERROR:SPACING: spaces required around that '&=' (ctx:VxV)
#2273: FILE: drivers/net/irda/vlsi_ir.c:1593:
+		if (!(irintr&=IRINTR_INT_MASK))		/* not our INT - probably shared */
 		            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2273: FILE: drivers/net/irda/vlsi_ir.c:1593:
+		if (!(irintr&=IRINTR_INT_MASK))		/* not our INT - probably shared */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2276: FILE: drivers/net/irda/vlsi_ir.c:1596:
+		if (irintr&IRINTR_RPKTINT)
 		          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2279: FILE: drivers/net/irda/vlsi_ir.c:1599:
+		if (irintr&IRINTR_TPKTINT)
 		          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2284: FILE: drivers/net/irda/vlsi_ir.c:1604:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2285: FILE: drivers/net/irda/vlsi_ir.c:1605:
+		if (irintr & ~(IRINTR_RPKTINT|IRINTR_TPKTINT|IRINTR_ACTIVITY)) {
 		                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2285: FILE: drivers/net/irda/vlsi_ir.c:1605:
+		if (irintr & ~(IRINTR_RPKTINT|IRINTR_TPKTINT|IRINTR_ACTIVITY)) {
 		                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2286: FILE: drivers/net/irda/vlsi_ir.c:1606:
+			printk(KERN_DEBUG "%s: IRINTR = %02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: drivers/net/irda/vlsi_ir.c:1607:
+			printk(KERN_DEBUG "%s: IRINTR = %02x\n",
+				__FUNCTION__, (unsigned)irintr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2287: FILE: drivers/net/irda/vlsi_ir.c:1607:
+				__FUNCTION__, (unsigned)irintr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2287: FILE: drivers/net/irda/vlsi_ir.c:1607:
+				__FUNCTION__, (unsigned)irintr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: drivers/net/irda/vlsi_ir.c:1608:
+			vlsi_reg_debug(iobase,__FUNCTION__);
 			                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2288: FILE: drivers/net/irda/vlsi_ir.c:1608:
+			vlsi_reg_debug(iobase,__FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2289: FILE: drivers/net/irda/vlsi_ir.c:1609:
+^I^I}^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2293: FILE: drivers/net/irda/vlsi_ir.c:1613:
+		printk(KERN_WARNING "%s: too much work in interrupt!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2293: FILE: drivers/net/irda/vlsi_ir.c:1613:
+		printk(KERN_WARNING "%s: too much work in interrupt!\n", __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2295: FILE: drivers/net/irda/vlsi_ir.c:1615:
 
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2307: FILE: drivers/net/irda/vlsi_ir.c:1626:
+		printk(KERN_ERR "%s: io resource busy\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2307: FILE: drivers/net/irda/vlsi_ir.c:1626:
+		printk(KERN_ERR "%s: io resource busy\n", __FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2310: FILE: drivers/net/irda/vlsi_ir.c:1629:
+	ndev->base_addr = pci_resource_start(idev->pdev,0);
 	                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2317: FILE: drivers/net/irda/vlsi_ir.c:1636:
+	outb(IRINTR_INT_MASK, ndev->base_addr+VLSI_PIO_IRINTR);
 	                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2321: FILE: drivers/net/irda/vlsi_ir.c:1640:
+		printk(KERN_ERR "%s: couldn't get IRQ: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2322: FILE: drivers/net/irda/vlsi_ir.c:1641:
+		printk(KERN_ERR "%s: couldn't get IRQ: %d\n",
+			__FUNCTION__, ndev->irq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2322: FILE: drivers/net/irda/vlsi_ir.c:1641:
+			__FUNCTION__, ndev->irq);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2326: FILE: drivers/net/irda/vlsi_ir.c:1645:
+	if ((err = vlsi_create_hwif(idev)) != 0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2329: FILE: drivers/net/irda/vlsi_ir.c:1648:
+	sprintf(hwname, "VLSI-FIR @ 0x%04x", (unsigned)ndev->base_addr);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2330: FILE: drivers/net/irda/vlsi_ir.c:1649:
+	idev->irlap = irlap_open(ndev,&idev->qos,hwname);
 	                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2330: FILE: drivers/net/irda/vlsi_ir.c:1649:
+	idev->irlap = irlap_open(ndev,&idev->qos,hwname);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2330: FILE: drivers/net/irda/vlsi_ir.c:1649:
+	idev->irlap = irlap_open(ndev,&idev->qos,hwname);
 	                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2338: FILE: drivers/net/irda/vlsi_ir.c:1657:
+	if ((err = vlsi_start_hw(idev)) != 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2343: FILE: drivers/net/irda/vlsi_ir.c:1662:
+	printk(KERN_INFO "%s: device %s operational\n", __FUNCTION__, ndev->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2343: FILE: drivers/net/irda/vlsi_ir.c:1662:
+	printk(KERN_INFO "%s: device %s operational\n", __FUNCTION__, ndev->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2352: FILE: drivers/net/irda/vlsi_ir.c:1671:
+	free_irq(ndev->irq,ndev);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2375: FILE: drivers/net/irda/vlsi_ir.c:1692:
+	free_irq(ndev->irq,ndev);
 	                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2379: FILE: drivers/net/irda/vlsi_ir.c:1696:
+	printk(KERN_INFO "%s: device %s stopped\n", __FUNCTION__, ndev->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2379: FILE: drivers/net/irda/vlsi_ir.c:1696:
+	printk(KERN_INFO "%s: device %s stopped\n", __FUNCTION__, ndev->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2400: FILE: drivers/net/irda/vlsi_ir.c:1715:
+	if (pci_set_dma_mask(pdev,DMA_MASK_USED_BY_HW)
 	                         ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2401: FILE: drivers/net/irda/vlsi_ir.c:1716:
+	if (pci_set_dma_mask(pdev,DMA_MASK_USED_BY_HW)
+	    || pci_set_dma_mask(pdev,DMA_MASK_MSTRPAGE)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2401: FILE: drivers/net/irda/vlsi_ir.c:1716:
+	    || pci_set_dma_mask(pdev,DMA_MASK_MSTRPAGE)) {
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2424: FILE: drivers/net/irda/vlsi_ir.c:1747:
+	ndev->watchdog_timeo  = 500*HZ/1000;	/* max. allowed turn time for IrLAP */
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2424: FILE: drivers/net/irda/vlsi_ir.c:1747:
+	ndev->watchdog_timeo  = 500*HZ/1000;	/* max. allowed turn time for IrLAP */
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2455: FILE: drivers/net/irda/vlsi_ir.c:1806:
+		ent = create_proc_entry(ndev->name, S_IFREG|S_IRUGO, vlsi_proc_root);
 		                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2455: FILE: drivers/net/irda/vlsi_ir.c:1806:
+		ent = create_proc_entry(ndev->name, S_IFREG|S_IRUGO, vlsi_proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2457: FILE: drivers/net/irda/vlsi_ir.c:1808:
+			printk(KERN_ERR "%s: failed to create proc entry\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2457: FILE: drivers/net/irda/vlsi_ir.c:1808:
+			printk(KERN_ERR "%s: failed to create proc entry\n", __FUNCTION__);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2484: FILE: drivers/net/irda/vlsi_ir.c:1839:
 static void __devexit vlsi_irda_remove(struct pci_dev *pdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2524: FILE: drivers/net/irda/vlsi_ir.c:1866:
+	printk(KERN_INFO "%s: %s removed\n", drivername, pdev->name);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2538: FILE: drivers/net/irda/vlsi_ir.c:1880:
+	if (state < 1 || state > 3 ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2539: FILE: drivers/net/irda/vlsi_ir.c:1881:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2539: FILE: drivers/net/irda/vlsi_ir.c:1881:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#2539: FILE: drivers/net/irda/vlsi_ir.c:1881:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2540: FILE: drivers/net/irda/vlsi_ir.c:1882:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",
+			__FUNCTION__, pdev->name, state);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2540: FILE: drivers/net/irda/vlsi_ir.c:1882:
+			__FUNCTION__, pdev->name, state);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2552: FILE: drivers/net/irda/vlsi_ir.c:1893:
+	if (state < 1 || state > 3 ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2553: FILE: drivers/net/irda/vlsi_ir.c:1894:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2553: FILE: drivers/net/irda/vlsi_ir.c:1894:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#2553: FILE: drivers/net/irda/vlsi_ir.c:1894:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2554: FILE: drivers/net/irda/vlsi_ir.c:1895:
+		printk( KERN_ERR "%s - %s: invalid pm state request: %u\n",
+			__FUNCTION__, pdev->name, state);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2554: FILE: drivers/net/irda/vlsi_ir.c:1895:
+			__FUNCTION__, pdev->name, state);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2558: FILE: drivers/net/irda/vlsi_ir.c:1899:
+		printk(KERN_ERR "%s - %s: no netdevice \n", __FUNCTION__, pdev->name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2558: FILE: drivers/net/irda/vlsi_ir.c:1899:
+		printk(KERN_ERR "%s - %s: no netdevice \n", __FUNCTION__, pdev->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2558: FILE: drivers/net/irda/vlsi_ir.c:1899:
+		printk(KERN_ERR "%s - %s: no netdevice \n", __FUNCTION__, pdev->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2561: FILE: drivers/net/irda/vlsi_ir.c:1902:
+^Iidev = ndev->priv;^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2565: FILE: drivers/net/irda/vlsi_ir.c:1906:
+			pci_set_power_state(pdev,state);
 			                        ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2568: FILE: drivers/net/irda/vlsi_ir.c:1909:
+		}
+		else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2569: FILE: drivers/net/irda/vlsi_ir.c:1910:
+			printk(KERN_ERR "%s - %s: invalid suspend request %u -> %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2570: FILE: drivers/net/irda/vlsi_ir.c:1911:
+			printk(KERN_ERR "%s - %s: invalid suspend request %u -> %u\n",
+				__FUNCTION__, pdev->name, pdev->current_state, state);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2570: FILE: drivers/net/irda/vlsi_ir.c:1911:
+				__FUNCTION__, pdev->name, pdev->current_state, state);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2584: FILE: drivers/net/irda/vlsi_ir.c:1925:
+	pci_set_power_state(pdev,state);
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2598: FILE: drivers/net/irda/vlsi_ir.c:1938:
+		printk(KERN_ERR "%s - %s: no netdevice \n", __FUNCTION__, pdev->name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2598: FILE: drivers/net/irda/vlsi_ir.c:1938:
+		printk(KERN_ERR "%s - %s: no netdevice \n", __FUNCTION__, pdev->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2598: FILE: drivers/net/irda/vlsi_ir.c:1938:
+		printk(KERN_ERR "%s - %s: no netdevice \n", __FUNCTION__, pdev->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2601: FILE: drivers/net/irda/vlsi_ir.c:1941:
+^Iidev = ndev->priv;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2605: FILE: drivers/net/irda/vlsi_ir.c:1945:
+		printk(KERN_ERR "%s - %s: already resumed\n", __FUNCTION__, pdev->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2605: FILE: drivers/net/irda/vlsi_ir.c:1945:
+		printk(KERN_ERR "%s - %s: already resumed\n", __FUNCTION__, pdev->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2608: FILE: drivers/net/irda/vlsi_ir.c:1948:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2624: FILE: drivers/net/irda/vlsi_ir.c:1964:
+		printk(KERN_ERR "%s - hm, nothing to resume?\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2624: FILE: drivers/net/irda/vlsi_ir.c:1964:
+		printk(KERN_ERR "%s - hm, nothing to resume?\n", __FUNCTION__);

WARNING:INDENTED_LABEL: labels should not be indented
#2650: FILE: drivers/net/irda/vlsi_ir.c:1984:
+	name:		drivername,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2651: FILE: drivers/net/irda/vlsi_ir.c:1985:
+	id_table:	vlsi_irda_table,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#2651: FILE: drivers/net/irda/vlsi_ir.c:1985:
+	id_table:	vlsi_irda_table,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2652: FILE: drivers/net/irda/vlsi_ir.c:1986:
+	probe:		vlsi_irda_probe,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2652: FILE: drivers/net/irda/vlsi_ir.c:1986:
+	probe:		vlsi_irda_probe,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2653: FILE: drivers/net/irda/vlsi_ir.c:1987:
+	remove:		__devexit_p(vlsi_irda_remove),
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#2653: FILE: drivers/net/irda/vlsi_ir.c:1987:
+	remove:		__devexit_p(vlsi_irda_remove),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2655: FILE: drivers/net/irda/vlsi_ir.c:1989:
+	save_state:	vlsi_irda_save_state,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#2655: FILE: drivers/net/irda/vlsi_ir.c:1989:
+	save_state:	vlsi_irda_save_state,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2656: FILE: drivers/net/irda/vlsi_ir.c:1990:
+	suspend:	vlsi_irda_suspend,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#2656: FILE: drivers/net/irda/vlsi_ir.c:1990:
+	suspend:	vlsi_irda_suspend,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2657: FILE: drivers/net/irda/vlsi_ir.c:1991:
+	resume:		vlsi_irda_resume,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#2657: FILE: drivers/net/irda/vlsi_ir.c:1991:
+	resume:		vlsi_irda_resume,

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#2720: FILE: include/net/irda/vlsi_ir.h:30:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,4)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2720: FILE: include/net/irda/vlsi_ir.h:30:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,4)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2720: FILE: include/net/irda/vlsi_ir.h:30:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,4)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2720: FILE: include/net/irda/vlsi_ir.h:30:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,4)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2750: FILE: include/net/irda/vlsi_ir.h:82:
+						 * i.e. PLL is powered, if PD_INV set */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#2765: FILE: include/net/irda/vlsi_ir.h:94:
+						 * is detected, PD_INV gets set(?) and CLKSTP cleared */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2765: FILE: include/net/irda/vlsi_ir.h:94:
+						 * is detected, PD_INV gets set(?) and CLKSTP cleared */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2837: FILE: include/net/irda/vlsi_ir.h:422:
+#define PHYCTL_TO_BAUD(bwp)	(((bwp)&PHYCTL_BAUD_MASK)>>PHYCTL_BAUD_SHIFT)
                            	       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2837: FILE: include/net/irda/vlsi_ir.h:422:
+#define PHYCTL_TO_BAUD(bwp)	(((bwp)&PHYCTL_BAUD_MASK)>>PHYCTL_BAUD_SHIFT)
                            	                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2838: FILE: include/net/irda/vlsi_ir.h:423:
+#define PHYCTL_TO_PLSWID(bwp)	(((bwp)&PHYCTL_PLSWID_MASK)>>PHYCTL_PLSWID_SHIFT)
                              	       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2838: FILE: include/net/irda/vlsi_ir.h:423:
+#define PHYCTL_TO_PLSWID(bwp)	(((bwp)&PHYCTL_PLSWID_MASK)>>PHYCTL_PLSWID_SHIFT)
                              	                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2839: FILE: include/net/irda/vlsi_ir.h:424:
+#define PHYCTL_TO_PREAMB(bwp)	(((bwp)&PHYCTL_PREAMB_MASK)>>PHYCTL_PREAMB_SHIFT)
                              	       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2839: FILE: include/net/irda/vlsi_ir.h:424:
+#define PHYCTL_TO_PREAMB(bwp)	(((bwp)&PHYCTL_PREAMB_MASK)>>PHYCTL_PREAMB_SHIFT)
                              	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2841: FILE: include/net/irda/vlsi_ir.h:426:
+#define BWP_TO_PHYCTL(b,w,p)	((((b)<<PHYCTL_BAUD_SHIFT)&PHYCTL_BAUD_MASK) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2841: FILE: include/net/irda/vlsi_ir.h:426:
+#define BWP_TO_PHYCTL(b,w,p)	((((b)<<PHYCTL_BAUD_SHIFT)&PHYCTL_BAUD_MASK) \
                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2841: FILE: include/net/irda/vlsi_ir.h:426:
+#define BWP_TO_PHYCTL(b,w,p)	((((b)<<PHYCTL_BAUD_SHIFT)&PHYCTL_BAUD_MASK) \
                             	      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2841: FILE: include/net/irda/vlsi_ir.h:426:
+#define BWP_TO_PHYCTL(b,w,p)	((((b)<<PHYCTL_BAUD_SHIFT)&PHYCTL_BAUD_MASK) \
                             	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2842: FILE: include/net/irda/vlsi_ir.h:427:
+				 | (((w)<<PHYCTL_PLSWID_SHIFT)&PHYCTL_PLSWID_MASK) \
 				        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2842: FILE: include/net/irda/vlsi_ir.h:427:
+				 | (((w)<<PHYCTL_PLSWID_SHIFT)&PHYCTL_PLSWID_MASK) \
 				                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2843: FILE: include/net/irda/vlsi_ir.h:428:
+				 | (((p)<<PHYCTL_PREAMB_SHIFT)&PHYCTL_PREAMB_MASK))
 				        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2843: FILE: include/net/irda/vlsi_ir.h:428:
+				 | (((p)<<PHYCTL_PREAMB_SHIFT)&PHYCTL_PREAMB_MASK))
 				                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2888: FILE: include/net/irda/vlsi_ir.h:483:
+#define IRLAP_SKB_ALLOCSIZE	(1+1+IRDA_MTU)
                            	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2888: FILE: include/net/irda/vlsi_ir.h:483:
+#define IRLAP_SKB_ALLOCSIZE	(1+1+IRDA_MTU)
                            	    ^

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#2907: FILE: include/net/irda/vlsi_ir.h:502:
+ * which limits the maximum useable buffer size <= 4095.
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#2945: FILE: include/net/irda/vlsi_ir.h:542:
+ * ### FIXME: depends on endianess (but there ain't no non-i586 ob800 ;-)
                          ^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2960: FILE: include/net/irda/vlsi_ir.h:553:
+		} rd_s __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2962: FILE: include/net/irda/vlsi_ir.h:555:
+} __attribute__ ((packed));

WARNING:TYPO_SPELLING: 'overlayed' may be misspelled - perhaps 'overlaid'?
#3048: FILE: include/net/irda/vlsi_ir.h:620:
+	 *  - overlayed: writing addr overwrites status
 	      ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3053: FILE: include/net/irda/vlsi_ir.h:625:
+	if ((a & ~DMA_MASK_MSTRPAGE)>>24 != MSTRPAGE_VALUE) {
 	                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3054: FILE: include/net/irda/vlsi_ir.h:626:
+		BUG();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3062: FILE: include/net/irda/vlsi_ir.h:634:
+	wmb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3105: FILE: include/net/irda/vlsi_ir.h:677:
+	unsigned		len;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3123: FILE: include/net/irda/vlsi_ir.h:691:
+	return (((t+1) & r->mask) == (atomic_read(&r->head) & r->mask)) ? NULL : &r->rd[t];
 	           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3163: FILE: include/net/irda/vlsi_ir.h:738:
+	u32			cfg_space[64/sizeof(u32)];
 	   			            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3164: FILE: include/net/irda/vlsi_ir.h:739:
+^Iu8^I^I^Iresume_ok;^I$

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#3176: FILE: include/net/irda/vlsi_ir.h:751:
+ * of transfered bytes in case of success or the negative (-)
       ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3185: FILE: include/net/irda/vlsi_ir.h:760:
+#define VLSI_RX_LENGTH  ^I0x0400$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 115 errors, 183 warnings, 207 checks, 3097 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
