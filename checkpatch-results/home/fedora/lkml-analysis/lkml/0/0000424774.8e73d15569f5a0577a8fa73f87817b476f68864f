WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#81: 
diff -Nur --exclude-from=/usr/src/.dontdiff linux-2.5.41-vanilla/arch/i386/kernel/entry.S linux-2.5.41-memory_binding_api/arch/i386/kernel/entry.S

ERROR:SPACING: space required before the open brace '{'
#100: FILE: arch/i386/kernel/numaq.c:55:
+			if (test_and_set_bit(numnodes, &node_online_map)){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#101: FILE: arch/i386/kernel/numaq.c:56:
+				printk("smp_dump_qct: node alread counted?!?!\n");
 				                           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#101: FILE: arch/i386/kernel/numaq.c:56:
+				printk("smp_dump_qct: node alread counted?!?!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#102: FILE: arch/i386/kernel/numaq.c:57:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0UL
#115: FILE: arch/i386/kernel/smpboot.c:65:
+unsigned long memblk_online_map = 0UL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0UL
#117: FILE: arch/i386/kernel/smpboot.c:67:
+unsigned long node_online_map = 0UL;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#137: FILE: include/asm-i386/smp.h:107:
+#define memblk_online(memblk) (memblk_online_map & (1<<(memblk)))
                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: include/asm-i386/smp.h:108:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: include/asm-i386/smp.h:108:
+ $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#144: FILE: include/asm-i386/smp.h:114:
+#define node_online(node) (node_online_map & (1<<(node)))
                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: include/asm-i386/smp.h:115:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: include/asm-i386/smp.h:115:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: include/linux/membind.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#185: FILE: include/linux/membind.h:2:
+ * linux/include/linux/membind.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: include/linux/membind.h:8:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#205: FILE: include/linux/membind.h:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#206: FILE: include/linux/membind.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#217: FILE: include/linux/membind.h:34:
+typedef struct memblk_list {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#222: FILE: include/linux/membind.h:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: include/linux/membind.h:40:
+#define is_valid_memblk_behavior(x) (1) ^I/* for now */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#228: FILE: include/linux/membind.h:45:
+#define MPOL_LOOSE	1   /* Memory will be allocated according to binding, but
+				can fall back to other memory blocks if necessary. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#228: FILE: include/linux/membind.h:45:
+				can fall back to other memory blocks if necessary. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: include/linux/mmzone.h:254:
+ * for_each_valid_zone - helper macro to iterate over all memory zones $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: include/linux/mmzone.h:255:
+ * ^Iin a zonelist$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: include/linux/mmzone.h:259:
+ * for_each_valid_zone() is basically an easier to read version of this $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: include/linux/mmzone.h:263:
+ * ^Istruct zone *z = zonelist->zones[i];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: include/linux/mmzone.h:264:
+ * ^I...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: include/linux/mmzone.h:265:
+ * ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: include/linux/mmzone.h:269:
+#define for_each_valid_zone(zone, zonelist) ^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: include/linux/mmzone.h:269:
+#define for_each_valid_zone(zone, zonelist) 		\
+	for (zone = *zonelist->zones; zone; zone++)	\
+		if (current->memblk_binding.bitmask & (1 << zone->zone_pgdat->memblk_id))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#268: FILE: include/linux/mmzone.h:269:
+#define for_each_valid_zone(zone, zonelist) 		\
+	for (zone = *zonelist->zones; zone; zone++)	\
+		if (current->memblk_binding.bitmask & (1 << zone->zone_pgdat->memblk_id))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zonelist' may be better as '(zonelist)' to avoid precedence issues
#268: FILE: include/linux/mmzone.h:269:
+#define for_each_valid_zone(zone, zonelist) 		\
+	for (zone = *zonelist->zones; zone; zone++)	\
+		if (current->memblk_binding.bitmask & (1 << zone->zone_pgdat->memblk_id))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: include/linux/sched.h:341:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: include/linux/smp.h:97:
+#define cpu_possible(cpu)			({ BUG_ON((cpu) != 0); 1; })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#306: FILE: include/linux/smp.h:99:
+#define memblk_online(memblk)			({ BUG_ON((memblk) != 0); 1; })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#309: FILE: include/linux/smp.h:102:
+#define node_online(node)			({ BUG_ON((node) != 0); 1; })

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: kernel/sys.c:1312:
+asmlinkage long sys_mem_setbinding(pid_t pid, unsigned long memblks, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: kernel/sys.c:1313:
+asmlinkage long sys_mem_setbinding(pid_t pid, unsigned long memblks, 
+				    unsigned int behavior)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: kernel/sys.c:1319:
+^I * Make sure that at least one of the memblks in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: kernel/sys.c:1326:
+^I/* $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->euid'
#362: FILE: kernel/sys.c:1347:
+	if ((current->euid != p->euid) && (current->euid != p->uid) &&
+	     !capable(CAP_SYS_NICE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->uid'
#362: FILE: kernel/sys.c:1347:
+	if ((current->euid != p->euid) && (current->euid != p->uid) &&
+	     !capable(CAP_SYS_NICE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: kernel/sys.c:1348:
+	if ((current->euid != p->euid) && (current->euid != p->uid) &&
+	     !capable(CAP_SYS_NICE))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: kernel/sys.c:1366:
+asmlinkage long sys_mem_getbinding(pid_t pid, unsigned long *user_bitmask, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: kernel/sys.c:1367:
+asmlinkage long sys_mem_getbinding(pid_t pid, unsigned long *user_bitmask, 
+				    unsigned int *user_behavior)

ERROR:SPACING: space required before the open brace '{'
#453: FILE: mm/numa.c:81:
+	if (test_and_set_bit(num_online_memblks(), &memblk_online_map)){

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#454: FILE: mm/numa.c:82:
+		printk("free_area_init_core: memblk alread counted?!?!\n");
 		                                    ^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#454: FILE: mm/numa.c:82:
+		printk("free_area_init_core: memblk alread counted?!?!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: mm/numa.c:83:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: mm/page_alloc.c:330:
+^Iclasszone = zonelist->zones[0]; $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#498: FILE: mm/page_alloc.c:340:
+			if (page = rmqueue(zone, order))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#511: FILE: mm/page_alloc.c:347:
+		    waitqueue_active(&zone->zone_pgdat->kswapd_wait))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#533: FILE: mm/page_alloc.c:359:
+			if (page = rmqueue(zone, order))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#549: FILE: mm/page_alloc.c:369:
+			if (page = rmqueue(zone, order))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#569: FILE: mm/page_alloc.c:394:
+			if (page = rmqueue(zone, order))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424774.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 24 warnings, 10 checks, 433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424774.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
