ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#41: 
--- a/arch/alpha/kernel/process.c	Sun Feb 22 22:31:11 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#52: FILE: arch/alpha/kernel/process.c:191:
+EXPORT_SYMBOL(machine_panic);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#68: FILE: arch/arm/kernel/process.c:170:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#84: FILE: arch/arm26/kernel/process.c:170:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#100: FILE: arch/cris/kernel/process.c:229:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#116: FILE: arch/h8300/kernel/process.c:117:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: arch/i386/kernel/reboot.c:310:
+EXPORT_SYMBOL(machine_panic);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: arch/i386/kernel/reboot.c:312:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#144: FILE: arch/ia64/kernel/process.c:718:
+machine_panic (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#148: FILE: arch/ia64/kernel/process.c:722:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#160: FILE: arch/m68k/kernel/process.c:142:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#176: FILE: arch/m68knommu/kernel/process.c:100:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#193: FILE: arch/mips/kernel/reset.c:49:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#205: FILE: arch/parisc/kernel/process.c:168:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#221: FILE: arch/ppc/kernel/setup.c:147:
+EXPORT_SYMBOL(machine_panic);

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_panic>
#244: FILE: arch/ppc64/kernel/iSeries_setup.c:327:
+	ppc_md.panic = iSeries_panic;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#277: FILE: arch/ppc64/kernel/rtas.c:397:
+		printk(KERN_EMERG "ibm,os-term call failed %d\n", status);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#295: FILE: arch/ppc64/kernel/setup.c:323:
+EXPORT_SYMBOL(machine_panic);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#319: FILE: arch/s390/kernel/setup.c:56:
+unsigned long panic_caller = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#333: FILE: arch/s390/kernel/setup.c:320:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#348: FILE: arch/sh/kernel/process.c:92:
+EXPORT_SYMBOL(machine_panic);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#362: FILE: arch/sparc/kernel/process.c:200:
+	extern int stop_a_enabled;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#365: FILE: arch/sparc/kernel/process.c:203:
+	printk(KERN_EMERG "Press L1-A to return to the boot prom\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#368: FILE: arch/sparc/kernel/process.c:206:
+EXPORT_SYMBOL(machine_panic);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#382: FILE: arch/sparc64/kernel/process.c:163:
+	extern int stop_a_enabled;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#385: FILE: arch/sparc64/kernel/process.c:166:
+	printk(KERN_EMERG "Press L1-A to return to the boot prom\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#388: FILE: arch/sparc64/kernel/process.c:169:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#404: FILE: arch/um/kernel/reboot.c:72:
+EXPORT_SYMBOL(machine_panic);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#416: FILE: arch/v850/kernel/anna.c:157:
+void machine_panic (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#420: FILE: arch/v850/kernel/anna.c:161:
+EXPORT_SYMBOL(machine_panic);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: arch/v850/kernel/as85ep1.c:185:
+void machine_panic (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#436: FILE: arch/v850/kernel/as85ep1.c:189:
+EXPORT_SYMBOL(machine_panic);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#448: FILE: arch/v850/kernel/fpga85e2c.c:141:
+void machine_panic (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#452: FILE: arch/v850/kernel/fpga85e2c.c:145:
+EXPORT_SYMBOL(machine_panic);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#464: FILE: arch/v850/kernel/rte_cb.c:101:
+void machine_panic (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#468: FILE: arch/v850/kernel/rte_cb.c:105:
+EXPORT_SYMBOL(machine_panic);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#480: FILE: arch/v850/kernel/sim.c:125:
+void machine_panic (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#484: FILE: arch/v850/kernel/sim.c:129:
+EXPORT_SYMBOL(machine_panic);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#497: FILE: arch/v850/kernel/sim85e2.c:205:
+void machine_panic (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#501: FILE: arch/v850/kernel/sim85e2.c:209:
+EXPORT_SYMBOL(machine_panic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#514: FILE: arch/x86_64/kernel/reboot.c:193:
+EXPORT_SYMBOL(machine_panic);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: include/asm-ppc64/rtas.h:178:
+extern void rtas_os_term(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/linux/reboot.h:51:
+extern void machine_panic(void);

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: kernel/panic.c:57:
+        panic_caller = (unsigned long) __builtin_return_address(0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#557: FILE: kernel/panic.c:57:
+        panic_caller = (unsigned long) __builtin_return_address(0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: kernel/panic.c:57:
+        panic_caller = (unsigned long) __builtin_return_address(0);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000301650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 38 warnings, 5 checks, 413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000301650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
