ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#37: 
--- a/drivers/char/drm/ati_pcigart.h	Wed Sep 29 21:29:06 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: space prohibited after that open parenthesis '('
#44: FILE: drivers/char/drm/ati_pcigart.h:115:
+	if ( !dev->vdev->pci_dev ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#44: FILE: drivers/char/drm/ati_pcigart.h:115:
+	if ( !dev->vdev->pci_dev ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#51: FILE: drivers/char/drm/ati_pcigart.h:121:
+	bus_address = pci_map_single(dev->vdev->pci_dev, (void *)address,
 				  ATI_PCIGART_TABLE_PAGES * PAGE_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: drivers/char/drm/ati_pcigart.h:140:
+		entry->busaddr[i] = pci_map_single(dev->vdev->pci_dev,
 					   page_address( entry->pagelist[i] ),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: drivers/char/drm/drm_drv.h:463:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#178: FILE: drivers/char/drm/drm_drv.h:554:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#179: FILE: drivers/char/drm/drm_drv.h:555:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#183: FILE: drivers/char/drm/drm_drv.h:559:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#184: FILE: drivers/char/drm/drm_drv.h:560:
+
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: drivers/char/drm/drm_drv.h:563:
+  .type = TYPE_DRI,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: drivers/char/drm/drm_drv.h:564:
+  .name = "drm",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: drivers/char/drm/drm_drv.h:565:
+  .probe = DRM(probe),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/char/drm/drm_drv.h:566:
+  .id_table = DRM(vgaidlist),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/char/drm/drm_drv.h:567:
+  .notify_attach = DRM(vga_notify_attach),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: drivers/char/drm/drm_drv.h:568:
+  .notify_detach = DRM(vga_notify_detach)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: drivers/char/drm/drm_drv.h:571:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: drivers/char/drm/drm_drv.h:647:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#246: FILE: drivers/char/drm/drm_vgaids.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#247: FILE: drivers/char/drm/drm_vgaids.h:2:
+/*
+   This file is auto-generated from the drm_pciids.txt in the DRM CVS

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#250: FILE: drivers/char/drm/drm_vgaids.h:5:
+#define radeon_PCI_IDS \
+	{0x1002, 0x4136, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4137, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4237, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4242, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4242, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4336, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4337, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4437, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4964, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4965, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4966, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4967, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C57, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C58, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C59, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C5A, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C64, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C65, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C66, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4C67, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5144, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5145, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5146, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5147, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5148, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5149, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x514A, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x514B, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x514C, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x514D, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x514E, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x514F, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5157, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5158, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5159, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x515A, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5168, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5169, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x516A, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x516B, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x516C, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5834, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5835, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5836, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5837, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5960, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5961, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5962, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5963, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5964, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5968, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5969, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x596A, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x596B, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5c61, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5c62, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5c63, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5c64, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#311: FILE: drivers/char/drm/drm_vgaids.h:66:
+#define r128_PCI_IDS \
+	{0x1002, 0x4c45, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c46, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4d46, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4d4c, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5041, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5042, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5043, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5044, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5045, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5046, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5047, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5048, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5049, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x504A, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x504B, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x504C, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x504D, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x504E, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x504F, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5050, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5051, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5052, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5053, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5054, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5055, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5056, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5057, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5058, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5245, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5246, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5247, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x524b, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x524c, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x534d, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5446, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x544C, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x5452, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#351: FILE: drivers/char/drm/drm_vgaids.h:106:
+#define mga_PCI_IDS \
+	{0x102b, 0x0521, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x102b, 0x0525, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x102b, 0x2527, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#357: FILE: drivers/char/drm/drm_vgaids.h:112:
+#define mach64_PCI_IDS \
+	{0x1002, 0x4749, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4750, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4751, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4742, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4744, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c49, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c50, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c51, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c42, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c44, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x474c, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x474f, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4752, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4753, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x474d, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x474e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c52, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c53, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c4d, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1002, 0x4c4e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#380: FILE: drivers/char/drm/drm_vgaids.h:135:
+#define sisdrv_PCI_IDS \
+	{0x1039, 0x0300, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1039, 0x5300, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1039, 0x6300, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1039, 0x7300, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#387: FILE: drivers/char/drm/drm_vgaids.h:142:
+#define tdfx_PCI_IDS \
+	{0x121a, 0x0003, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x121a, 0x0004, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x121a, 0x0005, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x121a, 0x0007, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x121a, 0x0009, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x121a, 0x000b, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#396: FILE: drivers/char/drm/drm_vgaids.h:151:
+#define viadrv_PCI_IDS \
+	{0x1106, 0x3022, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1106, 0x3118, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1106, 0x3122, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1106, 0x7205, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x1106, 0x7204, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#404: FILE: drivers/char/drm/drm_vgaids.h:159:
+#define i810_PCI_IDS \
+	{0x8086, 0x7121, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x7123, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x7125, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x1132, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#411: FILE: drivers/char/drm/drm_vgaids.h:166:
+#define i830_PCI_IDS \
+	{0x8086, 0x3577, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x2562, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x3582, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x2572, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#418: FILE: drivers/char/drm/drm_vgaids.h:173:
+#define gamma_PCI_IDS \
+	{0x3d3d, 0x0008, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#422: FILE: drivers/char/drm/drm_vgaids.h:177:
+#define savage_PCI_IDS \
+	{0x5333, 0x8a22, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8a23, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c10, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c11, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c12, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c13, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c20, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c21, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c22, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c24, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c26, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c2a, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c2b, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c2c, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c2d, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c2e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8c2f, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8a25, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8a26, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8d01, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8d02, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x5333, 0x8d04, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#450: FILE: drivers/char/drm/drm_vgaids.h:205:
+#define i915_PCI_IDS \
+	{0x8086, 0x3577, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x2562, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x3582, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x2572, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0x8086, 0x2582, PCI_ANY_ID, PCI_ANY_ID, 0, 0, TYPE_DRI, 0}, \
+	{0, 0, 0}

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: drivers/char/drm/i810_dma.c:252:
+^I^I   ^Ipci_free_consistent(dev->vdev->pci_dev, PAGE_SIZE,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: drivers/char/drm/i810_dma.c:252:
+^I^I   ^Ipci_free_consistent(dev->vdev->pci_dev, PAGE_SIZE,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: drivers/char/drm/i810_dma.c:420:
+		pci_alloc_consistent(dev->vdev->pci_dev, PAGE_SIZE,
 						&dev_priv->dma_status_page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: drivers/char/drm/i830_dma.c:438:
+		pci_alloc_consistent(dev->vdev->pci_dev, PAGE_SIZE,
 						&dev_priv->dma_status_page);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#525: FILE: drivers/video/vga_class.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#555: FILE: drivers/video/vga_class.c:31:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#555: FILE: drivers/video/vga_class.c:31:
+	printk("%s\n", __FUNCTION__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#565: FILE: drivers/video/vga_class.c:41:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: drivers/video/vga_class.c:56:
+	struct pci_dev *pdev = vdev->pci_dev;
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#580: FILE: drivers/video/vga_class.c:56:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#580: FILE: drivers/video/vga_class.c:56:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#582: FILE: drivers/video/vga_class.c:58:
+		printk("vga: ids unit %d vdev %d\n", ids->unit, vdev->unit);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#590: FILE: drivers/video/vga_class.c:66:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#594: FILE: drivers/video/vga_class.c:70:
+	int i;
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#594: FILE: drivers/video/vga_class.c:70:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#594: FILE: drivers/video/vga_class.c:70:
+	printk("%s\n", __FUNCTION__);

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: drivers/video/vga_class.c:71:
+	for(i = TYPE_MEM; i < TYPE_LAST; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#597: FILE: drivers/video/vga_class.c:73:
+		struct vga_dev *v = vdev->shared->device[i];
+		if(v != NULL && v->driver && i != type)

ERROR:SPACING: space required before the open parenthesis '('
#597: FILE: drivers/video/vga_class.c:73:
+		if(v != NULL && v->driver && i != type)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "v"
#597: FILE: drivers/video/vga_class.c:73:
+		if(v != NULL && v->driver && i != type)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#605: FILE: drivers/video/vga_class.c:81:
+	int i;
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#605: FILE: drivers/video/vga_class.c:81:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#605: FILE: drivers/video/vga_class.c:81:
+	printk("%s\n", __FUNCTION__);

ERROR:SPACING: space required before the open parenthesis '('
#606: FILE: drivers/video/vga_class.c:82:
+	for(i = TYPE_MEM; i < TYPE_LAST; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: drivers/video/vga_class.c:84:
+		struct vga_dev *v = vdev->shared->device[i];
+		if(v != NULL && v->driver && i != type)

ERROR:SPACING: space required before the open parenthesis '('
#608: FILE: drivers/video/vga_class.c:84:
+		if(v != NULL && v->driver && i != type)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "v"
#608: FILE: drivers/video/vga_class.c:84:
+		if(v != NULL && v->driver && i != type)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#624: FILE: drivers/video/vga_class.c:100:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#624: FILE: drivers/video/vga_class.c:100:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#652: FILE: drivers/video/vga_class.c:128:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#652: FILE: drivers/video/vga_class.c:128:
+	printk("%s\n", __FUNCTION__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#653: FILE: drivers/video/vga_class.c:129:
+	if (!vdev->driver && vdrv->probe) {
+		error = vga_device_probe_static(vdrv, vdev);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#665: FILE: drivers/video/vga_class.c:141:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#665: FILE: drivers/video/vga_class.c:141:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#681: FILE: drivers/video/vga_class.c:157:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#681: FILE: drivers/video/vga_class.c:157:
+	printk("%s\n", __FUNCTION__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: drivers/video/vga_class.c:178:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#738: FILE: drivers/video/vga_class.c:214:
+	printk("VGA Register driver called returning %d\n", count);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#755: FILE: drivers/video/vga_class.c:231:
+{
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#756: FILE: drivers/video/vga_class.c:232:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#756: FILE: drivers/video/vga_class.c:232:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#776: FILE: drivers/video/vga_class.c:252:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#776: FILE: drivers/video/vga_class.c:252:
+	printk("%s\n", __FUNCTION__);

ERROR:SPACING: space required before the open parenthesis '('
#777: FILE: drivers/video/vga_class.c:253:
+	if(v == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v"
#777: FILE: drivers/video/vga_class.c:253:
+	if(v == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#792: FILE: drivers/video/vga_class.c:268:
+static int vga_bus_match(struct device *dev, struct device_driver * drv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#796: FILE: drivers/video/vga_class.c:272:
+	const struct vga_device_id * ids = vdrv->id_table;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#798: FILE: drivers/video/vga_class.c:274:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#798: FILE: drivers/video/vga_class.c:274:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#820: FILE: drivers/video/vga_class.c:296:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#820: FILE: drivers/video/vga_class.c:296:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#840: FILE: drivers/video/vga_class.c:316:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#840: FILE: drivers/video/vga_class.c:316:
+	printk("%s\n", __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#846: FILE: drivers/video/vga_class.c:322:
+int vga_hotplug (struct device *dev, char **envp, int num_envp,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#849: FILE: drivers/video/vga_class.c:325:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#849: FILE: drivers/video/vga_class.c:325:
+	printk("%s\n", __FUNCTION__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#861: FILE: drivers/video/vga_class.c:337:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#873: FILE: drivers/video/vga_class.c:349:
+	if(st == 0 || size == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#874: FILE: drivers/video/vga_class.c:350:
+^I   ^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#874: FILE: drivers/video/vga_class.c:350:
+^I   ^Ireturn 0;$

ERROR:SPACING: space required before the open parenthesis '('
#875: FILE: drivers/video/vga_class.c:351:
+	if(st + size < mmio)

ERROR:SPACING: space required before the open parenthesis '('
#877: FILE: drivers/video/vga_class.c:353:
+	if(st > mmio)

ERROR:SPACING: space required before the open parenthesis '('
#879: FILE: drivers/video/vga_class.c:355:
+	if(flags & IORESOURCE_IO)

WARNING:LINE_SPACING: Missing a blank line after declarations
#887: FILE: drivers/video/vga_class.c:363:
+	struct list_head *l;
+	list_for_each(l, &vga_devices) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: drivers/video/vga_class.c:366:
+		int i;
+		for (i = 0; i < 6; i++) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: drivers/video/vga_class.c:375:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#911: FILE: drivers/video/vga_class.c:387:
+	if(v->lock_owner != vdrv || v->lock_context != context)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#911: FILE: drivers/video/vga_class.c:387:
+	if(v->lock_owner != vdrv || v->lock_context != context)

ERROR:SPACING: space required before the open parenthesis '('
#913: FILE: drivers/video/vga_class.c:389:
+		if(v->lock_release)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#921: FILE: drivers/video/vga_class.c:397:
+EXPORT_SYMBOL_GPL(vga_take_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#930: FILE: drivers/video/vga_class.c:406:
+	struct vga_shared *v = vdev->shared;
+	v->lock_release = lock_release;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#935: FILE: drivers/video/vga_class.c:411:
+EXPORT_SYMBOL_GPL(vga_drop_lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#941: FILE: drivers/video/vga_class.c:417:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#954: FILE: drivers/video/vga_class.c:430:
+	/* We want this very late because the remove methods might want to
+	   use the locks */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#954: FILE: drivers/video/vga_class.c:430:
+	   use the locks */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#956: FILE: drivers/video/vga_class.c:432:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#956: FILE: drivers/video/vga_class.c:432:
+	printk("%s\n", __FUNCTION__);

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#961: FILE: drivers/video/vga_class.c:437:
+	vdev->shared->count --;
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#963: FILE: drivers/video/vga_class.c:439:
+	if(vdev->shared->count == 0)

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#972: FILE: drivers/video/vga_class.c:448:
+ *	A VGA adapter has been removed. We must propogate this into the
   	                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#980: FILE: drivers/video/vga_class.c:456:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#980: FILE: drivers/video/vga_class.c:456:
+	printk("%s\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: drivers/video/vga_class.c:474:
+static int vga_found_one(struct pci_dev *pdev,
+					const struct pci_device_id *ent)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1002: FILE: drivers/video/vga_class.c:478:
+	int i;
+	if(vshar == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1002: FILE: drivers/video/vga_class.c:478:
+	if(vshar == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vshar"
#1002: FILE: drivers/video/vga_class.c:478:
+	if(vshar == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1005: FILE: drivers/video/vga_class.c:481:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1005: FILE: drivers/video/vga_class.c:481:
+	printk("%s\n", __FUNCTION__);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1011: FILE: drivers/video/vga_class.c:487:
+	for(i = TYPE_MEM; i <= TYPE_FB0; i++)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#1011: FILE: drivers/video/vga_class.c:487:
+	for(i = TYPE_MEM; i <= TYPE_FB0; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1014: FILE: drivers/video/vga_class.c:490:
+		struct vga_dev *vdev = kmalloc(sizeof(*vdev), GFP_KERNEL);
+		if(vdev == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1014: FILE: drivers/video/vga_class.c:490:
+		if(vdev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vdev"
#1014: FILE: drivers/video/vga_class.c:490:
+		if(vdev == NULL)

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1024: FILE: drivers/video/vga_class.c:500:
+		vshar->count ++;
 		             ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1061: FILE: drivers/video/vga_class.c:537:
+EXPORT_SYMBOL(vga_register_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1062: FILE: drivers/video/vga_class.c:538:
+EXPORT_SYMBOL(vga_unregister_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1063: FILE: drivers/video/vga_class.c:539:
+EXPORT_SYMBOL(vga_dev_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1064: FILE: drivers/video/vga_class.c:540:
+EXPORT_SYMBOL(vga_bus_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1065: FILE: drivers/video/vga_class.c:541:
+EXPORT_SYMBOL(vga_dev_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1066: FILE: drivers/video/vga_class.c:542:
+EXPORT_SYMBOL(vga_dev_put);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1070: FILE: drivers/video/vga_class.c:546:
+	if( bus_register(&vga_bus_type) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#1070: FILE: drivers/video/vga_class.c:546:
+	if( bus_register(&vga_bus_type) < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1071: FILE: drivers/video/vga_class.c:547:
+		printk(KERN_ERR "Unable to register VGA bus type.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1075: FILE: drivers/video/vga_class.c:551:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1081: FILE: include/linux/vga_class.h:1:
+#ifndef _LINUX_VGA_CLASS_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1084: FILE: include/linux/vga_class.h:4:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vga_dev *' should also have an identifier name
#1101: FILE: include/linux/vga_class.h:21:
+	void (*lock_release)(struct vga_dev *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1101: FILE: include/linux/vga_class.h:21:
+	void (*lock_release)(struct vga_dev *, void *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1124: FILE: include/linux/vga_class.h:44:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#1131: FILE: include/linux/vga_class.h:51:
+	int (*probe) (struct vga_dev *vdev, const struct vga_device_id *id);

WARNING:LONG_LINE_COMMENT: line length of 124 exceeds 100 columns
#1132: FILE: include/linux/vga_class.h:52:
+	void (*remove) (struct vga_dev *dev, int users);	/* Device removed (NULL if not a hot-plug capable driver) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#1132: FILE: include/linux/vga_class.h:52:
+	void (*remove) (struct vga_dev *dev, int users);	/* Device removed (NULL if not a hot-plug capable driver) */

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#1133: FILE: include/linux/vga_class.h:53:
+	int  (*suspend) (struct vga_dev *vdev, u32 state);	/* Device suspended */	int  (*resume) (struct vga_dev *vdev);	                /* Device woken up */

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#1133: FILE: include/linux/vga_class.h:53:
+	int  (*suspend) (struct vga_dev *vdev, u32 state);	/* Device suspended */	int  (*resume) (struct vga_dev *vdev);	                /* Device woken up */

WARNING:SPACING: Unnecessary space before function pointer arguments
#1134: FILE: include/linux/vga_class.h:54:
+	void (*notify_attach) (struct vga_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vga_dev *' should also have an identifier name
#1134: FILE: include/linux/vga_class.h:54:
+	void (*notify_attach) (struct vga_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1134: FILE: include/linux/vga_class.h:54:
+	void (*notify_attach) (struct vga_dev *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1135: FILE: include/linux/vga_class.h:55:
+	void (*notify_detach) (struct vga_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vga_dev *' should also have an identifier name
#1135: FILE: include/linux/vga_class.h:55:
+	void (*notify_detach) (struct vga_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1135: FILE: include/linux/vga_class.h:55:
+	void (*notify_detach) (struct vga_dev *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1144: FILE: include/linux/vga_class.h:64:
+extern int vga_register_driver(struct vga_driver *drv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1145: FILE: include/linux/vga_class.h:65:
+extern void vga_unregister_driver(struct vga_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1146: FILE: include/linux/vga_class.h:66:
+extern struct vga_driver *vga_dev_driver(const struct vga_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct vga_dev *' should also have an identifier name
#1146: FILE: include/linux/vga_class.h:66:
+extern struct vga_driver *vga_dev_driver(const struct vga_dev *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1146: FILE: include/linux/vga_class.h:66:
+extern struct vga_driver *vga_dev_driver(const struct vga_dev *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1148: FILE: include/linux/vga_class.h:68:
+extern struct vga_dev *vga_dev_get(struct vga_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vga_dev *' should also have an identifier name
#1148: FILE: include/linux/vga_class.h:68:
+extern struct vga_dev *vga_dev_get(struct vga_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1149: FILE: include/linux/vga_class.h:69:
+extern void vga_dev_put(struct vga_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vga_dev *' should also have an identifier name
#1149: FILE: include/linux/vga_class.h:69:
+extern void vga_dev_put(struct vga_dev *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 89 warnings, 32 checks, 1065 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
