WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: include/bc/beancounter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#60: FILE: include/bc/beancounter.h:2:
+ *  include/bc/beancounter.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'minumum' may be misspelled - perhaps 'minimum'?
#85: FILE: include/bc/beancounter.h:27:
+	unsigned long minheld;	/* minumum amount of consumed resources */
 	                      	   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#97: FILE: include/bc/beancounter.h:39:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#112: FILE: include/bc/beancounter.h:54:
+	spinlock_t		bc_lock;

CHECK:BIT_MACRO: Prefer using the BIT macro
#128: FILE: include/bc/beancounter.h:70:
+#define BC_HASH_SIZE		(1 << BC_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: include/bc/beancounter.h:79:
+static inline void bc_adjust_held_minmax(struct beancounter *bc,
+		int resource)

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#139: FILE: include/bc/beancounter.h:81:
+	struct bc_resource_parm *parm;
 	                         ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#141: FILE: include/bc/beancounter.h:83:
+	parm = &bc->bc_parms[resource];
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: include/bc/beancounter.h:91:
+int __must_check bc_charge_locked(struct beancounter *bc,
+		int res, unsigned long val, enum bc_severity strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: include/bc/beancounter.h:93:
+int __must_check bc_charge(struct beancounter *bc,
+		int res, unsigned long val, enum bc_severity strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: include/bc/beancounter.h:122:
+static inline __must_check int bc_charge_locked(struct beancounter *bc,
+		int res, unsigned long val, enum bc_severity strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: include/bc/beancounter.h:128:
+static inline __must_check int bc_charge(struct beancounter *bc,
+		int res, unsigned long val, enum bc_severity strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: include/bc/beancounter.h:134:
+static inline void bc_uncharge_locked(struct beancounter *bc, int res,
+		unsigned long val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: include/bc/beancounter.h:139:
+static inline void bc_uncharge(struct beancounter *bc, int res,
+		unsigned long val)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: include/linux/types.h:45:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: include/linux/types.h:51:
+ * $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#228: FILE: include/linux/types.h:56:
+typedef uid_t    bcid_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#237: FILE: include/linux/types.h:70:
+typedef __kernel_uid_t		bcid_t;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: kernel/bc/beancounter.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#292: FILE: kernel/bc/beancounter.c:2:
+ *  kernel/bc/beancounter.c

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#343: FILE: kernel/bc/beancounter.c:53:
+	hlist_for_each_entry (bc, pos, slot, hash)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#347: FILE: kernel/bc/beancounter.c:57:
+	if (pos != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bc"
#351: FILE: kernel/bc/beancounter.c:61:
+		if (new_bc != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bc"
#356: FILE: kernel/bc/beancounter.c:66:
+	if (new_bc != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: kernel/bc/beancounter.c:75:
+	new_bc = kmem_cache_alloc(bc_cachep,
+			mask & BC_ALLOC_ATOMIC ? GFP_ATOMIC : GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_bc"
#366: FILE: kernel/bc/beancounter.c:76:
+	if (new_bc == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: kernel/bc/beancounter.c:96:
+	if (!atomic_dec_and_lock_irqsave(&bc->bc_refcount,
+			&bc_hash_lock, flags))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: kernel/bc/beancounter.c:99:
+	BUG_ON(bc == &init_bc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: kernel/bc/beancounter.c:103:
+			printk("BC: %d has %lu of %s held on put", bc->bc_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: kernel/bc/beancounter.c:104:
+			printk("BC: %d has %lu of %s held on put", bc->bc_id,
+				bc->bc_parms[i].held, bc_rnames[i]);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#402: FILE: kernel/bc/beancounter.c:112:
+EXPORT_SYMBOL(put_beancounter);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: kernel/bc/beancounter.c:120:
+int bc_charge_locked(struct beancounter *bc, int resource, unsigned long val,
+		enum bc_severity strict)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: kernel/bc/beancounter.c:124:
+^I * at the moment is possible so an overflow is impossible.  $

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#423: FILE: kernel/bc/beancounter.c:133:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#428: FILE: kernel/bc/beancounter.c:138:
+		/* fallthrough */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: kernel/bc/beancounter.c:143:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: kernel/bc/beancounter.c:153:
+int bc_charge(struct beancounter *bc, int resource, unsigned long val,
+		enum bc_severity strict)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#448: FILE: kernel/bc/beancounter.c:158:
+	BUG_ON(val > BC_MAXVALUE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#461: FILE: kernel/bc/beancounter.c:171:
+		printk("BC: overuncharging bc %d %s: val %lu, holds %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: kernel/bc/beancounter.c:172:
+		printk("BC: overuncharging bc %d %s: val %lu, holds %lu\n",
+				bc->bc_id, bc_rnames[resource], val,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: kernel/bc/beancounter.c:249:
+	bc_cachep = kmem_cache_create("beancounters",
+			sizeof(struct beancounter),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#540: FILE: kernel/bc/beancounter.c:250:
+			0, SLAB_HWCACHE_ALIGN|SLAB_PANIC,
 			                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 25 warnings, 21 checks, 470 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
