WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: power/disk.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#58: FILE: power/disk.c:32:
+extern dev_t swsusp_resume_device;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#68: FILE: power/disk.c:229:
+		/* We want to be really sure that userspace isn't touching
+		   anything at this point... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#68: FILE: power/disk.c:229:
+		   anything at this point... */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#69: FILE: power/disk.c:230:
+		if (freeze_processes()) {
+			goto Done;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#70: FILE: power/disk.c:231:
+			goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: power/disk.c:233:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#74: FILE: power/disk.c:235:
+		/* And then make sure that we have enough memory to do the
+		   resume */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#74: FILE: power/disk.c:235:
+		   resume */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: power/disk.c:343:
+static ssize_t resume_show(struct subsystem * subsys, char * buf) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: power/disk.c:343:
+static ssize_t resume_show(struct subsystem * subsys, char * buf) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#85: FILE: power/disk.c:343:
+static ssize_t resume_show(struct subsystem * subsys, char * buf) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: power/disk.c:344:
+        return sprintf(buf,"%d:%d\n", MAJOR(swsusp_resume_device),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: power/disk.c:344:
+        return sprintf(buf,"%d:%d\n", MAJOR(swsusp_resume_device),$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: power/disk.c:344:
+        return sprintf(buf,"%d:%d\n", MAJOR(swsusp_resume_device),
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: power/disk.c:345:
+                       MINOR(swsusp_resume_device));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: power/disk.c:345:
+                       MINOR(swsusp_resume_device));$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: power/disk.c:348:
+static ssize_t resume_store(struct subsystem * s, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: power/disk.c:348:
+static ssize_t resume_store(struct subsystem * s, const char * buf, size_t n)

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: power/disk.c:350:
+        int error = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: power/disk.c:350:
+        int error = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: power/disk.c:351:
+        int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: power/disk.c:351:
+        int len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: power/disk.c:352:
+        char *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: power/disk.c:352:
+        char *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: power/disk.c:353:
+        unsigned maj, min;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: power/disk.c:353:
+        unsigned maj, min;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#95: FILE: power/disk.c:353:
+        unsigned maj, min;

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: power/disk.c:354:
+        dev_t (res);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#96: FILE: power/disk.c:354:
+        unsigned maj, min;
+        dev_t (res);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: power/disk.c:354:
+        dev_t (res);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: power/disk.c:356:
+        p = memchr(buf, '\n', n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: power/disk.c:356:
+        p = memchr(buf, '\n', n);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: power/disk.c:357:
+        len = p ? p - buf : n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: power/disk.c:357:
+        len = p ? p - buf : n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: power/disk.c:359:
+        if (sscanf(buf, "%u:%u", &maj, &min) == 2) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: power/disk.c:359:
+        if (sscanf(buf, "%u:%u", &maj, &min) == 2) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: power/disk.c:360:
+                res = MKDEV(maj, min);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: power/disk.c:360:
+                res = MKDEV(maj, min);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: power/disk.c:361:
+                if (maj == MAJOR(res) && min == MINOR(res)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: power/disk.c:361:
+                if (maj == MAJOR(res) && min == MINOR(res)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: power/disk.c:362:
+                        swsusp_resume_device = res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: power/disk.c:362:
+                        swsusp_resume_device = res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: power/disk.c:363:
+                        error = software_resume();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: power/disk.c:363:
+                        error = software_resume();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: power/disk.c:364:
+                } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: power/disk.c:364:
+                } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: power/disk.c:365:
+                        error = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: power/disk.c:365:
+                        error = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: power/disk.c:366:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: power/disk.c:366:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: power/disk.c:367:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: power/disk.c:367:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: power/disk.c:368:
+                error = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: power/disk.c:368:
+                error = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: power/disk.c:369:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: power/disk.c:369:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: power/disk.c:371:
+        return error ? error : n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: power/disk.c:371:
+        return error ? error : n;$

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#132: FILE: power/swsusp.c:84:
+dev_t swsusp_resume_device = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: power/swsusp.c:743:
+ *^IWe should only consider swsusp_resume_device. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: power/swsusp.c:1230:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 32 warnings, 1 checks, 117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
