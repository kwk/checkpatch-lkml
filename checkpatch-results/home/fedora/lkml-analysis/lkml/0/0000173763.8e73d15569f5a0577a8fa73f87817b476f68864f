WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: kernel/ckrm/rbce/rbce_bitvector.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#63: FILE: kernel/ckrm/rbce/rbce_bitvector.h:18:
+typedef struct {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#68: FILE: kernel/ckrm/rbce/rbce_bitvector.h:23:
+#define BITS_2_LONGS(sz)  (((sz)+BITS_PER_LONG-1)/BITS_PER_LONG)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#68: FILE: kernel/ckrm/rbce/rbce_bitvector.h:23:
+#define BITS_2_LONGS(sz)  (((sz)+BITS_PER_LONG-1)/BITS_PER_LONG)
                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#68: FILE: kernel/ckrm/rbce/rbce_bitvector.h:23:
+#define BITS_2_LONGS(sz)  (((sz)+BITS_PER_LONG-1)/BITS_PER_LONG)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: kernel/ckrm/rbce/rbce_bitvector.h:24:
+#define BITS_2_BYTES(sz)  (((sz)+7)/8)
                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#69: FILE: kernel/ckrm/rbce/rbce_bitvector.h:24:
+#define BITS_2_BYTES(sz)  (((sz)+7)/8)
                                    ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#71: FILE: kernel/ckrm/rbce/rbce_bitvector.h:26:
+#if 0

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: kernel/ckrm/rbce/rbce_bitvector.h:32:
+#define CHECK_VEC_VOID(vec)   do { if (!CHECK_VEC(vec)) return; } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#77: FILE: kernel/ckrm/rbce/rbce_bitvector.h:32:
+#define CHECK_VEC_VOID(vec)   do { if (!CHECK_VEC(vec)) return; } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#78: FILE: kernel/ckrm/rbce/rbce_bitvector.h:33:
+#define CHECK_VEC_RC(vec, val) \
+do { if (!CHECK_VEC(vec)) return (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#79: FILE: kernel/ckrm/rbce/rbce_bitvector.h:34:
+do { if (!CHECK_VEC(vec)) return (val); } while(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: kernel/ckrm/rbce/rbce_bitvector.h:36:
+inline static void bitvector_zero(bitvector_t * bitvec)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#81: FILE: kernel/ckrm/rbce/rbce_bitvector.h:36:
+inline static void bitvector_zero(bitvector_t * bitvec)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:RETURN_VOID: void function return statements are not generally useful
#89: FILE: kernel/ckrm/rbce/rbce_bitvector.h:44:
+	return;
+}

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#91: FILE: kernel/ckrm/rbce/rbce_bitvector.h:46:
+inline static unsigned long bitvector_bytes(unsigned long size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#96: FILE: kernel/ckrm/rbce/rbce_bitvector.h:51:
+inline static void bitvector_init(bitvector_t * bitvec, unsigned long size)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#96: FILE: kernel/ckrm/rbce/rbce_bitvector.h:51:
+inline static void bitvector_init(bitvector_t * bitvec, unsigned long size)

WARNING:RETURN_VOID: void function return statements are not generally useful
#101: FILE: kernel/ckrm/rbce/rbce_bitvector.h:56:
+	return;
+}

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#103: FILE: kernel/ckrm/rbce/rbce_bitvector.h:58:
+inline static bitvector_t *bitvector_alloc(unsigned long size)

CHECK:SPACING: No space is necessary after a cast
#106: FILE: kernel/ckrm/rbce/rbce_bitvector.h:61:
+	    (bitvector_t *) kmalloc(bitvector_bytes(size), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#106: FILE: kernel/ckrm/rbce/rbce_bitvector.h:61:
+	    (bitvector_t *) kmalloc(bitvector_bytes(size), GFP_KERNEL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: kernel/ckrm/rbce/rbce_bitvector.h:69:
+inline static void bitvector_free(bitvector_t * bitvec)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#114: FILE: kernel/ckrm/rbce/rbce_bitvector.h:69:
+inline static void bitvector_free(bitvector_t * bitvec)

WARNING:RETURN_VOID: void function return statements are not generally useful
#119: FILE: kernel/ckrm/rbce/rbce_bitvector.h:74:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: kernel/ckrm/rbce/rbce_bitvector.h:76:
+#define def_bitvec_op(name,mod1,op,mod2) ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: kernel/ckrm/rbce/rbce_bitvector.h:76:
+#define def_bitvec_op(name,mod1,op,mod2) 			\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: kernel/ckrm/rbce/rbce_bitvector.h:76:
+#define def_bitvec_op(name,mod1,op,mod2) 			\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: kernel/ckrm/rbce/rbce_bitvector.h:76:
+#define def_bitvec_op(name,mod1,op,mod2) 			\
                                   ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#121: FILE: kernel/ckrm/rbce/rbce_bitvector.h:76:
+#define def_bitvec_op(name,mod1,op,mod2) 			\
+inline static int name(bitvector_t *res, bitvector_t *op1,	\
+		       bitvector_t *op2)			\
+{								\
+	unsigned int i, size; 					\
+								\
+	CHECK_VEC_RC(res, 0); 					\
+	CHECK_VEC_RC(op1, 0); 					\
+	CHECK_VEC_RC(op2, 0); 					\
+	size = res->size; 					\
+	if (((size != (op1)->size) || (size != (op2)->size))) { \
+		return 0;					\
+	}							\
+	size = BITS_2_LONGS(size);				\
+	for (i = 0; i < size; i++) {				\
+		(res)->bits[i] = (mod1 (op1)->bits[i]) op 	\
+					(mod2 (op2)->bits[i]);	\
+	}							\
+	return 1;						\
+}

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#122: FILE: kernel/ckrm/rbce/rbce_bitvector.h:77:
+inline static int name(bitvector_t *res, bitvector_t *op1,	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: kernel/ckrm/rbce/rbce_bitvector.h:80:
+^Iunsigned int i, size; ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: kernel/ckrm/rbce/rbce_bitvector.h:82:
+^ICHECK_VEC_RC(res, 0); ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: kernel/ckrm/rbce/rbce_bitvector.h:83:
+^ICHECK_VEC_RC(op1, 0); ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: kernel/ckrm/rbce/rbce_bitvector.h:84:
+^ICHECK_VEC_RC(op2, 0); ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: kernel/ckrm/rbce/rbce_bitvector.h:85:
+^Isize = res->size; ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: kernel/ckrm/rbce/rbce_bitvector.h:91:
+^I^I(res)->bits[i] = (mod1 (op1)->bits[i]) op ^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#136: FILE: kernel/ckrm/rbce/rbce_bitvector.h:91:
+		(res)->bits[i] = (mod1 (op1)->bits[i]) op 	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: kernel/ckrm/rbce/rbce_bitvector.h:92:
+					(mod2 (op2)->bits[i]);	\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#142: FILE: kernel/ckrm/rbce/rbce_bitvector.h:97:
+def_bitvec_op(bitvector_or,, |,);
                           ^

ERROR:SPACING: space required after that ',' (ctx:OxB)
#142: FILE: kernel/ckrm/rbce/rbce_bitvector.h:97:
+def_bitvec_op(bitvector_or,, |,);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#143: FILE: kernel/ckrm/rbce/rbce_bitvector.h:98:
+def_bitvec_op(bitvector_and,, &,);
                            ^

ERROR:SPACING: space required after that ',' (ctx:OxB)
#143: FILE: kernel/ckrm/rbce/rbce_bitvector.h:98:
+def_bitvec_op(bitvector_and,, &,);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#144: FILE: kernel/ckrm/rbce/rbce_bitvector.h:99:
+def_bitvec_op(bitvector_xor,, ^,);
                            ^

ERROR:SPACING: space required after that ',' (ctx:OxB)
#144: FILE: kernel/ckrm/rbce/rbce_bitvector.h:99:
+def_bitvec_op(bitvector_xor,, ^,);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#145: FILE: kernel/ckrm/rbce/rbce_bitvector.h:100:
+def_bitvec_op(bitvector_or_not,, |, ~);
                               ^

ERROR:SPACING: space required after that ',' (ctx:OxB)
#146: FILE: kernel/ckrm/rbce/rbce_bitvector.h:101:
+def_bitvec_op(bitvector_not_or, ~, |,);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#147: FILE: kernel/ckrm/rbce/rbce_bitvector.h:102:
+def_bitvec_op(bitvector_and_not,, &, ~);
                                ^

ERROR:SPACING: space required after that ',' (ctx:OxB)
#148: FILE: kernel/ckrm/rbce/rbce_bitvector.h:103:
+def_bitvec_op(bitvector_not_and, ~, &,);
                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: kernel/ckrm/rbce/rbce_bitvector.h:105:
+inline static void bitvector_set(int idx, bitvector_t * vec)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#150: FILE: kernel/ckrm/rbce/rbce_bitvector.h:105:
+inline static void bitvector_set(int idx, bitvector_t * vec)

WARNING:RETURN_VOID: void function return statements are not generally useful
#154: FILE: kernel/ckrm/rbce/rbce_bitvector.h:109:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: kernel/ckrm/rbce/rbce_bitvector.h:111:
+inline static void bitvector_clear(int idx, bitvector_t * vec)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#156: FILE: kernel/ckrm/rbce/rbce_bitvector.h:111:
+inline static void bitvector_clear(int idx, bitvector_t * vec)

WARNING:RETURN_VOID: void function return statements are not generally useful
#160: FILE: kernel/ckrm/rbce/rbce_bitvector.h:115:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: kernel/ckrm/rbce/rbce_bitvector.h:117:
+inline static int bitvector_test(int idx, bitvector_t * vec)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#162: FILE: kernel/ckrm/rbce/rbce_bitvector.h:117:
+inline static int bitvector_test(int idx, bitvector_t * vec)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: kernel/ckrm/rbce/rbce_bitvector.h:123:
+inline static void bitvector_print(int flag, bitvector_t * vec)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#168: FILE: kernel/ckrm/rbce/rbce_bitvector.h:123:
+inline static void bitvector_print(int flag, bitvector_t * vec)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#174: FILE: kernel/ckrm/rbce/rbce_bitvector.h:129:
+	if ((rbcedebug & flag) == 0) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vec"
#177: FILE: kernel/ckrm/rbce/rbce_bitvector.h:132:
+	if (vec == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#178: FILE: kernel/ckrm/rbce/rbce_bitvector.h:133:
+		printk("v<0>-NULL\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: kernel/ckrm/rbce/rbce_bitvector.h:136:
+	printk("v<%d>-", sz = vec->size);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#182: FILE: kernel/ckrm/rbce/rbce_bitvector.h:137:
+	for (i = 0; i < sz; i++) {
+		printk("%c", test_bit(i, vec->bits) ? '1' : '0');
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#183: FILE: kernel/ckrm/rbce/rbce_bitvector.h:138:
+		printk("%c", test_bit(i, vec->bits) ? '1' : '0');

WARNING:RETURN_VOID: void function return statements are not generally useful
#186: FILE: kernel/ckrm/rbce/rbce_bitvector.h:141:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: kernel/ckrm/rbce/rbce_internal.h:203:
+  ^Iint evaluate;^I^I/* whether to evaluate rules or not ? */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: kernel/ckrm/rbce/rbce_internal.h:203:
+  ^Iint evaluate;^I^I/* whether to evaluate rules or not ? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: kernel/ckrm/rbce/rbce_internal.h:203:
+  ^Iint evaluate;^I^I/* whether to evaluate rules or not ? */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: kernel/ckrm/rbce/rbce_internal.h:204:
+  ^Iint rules_version;^I/* rules_version at last evaluation */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: kernel/ckrm/rbce/rbce_internal.h:204:
+  ^Iint rules_version;^I/* rules_version at last evaluation */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: kernel/ckrm/rbce/rbce_internal.h:204:
+  ^Iint rules_version;^I/* rules_version at last evaluation */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: kernel/ckrm/rbce/rbce_internal.h:208:
+  ^Ichar data[0];^I^I/* bitvectors eval and true */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: kernel/ckrm/rbce/rbce_internal.h:208:
+  ^Ichar data[0];^I^I/* bitvectors eval and true */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/ckrm/rbce/rbce_internal.h:208:
+  ^Ichar data[0];^I^I/* bitvectors eval and true */$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#323: FILE: kernel/ckrm/rbce/rbce_main.c:385:
+		newterms =
+		    kmalloc(nsz * sizeof(struct rbce_rule_term), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: kernel/ckrm/rbce/rbce_main.c:396:
+						int idx = rule->terms[i];
+						newterms[newidx] = terms[idx];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#359: FILE: kernel/ckrm/rbce/rbce_main.c:421:
+		if (!temp) {
+			return;
+		}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#363: FILE: kernel/ckrm/rbce/rbce_main.c:425:
+		if (mask_vecs[0]) {/* index 0 has the alloc returned address */
+			kfree(mask_vecs[0]);

CHECK:SPACING: No space is necessary after a cast
#366: FILE: kernel/ckrm/rbce/rbce_main.c:428:
+			mask_vecs[i] = (bitvector_t *) (temp + i * bsize);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#400: FILE: kernel/ckrm/rbce/rbce_main.c:462:
+					/* mark this term belonging to all
+					   contexts of deprule */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#400: FILE: kernel/ckrm/rbce/rbce_main.c:462:
+					   contexts of deprule */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#403: FILE: kernel/ckrm/rbce/rbce_main.c:465:
+						if (term->u.deprule->termflag

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#413: FILE: kernel/ckrm/rbce/rbce_main.c:475:
+					/* mark this term belonging to
+					   a particular context */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#413: FILE: kernel/ckrm/rbce/rbce_main.c:475:
+					   a particular context */

WARNING:RETURN_VOID: void function return statements are not generally useful
#428: FILE: kernel/ckrm/rbce/rbce_main.c:490:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: kernel/ckrm/rbce/rbce_main.c:1137:
+void reset_evaluation(struct rbce_private_data *pdata,int termflag)
                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: kernel/ckrm/rbce/rbce_main.c:1140:
+ ^I * on next classification event$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#441: FILE: kernel/ckrm/rbce/rbce_main.c:1140:
+ ^I * on next classification event$

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: kernel/ckrm/rbce/rbce_main.c:1141:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#442: FILE: kernel/ckrm/rbce/rbce_main.c:1141:
+ ^I */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#444: FILE: kernel/ckrm/rbce/rbce_main.c:1143:
+		printk(KERN_ERR "rbce:reset_evaluation: trying to access "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reset_evaluation', this function's name, in a string
#444: FILE: kernel/ckrm/rbce/rbce_main.c:1143:
+		printk(KERN_ERR "rbce:reset_evaluation: trying to access "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#445: FILE: kernel/ckrm/rbce/rbce_main.c:1144:
+		printk(KERN_ERR "rbce:reset_evaluation: trying to access "
+			"past valid address\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: kernel/ckrm/rbce/rbce_main.c:1147:
+ ^Iif (use_persistent_state && gl_mask_vecs[termflag]) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#448: FILE: kernel/ckrm/rbce/rbce_main.c:1147:
+ ^Iif (use_persistent_state && gl_mask_vecs[termflag]) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: kernel/ckrm/rbce/rbce_main.c:1147:
+ ^Iif (use_persistent_state && gl_mask_vecs[termflag]) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: kernel/ckrm/rbce/rbce_main.c:1148:
+ ^I^Ibitvector_and_not( pdata->eval, pdata->eval,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: kernel/ckrm/rbce/rbce_main.c:1148:
+ ^I^Ibitvector_and_not( pdata->eval, pdata->eval,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/ckrm/rbce/rbce_main.c:1148:
+ ^I^Ibitvector_and_not( pdata->eval, pdata->eval,$

ERROR:SPACING: space prohibited after that open parenthesis '('
#449: FILE: kernel/ckrm/rbce/rbce_main.c:1148:
+ 		bitvector_and_not( pdata->eval, pdata->eval,

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/ckrm/rbce/rbce_main.c:1149:
+ ^I^I^I^I   gl_mask_vecs[termflag] );$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: kernel/ckrm/rbce/rbce_main.c:1149:
+ ^I^I^I^I   gl_mask_vecs[termflag] );$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: kernel/ckrm/rbce/rbce_main.c:1149:
+ 		bitvector_and_not( pdata->eval, pdata->eval,
+ 				   gl_mask_vecs[termflag] );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: kernel/ckrm/rbce/rbce_main.c:1149:
+ ^I^I^I^I   gl_mask_vecs[termflag] );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#450: FILE: kernel/ckrm/rbce/rbce_main.c:1149:
+ 				   gl_mask_vecs[termflag] );

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: kernel/ckrm/rbce/rbce_main.c:1150:
+ ^I^Ibitvector_and_not( pdata->true, pdata->true,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: kernel/ckrm/rbce/rbce_main.c:1150:
+ ^I^Ibitvector_and_not( pdata->true, pdata->true,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: kernel/ckrm/rbce/rbce_main.c:1150:
+ ^I^Ibitvector_and_not( pdata->true, pdata->true,$

ERROR:SPACING: space prohibited after that open parenthesis '('
#451: FILE: kernel/ckrm/rbce/rbce_main.c:1150:
+ 		bitvector_and_not( pdata->true, pdata->true,

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: kernel/ckrm/rbce/rbce_main.c:1151:
+ ^I^I^I^I   gl_mask_vecs[termflag] );$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: kernel/ckrm/rbce/rbce_main.c:1151:
+ ^I^I^I^I   gl_mask_vecs[termflag] );$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: kernel/ckrm/rbce/rbce_main.c:1151:
+ 		bitvector_and_not( pdata->true, pdata->true,
+ 				   gl_mask_vecs[termflag] );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: kernel/ckrm/rbce/rbce_main.c:1151:
+ ^I^I^I^I   gl_mask_vecs[termflag] );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#452: FILE: kernel/ckrm/rbce/rbce_main.c:1151:
+ 				   gl_mask_vecs[termflag] );

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: kernel/ckrm/rbce/rbce_main.c:1152:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: kernel/ckrm/rbce/rbce_main.c:1152:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: kernel/ckrm/rbce/rbce_main.c:1152:
+ ^I}$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173763.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 65 warnings, 10 checks, 397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173763.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
