WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: kernel/irq/proc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: kernel/irq/proc.c:2:
+ * linux/kernel/irq/proc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#66: FILE: kernel/irq/proc.c:24:
+cpumask_t irq_affinity[NR_IRQS] = { [0 ... NR_IRQS-1] = CPU_MASK_ALL };
                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#142: FILE: kernel/irq/proc.c:100:
+	char name [MAX_NAMELEN];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#160: FILE: kernel/irq/proc.c:118:
+	char name [MAX_NAMELEN];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq_desc[irq].handler == &no_irq_type'
#162: FILE: kernel/irq/proc.c:120:
+	if (!root_irq_dir ||
+		(irq_desc[irq].handler == &no_irq_type) ||
+			irq_dir[irq])

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: kernel/irq/proc.c:121:
+	if (!root_irq_dir ||
+		(irq_desc[irq].handler == &no_irq_type) ||

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#229: FILE: kernel/irq/manage.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#230: FILE: kernel/irq/manage.c:2:
+ * linux/kernel/irq/manage.c

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#263: FILE: kernel/irq/manage.c:35:
+EXPORT_SYMBOL(synchronize_irq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#291: FILE: kernel/irq/manage.c:63:
+EXPORT_SYMBOL(disable_irq_nosync);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#314: FILE: kernel/irq/manage.c:86:
+EXPORT_SYMBOL(disable_irq);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: kernel/irq/manage.c:114:
+			hw_resend_irq(desc->handler,irq);
 			                           ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#345: FILE: kernel/irq/manage.c:117:
+		/* fall-through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#353: FILE: kernel/irq/manage.c:125:
+EXPORT_SYMBOL(enable_irq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#379: FILE: kernel/irq/manage.c:151:
+int setup_irq(unsigned int irq, struct irqaction * new)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#387: FILE: kernel/irq/manage.c:159:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: kernel/irq/manage.c:180:
+	spin_lock_irqsave(&desc->lock,flags);
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#410: FILE: kernel/irq/manage.c:182:
+	if ((old = *p) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: kernel/irq/manage.c:185:
+			spin_unlock_irqrestore(&desc->lock,flags);
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: kernel/irq/manage.c:208:
+	spin_unlock_irqrestore(&desc->lock,flags);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: kernel/irq/manage.c:242:
+	spin_lock_irqsave(&desc->lock,flags);
 	                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#473: FILE: kernel/irq/manage.c:245:
+		struct irqaction * action = *p;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: kernel/irq/manage.c:263:
+			spin_unlock_irqrestore(&desc->lock,flags);
 			                                  ^

WARNING:REPEATED_WORD: Possible repeated word: 'free'
#499: FILE: kernel/irq/manage.c:271:
+		printk(KERN_ERR "Trying to free free IRQ%d\n",irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#499: FILE: kernel/irq/manage.c:271:
+		printk(KERN_ERR "Trying to free free IRQ%d\n",irq);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#499: FILE: kernel/irq/manage.c:271:
+		printk(KERN_ERR "Trying to free free IRQ%d\n",irq);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#500: FILE: kernel/irq/manage.c:272:
+		spin_unlock_irqrestore(&desc->lock,flags);
 		                                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#505: FILE: kernel/irq/manage.c:277:
+EXPORT_SYMBOL(free_irq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#538: FILE: kernel/irq/manage.c:310:
+		unsigned long irqflags, const char * devname, void *dev_id)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: kernel/irq/manage.c:312:
+	struct irqaction * action;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*action)...) over kmalloc(sizeof(struct irqaction)...)
#556: FILE: kernel/irq/manage.c:328:
+	action = kmalloc(sizeof(struct irqaction), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#574: FILE: kernel/irq/manage.c:346:
+EXPORT_SYMBOL(request_irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#579: FILE: kernel/irq/spurious.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#580: FILE: kernel/irq/spurious.c:2:
+ * linux/kernel/irq/spurious.c

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#609: FILE: kernel/irq/spurious.c:31:
+		printk(KERN_ERR "irq event %d: bogus return value %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: kernel/irq/spurious.c:32:
+		printk(KERN_ERR "irq event %d: bogus return value %x\n",
+				irq, action_ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#612: FILE: kernel/irq/spurious.c:34:
+		printk(KERN_ERR "irq %d: nobody cared!\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#615: FILE: kernel/irq/spurious.c:37:
+	printk(KERN_ERR "handlers:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#618: FILE: kernel/irq/spurious.c:40:
+		printk(KERN_ERR "[<%p>]", action->handler);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: kernel/irq/spurious.c:42:
+		print_symbol(" (%s)",
+			(unsigned long)action->handler);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#621: FILE: kernel/irq/spurious.c:43:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#657: FILE: kernel/irq/spurious.c:79:
+		printk(KERN_EMERG "Disabling IRQ #%d\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#669: FILE: kernel/irq/spurious.c:91:
+	printk(KERN_INFO "IRQ lockup detection disabled\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#673: FILE: kernel/irq/spurious.c:95:
+__setup("noirqdebug", noirqdebug_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#678: FILE: kernel/irq/handle.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#679: FILE: kernel/irq/handle.c:2:
+ * linux/kernel/irq/handle.c

WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#698: FILE: kernel/irq/handle.c:21:
+ * interrupt source is transparently wired to the apropriate
                                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#709: FILE: kernel/irq/handle.c:32:
+	[0 ... NR_IRQS-1] = {
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#734: FILE: kernel/irq/handle.c:57:
+	typename:	"none",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#735: FILE: kernel/irq/handle.c:58:
+	startup:	startup_none,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#735: FILE: kernel/irq/handle.c:58:
+	startup:	startup_none,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#736: FILE: kernel/irq/handle.c:59:
+	shutdown:	shutdown_none,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#736: FILE: kernel/irq/handle.c:59:
+	shutdown:	shutdown_none,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#737: FILE: kernel/irq/handle.c:60:
+	enable:		enable_none,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#737: FILE: kernel/irq/handle.c:60:
+	enable:		enable_none,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#738: FILE: kernel/irq/handle.c:61:
+	disable:	disable_none,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#738: FILE: kernel/irq/handle.c:61:
+	disable:	disable_none,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#739: FILE: kernel/irq/handle.c:62:
+	ack:		ack_none,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#739: FILE: kernel/irq/handle.c:62:
+	ack:		ack_none,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#740: FILE: kernel/irq/handle.c:63:
+	end:		end_none,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#740: FILE: kernel/irq/handle.c:63:
+	end:		end_none,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#741: FILE: kernel/irq/handle.c:64:
+	set_affinity:	NULL
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#741: FILE: kernel/irq/handle.c:64:
+	set_affinity:	NULL

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#797: FILE: kernel/irq/handle.c:120:
+	struct irqaction * action;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#892: FILE: kernel/irq/autoprobe.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#893: FILE: kernel/irq/autoprobe.c:2:
+ * linux/kernel/irq/autoprobe.c

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#929: FILE: kernel/irq/autoprobe.c:38:
+	for (i = NR_IRQS-1; i > 0; i--) {
 	                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 39)
#939: FILE: kernel/irq/autoprobe.c:48:
+	for (delay = jiffies + HZ/50; time_after(delay, jiffies); )
+		/* about 20ms delay */ barrier();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#939: FILE: kernel/irq/autoprobe.c:48:
+	for (delay = jiffies + HZ/50; time_after(delay, jiffies); )
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#947: FILE: kernel/irq/autoprobe.c:56:
+	for (i = NR_IRQS-1; i > 0; i--) {
 	                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 40)
#962: FILE: kernel/irq/autoprobe.c:71:
+	for (delay = jiffies + HZ/10; time_after(delay, jiffies); )
+		/* about 100ms delay */ barrier();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#962: FILE: kernel/irq/autoprobe.c:71:
+	for (delay = jiffies + HZ/10; time_after(delay, jiffies); )
 	                         ^

CHECK:BRACES: Unbalanced braces around else statement
#981: FILE: kernel/irq/autoprobe.c:90:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#991: FILE: kernel/irq/autoprobe.c:100:
+EXPORT_SYMBOL(probe_irq_on);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1078: FILE: kernel/irq/autoprobe.c:187:
+EXPORT_SYMBOL(probe_irq_off);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1083: FILE: kernel/irq/internals.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1090: FILE: kernel/irq/internals.h:8:
+extern void register_irq_proc(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1091: FILE: kernel/irq/internals.h:9:
+extern void register_handler_proc(unsigned int irq, struct irqaction *action);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1092: FILE: kernel/irq/internals.h:10:
+extern void unregister_handler_proc(unsigned int irq, struct irqaction *action);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1132: FILE: include/linux/irq.h:81:
+extern void note_interrupt(unsigned int irq, irq_desc_t *desc, int action_ret);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1133: FILE: include/linux/irq.h:82:
+extern void report_bad_irq(unsigned int irq, irq_desc_t *desc, int action_ret);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1134: FILE: include/linux/irq.h:83:
+extern int can_request_irq(unsigned int irq, unsigned long irqflags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1135: FILE: include/linux/irq.h:84:
+extern int setup_irq(unsigned int irq, struct irqaction * new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1135: FILE: include/linux/irq.h:84:
+extern int setup_irq(unsigned int irq, struct irqaction * new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1137: FILE: include/linux/irq.h:86:
+extern void init_irq_proc(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1157: FILE: include/linux/interrupt.h:53:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1159: FILE: include/linux/interrupt.h:55:
+extern void disable_irq_nosync(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1160: FILE: include/linux/interrupt.h:56:
+extern void disable_irq(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: include/linux/interrupt.h:57:
+extern void enable_irq(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1219: FILE: include/linux/hardirq.h:85:
+extern void irq_exit(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 41 warnings, 26 checks, 1147 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
