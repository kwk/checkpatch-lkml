WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This patch makes the root_plug LSM module also check the serial number of the 

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#30: 
I am not familiar with the module interface, and have not added a paramater 
                                                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: root_plug.c:70:
+ char* buf;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#50: FILE: root_plug.c:70:
+ char* buf;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#51: FILE: root_plug.c:71:
+ char* buf;
+ buf = kmalloc(128, GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: root_plug.c:71:
+ buf = kmalloc(128, GFP_KERNEL);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: root_plug.c:72:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: root_plug.c:72:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: root_plug.c:83:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#60: FILE: root_plug.c:83:
+  else {
+   usb_string(dev, dev->descriptor.iSerialNumber, buf, 128);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#60: FILE: root_plug.c:83:
   }
+  else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#60: FILE: root_plug.c:83:
+  else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: root_plug.c:84:
+   usb_string(dev, dev->descriptor.iSerialNumber, buf, 128);$

CHECK:CAMELCASE: Avoid CamelCase: <iSerialNumber>
#61: FILE: root_plug.c:84:
+   usb_string(dev, dev->descriptor.iSerialNumber, buf, 128);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: root_plug.c:85:
+   if (strcmp(buf, serial_number) != 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#62: FILE: root_plug.c:85:
+   if (strcmp(buf, serial_number) != 0)
+   {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 4)
#62: FILE: root_plug.c:85:
+   if (strcmp(buf, serial_number) != 0)
+   {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: root_plug.c:86:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: root_plug.c:87:
+    root_dbg("e_gid = 0, and device found, "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: root_plug.c:88:
+     "but bad serial number...\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#65: FILE: root_plug.c:88:
+    root_dbg("e_gid = 0, and device found, "
+     "but bad serial number...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: root_plug.c:89:
+    return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: root_plug.c:90:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: root_plug.c:91:
+  }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227384.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 18 warnings, 2 checks, 32 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227384.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
