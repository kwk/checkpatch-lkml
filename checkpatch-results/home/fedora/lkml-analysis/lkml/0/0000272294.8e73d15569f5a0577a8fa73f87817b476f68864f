WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
--- schedprof-2.6.7.orig/include/linux/sched.h	2004-06-15 22:18:57.000000000 -0700

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: include/linux/sched.h:183:
+extern signed long FASTCALL(__schedule_timeout(signed long timeout));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#59: FILE: include/linux/sched.h:186:
+void __sched_profile(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: kernel/sched.c:4065:
+		unsigned long pc = (unsigned long)__pc;
+		pc -= min(pc, (unsigned long)_stext);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(unsigned long, pc, _stext)
#241: FILE: kernel/sched.c:4065:
+		pc -= min(pc, (unsigned long)_stext);

WARNING:LINE_SPACING: Missing a blank line after declarations
#249: FILE: kernel/sched.c:4073:
+	int n;
+	if (get_option(&s, &n))

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#253: FILE: kernel/sched.c:4077:
+__setup("schedprof=", schedprof_setup);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#260: FILE: kernel/sched.c:4084:
+	schedprof_buf = alloc_bootmem(schedprof_len*sizeof(atomic_t));
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#261: FILE: kernel/sched.c:4085:
+	printk(KERN_INFO "Scheduler call profiling enabled\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: kernel/sched.c:4096:
+	char * pnt;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#275: FILE: kernel/sched.c:4099:
+	if (p >= (schedprof_len+1)*sizeof(atomic_t))
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#275: FILE: kernel/sched.c:4099:
+	if (p >= (schedprof_len+1)*sizeof(atomic_t))
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#277: FILE: kernel/sched.c:4101:
+	if (count > (schedprof_len+1)*sizeof(atomic_t) - p)
 	                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#277: FILE: kernel/sched.c:4101:
+	if (count > (schedprof_len+1)*sizeof(atomic_t) - p)
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#278: FILE: kernel/sched.c:4102:
+		count = (schedprof_len+1)*sizeof(atomic_t) - p;
 		                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#278: FILE: kernel/sched.c:4102:
+		count = (schedprof_len+1)*sizeof(atomic_t) - p;
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: kernel/sched.c:4106:
+		put_user(*((char *)(&sample_step)+p),buf);
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#282: FILE: kernel/sched.c:4106:
+		put_user(*((char *)(&sample_step)+p),buf);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: kernel/sched.c:4110:
+	if (copy_to_user(buf,(void *)pnt,count))
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: kernel/sched.c:4110:
+	if (copy_to_user(buf,(void *)pnt,count))
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: kernel/sched.c:4118:
+static ssize_t write_sched_profile(struct file *file, const char __user *buf,
+			     size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#296: FILE: kernel/sched.c:4120:
+	memset(schedprof_buf, 0, sizeof(atomic_t)*schedprof_len);
 	                                         ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#300: FILE: kernel/sched.c:4124:
+static struct file_operations sched_profile_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: kernel/sched.c:4132:
+	struct proc_dir_entry *entry;
+	if (!sched_profiling)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#310: FILE: kernel/sched.c:4134:
+	entry = create_proc_entry("schedprof", S_IWUSR | S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#313: FILE: kernel/sched.c:4137:
+		entry->size = sizeof(atomic_t)*(schedprof_len + 1);
 		                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: arch/parisc/kernel/semaphore.c:72:
+ ^I^I__schedule();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#636: FILE: arch/parisc/kernel/semaphore.c:72:
+ ^I^I__schedule();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/parisc/kernel/semaphore.c:72:
+ ^I^I__schedule();$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272294.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 11 warnings, 13 checks, 679 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272294.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
