WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
-------------------------------------------------------------------------------

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: drivers/block/cciss_scsi.c:31:
+#include <scsi/scsi.h> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: drivers/block/cciss_scsi.c:66:
+int cciss_scsi_queue_command (struct scsi_cmnd *cmd, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#82: FILE: drivers/block/cciss_scsi.c:66:
+int cciss_scsi_queue_command (struct scsi_cmnd *cmd, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: drivers/block/cciss_scsi.c:66:
+int cciss_scsi_queue_command (struct scsi_cmnd *cmd, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: drivers/block/cciss_scsi.c:67:
+int cciss_scsi_queue_command (struct scsi_cmnd *cmd, 
+		void (* done)(struct scsi_cmnd *));

WARNING:SPACING: Unnecessary space before function pointer name
#83: FILE: drivers/block/cciss_scsi.c:67:
+		void (* done)(struct scsi_cmnd *));

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#83: FILE: drivers/block/cciss_scsi.c:67:
+		void (* done)(struct scsi_cmnd *));
 		      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#83: FILE: drivers/block/cciss_scsi.c:67:
+		void (* done)(struct scsi_cmnd *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required before the open parenthesis '('
#106: FILE: drivers/block/cciss_scsi.c:555:
+	if(cmd = kmalloc(sizeof(struct scsi_cmnd), GFP_ATOMIC) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#106: FILE: drivers/block/cciss_scsi.c:555:
+	if(cmd = kmalloc(sizeof(struct scsi_cmnd), GFP_ATOMIC) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kmalloc"
#106: FILE: drivers/block/cciss_scsi.c:555:
+	if(cmd = kmalloc(sizeof(struct scsi_cmnd), GFP_ATOMIC) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cmd)...) over kmalloc(sizeof(struct scsi_cmnd)...)
#106: FILE: drivers/block/cciss_scsi.c:555:
+	if(cmd = kmalloc(sizeof(struct scsi_cmnd), GFP_ATOMIC) == NULL) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#107: FILE: drivers/block/cciss_scsi.c:556:
+		printk(KERN_WARNING "out of memory\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: drivers/block/cciss_scsi.c:567:
+^Icmd = (struct scsi_cmnd *) cp->scsi_cmd;^I$

CHECK:SPACING: No space is necessary after a cast
#118: FILE: drivers/block/cciss_scsi.c:567:
+	cmd = (struct scsi_cmnd *) cp->scsi_cmd;	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: drivers/block/cciss_scsi.c:575:
+^I^I^I^Icmd->sc_data_direction); $

CHECK:SPACING: No space is necessary after a cast
#146: FILE: drivers/block/cciss_scsi.c:785:
+	cciss_map_one(c->pdev, cp, (unsigned char *) buf,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: drivers/block/cciss_scsi.c:786:
+^I^I^Ibufsize, DMA_FROM_DEVICE); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: drivers/block/cciss_scsi.c:786:
+	cciss_map_one(c->pdev, cp, (unsigned char *) buf,
+			bufsize, DMA_FROM_DEVICE); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: drivers/block/cciss_scsi.c:1179:
+/* cciss_scatter_gather takes a struct scsi_cmnd, (cmd), and does the pci $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: drivers/block/cciss_scsi.c:1199:
+^I^I^I^Icmd->sc_data_direction); $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: drivers/block/cciss_scsi.c:1233:
+cciss_scsi_queue_command (struct scsi_cmnd *cmd, void (* done)(struct scsi_cmnd *))

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#202: FILE: drivers/block/cciss_scsi.c:1233:
+cciss_scsi_queue_command (struct scsi_cmnd *cmd, void (* done)(struct scsi_cmnd *))
                                                        ^

WARNING:TABSTOP: Statements should start on a tabstop
#215: FILE: drivers/block/cciss_scsi.c:1301:
+	  case DMA_TO_DEVICE: cp->Request.Type.Direction = XFER_WRITE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#215: FILE: drivers/block/cciss_scsi.c:1301:
+	  case DMA_TO_DEVICE: cp->Request.Type.Direction = XFER_WRITE; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#215: FILE: drivers/block/cciss_scsi.c:1301:
+	  case DMA_TO_DEVICE: cp->Request.Type.Direction = XFER_WRITE; break;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#215: FILE: drivers/block/cciss_scsi.c:1301:
+	  case DMA_TO_DEVICE: cp->Request.Type.Direction = XFER_WRITE; break;

CHECK:CAMELCASE: Avoid CamelCase: <Direction>
#215: FILE: drivers/block/cciss_scsi.c:1301:
+	  case DMA_TO_DEVICE: cp->Request.Type.Direction = XFER_WRITE; break;

WARNING:TABSTOP: Statements should start on a tabstop
#216: FILE: drivers/block/cciss_scsi.c:1302:
+	  case DMA_FROM_DEVICE: cp->Request.Type.Direction = XFER_READ; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#216: FILE: drivers/block/cciss_scsi.c:1302:
+	  case DMA_FROM_DEVICE: cp->Request.Type.Direction = XFER_READ; break;

WARNING:TABSTOP: Statements should start on a tabstop
#217: FILE: drivers/block/cciss_scsi.c:1303:
+	  case DMA_NONE: cp->Request.Type.Direction = XFER_NONE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#217: FILE: drivers/block/cciss_scsi.c:1303:
+	  case DMA_NONE: cp->Request.Type.Direction = XFER_NONE; break;

WARNING:TABSTOP: Statements should start on a tabstop
#218: FILE: drivers/block/cciss_scsi.c:1304:
+	  case DMA_BIDIRECTIONAL:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 11 warnings, 9 checks, 151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
