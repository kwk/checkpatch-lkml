CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/time.h:106:
+extern u64 do_monotonic_clock(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/timer.h:56:
+extern int __mod_timer(struct timer_list *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/timer.h:58:
+extern void add_timer(struct timer_list *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/timer.h:59:
+extern int set_timer_nsecs(struct timer_list *timer, u64 expires_nsecs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/timer.h:60:
+extern void set_timer_on_nsecs(struct timer_list *timer, u64 expires_nsecs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: include/linux/timer.h:61:
+extern void set_timer_on_nsecs(struct timer_list *timer, u64 expires_nsecs,
+								int cpu);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#148: FILE: kernel/time.c:609:
+EXPORT_SYMBOL_GPL(do_monotonic_clock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BIT_MACRO: Prefer using the BIT macro
#163: FILE: kernel/timer.c:66:
+#define TIMERINTERVAL_SIZE (1 << TIMERINTERVAL_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: kernel/timer.c:136:
+ * ^I2^(sizeof(unsigned long)*8 - TIMERINTERVAL_BITS)$

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#196: FILE: kernel/timer.c:141:
+ * propogate the carry and force a wrap when adding the 1.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: kernel/timer.c:165:
+ * ^I2^(sizeof(unsigned long)*8 - TIMERINTERVAL_BITS)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: kernel/timer.c:200:
+	unsigned long relative_jiffies = abs_jiffies - jiffies;
+	return nsecs_to_timerintervals_ceiling(do_monotonic_clock() +

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: kernel/timer.c:370:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: kernel/timer.c:370:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#340: FILE: kernel/timer.c:401:
+void add_timer(struct timer_list * timer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#347: FILE: kernel/timer.c:408:
+EXPORT_SYMBOL(add_timer);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#385: FILE: kernel/timer.c:453:
EXPORT_SYMBOL(mod_timer);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#386: FILE: kernel/timer.c:454:
 
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: kernel/timer.c:465:
+	BUG_ON(!timer->function);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#409: FILE: kernel/timer.c:477:
+EXPORT_SYMBOL_GPL(set_timer_nsecs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: kernel/timer.c:490:
+  ^Iunsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: kernel/timer.c:490:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: kernel/timer.c:490:
+  ^Iunsigned long flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: kernel/timer.c:492:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: kernel/timer.c:492:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: kernel/timer.c:492:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: kernel/timer.c:492:
+  	BUG_ON(timer_pending(timer) || !timer->function);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#442: FILE: kernel/timer.c:626:
+#define INDEX(N) (base->last_timer_time >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'N' may be better as '(N)' to avoid precedence issues
#442: FILE: kernel/timer.c:626:
+#define INDEX(N) (base->last_timer_time >> (TVR_BITS + N * TVN_BITS)) & TVN_MASK

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: kernel/timer.c:636:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: kernel/timer.c:636:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: kernel/timer.c:636:
+ ^I^Iint index = base->last_timer_time & TVR_MASK;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166842.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 16 warnings, 9 checks, 420 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166842.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
