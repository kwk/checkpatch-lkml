WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
o sysfs_create_file() will just link a new sysfs_dirent() structure representing

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: fs/sysfs/file.c:72:
+	struct sysfs_dirent * sd_attr = file->f_dentry->d_fsdata;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#76: FILE: fs/sysfs/file.c:73:
+	struct attribute * attr = sd_attr->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: fs/sysfs/file.c:74:
+	struct sysfs_dirent * sd_kobj = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/sysfs/file.c:75:
+	struct kobject * kobj = sd_kobj->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: fs/sysfs/file.c:195:
+	struct sysfs_dirent * sd_attr = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: fs/sysfs/file.c:196:
+	struct attribute * attr = sd_attr->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: fs/sysfs/file.c:197:
+	struct sysfs_dirent * sd_kobj = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/sysfs/file.c:198:
+	struct kobject * kobj = sd_kobj->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/sysfs/file.c:237:
+	struct sysfs_dirent * sd_attr = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: fs/sysfs/file.c:238:
+	struct attribute * attr = sd_attr->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: fs/sysfs/file.c:239:
+	struct sysfs_dirent * sd_kobj = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/sysfs/file.c:240:
+	struct kobject * kobj = kobject_get(sd_kobj->s_element);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: fs/sysfs/file.c:321:
+	struct sysfs_dirent * sd_attr = filp->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: fs/sysfs/file.c:322:
+	struct attribute * attr = sd_attr->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: fs/sysfs/file.c:323:
+	struct sysfs_dirent * sd_kobj = filp->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#117: FILE: fs/sysfs/file.c:324:
+	struct kobject * kobj = sd_kobj->s_element;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#126: FILE: fs/sysfs/file.c:339:
+struct file_operations sysfs_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/sysfs/file.c:348:
+int sysfs_add_file(struct dentry * parent, const struct attribute * attr, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/sysfs/file.c:348:
+int sysfs_add_file(struct dentry * parent, const struct attribute * attr, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: fs/sysfs/file.c:350:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: fs/sysfs/file.c:351:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: fs/sysfs/file.c:354:
+^Idown(&parent->d_inode->i_sem);^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#156: FILE: fs/sysfs/file.c:355:
+	sd = sysfs_new_dirent(parent_sd, (void *) attr, t);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: fs/sysfs/file.c:358:
+^Iup(&parent->d_inode->i_sem);^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: fs/sysfs/file.c:359:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: fs/sysfs/file.c:372:
+^Iif (kobj && kobj->dentry && attr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: fs/sysfs/inode.c:66:
+^I^Iif (S_ISDIR(mode)) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#203: FILE: fs/sysfs/inode.c:102:
+			if (S_ISDIR(victim->d_inode->i_mode)) {
[...]
+			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: fs/sysfs/inode.c:104:
+				simple_unlink(dir->d_inode,victim);
 				                          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#207: FILE: fs/sysfs/inode.c:106:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000298943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 2 warnings, 2 checks, 151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000298943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
