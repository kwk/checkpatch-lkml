WARNING:REPEATED_WORD: Possible repeated word: 'the'
#26: 
This patch provides the the basic rcfs interface for rbce. It just provides

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#29: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/rbce.h:1:
+/* Rule-based Classification Engine (RBCE) module

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: kernel/ckrm/rbce/rbce_fs.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: kernel/ckrm/rbce/rbce_fs.c:36:
+rbce_write(struct file *file, const char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: kernel/ckrm/rbce/rbce_fs.c:37:
+	   size_t len, loff_t * ppos)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#167: FILE: kernel/ckrm/rbce/rbce_fs.c:43:
+	if (!line) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#183: FILE: kernel/ckrm/rbce/rbce_fs.c:59:
+	if (!strcmp(file->f_dentry->d_name.name, CONFIG_RBCE_TAG)) {
[...]
+	} else if (!strcmp(file->f_dentry->d_name.name, CONFIG_RBCE_STATE))
[...]
+	else
[...]

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#184: FILE: kernel/ckrm/rbce/rbce_fs.c:60:
+		pid = simple_strtol(line, &ptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: kernel/ckrm/rbce/rbce_fs.c:80:
+	if (!strcmp(file->f_dentry->d_name.name, CONFIG_RBCE_STATE))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: kernel/ckrm/rbce/rbce_fs.c:82:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: kernel/ckrm/rbce/rbce_fs.c:99:
+	if (strcmp(name, CONFIG_RBCE_STATE) &&
+			strcmp(name, CONFIG_RBCE_TAG) &&

WARNING:CONST_STRUCT: struct file_operations should normally be const
#229: FILE: kernel/ckrm/rbce/rbce_fs.c:105:
+static struct file_operations rbce_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#230: FILE: kernel/ckrm/rbce/rbce_fs.c:106:
+static struct inode_operations rbce_file_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#231: FILE: kernel/ckrm/rbce/rbce_fs.c:107:
+static struct inode_operations rbce_dir_inode_operations;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#246: FILE: kernel/ckrm/rbce/rbce_fs.c:122:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#261: FILE: kernel/ckrm/rbce/rbce_fs.c:137:
+			/* directory inodes start off with i_nlink == 2
+			   (for "." entry) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: kernel/ckrm/rbce/rbce_fs.c:137:
+			   (for "." entry) */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#288: FILE: kernel/ckrm/rbce/rbce_fs.c:164:
+
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#300: FILE: kernel/ckrm/rbce/rbce_fs.c:176:
+			dir->i_ctime = dir->i_mtime = CURRENT_TIME;

WARNING:REPEATED_WORD: Possible repeated word: 'under'
#323: FILE: kernel/ckrm/rbce/rbce_fs.c:199:
+	/* Do not allow renaming files just under under /ce */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#334: FILE: kernel/ckrm/rbce/rbce_fs.c:210:
+		old_dir->i_ctime = old_dir->i_mtime = new_dir->i_ctime =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#335: FILE: kernel/ckrm/rbce/rbce_fs.c:211:
+		    new_dir->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: kernel/ckrm/rbce/rbce_fs.c:225:
+	if ((!strcmp(pd->d_name.name, CONFIG_CE_DIR) &&
+			!strcmp(dentry->d_name.name, CONFIG_RULES_DIR)) ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: kernel/ckrm/rbce/rbce_fs.c:242:
+	int rc;
+	rc = simple_rmdir(dir, dentry);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#375: FILE: kernel/ckrm/rbce/rbce_fs.c:251:
+	    int mode, struct nameidata *nd)
 	                                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#419: FILE: kernel/ckrm/rbce/rbce_fs.c:295:
+	 .mode = (RCFS_DEFAULT_DIR_MODE | S_IWUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TABSTOP: Statements should start on a tabstop
#422: FILE: kernel/ckrm/rbce/rbce_fs.c:298:
+	 }

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ce_root_dentry'
#433: FILE: kernel/ckrm/rbce/rbce_fs.c:309:
+	if ((!ce_root_dentry) || rc)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#437: FILE: kernel/ckrm/rbce/rbce_fs.c:313:
+	if ((rc = rcfs_create_magic(ce_root_dentry, &rbce_config_files[1],

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#439: FILE: kernel/ckrm/rbce/rbce_fs.c:315:
+		printk(KERN_ERR "Failed to create c/rbce config files."

WARNING:SPLIT_STRING: quoted string split across lines
#440: FILE: kernel/ckrm/rbce/rbce_fs.c:316:
+		printk(KERN_ERR "Failed to create c/rbce config files."
+		       " Deleting c/rbce root\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: kernel/ckrm/rbce/rbce_fs.c:327:
+	int rc = 0;
+	if (ce_root_dentry)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#458: FILE: kernel/ckrm/rbce/rbce_fs.c:334:
+static struct file_operations rbce_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#467: FILE: kernel/ckrm/rbce/rbce_fs.c:343:
+static struct inode_operations rbce_file_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#471: FILE: kernel/ckrm/rbce/rbce_fs.c:347:
+static struct inode_operations rbce_dir_inode_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#495: FILE: kernel/ckrm/rbce/rbce_internal.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#535: FILE: kernel/ckrm/rbce/rbce_internal.h:41:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#536: FILE: kernel/ckrm/rbce/rbce_internal.h:42:
+#include <asm/uaccess.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: kernel/ckrm/rbce/rbce_internal.h:47:
+extern int rbce_mkdir(struct inode *, struct dentry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#541: FILE: kernel/ckrm/rbce/rbce_internal.h:47:
+extern int rbce_mkdir(struct inode *, struct dentry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#541: FILE: kernel/ckrm/rbce/rbce_internal.h:47:
+extern int rbce_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#541: FILE: kernel/ckrm/rbce/rbce_internal.h:47:
+extern int rbce_mkdir(struct inode *, struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: kernel/ckrm/rbce/rbce_internal.h:48:
+extern int rbce_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#542: FILE: kernel/ckrm/rbce/rbce_internal.h:48:
+extern int rbce_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#542: FILE: kernel/ckrm/rbce/rbce_internal.h:48:
+extern int rbce_rmdir(struct inode *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#543: FILE: kernel/ckrm/rbce/rbce_internal.h:49:
+extern int rbce_create_config(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: kernel/ckrm/rbce/rbce_internal.h:50:
+extern int rbce_clear_config(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: kernel/ckrm/rbce/rbce_internal.h:52:
+extern void rbce_get_rule(const char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#546: FILE: kernel/ckrm/rbce/rbce_internal.h:52:
+extern void rbce_get_rule(const char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#546: FILE: kernel/ckrm/rbce/rbce_internal.h:52:
+extern void rbce_get_rule(const char *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: kernel/ckrm/rbce/rbce_internal.h:53:
+extern int rbce_rule_exists(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#547: FILE: kernel/ckrm/rbce/rbce_internal.h:53:
+extern int rbce_rule_exists(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: kernel/ckrm/rbce/rbce_internal.h:54:
+extern int rbce_change_rule(const char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#548: FILE: kernel/ckrm/rbce/rbce_internal.h:54:
+extern int rbce_change_rule(const char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#548: FILE: kernel/ckrm/rbce/rbce_internal.h:54:
+extern int rbce_change_rule(const char *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: kernel/ckrm/rbce/rbce_internal.h:55:
+extern int rbce_delete_rule(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#549: FILE: kernel/ckrm/rbce/rbce_internal.h:55:
+extern int rbce_delete_rule(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#550: FILE: kernel/ckrm/rbce/rbce_internal.h:56:
+extern int rbce_set_tasktag(int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#550: FILE: kernel/ckrm/rbce/rbce_internal.h:56:
+extern int rbce_set_tasktag(int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#550: FILE: kernel/ckrm/rbce/rbce_internal.h:56:
+extern int rbce_set_tasktag(int, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#551: FILE: kernel/ckrm/rbce/rbce_internal.h:57:
+extern int rbce_rename_rule(const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#551: FILE: kernel/ckrm/rbce/rbce_internal.h:57:
+extern int rbce_rename_rule(const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#551: FILE: kernel/ckrm/rbce/rbce_internal.h:57:
+extern int rbce_rename_rule(const char *, const char *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#559: FILE: kernel/ckrm/rbce/rbce_main.c:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#595: FILE: kernel/ckrm/rbce/rbce_main.c:37:
+}
+int rbce_rule_exists(const char *a)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#599: FILE: kernel/ckrm/rbce/rbce_main.c:41:
+}
+int rbce_change_rule(const char *a, char *b)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#603: FILE: kernel/ckrm/rbce/rbce_main.c:45:
+}
+int rbce_delete_rule(const char *a)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#607: FILE: kernel/ckrm/rbce/rbce_main.c:49:
+}
+int rbce_set_tasktag(int i, char *a)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#611: FILE: kernel/ckrm/rbce/rbce_main.c:53:
+}
+int rbce_rename_rule(const char *a, const char *b)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#623: FILE: kernel/ckrm/rbce/rbce_main.c:65:
+	printk(KERN_INFO "Installing \'%s\' module\n", modname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#639: FILE: kernel/ckrm/rbce/rbce_main.c:81:
+	printk(KERN_ERR "%s: error installing rc=%d line=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: kernel/ckrm/rbce/rbce_main.c:82:
+	printk(KERN_ERR "%s: error installing rc=%d line=%d\n",
+		__FUNCTION__, rc, line);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#640: FILE: kernel/ckrm/rbce/rbce_main.c:82:
+		__FUNCTION__, rc, line);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#646: FILE: kernel/ckrm/rbce/rbce_main.c:88:
+	printk(KERN_INFO "Removing \'%s\' module\n", modname);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 49 warnings, 27 checks, 577 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
