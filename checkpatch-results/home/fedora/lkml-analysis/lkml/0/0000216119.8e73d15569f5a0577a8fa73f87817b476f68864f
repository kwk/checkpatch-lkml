WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
same mechanisms as used for memory hotplug and NUMA node migration. From what I

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#102: 
and buffers but thats in the future. For the moment, the only real control
                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'suprise' may be misspelled - perhaps 'surprise'?
#131: 
suprise. The fragmentation there will really depend on when buffer pages were
^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: fs/buffer.c:1207:
+	page = find_or_create_page(inode->i_mapping, index,
+					GFP_NOFS | __GFP_USERRCLM);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#180: FILE: fs/buffer.c:3070:
+						   gfp_flags|__GFP_KERNRCLM);
 						            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/dcache.c:695:
+^I^I^I  ^I  GFP_KERNEL|__GFP_KERNRCLM);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: fs/dcache.c:695:
+^I^I^I  ^I  GFP_KERNEL|__GFP_KERNRCLM);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: fs/dcache.c:695:
+	dentry = kmem_cache_alloc(dentry_cache,
+			  	  GFP_KERNEL|__GFP_KERNRCLM);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#193: FILE: fs/dcache.c:695:
+			  	  GFP_KERNEL|__GFP_KERNRCLM);
 			  	            ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#205: FILE: fs/ext2/super.c:137:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#205: FILE: fs/ext2/super.c:137:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);
 	                                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#217: FILE: fs/ext3/super.c:445:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_KERNRCLM);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#229: FILE: fs/ntfs/inode.c:317:
+			SLAB_NOFS|__GFP_KERNRCLM);
 			         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#239: FILE: fs/ntfs/inode.c:343:
+					    SLAB_NOFS|__GFP_KERNRCLM);
 					             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#261: FILE: include/linux/gfp.h:49:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#261: FILE: include/linux/gfp.h:49:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#261: FILE: include/linux/gfp.h:49:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#261: FILE: include/linux/gfp.h:49:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#262: FILE: include/linux/gfp.h:50:
+			__GFP_KERNRCLM|__GFP_USERRCLM)
 			              ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#330: FILE: mm/page_alloc.c:43:
+int fallback_count=0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#330: FILE: mm/page_alloc.c:43:
+int fallback_count=0;
                   ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#331: FILE: mm/page_alloc.c:44:
+int drastic_fallback_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#331: FILE: mm/page_alloc.c:44:
+int drastic_fallback_count=0;
                           ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#332: FILE: mm/page_alloc.c:45:
+int global_steal=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#332: FILE: mm/page_alloc.c:45:
+int global_steal=0;
                 ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#333: FILE: mm/page_alloc.c:46:
+int global_refill=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#333: FILE: mm/page_alloc.c:46:
+int global_refill=0;
                  ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#334: FILE: mm/page_alloc.c:47:
+int kernnorclm_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#334: FILE: mm/page_alloc.c:47:
+int kernnorclm_count=0;
                     ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#335: FILE: mm/page_alloc.c:48:
+int kernrclm_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#335: FILE: mm/page_alloc.c:48:
+int kernrclm_count=0;
                   ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#336: FILE: mm/page_alloc.c:49:
+int userrclm_count=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#336: FILE: mm/page_alloc.c:49:
+int userrclm_count=0;
                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: mm/page_alloc.c:53:
+ ^I{ ALLOC_KERNNORCLM, ALLOC_KERNRCLM,   ALLOC_USERRCLM },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#340: FILE: mm/page_alloc.c:53:
+ ^I{ ALLOC_KERNNORCLM, ALLOC_KERNRCLM,   ALLOC_USERRCLM },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: mm/page_alloc.c:53:
+ ^I{ ALLOC_KERNNORCLM, ALLOC_KERNRCLM,   ALLOC_USERRCLM },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: mm/page_alloc.c:54:
+ ^I{ ALLOC_KERNRCLM,   ALLOC_KERNNORCLM, ALLOC_USERRCLM },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: mm/page_alloc.c:54:
+ ^I{ ALLOC_KERNRCLM,   ALLOC_KERNNORCLM, ALLOC_USERRCLM },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: mm/page_alloc.c:54:
+ ^I{ ALLOC_KERNRCLM,   ALLOC_KERNNORCLM, ALLOC_USERRCLM },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: mm/page_alloc.c:55:
+ ^I{ ALLOC_USERRCLM,   ALLOC_KERNNORCLM, ALLOC_KERNRCLM }$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#342: FILE: mm/page_alloc.c:55:
+ ^I{ ALLOC_USERRCLM,   ALLOC_KERNNORCLM, ALLOC_KERNRCLM }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: mm/page_alloc.c:55:
+ ^I{ ALLOC_USERRCLM,   ALLOC_KERNNORCLM, ALLOC_KERNRCLM }$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#364: FILE: mm/page_alloc.c:115:
+static int get_pageblock_type(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: mm/page_alloc.c:121:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#370: FILE: mm/page_alloc.c:121:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#373: FILE: mm/page_alloc.c:124:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#373: FILE: mm/page_alloc.c:124:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#378: FILE: mm/page_alloc.c:129:
+static void set_pageblock_type(struct page *page, int type) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: mm/page_alloc.c:134:
+	int bitidx = pageidx * 2;
+	bit1 = bit2 = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#383: FILE: mm/page_alloc.c:134:
+	bit1 = bit2 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: mm/page_alloc.c:138:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: mm/page_alloc.c:144:
+		set_bit(bitidx+1, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#398: FILE: mm/page_alloc.c:149:
+	clear_bit(bitidx+1, zone->free_area_usemap);
 	                ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#400: FILE: mm/page_alloc.c:151:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#420: FILE: mm/page_alloc.c:273:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#424: FILE: mm/page_alloc.c:277:
+	if (order >= MAX_ORDER-1) {
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global
#425: FILE: mm/page_alloc.c:278:
+		area = &(zone->free_area_global);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#468: FILE: mm/page_alloc.c:448:
+	int global_split=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#472: FILE: mm/page_alloc.c:452:
+	int retry_count=0;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#473: FILE: mm/page_alloc.c:453:
+	int retry_count=0;
+	if (flags & __GFP_USERRCLM) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#477: FILE: mm/page_alloc.c:457:
+	}
+	else if (flags & __GFP_KERNRCLM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#502: FILE: mm/page_alloc.c:486:
+	if (!global_split && !list_empty(&(zone->free_area_global.free_list))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#502: FILE: mm/page_alloc.c:486:
+	if (!global_split && !list_empty(&(zone->free_area_global.free_list))){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/page_alloc.c:495:
+		list_add(&page->lru,
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#511: FILE: mm/page_alloc.c:495:
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));
 			                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][MAX_ORDER-1].free_list
#511: FILE: mm/page_alloc.c:495:
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#513: FILE: mm/page_alloc.c:497:
+		global_split=1;
 		            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#527: FILE: mm/page_alloc.c:511:
+	if (retry_count != ALLOC_TYPES) goto retry;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: mm/page_alloc.c:568:
+	int order,type;
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: mm/page_alloc.c:579:
+			list_for_each(curr,
+				&zone->free_area_lists[type][order].free_list)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#620: FILE: mm/page_alloc.c:1266:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: mm/page_alloc.c:1268:
+				list_for_each(elem,
+					&zone->free_area_lists[type][order].free_list)

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#643: FILE: mm/page_alloc.c:1588:
+	/* Initialse the three size ordered lists of free_areas */
 	   ^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#644: FILE: mm/page_alloc.c:1589:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#645: FILE: mm/page_alloc.c:1590:
+	for (type=0; type < ALLOC_TYPES; type++) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#650: FILE: mm/page_alloc.c:1595:
+			if (order == MAX_ORDER-1) {
 			                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: mm/page_alloc.c:1602:
+^I^I  ^I^I(unsigned long*)alloc_bootmem_node(pgdat,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#660: FILE: mm/page_alloc.c:1602:
+^I^I  ^I^I(unsigned long*)alloc_bootmem_node(pgdat,$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#660: FILE: mm/page_alloc.c:1602:
+		  		(unsigned long*)alloc_bootmem_node(pgdat,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: mm/page_alloc.c:1603:
+^I^I^I^I^I^I^I   ^I bitmap_size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#661: FILE: mm/page_alloc.c:1603:
+^I^I^I^I^I^I^I   ^I bitmap_size);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#667: FILE: mm/page_alloc.c:1609:
+	bitmap_size = pages_to_bitmap_size(MAX_ORDER-1, size);
 	                                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#669: FILE: mm/page_alloc.c:1611:
+		(unsigned long*)alloc_bootmem_node(pgdat,

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: mm/page_alloc.c:1612:
+^I^I^I^I^I   ^I   bitmap_size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#670: FILE: mm/page_alloc.c:1612:
+^I^I^I^I^I   ^I   bitmap_size);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: mm/page_alloc.c:1734:
+		memset((unsigned long *)zone->free_area_usemap, ALLOC_KERNNORCLM,
+			(size >> MAX_ORDER) * 2);

WARNING:LINE_SPACING: Missing a blank line after declarations
#705: FILE: mm/page_alloc.c:1824:
+		unsigned long nr_bufs = 0;
+		for (order = 0; order < MAX_ORDER-1; ++order) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#705: FILE: mm/page_alloc.c:1824:
+		for (order = 0; order < MAX_ORDER-1; ++order) {
 		                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#708: FILE: mm/page_alloc.c:1827:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#709: FILE: mm/page_alloc.c:1828:
+				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#717: FILE: mm/page_alloc.c:1836:
+		list_for_each(elem, &(zone->free_area_global.free_list))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#726: FILE: mm/page_alloc.c:1845:
+	seq_printf(m, "\nPer-allocation-type statistics");

WARNING:LINE_SPACING: Missing a blank line after declarations
#733: FILE: mm/page_alloc.c:1852:
+		unsigned long nr_bufs = 0;
+		for (type=0; type < ALLOC_TYPES; type++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#733: FILE: mm/page_alloc.c:1852:
+		for (type=0; type < ALLOC_TYPES; type++) {
 		         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: mm/page_alloc.c:1854:
+			seq_printf(m, "\nNode %d, zone %8s, type %10s",
+					pgdat->node_id, zone->name,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#744: FILE: mm/page_alloc.c:1860:
+				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#751: FILE: mm/page_alloc.c:1867:
+		seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: mm/page_alloc.c:1869:
+		seq_printf(m, "Node %d, zone %8s, type %10s",
+					pgdat->node_id, zone->name,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#756: FILE: mm/page_alloc.c:1872:
+		list_for_each(elem, &(zone->free_area_global.free_list))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#765: FILE: mm/page_alloc.c:1881:
+	seq_printf(m, "\nGlobal beancounters\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#773: FILE: mm/page_alloc.c:1889:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216119.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 22 warnings, 40 checks, 562 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216119.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
