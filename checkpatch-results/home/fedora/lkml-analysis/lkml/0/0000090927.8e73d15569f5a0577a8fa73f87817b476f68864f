WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#145: FILE: fs/ext2/balloc.c:139:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: fs/ext2/balloc.c:152:
+	printk("Block Allocation Reservation Windows Map (%s):\n", fn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: fs/ext2/balloc.c:156:
+			printk("reservation window 0x%p "

WARNING:SPLIT_STRING: quoted string split across lines
#163: FILE: fs/ext2/balloc.c:157:
+			printk("reservation window 0x%p "
+			       "start:  %d, end:  %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: fs/ext2/balloc.c:160:
+			printk("Bad reservation %p (start >= end)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: fs/ext2/balloc.c:165:
+			printk("Bad reservation %p (prev->end >= start)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#177: FILE: fs/ext2/balloc.c:171:
+				printk("Restarting reservation walk in verbose mode\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: fs/ext2/balloc.c:179:
+	printk("Window map complete.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: fs/ext2/balloc.c:181:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#189: FILE: fs/ext2/balloc.c:183:
+}
+#define rsv_window_dump(root, verbose) \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#190: FILE: fs/ext2/balloc.c:184:
+	__rsv_window_dump((root), (verbose), __FUNCTION__)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: fs/ext2/balloc.c:191:
+goal_in_my_reservation(struct ext2_reserve_window *rsv, int goal,
+			unsigned int group, struct super_block * sb)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: fs/ext2/balloc.c:191:
+			unsigned int group, struct super_block * sb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rsv->_rsv_start > group_last_block'
#205: FILE: fs/ext2/balloc.c:199:
+	if ((rsv->_rsv_start > group_last_block) ||
+	    (rsv->_rsv_end < group_first_block))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rsv->_rsv_end < group_first_block'
#205: FILE: fs/ext2/balloc.c:199:
+	if ((rsv->_rsv_start > group_last_block) ||
+	    (rsv->_rsv_end < group_first_block))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'goal >= 0'
#208: FILE: fs/ext2/balloc.c:202:
+	if ((goal >= 0) && ((goal + group_first_block < rsv->_rsv_start)
+		|| (goal + group_first_block > rsv->_rsv_end)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#209: FILE: fs/ext2/balloc.c:203:
+	if ((goal >= 0) && ((goal + group_first_block < rsv->_rsv_start)
+		|| (goal + group_first_block > rsv->_rsv_end)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: fs/ext2/balloc.c:246:
+void ext2_rsv_window_add(struct super_block *sb,
+		    struct ext2_reserve_window_node *rsv)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#258: FILE: fs/ext2/balloc.c:252:
+	struct rb_node ** p = &root->rb_node;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/ext2/balloc.c:253:
+	struct rb_node * parent = NULL;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#262: FILE: fs/ext2/balloc.c:256:
+	while (*p)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: fs/ext2/balloc.c:266:
+			BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: fs/ext2/balloc.c:301:
+^I ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: fs/ext2/balloc.c:301:
+^I ^I/*$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: fs/ext2/balloc.c:428:
+bitmap_search_next_usable_block(int start, struct buffer_head *bh,
+					int maxblocks)

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: fs/ext2/balloc.c:460:
+		int end_goal = (start + 63) & ~63;
+		if (end_goal > maxblocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: fs/ext2/balloc.c:489:
+ext2_try_to_allocate(struct super_block *sb, int group,
+			struct buffer_head *bitmap_bh, int goal,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start <= goal'
#450: FILE: fs/ext2/balloc.c:509:
+		if ((start <= goal) && (goal < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'goal < end'
#450: FILE: fs/ext2/balloc.c:509:
+		if ((start <= goal) && (goal < end))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#462: FILE: fs/ext2/balloc.c:521:
+	BUG_ON(start > EXT2_BLOCKS_PER_GROUP(sb));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/ext2/balloc.c:532:
+			for (i = 0; i < 7 && goal > start &&
+				     !ext2_test_bit(goal - 1, bitmap_bh->b_data);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#494: FILE: fs/ext2/balloc.c:553:
+	while (num < *count && goal < end
+		&& !ext2_set_bit_atomic(sb_bgl_lock(EXT2_SB(sb), group), goal, bitmap_bh->b_data)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: fs/ext2/balloc.c:565:
+ * ^Ifind_next_reservable_window():$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#511: FILE: fs/ext2/balloc.c:570:
+ * ^I@search_head: the head of the searching list;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: fs/ext2/balloc.c:578:
+ * ^I@size: the target new reservation window size$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#521: FILE: fs/ext2/balloc.c:580:
+ * ^I@group_first_block: the first block we consider to start$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#524: FILE: fs/ext2/balloc.c:583:
+ * ^I@last_block:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: fs/ext2/balloc.c:591:
+ * ^Ibasically we search from the given range, rather than the whole$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: fs/ext2/balloc.c:592:
+ * ^Ireservation double linked list, (start_block, last_block)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#534: FILE: fs/ext2/balloc.c:593:
+ * ^Ito find a free region that is of my size and has not$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: fs/ext2/balloc.c:594:
+ * ^Ibeen reserved.$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#538: FILE: fs/ext2/balloc.c:597:
+static int find_next_reservable_window(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#541: FILE: fs/ext2/balloc.c:600:
+				struct super_block * sb, int start_block,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#574: FILE: fs/ext2/balloc.c:633:
+		rsv = list_entry(next,struct ext2_reserve_window_node,rsv_node);
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#574: FILE: fs/ext2/balloc.c:633:
+		rsv = list_entry(next,struct ext2_reserve_window_node,rsv_node);
 		                                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: fs/ext2/balloc.c:646:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#587: FILE: fs/ext2/balloc.c:646:
+^I^I ^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev != my_rsv'
#602: FILE: fs/ext2/balloc.c:661:
+	if ((prev != my_rsv) && (!rsv_is_empty(&my_rsv->rsv_window)))

WARNING:TYPO_SPELLING: 'avaliable' may be misspelled - perhaps 'available'?
#606: FILE: fs/ext2/balloc.c:665:
+	 * Let's book the whole avaliable window for now.  We will check the
 	                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#623: FILE: fs/ext2/balloc.c:682:
+ * ^Ialloc_new_reservation()--allocate a new reservation window$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: fs/ext2/balloc.c:719:
+static int alloc_new_reservation(struct ext2_reserve_window_node *my_rsv,
+		int goal, struct super_block *sb,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'my_rsv->rsv_start <= group_end_block'
#698: FILE: fs/ext2/balloc.c:756:
+		if ((my_rsv->rsv_start <= group_end_block) &&
+				(my_rsv->rsv_end > group_end_block) &&
+				(start_block >= my_rsv->rsv_start))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'my_rsv->rsv_end > group_end_block'
#698: FILE: fs/ext2/balloc.c:756:
+		if ((my_rsv->rsv_start <= group_end_block) &&
+				(my_rsv->rsv_end > group_end_block) &&
+				(start_block >= my_rsv->rsv_start))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_block >= my_rsv->rsv_start'
#698: FILE: fs/ext2/balloc.c:756:
+		if ((my_rsv->rsv_start <= group_end_block) &&
+				(my_rsv->rsv_end > group_end_block) &&
+				(start_block >= my_rsv->rsv_start))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: fs/ext2/balloc.c:757:
+		if ((my_rsv->rsv_start <= group_end_block) &&
+				(my_rsv->rsv_end > group_end_block) &&

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#713: FILE: fs/ext2/balloc.c:771:
+			my_rsv->rsv_goal_size= size;
 			                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: fs/ext2/balloc.c:790:
+	ret = find_next_reservable_window(search_head, my_rsv, sb,
+						start_block, group_end_block);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#761: FILE: fs/ext2/balloc.c:811:
+	first_free_block = bitmap_search_next_usable_block(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: fs/ext2/balloc.c:846:
+static void try_to_extend_reservation(struct ext2_reserve_window_node *my_rsv,
+			struct super_block *sb, int size)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#809: FILE: fs/ext2/balloc.c:852:
+	printk("req. rsv size %d\n", size);

CHECK:BRACES: braces {} should be used on all arms of this statement
#816: FILE: fs/ext2/balloc.c:859:
+	if (!next)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#818: FILE: fs/ext2/balloc.c:861:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: fs/ext2/balloc.c:894:
+ext2_try_to_allocate_with_rsv(struct super_block *sb, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: fs/ext2/balloc.c:895:
+ext2_try_to_allocate_with_rsv(struct super_block *sb, 
+			unsigned int group, struct buffer_head *bitmap_bh,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#859: FILE: fs/ext2/balloc.c:896:
+			int goal, struct ext2_reserve_window_node * my_rsv,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#872: FILE: fs/ext2/balloc.c:909:
+	if (my_rsv == NULL ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!my_rsv"
#872: FILE: fs/ext2/balloc.c:909:
+	if (my_rsv == NULL ) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret < 0'
#901: FILE: fs/ext2/balloc.c:938:
+		if (rsv_is_empty(&my_rsv->rsv_window) || (ret < 0) ||
+			!goal_in_my_reservation(&my_rsv->rsv_window, goal, group, sb)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: fs/ext2/balloc.c:939:
+		if (rsv_is_empty(&my_rsv->rsv_window) || (ret < 0) ||
+			!goal_in_my_reservation(&my_rsv->rsv_window, goal, group, sb)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: fs/ext2/balloc.c:943:
+			ret = alloc_new_reservation(my_rsv, goal, sb,
+							group, bitmap_bh);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#912: FILE: fs/ext2/balloc.c:949:
+		} else if (goal > 0 && (my_rsv->rsv_end-goal+1) < *count)
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#912: FILE: fs/ext2/balloc.c:949:
+		} else if (goal > 0 && (my_rsv->rsv_end-goal+1) < *count)
 		                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: fs/ext2/balloc.c:951:
+			try_to_extend_reservation(my_rsv, sb,
+					*count-my_rsv->rsv_end + goal - 1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#914: FILE: fs/ext2/balloc.c:951:
+					*count-my_rsv->rsv_end + goal - 1);
 					      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'my_rsv->rsv_end < group_first_block'
#916: FILE: fs/ext2/balloc.c:953:
+		if ((my_rsv->rsv_start >= group_first_block + EXT2_BLOCKS_PER_GROUP(sb))
+		    || (my_rsv->rsv_end < group_first_block))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#917: FILE: fs/ext2/balloc.c:954:
+		if ((my_rsv->rsv_start >= group_first_block + EXT2_BLOCKS_PER_GROUP(sb))
+		    || (my_rsv->rsv_end < group_first_block))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#918: FILE: fs/ext2/balloc.c:955:
+			BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->s_resgid'
#937: FILE: fs/ext2/balloc.c:974:
+	if (free_blocks < root_blocks + 1 && !capable(CAP_SYS_RESOURCE) &&
+		sbi->s_resuid != current->fsuid &&
+		(sbi->s_resgid == 0 || !in_group_p (sbi->s_resgid))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: fs/ext2/balloc.c:975:
+	if (free_blocks < root_blocks + 1 && !capable(CAP_SYS_RESOURCE) &&
+		sbi->s_resuid != current->fsuid &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#939: FILE: fs/ext2/balloc.c:976:
+		(sbi->s_resgid == 0 || !in_group_p (sbi->s_resgid))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1003: FILE: fs/ext2/balloc.c:1015:
+		printk("ext2_new_blocks: nonexistent device");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext2_new_blocks', this function's name, in a string
#1003: FILE: fs/ext2/balloc.c:1015:
+		printk("ext2_new_blocks: nonexistent device");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1034: FILE: fs/ext2/balloc.c:1039:
+	if (block_i && ((windowsz = block_i->rsv_window_node.rsv_goal_size) > 0)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1034: FILE: fs/ext2/balloc.c:1039:
+	if (block_i && ((windowsz = block_i->rsv_window_node.rsv_goal_size) > 0)) {
+		my_rsv = &block_i->rsv_window_node;
 	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'free_blocks < windowsz'
#1074: FILE: fs/ext2/balloc.c:1067:
+	if (my_rsv && (free_blocks < windowsz)
+		&& (rsv_is_empty(&my_rsv->rsv_window)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1075: FILE: fs/ext2/balloc.c:1068:
+	if (my_rsv && (free_blocks < windowsz)
+		&& (rsv_is_empty(&my_rsv->rsv_window)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: fs/ext2/balloc.c:1078:
+		ret_block = ext2_try_to_allocate_with_rsv(sb, group_no,
+					bitmap_bh, ret_block, my_rsv, &num);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1102: FILE: fs/ext2/balloc.c:1084:
+	smp_rmb();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1160: FILE: fs/ext2/balloc.c:1105:
+		if (free_blocks <= (windowsz/2))
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: fs/ext2/balloc.c:1113:
+		ret_block = ext2_try_to_allocate_with_rsv(sb, group_no,
+					bitmap_bh, -1, my_rsv, &num);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1169: FILE: fs/ext2/balloc.c:1114:
+^I^Iif (ret_block >= 0) $

WARNING:TYPO_SPELLING: 'ealier' may be misspelled - perhaps 'earlier'?
#1173: FILE: fs/ext2/balloc.c:1118:
+	 * We may end up a bogus ealier ENOSPC error due to
 	                         ^^^^^^

WARNING:TYPO_SPELLING: 'avaliable' may be misspelled - perhaps 'available'?
#1175: FILE: fs/ext2/balloc.c:1120:
+	 * there maybe indeed free blocks avaliable on disk
 	                                  ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1208: FILE: fs/ext2/balloc.c:1144:
+	    in_range(target_block, le32_to_cpu(gdp->bg_inode_table),
+		      EXT2_SB(sb)->s_itb_per_group) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1210: FILE: fs/ext2/balloc.c:1146:
+	    in_range(target_block + num - 1, le32_to_cpu(gdp->bg_inode_table),
+		      EXT2_SB(sb)->s_itb_per_group))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1212: FILE: fs/ext2/balloc.c:1148:
+		ext2_error(sb, "ext2_new_blocks",
 			    "Allocating block in system zone - "

WARNING:SPLIT_STRING: quoted string split across lines
#1214: FILE: fs/ext2/balloc.c:1149:
 			    "Allocating block in system zone - "
+			    "blocks from %u, length %lu", target_block, num);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1220: FILE: fs/ext2/balloc.c:1153:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1226: FILE: fs/ext2/balloc.c:1159:
+		ext2_error(sb, "ext2_new_blocks",
 			    "block(%d) >= blocks count(%d) - "

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1275: FILE: fs/ext2/balloc.c:1178:
+	DQUOT_FREE_BLOCK(inode, *count-num);
 	                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1362: FILE: fs/ext2/ext2.h:82:
+extern int ext2_new_block (struct inode *, unsigned long, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1362: FILE: fs/ext2/ext2.h:82:
+extern int ext2_new_block (struct inode *, unsigned long, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1362: FILE: fs/ext2/ext2.h:82:
+extern int ext2_new_block (struct inode *, unsigned long, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1362: FILE: fs/ext2/ext2.h:82:
+extern int ext2_new_block (struct inode *, unsigned long, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1362: FILE: fs/ext2/ext2.h:82:
+extern int ext2_new_block (struct inode *, unsigned long, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1363: FILE: fs/ext2/ext2.h:83:
+extern int ext2_new_blocks (struct inode *, unsigned long, unsigned long *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1363: FILE: fs/ext2/ext2.h:83:
+extern int ext2_new_blocks (struct inode *, unsigned long, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1363: FILE: fs/ext2/ext2.h:83:
+extern int ext2_new_blocks (struct inode *, unsigned long, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1363: FILE: fs/ext2/ext2.h:83:
+extern int ext2_new_blocks (struct inode *, unsigned long, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#1363: FILE: fs/ext2/ext2.h:83:
+extern int ext2_new_blocks (struct inode *, unsigned long, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1363: FILE: fs/ext2/ext2.h:83:
+extern int ext2_new_blocks (struct inode *, unsigned long, unsigned long *, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1371: FILE: fs/ext2/ext2.h:92:
+extern void ext2_discard_reservation (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1371: FILE: fs/ext2/ext2.h:92:
+extern void ext2_discard_reservation (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1371: FILE: fs/ext2/ext2.h:92:
+extern void ext2_discard_reservation (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1372: FILE: fs/ext2/ext2.h:93:
+extern int ext2_should_retry_alloc(struct super_block *sb, int *retries);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1373: FILE: fs/ext2/ext2.h:94:
+extern void ext2_init_block_alloc_info(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1373: FILE: fs/ext2/ext2.h:94:
+extern void ext2_init_block_alloc_info(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: fs/ext2/ext2.h:95:
+extern void ext2_rsv_window_add(struct super_block *sb, struct ext2_reserve_window_node *rsv);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1390: FILE: fs/ext2/ext2.h:142:
+extern void ext2_prepare_super (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1390: FILE: fs/ext2/ext2.h:142:
+extern void ext2_prepare_super (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1390: FILE: fs/ext2/ext2.h:142:
+extern void ext2_prepare_super (struct super_block *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1391: FILE: fs/ext2/ext2.h:143:
+extern void __ext2_mark_fs_clean (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1391: FILE: fs/ext2/ext2.h:143:
+extern void __ext2_mark_fs_clean (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1391: FILE: fs/ext2/ext2.h:143:
+extern void __ext2_mark_fs_clean (struct super_block *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1392: FILE: fs/ext2/ext2.h:144:
+extern void ext2_mark_fs_dirty (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1392: FILE: fs/ext2/ext2.h:144:
+extern void ext2_mark_fs_dirty (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1392: FILE: fs/ext2/ext2.h:144:
+extern void ext2_mark_fs_dirty (struct super_block *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1393: FILE: fs/ext2/ext2.h:145:
+extern void ext2_mark_inode_dirty (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1393: FILE: fs/ext2/ext2.h:145:
+extern void ext2_mark_inode_dirty (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1393: FILE: fs/ext2/ext2.h:145:
+extern void ext2_mark_inode_dirty (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1394: FILE: fs/ext2/ext2.h:146:
+extern void ext2_orphan_add(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1394: FILE: fs/ext2/ext2.h:146:
+extern void ext2_orphan_add(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1395: FILE: fs/ext2/ext2.h:147:
+extern void ext2_orphan_del(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1395: FILE: fs/ext2/ext2.h:147:
+extern void ext2_orphan_del(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1407: FILE: fs/ext2/ext2.h:177:
+extern int ext2_dirtyd(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1407: FILE: fs/ext2/ext2.h:177:
+extern int ext2_dirtyd(void *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1416: FILE: fs/ext2/file.c:34:
+		ext2_discard_reservation (inode);

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#1588: FILE: fs/ext2/inode.c:299:
+				 Indirect *partial)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block_i->last_alloc_physical_block != 0'
#1615: FILE: fs/ext2/inode.c:309:
+	if (block_i && (block == block_i->last_alloc_logical_block + 1)
+		&& (block_i->last_alloc_physical_block != 0)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1616: FILE: fs/ext2/inode.c:310:
+	if (block_i && (block == block_i->last_alloc_logical_block + 1)
+		&& (block_i->last_alloc_physical_block != 0)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1627: FILE: fs/ext2/inode.c:321:
+ * ^I@branch: chain of indirect blocks$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1636: FILE: fs/ext2/inode.c:330:
+ext2_blks_to_allocate(Indirect * branch, int k, unsigned long blks,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1637: FILE: fs/ext2/inode.c:331:
+ext2_blks_to_allocate(Indirect * branch, int k, unsigned long blks,
+		int blocks_to_boundary)

WARNING:TYPO_SPELLING: 'hanel' may be misspelled - perhaps 'handle'?
#1646: FILE: fs/ext2/inode.c:340:
+		/* right now don't hanel cross boundary allocation */
 		                   ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1656: FILE: fs/ext2/inode.c:350:
+	while (count < blks && count <= blocks_to_boundary
+		&& le32_to_cpu(*(branch[0].p + count)) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1673: FILE: fs/ext2/inode.c:367:
+static int ext2_alloc_blocks(struct inode *inode,
+			unsigned long goal, int indirect_blks, int blks,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1695: FILE: fs/ext2/inode.c:389:
+		current_block = ext2_new_blocks(inode,goal,&count,err);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1695: FILE: fs/ext2/inode.c:389:
+		current_block = ext2_new_blocks(inode,goal,&count,err);
 		                                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1695: FILE: fs/ext2/inode.c:389:
+		current_block = ext2_new_blocks(inode,goal,&count,err);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1695: FILE: fs/ext2/inode.c:389:
+		current_block = ext2_new_blocks(inode,goal,&count,err);
 		                                                 ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#1720: FILE: fs/ext2/inode.c:412:
+	for (i = 0; i <index; i++)
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1779: FILE: fs/ext2/inode.c:469:
+		bh = sb_getblk(inode->i_sb, new_blocks[n-1]);
 		                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1787: FILE: fs/ext2/inode.c:476:
+		if ( n == indirect_blks) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1794: FILE: fs/ext2/inode.c:483:
+			for (i=1; i < num; i++)
 			      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1856: FILE: fs/ext2/inode.c:516:
+static void ext2_splice_branch(struct inode *inode,
+			long block, Indirect *where, int num, int blks)

WARNING:REPEATED_WORD: Possible repeated word: 'blocks'
#1880: FILE: fs/ext2/inode.c:531:
+	 * direct blocks blocks

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1885: FILE: fs/ext2/inode.c:536:
+			*(where->p + i ) = cpu_to_le32(current_block++);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1936: FILE: fs/ext2/inode.c:580:
+int ext2_get_blocks(struct inode *inode,
+		sector_t iblock, unsigned long maxblocks,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1957: FILE: fs/ext2/inode.c:596:
+	depth = ext2_block_to_path(inode,iblock,offsets,&blocks_to_boundary);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1957: FILE: fs/ext2/inode.c:596:
+	depth = ext2_block_to_path(inode,iblock,offsets,&blocks_to_boundary);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1957: FILE: fs/ext2/inode.c:596:
+	depth = ext2_block_to_path(inode,iblock,offsets,&blocks_to_boundary);
 	                                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1957: FILE: fs/ext2/inode.c:596:
+	depth = ext2_block_to_path(inode,iblock,offsets,&blocks_to_boundary);
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1988: FILE: fs/ext2/inode.c:620:
+			if (le32_to_cpu(*(chain[depth-1].p+count) ==
 			                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1988: FILE: fs/ext2/inode.c:620:
+			if (le32_to_cpu(*(chain[depth-1].p+count) ==
 			                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2016: FILE: fs/ext2/inode.c:636:
+	 * allocation info here if necessary
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ei->i_block_alloc_info'
#2017: FILE: fs/ext2/inode.c:637:
+	if (S_ISREG(inode->i_mode) && (!ei->i_block_alloc_info))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2031: FILE: fs/ext2/inode.c:649:
+	count = ext2_blks_to_allocate(partial, indirect_blks,
+					maxblocks, blocks_to_boundary);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2060: FILE: fs/ext2/inode.c:673:
+	map_bh(bh_result, inode->i_sb, le32_to_cpu(chain[depth-1].key));
 	                                                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2081: FILE: fs/ext2/inode.c:695:
+	unsigned max_blocks = bh_result->b_size >> inode->i_blkbits;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2090: FILE: fs/ext2/inode.c:704:
+
+}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2185: FILE: fs/ext2/ioctl.c:82:
+		if (test_opt(inode->i_sb, RESERVATION)
+			&& S_ISREG(inode->i_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2186: FILE: fs/ext2/ioctl.c:83:
+			&& S_ISREG(inode->i_mode)
+			&& ei->i_block_alloc_info) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2192: FILE: fs/ext2/ioctl.c:89:
+	case EXT2_IOC_SETRSVSZ: {
+

ERROR:SPACING: spaces required around that '||' (ctx:WxO)
#2193: FILE: fs/ext2/ioctl.c:90:
+		if (!test_opt(inode->i_sb, RESERVATION) ||!S_ISREG(inode->i_mode))
 		                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->fsuid != inode->i_uid'
#2199: FILE: fs/ext2/ioctl.c:96:
+		if ((current->fsuid != inode->i_uid) && !capable(CAP_FOWNER))

ERROR:SPACING: space required before the open brace '{'
#2219: FILE: fs/ext2/ioctl.c:116:
+		if (ei->i_block_alloc_info){

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2220: FILE: fs/ext2/ioctl.c:117:
+			struct ext2_reserve_window_node *rsv = &ei->i_block_alloc_info->rsv_window_node;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#2221: FILE: fs/ext2/ioctl.c:118:
+			struct ext2_reserve_window_node *rsv = &ei->i_block_alloc_info->rsv_window_node;
+			rsv->rsv_goal_size = rsv_window_size;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2265: FILE: fs/ext2/state.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2318: FILE: fs/ext2/state.c:54:
+			 * sync, recheck */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2322: FILE: fs/ext2/state.c:58:
+				printk(KERN_DEBUG "fs dirtied during sync\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2350: FILE: fs/ext2/state.c:86:
+	printk(KERN_DEBUG "ext2: dirty:%u clean:%u total:%u percent clean: %u\n",

CHECK:SPACING: No space is necessary after a cast
#2356: FILE: fs/ext2/state.c:92:
+	struct super_block *sb = (struct super_block *) arg;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2358: FILE: fs/ext2/state.c:94:
+	printk(KERN_INFO "ext2_dirtyd starting, interval %d seconds\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext2_dirtyd', this function's name, in a string
#2358: FILE: fs/ext2/state.c:94:
+	printk(KERN_INFO "ext2_dirtyd starting, interval %d seconds\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2369: FILE: fs/ext2/state.c:105:
+^I} $

CHECK:CAMELCASE: Avoid CamelCase: <Opt_usrquota>
#2440: FILE: fs/ext2/super.c:299:
+	Opt_usrquota, Opt_grpquota, Opt_reservation, Opt_noreservation

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#2440: FILE: fs/ext2/super.c:299:
+	Opt_usrquota, Opt_grpquota, Opt_reservation, Opt_noreservation

CHECK:CAMELCASE: Avoid CamelCase: <Opt_reservation>
#2440: FILE: fs/ext2/super.c:299:
+	Opt_usrquota, Opt_grpquota, Opt_reservation, Opt_noreservation

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noreservation>
#2440: FILE: fs/ext2/super.c:299:
+	Opt_usrquota, Opt_grpquota, Opt_reservation, Opt_noreservation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2459: FILE: fs/ext2/super.c:462:
+			printk("reservations ON\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2463: FILE: fs/ext2/super.c:466:
+			printk("reservations OFF\n");

CHECK:SPACING: No space is necessary after a cast
#2488: FILE: fs/ext2/super.c:683:
+	sbi->s_es = (struct ext2_super_block *) sbi->s_esp + offset;

CHECK:SPACING: No space is necessary after a cast
#2521: FILE: fs/ext2/super.c:781:
+		sbi->s_es = (struct ext2_super_block *) sbi->s_esp + offset;

WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#2531: FILE: fs/ext2/super.c:907:
+	/* per fileystem reservation list head & lock */
 	       ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2537: FILE: fs/ext2/super.c:913:
+	 * _much_ simpler. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2573: FILE: fs/ext2/super.c:980:
+void ext2_prepare_super(struct super_block * sb)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2595: FILE: fs/ext2/super.c:1001:
+static void ext2_end_async_io(struct buffer_head *bh, int uptodate)
                                                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2598: FILE: fs/ext2/super.c:1004:
+	if (uptodate)
 	    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2610: FILE: fs/ext2/super.c:1016:
+static $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2624: FILE: fs/ext2/super.c:1030:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2706: FILE: fs/ext2/super.c:1114:
+		printk(KERN_DEBUG "marking fs dirty\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2709: FILE: fs/ext2/super.c:1117:
+		printk(KERN_DEBUG "marking fs clean\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2723: FILE: fs/ext2/super.c:1131:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2728: FILE: fs/ext2/super.c:1136:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2741: FILE: fs/ext2/super.c:1149:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2778: FILE: fs/ext2/super.c:1186:
+	struct list_head *l;
+	printk(KERN_DEBUG "sb_info orphan list:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2778: FILE: fs/ext2/super.c:1186:
+	printk(KERN_DEBUG "sb_info orphan list:\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2781: FILE: fs/ext2/super.c:1189:
+		struct inode *inode = orphan_list_entry(l);
+		printk(KERN_DEBUG "  "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2781: FILE: fs/ext2/super.c:1189:
+		printk(KERN_DEBUG "  "

WARNING:SPLIT_STRING: quoted string split across lines
#2782: FILE: fs/ext2/super.c:1190:
+		printk(KERN_DEBUG "  "
+		       "inode %s:%ld at %p: mode %o, nlink %d, next %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2784: FILE: fs/ext2/super.c:1192:
+^I^I       inode->i_mode, inode->i_nlink, $

WARNING:RETURN_VOID: void function return statements are not generally useful
#2815: FILE: fs/ext2/super.c:1223:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2853: FILE: fs/ext2/super.c:1261:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3023: FILE: include/linux/ext2_fs_sb.h:31:
+^Istruct rb_node^I ^Irsv_node;$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#3042: FILE: include/linux/ext2_fs_sb.h:50:
+	 * it the the physical block number of the block which was most-recentl

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3059: FILE: include/linux/ext2_fs_sb.h:75:
+	struct ext2_super_block * s_es;	/* Pointer to the in memory super block */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3060: FILE: include/linux/ext2_fs_sb.h:76:
+	char * s_esp;			/* Pointer to kmalloc'd memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3063: FILE: include/linux/ext2_fs_sb.h:79:
+					 * buffer */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090927.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 91 warnings, 88 checks, 2910 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090927.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
