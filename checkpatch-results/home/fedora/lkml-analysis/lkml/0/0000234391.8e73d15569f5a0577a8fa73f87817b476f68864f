ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#54: FILE: arch/ppc64/kernel/iSeries_iommu.c:25:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <HvCallXm_setTce>
#94: FILE: arch/ppc64/kernel/iSeries_iommu.c:63:
+		rc = HvCallXm_setTce((u64)tbl->it_index, (u64)index,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: arch/ppc64/kernel/iSeries_iommu.c:64:
+		rc = HvCallXm_setTce((u64)tbl->it_index, (u64)index,
+				tce.te_word);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: arch/ppc64/kernel/iSeries_iommu.c:67:
+			panic("PCI_DMA: HvCallXm_setTce failed, Rc: 0x%lx\n",
+					rc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: arch/ppc64/kernel/iSeries_iommu.c:81:
+			panic("PCI_DMA: HvCallXm_setTce failed, Rc: 0x%lx\n",
+					rc);

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_Global_Device_List>
#140: FILE: arch/ppc64/kernel/iSeries_iommu.c:95:
+	list_for_each_entry(dp, &iSeries_Global_Device_List, Device_List) {

CHECK:CAMELCASE: Avoid CamelCase: <Device_List>
#140: FILE: arch/ppc64/kernel/iSeries_iommu.c:95:
+	list_for_each_entry(dp, &iSeries_Global_Device_List, Device_List) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dp->iommu_table != NULL'
#141: FILE: arch/ppc64/kernel/iSeries_iommu.c:96:
+		if ((dp->iommu_table != NULL) &&
+		    (dp->iommu_table->it_type == TCE_PCI) &&
+		    (dp->iommu_table->it_offset == tbl->it_offset) &&
+		    (dp->iommu_table->it_index == tbl->it_index) &&
+		    (dp->iommu_table->it_size == tbl->it_size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dp->iommu_table->it_type == TCE_PCI'
#141: FILE: arch/ppc64/kernel/iSeries_iommu.c:96:
+		if ((dp->iommu_table != NULL) &&
+		    (dp->iommu_table->it_type == TCE_PCI) &&
+		    (dp->iommu_table->it_offset == tbl->it_offset) &&
+		    (dp->iommu_table->it_index == tbl->it_index) &&
+		    (dp->iommu_table->it_size == tbl->it_size))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dp->iommu_table->it_offset == tbl->it_offset'
#141: FILE: arch/ppc64/kernel/iSeries_iommu.c:96:
+		if ((dp->iommu_table != NULL) &&
+		    (dp->iommu_table->it_type == TCE_PCI) &&
+		    (dp->iommu_table->it_offset == tbl->it_offset) &&
+		    (dp->iommu_table->it_index == tbl->it_index) &&
+		    (dp->iommu_table->it_size == tbl->it_size))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dp->iommu_table->it_index == tbl->it_index'
#141: FILE: arch/ppc64/kernel/iSeries_iommu.c:96:
+		if ((dp->iommu_table != NULL) &&
+		    (dp->iommu_table->it_type == TCE_PCI) &&
+		    (dp->iommu_table->it_offset == tbl->it_offset) &&
+		    (dp->iommu_table->it_index == tbl->it_index) &&
+		    (dp->iommu_table->it_size == tbl->it_size))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dp->iommu_table->it_size == tbl->it_size'
#141: FILE: arch/ppc64/kernel/iSeries_iommu.c:96:
+		if ((dp->iommu_table != NULL) &&
+		    (dp->iommu_table->it_type == TCE_PCI) &&
+		    (dp->iommu_table->it_offset == tbl->it_offset) &&
+		    (dp->iommu_table->it_index == tbl->it_index) &&
+		    (dp->iommu_table->it_size == tbl->it_size))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dp->iommu_table"
#141: FILE: arch/ppc64/kernel/iSeries_iommu.c:96:
+		if ((dp->iommu_table != NULL) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#159: FILE: arch/ppc64/kernel/iSeries_iommu.c:120:
+	parms = kmalloc(sizeof(*parms), GFP_KERNEL);
 	^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#159: FILE: arch/ppc64/kernel/iSeries_iommu.c:120:
+	parms = kmalloc(sizeof(*parms), GFP_KERNEL);
 	                        ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <LogicalSlot>
#168: FILE: arch/ppc64/kernel/iSeries_iommu.c:127:
+	parms->itc_slotno = dn->LogicalSlot;

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_Device_Node>
#196: FILE: arch/ppc64/kernel/iSeries_iommu.c:147:
+void iommu_devnode_init(struct iSeries_Device_Node *dn)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tbl)...) over kmalloc(sizeof(struct iommu_table)...)
#201: FILE: arch/ppc64/kernel/iSeries_iommu.c:151:
+	tbl = kmalloc(sizeof(struct iommu_table), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 2 warnings, 15 checks, 158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
