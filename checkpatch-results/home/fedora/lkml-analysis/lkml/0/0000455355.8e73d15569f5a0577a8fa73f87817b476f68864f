WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
diff -urN --exclude [xprs].* linux-2.5/fs/proc/proc_misc.c lazy_buddy/fs/proc/proc_misc.c

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#83: FILE: fs/proc/proc_misc.c:134:
+	extern unsigned long nr_deferred_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space prohibited after that open parenthesis '('
#111: FILE: fs/proc/proc_misc.c:187:
+static int fragmentation_read_proc(	char *page,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: fs/proc/proc_misc.c:188:
+static int fragmentation_read_proc(	char *page,
+					char **start,

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: mm/page_alloc.c:66:
+	unsigned long page_mapnr = (unsigned long)(page - mem_map);
+	if (page_mapnr >= zone->zone_start_mapnr + zone->size)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: mm/page_alloc.c:94:
+	struct page *page;
+	if (unlikely(list_empty(&area->free_list)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#402: FILE: mm/page_alloc.c:173:
+	BUG_ON(page_idx & ~mask);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#416: FILE: mm/page_alloc.c:181:
+		BUG_ON(area >= zone->free_area + MAX_ORDER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#428: FILE: mm/page_alloc.c:194:
+		BUG_ON(BAD_RANGE(zone, buddy1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: mm/page_alloc.c:195:
+		BUG_ON(BAD_RANGE(zone, buddy2));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#557: FILE: mm/page_alloc.c:320:
+	switch (area->active - area->locally_free) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#567: FILE: mm/page_alloc.c:330:
+			 * Fall through and also free the page we were

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#611: FILE: mm/page_alloc.c:374:
+static void FASTCALL(__free_pages_ok (struct page *page, unsigned int order));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#612: FILE: mm/page_alloc.c:375:
+static void __free_pages_ok (struct page *page, unsigned int order)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#614: FILE: mm/page_alloc.c:377:
+	BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: mm/page_alloc.c:378:
+	BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#616: FILE: mm/page_alloc.c:379:
+	BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#617: FILE: mm/page_alloc.c:380:
+	BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: mm/page_alloc.c:381:
+	BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: mm/page_alloc.c:382:
+	BUG_ON(PageWriteback(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: mm/page_alloc.c:400:
+static inline struct page *expand(zone_t *zone, struct page *page,
 	 unsigned long index, int low, int high, free_area_t * area)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#645: FILE: mm/page_alloc.c:405:
+		BUG_ON(BAD_RANGE(zone, page));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#652: FILE: mm/page_alloc.c:410:
+		__change_bit(index >> (1+high), area->map);
 		                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#658: FILE: mm/page_alloc.c:414:
+	BUG_ON(BAD_RANGE(zone, page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#718: FILE: mm/page_alloc.c:439:
+		BUG_ON(BAD_RANGE(zone, page));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#721: FILE: mm/page_alloc.c:442:
+		if (curr_order != MAX_ORDER-1)
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#722: FILE: mm/page_alloc.c:443:
+			__change_bit(index >> (1+curr_order), area->map);
 			                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#727: FILE: mm/page_alloc.c:448:
+		BUG_ON(BAD_RANGE(zone, page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#728: FILE: mm/page_alloc.c:449:
+		BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: mm/page_alloc.c:450:
+		BUG_ON(PageActive(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: mm/page_alloc.c:451:
+^I^Ireturn page;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#752: FILE: mm/page_alloc.c:473:
+	while (split_order >= page_order) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#806: FILE: mm/page_alloc.c:527:
+		len += sprintf(	buf + len,

ERROR:SPACING: space prohibited after that open parenthesis '('
#812: FILE: mm/page_alloc.c:533:
+			len += sprintf( buf + len,

ERROR:SPACING: space prohibited after that open parenthesis '('
#818: FILE: mm/page_alloc.c:539:
+			len += sprintf( buf + len,

ERROR:SPACING: space prohibited after that open parenthesis '('
#824: FILE: mm/page_alloc.c:545:
+			len += sprintf( buf + len,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#844: FILE: mm/page_alloc.c:592:
+	struct page * tmp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#851: FILE: mm/page_alloc.c:597:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#927: FILE: mm/page_alloc.c:628:
+		BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#928: FILE: mm/page_alloc.c:629:
+		BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#929: FILE: mm/page_alloc.c:630:
+		BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#930: FILE: mm/page_alloc.c:631:
+		BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#931: FILE: mm/page_alloc.c:632:
+		BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#932: FILE: mm/page_alloc.c:633:
+		BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#933: FILE: mm/page_alloc.c:634:
+		BUG_ON(PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#946: FILE: mm/page_alloc.c:647:
+		BUG_ON(!nr_pages--);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1097: FILE: mm/page_alloc.c:1134:
+	BUG_ON(zone_start_paddr & ~PAGE_MASK);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455355.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 33 warnings, 6 checks, 1012 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455355.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
