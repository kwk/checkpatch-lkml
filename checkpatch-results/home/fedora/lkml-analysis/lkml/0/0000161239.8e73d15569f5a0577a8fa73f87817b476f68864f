WARNING:TYPO_SPELLING: 'OT' may be misspelled - perhaps 'TO'?
#20: 
Subject: Re: [OT] util-linux 2.13-pre1
              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
>   ftp://ftp.kernel.org/pub/linux/utils/util-linux/testing/util-linux-2.13-pre1.tar.gz

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#65: FILE: cal-pb.c:90:
+static const char *
 my_tgetstr(char *s, char *ss) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: cal-pb.c:92:
+     const char* ret = tigetstr(ss);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#68: FILE: cal-pb.c:92:
+     const char* ret = tigetstr(ss);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#69: FILE: cal-pb.c:93:
+     const char* ret = tigetstr(ss);
+     if (!ret || ret==(char*)-1)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: cal-pb.c:93:
+     if (!ret || ret==(char*)-1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 9)
#69: FILE: cal-pb.c:93:
+     if (!ret || ret==(char*)-1)
+         return "";

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#69: FILE: cal-pb.c:93:
+     if (!ret || ret==(char*)-1)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#69: FILE: cal-pb.c:93:
+     if (!ret || ret==(char*)-1)
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: cal-pb.c:94:
+         return "";$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: cal-pb.c:94:
+         return "";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: cal-pb.c:95:
+     else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 9)
#71: FILE: cal-pb.c:95:
+     else
+         return ret;

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: cal-pb.c:96:
+         return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: cal-pb.c:96:
+         return ret;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#81: FILE: cal-pb.c:117:
+static const char *
 my_tgetstr(char *s, char *ss) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: cal-pb.c:119:
+     const char* ret = tgetstr(s, &strbuf);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#84: FILE: cal-pb.c:119:
+     const char* ret = tgetstr(s, &strbuf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#85: FILE: cal-pb.c:120:
+     const char* ret = tgetstr(s, &strbuf);
+     if (!ret)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: cal-pb.c:120:
+     if (!ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 9)
#85: FILE: cal-pb.c:120:
+     if (!ret)
+         return "";

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: cal-pb.c:121:
+         return "";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: cal-pb.c:121:
+         return "";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: cal-pb.c:122:
+     else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 9)
#87: FILE: cal-pb.c:122:
+     else
+         return ret;

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: cal-pb.c:123:
+         return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: cal-pb.c:123:
+         return ret;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#96: FILE: cal-pb.c:236:
+int strlen_terminal(const char* s);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: cal-pb.c:236:
+int strlen_terminal(const char* s);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: cal-pb.c:510:
+		int width1,width2,width3;
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: cal-pb.c:510:
+		int width1,width2,width3;
 		                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: cal-pb.c:511:
+		int width1,width2,width3;
+		width1=width2=width3=width;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#105: FILE: cal-pb.c:511:
+		width1=width2=width3=width;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#105: FILE: cal-pb.c:511:
+		width1=width2=width3=width;
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#105: FILE: cal-pb.c:511:
+		width1=width2=width3=width;
 		                    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#105: FILE: cal-pb.c:511:
+		width1=width2=width3=width;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#108: FILE: cal-pb.c:514:
+		width1+=strlen(out_prev.s[i])-strlen_terminal(out_prev.s[i]);
 		      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#108: FILE: cal-pb.c:514:
+		width1+=strlen(out_prev.s[i])-strlen_terminal(out_prev.s[i]);
 		                             ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#109: FILE: cal-pb.c:515:
+		width2+=strlen(out_curm.s[i])-strlen_terminal(out_curm.s[i]);
 		      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#109: FILE: cal-pb.c:515:
+		width2+=strlen(out_curm.s[i])-strlen_terminal(out_curm.s[i]);
 		                             ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#110: FILE: cal-pb.c:516:
+		width3+=strlen(out_next.s[i])-strlen_terminal(out_next.s[i]);
 		      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#110: FILE: cal-pb.c:516:
+		width3+=strlen(out_next.s[i])-strlen_terminal(out_next.s[i]);
 		                             ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#127: FILE: cal-pb.c:794:
+strlen_terminal(const char* s)

CHECK:CAMELCASE: Avoid CamelCase: <Senter>
#129: FILE: cal-pb.c:796:
+	if (Senter && Senter[0])

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: cal-pb.c:797:
+		if (strstr(s,Senter))
 		            ^

CHECK:CAMELCASE: Avoid CamelCase: <Sexit>
#131: FILE: cal-pb.c:798:
+			return strlen(s) - strlen(Senter) - strlen(Sexit);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161239.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 20 warnings, 6 checks, 73 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161239.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
