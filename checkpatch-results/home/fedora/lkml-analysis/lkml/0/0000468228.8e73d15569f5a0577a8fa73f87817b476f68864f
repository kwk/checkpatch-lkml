WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
diff -urN linux-2.4.18-prepte/arch/i386/config.in linux-2.4.18-highpte/arch/i386/config.in

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#135: FILE: arch/i386/kernel/vm86.c:116:
+	pte = mapped = pte_offset_map(pmd, 0xA0000);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: arch/i386/mm/ioremap.c:52:
+		pte_t * pte = pte_alloc_kernel(&init_mm, pmd, address);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#313: FILE: drivers/char/drm/drm_scatter.h:146:
+		pte = pte_offset_map( pmd, i );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#313: FILE: drivers/char/drm/drm_scatter.h:146:
+		pte = pte_offset_map( pmd, i );

ERROR:SPACING: space prohibited after that open parenthesis '('
#314: FILE: drivers/char/drm/drm_scatter.h:147:
+		if ( !pte_present( *pte ) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#314: FILE: drivers/char/drm/drm_scatter.h:147:
+		if ( !pte_present( *pte ) ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#331: FILE: drivers/char/drm/drm_vm.h:172:
+	pte = pte_offset_map( pmd, i );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#331: FILE: drivers/char/drm/drm_vm.h:172:
+	pte = pte_offset_map( pmd, i );

ERROR:SPACING: space prohibited after that open parenthesis '('
#332: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#332: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) {

ERROR:SPACING: space required before the open parenthesis '('
#332: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: drivers/sgi/char/graphics.c:224:
+	struct page * page;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#372: FILE: drivers/usb/stv680.c:136:
+			ptep = pte_offset_map (pmd, adr);

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#425: FILE: fs/proc/array.c:395:
+static inline void statm_pte_range(pmd_t * pmd, unsigned long address, unsigned long size, int * pages, int * shared, int * dirty, int * total)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/proc/array.c:395:
+static inline void statm_pte_range(pmd_t * pmd, unsigned long address, unsigned long size, int * pages, int * shared, int * dirty, int * total)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/proc/array.c:395:
+static inline void statm_pte_range(pmd_t * pmd, unsigned long address, unsigned long size, int * pages, int * shared, int * dirty, int * total)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/proc/array.c:395:
+static inline void statm_pte_range(pmd_t * pmd, unsigned long address, unsigned long size, int * pages, int * shared, int * dirty, int * total)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/proc/array.c:395:
+static inline void statm_pte_range(pmd_t * pmd, unsigned long address, unsigned long size, int * pages, int * shared, int * dirty, int * total)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/proc/array.c:395:
+static inline void statm_pte_range(pmd_t * pmd, unsigned long address, unsigned long size, int * pages, int * shared, int * dirty, int * total)

CHECK:SPACING: No space is necessary after a cast
#490: FILE: include/asm-i386/highmem.h:103:
+	unsigned long vaddr = (unsigned long) kvaddr & PAGE_MASK;

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#504: FILE: include/asm-i386/kmap_types.h:7:
+# define D(n) __KM_FENCE_##n ,
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#504: FILE: include/asm-i386/kmap_types.h:7:
+# define D(n) __KM_FENCE_##n ,

CHECK:SPACING: No space is necessary after a cast
#552: FILE: include/asm-i386/pgalloc.h:17:
+			(unsigned long long) PAGE_SHIFT)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#609: FILE: include/asm-i386/pgalloc.h:89:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: include/asm-i386/pgalloc.h:94:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: include/asm-i386/pgalloc.h:94:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: include/asm-i386/pgalloc.h:95:
+   ^Ido {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#619: FILE: include/asm-i386/pgalloc.h:95:
+   ^Ido {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: include/asm-i386/pgalloc.h:95:
+   ^Ido {$

CHECK:SPACING: No space is necessary after a cast
#620: FILE: include/asm-i386/pgalloc.h:96:
+		pte = (pte_t *) __get_free_page(GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#621: FILE: include/asm-i386/pgalloc.h:97:
+		if (pte)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#623: FILE: include/asm-i386/pgalloc.h:99:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: include/asm-i386/pgalloc.h:106:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: include/asm-i386/pgalloc.h:106:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: include/asm-i386/pgalloc.h:111:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: include/asm-i386/pgalloc.h:111:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: include/asm-i386/pgalloc.h:112:
+   ^Ido {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#647: FILE: include/asm-i386/pgalloc.h:112:
+   ^Ido {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: include/asm-i386/pgalloc.h:112:
+   ^Ido {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#653: FILE: include/asm-i386/pgalloc.h:118:
+		if (pte)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#655: FILE: include/asm-i386/pgalloc.h:120:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: include/asm-i386/pgalloc.h:127:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: include/asm-i386/pgalloc.h:127:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: include/asm-i386/pgalloc.h:132:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: include/asm-i386/pgalloc.h:132:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: include/asm-i386/pgalloc.h:137:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: include/asm-i386/pgalloc.h:137:
+  $

CHECK:SPACING: No space is necessary after a cast
#727: FILE: include/asm-i386/pgtable.h:341:
+	((pte_t *) pmd_page_kernel(*(dir)) +  __pte_offset(address))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: include/asm-i386/pgtable.h:343:
+	((pte_t *)kmap_atomic(pmd_page(*(dir)),KM_PTE0) + __pte_offset(address))
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#731: FILE: include/asm-i386/pgtable.h:345:
+	((pte_t *)kmap_atomic(pmd_page(*(dir)),KM_PTE1) + __pte_offset(address))
 	                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#767: FILE: include/linux/highmem.h:16:
+extern void check_highmem_ptes(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#778: FILE: include/linux/highmem.h:55:
+	void *kaddr = kmap_atomic(page, KM_USER0);
+	clear_page(kaddr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#812: FILE: include/linux/mm.h:414:
+extern pte_t *FASTCALL(pte_alloc_kernel(struct mm_struct *mm, pmd_t *pmd, unsigned long address));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: include/linux/mm.h:415:
+extern pte_t *FASTCALL(pte_alloc_map(struct mm_struct *mm, pmd_t *pmd, unsigned long address));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: mm/filemap.c:1993:
+static inline int filemap_sync_pte(pte_t *ptep, pmd_t *pmdp, struct vm_area_struct *vma,
 	unsigned long address, unsigned int flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: mm/filemap.c:2008:
+^Iunsigned long address, unsigned long end, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: mm/filemap.c:2037:
+^Iunsigned long address, unsigned long end, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#993: FILE: mm/highmem.c:454:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: mm/highmem.c:454:
+ $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#995: FILE: mm/highmem.c:456:
+		idx = type + KM_TYPE_NR*smp_processor_id();
 		                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#996: FILE: mm/highmem.c:457:
+ ^I^Iif (!pte_none(*(kmap_pte-idx))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#996: FILE: mm/highmem.c:457:
+ ^I^Iif (!pte_none(*(kmap_pte-idx))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: mm/highmem.c:457:
+ ^I^Iif (!pte_none(*(kmap_pte-idx))) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#996: FILE: mm/highmem.c:457:
+ 		if (!pte_none(*(kmap_pte-idx))) {
  		                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: mm/highmem.c:458:
+ ^I^I^Iprintk("scheduling with KM_TYPE %d held!\n", type);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#997: FILE: mm/highmem.c:458:
+ ^I^I^Iprintk("scheduling with KM_TYPE %d held!\n", type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: mm/highmem.c:458:
+ ^I^I^Iprintk("scheduling with KM_TYPE %d held!\n", type);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: mm/highmem.c:458:
+ 			printk("scheduling with KM_TYPE %d held!\n", type);

ERROR:CODE_INDENT: code indent should use tabs where possible
#998: FILE: mm/highmem.c:459:
+ ^I^I^IBUG();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#998: FILE: mm/highmem.c:459:
+ ^I^I^IBUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: mm/highmem.c:459:
+ ^I^I^IBUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#998: FILE: mm/highmem.c:459:
+ 			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#999: FILE: mm/highmem.c:460:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#999: FILE: mm/highmem.c:460:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: mm/highmem.c:460:
+ ^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1000: FILE: mm/highmem.c:461:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1000: FILE: mm/highmem.c:461:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: mm/highmem.c:461:
+ ^I}$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1049: FILE: mm/memory.c:145:
+pte_t * pte_alloc_map(struct mm_struct *mm, pmd_t *pmd, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1078: FILE: mm/memory.c:172:
+pte_t * pte_alloc_kernel(struct mm_struct *mm, pmd_t *pmd, unsigned long address)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1142: FILE: mm/memory.c:305:
+			pte_unmap2(src_pte-1);
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1143: FILE: mm/memory.c:306:
+			pte_unmap(dst_pte-1);
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1169: FILE: mm/memory.c:365:
+	pte_unmap(ptep-1);
 	              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1180: FILE: mm/memory.c:459:
+	if (!ptep) {
 		goto out;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1194: FILE: mm/memory.c:817:
+		pte_t * pte = pte_alloc_map(mm, pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1207: FILE: mm/memory.c:898:
+		pte_t * pte = pte_alloc_map(mm, pmd, address);

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#1309: FILE: mm/memory.c:1240:
+static int do_anonymous_page(struct mm_struct * mm, struct vm_area_struct * vma, pte_t *page_table, pmd_t *pmd, int write_access, unsigned long addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: mm/memory.c:1240:
+static int do_anonymous_page(struct mm_struct * mm, struct vm_area_struct * vma, pte_t *page_table, pmd_t *pmd, int write_access, unsigned long addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: mm/memory.c:1240:
+static int do_anonymous_page(struct mm_struct * mm, struct vm_area_struct * vma, pte_t *page_table, pmd_t *pmd, int write_access, unsigned long addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1414: FILE: mm/memory.c:1442:
+		pte_t * pte = pte_alloc_map(mm, pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1638: FILE: mm/vmalloc.c:129:
+		pte_t * pte = pte_alloc_kernel(&init_mm, pmd, address);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 29 warnings, 19 checks, 1433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
