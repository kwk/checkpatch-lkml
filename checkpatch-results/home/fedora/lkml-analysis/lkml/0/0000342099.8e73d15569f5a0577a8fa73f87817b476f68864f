WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Here's an incomplete patch that introduces basic key retention services into

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: include/linux/key.h:1:
+/* key.h: authentication token and access key management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#108: FILE: include/linux/key.h:18:
+#include <asm/atomic.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#129: FILE: include/linux/key.h:39:
+	unsigned		serial;		/* key serial number (0 if retired) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#133: FILE: include/linux/key.h:43:
+	unsigned		flags;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#139: FILE: include/linux/key.h:49:
+	unsigned		magic;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/key.h:73:
+extern int key_alloc(struct key_type *type, struct key **_key);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/key.h:74:
+extern void key_retire(struct key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/linux/key.h:75:
+extern void key_put(struct key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/key.h:77:
+extern int keyring_alloc(struct key *source, struct key **_key);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#176: FILE: include/linux/key.h:86:
+	unsigned		maxkeys;	/* max keys this list can hold */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#177: FILE: include/linux/key.h:87:
+	unsigned		nkeys;		/* number of keys this list currently holds */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/key.h:104:
+extern int keyring_search(struct key *keyring,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/key.h:109:
+extern int keyring_filter(struct key *source,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/key.h:114:
+extern int keyring_set_name(struct key *keyring, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#205: FILE: include/linux/key.h:115:
+__attribute__((format(printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/key.h:118:
+extern int copy_keys(unsigned long clone_flags, struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/linux/key.h:119:
+extern void exit_keys(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/linux/key.h:120:
+extern int suid_keys(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/key.h:121:
+extern int exec_keys(struct task_struct *tsk);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#271: FILE: kernel/fork.c:888:
+	if ((retval = copy_keys(clone_flags, p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#273: FILE: kernel/fork.c:890:
+	if ((retval = copy_namespace(clone_flags, p)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: kernel/key.c:1:
+/* key.c: authentication token and access key management

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#314: FILE: kernel/key.c:24:
+static unsigned		key_serial_next = 2;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#348: FILE: kernel/key.c:58:
+static struct seq_operations key_proc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#355: FILE: kernel/key.c:65:
+static struct file_operations key_proc_fops = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#366: FILE: kernel/key.c:76:
+	printk("__key_validate: key %p {%08x} should be {%08x}\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__key_validate', this function's name, in a string
#366: FILE: kernel/key.c:76:
+	printk("__key_validate: key %p {%08x} should be {%08x}\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#368: FILE: kernel/key.c:78:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#370: FILE: kernel/key.c:80:
+}
+static inline void key_validate(const struct key *key)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#428: FILE: kernel/key.c:138:
+	 * that point looking for the next unused serial number */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#460: FILE: kernel/key.c:170:
+EXPORT_SYMBOL(key_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#486: FILE: kernel/key.c:196:
+EXPORT_SYMBOL(key_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#500: FILE: kernel/key.c:210:
+EXPORT_SYMBOL(key_retire);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#511: FILE: kernel/key.c:221:
+	unsigned max;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#524: FILE: kernel/key.c:234:
+		const unsigned limit =

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#542: FILE: kernel/key.c:252:
+			BUG_ON(max > limit);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#568: FILE: kernel/key.c:278:
+		}
+		else if (klist) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#569: FILE: kernel/key.c:279:
+		else if (klist) {
+			kfree(klist);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#583: FILE: kernel/key.c:293:
+EXPORT_SYMBOL(keyring_alloc);

WARNING:INDENTED_LABEL: labels should not be indented
#649: FILE: kernel/key.c:359:
+	next:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#678: FILE: kernel/key.c:388:
+EXPORT_SYMBOL(keyring_search);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#687: FILE: kernel/key.c:397:
+	unsigned max;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#747: FILE: kernel/key.c:457:
+	if (klist)
+		kfree(klist);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#760: FILE: kernel/key.c:470:
+	if (xklist)
+		kfree(xklist);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#765: FILE: kernel/key.c:475:
+EXPORT_SYMBOL(keyring_add_key);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#796: FILE: kernel/key.c:506:
+EXPORT_SYMBOL(keyring_set_name);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#854: FILE: kernel/key.c:564:
+	if (kname) {
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#857: FILE: kernel/key.c:567:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#857: FILE: kernel/key.c:567:
+	else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#918: FILE: kernel/key.c:628:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: kernel/key.c:628:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#950: FILE: kernel/key.c:660:
+	struct key *keyring = xchg(&tsk->session_keyring, NULL);
+	if (keyring) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#959: FILE: kernel/key.c:669:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#985: FILE: kernel/key.c:695:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#997: FILE: kernel/key.c:707:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1018: FILE: kernel/key.c:728:
+	return rb_next((struct rb_node *) v);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000342099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 34 warnings, 16 checks, 1012 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000342099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
