WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#	           ChangeSet	1.1347  -> 1.1348 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#	drivers/char/Kconfig	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#	         MAINTAINERS	1.174   -> 1.175  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#	drivers/char/Makefile	1.60    -> 1.61   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#	               (new)	        -> 1.1     drivers/char/sn_serial.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# 03/10/21	pfg@attica.americas.sgi.com	1.1348

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# Altix serial console patch

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#58: 
--- a/MAINTAINERS	Tue Oct 21 16:18:17 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#66: FILE: MAINTAINERS:1758:
+P:	Pat Gefre
+M:	pfg@sgi.com

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: drivers/char/Kconfig:376:
+config SGI_L1_SERIAL
+	bool "SGI Altix L1 serial support"
+	depends on SERIAL_NONSTANDARD && IA64
+	help
+	  If you have an SGI Altix and you want to use the serial port
+	  connected to the system controller (you want this!), say Y.
+	  Otherwise, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: drivers/char/Kconfig:384:
+config SGI_L1_SERIAL_CONSOLE
+	bool "SGI Altix L1 serial console support"
+	depends on SGI_L1_SERIAL
+	help
+	  If you have an SGI Altix and you would like to use the system
+	  controller serial port as your console (you want this!), 
+	  say Y.  Otherwise, say N.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: drivers/char/Kconfig:389:
+^I  controller serial port as your console (you want this!), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: drivers/char/sn_serial.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#143: FILE: drivers/char/sn_serial.c:30:
+static char sysrq_serial_str[] = "\eSYS";

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#160: FILE: drivers/char/sn_serial.c:47:
+ * avoid losing chars, (always has to be a power of 2) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#164: FILE: drivers/char/sn_serial.c:51:
+#define SN_SAL_UART_FIFO_SPEED_CPS 9600/10
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#164: FILE: drivers/char/sn_serial.c:51:
+#define SN_SAL_UART_FIFO_SPEED_CPS 9600/10

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#167: FILE: drivers/char/sn_serial.c:54:
+ * before either of those are initialized */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#195: FILE: drivers/char/sn_serial.c:82:
+extern u64 master_node_bedrock_address;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: drivers/char/sn_serial.c:139:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'initally' may be misspelled - perhaps 'initially'?
#254: FILE: drivers/char/sn_serial.c:141:
+ * synchronous and asynchronous (buffered).  initally, early_printk
                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: drivers/char/sn_serial.c:149:
+ * timer callback or by UART interrupt) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#264: FILE: drivers/char/sn_serial.c:151:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: drivers/char/sn_serial.c:159:
+	 * should go out by the next time the timer gets called */

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: drivers/char/sn_serial.c:167:
+	int ch;
+	ia64_sn_console_getc(&ch);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: drivers/char/sn_serial.c:180:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#303: FILE: drivers/char/sn_serial.c:190:
+	 * was done via sal or directly */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: drivers/char/sn_serial.c:217:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#348: FILE: drivers/char/sn_serial.c:235:
+early_printk_sn_sal(const char *s, unsigned count)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#350: FILE: drivers/char/sn_serial.c:237:
+	extern void early_sn_setup(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#364: FILE: drivers/char/sn_serial.c:251:
+ * itself may be broken */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: drivers/char/sn_serial.c:278:
+ * that case, its only use is to trigger sysrq and kdb */

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#400: FILE: drivers/char/sn_serial.c:287:
+			printk(KERN_ERR "sn_serial: An error occured while "
 			                                     ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#400: FILE: drivers/char/sn_serial.c:287:
+			printk(KERN_ERR "sn_serial: An error occured while "

WARNING:SPLIT_STRING: quoted string split across lines
#401: FILE: drivers/char/sn_serial.c:288:
+			printk(KERN_ERR "sn_serial: An error occured while "
+			       "obtaining data from the console (0x%0x)\n", ch);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#406: FILE: drivers/char/sn_serial.c:293:
+			unsigned long sysrq_timeout = sysrq_requested + HZ*5;
 			                                                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: drivers/char/sn_serial.c:304:
+		if (ch == *sysrq_serial_ptr) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#423: FILE: drivers/char/sn_serial.c:310:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#442: FILE: drivers/char/sn_serial.c:329:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#459: FILE: drivers/char/sn_serial.c:346:
+	 * then to the head, if needed */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synch_flush_xmit', this function's name, in a string
#468: FILE: drivers/char/sn_serial.c:355:
+				sn_debug_printf("\n*** synch_flush_xmit failed to flush\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#482: FILE: drivers/char/sn_serial.c:369:
+ * sn_sal_tty */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: drivers/char/sn_serial.c:377:
+	BUG_ON(!sn_sal_is_asynch);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#523: FILE: drivers/char/sn_serial.c:410:
+	 * more, ask for it. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: drivers/char/sn_serial.c:416:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#531: FILE: drivers/char/sn_serial.c:418:
+ * sn_sal_tty */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#539: FILE: drivers/char/sn_serial.c:426:
+	BUG_ON(!sn_sal_is_asynch);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#552: FILE: drivers/char/sn_serial.c:439:
+	 * then to the head, if needed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#578: FILE: drivers/char/sn_serial.c:465:
+	 * more, ask for it. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#584: FILE: drivers/char/sn_serial.c:471:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#590: FILE: drivers/char/sn_serial.c:477:
+	 * itself */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#603: FILE: drivers/char/sn_serial.c:490:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#605: FILE: drivers/char/sn_serial.c:492:
+ * else 0 */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: drivers/char/sn_serial.c:508:
+	BUG_ON(result != SGI_UART_VECTOR);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#623: FILE: drivers/char/sn_serial.c:510:
+	result = request_irq(console_irq, sn_sal_interrupt, SA_INTERRUPT,  "SAL console driver", &sn_sal_tty);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#627: FILE: drivers/char/sn_serial.c:514:
+	printk(KERN_INFO "sn_serial: console proceeding in polled mode\n");

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#640: FILE: drivers/char/sn_serial.c:527:
+				if ((sn_sal_tty->flags & (1 << TTY_DO_WRITE_WAKEUP)) && sn_sal_tty->ldisc.write_wakeup)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#641: FILE: drivers/char/sn_serial.c:528:
+					(sn_sal_tty->ldisc.write_wakeup)((struct tty_struct *)sn_sal_tty);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (sn_sal_tty->ldisc.write_wakeup)
#641: FILE: drivers/char/sn_serial.c:528:
+					(sn_sal_tty->ldisc.write_wakeup)((struct tty_struct *)sn_sal_tty);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: drivers/char/sn_serial.c:536:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#667: FILE: drivers/char/sn_serial.c:554:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#673: FILE: drivers/char/sn_serial.c:560:
+sn_sal_open(struct tty_struct *tty, struct file *filp)
                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#677: FILE: drivers/char/sn_serial.c:564:
+	DPRINTF("sn_sal_open: sn_sal_tty = %p, tty = %p, filp = %p\n",
 	                                                 ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_sal_open', this function's name, in a string
#677: FILE: drivers/char/sn_serial.c:564:
+	DPRINTF("sn_sal_open: sn_sal_tty = %p, tty = %p, filp = %p\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#678: FILE: drivers/char/sn_serial.c:565:
+		sn_sal_tty, tty, filp);
 		                 ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#688: FILE: drivers/char/sn_serial.c:575:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#693: FILE: drivers/char/sn_serial.c:580:
+sn_sal_close(struct tty_struct *tty, struct file * filp)
                                                    ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#693: FILE: drivers/char/sn_serial.c:580:
+sn_sal_close(struct tty_struct *tty, struct file * filp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: drivers/char/sn_serial.c:584:
+		unsigned long flags;
+		tty->closing = 1;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: drivers/char/sn_serial.c:596:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: drivers/char/sn_serial.c:607:
+			int c1;
+			c = CIRC_SPACE_TO_END(xmit.cb_head, xmit.cb_tail,

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#753: FILE: drivers/char/sn_serial.c:640:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#753: FILE: drivers/char/sn_serial.c:640:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#763: FILE: drivers/char/sn_serial.c:650:
+			if (c <= 0) {
+				break;
+			}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#784: FILE: drivers/char/sn_serial.c:671:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#793: FILE: drivers/char/sn_serial.c:680:
+		xmit.cb_head = (xmit.cb_head + 1) & (SN_SAL_BUFFER_SIZE-1);
 		                                                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#794: FILE: drivers/char/sn_serial.c:681:
+		if ( sn_func->sal_wakeup_transmit )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#794: FILE: drivers/char/sn_serial.c:681:
+		if ( sn_func->sal_wakeup_transmit )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#800: FILE: drivers/char/sn_serial.c:687:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#813: FILE: drivers/char/sn_serial.c:700:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#826: FILE: drivers/char/sn_serial.c:713:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#840: FILE: drivers/char/sn_serial.c:727:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#848: FILE: drivers/char/sn_serial.c:735:
+	xmit.cb_head = xmit.cb_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ldisc.write_wakeup)
#854: FILE: drivers/char/sn_serial.c:741:
+		(tty->ldisc.write_wakeup)(tty);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#857: FILE: drivers/char/sn_serial.c:744:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#864: FILE: drivers/char/sn_serial.c:751:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: drivers/char/sn_serial.c:759:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: drivers/char/sn_serial.c:768:
+sn_sal_read_proc(char *page, char **start, off_t off, int count,
+		   int *eof, void *data)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#891: FILE: drivers/char/sn_serial.c:778:
+	if (off >= len+begin)
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#893: FILE: drivers/char/sn_serial.c:780:
+	*start = page + (off-begin);
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#895: FILE: drivers/char/sn_serial.c:782:
+	return count < begin+len-off ? count : begin+len-off;
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#895: FILE: drivers/char/sn_serial.c:782:
+	return count < begin+len-off ? count : begin+len-off;
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#895: FILE: drivers/char/sn_serial.c:782:
+	return count < begin+len-off ? count : begin+len-off;
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#895: FILE: drivers/char/sn_serial.c:782:
+	return count < begin+len-off ? count : begin+len-off;
 	                                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#898: FILE: drivers/char/sn_serial.c:785:
+
+

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#899: FILE: drivers/char/sn_serial.c:786:
+static struct tty_operations sn_sal_driver_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#911: FILE: drivers/char/sn_serial.c:798:
+};
+static struct tty_driver *sn_sal_driver;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#933: FILE: drivers/char/sn_serial.c:820:
+	 * console interrupts will never be enabled */

CHECK:BRACES: braces {} should be used on all arms of this statement
#952: FILE: drivers/char/sn_serial.c:839:
+	if (IS_RUNNING_ON_SIMULATOR())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#954: FILE: drivers/char/sn_serial.c:841:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: drivers/char/sn_serial.c:842:
+^I^I/* 960cps / 16 char FIFO = 60HZ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#956: FILE: drivers/char/sn_serial.c:843:
+		 * HZ / (SN_SAL_FIFO_SPEED_CPS / SN_SAL_FIFO_DEPTH) */

WARNING:LINE_SPACING: Missing a blank line after declarations
#975: FILE: drivers/char/sn_serial.c:862:
+		unsigned long flags;
+		spin_lock_irqsave(&sn_sal_lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#979: FILE: drivers/char/sn_serial.c:866:
+		 * interrupts should now be enabled). */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#994: FILE: drivers/char/sn_serial.c:881:
+	printk("sn_serial: sn_sal_module_init\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_sal_module_init', this function's name, in a string
#994: FILE: drivers/char/sn_serial.c:881:
+	printk("sn_serial: sn_sal_module_init\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1000: FILE: drivers/char/sn_serial.c:887:
+	if ( !sn_sal_driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1000: FILE: drivers/char/sn_serial.c:887:
+	if ( !sn_sal_driver )

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1016: FILE: drivers/char/sn_serial.c:903:
+	 * before we get here through the module initcalls */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1021: FILE: drivers/char/sn_serial.c:908:
+	if (!IS_RUNNING_ON_SIMULATOR())
+	    sn_sal_switch_to_interrupts();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1027: FILE: drivers/char/sn_serial.c:914:
+	if ((retval = tty_register_driver(sn_sal_driver))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1028: FILE: drivers/char/sn_serial.c:915:
+		printk(KERN_ERR "sn_serial: Unable to register tty driver\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: drivers/char/sn_serial.c:924:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1059: FILE: drivers/char/sn_serial.c:946:
+sn_sal_console_write(struct console *co, const char *s, unsigned count)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1063: FILE: drivers/char/sn_serial.c:950:
+	BUG_ON(!sn_sal_is_asynch);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1066: FILE: drivers/char/sn_serial.c:953:
+	 * oops, kdb, panic, etc.  make sure they get it. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1067: FILE: drivers/char/sn_serial.c:954:
+	if (spin_is_locked(&sn_sal_lock)) {
[...]
+	else if (in_interrupt()) {
[...]
+	else
[...]

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1067: FILE: drivers/char/sn_serial.c:954:
+	if (spin_is_locked(&sn_sal_lock)) {

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1071: FILE: drivers/char/sn_serial.c:958:
+	}
+	else if (in_interrupt()) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1077: FILE: drivers/char/sn_serial.c:964:
+	}
+	else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1094: FILE: drivers/char/sn_serial.c:981:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_sal_serial_console_init', this function's name, in a string
#1108: FILE: drivers/char/sn_serial.c:995:
+		sn_debug_printf("sn_sal_serial_console_init : register console\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328591.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 76 warnings, 42 checks, 1041 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328591.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
