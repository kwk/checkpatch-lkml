WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
Not happy w/ loop after failed ata_qc_new_init(), but needed because smartctl

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#91: FILE: drivers/scsi/libata-core.c:2935:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#92: FILE: drivers/scsi/libata-core.c:2936:
+	BUG_ON(qc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#92: FILE: drivers/scsi/libata-core.c:2936:
+	BUG_ON(qc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#94: FILE: drivers/scsi/libata-core.c:2938:
+	while (qc == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#116: FILE: drivers/scsi/libata-core.c:2960:
+	if (rc) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#120: FILE: drivers/scsi/libata-core.c:2964:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#168: FILE: drivers/scsi/libata-core.c:3012:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: drivers/scsi/libata-core.c:3013:
+	BUG_ON(qc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#169: FILE: drivers/scsi/libata-core.c:3013:
+	BUG_ON(qc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#171: FILE: drivers/scsi/libata-core.c:3015:
+	while (qc == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!argbuf"
#180: FILE: drivers/scsi/libata-core.c:3024:
+		if (argbuf == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#213: FILE: drivers/scsi/libata-core.c:3057:
+	if (rc) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#217: FILE: drivers/scsi/libata-core.c:3061:
+	}
+	else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: drivers/scsi/libata.h:46:
+extern int ata_task_ioctl(struct ata_port *ap, struct ata_device *dev,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: drivers/scsi/libata.h:48:
+extern int ata_cmd_ioctl(struct ata_port *ap, struct ata_device *dev,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 5 warnings, 9 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
