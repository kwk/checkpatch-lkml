WARNING:TYPO_SPELLING: 'dependend' may be misspelled - perhaps 'dependent'?
#29: 
bit -- because it is dependend on ucb1x00, not on platform bus.
                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#36: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: arch/arm/mach-sa1100/collie_pm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space prohibited after that open parenthesis '('
#76: FILE: arch/arm/mach-sa1100/collie_pm.c:36:
+#define ConvRevise(x)          ( ( ad_revise * x ) / 652 )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#76: FILE: arch/arm/mach-sa1100/collie_pm.c:36:
+#define ConvRevise(x)          ( ( ad_revise * x ) / 652 )

CHECK:CAMELCASE: Avoid CamelCase: <ConvRevise>
#76: FILE: arch/arm/mach-sa1100/collie_pm.c:36:
+#define ConvRevise(x)          ( ( ad_revise * x ) / 652 )

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#76: FILE: arch/arm/mach-sa1100/collie_pm.c:36:
+#define ConvRevise(x)          ( ( ad_revise * x ) / 652 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#77: FILE: arch/arm/mach-sa1100/collie_pm.c:37:
+#define ADCtoPower(x)	       (( 330 * x * 2 ) / 1024 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#77: FILE: arch/arm/mach-sa1100/collie_pm.c:37:
+#define ADCtoPower(x)	       (( 330 * x * 2 ) / 1024 )

CHECK:CAMELCASE: Avoid CamelCase: <ADCtoPower>
#77: FILE: arch/arm/mach-sa1100/collie_pm.c:37:
+#define ADCtoPower(x)	       (( 330 * x * 2 ) / 1024 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#77: FILE: arch/arm/mach-sa1100/collie_pm.c:37:
+#define ADCtoPower(x)	       (( 330 * x * 2 ) / 1024 )

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#79: FILE: arch/arm/mach-sa1100/collie_pm.c:39:
+static int ad_revise = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#86: FILE: arch/arm/mach-sa1100/collie_pm.c:46:
+	if (sharpsl_param.adadj != -1) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#93: FILE: arch/arm/mach-sa1100/collie_pm.c:53:
+	if ((err = request_irq(COLLIE_IRQ_GPIO_AC_IN, sharpsl_ac_isr, SA_INTERRUPT,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#95: FILE: arch/arm/mach-sa1100/collie_pm.c:55:
+		printk("Could not get irq %d.\n", COLLIE_IRQ_GPIO_AC_IN);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#100: FILE: arch/arm/mach-sa1100/collie_pm.c:60:
+	if ((err = request_irq(COLLIE_IRQ_GPIO_CO, sharpsl_chrg_full_isr, SA_INTERRUPT,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: arch/arm/mach-sa1100/collie_pm.c:63:
+		printk("Could not get irq %d.\n", COLLIE_IRQ_GPIO_CO);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#108: FILE: arch/arm/mach-sa1100/collie_pm.c:68:
+		printk(KERN_CRIT "ucb is null!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: arch/arm/mach-sa1100/collie_pm.c:76:
+^I^I^I           COLLIE_TC35143_GPIO_BBAT_ON);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:RETURN_VOID: void function return statements are not generally useful
#118: FILE: arch/arm/mach-sa1100/collie_pm.c:78:
+	return;
+}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#122: FILE: arch/arm/mach-sa1100/collie_pm.c:82:
+	if (val == SHARPSL_LED_ERROR) {
[...]
+	} else if (val == SHARPSL_LED_ON) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#141: FILE: arch/arm/mach-sa1100/collie_pm.c:101:
+	if (on) {
[...]
+	} else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#142: FILE: arch/arm/mach-sa1100/collie_pm.c:102:
+		printk("Should start charger\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#144: FILE: arch/arm/mach-sa1100/collie_pm.c:104:
+		printk("Should stop charger\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#148: FILE: arch/arm/mach-sa1100/collie_pm.c:108:
+#define        SCOOP_REG(adr) (*(volatile unsigned short*)(CF_BUF_CTRL_BASE+(adr)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: arch/arm/mach-sa1100/collie_pm.c:108:
+#define        SCOOP_REG(adr) (*(volatile unsigned short*)(CF_BUF_CTRL_BASE+(adr)))
                                                                            ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#148: FILE: arch/arm/mach-sa1100/collie_pm.c:108:
+#define        SCOOP_REG(adr) (*(volatile unsigned short*)(CF_BUF_CTRL_BASE+(adr)))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#151: FILE: arch/arm/mach-sa1100/collie_pm.c:111:
+	if (on) {
[...]
+	} else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: arch/arm/mach-sa1100/collie_pm.c:148:
+	int ret = GPLR & COLLIE_GPIO_AC_IN;
+	printk("AC status = %d\n", ret);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: arch/arm/mach-sa1100/collie_pm.c:148:
+	printk("AC status = %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#202: FILE: arch/arm/mach-sa1100/collie_pm.c:162:
+	printk("Backup battery = %d(%d)\n", ADCtoPower(voltage), voltage);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#220: FILE: arch/arm/mach-sa1100/collie_pm.c:180:
+	/*
+	   gives values 160..255 with battery removed... and

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: arch/arm/mach-sa1100/collie_pm.c:186:
+	printk("Main battery = %d(%d)\n",ADCtoPower((voltage+ConvRevise(voltage))),voltage);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: arch/arm/mach-sa1100/collie_pm.c:186:
+	printk("Main battery = %d(%d)\n",ADCtoPower((voltage+ConvRevise(voltage))),voltage);
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: arch/arm/mach-sa1100/collie_pm.c:186:
+	printk("Main battery = %d(%d)\n",ADCtoPower((voltage+ConvRevise(voltage))),voltage);
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: arch/arm/mach-sa1100/collie_pm.c:186:
+	printk("Main battery = %d(%d)\n",ADCtoPower((voltage+ConvRevise(voltage))),voltage);
 	                                                                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#228: FILE: arch/arm/mach-sa1100/collie_pm.c:188:
+	if ( voltage != -1 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#228: FILE: arch/arm/mach-sa1100/collie_pm.c:188:
+	if ( voltage != -1 ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#228: FILE: arch/arm/mach-sa1100/collie_pm.c:188:
+	if ( voltage != -1 ) {
[...]
+	} else {
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#229: FILE: arch/arm/mach-sa1100/collie_pm.c:189:
+		return ADCtoPower((voltage+ConvRevise(voltage)));
 		                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#247: FILE: arch/arm/mach-sa1100/collie_pm.c:207:
+	/* >1010 = battery removed.
+	   460 = 22C ?

WARNING:TYPO_SPELLING: 'higer' may be misspelled - perhaps 'higher'?
#248: FILE: arch/arm/mach-sa1100/collie_pm.c:208:
+	   higer = lower temp ?
 	   ^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: arch/arm/mach-sa1100/collie_pm.c:211:
+	printk("Battery temp = %d\n", voltage);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#276: FILE: arch/arm/mach-sa1100/collie_pm.c:236:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <It>
#277: FILE: arch/arm/mach-sa1100/collie_pm.c:237:
+It should be okay. Nobody really needs those.

CHECK:CAMELCASE: Avoid CamelCase: <Nobody>
#277: FILE: arch/arm/mach-sa1100/collie_pm.c:237:
+It should be okay. Nobody really needs those.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: arch/arm/mach-sa1100/collie_pm.c:256:
+#endif^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: arch/arm/mach-sa1100/collie_pm.c:270:
+#endif^I$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#333: FILE: arch/arm/mach-sa1100/collie_pm.c:293:
+extern struct sharpsl_pm_status sharpsl_pm;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: arch/arm/mach-sa1100/collie_pm.c:310:
+        .remove         = collie_pm_remove,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: arch/arm/mach-sa1100/collie_pm.c:310:
+        .remove         = collie_pm_remove,$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096489.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 26 warnings, 9 checks, 324 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096489.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
