WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
o Fixed up a miscalculation in the bitmap size as pointed out by Mike Kravetz

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: fs/buffer.c:1138:
+^Ipage = find_or_create_page(inode->i_mapping, index, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/buffer.c:1139:
+	page = find_or_create_page(inode->i_mapping, index, 
+					GFP_NOFS | __GFP_USERRCLM);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: fs/buffer.c:3002:
+^Istruct buffer_head *ret = kmem_cache_alloc(bh_cachep, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#215: FILE: fs/buffer.c:3003:
+						gfp_flags|__GFP_KERNRCLM);
 						         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: fs/dcache.c:718:
+^Identry = kmem_cache_alloc(dentry_cache, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: fs/dcache.c:719:
+^I^I^I^IGFP_KERNEL|__GFP_KERNRCLM); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: fs/dcache.c:719:
+	dentry = kmem_cache_alloc(dentry_cache, 
+				GFP_KERNEL|__GFP_KERNRCLM); 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#228: FILE: fs/dcache.c:719:
+				GFP_KERNEL|__GFP_KERNRCLM); 
 				          ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#240: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#240: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);
 	                                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#252: FILE: fs/ext3/super.c:437:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_KERNRCLM);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#264: FILE: fs/ntfs/inode.c:321:
+			SLAB_NOFS|__GFP_KERNRCLM);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/ntfs/inode.c:346:
+^Ini = (ntfs_inode *)kmem_cache_alloc(ntfs_inode_cache, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#274: FILE: fs/ntfs/inode.c:347:
+					SLAB_NOFS|__GFP_KERNRCLM);
 					         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#296: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#296: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#296: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#296: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#297: FILE: include/linux/gfp.h:51:
+			__GFP_USERRCLM|__GFP_KERNRCLM)
 			              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: include/linux/mmzone.h:138:
+^I * There are ALLOC_TYPE number of MAX_ORDER free lists. Once a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: include/linux/mmzone.h:142:
+^I * Non-reclaimable. The objective is to reduce fragmentation $

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: include/linux/mmzone.h:145:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#340: FILE: include/linux/mmzone.h:145:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: include/linux/mmzone.h:145:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: include/linux/mmzone.h:176:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: include/linux/mmzone.h:182:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: include/linux/mmzone.h:182:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/linux/mmzone.h:182:
+ ^Istruct free_area^Ifree_area_global;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: include/linux/mmzone.h:183:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: include/linux/mmzone.h:183:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: include/linux/mmzone.h:184:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: include/linux/mmzone.h:184:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: include/linux/mmzone.h:184:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: include/linux/mmzone.h:185:
+ ^I * This map tracks what each 2^MAX_ORDER sized block has been used for.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: include/linux/mmzone.h:185:
+ ^I * This map tracks what each 2^MAX_ORDER sized block has been used for.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: include/linux/mmzone.h:187:
+^I * what the block is for. When a page is freed, it's index within this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: include/linux/mmzone.h:188:
+^I * bitmap is calculated using (address >> MAX_ORDER) * 2 . This means $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: include/linux/mmzone.h:189:
+^I * that pages will always be freed into the correct list in $

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: include/linux/mmzone.h:193:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: include/linux/mmzone.h:193:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: include/linux/mmzone.h:195:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: include/linux/mmzone.h:195:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: include/linux/mmzone.h:195:
+ ^Iunsigned long^I^I*free_area_usemap;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#398: FILE: include/linux/mmzone.h:278:
+#define inc_globalrefill_count(zone) zone->global_refill++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#398: FILE: include/linux/mmzone.h:278:
+#define inc_globalrefill_count(zone) zone->global_refill++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#399: FILE: include/linux/mmzone.h:279:
+#define inc_globalsteal_count(zone) zone->global_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#399: FILE: include/linux/mmzone.h:279:
+#define inc_globalsteal_count(zone) zone->global_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#401: FILE: include/linux/mmzone.h:281:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#401: FILE: include/linux/mmzone.h:281:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#402: FILE: include/linux/mmzone.h:282:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#402: FILE: include/linux/mmzone.h:282:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#403: FILE: include/linux/mmzone.h:283:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#403: FILE: include/linux/mmzone.h:283:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#404: FILE: include/linux/mmzone.h:284:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#404: FILE: include/linux/mmzone.h:284:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#405: FILE: include/linux/mmzone.h:285:
+#define inc_bulk_request(zone, order) zone->bulk_requests[order]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#405: FILE: include/linux/mmzone.h:285:
+#define inc_bulk_request(zone, order) zone->bulk_requests[order]++

ERROR:SPACING: space required after that ',' (ctx:VxV)
#406: FILE: include/linux/mmzone.h:286:
+#define inc_bulk_alloced(zone,order) zone->bulk_alloced[order]++
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#406: FILE: include/linux/mmzone.h:286:
+#define inc_bulk_alloced(zone,order) zone->bulk_alloced[order]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#406: FILE: include/linux/mmzone.h:286:
+#define inc_bulk_alloced(zone,order) zone->bulk_alloced[order]++

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#407: FILE: include/linux/mmzone.h:287:
+static inline void inc_reserve_count(struct zone *zone, int type) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#408: FILE: include/linux/mmzone.h:288:
+	if (type == ALLOC_FALLBACK) zone->fallback_reserve++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#412: FILE: include/linux/mmzone.h:292:
+static inline void dec_reserve_count(struct zone *zone, int type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: include/linux/mmzone.h:293:
+^Iif (type == ALLOC_FALLBACK && zone->fallback_reserve) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#415: FILE: include/linux/mmzone.h:295:
+	if (zone->reserve_count[type]) zone->reserve_count[type]--;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#420: FILE: include/linux/mmzone.h:300:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#420: FILE: include/linux/mmzone.h:300:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve++ : 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#422: FILE: include/linux/mmzone.h:302:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#422: FILE: include/linux/mmzone.h:302:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#422: FILE: include/linux/mmzone.h:302:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: include/linux/mmzone.h:308:
+#define inc_bulk_alloced(zone,order) do {} while (0)
                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: mm/page_alloc.c:72:
+int fallback_allocs[ALLOC_TYPES][ALLOC_TYPES] = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: mm/page_alloc.c:87:
+static char *type_names[ALLOC_TYPES] = { "KernNoRclm", "KernRclm", $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#500: FILE: mm/page_alloc.c:139:
+static inline int get_pageblock_type(struct page *page) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: mm/page_alloc.c:141:
+^Iint bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#502: FILE: mm/page_alloc.c:141:
+	int bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * 
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#506: FILE: mm/page_alloc.c:145:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#506: FILE: mm/page_alloc.c:145:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#509: FILE: mm/page_alloc.c:148:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#509: FILE: mm/page_alloc.c:148:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#512: FILE: mm/page_alloc.c:151:
+	if (test_bit(bitidx+2, zone->free_area_usemap)) return ALLOC_FALLBACK;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#512: FILE: mm/page_alloc.c:151:
+	if (test_bit(bitidx+2, zone->free_area_usemap)) return ALLOC_FALLBACK;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: mm/page_alloc.c:159:
+static inline void set_pageblock_type(struct page *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: mm/page_alloc.c:160:
+static inline void set_pageblock_type(struct page *page, 
+					struct zone *zone, int type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: mm/page_alloc.c:162:
+^Iint bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#523: FILE: mm/page_alloc.c:162:
+	int bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * 
 	                                                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#525: FILE: mm/page_alloc.c:164:
+	bit1 = bit2 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: mm/page_alloc.c:168:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: mm/page_alloc.c:169:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#536: FILE: mm/page_alloc.c:175:
+		set_bit(bitidx+1, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#537: FILE: mm/page_alloc.c:176:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#543: FILE: mm/page_alloc.c:182:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#544: FILE: mm/page_alloc.c:183:
+		set_bit(bitidx+2, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#548: FILE: mm/page_alloc.c:187:
+	clear_bit(bitidx+1, zone->free_area_usemap);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#549: FILE: mm/page_alloc.c:188:
+	clear_bit(bitidx+2, zone->free_area_usemap);
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: mm/page_alloc.c:189:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#551: FILE: mm/page_alloc.c:190:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: mm/page_alloc.c:194:
+ * calculates how many 2**(MAX_ORDER-1) blocks of pages represent 12.5% of $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#559: FILE: mm/page_alloc.c:198:
+#define min_fallback_reserve(zone) \
+	((zone->present_pages / (1 << (MAX_ORDER-1))) / 8)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#560: FILE: mm/page_alloc.c:199:
+	((zone->present_pages / (1 << (MAX_ORDER-1))) / 8)
 	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#561: FILE: mm/page_alloc.c:200:
+#define need_min_fallback_reserve(zone) \
+	(zone->global_refill - zone->global_steal <= min_fallback_reserve(zone))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#561: FILE: mm/page_alloc.c:200:
+#define need_min_fallback_reserve(zone) \
+	(zone->global_refill - zone->global_steal <= min_fallback_reserve(zone))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#563: FILE: mm/page_alloc.c:202:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_reserve >= min_fallback_reserve(zone))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#563: FILE: mm/page_alloc.c:202:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_reserve >= min_fallback_reserve(zone))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#610: FILE: mm/page_alloc.c:374:
+	if (order >= MAX_ORDER-1) {
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global
#611: FILE: mm/page_alloc.c:375:
+		area = &(zone->free_area_global);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#635: FILE: mm/page_alloc.c:542:
+static inline int steal_globallist(struct zone *zone, int alloctype) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#639: FILE: mm/page_alloc.c:546:
+	if (list_empty(&(zone->free_area_global.free_list)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: mm/page_alloc.c:554:
+	page = list_entry(zone->free_area_global.free_list.next,
+			struct page, lru);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: mm/page_alloc.c:556:
+^Ilist_add(&page->lru, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: mm/page_alloc.c:557:
+	list_add(&page->lru, 
+		&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#650: FILE: mm/page_alloc.c:557:
+		&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));
 		                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][MAX_ORDER-1].free_list
#650: FILE: mm/page_alloc.c:557:
+		&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: mm/page_alloc.c:560:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: mm/page_alloc.c:565:
+^I * means that the first 12.5% of allocations will keep $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#673: FILE: mm/page_alloc.c:580:
+
+}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#684: FILE: mm/page_alloc.c:590:
+	int global_split=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#692: FILE: mm/page_alloc.c:595:
+	int retry_count=0;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#694: FILE: mm/page_alloc.c:597:
+	int startorder = order;
+	if (flags & __GFP_USERRCLM) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#694: FILE: mm/page_alloc.c:597:
+	if (flags & __GFP_USERRCLM) {
[...]
+	else if (flags & __GFP_KERNRCLM) {
[...]
+	} else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#697: FILE: mm/page_alloc.c:600:
+	}
+	else if (flags & __GFP_KERNRCLM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: mm/page_alloc.c:614:
+^Ifor (current_order = startorder; $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#713: FILE: mm/page_alloc.c:616:
+			current_order < MAX_ORDER; ++current_order) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: mm/page_alloc.c:637:
+^I^I^Iarea = zone->free_area_lists[ALLOC_KERNNORCLM] + $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#743: FILE: mm/page_alloc.c:646:
+			if (current_order >= MAX_ORDER/2) {
 			                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#743: FILE: mm/page_alloc.c:646:
+			if (current_order >= MAX_ORDER/2) {
[...]
+			} else inc_kernnorclm_partial_steal(zone);
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#744: FILE: mm/page_alloc.c:647:
+				int reserve_type=ALLOC_KERNNORCLM;
 				                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: mm/page_alloc.c:648:
+^I^I^I^Idec_reserve_count(zone, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: mm/page_alloc.c:648:
+				int reserve_type=ALLOC_KERNNORCLM;
+				dec_reserve_count(zone, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: mm/page_alloc.c:649:
+				dec_reserve_count(zone, 
+						get_pageblock_type(page));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#754: FILE: mm/page_alloc.c:657:
+				if (!is_min_fallback_reserved(zone)) {
+					reserve_type=ALLOC_FALLBACK;
+				}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#755: FILE: mm/page_alloc.c:658:
+					reserve_type=ALLOC_FALLBACK;
 					            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#761: FILE: mm/page_alloc.c:664:
+			} else inc_kernnorclm_partial_steal(zone);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#769: FILE: mm/page_alloc.c:672:
+		global_split=1;
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#771: FILE: mm/page_alloc.c:674:
+			startorder = MAX_ORDER-1;
 			                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: mm/page_alloc.c:678:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#782: FILE: mm/page_alloc.c:685:
+	while (++retry_count != ALLOC_TYPES) {
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#789: FILE: mm/page_alloc.c:692:
+		if (alloctype == ALLOC_FALLBACK) inc_fallback_count(zone, start_alloctype);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#792: FILE: mm/page_alloc.c:695:
+		area = zone->free_area_lists[alloctype] + (MAX_ORDER-1);
 		                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#793: FILE: mm/page_alloc.c:696:
+		current_order=MAX_ORDER;
 		             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: mm/page_alloc.c:704:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: mm/page_alloc.c:715:
+ * Returns the number of new pages which were placed at *list. An attempt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: mm/page_alloc.c:731:
+^Iwhile (1 << current_order <= pages_to_alloc && $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#830: FILE: mm/page_alloc.c:731:
+	while (1 << current_order <= pages_to_alloc && 
+			current_order < (MAX_ORDER-1)) current_order++;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: mm/page_alloc.c:732:
+	while (1 << current_order <= pages_to_alloc && 
+			current_order < (MAX_ORDER-1)) current_order++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#831: FILE: mm/page_alloc.c:732:
+			current_order < (MAX_ORDER-1)) current_order++;
 			                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#832: FILE: mm/page_alloc.c:733:
+	inc_bulk_request(zone, current_order-1);
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#842: FILE: mm/page_alloc.c:737:
+^I^Iif ((1 << current_order) > (pages_to_alloc - allocated)) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#845: FILE: mm/page_alloc.c:740:
+		if (allocated > pages_to_alloc) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#845: FILE: mm/page_alloc.c:740:
+		if (allocated > pages_to_alloc) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#846: FILE: mm/page_alloc.c:741:
+		if (current_order >= MAX_ORDER) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#846: FILE: mm/page_alloc.c:741:
+		if (current_order >= MAX_ORDER) BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#850: FILE: mm/page_alloc.c:745:
+		if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#851: FILE: mm/page_alloc.c:746:
+			if (current_order == order) break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#851: FILE: mm/page_alloc.c:746:
+			if (current_order == order) break;
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#852: FILE: mm/page_alloc.c:747:
+			else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#866: FILE: mm/page_alloc.c:761:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#894: FILE: mm/page_alloc.c:810:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: mm/page_alloc.c:815:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#905: FILE: mm/page_alloc.c:818:
+				for (i=0; i < (1<<order); i++)
 				      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#905: FILE: mm/page_alloc.c:818:
+				for (i=0; i < (1<<order); i++)
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#906: FILE: mm/page_alloc.c:819:
+					SetPageNosaveFree(pfn_to_page(start_pfn+i));
 					                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#956: FILE: mm/page_alloc.c:984:
+		free_pages -= (

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#968: FILE: mm/page_alloc.c:1129:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);
 		                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#968: FILE: mm/page_alloc.c:1129:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#986: FILE: mm/page_alloc.c:1566:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1000: FILE: mm/page_alloc.c:1867:
+ ^Iint type;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1000: FILE: mm/page_alloc.c:1867:
+ ^Iint type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: mm/page_alloc.c:1867:
+ ^Iint type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1001: FILE: mm/page_alloc.c:1868:
+ ^Istruct free_area *area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1001: FILE: mm/page_alloc.c:1868:
+ ^Istruct free_area *area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: mm/page_alloc.c:1868:
+ ^Istruct free_area *area;$

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#1003: FILE: mm/page_alloc.c:1870:
+ 	/* Initialse the three size ordered lists of free_areas */
  	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: mm/page_alloc.c:1870:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1003: FILE: mm/page_alloc.c:1870:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: mm/page_alloc.c:1870:
+ ^I/* Initialse the three size ordered lists of free_areas */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1004: FILE: mm/page_alloc.c:1871:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1007: FILE: mm/page_alloc.c:1874:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: mm/page_alloc.c:1874:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1012: FILE: mm/page_alloc.c:1879:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: mm/page_alloc.c:1879:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1013: FILE: mm/page_alloc.c:1880:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1013: FILE: mm/page_alloc.c:1880:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: mm/page_alloc.c:1880:
+ ^I/* Initialise the global pool of 2^size pages */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1014: FILE: mm/page_alloc.c:1881:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1014: FILE: mm/page_alloc.c:1881:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: mm/page_alloc.c:1881:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1015: FILE: mm/page_alloc.c:1882:
+	zone->free_area_global.nr_free=0;
 	                              ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1025: FILE: mm/page_alloc.c:1893:
+static unsigned long __init usemap_size(unsigned long zonesize) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1029: FILE: mm/page_alloc.c:1897:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1))) >> (MAX_ORDER-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1029: FILE: mm/page_alloc.c:1897:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1))) >> (MAX_ORDER-1);
 	                                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1055: FILE: mm/page_alloc.c:2019:
+		zone->global_steal=0;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1056: FILE: mm/page_alloc.c:2020:
+		zone->global_refill=0;
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: mm/page_alloc.c:2022:
+^I^Imemset((unsigned long *)zone->fallback_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: mm/page_alloc.c:2023:
+		memset((unsigned long *)zone->fallback_count, 0, 
+					sizeof(zone->fallback_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1060: FILE: mm/page_alloc.c:2024:
+^I^Imemset((unsigned long *)zone->alloc_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: mm/page_alloc.c:2025:
+		memset((unsigned long *)zone->alloc_count, 0, 
+					sizeof(zone->alloc_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1062: FILE: mm/page_alloc.c:2026:
+^I^Imemset((unsigned long *)zone->alloc_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: mm/page_alloc.c:2027:
+		memset((unsigned long *)zone->alloc_count, 0, 
+					sizeof(zone->alloc_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1065: FILE: mm/page_alloc.c:2029:
+		memset((unsigned long *)zone->bulk_requests, 0,
+					sizeof(zone->bulk_requests));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: mm/page_alloc.c:2031:
+		memset((unsigned long *)zone->bulk_alloced, 0,
+					sizeof(zone->bulk_alloced));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1068: FILE: mm/page_alloc.c:2032:
+		zone->kernnorclm_partial_steal=0;
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1069: FILE: mm/page_alloc.c:2033:
+		zone->kernnorclm_full_steal=0;
 		                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1072: FILE: mm/page_alloc.c:2036:
+^I^Izone->free_area_usemap = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: mm/page_alloc.c:2037:
+^I^I^I(unsigned long *)alloc_bootmem_node(pgdat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: mm/page_alloc.c:2041:
+		memset((unsigned long *)zone->free_area_usemap,
+				ALLOC_KERNNORCLM, usemapsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1079: FILE: mm/page_alloc.c:2043:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: mm/page_alloc.c:2044:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",
+				zone_names[j], size, realsize, usemapsize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1091: FILE: mm/page_alloc.c:2124:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1091: FILE: mm/page_alloc.c:2124:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: mm/page_alloc.c:2124:
+ ^Iunsigned long nr_bufs = 0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1094: FILE: mm/page_alloc.c:2127:
+	unsigned long global_refill=0;
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1095: FILE: mm/page_alloc.c:2128:
+	unsigned long global_steal=0;
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1096: FILE: mm/page_alloc.c:2129:
+	unsigned long kernnorclm_full_steal=0;
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1097: FILE: mm/page_alloc.c:2130:
+	unsigned long kernnorclm_partial_steal=0;
 	                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1112: FILE: mm/page_alloc.c:2145:
+ ^I/* Show global fragmentation statistics */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1112: FILE: mm/page_alloc.c:2145:
+ ^I/* Show global fragmentation statistics */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: mm/page_alloc.c:2145:
+ ^I/* Show global fragmentation statistics */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1121: FILE: mm/page_alloc.c:2151:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1121: FILE: mm/page_alloc.c:2151:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: mm/page_alloc.c:2151:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1122: FILE: mm/page_alloc.c:2152:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1122: FILE: mm/page_alloc.c:2152:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: mm/page_alloc.c:2152:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1122: FILE: mm/page_alloc.c:2152:
+ 		for (order = 0; order < MAX_ORDER-1; ++order) {
  		                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1123: FILE: mm/page_alloc.c:2153:
+ ^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1123: FILE: mm/page_alloc.c:2153:
+ ^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: mm/page_alloc.c:2153:
+ ^I^I^Inr_bufs = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1124: FILE: mm/page_alloc.c:2154:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: mm/page_alloc.c:2154:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1125: FILE: mm/page_alloc.c:2155:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1125: FILE: mm/page_alloc.c:2155:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: mm/page_alloc.c:2155:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1125: FILE: mm/page_alloc.c:2155:
+ 			for (type=0; type < ALLOC_TYPES; type++) {
  			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1126: FILE: mm/page_alloc.c:2156:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1126: FILE: mm/page_alloc.c:2156:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1126: FILE: mm/page_alloc.c:2156:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1126: FILE: mm/page_alloc.c:2156:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1127: FILE: mm/page_alloc.c:2157:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1127: FILE: mm/page_alloc.c:2157:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1127: FILE: mm/page_alloc.c:2157:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1128: FILE: mm/page_alloc.c:2158:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1128: FILE: mm/page_alloc.c:2158:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: mm/page_alloc.c:2158:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1129: FILE: mm/page_alloc.c:2159:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1129: FILE: mm/page_alloc.c:2159:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: mm/page_alloc.c:2159:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1130: FILE: mm/page_alloc.c:2160:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1130: FILE: mm/page_alloc.c:2160:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: mm/page_alloc.c:2160:
+ ^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1131: FILE: mm/page_alloc.c:2161:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: mm/page_alloc.c:2161:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1132: FILE: mm/page_alloc.c:2162:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1132: FILE: mm/page_alloc.c:2162:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: mm/page_alloc.c:2162:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1133: FILE: mm/page_alloc.c:2163:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1133: FILE: mm/page_alloc.c:2163:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: mm/page_alloc.c:2163:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1134: FILE: mm/page_alloc.c:2164:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1134: FILE: mm/page_alloc.c:2164:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: mm/page_alloc.c:2164:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#1134: FILE: mm/page_alloc.c:2164:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1135: FILE: mm/page_alloc.c:2165:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1135: FILE: mm/page_alloc.c:2165:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: mm/page_alloc.c:2165:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1136: FILE: mm/page_alloc.c:2166:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1136: FILE: mm/page_alloc.c:2166:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: mm/page_alloc.c:2166:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: mm/page_alloc.c:2167:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: mm/page_alloc.c:2167:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1138: FILE: mm/page_alloc.c:2168:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1138: FILE: mm/page_alloc.c:2168:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: mm/page_alloc.c:2168:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: mm/page_alloc.c:2169:
+ ^I^Iseq_putc(m, '\n');$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1139: FILE: mm/page_alloc.c:2169:
+ ^I^Iseq_putc(m, '\n');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: mm/page_alloc.c:2169:
+ ^I^Iseq_putc(m, '\n');$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1140: FILE: mm/page_alloc.c:2170:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1140: FILE: mm/page_alloc.c:2170:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: mm/page_alloc.c:2170:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: mm/page_alloc.c:2171:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: mm/page_alloc.c:2171:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1142: FILE: mm/page_alloc.c:2172:
+ ^I/* Show statistics for each allocation type */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1142: FILE: mm/page_alloc.c:2172:
+ ^I/* Show statistics for each allocation type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1142: FILE: mm/page_alloc.c:2172:
+ ^I/* Show statistics for each allocation type */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1143: FILE: mm/page_alloc.c:2173:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1143: FILE: mm/page_alloc.c:2173:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: mm/page_alloc.c:2173:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1143: FILE: mm/page_alloc.c:2173:
+ 	seq_printf(m, "\nPer-allocation-type statistics");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1144: FILE: mm/page_alloc.c:2174:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1144: FILE: mm/page_alloc.c:2174:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: mm/page_alloc.c:2174:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1145: FILE: mm/page_alloc.c:2175:
+ ^I^Iif (!zone->present_pages)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1145: FILE: mm/page_alloc.c:2175:
+ ^I^Iif (!zone->present_pages)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: mm/page_alloc.c:2175:
+ ^I^Iif (!zone->present_pages)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1146: FILE: mm/page_alloc.c:2176:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1146: FILE: mm/page_alloc.c:2176:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1146: FILE: mm/page_alloc.c:2176:
+ ^I^I^Icontinue;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: mm/page_alloc.c:2177:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1147: FILE: mm/page_alloc.c:2177:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: mm/page_alloc.c:2178:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1148: FILE: mm/page_alloc.c:2178:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: mm/page_alloc.c:2178:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1149: FILE: mm/page_alloc.c:2179:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1149: FILE: mm/page_alloc.c:2179:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1149: FILE: mm/page_alloc.c:2179:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1149: FILE: mm/page_alloc.c:2179:
+ 		for (type=0; type < ALLOC_TYPES; type++) {
  		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1151: FILE: mm/page_alloc.c:2181:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1151: FILE: mm/page_alloc.c:2181:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1151: FILE: mm/page_alloc.c:2181:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: mm/page_alloc.c:2181:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1152: FILE: mm/page_alloc.c:2182:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1152: FILE: mm/page_alloc.c:2182:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: mm/page_alloc.c:2182:
+ 			seq_printf(m, "\nNode %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: mm/page_alloc.c:2182:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1153: FILE: mm/page_alloc.c:2183:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1153: FILE: mm/page_alloc.c:2183:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: mm/page_alloc.c:2183:
+ ^I^I^I^I^Itype_names[type]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1154: FILE: mm/page_alloc.c:2184:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1154: FILE: mm/page_alloc.c:2184:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: mm/page_alloc.c:2184:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1155: FILE: mm/page_alloc.c:2185:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1155: FILE: mm/page_alloc.c:2185:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: mm/page_alloc.c:2185:
+ ^I^I^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1157: FILE: mm/page_alloc.c:2187:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1157: FILE: mm/page_alloc.c:2187:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1157: FILE: mm/page_alloc.c:2187:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1157: FILE: mm/page_alloc.c:2187:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1158: FILE: mm/page_alloc.c:2188:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1158: FILE: mm/page_alloc.c:2188:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: mm/page_alloc.c:2188:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1159: FILE: mm/page_alloc.c:2189:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1159: FILE: mm/page_alloc.c:2189:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1159: FILE: mm/page_alloc.c:2189:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1160: FILE: mm/page_alloc.c:2190:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1160: FILE: mm/page_alloc.c:2190:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: mm/page_alloc.c:2190:
+ ^I^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1162: FILE: mm/page_alloc.c:2192:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: mm/page_alloc.c:2192:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1163: FILE: mm/page_alloc.c:2193:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1163: FILE: mm/page_alloc.c:2193:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: mm/page_alloc.c:2193:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: mm/page_alloc.c:2194:
+ ^I^Iseq_printf(m, "\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1164: FILE: mm/page_alloc.c:2194:
+ ^I^Iseq_printf(m, "\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: mm/page_alloc.c:2194:
+ ^I^Iseq_printf(m, "\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1164: FILE: mm/page_alloc.c:2194:
+ 		seq_printf(m, "\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: mm/page_alloc.c:2195:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: mm/page_alloc.c:2195:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1165: FILE: mm/page_alloc.c:2195:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: mm/page_alloc.c:2195:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: mm/page_alloc.c:2196:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1166: FILE: mm/page_alloc.c:2196:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: mm/page_alloc.c:2196:
+ 		seq_printf(m, "Node %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: mm/page_alloc.c:2196:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1167: FILE: mm/page_alloc.c:2197:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1167: FILE: mm/page_alloc.c:2197:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: mm/page_alloc.c:2197:
+ ^I^I^I^I^I"MAX_ORDER");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1168: FILE: mm/page_alloc.c:2198:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1168: FILE: mm/page_alloc.c:2198:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: mm/page_alloc.c:2198:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1169: FILE: mm/page_alloc.c:2199:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1169: FILE: mm/page_alloc.c:2199:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: mm/page_alloc.c:2199:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#1169: FILE: mm/page_alloc.c:2199:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1170: FILE: mm/page_alloc.c:2200:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1170: FILE: mm/page_alloc.c:2200:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: mm/page_alloc.c:2200:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1171: FILE: mm/page_alloc.c:2201:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1171: FILE: mm/page_alloc.c:2201:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: mm/page_alloc.c:2201:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1171: FILE: mm/page_alloc.c:2201:
+ 		seq_printf(m, "%6lu \n", nr_bufs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1174: FILE: mm/page_alloc.c:2204:
+ ^I^Iseq_printf(m, "\n%s Zone beancounters\n", zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1174: FILE: mm/page_alloc.c:2204:
+ ^I^Iseq_printf(m, "\n%s Zone beancounters\n", zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: mm/page_alloc.c:2204:
+ ^I^Iseq_printf(m, "\n%s Zone beancounters\n", zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1175: FILE: mm/page_alloc.c:2205:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1175: FILE: mm/page_alloc.c:2205:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: mm/page_alloc.c:2205:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1176: FILE: mm/page_alloc.c:2206:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1176: FILE: mm/page_alloc.c:2206:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: mm/page_alloc.c:2206:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1180: FILE: mm/page_alloc.c:2210:
+		seq_printf(m, "Bulk requests ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1181: FILE: mm/page_alloc.c:2211:
+		for (i=0; i< MAX_ORDER; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1181: FILE: mm/page_alloc.c:2211:
+		for (i=0; i< MAX_ORDER; i++) {
 		           ^

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#1185: FILE: mm/page_alloc.c:2215:
+		seq_printf(m, "\nBulk alloced  ");
 		                      ^^^^^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1185: FILE: mm/page_alloc.c:2215:
+		seq_printf(m, "\nBulk alloced  ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1186: FILE: mm/page_alloc.c:2216:
+		for (i=0; i< MAX_ORDER; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1186: FILE: mm/page_alloc.c:2216:
+		for (i=0; i< MAX_ORDER; i++) {
 		           ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1190: FILE: mm/page_alloc.c:2220:
+		seq_printf(m, "\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1197: FILE: mm/page_alloc.c:2227:
+		for (i=0; i< ALLOC_TYPES; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1197: FILE: mm/page_alloc.c:2227:
+		for (i=0; i< ALLOC_TYPES; i++) {
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1198: FILE: mm/page_alloc.c:2228:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1198: FILE: mm/page_alloc.c:2228:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1198: FILE: mm/page_alloc.c:2228:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: mm/page_alloc.c:2228:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: mm/page_alloc.c:2229:
+^I^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: mm/page_alloc.c:2229:
+ 			seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+					type_names[i], 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1207: FILE: mm/page_alloc.c:2237:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: mm/page_alloc.c:2237:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1212: FILE: mm/page_alloc.c:2241:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: mm/page_alloc.c:2241:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1213: FILE: mm/page_alloc.c:2242:
+ ^I/* Show bean counters */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1213: FILE: mm/page_alloc.c:2242:
+ ^I/* Show bean counters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: mm/page_alloc.c:2242:
+ ^I/* Show bean counters */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1215: FILE: mm/page_alloc.c:2244:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1215: FILE: mm/page_alloc.c:2244:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1215: FILE: mm/page_alloc.c:2244:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1215: FILE: mm/page_alloc.c:2244:
+ 	seq_printf(m, "\nGlobal beancounters\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1216: FILE: mm/page_alloc.c:2245:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1216: FILE: mm/page_alloc.c:2245:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: mm/page_alloc.c:2245:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1217: FILE: mm/page_alloc.c:2246:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1217: FILE: mm/page_alloc.c:2246:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: mm/page_alloc.c:2246:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1220: FILE: mm/page_alloc.c:2249:
+	seq_printf(m, "Bulk requests ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1221: FILE: mm/page_alloc.c:2250:
+	for (i=0; i< MAX_ORDER; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1221: FILE: mm/page_alloc.c:2250:
+	for (i=0; i< MAX_ORDER; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1221: FILE: mm/page_alloc.c:2250:
+	for (i=0; i< MAX_ORDER; i++) {
+		seq_printf(m, "%7lu ", bulk_requests[i]);
+	}

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#1224: FILE: mm/page_alloc.c:2253:
+	seq_printf(m, "\nBulk alloced  ");
 	                      ^^^^^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1224: FILE: mm/page_alloc.c:2253:
+	seq_printf(m, "\nBulk alloced  ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1225: FILE: mm/page_alloc.c:2254:
+	for (i=0; i< MAX_ORDER; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1225: FILE: mm/page_alloc.c:2254:
+	for (i=0; i< MAX_ORDER; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1225: FILE: mm/page_alloc.c:2254:
+	for (i=0; i< MAX_ORDER; i++) {
+		seq_printf(m, "%7lu ", bulk_alloced[i]);
+	}

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1228: FILE: mm/page_alloc.c:2257:
+	seq_printf(m, "\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1230: FILE: mm/page_alloc.c:2259:
+	for (i=0; i< ALLOC_TYPES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1230: FILE: mm/page_alloc.c:2259:
+	for (i=0; i< ALLOC_TYPES; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1231: FILE: mm/page_alloc.c:2260:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1231: FILE: mm/page_alloc.c:2260:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1231: FILE: mm/page_alloc.c:2260:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: mm/page_alloc.c:2260:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: mm/page_alloc.c:2261:
+^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: mm/page_alloc.c:2261:
+ 		seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+				type_names[i], 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201451.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 181 errors, 161 warnings, 89 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201451.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
