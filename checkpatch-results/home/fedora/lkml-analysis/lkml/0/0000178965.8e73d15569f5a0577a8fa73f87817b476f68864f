WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/9p/debug.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: fs/9p/debug.h:2:
+ *  linux/fs/9p/debug.h - V9FS Debug Definitions

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: fs/9p/debug.h:18:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#65: FILE: fs/9p/debug.h:19:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#69: FILE: fs/9p/debug.h:23:
+#define DEBUG_ERROR		(1<<0)
                    		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#69: FILE: fs/9p/debug.h:23:
+#define DEBUG_ERROR		(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#70: FILE: fs/9p/debug.h:24:
+#define DEBUG_CURRENT		(1<<1)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#70: FILE: fs/9p/debug.h:24:
+#define DEBUG_CURRENT		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#71: FILE: fs/9p/debug.h:25:
+#define DEBUG_9P	                  (1<<2)
                 	                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#71: FILE: fs/9p/debug.h:25:
+#define DEBUG_9P	                  (1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#72: FILE: fs/9p/debug.h:26:
+#define DEBUG_VFS	                  (1<<3)
                  	                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#72: FILE: fs/9p/debug.h:26:
+#define DEBUG_VFS	                  (1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#73: FILE: fs/9p/debug.h:27:
+#define DEBUG_CONV		(1<<4)
                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#73: FILE: fs/9p/debug.h:27:
+#define DEBUG_CONV		(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#74: FILE: fs/9p/debug.h:28:
+#define DEBUG_MUX		(1<<5)
                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#74: FILE: fs/9p/debug.h:28:
+#define DEBUG_MUX		(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#75: FILE: fs/9p/debug.h:29:
+#define DEBUG_TRANS		(1<<6)
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#75: FILE: fs/9p/debug.h:29:
+#define DEBUG_TRANS		(1<<6)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: fs/9p/debug.h:30:
+#define DEBUG_SLABS^I      ^I(1<<7)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#76: FILE: fs/9p/debug.h:30:
+#define DEBUG_SLABS	      	(1<<7)
                    	      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#76: FILE: fs/9p/debug.h:30:
+#define DEBUG_SLABS	      	(1<<7)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#83: FILE: fs/9p/debug.h:37:
+#define dprintk(level, format, arg...) \
+do {  \
+	if((v9fs_debug_level & level)==level) \
+		printk(KERN_NOTICE "-- %s (%d): " \
+		format , __FUNCTION__, current->pid , ## arg); \
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#83: FILE: fs/9p/debug.h:37:
+#define dprintk(level, format, arg...) \
+do {  \
+	if((v9fs_debug_level & level)==level) \
+		printk(KERN_NOTICE "-- %s (%d): " \
+		format , __FUNCTION__, current->pid , ## arg); \
+} while(0)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#85: FILE: fs/9p/debug.h:39:
+	if((v9fs_debug_level & level)==level) \
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#85: FILE: fs/9p/debug.h:39:
+	if((v9fs_debug_level & level)==level) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#86: FILE: fs/9p/debug.h:40:
+		printk(KERN_NOTICE "-- %s (%d): " \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#87: FILE: fs/9p/debug.h:41:
+		format , __FUNCTION__, current->pid , ## arg); \
 		       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#87: FILE: fs/9p/debug.h:41:
+		format , __FUNCTION__, current->pid , ## arg); \
 		                                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#87: FILE: fs/9p/debug.h:41:
+		format , __FUNCTION__, current->pid , ## arg); \

ERROR:SPACING: space required before the open parenthesis '('
#88: FILE: fs/9p/debug.h:42:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#90: FILE: fs/9p/debug.h:44:
+#define eprintk(level, format, arg...) \
+do { \
+	printk(level "v9fs: %s (%d): " \
+		format , __FUNCTION__, current->pid, ## arg); \
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: fs/9p/debug.h:46:
+	printk(level "v9fs: %s (%d): " \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#93: FILE: fs/9p/debug.h:47:
+		format , __FUNCTION__, current->pid, ## arg); \
 		       ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#93: FILE: fs/9p/debug.h:47:
+		format , __FUNCTION__, current->pid, ## arg); \

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: fs/9p/debug.h:48:
+} while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#102: FILE: fs/9p/debug.h:56:
+	printk(KERN_DEBUG "data ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#105: FILE: fs/9p/debug.h:59:
+			printk(KERN_DEBUG "%02x", data[i + j]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#106: FILE: fs/9p/debug.h:60:
+		printk(KERN_DEBUG " ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#108: FILE: fs/9p/debug.h:62:
+	printk(KERN_DEBUG "\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#113: FILE: fs/9p/debug.h:67:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#114: FILE: fs/9p/debug.h:68:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: fs/9p/error.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#122: FILE: fs/9p/error.h:2:
+ * linux/fs/9p/error.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#145: FILE: fs/9p/error.h:25:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#146: FILE: fs/9p/error.h:26:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#302: FILE: fs/9p/error.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#303: FILE: fs/9p/error.c:2:
+ * linux/fs/9p/error.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#325: FILE: fs/9p/error.c:24:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#326: FILE: fs/9p/error.c:25:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/9p/error.c:39:
+ * v9fs_error_init - preload $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "c->name"
#355: FILE: fs/9p/error.c:54:
+	for (c = errmap; c->name != NULL; c++) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#387: FILE: fs/9p/error.c:86:
+		printk(KERN_ERR "%s: errstr :%s: not found\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#387: FILE: fs/9p/error.c:86:
+		printk(KERN_ERR "%s: errstr :%s: not found\n", __FUNCTION__,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: fs/9p/fid.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#415: FILE: fs/9p/fid.h:17:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#416: FILE: fs/9p/fid.h:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: fs/9p/fid.h:25:
+#define FID_WALK ^I^I1$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#447: FILE: fs/9p/fid.h:49:
+	struct file *filp;	/* backpointer to File struct for open files */
 	             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#453: FILE: fs/9p/fid.h:55:
+struct v9fs_fid *v9fs_fid_create(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#459: FILE: fs/9p/fid.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#475: FILE: fs/9p/fid.c:17:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#476: FILE: fs/9p/fid.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: fs/9p/fid.c:47:
+	struct list_head *fid_list = (struct list_head *)dentry->d_fsdata;
+	dprintk(DEBUG_9P, "fid %d (%p) dentry %s (%p)\n", fid->fid, fid,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_fsdata"
#507: FILE: fs/9p/fid.c:49:
+	if (dentry->d_fsdata == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_fsdata"
#510: FILE: fs/9p/fid.c:52:
+		if (dentry->d_fsdata == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct v9fs_fid)...)
#534: FILE: fs/9p/fid.c:76:
+	new = kmalloc(sizeof(struct v9fs_fid), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#535: FILE: fs/9p/fid.c:77:
+	if (new == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#546: FILE: fs/9p/fid.c:88:
+	if (v9fs_fid_insert(new, dentry) == 0)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#548: FILE: fs/9p/fid.c:90:
+		return new;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#548: FILE: fs/9p/fid.c:90:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: fs/9p/fid.c:100:
+ * $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!return_fid"
#594: FILE: fs/9p/fid.c:136:
+				if (return_fid == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == FID_OP'
#595: FILE: fs/9p/fid.c:137:
+					if ((type == FID_OP)
+					    || (!current_fid->fidopen)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!current_fid->fidopen'
#595: FILE: fs/9p/fid.c:137:
+					if ((type == FID_OP)
+					    || (!current_fid->fidopen)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#596: FILE: fs/9p/fid.c:138:
+					if ((type == FID_OP)
+					    || (!current_fid->fidopen)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'return_fid == NULL'
#603: FILE: fs/9p/fid.c:145:
+				if ((return_fid == NULL) || (found_parent)
+				    || (found_user)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!return_fid"
#603: FILE: fs/9p/fid.c:145:
+				if ((return_fid == NULL) || (found_parent)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#604: FILE: fs/9p/fid.c:146:
+				if ((return_fid == NULL) || (found_parent)
+				    || (found_user)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == FID_OP'
#605: FILE: fs/9p/fid.c:147:
+					if ((type == FID_OP)
+					    || (!current_fid->fidopen)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!current_fid->fidopen'
#605: FILE: fs/9p/fid.c:147:
+					if ((type == FID_OP)
+					    || (!current_fid->fidopen)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#606: FILE: fs/9p/fid.c:148:
+					if ((type == FID_OP)
+					    || (!current_fid->fidopen)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == FID_OP'
#614: FILE: fs/9p/fid.c:156:
+				if ((type == FID_OP) || (!current_fid->fidopen)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!current_fid->fidopen'
#614: FILE: fs/9p/fid.c:156:
+				if ((type == FID_OP) || (!current_fid->fidopen)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: fs/9p/fid.c:165:
+    ^I/* we are at the root but didn't match */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#623: FILE: fs/9p/fid.c:165:
+    ^I/* we are at the root but didn't match */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: fs/9p/fid.c:165:
+    ^I/* we are at the root but didn't match */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: fs/9p/fid.c:166:
+^Iif((!return_fid) && (dentry->d_parent == dentry)) { $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!return_fid'
#624: FILE: fs/9p/fid.c:166:
+	if((!return_fid) && (dentry->d_parent == dentry)) { 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_parent == dentry'
#624: FILE: fs/9p/fid.c:166:
+	if((!return_fid) && (dentry->d_parent == dentry)) { 

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: fs/9p/fid.c:166:
+	if((!return_fid) && (dentry->d_parent == dentry)) { 

WARNING:LINE_SPACING: Missing a blank line after declarations
#632: FILE: fs/9p/fid.c:174:
+		int count = 1;
+		while (par != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "par"
#632: FILE: fs/9p/fid.c:174:
+		while (par != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_fid"
#655: FILE: fs/9p/fid.c:197:
+			if (current_fid == NULL) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#696: FILE: fs/9p/idpool.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#697: FILE: fs/9p/idpool.h:2:
+ *  linux/fs/9p/idpool.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#713: FILE: fs/9p/idpool.h:18:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#714: FILE: fs/9p/idpool.h:19:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: fs/9p/idpool.h:23:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#719: FILE: fs/9p/idpool.h:24:
+ * This is for getting unique IDs. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: fs/9p/idpool.h:25:
+ * 0 means free, non-zero means used. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: fs/9p/idpool.h:26:
+ * $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct idpool *' should also have an identifier name
#732: FILE: fs/9p/idpool.h:37:
+int v9fs_alloc_idpool(struct idpool *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#732: FILE: fs/9p/idpool.h:37:
+int v9fs_alloc_idpool(struct idpool *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct idpool *' should also have an identifier name
#733: FILE: fs/9p/idpool.h:38:
+void v9fs_free_idpool(struct idpool *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#741: FILE: fs/9p/idpool.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#742: FILE: fs/9p/idpool.c:2:
+ *  linux/fs/9p/idpool.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#758: FILE: fs/9p/idpool.c:18:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#759: FILE: fs/9p/idpool.c:19:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#852: FILE: fs/9p/idpool.c:112:
+			return -1;
+		} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'which < 0'
#876: FILE: fs/9p/idpool.c:136:
+	if ((which < 0) || (which > i->maxalloc)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'which > i->maxalloc'
#876: FILE: fs/9p/idpool.c:136:
+	if ((which < 0) || (which > i->maxalloc)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#876: FILE: fs/9p/idpool.c:136:
+	if ((which < 0) || (which > i->maxalloc)) {
+		return;
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178965.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 37 warnings, 45 checks, 814 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178965.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
