WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#67: FILE: fs/namei.c:110:
+		if ((unsigned long) filename >= TASK_SIZE)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#71: FILE: fs/namei.c:112:
+		if (TASK_SIZE - (unsigned long) filename < PATH_MAX)

CHECK:SPACING: No space is necessary after a cast
#72: FILE: fs/namei.c:113:
+			len = TASK_SIZE - (unsigned long) filename;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#86: FILE: kernel/module.c:442:
+		printk(KERN_ERR "init_module: not 4GB kernel module\n");

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: mm/memory.c:405:
+struct page * follow_page(struct mm_struct *mm, unsigned long address,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: mm/memory.c:406:
+^I^Iint write) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: mm/memory.c:406:
+struct page * follow_page(struct mm_struct *mm, unsigned long address,
+		int write) 

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: include/linux/mm.h:505:
+struct page * follow_page(struct mm_struct *mm, unsigned long address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/mm.h:506:
+struct page * follow_page(struct mm_struct *mm, unsigned long address,
+		int write);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: include/asm-i386/fixmap.h:151:
+		~(THREAD_SIZE-1))
 		             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: include/asm-i386/fixmap.h:153:
+#define LOTASK_SIZE	(NR_CPUS*(THREAD_SIZE+LOTASK_BARRIER))
                    	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: include/asm-i386/fixmap.h:153:
+#define LOTASK_SIZE	(NR_CPUS*(THREAD_SIZE+LOTASK_BARRIER))
                    	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#231: FILE: include/asm-i386/fixmap.h:173:
+#define TSS_SIZE	(4*PAGE_SIZE)
                 	  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#237: FILE: include/asm-i386/fixmap.h:179:
+#define LDT_SIZE	PAGE_ALIGN(LDT_ENTRIES*LDT_ENTRY_SIZE)
                 	                      ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#472: FILE: include/asm-i386/page_offset.h:1:
+#ifndef __PAGE_OFFSET_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#513: FILE: include/asm-i386/pgtable.h:168:
+#define VMALLOC_START	((__VMALLOC_START + 2*VMALLOC_OFFSET-1) & \
                      	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#513: FILE: include/asm-i386/pgtable.h:168:
+#define VMALLOC_START	((__VMALLOC_START + 2*VMALLOC_OFFSET-1) & \
                      	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#556: FILE: include/asm-i386/pgtable.h:342:
+#define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD-1))
                                                                       ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#586: FILE: include/asm-i386/processor.h:378:
+	unsigned long	reloaddbg;	/* db regs should be reloaded on ret
+					   to user? see do_debug(), entry.S */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#586: FILE: include/asm-i386/processor.h:378:
+					   to user? see do_debug(), entry.S */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#597: FILE: include/asm-i386/processor.h:397:
+#define INIT_SPLIT_4GB_THREAD_REGS				\
+	0, (unsigned long)&init_task, 0,			\
+	(unsigned long)&swapper_pg_dir - PAGE_OFFSET, /* cr3 */

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#628: FILE: include/asm-i386/string.h:76:
+static inline size_t strncpy_count(char * dest,const char *src,size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#628: FILE: include/asm-i386/string.h:76:
+static inline size_t strncpy_count(char * dest,const char *src,size_t count)
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#628: FILE: include/asm-i386/string.h:76:
+static inline size_t strncpy_count(char * dest,const char *src,size_t count)
                                                               ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#630: FILE: include/asm-i386/string.h:78:
+	__asm__ __volatile__(

WARNING:SPLIT_STRING: quoted string split across lines
#638: FILE: include/asm-i386/string.h:86:
+	"2:"
+	"incl %0"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#640: FILE: include/asm-i386/string.h:88:
+	:"S" (src),"D" (dest),"0" (count) : "memory");
 	^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#640: FILE: include/asm-i386/string.h:88:
+	:"S" (src),"D" (dest),"0" (count) : "memory");
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#640: FILE: include/asm-i386/string.h:88:
+	:"S" (src),"D" (dest),"0" (count) : "memory");
 	                     ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#674: FILE: include/asm-i386/uaccess.h:178:
+#define direct_get_user(x,ptr)							\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#674: FILE: include/asm-i386/uaccess.h:178:
+#define direct_get_user(x,ptr)							\
 ({	int __ret_gu,__val_gu;						\
 	switch(sizeof (*(ptr))) {					\
 	case 1:  __get_user_x(1,__ret_gu,__val_gu,ptr); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#683: FILE: include/asm-i386/uaccess.h:214:
+#define direct_put_user(x,ptr)							\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#683: FILE: include/asm-i386/uaccess.h:214:
+#define direct_put_user(x,ptr)							\
   __put_user_check((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#692: FILE: include/asm-i386/uaccess.h:238:
+#define __direct_get_user(x,ptr) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#692: FILE: include/asm-i386/uaccess.h:238:
+#define __direct_get_user(x,ptr) \
   __get_user_nocheck((x),(ptr),sizeof(*(ptr)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: include/asm-i386/uaccess.h:261:
+#define __direct_put_user(x,ptr) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#701: FILE: include/asm-i386/uaccess.h:261:
+#define __direct_put_user(x,ptr) \
   __put_user_nocheck((__typeof__(*(ptr)))(x),(ptr),sizeof(*(ptr)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: include/asm-i386/uaccess.h:714:
+#define direct_copy_to_user(to,from,n)			\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: include/asm-i386/uaccess.h:714:
+#define direct_copy_to_user(to,from,n)			\
                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#710: FILE: include/asm-i386/uaccess.h:714:
+#define direct_copy_to_user(to,from,n)			\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_to_user((to),(from),(n)) :	\
 	 __generic_copy_to_user((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#710: FILE: include/asm-i386/uaccess.h:714:
+#define direct_copy_to_user(to,from,n)			\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_to_user((to),(from),(n)) :	\
 	 __generic_copy_to_user((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#710: FILE: include/asm-i386/uaccess.h:714:
+#define direct_copy_to_user(to,from,n)			\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_to_user((to),(from),(n)) :	\
 	 __generic_copy_to_user((to),(from),(n)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#719: FILE: include/asm-i386/uaccess.h:735:
+#define direct_copy_from_user(to,from,n)		\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#719: FILE: include/asm-i386/uaccess.h:735:
+#define direct_copy_from_user(to,from,n)		\
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#719: FILE: include/asm-i386/uaccess.h:735:
+#define direct_copy_from_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_from_user((to),(from),(n)) :	\
 	 __generic_copy_from_user((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#719: FILE: include/asm-i386/uaccess.h:735:
+#define direct_copy_from_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_from_user((to),(from),(n)) :	\
 	 __generic_copy_from_user((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#719: FILE: include/asm-i386/uaccess.h:735:
+#define direct_copy_from_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_from_user((to),(from),(n)) :	\
 	 __generic_copy_from_user((to),(from),(n)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: include/asm-i386/uaccess.h:754:
+#define __direct_copy_to_user(to,from,n)		\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: include/asm-i386/uaccess.h:754:
+#define __direct_copy_to_user(to,from,n)		\
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#728: FILE: include/asm-i386/uaccess.h:754:
+#define __direct_copy_to_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_to_user_nocheck((to),(from),(n)) :	\
 	 __generic_copy_to_user_nocheck((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#728: FILE: include/asm-i386/uaccess.h:754:
+#define __direct_copy_to_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_to_user_nocheck((to),(from),(n)) :	\
 	 __generic_copy_to_user_nocheck((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#728: FILE: include/asm-i386/uaccess.h:754:
+#define __direct_copy_to_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_to_user_nocheck((to),(from),(n)) :	\
 	 __generic_copy_to_user_nocheck((to),(from),(n)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#737: FILE: include/asm-i386/uaccess.h:776:
+#define __direct_copy_from_user(to,from,n)		\
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#737: FILE: include/asm-i386/uaccess.h:776:
+#define __direct_copy_from_user(to,from,n)		\
                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#737: FILE: include/asm-i386/uaccess.h:776:
+#define __direct_copy_from_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_from_user_nocheck((to),(from),(n)) :	\
 	 __generic_copy_from_user_nocheck((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#737: FILE: include/asm-i386/uaccess.h:776:
+#define __direct_copy_from_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_from_user_nocheck((to),(from),(n)) :	\
 	 __generic_copy_from_user_nocheck((to),(from),(n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#737: FILE: include/asm-i386/uaccess.h:776:
+#define __direct_copy_from_user(to,from,n)		\
 	(__builtin_constant_p(n) ?			\
 	 __constant_copy_from_user_nocheck((to),(from),(n)) :	\
 	 __generic_copy_from_user_nocheck((to),(from),(n)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#766: FILE: include/asm-i386/uaccess.h:810:
+extern int indirect_get_user_size(unsigned int size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: include/asm-i386/uaccess.h:811:
+extern int indirect_get_user_size(unsigned int size,
+		void *val, const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#768: FILE: include/asm-i386/uaccess.h:812:
+extern int indirect_put_user_size(unsigned int size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: include/asm-i386/uaccess.h:813:
+extern int indirect_put_user_size(unsigned int size,
+		const void *val, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#770: FILE: include/asm-i386/uaccess.h:814:
+extern int indirect_clear_user_size(unsigned int size, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#771: FILE: include/asm-i386/uaccess.h:815:
+extern int indirect_strncpy_from_user_size(unsigned int size, void *val,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: include/asm-i386/uaccess.h:816:
+extern int indirect_strncpy_from_user_size(unsigned int size, void *val,
+		const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#773: FILE: include/asm-i386/uaccess.h:817:
+extern int indirect_strnlen_user_size(unsigned int size, const void *ptr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#781: FILE: include/asm-i386/uaccess.h:825:
+#define indirect_get_user(x,ptr)					\
                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: include/asm-i386/uaccess.h:827:
+ ^I__typeof__(ptr) __ptr_gu = (ptr);^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: include/asm-i386/uaccess.h:827:
+ ^I__typeof__(ptr) __ptr_gu = (ptr);^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: include/asm-i386/uaccess.h:827:
+ ^I__typeof__(ptr) __ptr_gu = (ptr);^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#791: FILE: include/asm-i386/uaccess.h:835:
+#define indirect_put_user(x,ptr)					\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#791: FILE: include/asm-i386/uaccess.h:835:
+#define indirect_put_user(x,ptr)					\
+({									\
+ 	int __ret_pu;							\
+ 	__typeof__(*(ptr)) *__ptr_pu = (ptr),				\
+		__x_pu = (__typeof__(*(ptr)))(x);			\
+	__ret_pu = indirect_put_user_size(sizeof(*__ptr_pu),		\
+		&__x_pu, __ptr_pu) ? -EFAULT : 0;			\
+	barrier();							\
+	__ret_pu;							\
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: include/asm-i386/uaccess.h:837:
+ ^Iint __ret_pu;^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#793: FILE: include/asm-i386/uaccess.h:837:
+ ^Iint __ret_pu;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: include/asm-i386/uaccess.h:837:
+ ^Iint __ret_pu;^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: include/asm-i386/uaccess.h:838:
+ ^I__typeof__(*(ptr)) *__ptr_pu = (ptr),^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#794: FILE: include/asm-i386/uaccess.h:838:
+ ^I__typeof__(*(ptr)) *__ptr_pu = (ptr),^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: include/asm-i386/uaccess.h:838:
+ ^I__typeof__(*(ptr)) *__ptr_pu = (ptr),^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#802: FILE: include/asm-i386/uaccess.h:846:
+#define __indirect_get_user(x,ptr) indirect_get_user(x,ptr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#802: FILE: include/asm-i386/uaccess.h:846:
+#define __indirect_get_user(x,ptr) indirect_get_user(x,ptr)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#803: FILE: include/asm-i386/uaccess.h:847:
+#define __indirect_put_user(x,ptr) indirect_put_user(x,ptr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#803: FILE: include/asm-i386/uaccess.h:847:
+#define __indirect_put_user(x,ptr) indirect_put_user(x,ptr)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: include/asm-i386/uaccess.h:849:
+#define indirect_copy_from_user(to,from,n) indirect_get_user_size(n,to,from)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: include/asm-i386/uaccess.h:849:
+#define indirect_copy_from_user(to,from,n) indirect_get_user_size(n,to,from)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: include/asm-i386/uaccess.h:849:
+#define indirect_copy_from_user(to,from,n) indirect_get_user_size(n,to,from)
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: include/asm-i386/uaccess.h:849:
+#define indirect_copy_from_user(to,from,n) indirect_get_user_size(n,to,from)
                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#806: FILE: include/asm-i386/uaccess.h:850:
+#define indirect_copy_to_user(to,from,n) indirect_put_user_size(n,from,to)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#806: FILE: include/asm-i386/uaccess.h:850:
+#define indirect_copy_to_user(to,from,n) indirect_put_user_size(n,from,to)
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#806: FILE: include/asm-i386/uaccess.h:850:
+#define indirect_copy_to_user(to,from,n) indirect_put_user_size(n,from,to)
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#806: FILE: include/asm-i386/uaccess.h:850:
+#define indirect_copy_to_user(to,from,n) indirect_put_user_size(n,from,to)
                                                                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#845: FILE: include/asm-i386/uaccess.h:889:
+#define copy_from_user^I  ^Iindirect_copy_from_user$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#921: FILE: arch/i386/mm/extable.c:73:
+	printk("Sorting kernel __ex_table entries... ");

ERROR:SPACING: space required before the open parenthesis '('
#924: FILE: arch/i386/mm/extable.c:76:
+	while(chg) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#927: FILE: arch/i386/mm/extable.c:79:
+			if (entry->insn > (entry+1)->insn) {
 			                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#930: FILE: arch/i386/mm/extable.c:82:
+				*entry = *(entry+1);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#931: FILE: arch/i386/mm/extable.c:83:
+				*(entry+1) = tmp;
 				       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#936: FILE: arch/i386/mm/extable.c:88:
+	printk("done.\n");

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'standart' may be misspelled - perhaps 'standard'?
#973: FILE: arch/i386/mm/init.c:186:
+		 * standart kernel since highest pgd is always created when
 		   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: arch/i386/mm/init.c:233:
+		set_pgd(pgd_base + i,
+				__pgd(_PAGE_PRESENT + __pa(empty_zero_page)));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 40)
#1017: FILE: arch/i386/mm/init.c:265:
+					if (vaddr >= TASK_SIZE)
[...]
 					__pe += _PAGE_GLOBAL;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1046: FILE: arch/i386/mm/init.c:313:
+		extern char __locore_lmabegin;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1047: FILE: arch/i386/mm/init.c:314:
+		extern struct desc_struct idt_table[];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1053: FILE: arch/i386/mm/init.c:320:
+		set_pte_phys(IDT_START, __pa((unsigned long)idt_table),
+				_MAKE_GLOBAL(pgprot_val(prot)));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1058: FILE: arch/i386/mm/init.c:325:
+		for (idx = 0; idx < (LOCORE_SIZE/PAGE_SIZE); idx++) {
 		                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: arch/i386/mm/init.c:327:
+			set_pte_phys(vaddr, __pa(page),
+					_MAKE_GLOBAL(pgprot_val(prot)));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1068: FILE: arch/i386/mm/init.c:335:
+		for (idx = 0; idx < (GDT_SIZE)/PAGE_SIZE; idx++) {
 		                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: arch/i386/mm/init.c:337:
+			set_pte_phys(vaddr, __pa(page),
+					_MAKE_GLOBAL(pgprot_val(prot)));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1078: FILE: arch/i386/mm/init.c:345:
+		for (idx = 0; idx < (TSS_SIZE)/PAGE_SIZE; idx++) {
 		                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: arch/i386/mm/init.c:347:
+			set_pte_phys(vaddr, __pa(page),
+					_MAKE_GLOBAL(pgprot_val(prot)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1087: FILE: arch/i386/mm/init.c:354:
+		set_pte_phys(LDT_START, __pa((unsigned long)&default_ldt),
+				_MAKE_GLOBAL(pgprot_val(prot)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: arch/i386/mm/init.c:359:
+^I^Igdt = (struct desc_struct *)(GDTM_START + $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1098: FILE: arch/i386/mm/init.c:365:
+		__asm__ __volatile__("lidt %0": "=m" (idt_descr));
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1133: FILE: arch/i386/mm/init.c:401:
+		pmd_t *pmd = pmd_offset(swapper_pg_dir+pgd_index(addr), addr);
 		                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1134: FILE: arch/i386/mm/init.c:402:
+		pmd_t *pmd = pmd_offset(swapper_pg_dir+pgd_index(addr), addr);
+		set_pmd(pmd, __pmd(0));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1135: FILE: arch/i386/mm/init.c:403:
+		addr += 1<<PMD_SHIFT;
 		         ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: space prohibited after that open parenthesis '('
#1199: FILE: arch/i386/lib/old-checksum.c:22:
+csum_partial_copy_generic( const char *src, char *dst, int len, int sum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: arch/i386/lib/old-checksum.c:23:
+csum_partial_copy_generic( const char *src, char *dst, int len, int sum,
+	int *src_err_ptr, int *dst_err_ptr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!src_err_ptr'
#1202: FILE: arch/i386/lib/old-checksum.c:25:
+	if ((!src_err_ptr) && (!dst_err_ptr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dst_err_ptr'
#1202: FILE: arch/i386/lib/old-checksum.c:25:
+	if ((!src_err_ptr) && (!dst_err_ptr)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1211: FILE: arch/i386/lib/old-checksum.c:34:
+		int missing = copy_from_user(dst, src, len);
+		if (missing) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1224: FILE: arch/i386/lib/old-checksum.c:47:
+		return sum;
+	} else {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1244: FILE: arch/i386/lib/usercopy.c:14:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1320: FILE: arch/i386/lib/usercopy.c:282:
+^Iif (likely(page != NULL)) {^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#1320: FILE: arch/i386/lib/usercopy.c:282:
+	if (likely(page != NULL)) {	

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1347: FILE: arch/i386/lib/usercopy.c:309:
+ * Source/target buffer must be kernel space, $

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#1355: FILE: arch/i386/lib/usercopy.c:317:
+	/* ignore errors, just check how much was sucessfully transfered */
 	                                          ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1366: FILE: arch/i386/lib/usercopy.c:328:
+		offset = addr & (PAGE_SIZE-1);
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1367: FILE: arch/i386/lib/usercopy.c:329:
+		if (bytes > PAGE_SIZE-offset)
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1368: FILE: arch/i386/lib/usercopy.c:330:
+			bytes = PAGE_SIZE-offset;
 			                 ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1372: FILE: arch/i386/lib/usercopy.c:334:
+#define HANDLE_TYPE(type) \
+	case sizeof(type): *(type *)(maddr+offset) = *(type *)(buf); break;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1372: FILE: arch/i386/lib/usercopy.c:334:
+#define HANDLE_TYPE(type) \
+	case sizeof(type): *(type *)(maddr+offset) = *(type *)(buf); break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1373: FILE: arch/i386/lib/usercopy.c:335:
+	case sizeof(type): *(type *)(maddr+offset) = *(type *)(buf); break;
 	                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1373: FILE: arch/i386/lib/usercopy.c:335:
+	case sizeof(type): *(type *)(maddr+offset) = *(type *)(buf); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1385: FILE: arch/i386/lib/usercopy.c:347:
+#define HANDLE_TYPE(type) \
+	case sizeof(type): *(type *)(buf) = *(type *)(maddr+offset); break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1385: FILE: arch/i386/lib/usercopy.c:347:
+#define HANDLE_TYPE(type) \
+	case sizeof(type): *(type *)(buf) = *(type *)(maddr+offset); break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1386: FILE: arch/i386/lib/usercopy.c:348:
+	case sizeof(type): *(type *)(buf) = *(type *)(maddr+offset); break;
 	                                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1386: FILE: arch/i386/lib/usercopy.c:348:
+	case sizeof(type): *(type *)(buf) = *(type *)(maddr+offset); break;

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#1411: FILE: arch/i386/lib/usercopy.c:373:
+	/* ignore errors, just check how much was sucessfully transfered */
 	                                          ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1422: FILE: arch/i386/lib/usercopy.c:384:
+		offset = addr & (PAGE_SIZE-1);
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1423: FILE: arch/i386/lib/usercopy.c:385:
+		if (bytes > PAGE_SIZE-offset)
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1424: FILE: arch/i386/lib/usercopy.c:386:
+			bytes = PAGE_SIZE-offset;
 			                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1440: FILE: arch/i386/lib/usercopy.c:402:
+		BUG_ON(bytes < 0 || copied < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1484: FILE: arch/i386/lib/usercopy.c:446:
+int indirect_strncpy_from_user_size(unsigned int size, void *val,
+		const void *ptr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1494: FILE: arch/i386/lib/usercopy.c:456:
+	BUG_ON(copied < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1509: FILE: arch/i386/lib/usercopy.c:471:
+	BUG_ON(copied < 0);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#1552: FILE: arch/i386/kernel/entry.S:101:
+ * We must be careful here and guarentee that no task switch can occur
                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#1554: FILE: arch/i386/kernel/entry.S:103:
+ * high mapped stack. This guarentee is ret_from_exception function, where
                            ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1594: FILE: arch/i386/kernel/entry.S:143:
+ * output:^I%ebx = kernel current, %ecx = %esp = kernel stack $

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1940: FILE: arch/i386/kernel/i386_ksyms.c:105:
+EXPORT_SYMBOL(direct_strncpy_from_user);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1942: FILE: arch/i386/kernel/i386_ksyms.c:107:
+EXPORT_SYMBOL(direct_clear_user);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1949: FILE: arch/i386/kernel/i386_ksyms.c:113:
+EXPORT_SYMBOL(indirect_get_user_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1950: FILE: arch/i386/kernel/i386_ksyms.c:114:
+EXPORT_SYMBOL(indirect_put_user_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1951: FILE: arch/i386/kernel/i386_ksyms.c:115:
+EXPORT_SYMBOL(indirect_clear_user_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1952: FILE: arch/i386/kernel/i386_ksyms.c:116:
+EXPORT_SYMBOL(indirect_strncpy_from_user_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1953: FILE: arch/i386/kernel/i386_ksyms.c:117:
+EXPORT_SYMBOL(indirect_strnlen_user_size);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1981: FILE: arch/i386/kernel/i387.c:278:
+		*(t+1) = *(f+1);
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1981: FILE: arch/i386/kernel/i387.c:278:
+		*(t+1) = *(f+1);
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2018: FILE: arch/i386/kernel/i387.c:316:
+		*(t+1) = *(f+1);
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2018: FILE: arch/i386/kernel/i387.c:316:
+		*(t+1) = *(f+1);
 		            ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2040: FILE: arch/i386/kernel/init_task.c:32:
+struct tss_struct init_tss[NR_CPUS] $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.tss") over __attribute__((__section__(".data.tss")))
#2042: FILE: arch/i386/kernel/init_task.c:34:
+	__attribute__((__section__(".data.tss")))

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2046: FILE: arch/i386/kernel/init_task.c:38:
+#endif
+	= { [0 ... NR_CPUS-1] = INIT_TSS };

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2046: FILE: arch/i386/kernel/init_task.c:38:
+	= { [0 ... NR_CPUS-1] = INIT_TSS };
 	                  ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2063: FILE: arch/i386/kernel/ldt.c:42:
+	newldt = vmalloc(mincount*LDT_ENTRY_SIZE);
 	                         ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2122: FILE: arch/i386/kernel/process.c:318:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2125: FILE: arch/i386/kernel/process.c:321:
+^I^I^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2156: FILE: arch/i386/kernel/process.c:516:
+		(THREAD_SIZE + LOTASK_BARRIER)*smp_processor_id();
 		                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2160: FILE: arch/i386/kernel/process.c:520:
+	pte = pte_offset(pmd_offset(pgd_offset_k(task_addr), task_addr),
+			task_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2164: FILE: arch/i386/kernel/process.c:524:
+	set_pte(pte, mk_pte_phys(__pa((unsigned long)tsk + PAGE_SIZE),
+				PAGE_KERNEL));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2168: FILE: arch/i386/kernel/process.c:528:
+	__flush_tlb_one(task_addr+PAGE_SIZE);
 	                         ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2174: FILE: arch/i386/kernel/process.c:534:
+		tss->esp0 = tsk->thread.esp0 = task_addr +

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2175: FILE: arch/i386/kernel/process.c:535:
+				(tsk->thread.esp0 & (THREAD_SIZE-1));
 				                                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2177: FILE: arch/i386/kernel/process.c:537:
+		tss->esp0 = tsk->thread.esp0 = task_addr + THREAD_SIZE;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2274: FILE: arch/i386/kernel/signal.c:196:
+#define COPY(x)		regs->x = sc.x

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2274: FILE: arch/i386/kernel/signal.c:196:
+#define COPY(x)		regs->x = sc.x

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2274: FILE: arch/i386/kernel/signal.c:196:
+#define COPY(x)		regs->x = sc.x

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2309: FILE: arch/i386/kernel/signal.c:232:
+		struct _fpstate * buf = sc.fpstate;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2438: FILE: arch/i386/kernel/traps.c:59:
+  __attribute__((__section__(".data.ldt")))$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.ldt") over __attribute__((__section__(".data.ldt")))
#2438: FILE: arch/i386/kernel/traps.c:59:
+  __attribute__((__section__(".data.ldt")))

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2440: FILE: arch/i386/kernel/traps.c:61:
+#endif
+  = { { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2440: FILE: arch/i386/kernel/traps.c:61:
+  = { { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2460: FILE: arch/i386/kernel/traps.c:118:
+	if (addr >= (unsigned long)&__start___locore &&
+			addr < (unsigned long)&__stop___locore)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2472: FILE: arch/i386/kernel/traps.c:141:
+	if (addr >= (unsigned long)&__start___locore &&
+			addr < (unsigned long)&__stop___locore)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2473: FILE: arch/i386/kernel/traps.c:142:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2473: FILE: arch/i386/kernel/traps.c:142:
+                return 1;$

ERROR:SPACING: space required before the open parenthesis '('
#2483: FILE: arch/i386/kernel/traps.c:253:
+			if(__direct_get_user(c,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2484: FILE: arch/i386/kernel/traps.c:254:
+			if(__direct_get_user(c,
+					&((unsigned char*)regs->eip)[i])) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2484: FILE: arch/i386/kernel/traps.c:254:
+					&((unsigned char*)regs->eip)[i])) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2503: FILE: arch/i386/kernel/traps.c:287:
+	if (__direct_get_user(file, (char **)(eip + 4)) ||
+		(unsigned long)file < PAGE_OFFSET || __direct_get_user(c, file))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'eip >= PAGE_OFFSET'
#2515: FILE: arch/i386/kernel/traps.c:557:
+	if (!user_mode(regs) && (eip >= PAGE_OFFSET) &&
+			(regs->eflags & TF_MASK))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2516: FILE: arch/i386/kernel/traps.c:558:
+	if (!user_mode(regs) && (eip >= PAGE_OFFSET) &&
+			(regs->eflags & TF_MASK))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2563: FILE: arch/i386/kernel/traps.c:901:
+	_set_tssldt_desc(gdt_table+__TSS(n), (int)(TSS_START +
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2564: FILE: arch/i386/kernel/traps.c:902:
+		((unsigned long)addr-(unsigned long)&init_tss)), 235, 0x89);
 		                    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2575: FILE: arch/i386/kernel/traps.c:913:
+		addr = (void*)LDT_START;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2578: FILE: arch/i386/kernel/traps.c:916:
+	_set_tssldt_desc(gdt_table+__LDT(n), (int)addr, ((size << 3)-1), 0x82);
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2578: FILE: arch/i386/kernel/traps.c:916:
+	_set_tssldt_desc(gdt_table+__LDT(n), (int)addr, ((size << 3)-1), 0x82);
 	                                                            ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2609: FILE: arch/i386/kernel/vm86.c:283:
+	tss->esp0 = tsk->thread.esp0 = tsk->thread.utask +

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2610: FILE: arch/i386/kernel/vm86.c:284:
+		((unsigned long)&info->VM86_TSS_ESP0 & (THREAD_SIZE-1));
 		                                                   ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2701: FILE: arch/i386/tools/offset.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#2719: FILE: arch/i386/tools/offset.c:19:
+#include <asm/processor.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#2722: FILE: arch/i386/tools/offset.c:22:
+#define _offset(type, member) (&(((type *)NULL)->member))

ERROR:SPACING: space prohibited after that open parenthesis '('
#2750: FILE: arch/i386/tools/offset.c:50:
+	size(  "#define TASK_STRUCT_SIZE   ", struct task_struct);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2767: FILE: arch/i386/tools/offset.c:67:
+	offset("#define TASK_THREAD_RELOADDBG ", struct task_struct,
+							thread.reloaddbg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2770: FILE: arch/i386/tools/offset.c:70:
+	offset("#define TASK_THREAD_DEBUGREG0 ", struct task_struct,
+							thread.debugreg);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2777: FILE: arch/i386/tools/offset.c:77:
+	size(  "#define TSS_STRUCT_SIZE   ", struct tss_struct);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2788: FILE: arch/i386/tools/offset.c:88:
+
+

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2878: FILE: arch/i386/vmlinux.lds.S:1:
+#include <linux/config.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 61 errors, 86 warnings, 101 checks, 2633 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
