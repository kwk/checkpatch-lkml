WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> > The patch below addresses this issue by parsing the subdirectory name and

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: fs/sysfs/dir.c:99:
+		      struct dentry * dir)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/sysfs/dir.c:122:
+static int make_one_dir(struct kobject * k, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/sysfs/dir.c:122:
+static int make_one_dir(struct kobject * k, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/sysfs/dir.c:123:
+			char * name, struct dentry ** d)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#130: FILE: fs/sysfs/dir.c:123:
+			char * name, struct dentry ** d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: fs/sysfs/dir.c:125:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: fs/sysfs/dir.c:126:
+	struct dentry * dir;

CHECK:BRACES: braces {} should be used on all arms of this statement
#140: FILE: fs/sysfs/dir.c:133:
+	if (!IS_ERR(dir)) {
[...]
-		dput(*d);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#146: FILE: fs/sysfs/dir.c:139:
+		if (!dir->d_inode)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#148: FILE: fs/sysfs/dir.c:141:
+		else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#149: FILE: fs/sysfs/dir.c:142:
+			struct sysfs_dirent * sd = dir->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: fs/sysfs/dir.c:143:
+			struct sysfs_dirent * sd = dir->d_fsdata;
+			atomic_inc(&sd->s_refs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#179: FILE: fs/sysfs/dir.c:169:
+ *	occurence with a NULL character and creates a directory with the name
   	^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: fs/sysfs/dir.c:193:
+	struct dentry * parent = k->dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: fs/sysfs/dir.c:194:
+	struct dentry * dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#206: FILE: fs/sysfs/dir.c:195:
+	char * str, * s;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#206: FILE: fs/sysfs/dir.c:195:
+	char * str, * s;
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: fs/sysfs/dir.c:196:
+	char * next;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#210: FILE: fs/sysfs/dir.c:199:
+	s = str = kstrdup(n, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#225: FILE: fs/sysfs/dir.c:214:
+			goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: fs/sysfs/dir.c:237:
+	const char * name = kobject_name(kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/sysfs/dir.c:238:
+	struct dentry * dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/sysfs/dir.c:366:
+static void remove_one_subdir(struct kobject * k, struct dentry * parent, char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/sysfs/dir.c:366:
+static void remove_one_subdir(struct kobject * k, struct dentry * parent, char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/sysfs/dir.c:366:
+static void remove_one_subdir(struct kobject * k, struct dentry * parent, char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: fs/sysfs/dir.c:368:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: fs/sysfs/dir.c:369:
+	struct dentry * dir;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: fs/sysfs/dir.c:386:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: fs/sysfs/dir.c:387:
+void sysfs_remove_subdir(struct kobject * k, const char * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: fs/sysfs/dir.c:387:
+void sysfs_remove_subdir(struct kobject * k, const char * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: fs/sysfs/dir.c:389:
+	struct dentry * parent = k->dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: fs/sysfs/dir.c:390:
+	struct dentry * dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#301: FILE: fs/sysfs/dir.c:391:
+	char * str, * s;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#301: FILE: fs/sysfs/dir.c:391:
+	char * str, * s;
 	            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#302: FILE: fs/sysfs/dir.c:392:
+	char * next;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: fs/sysfs/dir.c:394:
+	s = str = kstrdup(n, GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: fs/sysfs/group.c:71:
+	if (grp->name) {
[...]
+	} else
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#353: FILE: fs/sysfs/group.c:72:
+		struct dentry * parent = kobj->dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: fs/sysfs/group.c:73:
+		char * str, * s;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#354: FILE: fs/sysfs/group.c:73:
+		char * str, * s;
 		            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: fs/sysfs/group.c:74:
+		char * next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: fs/sysfs/group.c:75:
+		char * next;
+		s = str = kstrdup(grp->name, GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#356: FILE: fs/sysfs/group.c:75:
+		s = str = kstrdup(grp->name, GFP_KERNEL);

CHECK:BRACES: Unbalanced braces around else statement
#377: FILE: fs/sysfs/group.c:96:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: fs/sysfs/sysfs.h:15:
+extern void sysfs_remove_subdir(struct kobject *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#397: FILE: fs/sysfs/sysfs.h:15:
+extern void sysfs_remove_subdir(struct kobject *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#397: FILE: fs/sysfs/sysfs.h:15:
+extern void sysfs_remove_subdir(struct kobject *, const char *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 6 warnings, 11 checks, 319 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
