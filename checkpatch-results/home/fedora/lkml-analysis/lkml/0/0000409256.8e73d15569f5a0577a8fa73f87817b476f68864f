WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#75: 
Science is what we can tell a computer. Art is everything else. --- D.E.Knuth

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: drivers/scsi/sg.c:1694:
+sg_map_user_pages(Sg_scatter_hold *schp, const unsigned int max_sgls, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Sg_scatter_hold>
#115: FILE: drivers/scsi/sg.c:1694:
+sg_map_user_pages(Sg_scatter_hold *schp, const unsigned int max_sgls, 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/scsi/sg.c:1695:
+sg_map_user_pages(Sg_scatter_hold *schp, const unsigned int max_sgls, 
 	          unsigned long uaddr, size_t count, int rw)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: drivers/scsi/sg.c:1700:
+^Isetup_sgl_page_walk(gup, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: drivers/scsi/sg.c:1701:
+^I^I^Iuaddr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: drivers/scsi/sg.c:1701:
+	setup_sgl_page_walk(gup, 
+			uaddr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/scsi/sg.c:1702:
+^I^I^Iuaddr + count, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#172: FILE: drivers/scsi/sg.c:1724:
+	if (gup->pw.vm_flags & (VM_READ|VM_MAYREAD)) dirtied = 0;
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#172: FILE: drivers/scsi/sg.c:1724:
+	if (gup->pw.vm_flags & (VM_READ|VM_MAYREAD)) dirtied = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: drivers/scsi/sg.c:1725:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: drivers/scsi/sg.c:1748:
+^Ires = sg_map_user_pages(schp, mx_sc_elems, (unsigned long)hp->dxferp, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: drivers/scsi/sg.c:1749:
+	res = sg_map_user_pages(schp, mx_sc_elems, (unsigned long)hp->dxferp, 
 			dxfer_len, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: drivers/scsi/st.c:165:
+static int st_map_user_pages(ST_buffer *, const unsigned int, $

CHECK:CAMELCASE: Avoid CamelCase: <STbp>
#240: FILE: drivers/scsi/st.c:1330:
+	STbp = STp->buffer;

CHECK:CAMELCASE: Avoid CamelCase: <STp>
#240: FILE: drivers/scsi/st.c:1330:
+	STbp = STp->buffer;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: drivers/scsi/st.c:3979:
+static int st_map_user_pages(ST_buffer *STbp, const unsigned int max_pages, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: drivers/scsi/st.c:3986:
+^Isetup_sgl_page_walk(gup, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: drivers/scsi/st.c:3987:
+^I^I^Iuaddr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: drivers/scsi/st.c:3987:
+	setup_sgl_page_walk(gup, 
+			uaddr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: drivers/scsi/st.c:3988:
+^I^I^Iuaddr + count, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: drivers/scsi/st.c:3989:
+^I^I^Irw == READ, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: drivers/scsi/st.c:3990:
+^I^I^I&(STbp->sg[0]), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around STbp->sg[0]
#303: FILE: drivers/scsi/st.c:3990:
+			&(STbp->sg[0]), 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#464: FILE: mm/nommu.c:117:
+struct page *get_one_user_page(struct task_struct *tsk,
+			   struct vm_area_struct *vma, int vm_flags,
+			   unsigned long start) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: mm/nommu.c:118:
+struct page *get_one_user_page(struct task_struct *tsk,
+			   struct vm_area_struct *vma, int vm_flags,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#471: FILE: mm/nommu.c:124:
+	else page = ERR_PTR(-EFAULT);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#540: FILE: mm/page_walk.c:71:
+		if (!PageReserved(gup->sgl[gup->count].page)) {
+			page_cache_release(gup->sgl[gup->count].page);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: mm/page_walk.c:87:
+ * Driver authors often get this wrong, so we provide it here. $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#557: FILE: mm/page_walk.c:89:
+static void fixup_sgl_walk(struct gup_add_sgls *gup) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#558: FILE: mm/page_walk.c:90:
+static void fixup_sgl_walk(struct gup_add_sgls *gup) {
+

ERROR:SPACING: spaces required around that '-=' (ctx:VxW)
#575: FILE: mm/page_walk.c:107:
+		gup->todo-= PAGE_SIZE;
 		         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#607: FILE: mm/page_walk.c:205:
+void cleanup_simple_page_walk(struct gup_add_pages *gup) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: mm/page_walk.c:206:
+	BUG_ON(!gup->pw.cleaner);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#627: FILE: mm/page_walk.c:222:
+	gup->max_sgls = (end + PAGE_SIZE - 1)/PAGE_SIZE - start/PAGE_SIZE;
 	                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#627: FILE: mm/page_walk.c:222:
+	gup->max_sgls = (end + PAGE_SIZE - 1)/PAGE_SIZE - start/PAGE_SIZE;
 	                                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_entries < gup->max_sgls'
#629: FILE: mm/page_walk.c:224:
+	if (def && (max_entries < gup->max_sgls)) gup->max_sgls = max_entries;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#629: FILE: mm/page_walk.c:224:
+	if (def && (max_entries < gup->max_sgls)) gup->max_sgls = max_entries;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#634: FILE: mm/page_walk.c:229:
+	gup->sgl=def ?: kmalloc(gup->max_sgls * sizeof(gup->sgl[0]),GFP_KERNEL);
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#634: FILE: mm/page_walk.c:229:
+	gup->sgl=def ?: kmalloc(gup->max_sgls * sizeof(gup->sgl[0]),GFP_KERNEL);
 	                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#643: FILE: mm/page_walk.c:243:
+void cleanup_sgl_page_walk(struct gup_add_sgls *gup, unsigned int dirtied) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: mm/page_walk.c:244:
+^I/* This does only cause non-sense writeouts, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: mm/page_walk.c:245:
+^I * but doesn't corrupt data. $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#647: FILE: mm/page_walk.c:247:
+	WARN_ON(dirtied && (gup->pw.vm_flags & (VM_READ|VM_MAYREAD)));
 	                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#650: FILE: mm/page_walk.c:250:
+	BUG_ON(!gup->pw.cleaner);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409256.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 4 warnings, 15 checks, 529 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409256.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
