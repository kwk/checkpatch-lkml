WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#14: 
Subject: [PATCH(es)] Re: ramfs problem... (unlink of sparse file in "D" state)

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
is nothing special in that respect. We don't need new callbacks, get_block()

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#100: FILE: fs/buffer.c:1575:
+		UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#127: FILE: mm/filemap.c:2452:
+	unsigned	bytes;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#224: FILE: fs/ext2/inode.c:1191:
+		if (raw_inode->i_size_high || (inode->i_size & (1<<31))) {
 		                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: fs/ext2/super.c:383:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: fs/ext2/super.c:383:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: fs/ext2/super.c:390:
+	loff_t res = EXT2_NDIR_BLOCKS;
+	res += 1LL << (bits-2);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#275: FILE: fs/ext2/super.c:390:
+	res += 1LL << (bits-2);
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#276: FILE: fs/ext2/super.c:391:
+	res += 1LL << (2*(bits-2));
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#276: FILE: fs/ext2/super.c:391:
+	res += 1LL << (2*(bits-2));
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#277: FILE: fs/ext2/super.c:392:
+	res += 1LL << (3*(bits-2));
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#277: FILE: fs/ext2/super.c:392:
+	res += 1LL << (3*(bits-2));
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#313: FILE: fs/ext2/file.c:102:
+	setattr:	ext2_notify_change,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#313: FILE: fs/ext2/file.c:102:
+	setattr:	ext2_notify_change,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#331: FILE: fs/ext2/inode.c:1240:
+static struct {unsigned attr, flag, ext2;} ext2_attr[] = {

ERROR:SPACING: space required after that ';' (ctx:VxV)
#331: FILE: fs/ext2/inode.c:1240:
+static struct {unsigned attr, flag, ext2;} ext2_attr[] = {
                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: fs/ext2/inode.c:1246:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: fs/ext2/inode.c:1277:
+		unsigned flags = iattr->ia_attr_flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: fs/ext2/inode.c:1279:
+		int i;
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ext2_attr)
#390: FILE: fs/ext2/inode.c:1279:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#390: FILE: fs/ext2/inode.c:1279:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#390: FILE: fs/ext2/inode.c:1279:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#390: FILE: fs/ext2/inode.c:1279:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {
 		                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: include/linux/ext2_fs.h:585:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: include/linux/ext2_fs.h:585:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#409: FILE: include/linux/ext2_fs.h:585:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#409: FILE: include/linux/ext2_fs.h:585:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000557705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 13 warnings, 9 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000557705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
