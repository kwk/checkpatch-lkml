WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: kernel/trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Chaging' may be misspelled - perhaps 'Changing'?
#70: FILE: kernel/trace.c:30:
+ *	09/09/99, Chaging the format of an event record in order to reduce the
   	          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: kernel/trace.c:36:
+ *^Iplanned for a system who gets at least one clock tick every 10 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#97: FILE: kernel/trace.c:57:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#99: FILE: kernel/trace.c:59:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#100: FILE: kernel/trace.c:60:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#101: FILE: kernel/trace.c:61:
+#include <asm/pgtable.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#106: FILE: kernel/trace.c:66:
+static spinlock_t ^Itrace_spin_lock;^I/* Spinlock in order to lock kernel */$

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#109: FILE: kernel/trace.c:69:
+static struct task_struct*	daemon_task_struct;	/* Task structure of the tracer daemon */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#110: FILE: kernel/trace.c:70:
+static struct vm_area_struct*	tracer_vm_area;		/* VM area where buffers are mapped */

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#117: FILE: kernel/trace.c:77:
+static int		use_syscall_eip_bounds;	/* Use adress bounds to fetch the EIP where call is made */
           		                       	       ^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#117: FILE: kernel/trace.c:77:
+static int		use_syscall_eip_bounds;	/* Use adress bounds to fetch the EIP where call is made */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#120: FILE: kernel/trace.c:80:
+static void*		lower_eip_bound;	/* The lower bound EIP */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#121: FILE: kernel/trace.c:81:
+static void*		upper_eip_bound;	/* The upper bound EIP */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#130: FILE: kernel/trace.c:90:
+static int		syscall_eip_depth_set;	/* The call depth at which to fetch EIP has been set */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#138: FILE: kernel/trace.c:98:
+static char*		trace_buf = NULL;	/* Trace buffer */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#138: FILE: kernel/trace.c:98:
+static char*		trace_buf = NULL;	/* Trace buffer */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: kernel/trace.c:104:
+static int^I^Inum_cpus;               /* Number of CPUs found */ $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#146: FILE: kernel/trace.c:106:
+unsigned int		syscall_entry_trace_active = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#147: FILE: kernel/trace.c:107:
+unsigned int		syscall_exit_trace_active = 0;

WARNING:SPACING: space prohibited before semicolon
#149: FILE: kernel/trace.c:109:
+static int		fetch_syscall_eip_use_bounds ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#151: FILE: kernel/trace.c:111:
+static void*		syscall_lower_eip_bound;

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#152: FILE: kernel/trace.c:112:
+static void*		syscall_upper_eip_bound;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: kernel/trace.c:115:
+static struct timer_list heartbeat_timer;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: kernel/trace.c:120:
+/* The data structure shared between the tracing driver and the trace daemon $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#161: FILE: kernel/trace.c:121:
+/* The data structure shared between the tracing driver and the trace daemon 
+   via ioctl. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#161: FILE: kernel/trace.c:121:
+   via ioctl. */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#171: FILE: kernel/trace.c:131:
+static char *user_event_data = NULL;		/* The data associated with a user event */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: kernel/trace.c:134:
+static u32 start_reserve = TRACER_FIRST_EVENT_SIZE; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: kernel/trace.c:136:
+/* Space reserved for TRACE_EV_BUFFER_END event + sizeof lost word, which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: kernel/trace.c:137:
+   though the sizeof lost word isn't necessarily contiguous with rest of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#177: FILE: kernel/trace.c:137:
+/* Space reserved for TRACE_EV_BUFFER_END event + sizeof lost word, which 
+   though the sizeof lost word isn't necessarily contiguous with rest of 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: kernel/trace.c:138:
+   event (it's always at the end of the buffer) is included here for code $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: kernel/trace.c:139:
+   clarity. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: kernel/trace.c:140:
+static u32 end_reserve = TRACER_LAST_EVENT_SIZE; $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#184: FILE: kernel/trace.c:144:
+static int event_struct_size[TRACE_EV_MAX + 1] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#185: FILE: kernel/trace.c:145:
+	sizeof(trace_start)		/* TRACE_START */ ,
 	                   		                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#186: FILE: kernel/trace.c:146:
+	sizeof(trace_syscall_entry)	/* TRACE_SYSCALL_ENTRY */ ,
 	                           	                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#187: FILE: kernel/trace.c:147:
+	0				/* TRACE_SYSCALL_EXIT */ ,
 	 				                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#188: FILE: kernel/trace.c:148:
+	sizeof(trace_trap_entry)	/* TRACE_TRAP_ENTRY */ ,
 	                        	                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#189: FILE: kernel/trace.c:149:
+	0				/* TRACE_TRAP_EXIT */ ,
 	 				                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#190: FILE: kernel/trace.c:150:
+	sizeof(trace_irq_entry)		/* TRACE_IRQ_ENTRY */ ,
 	                       		                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#191: FILE: kernel/trace.c:151:
+	0				/* TRACE_IRQ_EXIT */ ,
 	 				                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#192: FILE: kernel/trace.c:152:
+	sizeof(trace_schedchange)	/* TRACE_SCHEDCHANGE */ ,
 	                         	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#193: FILE: kernel/trace.c:153:
+	0				/* TRACE_KERNEL_TIMER */ ,
 	 				                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#194: FILE: kernel/trace.c:154:
+	sizeof(trace_soft_irq)		/* TRACE_SOFT_IRQ */ ,
 	                      		                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#195: FILE: kernel/trace.c:155:
+	sizeof(trace_process)		/* TRACE_PROCESS */ ,
 	                     		                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#196: FILE: kernel/trace.c:156:
+	sizeof(trace_file_system)	/* TRACE_FILE_SYSTEM */ ,
 	                         	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#197: FILE: kernel/trace.c:157:
+	sizeof(trace_timer)		/* TRACE_TIMER */ ,
 	                   		                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#198: FILE: kernel/trace.c:158:
+	sizeof(trace_memory)		/* TRACE_MEMORY */ ,
 	                    		                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#199: FILE: kernel/trace.c:159:
+	sizeof(trace_socket)		/* TRACE_SOCKET */ ,
 	                    		                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#200: FILE: kernel/trace.c:160:
+	sizeof(trace_ipc)		/* TRACE_IPC */ ,
 	                 		                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#201: FILE: kernel/trace.c:161:
+	sizeof(trace_network)		/* TRACE_NETWORK */ ,
 	                     		                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#202: FILE: kernel/trace.c:162:
+	sizeof(trace_buffer_start)	/* TRACE_BUFFER_START */ ,
 	                          	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#203: FILE: kernel/trace.c:163:
+	sizeof(trace_buffer_end)	/* TRACE_BUFFER_END */ ,
 	                        	                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#204: FILE: kernel/trace.c:164:
+	sizeof(trace_new_event)		/* TRACE_NEW_EVENT */ ,
 	                       		                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#205: FILE: kernel/trace.c:165:
+	sizeof(trace_custom)		/* TRACE_CUSTOM */ ,
 	                    		                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#228: FILE: kernel/trace.c:188:
+/* Circular list lock. This is classic lock that provides for atomic access
+to the circular list. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#228: FILE: kernel/trace.c:188:
+to the circular list. */

WARNING:SPACING: missing space after struct definition
#232: FILE: kernel/trace.c:192:
+struct trace_handle_struct{

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#243: FILE: kernel/trace.c:203:
+#define FIX_SIZE(x) (((x) - 1) & PAGE_MASK) + PAGE_SIZE

CHECK:SPACING: No space is necessary after a cast
#255: FILE: kernel/trace.c:215:
+	kva = (unsigned long) page_address(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#271: FILE: kernel/trace.c:231:
+	adr = (unsigned long) mem;

CHECK:SPACING: No space is necessary after a cast
#273: FILE: kernel/trace.c:233:
+		mem_map_reserve(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#288: FILE: kernel/trace.c:248:
+	adr = (unsigned long) mem;

CHECK:SPACING: No space is necessary after a cast
#289: FILE: kernel/trace.c:249:
+	while ((long) size > 0) {

CHECK:SPACING: No space is necessary after a cast
#290: FILE: kernel/trace.c:250:
+		mem_map_unreserve(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#302: FILE: kernel/trace.c:262:
+	unsigned long start = (unsigned long) adr;

CHECK:SPACING: No space is necessary after a cast
#305: FILE: kernel/trace.c:265:
+	pos = (unsigned long) start_pos;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: kernel/trace.c:266:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: kernel/trace.c:271:
+^I^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#318: FILE: kernel/trace.c:278:
+}
+/* \end{Code inspired from BTTV driver} */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#323: FILE: kernel/trace.c:283:
+ *	Writes data to the destination buffer and updates the begining the
   	                                                      ^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#326: FILE: kernel/trace.c:286:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#326: FILE: kernel/trace.c:286:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#326: FILE: kernel/trace.c:286:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#327: FILE: kernel/trace.c:287:
+do\
+{\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: kernel/trace.c:289:
+   memcpy(DEST, SRC, SIZE);\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: kernel/trace.c:290:
+   DEST += SIZE;\$

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: kernel/trace.c:291:
+} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: kernel/trace.c:295:
+/* These inline atomic functions wrap the linux versions in order to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#336: FILE: kernel/trace.c:296:
+/* These inline atomic functions wrap the linux versions in order to 
+   implement the interface we want as well as to ensure memory barriers. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#336: FILE: kernel/trace.c:296:
+   implement the interface we want as well as to ensure memory barriers. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: kernel/trace.c:309:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: kernel/trace.c:317:
+inline int compare_and_store_volatile(volatile u32 *ptr, $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#357: FILE: kernel/trace.c:317:
+inline int compare_and_store_volatile(volatile u32 *ptr, 

WARNING:TYPO_SPELLING: 'substract' may be misspelled - perhaps 'subtract'?
#400: FILE: kernel/trace.c:360:
+ *	atomic_sub_volatile: - Atomically substract val from the value at ptr.
   	                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'substract' may be misspelled - perhaps 'subtract'?
#404: FILE: kernel/trace.c:364:
+ *	Uses memory barriers to substract val from *ptr.
   	                        ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: kernel/trace.c:385:
+	u32 bufno = TRACE_BUFFER_NUMBER_GET(index, offset_bits(cpu));
+	atomic_add_volatile(&fill_count(cpu, bufno), len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: kernel/trace.c:398:
+static inline void write_start_buffer_event(u32 buf_index, $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#445: FILE: kernel/trace.c:405:
+	uint16_t data_size;		/* Size of tracing data */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#447: FILE: kernel/trace.c:407:
+^Ichar* current_write_pos;       ^I/* Current position for writing */$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#447: FILE: kernel/trace.c:407:
+	char* current_write_pos;       	/* Current position for writing */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: kernel/trace.c:410:
+^Icurrent_write_pos = trace_buffer(cpu_id) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: kernel/trace.c:415:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: kernel/trace.c:461:
+static inline void write_end_buffer_event(u32 buf_index, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: kernel/trace.c:466:
+ ^Itrace_buffer_end end_buffer_event; /* End of buffer event */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: kernel/trace.c:466:
+ ^Itrace_buffer_end end_buffer_event; /* End of buffer event */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: kernel/trace.c:466:
+ ^Itrace_buffer_end end_buffer_event; /* End of buffer event */$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#509: FILE: kernel/trace.c:469:
+	char* current_write_pos;        /* Current position for writing */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#510: FILE: kernel/trace.c:470:
+	uint16_t data_size;		/* Size of tracing data */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: kernel/trace.c:515:
+ *^I@buf_index: index into the trace buffer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: kernel/trace.c:519:
+ *^IWrites the value contained in size_lost as the last word in the $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#560: FILE: kernel/trace.c:520:
+ *	Writes the value contained in size_lost as the last word in the 
+ *	the buffer specified by the buffer number contained in buf_index.  The

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#566: FILE: kernel/trace.c:526:
+	char* write_buffer_end;		/* End of buffer */

CHECK:SPACING: No space is necessary after a cast
#574: FILE: kernel/trace.c:534:
+	*((u32 *) (write_buffer_end - sizeof(size_lost))) = size_lost;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: kernel/trace.c:548:
+static inline void finalize_buffer(u32 end_index, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: kernel/trace.c:549:
+^I^I^I^I   u32 size_lost, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: kernel/trace.c:551:
+^I^I^I^I   trace_time_delta *tsc, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#598: FILE: kernel/trace.c:558:
+	/* In any buffer switch, we need to write out the lost size,
+	   which can be 0. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#598: FILE: kernel/trace.c:558:
+	   which can be 0. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: kernel/trace.c:561:
+^I/* Add the size lost and end event size to fill_count so that $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#602: FILE: kernel/trace.c:562:
+	/* Add the size lost and end event size to fill_count so that 
+	   the old buffer won't be seen as incomplete. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#602: FILE: kernel/trace.c:562:
+	   the old buffer won't be seen as incomplete. */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#619: FILE: kernel/trace.c:579:
+	unsigned long int flags;	/* CPU flags for lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: kernel/trace.c:584:
+^Ievents_end_index = TRACE_BUFFER_OFFSET_GET(index(cpu_id), $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#628: FILE: kernel/trace.c:588:
+	/* Size lost in buffer is the unused space after end of last event
+	   and end of buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#628: FILE: kernel/trace.c:588:
+	   and end of buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: kernel/trace.c:597:
+^I/* Write end event etc. and increment buffers_produced.  The  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#638: FILE: kernel/trace.c:598:
+	/* Write end event etc. and increment buffers_produced.  The  
+	   time used here is what the locking version uses as well. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#638: FILE: kernel/trace.c:598:
+	   time used here is what the locking version uses as well. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: kernel/trace.c:599:
+^Ifinalize_buffer(index(cpu_id) & index_mask(cpu_id), size_lost, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: kernel/trace.c:620:
+ *^Ilast available buffer, that buffer will be finalized and all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: kernel/trace.c:624:
+ *^IThe return value contains the result flags and is an ORed combination $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: kernel/trace.c:633:
+^I^I^I^Iu32 event_len, $

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#683: FILE: kernel/trace.c:643:
+	unsigned long int flags; /* CPU flags for lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: kernel/trace.c:645:
+^I/* Check whether the event is larger than a buffer */ $

ERROR:SPACING: space required before the open parenthesis '('
#686: FILE: kernel/trace.c:646:
+	if(event_len >= TRACE_BUFFER_SIZE(offset_bits))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: kernel/trace.c:652:
+^I/* We're already overrun, nothing left to do */  $

ERROR:SPACING: space required before the open parenthesis '('
#693: FILE: kernel/trace.c:653:
+	if(buffers_full(cpu_id) == 1) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: kernel/trace.c:658:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: kernel/trace.c:661:
+^I/* If this happens, we've been pushed to the edge of the last $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: kernel/trace.c:662:
+^I   available buffer which means we need to finalize it and increment $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#702: FILE: kernel/trace.c:662:
+	/* If this happens, we've been pushed to the edge of the last 
+	   available buffer which means we need to finalize it and increment 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: kernel/trace.c:663:
+^I   buffers_produced.  However, we don't want to allow $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: kernel/trace.c:664:
+^I   sBufferControl.index to be actually pushed to full or beyond, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: kernel/trace.c:667:
+^I   be enough space for this event, but there could be space for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: kernel/trace.c:668:
+^I   subsequent smaller event(s).  It doesn't matter if they write $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: kernel/trace.c:669:
+^I   themselves, because here we say that anything after the old_index $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: kernel/trace.c:670:
+^I   passed in to this function is lost, even if other events have or $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#713: FILE: kernel/trace.c:673:
+	   buffer is consumed by the daemon. */

ERROR:SPACING: space required before the open parenthesis '('
#714: FILE: kernel/trace.c:674:
+	if(buffers_ready == n_buffers(cpu_id) - 1) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#726: FILE: kernel/trace.c:686:
+		/* Write end event and lost size.  This increases buffer_count
+		   by the lost size, which is important later when we add the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#727: FILE: kernel/trace.c:687:
+		   deferred size. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#728: FILE: kernel/trace.c:688:
+^I^Ifinalize_buffer(old_index & index_mask, size_lost, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#732: FILE: kernel/trace.c:692:
+		/* We need to add the lost size to old index, but we can't
+		   do it now, or we'd roll index over and allow new events,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#735: FILE: kernel/trace.c:695:
+		   important later when start logging again. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: kernel/trace.c:725:
+ *^Ito by index_ptr will contain the index actually reserved by this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: kernel/trace.c:726:
+ *^Ifunction.  The timestamp reflecting the time the slot was reserved $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: kernel/trace.c:727:
+ *^Iwill be saved in *time_stamp.  The return value indicates whether $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: kernel/trace.c:729:
+ *^IIf the return value also indicates a discarded event, the values in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: kernel/trace.c:730:
+ *^I*index_ptr and *time_stamp will be indeterminate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: kernel/trace.c:732:
+ *^IThe return value contains the result flags and is an ORed combination $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: kernel/trace.c:735:
+ *^ILTT_BUFFER_SWITCH_NONE - no buffer switch occurred $

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#789: FILE: kernel/trace.c:749:
+	unsigned long int flags; /* CPU flags for lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: kernel/trace.c:760:
+^Idiscard_event = discard_check(old_index, slot_len, time_stamp, $

ERROR:SPACING: space required before the open parenthesis '('
#802: FILE: kernel/trace.c:762:
+	if(discard_event != LTT_EVENT_DISCARD_NONE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: kernel/trace.c:769:
+^I^I/* Yeah, we're re-using a param variable, is that bad form? */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#813: FILE: kernel/trace.c:773:
+		/* We're here because the event + ending reserve space would
+		   overflow or exactly fill old buffer.  Calculate new index

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#814: FILE: kernel/trace.c:774:
+		   again. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: kernel/trace.c:778:
+^I^Ioffset = TRACE_BUFFER_OFFSET_GET(new_index + end_reserve, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: kernel/trace.c:781:
+^I^I/* If we would actually overflow and not exactly fill the old $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: kernel/trace.c:782:
+^I^I   buffer, we reserve the first slot (after adding a buffer $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#822: FILE: kernel/trace.c:782:
+		/* If we would actually overflow and not exactly fill the old 
+		   buffer, we reserve the first slot (after adding a buffer 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#823: FILE: kernel/trace.c:783:
+		   start event) in the new one. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset < slot_len'
#824: FILE: kernel/trace.c:784:
+		if((offset < slot_len) && (offset > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset > 0'
#824: FILE: kernel/trace.c:784:
+		if((offset < slot_len) && (offset > 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#824: FILE: kernel/trace.c:784:
+		if((offset < slot_len) && (offset > 0)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#825: FILE: kernel/trace.c:785:
+		if((offset < slot_len) && (offset > 0)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: kernel/trace.c:786:
+^I^I^I/* This is an overflow, not an exact fit.  The $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#827: FILE: kernel/trace.c:787:
+			/* This is an overflow, not an exact fit.  The 
+			   reserved index is just after the space reserved for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#828: FILE: kernel/trace.c:788:
+			   the start event in the new buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#832: FILE: kernel/trace.c:792:
+^I^I^I/* Now the next free space is at the reserved index $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#833: FILE: kernel/trace.c:793:
+			/* Now the next free space is at the reserved index 
+			   plus the length of this event. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#833: FILE: kernel/trace.c:793:
+			   plus the length of this event. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#837: FILE: kernel/trace.c:797:
+			/* We'll exactly fill the old buffer, so our reserved
+			   index is still in the old buffer and our new index

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#838: FILE: kernel/trace.c:798:
+			   is in the new one + sStartReserve */

CHECK:BRACES: Unbalanced braces around else statement
#842: FILE: kernel/trace.c:802:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#843: FILE: kernel/trace.c:803:
+^I^I^I/* another event has actually pushed us into a new $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#844: FILE: kernel/trace.c:804:
+^I^I^I   buffer since we were called. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#844: FILE: kernel/trace.c:804:
+			/* another event has actually pushed us into a new 
+			   buffer since we were called. */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#844: FILE: kernel/trace.c:804:
+			   buffer since we were called. */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: kernel/trace.c:806:
+^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#849: FILE: kernel/trace.c:809:
+^I} while (!compare_and_store_volatile(&index(cpu_id), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: kernel/trace.c:813:
+^I   new global buffer control index, finish the buffer switch $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#853: FILE: kernel/trace.c:813:
+	/* Once we're successful in saving a new_index as the authoritative
+	   new global buffer control index, finish the buffer switch 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#854: FILE: kernel/trace.c:814:
+	   processing. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#860: FILE: kernel/trace.c:820:
+	/* At this point, our indices are set in stone, so we can safely
+	   write our start and end events and lost count to our buffers.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#863: FILE: kernel/trace.c:823:
+	   did the buffer switch already. */

ERROR:SPACING: space required before the open parenthesis '('
#864: FILE: kernel/trace.c:824:
+	if(offset < slot_len) { /* Event caused a buffer switch. */

ERROR:SPACING: space required before the open parenthesis '('
#865: FILE: kernel/trace.c:825:
+		if(offset > 0) /* We didn't exactly fill the old buffer */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#867: FILE: kernel/trace.c:827:
+			/* Set the size lost value in the old buffer.  That
+			   value is len+sEndReserve-offset-sEndReserve,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#868: FILE: kernel/trace.c:828:
+			   i.e. sEndReserve cancels itself out. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#871: FILE: kernel/trace.c:831:
+^I^I^I/* Since we exactly filled the old buffer, the index $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: kernel/trace.c:832:
+^I^I^I   we write the end event to is after the space $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#872: FILE: kernel/trace.c:832:
+			/* Since we exactly filled the old buffer, the index 
+			   we write the end event to is after the space 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#873: FILE: kernel/trace.c:833:
+			   reserved for this event. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#880: FILE: kernel/trace.c:840:
+^I^Ifinalize_buffer(old_index & index_mask, size_lost, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: kernel/trace.c:843:
+^I^I/* If we're here, we had a normal buffer switch and need to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: kernel/trace.c:844:
+^I^I   update the start buffer time before writing the event.  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#884: FILE: kernel/trace.c:844:
+		/* If we're here, we had a normal buffer switch and need to 
+		   update the start buffer time before writing the event.  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: kernel/trace.c:845:
+^I^I   The start buffer time is the same as the event time for the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: kernel/trace.c:846:
+^I^I   event reserved, and lTimeDelta of 0 but that also appears $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#887: FILE: kernel/trace.c:847:
+		   to be the case in the locking version as well. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#894: FILE: kernel/trace.c:854:
+^I^I/* new_index is always valid here, since it's set correctly $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#895: FILE: kernel/trace.c:855:
+		/* new_index is always valid here, since it's set correctly 
+		   if offset < len + sEndReserve, and we don't get here

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#898: FILE: kernel/trace.c:858:
+		   sEndReserve bytes. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#899: FILE: kernel/trace.c:859:
+^I^Iwrite_start_buffer_event(new_index & index_mask, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: kernel/trace.c:862:
+^I^I/* We initialize the new buffer by subtracting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: kernel/trace.c:863:
+^I^I   TRACE_BUFFER_SIZE rather than directly initializing to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#903: FILE: kernel/trace.c:863:
+		/* We initialize the new buffer by subtracting 
+		   TRACE_BUFFER_SIZE rather than directly initializing to 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: kernel/trace.c:864:
+^I^I   sStartReserve in case events have been already been added $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#907: FILE: kernel/trace.c:867:
+		   buffer event we just wrote. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: kernel/trace.c:868:
+^I^Inew_buf_no = TRACE_BUFFER_NUMBER_GET(new_index & index_mask, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: kernel/trace.c:871:
+		atomic_sub_volatile(&fill_count(cpu_id, new_buf_no),
+			    TRACE_BUFFER_SIZE(offset_bits) - start_reserve);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: kernel/trace.c:873:
+^I^I/* We need to check whether fill_count is less than the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: kernel/trace.c:874:
+^I^I   sStartReserve.  If this test is true, it means that $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#914: FILE: kernel/trace.c:874:
+		/* We need to check whether fill_count is less than the 
+		   sStartReserve.  If this test is true, it means that 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: kernel/trace.c:875:
+^I^I   subtracting the buffer size underflowed fill_count i.e. $

WARNING:REPEATED_WORD: Possible repeated word: 'Any'
#916: FILE: kernel/trace.c:876:
+		   fill_count represents an incomplete buffer.  Any any case, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: kernel/trace.c:876:
+^I^I   fill_count represents an incomplete buffer.  Any any case, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: kernel/trace.c:877:
+^I^I   we're completely fubared and don't have any choice but to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#918: FILE: kernel/trace.c:878:
+		   start the new buffer out fresh. */

ERROR:SPACING: space required before the open parenthesis '('
#919: FILE: kernel/trace.c:879:
+		if(atomic_read(&fill_count(cpu_id, new_buf_no)) < start_reserve)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: kernel/trace.c:880:
+^I^I^Iatomic_set_volatile(&fill_count(cpu_id, new_buf_no), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#926: FILE: kernel/trace.c:886:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: kernel/trace.c:898:
+ *^IThis is the fast path for reserving space in the trace buffer in the  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#939: FILE: kernel/trace.c:899:
+ *^Ilockless tracing scheme.  If a slot was successfully reserved, the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: kernel/trace.c:906:
+ *^IThe index reflecting the start position of the slot reserved will be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#950: FILE: kernel/trace.c:910:
+ *^Iindeterminate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: kernel/trace.c:912:
+ *^IThe return value contains the result flags and is an ORed combination $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: kernel/trace.c:921:
+static inline int trace_reserve(u32 slot_len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#962: FILE: kernel/trace.c:922:
+^I^I^I^Iu32 *index_ptr, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#975: FILE: kernel/trace.c:935:
+		/* If adding len + sEndReserve to the old index doesn't put us
+		   into a new buffer, this is what the new index would be. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#975: FILE: kernel/trace.c:935:
+		   into a new buffer, this is what the new index would be. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#977: FILE: kernel/trace.c:937:
+^I^Ioffset = TRACE_BUFFER_OFFSET_GET(new_index + end_reserve, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#981: FILE: kernel/trace.c:941:
+		/* If adding the length reserved for the end buffer event and
+		   lost count to the new index would put us into a new buffer,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#982: FILE: kernel/trace.c:942:
+^I^I   we need to do a buffer switch.  If in between now and the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#983: FILE: kernel/trace.c:943:
+^I^I   buffer switch another event that does fit comes in, no $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#984: FILE: kernel/trace.c:944:
+^I^I   problem because we check again in the slow version.  In $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#985: FILE: kernel/trace.c:945:
+^I^I   either case, there will always be room for the end event $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#986: FILE: kernel/trace.c:946:
+^I^I   in the old buffer.  The trick in this test is that adding $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: kernel/trace.c:947:
+^I^I   a length that would carry into the non-offset bits of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#988: FILE: kernel/trace.c:948:
+^I^I   index results in the offset portion being smaller than the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#989: FILE: kernel/trace.c:949:
+		   length that was added. */

ERROR:SPACING: space required before the open parenthesis '('
#990: FILE: kernel/trace.c:950:
+		if(offset < slot_len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#991: FILE: kernel/trace.c:951:
+^I^I^I/* We would roll over into a new buffer, need to do $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#992: FILE: kernel/trace.c:952:
+			/* We would roll over into a new buffer, need to do 
+			   buffer switch processing. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#992: FILE: kernel/trace.c:952:
+			   buffer switch processing. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#993: FILE: kernel/trace.c:953:
+^I^I^Ireturn trace_reserve_slow(old_index, slot_len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: kernel/trace.c:958:
+^I} while (!compare_and_store_volatile(&index(cpu_id), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1002: FILE: kernel/trace.c:962:
+^I   new global buffer control index, we can return old_index, the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1002: FILE: kernel/trace.c:962:
+	/* Once we're successful in saving a new_index as the authoritative
+	   new global buffer control index, we can return old_index, the 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1003: FILE: kernel/trace.c:963:
+	   successfully reserved index. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: kernel/trace.c:965:
+        /* Return the reserved index value */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1015: FILE: kernel/trace.c:975:
+ *^I@data_size: total event size $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1021: FILE: kernel/trace.c:981:
+ *^Ireserves space for an event if possible, writes the event and signals $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1024: FILE: kernel/trace.c:984:
+int lockless_write_event(u8 event_id, $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1026: FILE: kernel/trace.c:986:
+			 uint16_t data_size,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1036: FILE: kernel/trace.c:996:
+	char* current_write_pos;	/* Current position for writing */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1040: FILE: kernel/trace.c:1000:
+	/* Reserve space for the event.  If the space reserved is in a new
+	   buffer, note that fact. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1040: FILE: kernel/trace.c:1000:
+	   buffer, note that fact. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: kernel/trace.c:1001:
+^Ireserve_ret_code = trace_reserve((u32)data_size, &reserved_index, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: kernel/trace.c:1002:
+	reserve_ret_code = trace_reserve((u32)data_size, &reserved_index, 
+				 &time_stamp, &time_delta, cpu_id);

ERROR:SPACING: space required before the open parenthesis '('
#1045: FILE: kernel/trace.c:1005:
+	if(reserve_ret_code & LTT_EVENT_DISCARD)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: kernel/trace.c:1009:
+^Iif((reserve_ret_code & LTT_BUFFER_SWITCH) && $

ERROR:SPACING: space required before the open parenthesis '('
#1049: FILE: kernel/trace.c:1009:
+	if((reserve_ret_code & LTT_BUFFER_SWITCH) && 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: kernel/trace.c:1014:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1056: FILE: kernel/trace.c:1016:
+^Iif((reserve_ret_code & LTT_EVENT_DISCARD) || $

ERROR:SPACING: space required before the open parenthesis '('
#1056: FILE: kernel/trace.c:1016:
+	if((reserve_ret_code & LTT_EVENT_DISCARD) || 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1062: FILE: kernel/trace.c:1022:
+	/* The position we write to in the trace memory area is simply the
+	   beginning of trace memory plus the index we just reserved. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1062: FILE: kernel/trace.c:1022:
+	   beginning of trace memory plus the index we just reserved. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1065: FILE: kernel/trace.c:1025:
+^I/* If not using TSC, calculate delta */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1069: FILE: kernel/trace.c:1029:
+^Iif ((log_cpuid == 1) && (event_id != TRACE_EV_START) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'log_cpuid == 1'
#1069: FILE: kernel/trace.c:1029:
+	if ((log_cpuid == 1) && (event_id != TRACE_EV_START) 
+	    && (event_id != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != TRACE_EV_START'
#1069: FILE: kernel/trace.c:1029:
+	if ((log_cpuid == 1) && (event_id != TRACE_EV_START) 
+	    && (event_id != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != TRACE_EV_BUFFER_START'
#1069: FILE: kernel/trace.c:1029:
+	if ((log_cpuid == 1) && (event_id != TRACE_EV_START) 
+	    && (event_id != TRACE_EV_BUFFER_START))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1070: FILE: kernel/trace.c:1030:
+	if ((log_cpuid == 1) && (event_id != TRACE_EV_START) 
+	    && (event_id != TRACE_EV_BUFFER_START))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: kernel/trace.c:1063:
+^I/* We've written the event - update the fill_count for the buffer. */ $

ERROR:SPACING: space required before the open parenthesis '('
#1109: FILE: kernel/trace.c:1069:
+	if(reserve_ret_code & LTT_BUFFER_SWITCH) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1120: FILE: kernel/trace.c:1080:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: kernel/trace.c:1101:
+^I/* A buffer's been consumed, and as we've been waiting around at the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1142: FILE: kernel/trace.c:1102:
+	/* A buffer's been consumed, and as we've been waiting around at the 
+	   end of the last one produced, the one after that must now be free */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1142: FILE: kernel/trace.c:1102:
+	   end of the last one produced, the one after that must now be free */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1148: FILE: kernel/trace.c:1108:
+^I/* In the all-buffers-full case, sBufferControl.index is frozen at the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1149: FILE: kernel/trace.c:1109:
+	/* In the all-buffers-full case, sBufferControl.index is frozen at the 
+	   position of the first event that would have caused a buffer switch.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1150: FILE: kernel/trace.c:1110:
+^I   However, the fill_count for that buffer is not frozen and reflects $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1151: FILE: kernel/trace.c:1111:
+^I   not only the lost size calculated at that point, but also any $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: kernel/trace.c:1112:
+^I   smaller events that managed to write themselves at the end of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1153: FILE: kernel/trace.c:1113:
+^I   last buffer (because there's technically still space at the end, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1154: FILE: kernel/trace.c:1114:
+^I   though it and all those contained events will be erased here).  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1155: FILE: kernel/trace.c:1115:
+^I   Here we try to salvage if possible that last buffer, but to do $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1156: FILE: kernel/trace.c:1116:
+^I   that, we need to subtract those pesky smaller events that managed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1157: FILE: kernel/trace.c:1117:
+^I   to get in.  If after all that, another small event manages to $

WARNING:REPEATED_WORD: Possible repeated word: 'in'
#1158: FILE: kernel/trace.c:1118:
+	   sneak in in the time it takes us to do this, well, we concede and 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: kernel/trace.c:1118:
+^I   sneak in in the time it takes us to do this, well, we concede and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1159: FILE: kernel/trace.c:1119:
+^I   the daemon will toss that buffer.  It's not the end of the world $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1160: FILE: kernel/trace.c:1120:
+^I   if that happens, since that buffer actually marked the start of a $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1161: FILE: kernel/trace.c:1121:
+	   bunch of lost events which continues until a buffer is freed. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: kernel/trace.c:1123:
+^I/* Get the bufno and offset of the buffer containing the last event $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1164: FILE: kernel/trace.c:1124:
+	/* Get the bufno and offset of the buffer containing the last event 
+	   logged before we had to stop for a buffer-full condition. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1164: FILE: kernel/trace.c:1124:
+	   logged before we had to stop for a buffer-full condition. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: kernel/trace.c:1125:
+^Ilast_event_offset = TRACE_BUFFER_OFFSET_GET(last_event_index(cpu_id), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1167: FILE: kernel/trace.c:1127:
+^Ilast_event_buf_no = TRACE_BUFFER_NUMBER_GET(last_event_index(cpu_id), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1170: FILE: kernel/trace.c:1130:
+^I/* We also need to know the lost size we wrote to that buffer when we $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1171: FILE: kernel/trace.c:1131:
+	/* We also need to know the lost size we wrote to that buffer when we 
+	   stopped */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1171: FILE: kernel/trace.c:1131:
+	   stopped */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1172: FILE: kernel/trace.c:1132:
+^Ilast_buffer_lost_size = TRACE_BUFFER_SIZE(offset_bits(cpu_id)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: kernel/trace.c:1135:
+^I/* Since the time we stopped, some smaller events probably reserved $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: kernel/trace.c:1136:
+^I   space and wrote themselves in, the sizes of which would have been $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1176: FILE: kernel/trace.c:1136:
+	/* Since the time we stopped, some smaller events probably reserved 
+	   space and wrote themselves in, the sizes of which would have been 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: kernel/trace.c:1137:
+^I   reflected in the fill_count.  The total size of these events is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1178: FILE: kernel/trace.c:1138:
+^I   calculated here.  */  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1178: FILE: kernel/trace.c:1138:
+	   calculated here.  */  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: kernel/trace.c:1143:
+^I/* If there were events written after we stopped, subtract those from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: kernel/trace.c:1144:
+^I   the fill_count.  If that doesn't fix things, the buffer either is $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1184: FILE: kernel/trace.c:1144:
+	/* If there were events written after we stopped, subtract those from 
+	   the fill_count.  If that doesn't fix things, the buffer either is 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: kernel/trace.c:1145:
+^I   really incomplete, or another event snuck in, and we'll just stop $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1186: FILE: kernel/trace.c:1146:
+	   now and say we did what we could for it. */

ERROR:SPACING: space required before the open parenthesis '('
#1187: FILE: kernel/trace.c:1147:
+	if(discard_size > 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: kernel/trace.c:1148:
+^I^Iatomic_sub_volatile(&fill_count(cpu_id, last_event_buf_no), $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1192: FILE: kernel/trace.c:1152:
+	/* Since our end buffer event probably got trounced, rewrite it in old
+	   buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1192: FILE: kernel/trace.c:1152:
+	   buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: kernel/trace.c:1153:
+^Iwrite_end_buffer_event(last_event_index(cpu_id) & index_mask(cpu_id), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: kernel/trace.c:1154:
+	write_end_buffer_event(last_event_index(cpu_id) & index_mask(cpu_id), 
+	       last_event_timestamp(cpu_id), last_event_tsc(cpu_id), cpu_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1196: FILE: kernel/trace.c:1156:
+^I/* We also need to update the buffer start time and write the start $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1197: FILE: kernel/trace.c:1157:
+	/* We also need to update the buffer start time and write the start 
+	   event for the next buffer, since we couldn't do it until now */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1197: FILE: kernel/trace.c:1157:
+	   event for the next buffer, since we couldn't do it until now */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1200: FILE: kernel/trace.c:1160:
+^I/* The current buffer control index is hanging around near the end of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1201: FILE: kernel/trace.c:1161:
+	/* The current buffer control index is hanging around near the end of 
+	   the last buffer.  So we add the buffer size and clear the offset to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1202: FILE: kernel/trace.c:1162:
+	   get to the beginning of the newly freed buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1204: FILE: kernel/trace.c:1164:
+^Inew_index = TRACE_BUFFER_OFFSET_CLEAR(new_index, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1205: FILE: kernel/trace.c:1165:
+	new_index = TRACE_BUFFER_OFFSET_CLEAR(new_index, 
+				      offset_mask(cpu_id)) + start_reserve;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1206: FILE: kernel/trace.c:1166:
+^Iwrite_start_buffer_event(new_index & index_mask(cpu_id), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: kernel/trace.c:1167:
+	write_start_buffer_event(new_index & index_mask(cpu_id), 
+		 buffer_start_time(cpu_id), buffer_start_tsc(cpu_id), cpu_id);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1210: FILE: kernel/trace.c:1170:
+	/* Fixing up sBufferControl.index is simpler.  Since a buffer has been
+	   consumed, there's now at least one buffer free, and we can continue.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: kernel/trace.c:1171:
+^I   We start off the next buffer in a fresh state.  Since nothing else $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1213: FILE: kernel/trace.c:1173:
+^I   do that here.  'Meaningfully' means that there may be cases of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: kernel/trace.c:1174:
+^I   smaller events managing to update the index in the last buffer but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: kernel/trace.c:1175:
+^I   they're essentially erased by the lost size of that buffer when $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1217: FILE: kernel/trace.c:1177:
+^I   of the next available buffer before turning off sBuffersFull, and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1218: FILE: kernel/trace.c:1178:
+^I   avoid an erroneous buffer switch.  */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1218: FILE: kernel/trace.c:1178:
+	   avoid an erroneous buffer switch.  */ 

ERROR:SPACING: space required before the open parenthesis '('
#1239: FILE: kernel/trace.c:1199:
+	if(hweight32(no_buffers) != 1) /* Invalid if # set bits in word != 1 */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1241: FILE: kernel/trace.c:1201:
+^I$

WARNING:TYPO_SPELLING: 'hearbeat' may be misspelled - perhaps 'heartbeat'?
#1249: FILE: kernel/trace.c:1209:
+ *	write_heartbeat_event: - Timer function generating hearbeat event.
   	                                                   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1252: FILE: kernel/trace.c:1212:
+ *^ICalled at a frequency calculated to guarantee at least 1 event is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1255: FILE: kernel/trace.c:1215:
+ *^Iin cases where no events occur in that interval e.g. ~10s on a $

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1260: FILE: kernel/trace.c:1220:
+	unsigned long int flags;	/* CPU flags for lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1262: FILE: kernel/trace.c:1222:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1264: FILE: kernel/trace.c:1224:
+	for(i =  0; i < num_cpus; i++)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1265: FILE: kernel/trace.c:1225:
+                set_waiting_for_cpu(i, LTT_TRACE_HEARTBEAT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: kernel/trace.c:1225:
+                set_waiting_for_cpu(i, LTT_TRACE_HEARTBEAT);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1271: FILE: kernel/trace.c:1231:
+	heartbeat_timer.expires = jiffies + 0xffffffffUL/loops_per_jiffy - 1;
 	                                                ^

WARNING:TYPO_SPELLING: 'hearbeat' may be misspelled - perhaps 'heartbeat'?
#1276: FILE: kernel/trace.c:1236:
+ *	init_heartbeat_time: - Start timer generating hearbeat events.
   	                                              ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: kernel/trace.c:1239:
+ *^Iwithin the TSC wrap time.  This ensures that will happen even if $

ERROR:SPACING: space required before the open parenthesis '('
#1284: FILE: kernel/trace.c:1244:
+	if(using_tsc == 1) {

ERROR:SPACING: space required before the open parenthesis '('
#1285: FILE: kernel/trace.c:1245:
+		if(loops_per_jiffy > 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1285: FILE: kernel/trace.c:1245:
+		if(loops_per_jiffy > 0) {
[...]
+		} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1290: FILE: kernel/trace.c:1250:
+^I^I^Iheartbeat_timer.expires = jiffies $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1291: FILE: kernel/trace.c:1251:
+				+ 0xffffffffUL/loops_per_jiffy - 1;
 				              ^

CHECK:BRACES: Unbalanced braces around else statement
#1293: FILE: kernel/trace.c:1253:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1294: FILE: kernel/trace.c:1254:
+			printk(KERN_ALERT "Tracer: Couldn't set up heartbeat timer - continuing without one \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1294: FILE: kernel/trace.c:1254:
+			printk(KERN_ALERT "Tracer: Couldn't set up heartbeat timer - continuing without one \n");

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1306: FILE: kernel/trace.c:1266:
+	trace_start start_event; /* Event marking the begining of the trace */
 	                                              ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1331: FILE: kernel/trace.c:1291:
+	/* Trace the buffer start event using the appropriate method depending
+	   on the locking scheme */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1331: FILE: kernel/trace.c:1291:
+	   on the locking scheme */

ERROR:SPACING: space required before the open parenthesis '('
#1332: FILE: kernel/trace.c:1292:
+	if(using_lockless == 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: kernel/trace.c:1294:
+		write_start_buffer_event(index(cpu_id) & index_mask(cpu_id),
+		 buffer_start_time(cpu_id), buffer_start_tsc(cpu_id), cpu_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1351: FILE: kernel/trace.c:1311:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1352: FILE: kernel/trace.c:1312:
+	for(i = 0; i < num_cpus; i++)

ERROR:SPACING: space required before the open parenthesis '('
#1353: FILE: kernel/trace.c:1313:
+		if(atomic_read(&waiting_for_cpu(i)) & LTT_FINALIZE_TRACE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1368: FILE: kernel/trace.c:1328:
+ *^Iset in this set of flags.  Only one type of task per CPU is ever $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1369: FILE: kernel/trace.c:1329:
+ *^Ipending i.e. queues aren't necessary.  This function (re)checks the $

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1374: FILE: kernel/trace.c:1334:
+	unsigned long int flags;	/* CPU flags for lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: kernel/trace.c:1338:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1382: FILE: kernel/trace.c:1342:
+	if(tasks == 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: kernel/trace.c:1347:
+^I/* Before we can log any events, we need to write start/start_buffer $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1388: FILE: kernel/trace.c:1348:
+	/* Before we can log any events, we need to write start/start_buffer 
+	   event for this CPU */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1388: FILE: kernel/trace.c:1348:
+	   event for this CPU */

ERROR:SPACING: space required before the open parenthesis '('
#1389: FILE: kernel/trace.c:1349:
+	if(using_tsc && tracer_started && (tasks & LTT_INITIALIZE_TRACE)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1390: FILE: kernel/trace.c:1350:
+                clear_waiting_for_cpu(cpu_id, LTT_INITIALIZE_TRACE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1390: FILE: kernel/trace.c:1350:
+                clear_waiting_for_cpu(cpu_id, LTT_INITIALIZE_TRACE);$

ERROR:SPACING: space required before the open parenthesis '('
#1394: FILE: kernel/trace.c:1354:
+	if(using_tsc && tracer_started && (tasks & LTT_TRACE_HEARTBEAT)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1395: FILE: kernel/trace.c:1355:
+                clear_waiting_for_cpu(cpu_id, LTT_TRACE_HEARTBEAT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1395: FILE: kernel/trace.c:1355:
+                clear_waiting_for_cpu(cpu_id, LTT_TRACE_HEARTBEAT);$

ERROR:SPACING: space required before the open parenthesis '('
#1399: FILE: kernel/trace.c:1359:
+	if(using_lockless && tracer_started && (tasks & LTT_CONTINUE_TRACE)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1400: FILE: kernel/trace.c:1360:
+                clear_waiting_for_cpu(cpu_id, LTT_CONTINUE_TRACE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: kernel/trace.c:1360:
+                clear_waiting_for_cpu(cpu_id, LTT_CONTINUE_TRACE);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1404: FILE: kernel/trace.c:1364:
+^I/* Before we finish logging, we need to write end_buffer $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1405: FILE: kernel/trace.c:1365:
+	/* Before we finish logging, we need to write end_buffer 
+	   event for this CPU, if we're using TSC timestamping (because

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1406: FILE: kernel/trace.c:1366:
+	   we couldn't do all finalizing in TRACER_STOP itself) */

ERROR:SPACING: space required before the open parenthesis '('
#1407: FILE: kernel/trace.c:1367:
+	if(tracer_stopping && using_tsc && (tasks & LTT_FINALIZE_TRACE)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1408: FILE: kernel/trace.c:1368:
+^I^I/* NB - we need to do this before calling trace to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1409: FILE: kernel/trace.c:1369:
+		/* NB - we need to do this before calling trace to 
+		   avoid recursion */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1409: FILE: kernel/trace.c:1369:
+		   avoid recursion */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1410: FILE: kernel/trace.c:1370:
+                clear_waiting_for_cpu(cpu_id, LTT_FINALIZE_TRACE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1410: FILE: kernel/trace.c:1370:
+                clear_waiting_for_cpu(cpu_id, LTT_FINALIZE_TRACE);$

ERROR:SPACING: space required before the open parenthesis '('
#1411: FILE: kernel/trace.c:1371:
+		if(using_lockless) {

ERROR:SPACING: space required before the open parenthesis '('
#1421: FILE: kernel/trace.c:1381:
+		if(all_finalized())

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422160.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 236 errors, 131 warnings, 33 checks, 1385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422160.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
