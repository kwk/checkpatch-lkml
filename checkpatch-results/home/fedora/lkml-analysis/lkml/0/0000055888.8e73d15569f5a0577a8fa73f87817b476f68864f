CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct affs_sb_info)...)
#97: FILE: fs/affs/super.c:282:
+	sbi = kzalloc(sizeof(struct affs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vlocation)...) over kzalloc(sizeof(struct afs_vlocation)...)
#114: FILE: fs/afs/vlocation.c:284:
+	vlocation = kzalloc(sizeof(struct afs_vlocation), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*volume)...) over kzalloc(sizeof(struct afs_volume)...)
#131: FILE: fs/afs/volume.c:189:
+	volume = kzalloc(sizeof(struct afs_volume), GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: fs/configfs/file.c:277:
+	buffer = kzalloc(sizeof(struct configfs_buffer),GFP_KERNEL);
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*buffer)...) over kzalloc(sizeof(struct configfs_buffer)...)
#193: FILE: fs/configfs/file.c:277:
+	buffer = kzalloc(sizeof(struct configfs_buffer),GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sd_iattr)...) over kzalloc(sizeof(struct iattr)...)
#208: FILE: fs/configfs/inode.c:79:
+		sd_iattr = kzalloc(sizeof(struct iattr), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct cramfs_sb_info)...)
#225: FILE: fs/cramfs/inode.c:245:
+	sbi = kzalloc(sizeof(struct cramfs_sb_info), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: fs/efs/super.c:251:
+ ^Isb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: fs/efs/super.c:251:
+ ^Isb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: fs/efs/super.c:251:
+ ^Isb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sb)...) over kzalloc(sizeof(struct efs_sb_info)...)
#242: FILE: fs/efs/super.c:251:
+ 	sb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct msdos_sb_info)...)
#326: FILE: fs/fat/inode.c:1171:
+	sbi = kzalloc(sizeof(struct msdos_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct hfs_sb_info)...)
#375: FILE: fs/hfs/super.c:359:
+	sbi = kzalloc(sizeof(struct hfs_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct minix_sb_info)...)
#507: FILE: fs/minix/inode.c:148:
+	sbi = kzalloc(sizeof(struct minix_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*server)...) over kzalloc(sizeof(struct ncp_server)...)
#536: FILE: fs/ncpfs/inode.c:414:
+	server = kzalloc(sizeof(struct ncp_server), GFP_KERNEL);

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#570: FILE: fs/nfsd/nfs4state.c:342:
+	if ((clp = kzalloc(sizeof(struct nfs4_client), GFP_KERNEL))!= NULL) {
 	                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#570: FILE: fs/nfsd/nfs4state.c:342:
+	if ((clp = kzalloc(sizeof(struct nfs4_client), GFP_KERNEL))!= NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*clp)...) over kzalloc(sizeof(struct nfs4_client)...)
#570: FILE: fs/nfsd/nfs4state.c:342:
+	if ((clp = kzalloc(sizeof(struct nfs4_client), GFP_KERNEL))!= NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#595: FILE: fs/partitions/efi.c:271:
+	gpt = kzalloc(sizeof (gpt_header), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#607: FILE: fs/partitions/efi.c:527:
+                legacymbr = kzalloc(sizeof (*legacymbr), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: fs/partitions/efi.c:527:
+                legacymbr = kzalloc(sizeof (*legacymbr), GFP_KERNEL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#607: FILE: fs/partitions/efi.c:527:
+                legacymbr = kzalloc(sizeof (*legacymbr), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*qs)...) over kzalloc(sizeof(struct qnx4_sb_info)...)
#652: FILE: fs/qnx4/inode.c:361:
+	qs = kzalloc(sizeof(struct qnx4_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct sysv_sb_info)...)
#669: FILE: fs/sysv/super.c:372:
+	sbi = kzalloc(sizeof(struct sysv_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct sysv_sb_info)...)
#681: FILE: fs/sysv/super.c:455:
+	sbi = kzalloc(sizeof(struct sysv_sb_info), GFP_KERNEL);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#698: FILE: fs/udf/ialloc.c:132:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry), GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <extendedFileEntry>
#698: FILE: fs/udf/ialloc.c:132:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct extendedFileEntry), GFP_KERNEL);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#705: FILE: fs/udf/ialloc.c:137:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct fileEntry), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <fileEntry>
#705: FILE: fs/udf/ialloc.c:137:
+		UDF_I_DATA(inode) = kzalloc(inode->i_sb->s_blocksize - sizeof(struct fileEntry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct ufs_sb_info)...)
#718: FILE: fs/ufs/super.c:614:
+	sbi = kzalloc(sizeof(struct ufs_sb_info), GFP_KERNEL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000055888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 18 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000055888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
