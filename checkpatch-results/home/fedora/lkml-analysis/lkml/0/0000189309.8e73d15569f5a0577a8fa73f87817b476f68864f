WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
   rebuild_sched_domains(cpumask_t change_map, cpumask_t span1, cpumask_t span2)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#101: FILE: include/linux/init.h:221:
 #define __devinit

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#102: FILE: include/linux/init.h:222:
 #define __devinitdata

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#103: FILE: include/linux/init.h:223:
 #define __devexit

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/sched.h:158:
+extern void rebuild_sched_domains(cpumask_t change_map, cpumask_t span1, cpumask_t span2);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cs' - possible side-effects?
#122: FILE: kernel/cpuset.c:58:
+#define all_cpus(cs)							\
+({									\
+	cpumask_t __tmp_map;						\
+	cpus_or(__tmp_map, cs->cpus_allowed, cs->isolated_map);		\
+	__tmp_map;							\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cs' may be better as '(cs)' to avoid precedence issues
#122: FILE: kernel/cpuset.c:58:
+#define all_cpus(cs)							\
+({									\
+	cpumask_t __tmp_map;						\
+	cpus_or(__tmp_map, cs->cpus_allowed, cs->isolated_map);		\
+	__tmp_map;							\
+})

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: kernel/cpuset.c:608:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: kernel/cpuset.c:612:
+^Iif ((is_cpu_isolated(trial) && !is_cpu_exclusive(cur)) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#190: FILE: kernel/cpuset.c:613:
+	if ((is_cpu_isolated(trial) && !is_cpu_exclusive(cur)) 
+	   || (!is_cpu_exclusive(trial) && is_cpu_isolated(cur)))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#222: FILE: kernel/cpuset.c:653:
+	}
+	else if (is_cpu_isolated(cs)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#232: FILE: kernel/cpuset.c:663:
+		}
+		else if (cpus_subset(cs->cpus_allowed, old_map)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#238: FILE: kernel/cpuset.c:669:
+		}
+		else if (cpus_subset(old_map, cs->cpus_allowed)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: kernel/cpuset.c:673:
+^I^I^Icpus_or(parent->isolated_map, parent->isolated_map, temp_map); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: kernel/cpuset.c:675:
+^I^Ispan1 = parent->cpus_allowed; $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#255: FILE: kernel/cpuset.c:686:
+	if ((cpus_equal(parent->cpus_allowed, p_old_ca)
+	     && cpus_equal(parent->isolated_map, p_old_im))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#256: FILE: kernel/cpuset.c:687:
+	     && cpus_equal(parent->isolated_map, p_old_im))
+	     || cpus_equal(cs->cpus_allowed, p_old_ca))

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#299: FILE: kernel/cpuset.c:881:
+		if (!retval) { update_sched_domains(cs, cs->cpus_allowed); }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#299: FILE: kernel/cpuset.c:881:
+		if (!retval) { update_sched_domains(cs, cs->cpus_allowed); }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: kernel/cpuset.c:958:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: kernel/cpuset.c:959:
+^I*tmp++ = '[';^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#325: FILE: kernel/cpuset.c:963:
+	return (tmp-page);
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#365: FILE: kernel/cpuset.c:1357:
+	if ((err = cpuset_add_file(cs_dentry, &cft_cpu_isolated)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: kernel/sched.c:4984:
+	init_sched_build_groups(sched_group_nodes, cpu_map,
 					&cpu_to_node_group);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#540: FILE: kernel/sched.c:5039:
+static void __devinit arch_init_sched_domains(void)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 6 warnings, 8 checks, 457 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189309.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
