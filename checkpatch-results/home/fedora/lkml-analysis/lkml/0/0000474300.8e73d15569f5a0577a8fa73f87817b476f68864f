WARNING:PATCH_PREFIX: patch prefix 'Documentation' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'sharable' may be misspelled - perhaps 'shareable'?
#115: FILE: cramfs/README:132:
+The remaining options try to make cramfs more sharable by choosing a
                                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#140: FILE: cramfs/inode.c:42:
+#define CRAMINO(x)	(CRAMFS_GET_OFFSET(x) ? CRAMFS_GET_OFFSET(x)<<2 : 1)
                   	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#140: FILE: cramfs/inode.c:42:
+#define CRAMINO(x)	(CRAMFS_GET_OFFSET(x) ? CRAMFS_GET_OFFSET(x)<<2 : 1)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#155: FILE: cramfs/inode.c:53:
+		inode->i_blocks = (CRAMFS_24(cramfs_inode->size) - 1)/512 + 1;
 		                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around super.root
#215: FILE: cramfs/inode.c:235:
+	root_offset = CRAMFS_GET_OFFSET(&(super.root)) << 2;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#252: FILE: cramfs/inode.c:322:
+		error = filldir(dirent, name, namelen, offset, CRAMINO(de), CRAMFS_16(de->mode) >> 12);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#271: FILE: cramfs/inode.c:402:
+			start_offset = CRAMFS_32(*(u32 *) cramfs_read(sb, blkptr_offset-4, 4));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#271: FILE: cramfs/inode.c:402:
+			start_offset = CRAMFS_32(*(u32 *) cramfs_read(sb, blkptr_offset-4, 4));
 			                                                               ^

CHECK:SPACING: No space is necessary after a cast
#272: FILE: cramfs/inode.c:403:
+		compr_len = CRAMFS_32(*(u32 *) cramfs_read(sb, blkptr_offset, 4)) - start_offset;

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#286: FILE: linux/cramfs_fs.h:1:
+#ifndef __CRAMFS_FS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: linux/cramfs_fs.h:126:
+#define CRAMFS_SET_OFFSET(x,y)	((x)->offset = (y))
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: linux/cramfs_fs.h:127:
+#define CRAMFS_SET_NAMELEN(x,y)	((x)->namelen = (y))
                             ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#355: FILE: linux/cramfs_fs.h:139:
+#define CRAMFS_GET_NAMELEN(x)	(((u8*)(x))[8] & 0x3f)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#356: FILE: linux/cramfs_fs.h:140:
+#define CRAMFS_GET_OFFSET(x)	((CRAMFS_24(((u32*)(x))[2] & 0xffffff) << 2) |\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#356: FILE: linux/cramfs_fs.h:140:
+#define CRAMFS_GET_OFFSET(x)	((CRAMFS_24(((u32*)(x))[2] & 0xffffff) << 2) |\
+				 ((((u32*)(x))[2] & 0xc0000000) >> 30))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#357: FILE: linux/cramfs_fs.h:141:
+				 ((((u32*)(x))[2] & 0xc0000000) >> 30))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#358: FILE: linux/cramfs_fs.h:142:
+#define CRAMFS_SET_NAMELEN(x,y)	(((u8*)(x))[8] = (((0x3f & (y))) | \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#358: FILE: linux/cramfs_fs.h:142:
+#define CRAMFS_SET_NAMELEN(x,y)	(((u8*)(x))[8] = (((0x3f & (y))) | \
                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#358: FILE: linux/cramfs_fs.h:142:
+#define CRAMFS_SET_NAMELEN(x,y)	(((u8*)(x))[8] = (((0x3f & (y))) | \
+						  (0xc0 & ((u8*)(x))[8])))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#359: FILE: linux/cramfs_fs.h:143:
+						  (0xc0 & ((u8*)(x))[8])))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#360: FILE: linux/cramfs_fs.h:144:
+#define CRAMFS_SET_OFFSET(x,y)	(((u32*)(x))[2] = (((y) & 3) << 30) | \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: linux/cramfs_fs.h:144:
+#define CRAMFS_SET_OFFSET(x,y)	(((u32*)(x))[2] = (((y) & 3) << 30) | \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#360: FILE: linux/cramfs_fs.h:144:
+#define CRAMFS_SET_OFFSET(x,y)	(((u32*)(x))[2] = (((y) & 3) << 30) | \
+				 CRAMFS_24((((y) & 0x03ffffff) >> 2)) | \
+				 (((u32)(((u8*)(x))[8] & 0x3f)) << 24))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#360: FILE: linux/cramfs_fs.h:144:
+#define CRAMFS_SET_OFFSET(x,y)	(((u32*)(x))[2] = (((y) & 3) << 30) | \
+				 CRAMFS_24((((y) & 0x03ffffff) >> 2)) | \
+				 (((u32)(((u8*)(x))[8] & 0x3f)) << 24))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#362: FILE: linux/cramfs_fs.h:146:
+				 (((u32)(((u8*)(x))[8] & 0x3f)) << 24))

WARNING:PATCH_PREFIX: patch prefix 'scripts' exists, appears to be a -p0 patch

WARNING:BRACES: braces {} are not necessary for single statement blocks
#398: FILE: cramfs/cramfsck.c:175:
+		if (super.magic == CRAMFS_32(CRAMFS_MAGIC)) {
 			*start = PAD_SIZE;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#405: FILE: cramfs/cramfsck.c:181:
+	if (super.magic != CRAMFS_32(CRAMFS_MAGIC)) {
 		die(FSCK_UNCORRECTED, 0, "superblock magic not found");
 	}

CHECK:SPACING: No space is necessary after a cast
#475: FILE: cramfs/cramfsck.c:369:
+		unsigned long next = CRAMFS_32(*(u32 *) romfs_read(offset));

CHECK:SPACING: No space is necessary after a cast
#484: FILE: cramfs/cramfsck.c:530:
+	unsigned long next = CRAMFS_32(*(u32 *) romfs_read(offset));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#499: FILE: cramfs/cramfsck.c:640:
+	if (!(super.flags & CRAMFS_FLAG_SHIFTED_ROOT_OFFSET) &&
+	    ((root_offset != sizeof(struct cramfs_super)) &&
+	     (root_offset != PAD_SIZE + sizeof(struct cramfs_super))))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'root_offset != sizeof(struct cramfs_super)'
#499: FILE: cramfs/cramfsck.c:640:
+	if (!(super.flags & CRAMFS_FLAG_SHIFTED_ROOT_OFFSET) &&
+	    ((root_offset != sizeof(struct cramfs_super)) &&
+	     (root_offset != PAD_SIZE + sizeof(struct cramfs_super))))

WARNING:PATCH_PREFIX: patch prefix 'scripts' exists, appears to be a -p0 patch

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around super->root
#554: FILE: cramfs/mkcramfs.c:408:
+	CRAMFS_SET_OFFSET(&(super->root), offset >> 2);

CHECK:SPACING: No space is necessary after a cast
#595: FILE: cramfs/mkcramfs.c:612:
+		*(u32 *) (base + offset) = CRAMFS_32(curr);

CHECK:SPACING: No space is necessary after a cast
#604: FILE: cramfs/mkcramfs.c:827:
+	((struct cramfs_super *) (rom_image+opt_pad))->fsid.crc = CRAMFS_32(crc);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#604: FILE: cramfs/mkcramfs.c:827:
+	((struct cramfs_super *) (rom_image+opt_pad))->fsid.crc = CRAMFS_32(crc);
 	                                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 11 warnings, 18 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
