WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -Naur linux-2.5.41/drivers/evms/core/services.c linux-2.5.41-evms/drivers/evms/core/services.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/evms/core/services.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#56: FILE: drivers/evms/core/services.c:15:
+ *   along with this program;  if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: drivers/evms/core/services.c:16:
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#67: FILE: drivers/evms/core/services.c:26:
+#include <asm/uaccess.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'required->major != actual->major'
#94: FILE: drivers/evms/core/services.c:53:
+	if ((required->major != actual->major) ||
+	    (required->minor > actual->minor) ||
+	    ((required->minor == actual->minor) &&
+	     (required->patchlevel > actual->patchlevel)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'required->minor > actual->minor'
#94: FILE: drivers/evms/core/services.c:53:
+	if ((required->major != actual->major) ||
+	    (required->minor > actual->minor) ||
+	    ((required->minor == actual->minor) &&
+	     (required->patchlevel > actual->patchlevel)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'required->minor == actual->minor'
#94: FILE: drivers/evms/core/services.c:53:
+	if ((required->major != actual->major) ||
+	    (required->minor > actual->minor) ||
+	    ((required->minor == actual->minor) &&
+	     (required->patchlevel > actual->patchlevel)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'required->patchlevel > actual->patchlevel'
#94: FILE: drivers/evms/core/services.c:53:
+	if ((required->major != actual->major) ||
+	    (required->minor > actual->minor) ||
+	    ((required->minor == actual->minor) &&
+	     (required->patchlevel > actual->patchlevel)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#102: FILE: drivers/evms/core/services.c:61:
+EXPORT_SYMBOL(evms_cs_check_version);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#110: FILE: drivers/evms/core/services.c:69:
+ * returns: 0 if sucessful
                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#116: FILE: drivers/evms/core/services.c:75:
+	*pp = kmalloc(sizeof (struct evms_logical_node), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pp)...) over kmalloc(sizeof (struct evms_logical_node)...)
#116: FILE: drivers/evms/core/services.c:75:
+	*pp = kmalloc(sizeof (struct evms_logical_node), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#117: FILE: drivers/evms/core/services.c:76:
+	if (*pp == NULL) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pp"
#117: FILE: drivers/evms/core/services.c:76:
+	if (*pp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: drivers/evms/core/services.c:79:
+	memset(*pp, 0, sizeof (struct evms_logical_node));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#130: FILE: drivers/evms/core/services.c:89:
+EXPORT_SYMBOL(evms_cs_allocate_logical_node);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#152: FILE: drivers/evms/core/services.c:111:
+EXPORT_SYMBOL(evms_cs_deallocate_volume_info);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#166: FILE: drivers/evms/core/services.c:125:
+	if (p->feature_header) {
+		kfree(p->feature_header);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: drivers/evms/core/services.c:128:
+	BUG_ON(!list_empty(&p->discover));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: drivers/evms/core/services.c:129:
+	BUG_ON(!list_empty(&p->device));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#171: FILE: drivers/evms/core/services.c:130:
+	BUG_ON(!list_empty(&p->fbottom));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: drivers/evms/core/services.c:131:
+	BUG_ON(!list_empty(&p->removable));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: drivers/evms/core/services.c:132:
+	BUG_ON(!list_empty(&p->consumed));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: drivers/evms/core/services.c:133:
+	BUG_ON(!list_empty(&p->produced));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#178: FILE: drivers/evms/core/services.c:137:
+EXPORT_SYMBOL(evms_cs_deallocate_logical_node);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#192: FILE: drivers/evms/core/services.c:151:
+	if (!(plugin_head.next && plugin_head.prev)) {
+		INIT_LIST_HEAD(&plugin_head);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <GetPluginOEM>
#197: FILE: drivers/evms/core/services.c:156:
+		  GetPluginOEM(plugin->id), GetPluginType(plugin->id),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GetPluginType>
#197: FILE: drivers/evms/core/services.c:156:
+		  GetPluginOEM(plugin->id), GetPluginType(plugin->id),

CHECK:CAMELCASE: Avoid CamelCase: <GetPluginID>
#198: FILE: drivers/evms/core/services.c:157:
+		  GetPluginID(plugin->id), plugin->version.major,

WARNING:SPLIT_STRING: quoted string split across lines
#210: FILE: drivers/evms/core/services.c:169:
+			LOG_ERROR("error(%d) attempting to load another "
+				  "plugin with id(%x).\n", rc, plugin->id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#240: FILE: drivers/evms/core/services.c:199:
+EXPORT_SYMBOL(evms_cs_register_plugin);

WARNING:SPLIT_STRING: quoted string split across lines
#271: FILE: drivers/evms/core/services.c:230:
+	LOG_ERROR("error(%d) attempt to unload a non-loaded plugin "
+		  "with id(%x).\n", -ENOPKG, plugin->id);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#275: FILE: drivers/evms/core/services.c:234:
+EXPORT_SYMBOL(evms_cs_unregister_plugin);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#303: FILE: drivers/evms/core/services.c:262:
+EXPORT_SYMBOL(evms_cs_kernel_ioctl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: drivers/evms/core/services.c:274:
+	long long sectors;
+	sectors = item_size >> EVMS_VSECTOR_SIZE_SHIFT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#321: FILE: drivers/evms/core/services.c:280:
+EXPORT_SYMBOL(evms_cs_size_in_vsectors);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#344: FILE: drivers/evms/core/services.c:303:
+		if (tmp != 1) {
+			result = -2;
+		}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#351: FILE: drivers/evms/core/services.c:310:
+EXPORT_SYMBOL(evms_cs_log2);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#358: FILE: drivers/evms/core/services.c:317:
+static u32 crc_table_built = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:TYPO_SPELLING: 'Initialzes' may be misspelled - perhaps 'Initializes'?
#363: FILE: drivers/evms/core/services.c:322:
+ * Initialzes the internal crc table
    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'inital' may be misspelled - perhaps 'initial'?
#385: FILE: drivers/evms/core/services.c:344:
+ * @crc:       	the inital(0xFFFFFFFF) or rolling crc value
                	    ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: drivers/evms/core/services.c:344:
+ * @crc:       ^Ithe inital(0xFFFFFFFF) or rolling crc value$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: drivers/evms/core/services.c:348:
+ * This function calculates the crc value for the data $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: drivers/evms/core/services.c:349:
+ * in the buffer specified by Buffer. $

CHECK:SPACING: No space is necessary after a cast
#398: FILE: drivers/evms/core/services.c:357:
+	current_byte = (unsigned char *) buffer;

CHECK:SPACING: No space is necessary after a cast
#405: FILE: drivers/evms/core/services.c:364:
+		temp2 = crc_table[(crc ^ (u32) * current_byte) & (u32) 0xff];

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#405: FILE: drivers/evms/core/services.c:364:
+		temp2 = crc_table[(crc ^ (u32) * current_byte) & (u32) 0xff];
 		                               ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#412: FILE: drivers/evms/core/services.c:371:
+EXPORT_SYMBOL(evms_cs_calculate_crc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: drivers/evms/core/services.c:380:
+ * and this routine will, thru the use of the I/O notify entry stored $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: drivers/evms/core/services.c:382:
+ * the bi_bdev value to the value bio had at the time of hook registration $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: drivers/evms/core/services.c:383:
+ * and passes control to the registered callback_function, with pointers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: drivers/evms/core/services.c:384:
+ * to the bio and an optional plugin private data. Upon completion of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: drivers/evms/core/services.c:385:
+ * callback_function, control is returned back here. The io notify list $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: drivers/evms/core/services.c:386:
+ * entry is deleted. This process repeats until this routine detects that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: drivers/evms/core/services.c:388:
+ * the bio's original end_io function has been called. At this point the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: drivers/evms/core/services.c:391:
+ * Plugins may desire to break or interrupt the callback sequence or chain. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: drivers/evms/core/services.c:392:
+ * This may be useful to redrive I/O or to wait for other bios to complete $

CHECK:SPACING: No space is necessary after a cast
#458: FILE: drivers/evms/core/services.c:417:
+		entry = (struct evms_io_notify *) bio->bi_private;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: drivers/evms/core/services.c:418:
+^I^I/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: drivers/evms/core/services.c:427:
+			struct evms_logical_volume *lv;
+			lv = lookup_volume(minor(to_kdev_t(bio->bi_bdev->bd_dev)));

CHECK:SPACING: No space is necessary after a cast
#474: FILE: drivers/evms/core/services.c:433:
+			bio->bi_end_io = (void *) entry->callback_function;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#475: FILE: drivers/evms/core/services.c:434:
+			if (bio->bi_end_io) {
+				bio_endio(bio, bytes_done, err);
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: drivers/evms/core/services.c:455:
+ * which alter data after it has been read from the disk (i.e. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: drivers/evms/core/services.c:463:
+ * This routine also records a private data pointer at the time of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: drivers/evms/core/services.c:464:
+ * registration that is returned to the plugin at callback time. This $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: drivers/evms/core/services.c:472:
+ * level driver uses this field and do NOT save and restore it, the I/O $

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: drivers/evms/core/services.c:500:
+			struct evms_logical_volume *lv;
+			new_entry->flags |= EVMS_ORIGINAL_CALLBACK_FLAG;

CHECK:SPACING: No space is necessary after a cast
#543: FILE: drivers/evms/core/services.c:502:
+			new_entry->callback_function = (void *) bio->bi_end_io;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#555: FILE: drivers/evms/core/services.c:514:
+EXPORT_SYMBOL(evms_cs_register_for_end_io_notification);

WARNING:LINE_SPACING: Missing a blank line after declarations
#572: FILE: drivers/evms/core/services.c:531:
+		struct evms_event *event = &kevent->uevent;
+		if (event->eventid == eventid) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#593: FILE: drivers/evms/core/services.c:552:
+EXPORT_SYMBOL(evms_cs_signal_event);

WARNING:LINE_SPACING: Missing a blank line after declarations
#630: FILE: drivers/evms/core/services.c:589:
+	struct evms_thread *thread = arg;
+	lock_kernel();

WARNING:SPACING: Unnecessary space before function pointer arguments
#644: FILE: drivers/evms/core/services.c:603:
+		void (*run) (void *data);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#649: FILE: drivers/evms/core/services.c:608:
+		if (!test_bit(EVMS_THREAD_WAKEUP, &thread->flags)) {
+			schedule();
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: drivers/evms/core/services.c:620:
+		if (signal_pending(current)) {
+			evms_flush_signals();
+		}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#682: FILE: drivers/evms/core/services.c:641:
+evms_cs_register_thread(void (*run) (void *), void *data, const u8 * name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#688: FILE: drivers/evms/core/services.c:647:
+	thread = kmalloc(sizeof (struct evms_thread), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*thread)...) over kmalloc(sizeof (struct evms_thread)...)
#688: FILE: drivers/evms/core/services.c:647:
+	thread = kmalloc(sizeof (struct evms_thread), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#692: FILE: drivers/evms/core/services.c:651:
+	memset(thread, 0, sizeof (struct evms_thread));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#709: FILE: drivers/evms/core/services.c:668:
+EXPORT_SYMBOL(evms_cs_register_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#732: FILE: drivers/evms/core/services.c:691:
+EXPORT_SYMBOL(evms_cs_unregister_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#747: FILE: drivers/evms/core/services.c:706:
+EXPORT_SYMBOL(evms_cs_wakeup_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#765: FILE: drivers/evms/core/services.c:724:
+EXPORT_SYMBOL(evms_cs_interrupt_thread);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#775: FILE: drivers/evms/core/services.c:734:
+	if (!evms_proc_dir) {
+		evms_proc_dir = create_proc_entry("evms", S_IFDIR, &proc_root);
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#781: FILE: drivers/evms/core/services.c:740:
+EXPORT_SYMBOL(evms_cs_get_evms_proc_dir);

WARNING:LINE_SPACING: Missing a blank line after declarations
#799: FILE: drivers/evms/core/services.c:758:
+	struct evms_logical_volume *volume = lookup_volume(minor(dev));
+	if (!volume || !volume->node) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#799: FILE: drivers/evms/core/services.c:758:
+	if (!volume || !volume->node) {
+		return -ENODEV;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#810: FILE: drivers/evms/core/services.c:769:
+	if (current_count) {
+		*current_count = atomic_read(&volume->requests_in_progress);
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#816: FILE: drivers/evms/core/services.c:775:
+EXPORT_SYMBOL(evms_cs_volume_request_in_progress);

WARNING:LINE_SPACING: Missing a blank line after declarations
#828: FILE: drivers/evms/core/services.c:787:
+	struct evms_logical_volume *lv = NULL;
+	while ((lv = find_next_volume(lv))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#829: FILE: drivers/evms/core/services.c:788:
+		if (!lv->node || !node->name) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#832: FILE: drivers/evms/core/services.c:791:
+		if (strcmp(lv->node->name, node->name)) {
+			continue;
+		}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#842: FILE: drivers/evms/core/services.c:801:
+EXPORT_SYMBOL(evms_cs_invalidate_volume);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#849: FILE: drivers/evms/core/services.c:808:
+ * the original bio's end_io, and setting the uptodate flag accordingly.
                                               ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#861: FILE: drivers/evms/core/services.c:820:
+	evms_bio_split_record = (struct bio_split_cb *) bio->bi_private;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#862: FILE: drivers/evms/core/services.c:821:
+	if (err || !test_bit(BIO_UPTODATE, &bio->bi_flags)) {
+		evms_bio_split_record->rc = -EIO;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#869: FILE: drivers/evms/core/services.c:828:
+		int rc = evms_bio_split_record->rc;
+		bio = evms_bio_split_record->original_bio;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#870: FILE: drivers/evms/core/services.c:829:
+		if (!rc) {
+			set_bit(BIO_UPTODATE, &bio->bi_flags);
+		}

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#883: FILE: drivers/evms/core/services.c:842:
+#define EVMS_SPLIT_CB_INIT(bio, split_rec, b_pool, s_pool) \
+	(split_rec)->rc = 0; \
+	(split_rec)->outstanding_bios = (atomic_t)ATOMIC_INIT(1); \
+	(split_rec)->original_bio = bio; \
+	(split_rec)->bio_pool = b_pool; \
+	(split_rec)->split_pool = s_pool;		

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'split_rec' - possible side-effects?
#883: FILE: drivers/evms/core/services.c:842:
+#define EVMS_SPLIT_CB_INIT(bio, split_rec, b_pool, s_pool) \
+	(split_rec)->rc = 0; \
+	(split_rec)->outstanding_bios = (atomic_t)ATOMIC_INIT(1); \
+	(split_rec)->original_bio = bio; \
+	(split_rec)->bio_pool = b_pool; \
+	(split_rec)->split_pool = s_pool;		

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#883: FILE: drivers/evms/core/services.c:842:
+#define EVMS_SPLIT_CB_INIT(bio, split_rec, b_pool, s_pool) \
+	(split_rec)->rc = 0; \
+	(split_rec)->outstanding_bios = (atomic_t)ATOMIC_INIT(1); \
+	(split_rec)->original_bio = bio; \
+	(split_rec)->bio_pool = b_pool; \
+	(split_rec)->split_pool = s_pool;		

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: drivers/evms/core/services.c:847:
+^I(split_rec)->split_pool = s_pool;^I^I$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#893: FILE: drivers/evms/core/services.c:852:
+#define EVMS_BIO_INIT(bio, split_rec) \
+	bio_init(bio); \
+       	(bio)->bi_end_io = evms_bio_collector; \
+	(bio)->bi_private = (split_rec);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#893: FILE: drivers/evms/core/services.c:852:
+#define EVMS_BIO_INIT(bio, split_rec) \
+	bio_init(bio); \
+       	(bio)->bi_end_io = evms_bio_collector; \
+	(bio)->bi_private = (split_rec);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#893: FILE: drivers/evms/core/services.c:852:
+#define EVMS_BIO_INIT(bio, split_rec) \
+	bio_init(bio); \
+       	(bio)->bi_end_io = evms_bio_collector; \
+	(bio)->bi_private = (split_rec);

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: drivers/evms/core/services.c:854:
+       ^I(bio)->bi_end_io = evms_bio_collector; \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#895: FILE: drivers/evms/core/services.c:854:
+       ^I(bio)->bi_end_io = evms_bio_collector; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: drivers/evms/core/services.c:854:
+       ^I(bio)->bi_end_io = evms_bio_collector; \$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#917: FILE: drivers/evms/core/services.c:876:
+	if (lskew < rskew) {
+		vcnt++;
+	}

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#932: FILE: drivers/evms/core/services.c:891:
+ * necessary split the remaining bio down futher with subsequent calls to this
                                           ^^^^^^

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#939: FILE: drivers/evms/core/services.c:898:
+ * returns: 0 on sucess, a target bio, a remainder bio
                  ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#951: FILE: drivers/evms/core/services.c:910:
+^I/* $

WARNING:SPLIT_STRING: quoted string split across lines
#957: FILE: drivers/evms/core/services.c:916:
+		LOG_ERROR("error(%d): unable to split bio(size:%d) "
+			  "on specified boundary("PFU64").\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#957: FILE: drivers/evms/core/services.c:916:
+			  "on specified boundary("PFU64").\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/evms/core/services.c:929:
+		EVMS_SPLIT_CB_INIT(source_bio, evms_bio_split_record,
+				    my_bio_pool, my_bio_split_pool);

CHECK:SPACING: No space is necessary after a cast
#977: FILE: drivers/evms/core/services.c:936:
+		    (struct bio_split_cb *) source_bio->bi_private;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'remaining_bytes <= 0'
#1005: FILE: drivers/evms/core/services.c:964:
+			if ((remaining_bytes <= 0)
+			    || (remaining_bytes > src_len)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'remaining_bytes > src_len'
#1005: FILE: drivers/evms/core/services.c:964:
+			if ((remaining_bytes <= 0)
+			    || (remaining_bytes > src_len)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1006: FILE: drivers/evms/core/services.c:965:
+			if ((remaining_bytes <= 0)
+			    || (remaining_bytes > src_len)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1015: FILE: drivers/evms/core/services.c:974:
+				cur_vcnt = remaining_bytes = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1043: FILE: drivers/evms/core/services.c:1002:
+EXPORT_SYMBOL(evms_cs_split_bio);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424504.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 71 warnings, 25 checks, 1003 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424504.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
