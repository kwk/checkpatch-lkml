WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -ruN linux-original/drivers/pcmcia/cs.c linux-pcmcia/drivers/pcmcia/cs.c

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#56: FILE: drivers/pcmcia/cs.c:312:
+#define to_class_data(dev) dev->class_data

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pcmcia_register_socket', this function's name, in a string
#91: FILE: drivers/pcmcia/cs.c:326:
+	DEBUG(0, "cs: pcmcia_register_socket(0x%p)\n", cls_d->ops);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#93: FILE: drivers/pcmcia/cs.c:328:
+	s_info = kmalloc(cls_d->nsock * sizeof(struct socket_info_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#110: FILE: drivers/pcmcia/cs.c:345:
+		s->erase_busy.next = s->erase_busy.prev = &s->erase_busy;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: drivers/pcmcia/cs.c:347:
+    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: drivers/pcmcia/cs.c:347:
+    $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#115: FILE: drivers/pcmcia/cs.c:350:
+			if (socket_table[j] == NULL) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!socket_table[j]"
#115: FILE: drivers/pcmcia/cs.c:350:
+			if (socket_table[j] == NULL) break;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#117: FILE: drivers/pcmcia/cs.c:352:
+		if (j == sockets) sockets++;

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: drivers/pcmcia/cs.c:359:
+			char name[3];
+			sprintf(name, "%02d", i);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: drivers/pcmcia/cs.c:366:
+				create_proc_read_entry("clients", 0, s->proc,
+				       proc_read_clients, s);

CHECK:SPACING: No space is necessary after a cast
#191: FILE: drivers/pcmcia/cs.c:389:
+	s = (socket_info_t *) cls_d->s_info;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#195: FILE: drivers/pcmcia/cs.c:393:
+			if (socket_table [j] == s) {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: drivers/pcmcia/cs.c:399:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: drivers/pcmcia/cs.c:403:
+			char name[3];
+			sprintf(name, "%02d", socket);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: drivers/pcmcia/cs.c:410:
+^I^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#228: FILE: drivers/pcmcia/cs.c:420:
+		for (j = socket; j < sockets-1; j++)
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#229: FILE: drivers/pcmcia/cs.c:421:
+			socket_table[j] = socket_table[j+1];
 			                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#289: FILE: drivers/pcmcia/hd64465_ss.c:964:
+	printk(KERN_INFO "HD64465 PCMCIA bridge socket %d at 0x%08lx irq %d io window %ldK@0x%08lx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: drivers/pcmcia/hd64465_ss.c:965:
+^I    ^Ii, sp->mem_base, sp->irq,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: drivers/pcmcia/hd64465_ss.c:965:
+^I    ^Ii, sp->mem_base, sp->irq,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/pcmcia/hd64465_ss.c:965:
+	printk(KERN_INFO "HD64465 PCMCIA bridge socket %d at 0x%08lx irq %d io window %ldK@0x%08lx\n",
+	    	i, sp->mem_base, sp->irq,

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#291: FILE: drivers/pcmcia/hd64465_ss.c:966:
+		sp->io_vma->size>>10, (unsigned long)sp->io_vma->addr);
 		                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: drivers/pcmcia/i82092.c:159:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: drivers/pcmcia/i82092.c:159:
+
+	

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#365: FILE: drivers/pcmcia/i82092.c:162:
+		printk(KERN_ERR "i82092aa: kmalloc failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#365: FILE: drivers/pcmcia/i82092.c:162:
+	if (!cls_d) {
+		printk(KERN_ERR "i82092aa: kmalloc failed\n");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#380: FILE: drivers/pcmcia/i82092.c:188:
+	if (dev->dev.class_data)
+		kfree(dev->dev.class_data);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/pcmcia/i82365.c:1637:
+    i82365_data.nsock = sockets;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/pcmcia/i82365.c:1638:
+    i82365_device.dev.class_data = &i82365_data;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: drivers/pcmcia/i82365.c:1639:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/pcmcia/i82365.c:1639:
+    $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#447: FILE: drivers/pcmcia/pci_socket.c:203:
+	cls_d->nsock = 1; /* yenta is 1, no other low-level driver uses
+			     this yet */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#447: FILE: drivers/pcmcia/pci_socket.c:203:
+			     this yet */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#454: FILE: drivers/pcmcia/pci_socket.c:210:
 static int __devinit

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/pcmcia/tcic.c:527:
+    tcic_data.nsock = sockets;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: drivers/pcmcia/tcic.c:528:
+    tcic_device.dev.class_data = &tcic_data;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#561: FILE: drivers/pcmcia/yenta.c:851:
 
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#562: FILE: drivers/pcmcia/yenta.c:852:
+extern int cardbus_register(struct pci_dev *p_dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#583: FILE: drivers/pcmcia/yenta.c:909:
+	if (!socket->cb_irq || request_irq(socket->cb_irq, yenta_interrupt, SA_SHIRQ, socket->dev->dev.name, socket)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#595: FILE: drivers/pcmcia/yenta.c:921:
+	printk("Socket status: %08x\n", cb_readl(socket, CB_SOCKET_STATE));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 22 warnings, 11 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
