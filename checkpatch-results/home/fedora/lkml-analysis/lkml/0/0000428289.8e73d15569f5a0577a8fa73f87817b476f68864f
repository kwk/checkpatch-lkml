WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
diff -Nur --exclude-from=/usr/src/.dontdiff linux-2.5.39-vanilla/arch/i386/kernel/smpboot.c linux-2.5.39-driverfs_pre-reqs/arch/i386/kernel/smpboot.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0UL
#59: FILE: arch/i386/kernel/smpboot.c:66:
+unsigned long memblk_online_map = 0UL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#91: FILE: include/asm-i386/smp.h:106:
+#define memblk_online(memblk) (memblk_online_map & (1<<(memblk)))
                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/asm-i386/smp.h:107:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/asm-i386/smp.h:107:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: include/linux/smp.h:97:
+#define cpu_possible(cpu)			({ BUG_ON((cpu) != 0); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: include/linux/smp.h:99:
+#define memblk_online(memblk)			({ BUG_ON((memblk) != 0); 1; })

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: include/linux/topology.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#121: FILE: include/linux/topology.h:2:
+ * linux/include/linux/topology.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/linux/topology.h:8:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#141: FILE: include/linux/topology.h:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#142: FILE: include/linux/topology.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: include/linux/topology.h:40:
+ * cpu_to_node(cpu): Returns the number of the most specific Node $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: include/linux/topology.h:50:
+^Iif ((cpu < 0) || (cpu >= NR_CPUS) || (!cpu_online(cpu)) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#169: FILE: include/linux/topology.h:50:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (!cpu_online(cpu)) || 
+	    ((node = __cpu_to_node(cpu)) < 0))  /* invalid cpu */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= NR_CPUS'
#169: FILE: include/linux/topology.h:50:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (!cpu_online(cpu)) || 
+	    ((node = __cpu_to_node(cpu)) < 0))  /* invalid cpu */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#169: FILE: include/linux/topology.h:50:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (!cpu_online(cpu)) || 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#169: FILE: include/linux/topology.h:50:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (!cpu_online(cpu)) || 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: include/linux/topology.h:58:
+ * memblk_to_node(memblk): Returns the number of the most specific Node $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: include/linux/topology.h:68:
+^Iif ((memblk < 0) || (memblk >= MAX_NR_MEMBLKS) || (!memblk_online(memblk)) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'memblk < 0'
#187: FILE: include/linux/topology.h:68:
+	if ((memblk < 0) || (memblk >= MAX_NR_MEMBLKS) || (!memblk_online(memblk)) || 
+	    ((node = __memblk_to_node(memblk)) < 0))  /* invalid memblk # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'memblk >= MAX_NR_MEMBLKS'
#187: FILE: include/linux/topology.h:68:
+	if ((memblk < 0) || (memblk >= MAX_NR_MEMBLKS) || (!memblk_online(memblk)) || 
+	    ((node = __memblk_to_node(memblk)) < 0))  /* invalid memblk # */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#187: FILE: include/linux/topology.h:68:
+	if ((memblk < 0) || (memblk >= MAX_NR_MEMBLKS) || (!memblk_online(memblk)) || 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node < 0'
#200: FILE: include/linux/topology.h:81:
+	if ((node < 0) || (node >= MAX_NR_NODES))  /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node >= MAX_NR_NODES'
#200: FILE: include/linux/topology.h:81:
+	if ((node < 0) || (node >= MAX_NR_NODES))  /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node < 0'
#216: FILE: include/linux/topology.h:97:
+	if ((node < 0) || (node >= MAX_NR_NODES) ||
+	    ((cpu = __node_to_first_cpu(node)) < 0))  /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node >= MAX_NR_NODES'
#216: FILE: include/linux/topology.h:97:
+	if ((node < 0) || (node >= MAX_NR_NODES) ||
+	    ((cpu = __node_to_first_cpu(node)) < 0))  /* invalid node # */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#216: FILE: include/linux/topology.h:97:
+	if ((node < 0) || (node >= MAX_NR_NODES) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node < 0'
#231: FILE: include/linux/topology.h:112:
+	if ((node < 0) || (node >= MAX_NR_NODES))  /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node >= MAX_NR_NODES'
#231: FILE: include/linux/topology.h:112:
+	if ((node < 0) || (node >= MAX_NR_NODES))  /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node < 0'
#247: FILE: include/linux/topology.h:128:
+	if ((node < 0) || (node >= MAX_NR_NODES) ||
+	    ((memblk = __node_to_memblk(node)) < 0))  /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node >= MAX_NR_NODES'
#247: FILE: include/linux/topology.h:128:
+	if ((node < 0) || (node >= MAX_NR_NODES) ||
+	    ((memblk = __node_to_memblk(node)) < 0))  /* invalid node # */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#247: FILE: include/linux/topology.h:128:
+	if ((node < 0) || (node >= MAX_NR_NODES) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: include/linux/topology.h:148:
+ * get_curr_node(): Returns the number of the Node containing $

ERROR:SPACING: space required before the open brace '{'
#290: FILE: mm/numa.c:78:
+	if (test_and_set_bit(num_online_memblks(), &memblk_online_map)){

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#291: FILE: mm/numa.c:79:
+		printk("free_area_init_core: memblk alread counted?!?!\n");
 		                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: mm/numa.c:79:
+		printk("free_area_init_core: memblk alread counted?!?!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: mm/numa.c:80:
+		BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428289.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 10 warnings, 13 checks, 220 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428289.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
