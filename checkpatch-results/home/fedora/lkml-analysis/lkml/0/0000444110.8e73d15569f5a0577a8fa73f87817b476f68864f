WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#32: 
> > >immediatly the kernel image used.
     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> > >+#define MODULE_OOPS_TRACKING_NR_BITS (BITS_PER_LONG * MODULE_OOPS_TRACKING_NR_LONGS)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#112: FILE: arch/i386/kernel/traps.c:205:
+	printk(oops_id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: arch/i386/kernel/traps.c:236:
+		printk("Code: ");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/linux/module.h:416:
+extern void module_oops_tracking_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/module.h:417:
+extern void module_oops_tracking_mark(struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#166: FILE: include/linux/module.h:417:
+extern void module_oops_tracking_mark(struct module *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/module.h:418:
+extern void module_oops_tracking_print(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#201: FILE: kernel/module.c:1255:
+	struct module * mod;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: kernel/module.c:1261:
+void module_oops_tracking_mark(struct module * mod)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: kernel/module.c:1275:
+			printk("Modules:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#223: FILE: kernel/module.c:1277:
+			printk("\n        ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: kernel/module.c:1280:
+		printk(" [(%s:<%p>:<%p>)]",

CHECK:SPACING: No space is necessary after a cast
#228: FILE: kernel/module.c:1282:
+		       (char *) mod + mod->size_of_struct,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#229: FILE: kernel/module.c:1283:
+		       (char *) mod + mod->size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: kernel/module.c:1286:
+		printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444110.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 5 checks, 117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444110.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
