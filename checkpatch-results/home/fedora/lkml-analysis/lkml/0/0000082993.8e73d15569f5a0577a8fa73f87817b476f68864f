CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pool)...) over kmalloc(sizeof(struct gen_pool)...)
#151: FILE: lib/genalloc.c:30:
+		pool = kmalloc(sizeof(struct gen_pool), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*pool)...) over kmalloc_node(sizeof(struct gen_pool)...)
#153: FILE: lib/genalloc.c:32:
+		pool = kmalloc_node(sizeof(struct gen_pool), GFP_KERNEL, nid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pool"
#155: FILE: lib/genalloc.c:34:
+	if (pool != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chunk"
#202: FILE: lib/genalloc.c:73:
+	if (unlikely(chunk == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: lib/genalloc.c:127:
+				bit = find_next_bit(chunk->bits, bit + nbits,
+							bit + 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: lib/genalloc.c:170:
+			BUG_ON(addr + size > chunk->end_addr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: lib/genalloc.c:179:
+	BUG_ON(nbits > 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: include/linux/genalloc.h:14:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/linux/genalloc.h:35:
+extern struct gen_pool *gen_pool_create(int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#445: FILE: include/linux/genalloc.h:35:
+extern struct gen_pool *gen_pool_create(int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#445: FILE: include/linux/genalloc.h:35:
+extern struct gen_pool *gen_pool_create(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: include/linux/genalloc.h:36:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#446: FILE: include/linux/genalloc.h:36:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#446: FILE: include/linux/genalloc.h:36:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#446: FILE: include/linux/genalloc.h:36:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#446: FILE: include/linux/genalloc.h:36:
+extern int gen_pool_add(struct gen_pool *, unsigned long, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: include/linux/genalloc.h:37:
+extern unsigned long gen_pool_alloc(struct gen_pool *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#447: FILE: include/linux/genalloc.h:37:
+extern unsigned long gen_pool_alloc(struct gen_pool *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#447: FILE: include/linux/genalloc.h:37:
+extern unsigned long gen_pool_alloc(struct gen_pool *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/genalloc.h:38:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#448: FILE: include/linux/genalloc.h:38:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#448: FILE: include/linux/genalloc.h:38:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#448: FILE: include/linux/genalloc.h:38:
+extern void gen_pool_free(struct gen_pool *, unsigned long, size_t);

CHECK:SPACING: No space is necessary after a cast
#547: FILE: arch/ia64/kernel/uncached.c:107:
+		(void) smp_call_function(uncached_ipi_visibility, NULL, 0, 1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#578: FILE: arch/ia64/kernel/uncached.c:122:
+	(void) smp_call_function(uncached_ipi_mc_drain, NULL, 0, 1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#591: FILE: arch/ia64/kernel/uncached.c:134:
+		free_pages(c_addr, IA64_GRANULE_SHIFT-PAGE_SHIFT);
 		                                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pool"
#637: FILE: arch/ia64/kernel/uncached.c:166:
+		if (pool == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pool"
#682: FILE: arch/ia64/kernel/uncached.c:194:
+	if (unlikely(pool == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pool"
#726: FILE: arch/ia64/kernel/uncached.c:224:
+	if (pool != NULL) {

CHECK:SPACING: No space is necessary after a cast
#728: FILE: arch/ia64/kernel/uncached.c:226:
+		(void) gen_pool_add(pool, uc_start, size, nid);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082993.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 13 warnings, 17 checks, 712 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082993.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
