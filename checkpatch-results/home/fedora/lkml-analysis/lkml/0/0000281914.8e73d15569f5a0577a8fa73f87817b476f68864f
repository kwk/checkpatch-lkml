CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/asm-ppc/pgtable.h:675:
+extern int get_pteptr(struct mm_struct *mm, unsigned long addr, pte_t **ptep);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/asm-ppc/system.h:79:
+extern int fix_alignment(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#95: FILE: include/asm-ppc/system.h:79:
+extern int fix_alignment(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/asm-ppc/system.h:85:
+extern void do_page_fault(struct pt_regs *, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#101: FILE: include/asm-ppc/system.h:85:
+extern void do_page_fault(struct pt_regs *, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#101: FILE: include/asm-ppc/system.h:85:
+extern void do_page_fault(struct pt_regs *, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#101: FILE: include/asm-ppc/system.h:85:
+extern void do_page_fault(struct pt_regs *, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/asm-ppc/system.h:86:
+extern void bad_page_fault(struct pt_regs *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#102: FILE: include/asm-ppc/system.h:86:
+extern void bad_page_fault(struct pt_regs *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#102: FILE: include/asm-ppc/system.h:86:
+extern void bad_page_fault(struct pt_regs *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#102: FILE: include/asm-ppc/system.h:86:
+extern void bad_page_fault(struct pt_regs *, unsigned long, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/asm-ppc/system.h:87:
+extern void die(const char *, struct pt_regs *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#103: FILE: include/asm-ppc/system.h:87:
+extern void die(const char *, struct pt_regs *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#103: FILE: include/asm-ppc/system.h:87:
+extern void die(const char *, struct pt_regs *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#103: FILE: include/asm-ppc/system.h:87:
+extern void die(const char *, struct pt_regs *, long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281914.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 5 checks, 57 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281914.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
