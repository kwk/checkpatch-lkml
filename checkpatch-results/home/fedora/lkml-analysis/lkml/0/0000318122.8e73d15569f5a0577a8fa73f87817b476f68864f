WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#18: 
Subject: [PATCH] Re: New feature: Removal of the exceptions wich belongs to 
                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: Unexpected content after email: '<sisopiii-l@cscience.org>; <linux-kernel@vger.kernel.org>;', should be: '"<sisopiii-l@cscience.org>;" <linux-kernel@vger.kernel.org>'
#66: 
Cc: <sisopiii-l@cscience.org>; <linux-kernel@vger.kernel.org>;

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
Subject: Re: New feature: Removal of the exceptions wich belongs to the init

WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#69: 
Subject: Re: New feature: Removal of the exceptions wich belongs to the init
                                                    ^^^^

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#288: FILE: Makefile:4:
+EXTRAVERSION =3D -test11-so3
 ^^^^^^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#289: FILE: Makefile:4:
diff -Nur linux-2.6.0-test11/arch/i386/kernel/module.c =

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#303: FILE: arch/i386/kernel/module.c:39:
+{=09
  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#320: FILE: drivers/base/Kconfig:10:
+config SISOP3
+	tristate "Modulo de SO3"
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#342: FILE: drivers/base/sisop3.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#344: FILE: drivers/base/sisop3.c:3:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#363: FILE: include/asm-i386/uaccess.h:125:
 };
+/* Compare two exception table entries: < 0 if ex1 comes before ex2 */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#364: FILE: include/asm-i386/uaccess.h:126:
+static inline int extable_cmp(const struct exception_table_entry ex1,=20
                                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#364: FILE: include/asm-i386/uaccess.h:126:
+static inline int extable_cmp(const struct exception_table_entry ex1,=20
                                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: include/asm-i386/uaccess.h:127:
+                const struct exception_table_entry ex2)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: include/asm-i386/uaccess.h:127:
+                const struct exception_table_entry ex2)$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#368: FILE: include/asm-i386/uaccess.h:130:
+}          =20
            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: include/asm-i386/uaccess.h:132:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#387: FILE: include/asm-i386/uaccess.h:47:
+/* This code sorts an exception table. It is very used with modules =
+void sort_ex_table(struct exception_table_entry *start,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: include/asm-i386/uaccess.h:48:
+                   struct exception_table_entry *finish);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#411: FILE: include/asm-i386/uaccess.h:50:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#414: FILE: include/asm-i386/uaccess.h:52:
+void sort_ex_table(struct exception_table_entry *start, struct =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#416: FILE: include/asm-i386/uaccess.h:54:
+	struct exception_table_entry el, *p, *q;
+	=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#416: FILE: include/asm-i386/uaccess.h:54:
+	=09
 	^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#418: FILE: include/asm-i386/uaccess.h:56:
+	for (p =3D start + 1; p < finish; ++p) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#420: FILE: include/asm-i386/uaccess.h:58:
+		if (extable_cmp(p[0], p[-1]) =3D=3D -1) {
 		                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#420: FILE: include/asm-i386/uaccess.h:58:
+		if (extable_cmp(p[0], p[-1]) =3D=3D -1) {
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#420: FILE: include/asm-i386/uaccess.h:58:
+		if (extable_cmp(p[0], p[-1]) =3D=3D -1) {
 		                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#420: FILE: include/asm-i386/uaccess.h:58:
+		if (extable_cmp(p[0], p[-1]) =3D=3D -1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#422: FILE: include/asm-i386/uaccess.h:60:
+			el =3D *p;
 			   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#422: FILE: include/asm-i386/uaccess.h:60:
+			el =3D *p;
 			       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#423: FILE: include/asm-i386/uaccess.h:61:
+			q =3D p;
 			  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#426: FILE: include/asm-i386/uaccess.h:64:
+				q[0] =3D q[-1];
 				     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#428: FILE: include/asm-i386/uaccess.h:66:
+			} while (q > start && extable_cmp(el, q[-1]) =3D=3D -1);
 			                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#428: FILE: include/asm-i386/uaccess.h:66:
+			} while (q > start && extable_cmp(el, q[-1]) =3D=3D -1);
 			                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#428: FILE: include/asm-i386/uaccess.h:66:
+			} while (q > start && extable_cmp(el, q[-1]) =3D=3D -1);
 			                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#429: FILE: include/asm-i386/uaccess.h:67:
+				*q =3D el;
 				   ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#433: FILE: include/asm-i386/uaccess.h:71:
+}
+						=09

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#433: FILE: include/asm-i386/uaccess.h:71:
+}
+						=09

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#433: FILE: include/asm-i386/uaccess.h:71:
+						=09
 						^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#444: FILE: kernel/module.c:1078:
 }
+static inline int within(unsigned long addr, void *start, unsigned long =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#446: FILE: kernel/module.c:1079:
+static inline int within(unsigned long addr, void *start, unsigned long =
+{

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#447: FILE: kernel/module.c:1080:
+	return ((void *)addr >=3D start && (void *)addr < start + size);
 	                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#452: FILE: kernel/module.c:1084:
+/* Remove exception table entries which belongs to this module's init =
+void remove_init_exceptions(struct module *mod)=20

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: kernel/module.c:1097:
+^I^I            mod->init_size)) {$

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#475: FILE: kernel/module.c:1107:
+		mod->extable +=3D num_init_ex;
 		             ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#476: FILE: kernel/module.c:1108:
+		mod->num_exentries -=3D num_init_ex;
 		                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#480: FILE: kernel/module.c:1112:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: kernel/module.c:1653:
+        /* Classifying the exception table */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: kernel/module.c:1654:
+        sort_ex_table((struct exception_table_entry *)mod->extable,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: kernel/module.c:1654:
+        sort_ex_table((struct exception_table_entry *)mod->extable,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/module.c:1655:
+                      (struct exception_table_entry *)mod->extable +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: kernel/module.c:1655:
+                      (struct exception_table_entry *)mod->extable +$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: kernel/module.c:1656:
+                                mod->num_exentries);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: kernel/module.c:1656:
+                                mod->num_exentries);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000318122.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 14 warnings, 11 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000318122.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
