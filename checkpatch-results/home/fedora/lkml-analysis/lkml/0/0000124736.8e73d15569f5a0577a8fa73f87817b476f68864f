CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#41: FILE: include/linux/mm.h:1013:
+#define READAHEAD_DEBUG_LEVEL(n)	(readahead_debug_level >= n)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#56: FILE: mm/readahead.c:19:
+#define KB(size)	(((size)*1024 + PAGE_CACHE_SIZE-1) / PAGE_CACHE_SIZE)
                 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#56: FILE: mm/readahead.c:19:
+#define KB(size)	(((size)*1024 + PAGE_CACHE_SIZE-1) / PAGE_CACHE_SIZE)
                 	                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#72: FILE: mm/readahead.c:35:
+	do { if (READAHEAD_DEBUG_LEVEL(1)) printk(KERN_DEBUG args); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: mm/readahead.c:35:
+	do { if (READAHEAD_DEBUG_LEVEL(1)) printk(KERN_DEBUG args); } while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#74: FILE: mm/readahead.c:37:
+	do { if (READAHEAD_DEBUG_LEVEL(2)) printk(KERN_DEBUG args); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#74: FILE: mm/readahead.c:37:
+	do { if (READAHEAD_DEBUG_LEVEL(2)) printk(KERN_DEBUG args); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: mm/readahead.c:39:
+#define dprintk(args...)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: mm/readahead.c:40:
+#define ddprintk(args...)	do { } while(0)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#86: FILE: mm/readahead.c:49:
+u32 readahead_debug_level = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: mm/readahead.c:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: mm/readahead.c:341:
+			if (prefer_adaptive_readahead() &&
+				page_idx == nr_to_read - lookahead_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: mm/readahead.c:355:
+		if (prefer_adaptive_readahead() &&
+				page_idx == nr_to_read - lookahead_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#188: FILE: mm/readahead.c:440:
+	return __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#197: FILE: mm/readahead.c:460:
+	actual = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: mm/readahead.c:463:
+	dprintk("blockable-readahead(ino=%lu, ra=%lu+%lu) = %d\n",
+			mapping->host->i_ino, offset, nr_to_read, actual);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: mm/readahead.c:683:
+static inline struct page *__find_page(struct address_space *mapping,
+							pgoff_t offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/readahead.c:689:
+static inline struct page *find_page(struct address_space *mapping,
+							pgoff_t offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#265: FILE: mm/readahead.c:698:
+		BUG_ON(page->index != offset);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: mm/readahead.c:714:
+	BUG_ON(!nr_pages || !page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rescue_pages', this function's name, in a string
#286: FILE: mm/readahead.c:719:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: mm/readahead.c:720:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",
+			mapping->host->i_ino, index, nr_pages);

ERROR:SPACING: space required before the open parenthesis '('
#289: FILE: mm/readahead.c:722:
+	for(;;) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: mm/readahead.c:730:
+		while (page_mapping(page) == mapping &&
+				page_index(page) == index) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: mm/readahead.c:732:
+			struct page *the_page = page;
+			page = next_page(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/readahead.c:734:
+			if (!PageActive(the_page) &&
+					!PageLocked(the_page) &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#331: FILE: mm/filemap.c:784:
+		printk(KERN_DEBUG "read-file(ino=%lu, req=%lu+%lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: mm/filemap.c:785:
+		printk(KERN_DEBUG "read-file(ino=%lu, req=%lu+%lu)\n",
+			inode->i_ino, index, last_index - index);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124736.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 9 warnings, 13 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124736.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
