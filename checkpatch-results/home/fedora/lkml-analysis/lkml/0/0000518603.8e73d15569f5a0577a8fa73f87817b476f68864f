WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Here is a patch against 2.4.8 that implements support for diverting network frames

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: include/linux/moddv.h:1:
+#ifndef _MODDV_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff **' should also have an identifier name
#56: FILE: include/linux/moddv.h:7:
+	int (*divert_tx)(struct sk_buff **, struct net_device **, struct packet_type **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device **' should also have an identifier name
#56: FILE: include/linux/moddv.h:7:
+	int (*divert_tx)(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type **' should also have an identifier name
#56: FILE: include/linux/moddv.h:7:
+	int (*divert_tx)(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff **' should also have an identifier name
#57: FILE: include/linux/moddv.h:8:
+	int (*divert_rx)(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device **' should also have an identifier name
#57: FILE: include/linux/moddv.h:8:
+	int (*divert_rx)(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type **' should also have an identifier name
#57: FILE: include/linux/moddv.h:8:
+	int (*divert_rx)(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#58: FILE: include/linux/moddv.h:9:
+	void (*divert_bind)(struct net_device *, struct packet_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type *' should also have an identifier name
#58: FILE: include/linux/moddv.h:9:
+	void (*divert_bind)(struct net_device *, struct packet_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#59: FILE: include/linux/moddv.h:10:
+	void (*divert_free)(struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/moddv.h:13:
+extern int register_divert_module(struct moddv_calls *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct moddv_calls *' should also have an identifier name
#62: FILE: include/linux/moddv.h:13:
+extern int register_divert_module(struct moddv_calls *);

ERROR:SPACING: space prohibited after that open parenthesis '('
#63: FILE: include/linux/moddv.h:14:
+extern void unregister_divert_module( struct moddv_calls * );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#63: FILE: include/linux/moddv.h:14:
+extern void unregister_divert_module( struct moddv_calls * );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/moddv.h:14:
+extern void unregister_divert_module( struct moddv_calls * );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct moddv_calls *' should also have an identifier name
#63: FILE: include/linux/moddv.h:14:
+extern void unregister_divert_module( struct moddv_calls * );

ERROR:SPACING: space prohibited after that open parenthesis '('
#64: FILE: include/linux/moddv.h:15:
+void mod_divert_inject_out( struct sk_buff *, struct net_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#64: FILE: include/linux/moddv.h:15:
+void mod_divert_inject_out( struct sk_buff *, struct net_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#64: FILE: include/linux/moddv.h:15:
+void mod_divert_inject_out( struct sk_buff *, struct net_device *);

ERROR:SPACING: space prohibited after that open parenthesis '('
#65: FILE: include/linux/moddv.h:16:
+void mod_divert_inject_in( struct sk_buff *, struct net_device *, struct packet_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#65: FILE: include/linux/moddv.h:16:
+void mod_divert_inject_in( struct sk_buff *, struct net_device *, struct packet_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#65: FILE: include/linux/moddv.h:16:
+void mod_divert_inject_in( struct sk_buff *, struct net_device *, struct packet_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type *' should also have an identifier name
#65: FILE: include/linux/moddv.h:16:
+void mod_divert_inject_in( struct sk_buff *, struct net_device *, struct packet_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff **' should also have an identifier name
#67: FILE: include/linux/moddv.h:18:
+int handle_mod_divert_tx(struct sk_buff **, struct net_device **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device **' should also have an identifier name
#67: FILE: include/linux/moddv.h:18:
+int handle_mod_divert_tx(struct sk_buff **, struct net_device **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff **' should also have an identifier name
#68: FILE: include/linux/moddv.h:19:
+int handle_mod_divert_rx(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device **' should also have an identifier name
#68: FILE: include/linux/moddv.h:19:
+int handle_mod_divert_rx(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct packet_type **' should also have an identifier name
#68: FILE: include/linux/moddv.h:19:
+int handle_mod_divert_rx(struct sk_buff **, struct net_device **, struct packet_type **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#69: FILE: include/linux/moddv.h:20:
+void mod_divert_skb_use(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#70: FILE: include/linux/moddv.h:21:
+void mod_divert_skb_unuse(struct sk_buff *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#79: FILE: include/linux/moddv.h:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <divertPtr>
#89: FILE: include/linux/netdevice.h:422:
+	void                    *divertPtr; /* Private ptr for the module diverter */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <divertPtr1>
#102: FILE: include/linux/skbuff.h:217:
+	void            *divertPtr1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: net/Config.in:67:
+   bool 'Frame diverter for modules (EXPERIMENTAL)' CONFIG_MOD_DIVERT  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#148: FILE: net/core/dev.c:160:
+struct packet_type *ptype_all = NULL;		/* Taps */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#174: FILE: net/core/dev.c:1493:
+							if (handle_mod_divert_rx(&skb, &rx_dev, &pt_prev))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#174: FILE: net/core/dev.c:1493:
+							if (handle_mod_divert_rx(&skb, &rx_dev, &pt_prev))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: Unbalanced braces around else statement
#185: FILE: net/core/dev.c:1508:
+				else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: net/core/dev.c:2811:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: net/core/moddv.c:1:
+/*   $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: net/core/moddv.c:1:
+/*   

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: net/core/moddv.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: net/core/moddv.c:4:
+ *   File: moddv.c $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: net/core/moddv.c:7:
+ *     of dev.c, skbuff.c, skbuff.h and netdevice.h form a full packet diverter for modules.  $

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#226: FILE: net/core/moddv.c:9:
+ *     outgoing packets, and may discard both incomming and outgoing packet.  There is 
                                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: net/core/moddv.c:9:
+ *     outgoing packets, and may discard both incomming and outgoing packet.  There is $

WARNING:TYPO_SPELLING: 'furture' may be misspelled - perhaps 'future'?
#230: FILE: net/core/moddv.c:13:
+ *     in the furture to accomodate a priority based list such as is used in netfilter.
               ^^^^^^^

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#230: FILE: net/core/moddv.c:13:
+ *     in the furture to accomodate a priority based list such as is used in netfilter.
                          ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: net/core/moddv.c:16:
+ *     interface, feel free to write one... $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#239: FILE: net/core/moddv.c:22:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#241: FILE: net/core/moddv.c:24:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <divertLock>
#274: FILE: net/core/moddv.c:57:
+spinlock_t divertLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#274: FILE: net/core/moddv.c:57:
+spinlock_t divertLock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: net/core/moddv.c:58:
+struct moddv_calls *diverter = NULL; $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#275: FILE: net/core/moddv.c:58:
+struct moddv_calls *diverter = NULL; 

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#276: FILE: net/core/moddv.c:59:
+static int initted = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#278: FILE: net/core/moddv.c:61:
+extern struct packet_type *ptype_base[16];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#279: FILE: net/core/moddv.c:62:
+extern struct packet_type *ptype_all;

ERROR:SPACING: space prohibited after that open parenthesis '('
#280: FILE: net/core/moddv.c:63:
+extern int dev_queue_xmit( struct sk_buff *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#280: FILE: net/core/moddv.c:63:
+extern int dev_queue_xmit( struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#280: FILE: net/core/moddv.c:63:
+extern int dev_queue_xmit( struct sk_buff *);

WARNING:INLINE: plain inline is preferred over __inline
#282: FILE: net/core/moddv.c:65:
+__inline int enter_diverter(void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: net/core/moddv.c:66:
+{ $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around diverter->unloading
#288: FILE: net/core/moddv.c:71:
+	if (!diverter || atomic_read(&(diverter->unloading))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#291: FILE: net/core/moddv.c:74:
+		return 1;
+	} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: net/core/moddv.c:77:
+^I^Ireturn 0; $

WARNING:INLINE: plain inline is preferred over __inline
#298: FILE: net/core/moddv.c:81:
+__inline void exit_diverter(void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: net/core/moddv.c:90:
+}^I $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#321: FILE: net/core/moddv.c:104:
+	for (dev = dev_base; dev != NULL; dev = dev->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pt"
#323: FILE: net/core/moddv.c:106:
+			for (pt = ptype_base[i]; pt != NULL; pt = pt->next) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: net/core/moddv.c:117:
+^I */^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: net/core/moddv.c:121:
+^I^Iprintk(KERN_ERR "Only one diverter is currently supported, and one is already registered.\n"); $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#338: FILE: net/core/moddv.c:121:
+		printk(KERN_ERR "Only one diverter is currently supported, and one is already registered.\n"); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: net/core/moddv.c:130:
+} $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "divertPtr1"
#367: FILE: net/core/moddv.c:150:
+	if ((*skb)->divertPtr1 != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#373: FILE: net/core/moddv.c:156:
+		if (proto->type == (*skb)->protocol && (!proto->dev || proto->dev == (*skb)->dev)) {
+			break;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: net/core/moddv.c:162:
+		printk(KERN_ERR "Diverting a packet to a module but cannot find the correct protocol?");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#384: FILE: net/core/moddv.c:167:
+	switch (diverter->divert_tx(skb, dev, &proto)) {
+		case MDV_DISCARD:
[...]
+		case MDV_HOLD:
[...]
+		case MDV_CHAIN:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: net/core/moddv.c:169:
+^I^I^Ikfree_skb(*skb);^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: net/core/moddv.c:177:
+^I^I^Ireturn 0;^I^I  $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#396: FILE: net/core/moddv.c:179:
+			printk(KERN_ERR "Diverter module return an invalid return code from TX!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: net/core/moddv.c:183:
+} $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#402: FILE: net/core/moddv.c:185:
+int handle_mod_divert_rx(struct sk_buff **skb, struct net_device **dev, struct packet_type **proto )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "divertPtr1"
#407: FILE: net/core/moddv.c:190:
+	if ((*skb)->divertPtr1 != NULL)	{

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#412: FILE: net/core/moddv.c:195:
+	switch (diverter->divert_rx(skb, dev, proto)) {
+		case MDV_DISCARD:
[...]
+		case MDV_HOLD:
[...]
+		case MDV_CHAIN:
[...]
+		default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#424: FILE: net/core/moddv.c:207:
+			printk(KERN_ERR "Diverter module return an invalid return code from RX!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: net/core/moddv.c:211:
+} $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#495: FILE: net/core/skbuff.c:288:
+	if (skb->head) {
[...]
 	if (!skb->cloned ||

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 46 warnings, 13 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
