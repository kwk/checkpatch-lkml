WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#61: FILE: arch/alpha/kernel/alpha_ksyms.c:265:
+EXPORT_SYMBOL(dma_alloc_coherent);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#62: FILE: arch/alpha/kernel/alpha_ksyms.c:266:
+EXPORT_SYMBOL(dma_free_coherent);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#65: FILE: arch/alpha/kernel/alpha_ksyms.c:269:
+EXPORT_SYMBOL(dma_map_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#66: FILE: arch/alpha/kernel/alpha_ksyms.c:270:
+EXPORT_SYMBOL(dma_unmap_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#67: FILE: arch/alpha/kernel/alpha_ksyms.c:271:
+EXPORT_SYMBOL(dma_map_page);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#68: FILE: arch/alpha/kernel/alpha_ksyms.c:272:
+EXPORT_SYMBOL(dma_unmap_page);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#69: FILE: arch/alpha/kernel/alpha_ksyms.c:273:
+EXPORT_SYMBOL(dma_map_sg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#70: FILE: arch/alpha/kernel/alpha_ksyms.c:274:
+EXPORT_SYMBOL(dma_unmap_sg);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#91: FILE: arch/alpha/kernel/pci-noop.c:109:
+ * asm-alpha/dma-mapping.h. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: arch/alpha/kernel/pci-noop.c:114:
+        void *ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: arch/alpha/kernel/pci-noop.c:114:
+        void *ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: arch/alpha/kernel/pci-noop.c:116:
+        /* ignore region specifiers */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: arch/alpha/kernel/pci-noop.c:117:
+        gfp &= ~(__GFP_DMA | __GFP_HIGHMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: arch/alpha/kernel/pci-noop.c:117:
+        gfp &= ~(__GFP_DMA | __GFP_HIGHMEM);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/alpha/kernel/pci-noop.c:119:
+        if (dev == NULL || (*dev->dma_mask < 0xffffffff))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/alpha/kernel/pci-noop.c:119:
+        if (dev == NULL || (*dev->dma_mask < 0xffffffff))$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#101: FILE: arch/alpha/kernel/pci-noop.c:119:
+        if (dev == NULL || (*dev->dma_mask < 0xffffffff))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: arch/alpha/kernel/pci-noop.c:120:
+                gfp |= GFP_DMA;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/alpha/kernel/pci-noop.c:120:
+                gfp |= GFP_DMA;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: arch/alpha/kernel/pci-noop.c:121:
+        ret = (void *)__get_free_pages(gfp, get_order(size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: arch/alpha/kernel/pci-noop.c:121:
+        ret = (void *)__get_free_pages(gfp, get_order(size));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: arch/alpha/kernel/pci-noop.c:123:
+        if (ret != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: arch/alpha/kernel/pci-noop.c:123:
+        if (ret != NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#105: FILE: arch/alpha/kernel/pci-noop.c:123:
+        if (ret != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: arch/alpha/kernel/pci-noop.c:124:
+                memset(ret, 0, size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/alpha/kernel/pci-noop.c:124:
+                memset(ret, 0, size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: arch/alpha/kernel/pci-noop.c:125:
+                *dma_handle = virt_to_bus(ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: arch/alpha/kernel/pci-noop.c:125:
+                *dma_handle = virt_to_bus(ret);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: arch/alpha/kernel/pci-noop.c:126:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/alpha/kernel/pci-noop.c:126:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: arch/alpha/kernel/pci-noop.c:127:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/alpha/kernel/pci-noop.c:127:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: arch/alpha/kernel/pci-noop.c:133:
+        free_pages((unsigned long)vaddr, get_order(size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/alpha/kernel/pci-noop.c:133:
+        free_pages((unsigned long)vaddr, get_order(size));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: arch/alpha/kernel/pci-noop.c:143:
+	return dma_alloc_coherent (NULL, size, dma_addrp, GFP_ATOMIC);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#135: FILE: arch/alpha/kernel/pci-noop.c:152:
+	dma_free_coherent (NULL, size, cpu_addr, dma_addr);

CHECK:SPACING: No space is necessary after a cast
#142: FILE: arch/alpha/kernel/pci-noop.c:158:
+	return (dma_addr_t) virt_to_bus (cpu_addr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#142: FILE: arch/alpha/kernel/pci-noop.c:158:
+	return (dma_addr_t) virt_to_bus (cpu_addr);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#154: FILE: arch/alpha/kernel/pci-noop.c:172:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#154: FILE: arch/alpha/kernel/pci-noop.c:172:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: arch/alpha/kernel/pci-noop.c:172:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: arch/alpha/kernel/pci-noop.c:172:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: arch/alpha/kernel/pci-noop.c:172:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#155: FILE: arch/alpha/kernel/pci-noop.c:173:
+		sg_dma_len (sg + i) = sg[i].length;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: arch/alpha/kernel/pci-noop.c:175:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#193: FILE: arch/alpha/kernel/pci_iommu.c:229:
+		if (dev->bus == &pci_bus_type) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#194: FILE: arch/alpha/kernel/pci_iommu.c:230:
+			pdev = to_pci_dev (dev);

CHECK:BRACES: Unbalanced braces around else statement
#196: FILE: arch/alpha/kernel/pci_iommu.c:232:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: arch/alpha/kernel/pci_iommu.c:240:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#212: FILE: arch/alpha/kernel/pci_iommu.c:308:
+dma_map_single (struct device *dev, void *cpu_addr, size_t size,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: arch/alpha/kernel/pci_iommu.c:312:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: arch/alpha/kernel/pci_iommu.c:331:
+dma_map_page (struct device *dev, struct page *page, unsigned long offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#239: FILE: arch/alpha/kernel/pci_iommu.c:335:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: arch/alpha/kernel/pci_iommu.c:352:
+^I^I^I^I(char *)page_address(page) + offset, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: arch/alpha/kernel/pci_iommu.c:378:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#290: FILE: arch/alpha/kernel/pci_iommu.c:430:
+	dma_unmap_single (pdev ? &pdev->dev : NULL, dma_addr, size,

CHECK:SPACING: No space is necessary after a cast
#291: FILE: arch/alpha/kernel/pci_iommu.c:431:
+			  (enum dma_data_direction) direction);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#306: FILE: arch/alpha/kernel/pci_iommu.c:445:
+	dma_unmap_single (pdev ? &pdev->dev : NULL, dma_addr, size,

CHECK:SPACING: No space is necessary after a cast
#307: FILE: arch/alpha/kernel/pci_iommu.c:446:
+			  (enum dma_data_direction) direction);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: arch/alpha/kernel/pci_iommu.c:455:
+dma_alloc_coherent (struct device *dev, size_t size,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: arch/alpha/kernel/pci_iommu.c:493:
+	return dma_alloc_coherent (pdev ? &pdev->dev : NULL, size,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#361: FILE: arch/alpha/kernel/pci_iommu.c:504:
+dma_free_coherent (struct device *dev, size_t size, void *cpu_addr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#377: FILE: arch/alpha/kernel/pci_iommu.c:518:
+	dma_free_coherent (pdev ? &pdev->dev : NULL, size, cpu_addr, dma_addr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: arch/alpha/kernel/pci_iommu.c:676:
+dma_map_sg (struct device *dev, struct scatterlist *sg, int nents,

CHECK:BRACES: braces {} should be used on all arms of this statement
#404: FILE: arch/alpha/kernel/pci_iommu.c:690:
+		if (dev->bus == &pci_bus_type) {
[...]
+		} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#405: FILE: arch/alpha/kernel/pci_iommu.c:691:
+			pdev = to_pci_dev (dev);

CHECK:BRACES: Unbalanced braces around else statement
#407: FILE: arch/alpha/kernel/pci_iommu.c:693:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: arch/alpha/kernel/pci_iommu.c:701:
+^I$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#423: FILE: arch/alpha/kernel/pci_iommu.c:708:
 		sg->dma_address
+		  = dma_map_single_1(dev, SG_ENT_VIRT_ADDRESS(sg),

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#449: FILE: arch/alpha/kernel/pci_iommu.c:765:
+	return dma_map_sg (pdev ? &pdev->dev : NULL, sg, nents,

CHECK:SPACING: No space is necessary after a cast
#450: FILE: arch/alpha/kernel/pci_iommu.c:766:
+			   (enum dma_data_direction) direction);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#460: FILE: arch/alpha/kernel/pci_iommu.c:774:
+dma_unmap_sg (struct device *dev, struct scatterlist *sg, int nents,

CHECK:BRACES: braces {} should be used on all arms of this statement
#481: FILE: arch/alpha/kernel/pci_iommu.c:792:
+		if (dev->bus == &pci_bus_type) {
[...]
+		} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#482: FILE: arch/alpha/kernel/pci_iommu.c:793:
+			pdev = to_pci_dev (dev);

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: arch/alpha/kernel/pci_iommu.c:795:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: arch/alpha/kernel/pci_iommu.c:803:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#508: FILE: arch/alpha/kernel/pci_iommu.c:865:
+	dma_unmap_sg (pdev ? &pdev->dev : NULL, sg, nents,

CHECK:SPACING: No space is necessary after a cast
#509: FILE: arch/alpha/kernel/pci_iommu.c:866:
+		      (enum dma_data_direction) direction);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: arch/alpha/kernel/pci_iommu.c:873:
+int dma_supported (struct device *dev, u64 mask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#543: FILE: arch/alpha/kernel/pci_iommu.c:908:
+	return dma_supported (pdev ? &pdev->dev : NULL, mask);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#552: FILE: include/asm-alpha/dma-mapping.h:1:
+#ifndef _ASM_ALPHA_DMA_MAPPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cache.h> instead of <asm/cache.h>
#556: FILE: include/asm-alpha/dma-mapping.h:5:
+#include <asm/cache.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#559: FILE: include/asm-alpha/dma-mapping.h:8:
+#include <asm/io.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#567: FILE: include/asm-alpha/dma-mapping.h:16:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: include/asm-alpha/dma-mapping.h:24:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#584: FILE: include/asm-alpha/dma-mapping.h:33:
+	BUG_ON(direction == DMA_NONE);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#586: FILE: include/asm-alpha/dma-mapping.h:35:
+	for (i = 0; i < nents; i++ ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: include/asm-alpha/dma-mapping.h:36:
+		BUG_ON(!sg[i].page);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#589: FILE: include/asm-alpha/dma-mapping.h:38:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

CHECK:SPACING: No space is necessary after a cast
#589: FILE: include/asm-alpha/dma-mapping.h:38:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#589: FILE: include/asm-alpha/dma-mapping.h:38:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#589: FILE: include/asm-alpha/dma-mapping.h:38:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#589: FILE: include/asm-alpha/dma-mapping.h:38:
+		sg_dma_address (sg + i) = (dma_addr_t) virt_to_bus (page_address (sg[i].page) + sg[i].offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#590: FILE: include/asm-alpha/dma-mapping.h:39:
+		sg_dma_len (sg + i) = sg[i].length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: include/asm-alpha/dma-mapping.h:49:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: include/asm-alpha/dma-mapping.h:57:
+	BUG_ON(direction == DMA_NONE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#611: FILE: include/asm-alpha/dma-mapping.h:60:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#616: FILE: include/asm-alpha/dma-mapping.h:65:
+	BUG_ON(direction == DMA_NONE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: include/asm-alpha/dma-mapping.h:71:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: include/asm-alpha/dma-mapping.h:72:
+         * we fall back to GFP_DMA when the mask isn't all 1s,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: include/asm-alpha/dma-mapping.h:73:
+         * so we can't guarantee allocations that must be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: include/asm-alpha/dma-mapping.h:74:
+         * within a tighter range than GFP_DMA..$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: include/asm-alpha/dma-mapping.h:75:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: include/asm-alpha/dma-mapping.h:76:
+        if(mask < 0x00ffffff)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: include/asm-alpha/dma-mapping.h:76:
+        if(mask < 0x00ffffff)$

ERROR:SPACING: space required before the open parenthesis '('
#627: FILE: include/asm-alpha/dma-mapping.h:76:
+        if(mask < 0x00ffffff)

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: include/asm-alpha/dma-mapping.h:77:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: include/asm-alpha/dma-mapping.h:77:
+                return 0;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#637: FILE: include/asm-alpha/dma-mapping.h:86:
+dma_addr_t dma_map_single     (struct device *dev, void *cpu_addr, size_t size,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#639: FILE: include/asm-alpha/dma-mapping.h:88:
+void       dma_unmap_single   (struct device *dev, dma_addr_t dma_addr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#641: FILE: include/asm-alpha/dma-mapping.h:90:
+dma_addr_t dma_map_page       (struct device *dev, struct page *page,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#644: FILE: include/asm-alpha/dma-mapping.h:93:
+void       dma_unmap_page     (struct device *dev, dma_addr_t dma_address,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: include/asm-alpha/dma-mapping.h:95:
+int        dma_map_sg         (struct device *dev, struct scatterlist *sg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: include/asm-alpha/dma-mapping.h:97:
+void       dma_unmap_sg       (struct device *dev, struct scatterlist *sg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#650: FILE: include/asm-alpha/dma-mapping.h:99:
+int        dma_supported      (struct device *dev, u64 mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: include/asm-alpha/dma-mapping.h:110:
+void *dma_alloc_coherent(struct device *dev, size_t size,
+			   dma_addr_t *dma_handle, int flag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: include/asm-alpha/dma-mapping.h:113:
+void dma_free_coherent(struct device *dev, size_t size,
+			 void *vaddr, dma_addr_t dma_handle);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#695: FILE: include/asm-alpha/dma-mapping.h:144:
+	 * the maximum possible, to be safe */

ERROR:SPACING: space required before the open parenthesis '('
#702: FILE: include/asm-alpha/dma-mapping.h:151:
+	if(!dev->dma_mask || !dma_supported(dev, mask))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000374612.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 72 warnings, 19 checks, 632 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000374612.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
