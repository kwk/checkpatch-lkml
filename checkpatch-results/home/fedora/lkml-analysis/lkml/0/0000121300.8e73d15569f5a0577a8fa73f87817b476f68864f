WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: drivers/media/radio/radio-maestro.c:190:
+		struct video_capability *v = arg;
+		memset(v, 0, sizeof(*v));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#225: FILE: drivers/media/radio/radio-maestro.c:193:
+		v->channels = v->audios = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: drivers/media/radio/radio-maestro.c:197:
+		struct video_tuner *v = arg;
+		if (v->tuner)

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: drivers/media/radio/radio-maestro.c:209:
+		struct video_tuner *v = arg;
+		if (v->tuner != 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: drivers/media/radio/radio-maestro.c:218:
+		unsigned long *freq = arg;
+		if (*freq < FREQ_LO || *freq > FREQ_HI)

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: drivers/media/radio/radio-maestro.c:224:
+		struct video_audio *v = arg;
+		memset(v, 0, sizeof(*v));

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: drivers/media/radio/radio-maestro.c:231:
+		struct video_audio *v = arg;
+		if (v->audio)

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: drivers/media/radio/radio-maestro.c:236:
+			register __u16 omask = inw(io + IO_MASK);
+			outw(~STR_WREN, io + IO_MASK);

WARNING:LINE_SPACING: Missing a blank line after declarations
#312: FILE: drivers/media/radio/radio-maestro.c:246:
+		struct video_unit *v = arg;
+		v->video = VIDEO_NO_UNIT;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#339: FILE: drivers/media/radio/radio-maestro.c:271:
 static __u16 __devinit radio_power_on(struct radio_device *dev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ofreq < FREQ2BITS(FREQ_LO)'
#358: FILE: drivers/media/radio/radio-maestro.c:288:
+	if ((ofreq < FREQ2BITS(FREQ_LO)) || (ofreq > FREQ2BITS(FREQ_HI)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ofreq > FREQ2BITS(FREQ_HI)'
#358: FILE: drivers/media/radio/radio-maestro.c:288:
+	if ((ofreq < FREQ2BITS(FREQ_LO)) || (ofreq > FREQ2BITS(FREQ_HI)))

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#370: FILE: drivers/media/radio/radio-maestro.c:342:
+		 __DATE__ "\n");

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 9 warnings, 3 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
