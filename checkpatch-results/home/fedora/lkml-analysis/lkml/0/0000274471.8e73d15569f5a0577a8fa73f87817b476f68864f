WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
 drivers/scsi/libata-core.c  |  359 ++++++++++++--------------------------------

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#147: 
--- a/drivers/ide/Kconfig	2004-06-17 00:28:35 -04:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#153: FILE: drivers/ide/Kconfig:98:
+config BLK_DEV_IDE_SATA
+	bool "Support for SATA (deprecated; conflicts with libata SATA driver)"
+	default n
+	---help---
+	  There are two drivers for Serial ATA controllers.
+
+	  The main driver, "libata", exists inside the SCSI subsystem
+	  and supports most modern SATA controllers.
+
+	  The IDE driver (which you are currently configuring) supports
+	  a few first-generation SATA controllers.
+
+	  In order to eliminate conflicts between the two subsystems,
+	  this config option enables the IDE driver's SATA support.
+	  Normally this is disabled, as it is preferred that libata
+	  supports SATA controllers, and this (IDE) driver supports
+	  PATA controllers.
+
+	  If unsure, say N.
+
 config BLK_DEV_HD_IDE
 	bool "Use old disk-only driver on primary interface"
 	depends on ((X86 && X86_PC9800!=y) || SH_MPC1211)

Kconfig symbols should have a help text which fully describes
it.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#203: FILE: drivers/ide/pci/amd74xx.c:489:
 static int __devinit amd74xx_probe(struct pci_dev *dev, const struct pci_device_id *id)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#223: FILE: drivers/ide/pci/amd74xx.c:517:
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE,	PCI_ANY_ID, PCI_ANY_ID, 0, 0, 14 },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#284: FILE: drivers/scsi/Kconfig:425:
+config SCSI_SATA_NV
+	tristate "NVIDIA SATA support"
+	depends on SCSI_SATA && PCI && EXPERIMENTAL
+	help
+	  This option enables support for NVIDIA Serial ATA.
+
+	  If unsure, say N.
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#514: FILE: drivers/scsi/libata-core.c:2167:
 	switch (qc->tf.protocol) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#531: FILE: drivers/scsi/libata-core.c:2175:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#552: FILE: drivers/scsi/libata-core.c:2185:
+		printk(KERN_ERR "ata%u: command 0x%x timeout, stat 0x%x host_stat 0x%x\n",

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#698: FILE: drivers/scsi/libata-core.c:2552:
+		/* fall through */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#752: FILE: drivers/scsi/libata-core.c:2586:
+		printk(KERN_WARNING "ata%d: irq trap\n", ap->id);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#924: FILE: drivers/scsi/sata_nv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1006: FILE: drivers/scsi/sata_nv.c:83:
+static int nv_init_one (struct pci_dev *pdev, const struct pci_device_id *ent);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1007: FILE: drivers/scsi/sata_nv.c:84:
+irqreturn_t nv_interrupt (int irq, void *dev_instance, struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1007: FILE: drivers/scsi/sata_nv.c:84:
+irqreturn_t nv_interrupt (int irq, void *dev_instance, struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1008: FILE: drivers/scsi/sata_nv.c:85:
+static u32 nv_scr_read (struct ata_port *ap, unsigned int sc_reg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1009: FILE: drivers/scsi/sata_nv.c:86:
+static void nv_scr_write (struct ata_port *ap, unsigned int sc_reg, u32 val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1010: FILE: drivers/scsi/sata_nv.c:87:
+static void nv_host_stop (struct ata_host_set *host_set);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#1037: FILE: drivers/scsi/sata_nv.c:114:
+static Scsi_Host_Template nv_sht = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1079: FILE: drivers/scsi/sata_nv.c:156:
+irqreturn_t nv_interrupt (int irq, void *dev_instance, struct pt_regs *regs)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1110: FILE: drivers/scsi/sata_nv.c:187:
+				printk(KERN_WARNING "ata%u: "

WARNING:SPLIT_STRING: quoted string split across lines
#1111: FILE: drivers/scsi/sata_nv.c:188:
+				printk(KERN_WARNING "ata%u: "
+					"Primary device added\n", ap->id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1115: FILE: drivers/scsi/sata_nv.c:192:
+				printk(KERN_WARNING "ata%u: "

WARNING:SPLIT_STRING: quoted string split across lines
#1116: FILE: drivers/scsi/sata_nv.c:193:
+				printk(KERN_WARNING "ata%u: "
+					"Primary device removed\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1120: FILE: drivers/scsi/sata_nv.c:197:
+				printk(KERN_WARNING "ata%u: "

WARNING:SPLIT_STRING: quoted string split across lines
#1121: FILE: drivers/scsi/sata_nv.c:198:
+				printk(KERN_WARNING "ata%u: "
+					"Secondary device added\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1125: FILE: drivers/scsi/sata_nv.c:202:
+				printk(KERN_WARNING "ata%u: "

WARNING:SPLIT_STRING: quoted string split across lines
#1126: FILE: drivers/scsi/sata_nv.c:203:
+				printk(KERN_WARNING "ata%u: "
+					"Secondary device removed\n", ap->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1136: FILE: drivers/scsi/sata_nv.c:213:
+static u32 nv_scr_read (struct ata_port *ap, unsigned int sc_reg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1144: FILE: drivers/scsi/sata_nv.c:221:
+static void nv_scr_write (struct ata_port *ap, unsigned int sc_reg, u32 val)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1152: FILE: drivers/scsi/sata_nv.c:229:
+static void nv_host_stop (struct ata_host_set *host_set)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1156: FILE: drivers/scsi/sata_nv.c:233:
+	for (i=0; i<host_set->n_ports; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1156: FILE: drivers/scsi/sata_nv.c:233:
+	for (i=0; i<host_set->n_ports; i++) {
 	           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1168: FILE: drivers/scsi/sata_nv.c:245:
+static int nv_init_one (struct pci_dev *pdev, const struct pci_device_id *ent)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1170: FILE: drivers/scsi/sata_nv.c:247:
+	static int printed_version = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1176: FILE: drivers/scsi/sata_nv.c:253:
+		printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1242: FILE: drivers/scsi/sata_nv.c:319:
+	for (i=0; i<probe_ent->n_ports; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1242: FILE: drivers/scsi/sata_nv.c:319:
+	for (i=0; i<probe_ent->n_ports; i++) {
 	           ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#1458: FILE: include/linux/libata.h:318:
+	void (*qc_prep) (struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1467: FILE: include/linux/libata.h:378:
+extern void ata_qc_prep(struct ata_queued_cmd *qc);

CHECK:SPACING: No space is necessary after a cast
#1480: FILE: include/linux/libata.h:547:
+		void *mmio = (void *) ap->ioaddr.bmdma_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1484: FILE: include/linux/libata.h:551:
+		writeb(readb(mmio + ATA_DMA_CMD) & ~ATA_DMA_START,
+		      mmio + ATA_DMA_CMD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1488: FILE: include/linux/libata.h:555:
+		outb(inb(ap->ioaddr.bmdma_addr + ATA_DMA_CMD) & ~ATA_DMA_START,
+		    ap->ioaddr.bmdma_addr + ATA_DMA_CMD);

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: include/linux/libata.h:565:
+		void *mmio = ((void *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1499: FILE: include/linux/libata.h:566:
+		void *mmio = ((void *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;
+		writeb(readb(mmio), mmio);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1502: FILE: include/linux/libata.h:569:
+		unsigned long addr = ap->ioaddr.bmdma_addr + ATA_DMA_STATUS;
+		outb(inb(addr), addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1509: FILE: include/linux/libata.h:576:
+	u8 host_stat;
+	if (ap->flags & ATA_FLAG_MMIO) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1509: FILE: include/linux/libata.h:576:
+	if (ap->flags & ATA_FLAG_MMIO) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1510: FILE: include/linux/libata.h:577:
+		void *mmio = (void *) ap->ioaddr.bmdma_addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1511: FILE: include/linux/libata.h:578:
+		void *mmio = (void *) ap->ioaddr.bmdma_addr;
+		host_stat = readb(mmio + ATA_DMA_STATUS);

CHECK:BRACES: Unbalanced braces around else statement
#1512: FILE: include/linux/libata.h:579:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 35 warnings, 10 checks, 1262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
