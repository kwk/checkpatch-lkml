WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -urN 2.6.0-test9-orig/arch/i386/kernel/entry.S 2.6.0-test9-patched/arch/i386/kernel/entry.S

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#150: FILE: fs/Kconfig:896:
+config POSIX_MQUEUE_FS
+	bool "POSIX Message Queues"
+	---help---
+	  POSIX variant of message queues is a part of IPC. In POSIX message
+	  queues every message has a priority which decides about succession
+	  of receiving it by a process. If you want to compile and run
+	  programs written e.g. for Solaris with use of its POSIX message
+	  queues (functions mq_*) say Y here. To use this feature you will
+	  also need mqueue library, available from
+	  <http://www.mat.uni.torun.pl/~wrona/posix_ipc/>
+
+	  POSIX message queues are visible as a filesystem called 'mqueue'
+	  and can be mounted somewhere if you want to do filesystem
+	  operations on message queues.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#167: FILE: fs/Kconfig:913:
+config POSIX_MQUEUE_FS_PROC
+	bool "/proc/fs/mqueue support"
+	depends on POSIX_MQUEUE_FS && PROC_FS
+	---help---
+	 Enabling this option will add various files to the /proc/fs/mqueue
+         directory providing the ability to tune the mqueue filesystem, and
+         also query resource usage.
+
+         For more information on the specific tunables, see
+         Documentation/filesystems/proc.txt.
+
+         There is a small amount of overhead to be paid for adding proc
+         support, but other than that it should be safe to enable this option.
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#208: FILE: include/asm-generic/siginfo.h:142:
+#define SI_MESGQ __SI_CODE(__SI_MESGQ,-3) /* sent by real time mesq state change */
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '-' (ctx:OxV)
#208: FILE: include/asm-generic/siginfo.h:142:
+#define SI_MESGQ __SI_CODE(__SI_MESGQ,-3) /* sent by real time mesq state change */
                                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: include/asm-i386/unistd.h:282:
+#define __NR_mq_open ^I^I274$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: include/asm-i386/unistd.h:283:
+#define __NR_mq_unlink		(__NR_mq_open+1)
                       		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#223: FILE: include/asm-i386/unistd.h:284:
+#define __NR_mq_timedsend	(__NR_mq_open+2)
                          	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#224: FILE: include/asm-i386/unistd.h:285:
+#define __NR_mq_timedreceive	(__NR_mq_open+3)
                             	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: include/asm-i386/unistd.h:286:
+#define __NR_mq_notify		(__NR_mq_open+4)
                       		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: include/asm-i386/unistd.h:287:
+#define __NR_mq_getattr		(__NR_mq_open+5)
                        		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#227: FILE: include/asm-i386/unistd.h:288:
+#define __NR_mq_setattr		(__NR_mq_open+6)
                        		             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#237: FILE: include/linux/mqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: include/linux/mqueue.h:10:
+#define MQ_MAXMSG ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: include/linux/mqueue.h:11:
+#define MQ_MSGSIZE ^I16384^I/* max message size */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: include/linux/mqueue.h:13:
+#define MQ_PRIO_MAX ^I32768^I/* max priority */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#251: FILE: include/linux/mqueue.h:15:
+typedef int mqd_t;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#260: FILE: include/linux/mqueue.h:24:
+asmlinkage mqd_t sys_mq_open(const char __user *name, int oflag, mode_t mode, struct mq_attr __user *attr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#262: FILE: include/linux/mqueue.h:26:
+asmlinkage int mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);

WARNING:LONG_LINE: line length of 160 exceeds 100 columns
#263: FILE: include/linux/mqueue.h:27:
+asmlinkage ssize_t mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#266: FILE: include/linux/mqueue.h:30:
+asmlinkage int mq_setattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#281: FILE: ipc/mqueue.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#318: FILE: ipc/mqueue.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#327: FILE: ipc/mqueue.c:47:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#346: FILE: ipc/mqueue.c:66:
+static struct inode_operations mqueue_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#347: FILE: ipc/mqueue.c:67:
+static struct file_operations mqueue_file_operations;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#368: FILE: ipc/mqueue.c:88:
+	if (len <= off + count) *eof = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#371: FILE: ipc/mqueue.c:91:
+	if (len > count) len = count;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#372: FILE: ipc/mqueue.c:92:
+	if (len < 0) len = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: ipc/mqueue.c:100:
+	int len = sprintf(page, "%u\n", max_queues);
+	return proc_calc_metrics(page, start, off, count, eof, len);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#396: FILE: ipc/mqueue.c:116:
+	if (sscanf(tmp, "%u", &m) <= 0)
+		return -EFAULT;

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: ipc/mqueue.c:130:
+	int len = sprintf(page, "%lu\n", max_sys_size);
+	return proc_calc_metrics(page, start, off, count, eof, len);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#426: FILE: ipc/mqueue.c:146:
+	if (sscanf(tmp, "%lu", &m) <= 0)
+		return -EFAULT;

WARNING:LINE_SPACING: Missing a blank line after declarations
#440: FILE: ipc/mqueue.c:160:
+	int len = sprintf(page, "%lu\n", msgs_size);
+	return proc_calc_metrics(page, start, off, count, eof, len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: ipc/mqueue.c:165:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#463: FILE: ipc/mqueue.c:183:
+		inode->i_mtime = inode->i_ctime = inode->i_atime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->lock
#470: FILE: ipc/mqueue.c:190:
+			spin_lock_init(&(ino_extra->lock));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[0]
#471: FILE: ipc/mqueue.c:191:
+			init_waitqueue_head((&(ino_extra->wait_q[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[1]
#472: FILE: ipc/mqueue.c:192:
+			init_waitqueue_head((&(ino_extra->wait_q[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[0]
#473: FILE: ipc/mqueue.c:193:
+			init_waitqueue_head((&(ino_extra->wait_q2[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[1]
#474: FILE: ipc/mqueue.c:194:
+			init_waitqueue_head((&(ino_extra->wait_q2[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[0].list
#475: FILE: ipc/mqueue.c:195:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[0].list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[1].list
#476: FILE: ipc/mqueue.c:196:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[1].list));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#497: FILE: ipc/mqueue.c:217:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#507: FILE: ipc/mqueue.c:227:
+	inode = mqueue_get_inode(sb, S_IFDIR | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#513: FILE: ipc/mqueue.c:233:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#527: FILE: ipc/mqueue.c:247:
+static void init_once(void *foo, kmem_cache_t * cachep, unsigned long flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#529: FILE: ipc/mqueue.c:249:
+	struct mqueue_inode_info *p = (struct mqueue_inode_info *) foo;

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: ipc/mqueue.c:300:
+	struct inode *inode = dent->d_inode;
+	dir->i_ctime = dir->i_mtime = dir->i_atime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#580: FILE: ipc/mqueue.c:300:
+	dir->i_ctime = dir->i_mtime = dir->i_atime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#587: FILE: ipc/mqueue.c:307:
+static struct dentry *mqueue_lookup(struct inode * dir, struct dentry *dentry, struct nameidata *nd)
                                                                                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: ipc/mqueue.c:307:
+static struct dentry *mqueue_lookup(struct inode * dir, struct dentry *dentry, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#596: FILE: ipc/mqueue.c:316:
+static int mqueue_create(struct inode *dir, struct dentry *dent, int mode, struct nameidata *nd)
                                                                                              ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#618: FILE: ipc/mqueue.c:338:
+	dir->i_ctime = dir->i_mtime = dir->i_atime = CURRENT_TIME;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#629: FILE: ipc/mqueue.c:349:
+/*
+*	This is routine for system read from queue file.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#635: FILE: ipc/mqueue.c:355:
+static ssize_t mqueue_read_file(struct file *filp, char __user *data,
                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: ipc/mqueue.c:356:
+				size_t count, loff_t * off)

CHECK:SPACING: No space is necessary after a cast
#644: FILE: ipc/mqueue.c:364:
+	if ((ssize_t) count < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: ipc/mqueue.c:377:
+	snprintf(buffer, FILENT_SIZE + 1,
+		"QSIZE:%-10u NOTIFY:%-5d SIGNO:%-5d NOTIFY_PID:%-6d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: ipc/mqueue.c:378:
+^I ^Iinfo->qsize, info->notify.sigev_notify,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: ipc/mqueue.c:378:
+^I ^Iinfo->qsize, info->notify.sigev_notify,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: ipc/mqueue.c:379:
+^I ^Iinfo->notify.sigev_signo, info->notify_owner);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: ipc/mqueue.c:379:
+^I ^Iinfo->notify.sigev_signo, info->notify_owner);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#667: FILE: ipc/mqueue.c:387:
+	filp->f_dentry->d_inode->i_atime = filp->f_dentry->d_inode->i_ctime = CURRENT_TIME;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#672: FILE: ipc/mqueue.c:392:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#673: FILE: ipc/mqueue.c:393:
+static int mqueue_release_file(struct inode *ino, struct file *filp)
                                                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#685: FILE: ipc/mqueue.c:405:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#686: FILE: ipc/mqueue.c:406:
+static unsigned int mqueue_poll_file(struct file *filp, struct poll_table_struct *poll_tab)
                                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#691: FILE: ipc/mqueue.c:411:
+	poll_wait(filp, &info->wait_q[0], poll_tab);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#692: FILE: ipc/mqueue.c:412:
+	poll_wait(filp, &info->wait_q[1], poll_tab);
 	          ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#706: FILE: ipc/mqueue.c:426:
+/*
+*  This cut&paste version of wait_event() without event checking & with

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#709: FILE: ipc/mqueue.c:429:
+void inline wait_exclusive(wait_queue_head_t * wq,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#709: FILE: ipc/mqueue.c:429:
+void inline wait_exclusive(wait_queue_head_t * wq,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#713: FILE: ipc/mqueue.c:433:
+	wait_queue_t wait;
+	init_waitqueue_entry(&wait, current);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#731: FILE: ipc/mqueue.c:451:
+	if (!list_empty(&(info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#732: FILE: ipc/mqueue.c:452:
+		list_for_each_entry(ptr, &(info->e_wait_q[sr].list), list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ptr->list
#734: FILE: ipc/mqueue.c:454:
+				list_del(&(ptr->list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: ipc/mqueue.c:463:
+static inline void wq_add(struct mqueue_inode_info *info, int sr,
+			struct ext_wait_queue *tmp)

CHECK:BRACES: braces {} should be used on all arms of this statement
#749: FILE: ipc/mqueue.c:469:
+	if (list_empty(&info->e_wait_q[sr].list))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#751: FILE: ipc/mqueue.c:471:
+	else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#762: FILE: ipc/mqueue.c:482:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#766: FILE: ipc/mqueue.c:486:
+ * before-first (last) (meaning first in order as our 'queue' is inversed) */

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#769: FILE: ipc/mqueue.c:489:
+	struct ext_wait_queue *tmp = list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#770: FILE: ipc/mqueue.c:490:
+	struct ext_wait_queue *tmp = list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list);
+	list_del(&(tmp->list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tmp->list
#770: FILE: ipc/mqueue.c:490:
+	list_del(&(tmp->list));

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#790: FILE: ipc/mqueue.c:510:
+		if ((current->pid == (list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list))->task->pid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#791: FILE: ipc/mqueue.c:511:
+		if ((current->pid == (list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list))->task->pid)
+			&& ((info->attr.mq_curmsgs > 0 && sr == RECV)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#792: FILE: ipc/mqueue.c:512:
+			&& ((info->attr.mq_curmsgs > 0 && sr == RECV)
+			|| (info->attr.mq_curmsgs < info->attr.mq_maxmsg && sr == SEND)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!error'
#805: FILE: ipc/mqueue.c:525:
+		if ((!error) && (!signal_pending(current))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#827: FILE: ipc/mqueue.c:547:
+		if ((info->attr.mq_curmsgs < info->attr.mq_maxmsg - 1)
+		    && (!list_empty(&info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#828: FILE: ipc/mqueue.c:548:
+			wait_exclusive(&(info->wait_q2[sr]), info);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->attr.mq_curmsgs > 1'
#831: FILE: ipc/mqueue.c:551:
+		if ((info->attr.mq_curmsgs > 1) && (!list_empty(&info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#832: FILE: ipc/mqueue.c:552:
+			wait_exclusive(&(info->wait_q2[sr]), info);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#836: FILE: ipc/mqueue.c:556:
+		wake_up_process((list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list))->task);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#838: FILE: ipc/mqueue.c:558:
+	wake_up_interruptible(&(info->wait_q[sr]));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#841: FILE: ipc/mqueue.c:561:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#847: FILE: ipc/mqueue.c:567:
+	k = (info->attr.mq_curmsgs)-1;
 	                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#872: FILE: ipc/mqueue.c:592:
+	 * empty to not empty */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->notify.sigev_notify != SIGEV_NONE'
#873: FILE: ipc/mqueue.c:593:
+	if ((info->notify.sigev_notify != SIGEV_NONE) && list_empty(&info->e_wait_q[RECV].list)
+	    && info->attr.mq_curmsgs == 1) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#874: FILE: ipc/mqueue.c:594:
+	if ((info->notify.sigev_notify != SIGEV_NONE) && list_empty(&info->e_wait_q[RECV].list)
+	    && info->attr.mq_curmsgs == 1) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#875: FILE: ipc/mqueue.c:595:
+	    && info->attr.mq_curmsgs == 1) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->tgid == info->notify_owner'
#892: FILE: ipc/mqueue.c:612:
+			if (p && (p->tgid == info->notify_owner))

CHECK:BRACES: braces {} should be used on all arms of this statement
#909: FILE: ipc/mqueue.c:629:
+	if (arg) {
[...]
+	} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#914: FILE: ipc/mqueue.c:634:
+		if (ts.tv_nsec < 0 || ts.tv_sec < 0
+			|| ts.tv_nsec >= NSEC_PER_SEC)

CHECK:BRACES: Unbalanced braces around else statement
#928: FILE: ipc/mqueue.c:648:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#934: FILE: ipc/mqueue.c:654:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->tgid == info->notify_owner'
#952: FILE: ipc/mqueue.c:672:
+		if (p && (p->tgid == info->notify_owner))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: ipc/mqueue.c:686:
+static struct file *do_create(struct dentry *dir, struct dentry *dentry,
+	     int oflag, mode_t mode, struct mq_attr __user *u_attr)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#968: FILE: ipc/mqueue.c:688:
+	struct file *filp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#974: FILE: ipc/mqueue.c:694:
+	if (u_attr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#979: FILE: ipc/mqueue.c:699:
+		if (attr.mq_maxmsg <= 0 || attr.mq_msgsize <= 0
+		    || attr.mq_maxmsg > MQ_MAXMSG || attr.mq_msgsize > MQ_MSGSIZE)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#989: FILE: ipc/mqueue.c:709:
+	if (u_attr != NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#994: FILE: ipc/mqueue.c:714:
+	filp = dentry_open(dentry, mqueue_mnt, oflag);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#995: FILE: ipc/mqueue.c:715:
+	if (!IS_ERR(filp))
 	            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#998: FILE: ipc/mqueue.c:718:
+	return filp;
 	       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1004: FILE: ipc/mqueue.c:724:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1010: FILE: ipc/mqueue.c:730:
+	filp = dentry_open(dentry, mqueue_mnt, oflag);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1012: FILE: ipc/mqueue.c:732:
+	if (!IS_ERR(filp))
 	            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1015: FILE: ipc/mqueue.c:735:
+	return filp;
 	       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1019: FILE: ipc/mqueue.c:739:
+asmlinkage mqd_t sys_mq_open(const char __user *u_name, int oflag, mode_t mode,
+	struct mq_attr __user *attr)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1022: FILE: ipc/mqueue.c:742:
+	struct file *filp;
 	             ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1026: FILE: ipc/mqueue.c:746:
+	if (IS_ERR(name = getname(u_name)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1041: FILE: ipc/mqueue.c:761:
+	if (oflag & O_CREAT) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1043: FILE: ipc/mqueue.c:763:
+			filp = (oflag & O_EXCL) ? ERR_PTR(-EEXIST) : do_open(dentry, oflag);
 			^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1045: FILE: ipc/mqueue.c:765:
+			filp = do_create(mqueue_mnt->mnt_root, dentry, oflag, mode, attr);
 			^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1047: FILE: ipc/mqueue.c:767:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1048: FILE: ipc/mqueue.c:768:
+		filp = (dentry->d_inode) ? do_open(dentry, oflag) : ERR_PTR(-ENOENT);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1052: FILE: ipc/mqueue.c:772:
+	if (IS_ERR(filp)) {
 	           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1053: FILE: ipc/mqueue.c:773:
+		error = PTR_ERR(filp);
 		                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1057: FILE: ipc/mqueue.c:777:
+	fd_install(fd, filp);
 	               ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1072: FILE: ipc/mqueue.c:792:
+
+

ERROR:SPACING: space required before the open brace '{'
#1086: FILE: ipc/mqueue.c:806:
+	if (IS_ERR(dentry)){

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1090: FILE: ipc/mqueue.c:810:
+	if (permission(dentry->d_inode, MAY_WRITE, NULL))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1107: FILE: ipc/mqueue.c:827:
+		iput(ino);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1112: FILE: ipc/mqueue.c:832:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1114: FILE: ipc/mqueue.c:834:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char __user *u_msg_ptr,
+	size_t msg_len, unsigned int msg_prio, const struct timespec __user *u_abs_timeout)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1116: FILE: ipc/mqueue.c:836:
+	struct file *filp;
 	             ^^^^

CHECK:SPACING: No space is necessary after a cast
#1124: FILE: ipc/mqueue.c:844:
+	if (msg_prio >= (unsigned long) MQ_PRIO_MAX)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1127: FILE: ipc/mqueue.c:847:
+	if ((timeout = prepare_timeout(u_abs_timeout)) < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1131: FILE: ipc/mqueue.c:851:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1132: FILE: ipc/mqueue.c:852:
+	if (!filp)
 	     ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1144: FILE: ipc/mqueue.c:864:
+	 * existing queues */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1152: FILE: ipc/mqueue.c:872:
+	 * because of spinlock. kfree is called in wq_remove(_last) */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wq_ptr)...) over kmalloc(sizeof(struct ext_wait_queue)...)
#1153: FILE: ipc/mqueue.c:873:
+	wq_ptr = kmalloc(sizeof(struct ext_wait_queue), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wq_ptr"
#1154: FILE: ipc/mqueue.c:874:
+	if (wq_ptr == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->attr.mq_curmsgs == info->attr.mq_maxmsg'
#1161: FILE: ipc/mqueue.c:881:
+	if ((filp->f_flags & O_NONBLOCK) && (info->attr.mq_curmsgs == info->attr.mq_maxmsg)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1172: FILE: ipc/mqueue.c:892:
+	 * set then. mq_receive wakes up only 1 process */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1173: FILE: ipc/mqueue.c:893:
+	if (info->attr.mq_curmsgs == info->attr.mq_maxmsg) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1177: FILE: ipc/mqueue.c:897:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1197: FILE: ipc/mqueue.c:917:
+	ino->i_atime = ino->i_mtime = ino->i_ctime = CURRENT_TIME;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[SEND]
#1202: FILE: ipc/mqueue.c:922:
+	wake_up(&(info->wait_q2[SEND]));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1222: FILE: ipc/mqueue.c:942:
+	fput(filp);
 	     ^^^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1228: FILE: ipc/mqueue.c:948:
+	size_t msg_len, unsigned int __user *u_msg_prio, const struct timespec __user *u_abs_timeout)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1228: FILE: ipc/mqueue.c:948:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char __user *u_msg_ptr,
+	size_t msg_len, unsigned int __user *u_msg_prio, const struct timespec __user *u_abs_timeout)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1233: FILE: ipc/mqueue.c:953:
+	struct file *filp;
 	             ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1238: FILE: ipc/mqueue.c:958:
+	if ((timeout = prepare_timeout(u_abs_timeout)) < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1242: FILE: ipc/mqueue.c:962:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1243: FILE: ipc/mqueue.c:963:
+	if (!filp)
 	     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1254: FILE: ipc/mqueue.c:974:
+        /* The same as in send */$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wq_ptr)...) over kmalloc(sizeof(struct ext_wait_queue)...)
#1255: FILE: ipc/mqueue.c:975:
+	wq_ptr = kmalloc(sizeof(struct ext_wait_queue), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wq_ptr"
#1256: FILE: ipc/mqueue.c:976:
+	if (wq_ptr == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->attr.mq_curmsgs == 0'
#1264: FILE: ipc/mqueue.c:984:
+	if ((filp->f_flags & O_NONBLOCK) && (info->attr.mq_curmsgs == 0)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1276: FILE: ipc/mqueue.c:996:
+	 * we must wait */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1277: FILE: ipc/mqueue.c:997:
+	if (info->attr.mq_curmsgs == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1281: FILE: ipc/mqueue.c:1001:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1292: FILE: ipc/mqueue.c:1012:
+	ino->i_atime = ino->i_mtime = ino->i_ctime = CURRENT_TIME;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[RECV]
#1295: FILE: ipc/mqueue.c:1015:
+	wake_up(&(info->wait_q2[RECV]));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1306: FILE: ipc/mqueue.c:1026:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: ipc/mqueue.c:1026:
+        }$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1318: FILE: ipc/mqueue.c:1038:
+	fput(filp);
 	     ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1323: FILE: ipc/mqueue.c:1043:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1331: FILE: ipc/mqueue.c:1051:
+	struct file *filp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1336: FILE: ipc/mqueue.c:1056:
+	if (u_notification != NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1347: FILE: ipc/mqueue.c:1067:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1348: FILE: ipc/mqueue.c:1068:
+	if (!filp)
 	     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#1359: FILE: ipc/mqueue.c:1079:
+	if (u_notification == NULL || notification.sigev_notify == SIGEV_NONE) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1370: FILE: ipc/mqueue.c:1090:
+	if (notification.sigev_signo < 0 || notification.sigev_signo > _NSIG)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1372: FILE: ipc/mqueue.c:1092:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1380: FILE: ipc/mqueue.c:1100:
+	ino->i_atime = ino->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1383: FILE: ipc/mqueue.c:1103:
+	fput(filp);
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1392: FILE: ipc/mqueue.c:1112:
+	struct file *filp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_mqstat"
#1396: FILE: ipc/mqueue.c:1116:
+	if (u_mqstat == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1400: FILE: ipc/mqueue.c:1120:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1401: FILE: ipc/mqueue.c:1121:
+	if (!filp)
 	     ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1412: FILE: ipc/mqueue.c:1132:
+	ino->i_atime = ino->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1421: FILE: ipc/mqueue.c:1141:
+	fput(filp);
 	     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1427: FILE: ipc/mqueue.c:1147:
+asmlinkage int sys_mq_setattr(mqd_t mqdes, const struct mq_attr __user *u_mqstat,
+	struct mq_attr __user *u_omqstat)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1431: FILE: ipc/mqueue.c:1151:
+	struct file *filp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_mqstat"
#1435: FILE: ipc/mqueue.c:1155:
+	if (u_mqstat == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1438: FILE: ipc/mqueue.c:1158:
+	if (copy_from_user(&mqstat, u_mqstat, sizeof (struct mq_attr)))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1442: FILE: ipc/mqueue.c:1162:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1443: FILE: ipc/mqueue.c:1163:
+	if (!filp)
 	     ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1461: FILE: ipc/mqueue.c:1181:
+	ino->i_atime = ino->i_ctime = CURRENT_TIME;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_omqstat"
#1466: FILE: ipc/mqueue.c:1186:
+	if (u_omqstat != NULL && copy_to_user(u_omqstat, &omqstat, sizeof(struct mq_attr)))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1470: FILE: ipc/mqueue.c:1190:
+	fput(filp);
 	     ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1475: FILE: ipc/mqueue.c:1195:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1476: FILE: ipc/mqueue.c:1196:
+static struct inode_operations mqueue_dir_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1482: FILE: ipc/mqueue.c:1202:
+static struct file_operations mqueue_file_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1502: FILE: ipc/mqueue.c:1222:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1508: FILE: ipc/mqueue.c:1228:
+	mqueue_inode_cachep = kmem_cache_create("mqueue_inode_cache",
+		sizeof(struct mqueue_inode_info), 0, SLAB_HWCACHE_ALIGN, init_once, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mqueue_inode_cachep"
#1510: FILE: ipc/mqueue.c:1230:
+	if (mqueue_inode_cachep == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1517: FILE: ipc/mqueue.c:1237:
+	if (IS_ERR(mqueue_mnt = kern_mount(&mqueue_fs_type))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1530: FILE: ipc/mqueue.c:1250:
+	if (!(proc_fs_mqueue = proc_mkdir("mqueue", proc_root_fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1533: FILE: ipc/mqueue.c:1253:
+	if (!(max_queues_file = create_proc_entry("max_queues", 0644, proc_fs_mqueue)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1538: FILE: ipc/mqueue.c:1258:
+	if (!(max_sys_size_file = create_proc_entry("max_sys_size", 0644, proc_fs_mqueue)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#1543: FILE: ipc/mqueue.c:1263:
+	if ( !(msgs_size_file = create_proc_read_entry("msgs_size", 0444,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1543: FILE: ipc/mqueue.c:1263:
+	if ( !(msgs_size_file = create_proc_read_entry("msgs_size", 0444,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1544: FILE: ipc/mqueue.c:1264:
+	if ( !(msgs_size_file = create_proc_read_entry("msgs_size", 0444,
+				proc_fs_mqueue, proc_read_msgs_size, NULL)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1563: FILE: ipc/mqueue.c:1283:
+		printk(KERN_INFO "mqueue_inode_cache: not all structures were freed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1571: FILE: ipc/mqueue.c:1291:
+		printk(KERN_INFO "mqueue_inode_cache: not all structures were freed\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1581: FILE: ipc/mqueue.c:1301:
+__initcall(init_mqueue_fs);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1730: FILE: ipc/util.c:620:
+void free_msg(struct msg_msg* msg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1732: FILE: ipc/util.c:622:
+	struct msg_msgseg* seg;

ERROR:SPACING: space required before the open parenthesis '('
#1738: FILE: ipc/util.c:628:
+	while(seg != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "seg"
#1738: FILE: ipc/util.c:628:
+	while(seg != NULL) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1739: FILE: ipc/util.c:629:
+		struct msg_msgseg* tmp = seg->next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1740: FILE: ipc/util.c:630:
+		struct msg_msgseg* tmp = seg->next;
+		kfree(seg);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1745: FILE: ipc/util.c:635:
+struct msg_msg* load_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1745: FILE: ipc/util.c:635:
+struct msg_msg* load_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1747: FILE: ipc/util.c:637:
+	struct msg_msg* msg;

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1748: FILE: ipc/util.c:638:
+	struct msg_msgseg** pseg;

ERROR:SPACING: space required before the open parenthesis '('
#1753: FILE: ipc/util.c:643:
+	if(alen > DATALEN_MSG)

CHECK:SPACING: No space is necessary after a cast
#1756: FILE: ipc/util.c:646:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1756: FILE: ipc/util.c:646:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1756: FILE: ipc/util.c:646:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1757: FILE: ipc/util.c:647:
+	if(msg==NULL)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#1757: FILE: ipc/util.c:647:
+	if(msg==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1757: FILE: ipc/util.c:647:
+	if(msg==NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1763: FILE: ipc/util.c:653:
+	if (copy_from_user(msg+1, src, alen)) {
 	                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1769: FILE: ipc/util.c:659:
+	src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1769: FILE: ipc/util.c:659:
+	src = ((char*)src)+alen;
 	                  ^

ERROR:SPACING: space required before the open parenthesis '('
#1771: FILE: ipc/util.c:661:
+	while(len > 0) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1772: FILE: ipc/util.c:662:
+		struct msg_msgseg* seg;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1773: FILE: ipc/util.c:663:
+		struct msg_msgseg* seg;
+		alen = len;

ERROR:SPACING: space required before the open parenthesis '('
#1774: FILE: ipc/util.c:664:
+		if(alen > DATALEN_SEG)

CHECK:SPACING: No space is necessary after a cast
#1776: FILE: ipc/util.c:666:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1776: FILE: ipc/util.c:666:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1776: FILE: ipc/util.c:666:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1777: FILE: ipc/util.c:667:
+		if(seg==NULL) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#1777: FILE: ipc/util.c:667:
+		if(seg==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#1777: FILE: ipc/util.c:667:
+		if(seg==NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#1778: FILE: ipc/util.c:668:
+			err=-ENOMEM;
 			   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1778: FILE: ipc/util.c:668:
+			err=-ENOMEM;
 			    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1783: FILE: ipc/util.c:673:
+		if(copy_from_user (seg+1, src, alen)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1783: FILE: ipc/util.c:673:
+		if(copy_from_user (seg+1, src, alen)) {
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1783: FILE: ipc/util.c:673:
+		if(copy_from_user (seg+1, src, alen)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1789: FILE: ipc/util.c:679:
+		src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1789: FILE: ipc/util.c:679:
+		src = ((char*)src)+alen;
 		                  ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1803: FILE: ipc/util.c:693:
+int store_msg(void* dest, struct msg_msg* msg, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1803: FILE: ipc/util.c:693:
+int store_msg(void* dest, struct msg_msg* msg, int len)

ERROR:SPACING: space required before the open parenthesis '('
#1809: FILE: ipc/util.c:699:
+	if(alen > DATALEN_MSG)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1811: FILE: ipc/util.c:701:
+	if(copy_to_user (dest, msg+1, alen))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1811: FILE: ipc/util.c:701:
+	if(copy_to_user (dest, msg+1, alen))
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#1811: FILE: ipc/util.c:701:
+	if(copy_to_user (dest, msg+1, alen))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1815: FILE: ipc/util.c:705:
+	dest = ((char*)dest)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1815: FILE: ipc/util.c:705:
+	dest = ((char*)dest)+alen;
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#1817: FILE: ipc/util.c:707:
+	while(len > 0) {

ERROR:SPACING: space required before the open parenthesis '('
#1819: FILE: ipc/util.c:709:
+		if(alen > DATALEN_SEG)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1821: FILE: ipc/util.c:711:
+		if(copy_to_user (dest, seg+1, alen))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1821: FILE: ipc/util.c:711:
+		if(copy_to_user (dest, seg+1, alen))
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#1821: FILE: ipc/util.c:711:
+		if(copy_to_user (dest, seg+1, alen))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1824: FILE: ipc/util.c:714:
+		dest = ((char*)dest)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1824: FILE: ipc/util.c:714:
+		dest = ((char*)dest)+alen;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1825: FILE: ipc/util.c:715:
+		seg=seg->next;
 		   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1839: FILE: ipc/util.c:729:
+asmlinkage mqd_t sys_mq_open(const char *name, int oflag, mode_t mode,
+	struct mq_attr *attr)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1841: FILE: ipc/util.c:731:
+	return (mqd_t)-ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1846: FILE: ipc/util.c:736:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1850: FILE: ipc/util.c:740:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr,
+	size_t msg_len, unsigned int msg_prio, const struct timespec *abs_timeout)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1852: FILE: ipc/util.c:742:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1856: FILE: ipc/util.c:746:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr,
+	size_t msg_len, unsigned int *msg_prio, const struct timespec *abs_timeout)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1858: FILE: ipc/util.c:748:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1863: FILE: ipc/util.c:753:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1868: FILE: ipc/util.c:758:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1872: FILE: ipc/util.c:762:
+asmlinkage int sys_mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat,
+	struct mq_attr *omqstat)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1874: FILE: ipc/util.c:764:
+	return -ENOSYS;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1886: FILE: ipc/util.h:29:
+	struct msg_msgseg* next;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1890: FILE: ipc/util.h:33:
+void free_msg(struct msg_msg* msg);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1891: FILE: ipc/util.h:34:
+struct msg_msg* load_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1891: FILE: ipc/util.h:34:
+struct msg_msg* load_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1892: FILE: ipc/util.h:35:
+int store_msg(void* dest, struct msg_msg* msg, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1892: FILE: ipc/util.h:35:
+int store_msg(void* dest, struct msg_msg* msg, int len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1894: FILE: ipc/util.h:37:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324323.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 62 errors, 107 warnings, 113 checks, 1796 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324323.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
