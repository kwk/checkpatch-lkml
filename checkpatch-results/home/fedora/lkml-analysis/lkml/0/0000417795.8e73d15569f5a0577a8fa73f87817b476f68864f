WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
Content-Disposition: attachment; filename=03-numa_sched_ilbMH-2.5.43-20.patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#68: FILE: fs/exec.c:1002:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/sched.h:171:
+extern void sched_balance_exec(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/sched.h:172:
+extern void node_nr_running_init(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#84: FILE: include/linux/sched.h:173:
+#define nr_running_inc(rq) atomic_inc(rq->node_ptr); \
+	rq->nr_running++

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#84: FILE: include/linux/sched.h:173:
+#define nr_running_inc(rq) atomic_inc(rq->node_ptr); \
+	rq->nr_running++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#84: FILE: include/linux/sched.h:173:
+#define nr_running_inc(rq) atomic_inc(rq->node_ptr); \
+	rq->nr_running++

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#86: FILE: include/linux/sched.h:175:
+#define nr_running_dec(rq) atomic_dec(rq->node_ptr); \
+	rq->nr_running--

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#86: FILE: include/linux/sched.h:175:
+#define nr_running_dec(rq) atomic_dec(rq->node_ptr); \
+	rq->nr_running--

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#86: FILE: include/linux/sched.h:175:
+#define nr_running_dec(rq) atomic_dec(rq->node_ptr); \
+	rq->nr_running--

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#91: FILE: include/linux/sched.h:180:
+#define nr_running_inc(rq) rq->nr_running++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#91: FILE: include/linux/sched.h:180:
+#define nr_running_inc(rq) rq->nr_running++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#92: FILE: include/linux/sched.h:181:
+#define nr_running_dec(rq) rq->nr_running--

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#92: FILE: include/linux/sched.h:181:
+#define nr_running_dec(rq) rq->nr_running--

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: kernel/sched.c:156:
+	atomic_t * node_ptr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#155: FILE: kernel/sched.c:2231:
+static atomic_t node_nr_running[MAX_NUMNODES] ____cacheline_maxaligned_in_=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#162: FILE: kernel/sched.c:2237:
+	for (i =3D 0; i < NR_CPUS; i++) {
 	       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#162: FILE: kernel/sched.c:2237:
+	for (i =3D 0; i < NR_CPUS; i++) {
+		cpu_rq(i)->node_ptr =3D &node_nr_running[__cpu_to_node(i)];
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#162: FILE: kernel/sched.c:2237:
+	for (i =3D 0; i < NR_CPUS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#163: FILE: kernel/sched.c:2238:
+		cpu_rq(i)->node_ptr =3D &node_nr_running[__cpu_to_node(i)];
 		                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#163: FILE: kernel/sched.c:2238:
+		cpu_rq(i)->node_ptr =3D &node_nr_running[__cpu_to_node(i)];
 		                        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#166: FILE: kernel/sched.c:2241:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#178: FILE: kernel/sched.c:2253:
+	old_mask =3D p->cpus_allowed;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#194: FILE: kernel/sched.c:2269:
+	int i, minload, load, best_cpu, node =3D 0;
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#196: FILE: kernel/sched.c:2271:
+	best_cpu =3D task_cpu(p);
 	         ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#197: FILE: kernel/sched.c:2272:
+	if (cpu_rq(best_cpu)->nr_running <=3D 2)
 	                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#200: FILE: kernel/sched.c:2275:
+	minload =3D 10000000;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#201: FILE: kernel/sched.c:2276:
+	for (i =3D 0; i < numnodes; i++) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#202: FILE: kernel/sched.c:2277:
+		load =3D atomic_read(&node_nr_running[i]);
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#204: FILE: kernel/sched.c:2279:
+			minload =3D load;
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#205: FILE: kernel/sched.c:2280:
+			node =3D i;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#208: FILE: kernel/sched.c:2283:
+	minload =3D 10000000;
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#209: FILE: kernel/sched.c:2284:
+	loop_over_node(i,node) {
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#213: FILE: kernel/sched.c:2288:
+			best_cpu =3D i;
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#214: FILE: kernel/sched.c:2289:
+			minload =3D cpu_rq(i)->nr_running;
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#225: FILE: kernel/sched.c:2300:
+		new_cpu =3D sched_best_cpu(current);
 		        ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#226: FILE: kernel/sched.c:2301:
+		if (new_cpu !=3D smp_processor_id())
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#240: FILE: kernel/sched.c:2338:
+		rq->node_ptr =3D &node_nr_running[0];
 		             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#240: FILE: kernel/sched.c:2338:
+		rq->node_ptr =3D &node_nr_running[0];
 		                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417795.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 4 warnings, 10 checks, 170 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417795.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
