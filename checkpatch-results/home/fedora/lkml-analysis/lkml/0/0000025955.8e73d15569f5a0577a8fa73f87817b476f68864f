WARNING:TYPO_SPELLING: 'knowlege' may be misspelled - perhaps 'knowledge'?
#31: 
This patch removes all cpuset-specific knowlege from the container
                                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: include/linux/container.h:99:
+	void (*attach)(struct container_subsys *ss, struct container *cont,
+			struct container *old_cont, struct task_struct *tsk);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: include/linux/container.h:112:
+	 * set to a default value before registration */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: include/linux/container.h:116:
+	 * be accessed by subsystems. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: include/linux/container.h:122:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#152: FILE: kernel/container.c:73:
+static int subsys_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: kernel/container.c:535:
+		struct container_subsys *ss = subsys[s];
+		if (ss->enabled && ss->can_attach) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: kernel/container.c:560:
+		struct container_subsys *ss = subsys[s];
+		if (ss->enabled && ss->attach) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#196: FILE: kernel/container.c:560:
+		if (ss->enabled && ss->attach) {
+			ss->attach(ss, cont, oldcont, tsk);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: kernel/container.c:569:
+		struct container_subsys *ss = subsys[s];
+		if (ss->enabled && ss->post_attach) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#208: FILE: kernel/container.c:569:
+		if (ss->enabled && ss->post_attach) {
+			ss->post_attach(ss, cont, oldcont, tsk);
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: kernel/container.c:646:
+		struct container_subsys *ss;
+		if (number_of_containers != 1) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#235: FILE: kernel/container.c:652:
+		ss->enabled = simple_strtoul(buffer, NULL, 10) != 0;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#285: FILE: kernel/container.c:1091:
+		if (cont == &top_container &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#289: FILE: kernel/container.c:1095:
+		 * subsystems live in subdirs */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont == &top_container'
#290: FILE: kernel/container.c:1096:
+		if (ss->enabled || (cont == &top_container)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#291: FILE: kernel/container.c:1097:
+			if (ss->populate && (err = ss->populate(ss, cont)) < 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: kernel/container.c:1135:
+		struct container_subsys *ss = subsys[s];
+		if (ss->enabled) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: kernel/container.c:1174:
+		struct container_subsys *ss = subsys[s];
+		if (ss->enabled)

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: kernel/container.c:1239:
+                struct container_subsys *ss = subsys[s];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: kernel/container.c:1239:
+                struct container_subsys *ss = subsys[s];$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#378: FILE: kernel/container.c:1297:
+int container_register_subsys(struct container_subsys *new_subsys) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: kernel/container.c:1300:
+	int i;
+	mutex_lock(&manage_mutex);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#419: FILE: kernel/container.c:1338:
+	 * container_init() */

ERROR:SPACING: space required after that ',' (ctx:VxO)
#559: FILE: kernel/cpuset.c:538:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#559: FILE: kernel/cpuset.c:538:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: kernel/cpuset.c:827:
+                      struct container *cont, struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: kernel/cpuset.c:827:
+                      struct container *cont, struct task_struct *tsk)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: kernel/cpuset.c:838:
+                   struct container *old_cont, struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: kernel/cpuset.c:838:
+                   struct container *old_cont, struct task_struct *tsk)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 18 warnings, 3 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
