WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#28: 
From: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
Implementation wise I use something based on Rik van Riel's nonresident code

WARNING:TYPO_SPELLING: 'aproximates' may be misspelled - perhaps 'approximates'?
#57: 
which actually aproximates a clock with reduced order.
               ^^^^^^^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#114: FILE: include/linux/mmzone.h:143:
+	spinlock_t		lru_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: include/linux/mmzone.h:147:
+^Iunsigned long ^I^Inr_cold_target;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: mm/clockpro.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#130: FILE: mm/clockpro.c:2:
+ * mm/clockpro.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#132: FILE: mm/clockpro.c:4:
+ * Written by Peter Zijlstra <a.p.zijlstra@chello.nl>
                                            ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: mm/clockpro.c:114:
+	LIST_HEAD(tmp);
+	list_splice_init(&zone->list_hand[0], &tmp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: mm/clockpro.c:180:
+		BUG_ON(PageTest(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#310: FILE: mm/clockpro.c:182:
+		if (rflags & NR_found) {
+			SetPageTest(page);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: mm/clockpro.c:191:
+	BUG_ON(!PageLRU(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#337: FILE: mm/clockpro.c:209:
+static int isolate_lru_pages(struct zone * zone, int nr_to_scan,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: mm/clockpro.c:223:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: mm/clockpro.c:260:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: mm/clockpro.c:318:
+		BUG_ON(test);

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: mm/clockpro.c:359:
+		struct page *page = lru_to_page(page_list);
+		prefetchw_prev_lru_page(page, page_list, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: mm/clockpro.c:378:
+		int rm = reclaim_mapped(zone);
+		for (i = 0; zone->nr_cold < zone->nr_cold_target && i < nr; ++i)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#531: FILE: mm/clockpro.c:403:
+#if 0

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#533: FILE: mm/clockpro.c:405:
+	static unsigned long total = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: mm/clockpro.c:409:
+		struct zone *z;
+		total = 0;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#540: FILE: mm/clockpro.c:412:
+		next_check = jiffies + HZ/10;
 		                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: mm/clockpro.c:420:
+	struct zone *z;
+	for_each_zone(z)

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: mm/clockpro.c:516:
+		struct page *page = lru_to_page(&l_hold);
+		prefetchw_prev_lru_page(page, &l_hold, flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: mm/clockpro.c:519:
+			BUG_ON(PageTest(page));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#657: FILE: mm/clockpro.c:529:
+			if (/*(((reclaim_mapped && mapped) || !mapped) ||
+			     (total_swap_pages == 0 && PageAnon(page))) && */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#657: FILE: mm/clockpro.c:529:
+			     (total_swap_pages == 0 && PageAnon(page))) && */

WARNING:LINE_SPACING: Missing a blank line after declarations
#676: FILE: mm/clockpro.c:548:
+		struct page *page = lru_to_page(&l_tmp);
+		prefetchw_prev_lru_page(page, &l_tmp, flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#717: FILE: include/linux/mm_page_replace.h:50:
+void page_replace_activate(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#719: FILE: include/linux/mm_page_replace.h:52:
+void page_replace_remember(struct zone *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#719: FILE: include/linux/mm_page_replace.h:52:
+void page_replace_remember(struct zone *, struct page *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#721: FILE: include/linux/mm_page_replace.h:54:
 
+

WARNING:SPLIT_STRING: quoted string split across lines
#864: FILE: mm/page_alloc.c:1390:
 			" high:%lukB"
+			" resident:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#865: FILE: mm/page_alloc.c:1391:
+			" resident:%lukB"
+			" cold:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#886: FILE: mm/page_alloc.c:2159:
 			   "\n        high     %lu"
+			   "\n        resident %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#887: FILE: mm/page_alloc.c:2160:
+			   "\n        resident %lu"
+			   "\n        cold     %lu"

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121467.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 31 warnings, 3 checks, 762 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121467.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
