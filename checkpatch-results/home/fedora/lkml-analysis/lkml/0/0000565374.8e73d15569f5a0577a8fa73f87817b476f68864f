WARNING:TYPO_SPELLING: 'appearantly' may be misspelled - perhaps 'apparently'?
#31: 
but appearantly never got into Linus tree.
    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff -u --new-file --recursive --exclude-from ../exclude linux.vanilla/include/linux/module.h linux.ac/include/linux/module.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/module.h:211:
+extern int parse_parameters(void *var, char *type, char *str);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: include/linux/module.h:215:
+#define MODULE_PARM(var,type) \
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#70: FILE: include/linux/module.h:215:
+#define MODULE_PARM(var,type) \
+static char *modparm##var##_setup_type __initdata = type;\
+static int __init modparm##var##_setup(char *str)\
+{\
+  return parse_parameters((void *)&var, modparm##var##_setup_type, str);\
+}\
+__setup(MODULE_NAME #var "=", modparm##var##_setup);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#70: FILE: include/linux/module.h:215:
+#define MODULE_PARM(var,type) \
+static char *modparm##var##_setup_type __initdata = type;\
+static int __init modparm##var##_setup(char *str)\
+{\
+  return parse_parameters((void *)&var, modparm##var##_setup_type, str);\
+}\
+__setup(MODULE_NAME #var "=", modparm##var##_setup);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: include/linux/module.h:219:
+  return parse_parameters((void *)&var, modparm##var##_setup_type, str);\$

ERROR:SPACING: space required after that close brace '}'
#75: FILE: include/linux/module.h:220:
+}\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: lib/parse.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#96: FILE: lib/parse.c:2:
+ *  linux/lib/parse.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#120: FILE: lib/parse.c:26:
+ *  along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: lib/parse.c:27:
+ *  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: lib/parse.c:30:
+ * ^IAlan Cox^I^IMake it get non arrays right.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: lib/parse.c:43:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#139: FILE: lib/parse.c:45:
+	if (isdigit(*p)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#140: FILE: lib/parse.c:46:
+		min = simple_strtoul(p, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#141: FILE: lib/parse.c:47:
+		if (*p == '-')
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: lib/parse.c:49:
+			max = simple_strtoul(p+1, &p, 0);
 			                      ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#143: FILE: lib/parse.c:49:
+			max = simple_strtoul(p+1, &p, 0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#144: FILE: lib/parse.c:50:
+			array=1;
 			     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#146: FILE: lib/parse.c:52:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#148: FILE: lib/parse.c:54:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#149: FILE: lib/parse.c:55:
+		min = max = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: lib/parse.c:57:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: lib/parse.c:69:
+^I $

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: lib/parse.c:70:
+	if(array)

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#165: FILE: lib/parse.c:71:
+		var=*(void **)var;
 		   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#165: FILE: lib/parse.c:71:
+		var=*(void **)var;
 		    ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#177: FILE: lib/parse.c:83:
+			val = simple_strtol(p, &p, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#181: FILE: lib/parse.c:87:
+			val = simple_strtol(p, &p, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#185: FILE: lib/parse.c:91:
+			val = simple_strtol(p, &p, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#189: FILE: lib/parse.c:95:
+			val = simple_strtol(p, &p, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: lib/parse.c:102:
+			 * - where do we check for overflows?? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#200: FILE: lib/parse.c:106:
+			printk(KERN_INFO "error in parsing arguments \"%s\" using format %s\n", str, type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#200: FILE: lib/parse.c:106:
+			printk(KERN_INFO "error in parsing arguments \"%s\" using format %s\n", str, type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: lib/parse.c:117:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: lib/parse.c:119:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565374.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 16 warnings, 8 checks, 152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565374.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
