WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -ruN -X../cludes ../orig/linux-2.5.48-uc0/arch/v850/Kconfig arch/v850/Kconfig

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#46: FILE: v850/Kconfig:66:
+      config V850E_AS85EP1
+      	     bool "AS85EP1"

Kconfig symbols should have a help text which fully describes
it.

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#88: FILE: v850/as85ep1.ld:10:
+       /* 1MB of internal memory (内蔵命令RAM).  */
                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: v850/as85ep1.ld:128:
+^I^I   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#251: FILE: v850/kernel/as85ep1.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#252: FILE: v850/kernel/as85ep1.c:2:
+ * arch/v850/kernel/as85ep1.c -- AS85EP1 V850E evaluation chip/board

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#272: FILE: v850/kernel/as85ep1.c:22:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#279: FILE: v850/kernel/as85ep1.c:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#281: FILE: v850/kernel/as85ep1.c:31:
+/* SRAM and SDRAM are vaguely contiguous (with a big hole in between; see
+   mach_reserve_bootmem for details); use both as one big area.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#281: FILE: v850/kernel/as85ep1.c:31:
+   mach_reserve_bootmem for details); use both as one big area.  */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: v850/kernel/as85ep1.c:32:
+#define RAM_START ^ISRAM_ADDR$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: v850/kernel/as85ep1.c:38:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: v850/kernel/as85ep1.c:39:
+static void as85ep1_led_tick (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#291: FILE: v850/kernel/as85ep1.c:41:
+extern char _intv_copy_src_start, _intv_copy_src_end;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#292: FILE: v850/kernel/as85ep1.c:42:
+extern char _intv_copy_dst_start;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#294: FILE: v850/kernel/as85ep1.c:44:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: v850/kernel/as85ep1.c:45:
+void __init mach_early_init (void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: v850/kernel/as85ep1.c:48:
+	const u32 *src;
+	register u32 *dst asm ("ep");

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#311: FILE: v850/kernel/as85ep1.c:61:
+	AS85EP1_PORT_PMC(6)  = 0xFF; /* A20-25, A0,A1 有効 */
 	                                              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#312: FILE: v850/kernel/as85ep1.c:62:
+	AS85EP1_PORT_PMC(7)  = 0x0E; /* CS1,2,3       有効 */
 	                                              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#313: FILE: v850/kernel/as85ep1.c:63:
+	AS85EP1_PORT_PMC(9)  = 0xFF; /* D16-23        有効 */
 	                                              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#314: FILE: v850/kernel/as85ep1.c:64:
+	AS85EP1_PORT_PMC(10) = 0xFF; /* D24-31        有効 */
 	                                              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#316: FILE: v850/kernel/as85ep1.c:66:
+	AS85EP1_IRAMM = 0x3;	/* 内蔵命令RAMは「write-mode」になります */
 	                    	   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#319: FILE: v850/kernel/as85ep1.c:69:
+	/* The early chip we have is buggy, so that writing the interrupt
+	   vectors into low RAM may screw up, so for non-ROM kernels, we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: v850/kernel/as85ep1.c:74:
+	   writing in 16-byte chunks backwards from the end.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#330: FILE: v850/kernel/as85ep1.c:80:
+		u32 t0 = src[0], t1 = src[1], t2 = src[2], t3 = src[3];
+		dst[0] = t0; dst[1] = t1; dst[2] = t2; dst[3] = t3;

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#335: FILE: v850/kernel/as85ep1.c:85:
+	AS85EP1_IRAMM = 0x0;	/* 内蔵命令RAMは「read-mode」になります */
 	                    	   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#337: FILE: v850/kernel/as85ep1.c:87:
+	nb85e_intc_disable_irqs ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#340: FILE: v850/kernel/as85ep1.c:90:
+void __init mach_setup (char **cmdline)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#343: FILE: v850/kernel/as85ep1.c:93:
+	nb85e_uart_cons_init (1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#346: FILE: v850/kernel/as85ep1.c:96:
+	AS85EP1_PORT_PMC (LEDS_PORT) = 0; /* Make the LEDs port an I/O port. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: v850/kernel/as85ep1.c:97:
+	AS85EP1_PORT_PM (LEDS_PORT) = 0; /* Make all the bits output pins.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: v850/kernel/as85ep1.c:100:
+	ROOT_DEV = MKDEV (BLKMEM_MAJOR, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: v850/kernel/as85ep1.c:103:
+void __init mach_get_physical_ram (unsigned long *ram_start,

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init mach_reserve_bootmem() should probably be void __init mach_reserve_bootmem(void)
#360: FILE: v850/kernel/as85ep1.c:110:
+void __init mach_reserve_bootmem ()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#360: FILE: v850/kernel/as85ep1.c:110:
+void __init mach_reserve_bootmem ()

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#362: FILE: v850/kernel/as85ep1.c:112:
+	extern char _root_fs_image_start, _root_fs_image_end;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#367: FILE: v850/kernel/as85ep1.c:117:
+	/* We can't use the space between SRAM and SDRAM, so prevent the
+	   kernel from trying.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#367: FILE: v850/kernel/as85ep1.c:117:
+	   kernel from trying.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#368: FILE: v850/kernel/as85ep1.c:118:
+	reserve_bootmem (SRAM_ADDR + SRAM_SIZE,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#372: FILE: v850/kernel/as85ep1.c:122:
+	/* Reserve the memory used by the root filesystem image if it's
+	   in RAM.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#372: FILE: v850/kernel/as85ep1.c:122:
+	   in RAM.  */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#374: FILE: v850/kernel/as85ep1.c:124:
+	if (root_fs_image_end > root_fs_image_start
+	    && root_fs_image_start >= RAM_START

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#375: FILE: v850/kernel/as85ep1.c:125:
+	    && root_fs_image_start >= RAM_START
+	    && root_fs_image_start < RAM_END)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#376: FILE: v850/kernel/as85ep1.c:126:
+		reserve_bootmem (root_fs_image_start,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#380: FILE: v850/kernel/as85ep1.c:130:
+void mach_gettimeofday (struct timeval *tv)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#386: FILE: v850/kernel/as85ep1.c:136:
+void __init mach_sched_init (struct irqaction *timer_action)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: v850/kernel/as85ep1.c:139:
+	nb85e_timer_d_configure (0, HZ);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#391: FILE: v850/kernel/as85ep1.c:141:
+	setup_irq (IRQ_INTCMD(0), timer_action);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#395: FILE: v850/kernel/as85ep1.c:145:
+^I{ "IRQ", 0, ^I^INUM_MACH_IRQS,^I1, 7 },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: v850/kernel/as85ep1.c:149:
+^I{ "SR",^I IRQ_INTSR(0),^IIRQ_INTSR_NUM, ^I3, 4 },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#400: FILE: v850/kernel/as85ep1.c:150:
+^I{ "ST",  IRQ_INTST(0), ^IIRQ_INTST_NUM, ^I3, 5 },$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#403: FILE: v850/kernel/as85ep1.c:153:
+};
+#define NUM_IRQ_INITS ((sizeof irq_inits / sizeof irq_inits[0]) - 1)

WARNING:SIZEOF_PARENTHESIS: sizeof irq_inits should be sizeof(irq_inits)
#403: FILE: v850/kernel/as85ep1.c:153:
+#define NUM_IRQ_INITS ((sizeof irq_inits / sizeof irq_inits[0]) - 1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: v850/kernel/as85ep1.c:157:
+void __init mach_init_irqs (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: v850/kernel/as85ep1.c:159:
+	nb85e_intc_init_irq_types (irq_inits, hw_itypes);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#412: FILE: v850/kernel/as85ep1.c:162:
+void machine_restart (char *__unused)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#415: FILE: v850/kernel/as85ep1.c:165:
+	disable_reset_guard ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: v850/kernel/as85ep1.c:170:
+void machine_halt (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: v850/kernel/as85ep1.c:173:
+	disable_reset_guard ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#425: FILE: v850/kernel/as85ep1.c:175:
+	local_irq_disable ();	/* Ignore all interrupts.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#426: FILE: v850/kernel/as85ep1.c:176:
+	AS85EP1_PORT_IO (LEDS_PORT) = 0xAA;	/* Note that we halted.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#431: FILE: v850/kernel/as85ep1.c:181:
+void machine_power_off (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#433: FILE: v850/kernel/as85ep1.c:183:
+	machine_halt ();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: v850/kernel/as85ep1.c:187:
+void as85ep1_uart_pre_configure (unsigned chan, unsigned cflags, unsigned baud)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: v850/kernel/as85ep1.c:187:
+void as85ep1_uart_pre_configure (unsigned chan, unsigned cflags, unsigned baud)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: v850/kernel/as85ep1.c:187:
+void as85ep1_uart_pre_configure (unsigned chan, unsigned cflags, unsigned baud)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#437: FILE: v850/kernel/as85ep1.c:187:
+void as85ep1_uart_pre_configure (unsigned chan, unsigned cflags, unsigned baud)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#443: FILE: v850/kernel/as85ep1.c:193:
+	/* The AS85EP1 connects some general-purpose I/O pins on the CPU to
+	   the RTS/CTS lines of UART 1's serial connection.  I/O pins P53

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#444: FILE: v850/kernel/as85ep1.c:194:
+	   and P54 are RTS and CTS respectively.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#454: FILE: v850/kernel/as85ep1.c:204:
+/* Minimum and maximum bounds for the moving upper LED boundary in the
+   clock tick display.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#454: FILE: v850/kernel/as85ep1.c:204:
+   clock tick display.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#459: FILE: v850/kernel/as85ep1.c:209:
+/* There are MAX_MAX_POS^2 - MIN_MAX_POS^2 cycles in the animation, so if
+   we pick 6 and 0 as above, we get 49 cycles, which is when divided into

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#460: FILE: v850/kernel/as85ep1.c:210:
+   the standard 100 value for HZ, gives us an almost 1s total time.  */

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void as85ep1_led_tick() should probably be void as85ep1_led_tick(void)
#464: FILE: v850/kernel/as85ep1.c:214:
+static void as85ep1_led_tick ()

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#464: FILE: v850/kernel/as85ep1.c:214:
+static void as85ep1_led_tick ()

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#466: FILE: v850/kernel/as85ep1.c:216:
+	static unsigned counter = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#466: FILE: v850/kernel/as85ep1.c:216:
+	static unsigned counter = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: v850/kernel/as85ep1.c:217:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#483: FILE: v850/kernel/as85ep1.c:233:
+				set_bit (pos, &AS85EP1_PORT_IO(LEDS_PORT));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: v850/kernel/as85ep1.c:235:
+				clear_bit (pos, &AS85EP1_PORT_IO(LEDS_PORT));

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#537: FILE: v850/kernel/setup.c:274:
+	/* The allocator is very picky about the address of the first
+	   allocatable page -- it must be at least as aligned as the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#541: FILE: v850/kernel/setup.c:278:
+	   similar runtime check in free_area_init_core.  */

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#639: FILE: asm-v850/as85ep1.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#640: FILE: asm-v850/as85ep1.h:2:
+ * include/asm-v850/as85ep1.h -- AS85EP1 evaluation CPU chip/board

CHECK:LINE_SPACING: Please don't use multiple blank lines
#655: FILE: asm-v850/as85ep1.h:17:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: asm-v850/as85ep1.h:18:
+#define CPU_ARCH ^I"v850e"$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#665: FILE: asm-v850/as85ep1.h:27:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#670: FILE: asm-v850/as85ep1.h:32:
+/* 64MB of DRAM.  This can actually be at one of two positions, determined
+   by jump JP3; we use the second position because the first only allows

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#671: FILE: asm-v850/as85ep1.h:33:
+   access to 56MB.  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#675: FILE: asm-v850/as85ep1.h:37:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#677: FILE: asm-v850/as85ep1.h:39:
+#define PAGE_OFFSET ^ISRAM_ADDR$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#680: FILE: asm-v850/as85ep1.h:42:
+/* We use on-chip RAM, for a few miscellaneous variables that must be
+   accessible using a load instruction relative to R0.  The AS85EP1 chip

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#681: FILE: asm-v850/as85ep1.h:43:
+   16K of internal RAM located slightly before I/O space.  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#684: FILE: asm-v850/as85ep1.h:46:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#687: FILE: asm-v850/as85ep1.h:49:
+#define AS85EP1_CSC(n)		(*(volatile u16 *)AS85EP1_CSC_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#689: FILE: asm-v850/as85ep1.h:51:
+#define AS85EP1_BSC		(*(volatile u16 *)AS85EP1_BSC_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#691: FILE: asm-v850/as85ep1.h:53:
+#define AS85EP1_BCT(n)		(*(volatile u16 *)AS85EP1_BCT_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#693: FILE: asm-v850/as85ep1.h:55:
+#define AS85EP1_DWC(n)		(*(volatile u16 *)AS85EP1_DWC_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#695: FILE: asm-v850/as85ep1.h:57:
+#define AS85EP1_BCC		(*(volatile u16 *)AS85EP1_BCC_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#697: FILE: asm-v850/as85ep1.h:59:
+#define AS85EP1_ASC		(*(volatile u16 *)AS85EP1_ASC_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#699: FILE: asm-v850/as85ep1.h:61:
+#define AS85EP1_BCP		(*(volatile u16 *)AS85EP1_BCP_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#701: FILE: asm-v850/as85ep1.h:63:
+#define AS85EP1_LBS		(*(volatile u16 *)AS85EP1_LBS_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#703: FILE: asm-v850/as85ep1.h:65:
+#define AS85EP1_BMC		(*(volatile u16 *)AS85EP1_BMC_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#705: FILE: asm-v850/as85ep1.h:67:
+#define AS85EP1_PRC		(*(volatile u16 *)AS85EP1_PRC_ADDR)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#707: FILE: asm-v850/as85ep1.h:69:
+#define AS85EP1_SCR(n)		(*(volatile u16 *)AS85EP1_SCR_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#709: FILE: asm-v850/as85ep1.h:71:
+#define AS85EP1_RFS(n)		(*(volatile u16 *)AS85EP1_RFS_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#711: FILE: asm-v850/as85ep1.h:73:
+#define AS85EP1_IRAMM		(*(volatile u8 *)AS85EP1_IRAMM_ADDR)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#713: FILE: asm-v850/as85ep1.h:75:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#718: FILE: asm-v850/as85ep1.h:80:
+#define AS85EP1_PORT_IO(n)	(*(volatile u8 *)AS85EP1_PORT_IO_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#721: FILE: asm-v850/as85ep1.h:83:
+#define AS85EP1_PORT_PM(n)	(*(volatile u8 *)AS85EP1_PORT_PM_ADDR(n))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#724: FILE: asm-v850/as85ep1.h:86:
+#define AS85EP1_PORT_PMC(n)	(*(volatile u8 *)AS85EP1_PORT_PMC_ADDR(n))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#726: FILE: asm-v850/as85ep1.h:88:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#735: FILE: asm-v850/as85ep1.h:97:
+#define IRQ_INTSRE(n)	(0x1E + (n)*3) /* UART 0-1 reception error */
                      	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#737: FILE: asm-v850/as85ep1.h:99:
+#define IRQ_INTSR(n)	(0x1F + (n)*3) /* UART 0-1 reception completion */
                     	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#739: FILE: asm-v850/as85ep1.h:101:
+#define IRQ_INTST(n)	(0x20 + (n)*3) /* UART 0-1 transmission completion */
                     	           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#746: FILE: asm-v850/as85ep1.h:108:
+extern void as85ep1_init_irqs (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: asm-v850/as85ep1.h:108:
+extern void as85ep1_init_irqs (void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#749: FILE: asm-v850/as85ep1.h:111:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#753: FILE: asm-v850/as85ep1.h:115:
+#define NB85E_UART_CHIP_NAME ^I^I"V850E/NA85E"$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#758: FILE: asm-v850/as85ep1.h:120:
+extern void as85ep1_uart_pre_configure (unsigned chan,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#758: FILE: asm-v850/as85ep1.h:120:
+extern void as85ep1_uart_pre_configure (unsigned chan,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#758: FILE: asm-v850/as85ep1.h:120:
+extern void as85ep1_uart_pre_configure (unsigned chan,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: asm-v850/as85ep1.h:121:
+					unsigned cflags, unsigned baud);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: asm-v850/as85ep1.h:121:
+					unsigned cflags, unsigned baud);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#767: FILE: asm-v850/as85ep1.h:129:
+#define NB85E_UART_SET_RTS(chan, val)					      \
+   do {									      \
+	   if (chan == 1) {						      \
+		   unsigned old = AS85EP1_PORT_IO(5); 			      \
+		   if (val)						      \
+			   AS85EP1_PORT_IO(5) = old & ~0x8;		      \
+		   else							      \
+			   AS85EP1_PORT_IO(5) = old | 0x8;		      \
+	   }								      \
+   } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: asm-v850/as85ep1.h:130:
+   do {^I^I^I^I^I^I^I^I^I      \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 11)
#768: FILE: asm-v850/as85ep1.h:130:
+   do {									      \
+	   if (chan == 1) {						      \

WARNING:TABSTOP: Statements should start on a tabstop
#769: FILE: asm-v850/as85ep1.h:131:
+	   if (chan == 1) {						      \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 19)
#769: FILE: asm-v850/as85ep1.h:131:
+	   if (chan == 1) {						      \
+		   unsigned old = AS85EP1_PORT_IO(5); 			      \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#770: FILE: asm-v850/as85ep1.h:132:
+^I^I   unsigned old = AS85EP1_PORT_IO(5); ^I^I^I      \$

WARNING:TABSTOP: Statements should start on a tabstop
#770: FILE: asm-v850/as85ep1.h:132:
+		   unsigned old = AS85EP1_PORT_IO(5); 			      \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#770: FILE: asm-v850/as85ep1.h:132:
+		   unsigned old = AS85EP1_PORT_IO(5); 			      \

WARNING:TABSTOP: Statements should start on a tabstop
#771: FILE: asm-v850/as85ep1.h:133:
+		   if (val)						      \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (19, 27)
#771: FILE: asm-v850/as85ep1.h:133:
+		   if (val)						      \
+			   AS85EP1_PORT_IO(5) = old & ~0x8;		      \

WARNING:TABSTOP: Statements should start on a tabstop
#773: FILE: asm-v850/as85ep1.h:135:
+		   else							      \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (19, 27)
#773: FILE: asm-v850/as85ep1.h:135:
+		   else							      \
+			   AS85EP1_PORT_IO(5) = old | 0x8;		      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: asm-v850/as85ep1.h:138:
+   } while (0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#778: FILE: asm-v850/as85ep1.h:140:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#784: FILE: asm-v850/as85ep1.h:146:
+#define NB85E_TIMER_D_TMD_BASE_ADDR ^I(NB85E_TIMER_D_BASE_ADDR + 0x0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#785: FILE: asm-v850/as85ep1.h:147:
+#define NB85E_TIMER_D_CMD_BASE_ADDR ^I(NB85E_TIMER_D_BASE_ADDR + 0x2)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#786: FILE: asm-v850/as85ep1.h:148:
+#define NB85E_TIMER_D_TMCD_BASE_ADDR ^I(NB85E_TIMER_D_BASE_ADDR + 0x4)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#791: FILE: asm-v850/as85ep1.h:153:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#797: FILE: asm-v850/as85ep1.h:159:
+
+

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#856: FILE: asm-v850/unistd.h:243:
+/* User programs sometimes end up including this header file
+   (indirectly, via uClibc header files), so I'm a bit nervous just

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#857: FILE: asm-v850/unistd.h:244:
+   including <linux/compiler.h>.  */

WARNING:TABSTOP: Statements should start on a tabstop
#867: FILE: asm-v850/unistd.h:253:
+	  if (__builtin_expect ((unsigned long)(res) >= (unsigned long)(-125), 0)) { \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 18)
#867: FILE: asm-v850/unistd.h:253:
+	  if (__builtin_expect ((unsigned long)(res) >= (unsigned long)(-125), 0)) { \
 		  errno = -(res);					      \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#867: FILE: asm-v850/unistd.h:253:
+	  if (__builtin_expect ((unsigned long)(res) >= (unsigned long)(-125), 0)) { \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#877: FILE: asm-v850/unistd.h:352:
+/* In older versions of gcc, `asm' statements with more than 10
+   input/output arguments produce a fatal error.  To work around this

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#880: FILE: asm-v850/unistd.h:355:
+   because gcc-3.x doesn't allow clobbers to also be input arguments).  */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#881: FILE: asm-v850/unistd.h:356:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall)			      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+ 			"r" (e), "r" (f)				      \
+			: SYSCALL_CLOBBERS, SYSCALL_ARG4, SYSCALL_ARG5);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'syscall' - possible side-effects?
#881: FILE: asm-v850/unistd.h:356:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall)			      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+ 			"r" (e), "r" (f)				      \
+			: SYSCALL_CLOBBERS, SYSCALL_ARG4, SYSCALL_ARG5);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#881: FILE: asm-v850/unistd.h:356:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall)			      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+ 			"r" (e), "r" (f)				      \
+			: SYSCALL_CLOBBERS, SYSCALL_ARG4, SYSCALL_ARG5);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: asm-v850/unistd.h:357:
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP^I^I^I      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#886: FILE: asm-v850/unistd.h:361:
+ ^I^I^I"r" (e), "r" (f)^I^I^I^I      \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#886: FILE: asm-v850/unistd.h:361:
+ ^I^I^I"r" (e), "r" (f)^I^I^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: asm-v850/unistd.h:361:
+ ^I^I^I"r" (e), "r" (f)^I^I^I^I      \$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#889: FILE: asm-v850/unistd.h:364:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall),			      \
+ 			"=r" (e), "=r" (f)				      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+			"2" (e), "3" (f)				      \
+			: SYSCALL_CLOBBERS);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'syscall' - possible side-effects?
#889: FILE: asm-v850/unistd.h:364:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall),			      \
+ 			"=r" (e), "=r" (f)				      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+			"2" (e), "3" (f)				      \
+			: SYSCALL_CLOBBERS);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#889: FILE: asm-v850/unistd.h:364:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall),			      \
+ 			"=r" (e), "=r" (f)				      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+			"2" (e), "3" (f)				      \
+			: SYSCALL_CLOBBERS);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#889: FILE: asm-v850/unistd.h:364:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall),			      \
+ 			"=r" (e), "=r" (f)				      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+			"2" (e), "3" (f)				      \
+			: SYSCALL_CLOBBERS);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#889: FILE: asm-v850/unistd.h:364:
+#define __SYSCALL6_TRAP(syscall, ret, a, b, c, d, e, f)			      \
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP			      \
+			: "=r" (ret), "=r" (syscall),			      \
+ 			"=r" (e), "=r" (f)				      \
+			: "1" (syscall),				      \
+			"r" (a), "r" (b), "r" (c), "r" (d),		      \
+			"2" (e), "3" (f)				      \
+			: SYSCALL_CLOBBERS);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: asm-v850/unistd.h:365:
+  __asm__ __volatile__ ("trap " SYSCALL_LONG_TRAP^I^I^I      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: asm-v850/unistd.h:367:
+ ^I^I^I"=r" (e), "=r" (f)^I^I^I^I      \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#892: FILE: asm-v850/unistd.h:367:
+ ^I^I^I"=r" (e), "=r" (f)^I^I^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: asm-v850/unistd.h:367:
+ ^I^I^I"=r" (e), "=r" (f)^I^I^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: asm-v850/unistd.h:385:
+  __SYSCALL6_TRAP(__syscall, __ret, __a, __b, __c, __d, __e, __f);^I      \$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#923: FILE: asm-v850/unistd.h:426:
+#define cond_syscall(name)						      \
+  asm (".weak\t" C_SYMBOL_STRING(name) ";"				      \
        ".set\t" C_SYMBOL_STRING(name) "," C_SYMBOL_STRING(sys_ni_syscall));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#923: FILE: asm-v850/unistd.h:426:
+#define cond_syscall(name)						      \
+  asm (".weak\t" C_SYMBOL_STRING(name) ";"				      \
        ".set\t" C_SYMBOL_STRING(name) "," C_SYMBOL_STRING(sys_ni_syscall));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#923: FILE: asm-v850/unistd.h:426:
+#define cond_syscall(name)						      \
+  asm (".weak\t" C_SYMBOL_STRING(name) ";"				      \
        ".set\t" C_SYMBOL_STRING(name) "," C_SYMBOL_STRING(sys_ni_syscall));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: asm-v850/unistd.h:427:
+  asm (".weak\t" C_SYMBOL_STRING(name) ";"^I^I^I^I      \$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000412561.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 150 warnings, 34 checks, 797 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000412561.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
