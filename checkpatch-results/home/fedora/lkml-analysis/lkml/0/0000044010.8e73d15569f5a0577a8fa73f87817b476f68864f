WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
In order to provide robust networked block devices there must be a guarantee

WARNING:REPEATED_WORD: Possible repeated word: 'with'
#47: 
is a promise the socket will never block on receive. Along with with a memory

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#104: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_EMERG)
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#104: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_EMERG)
 			                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/net/sock.h:449:
+extern int sk_adjust_memalloc(int socks, int request_queues);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: include/net/sock.h:450:
+extern int sk_set_vmio(struct sock *sk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/net/sock.h:451:
+extern int sk_clear_vmio(struct sock *sk);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#242: FILE: mm/page_alloc.c:975:
+	if ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE)))
+			&& !in_interrupt()) || (gfp_mask & __GFP_EMERG)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: mm/page_alloc.c:2200:
+	unsigned pages_min = (min_free_kbytes + var_free_kbytes)

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: mm/page_alloc.c:2275:
+		struct zone *zone;
+		for_each_zone(zone)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#285: FILE: mm/page_alloc.c:2278:
+	printk(KERN_DEBUG "Emergency reserve: %d\n", var_free_kbytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#291: FILE: mm/page_alloc.c:2284:
+EXPORT_SYMBOL_GPL(adjust_memalloc_reserve);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#409: FILE: net/core/skbuff.c:355:
+		if (skb->emerg) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#412: FILE: net/core/skbuff.c:358:
+		} else

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#430: FILE: net/core/skbuff.c:376:
+	void (*free_skb)(struct kmem_cache *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#430: FILE: net/core/skbuff.c:376:
+	void (*free_skb)(struct kmem_cache *, void *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#490: FILE: net/core/skbuff.c:756:
+	if (skb->emerg) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#503: FILE: net/core/skbuff.c:769:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#598: FILE: net/core/sock.c:205:
+EXPORT_SYMBOL_GPL(vmio_socks);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#599: FILE: net/core/sock.c:206:
+EXPORT_SYMBOL_GPL(emerg_rx_pages_used);

WARNING:TYPO_SPELLING: 'alloted' may be misspelled - perhaps 'allotted'?
#618: FILE: net/core/sock.c:225:
+ * 		number of pages alloted for emergency skb service to critical
    		                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#618: FILE: net/core/sock.c:225:
+ * ^I^Inumber of pages alloted for emergency skb service to critical$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#619: FILE: net/core/sock.c:226:
+ * ^I^Isockets.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: net/core/sock.c:239:
+	BUG_ON(socks < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#640: FILE: net/core/sock.c:247:
+		printk(KERN_WARNING

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#664: FILE: net/core/sock.c:271:
+	if (!sock_flag(sk, SOCK_VMIO) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: net/core/sock.c:272:
+	if (!sock_flag(sk, SOCK_VMIO) &&
+			!(err = sk_adjust_memalloc(1, 0))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#678: FILE: net/core/sock.c:285:
+	if (sock_flag(sk, SOCK_VMIO) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: net/core/sock.c:286:
+	if (sock_flag(sk, SOCK_VMIO) &&
+			!(err = sk_adjust_memalloc(-1, 0))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044010.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 15 warnings, 12 checks, 575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044010.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
