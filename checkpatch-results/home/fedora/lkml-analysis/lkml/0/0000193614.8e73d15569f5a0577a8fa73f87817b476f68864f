WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> > Yes, we are increasing the number in our experiments.  It's in the queue

WARNING:TYPO_SPELLING: 'assymetric' may be misspelled - perhaps 'asymmetric'?
#77: 
  and is a good guess even for more assymetric systems.
                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'assymetries' may be misspelled - perhaps 'asymmetries'?
#79: 
  [ people hacking systems that have assymetries that break this 
                                     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#86: 
the cost of migration, and most architectures didnt set that variable 
                                              ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: kernel/sched.c:4708:
+ * 2) the source CPU reads+dirties a shared buffer $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: kernel/sched.c:4729:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#236: FILE: kernel/sched.c:4738:
+	unsigned long size = __size/sizeof(long);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#238: FILE: kernel/sched.c:4740:
+	volatile unsigned long data;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#241: FILE: kernel/sched.c:4743:
+	for (i = 0; i < 2*size; i += 4)
 	                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: kernel/sched.c:4747:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: kernel/sched.c:4755:
+	unsigned long size = __size/sizeof(long), chunk1 = size/3,
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: kernel/sched.c:4755:
+	unsigned long size = __size/sizeof(long), chunk1 = size/3,
 	                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#254: FILE: kernel/sched.c:4756:
+			chunk2 = 2*size/3;
 			          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#254: FILE: kernel/sched.c:4756:
+			chunk2 = 2*size/3;
 			               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#258: FILE: kernel/sched.c:4760:
+	for (i = 0; i < size/6; i += 4) {
 	                    ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#259: FILE: kernel/sched.c:4761:
+		switch (i % 6) {
+			case 0: cache[i]++;
+			case 1: cache[size-1-i]++;
+			case 2: cache[chunk1-i]++;
+			case 3: cache[chunk1+i]++;
+			case 4: cache[chunk2-i]++;
+			case 5: cache[chunk2+i]++;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#260: FILE: kernel/sched.c:4762:
+			case 0: cache[i]++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#261: FILE: kernel/sched.c:4763:
+			case 1: cache[size-1-i]++;
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#261: FILE: kernel/sched.c:4763:
+			case 1: cache[size-1-i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#261: FILE: kernel/sched.c:4763:
+			case 1: cache[size-1-i]++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#262: FILE: kernel/sched.c:4764:
+			case 2: cache[chunk1-i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#262: FILE: kernel/sched.c:4764:
+			case 2: cache[chunk1-i]++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: kernel/sched.c:4765:
+			case 3: cache[chunk1+i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#263: FILE: kernel/sched.c:4765:
+			case 3: cache[chunk1+i]++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#264: FILE: kernel/sched.c:4766:
+			case 4: cache[chunk2-i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#264: FILE: kernel/sched.c:4766:
+			case 4: cache[chunk2-i]++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: kernel/sched.c:4767:
+			case 5: cache[chunk2+i]++;
 			                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#265: FILE: kernel/sched.c:4767:
+			case 5: cache[chunk2+i]++;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#272: FILE: kernel/sched.c:4774:
+	void (*fn)(void *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#272: FILE: kernel/sched.c:4774:
+	void (*fn)(void *, unsigned long);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#332: FILE: kernel/sched.c:4834:
+		printk("measure_one: timed out waiting for other CPUs\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#336: FILE: kernel/sched.c:4838:
+		printk("measure_one: timed out waiting for other CPUs\n");

WARNING:MISPLACED_INIT: __initdata should be placed after migration_cost[MAX_DOMAIN_DISTANCE]
#364: FILE: kernel/sched.c:4866:
+static __initdata unsigned long long migration_cost[MAX_DOMAIN_DISTANCE];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#373: FILE: kernel/sched.c:4875:
+	int ints[MAX_DOMAIN_DISTANCE+1], i;
 	                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#377: FILE: kernel/sched.c:4879:
+	printk("#ints: %d\n", ints[0]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#379: FILE: kernel/sched.c:4881:
+		migration_cost[i-1] = (unsigned long long)ints[i]*1000;
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#379: FILE: kernel/sched.c:4881:
+		migration_cost[i-1] = (unsigned long long)ints[i]*1000;
 		                                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#380: FILE: kernel/sched.c:4882:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#380: FILE: kernel/sched.c:4882:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);
 		                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#380: FILE: kernel/sched.c:4882:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);
 		                                                         ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#380: FILE: kernel/sched.c:4882:
+		printk("migration_cost[%d]: %Ld\n", i-1, migration_cost[i-1]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#385: FILE: kernel/sched.c:4887:
+__setup ("migration_cost=", migration_cost_setup);

WARNING:MISPLACED_INIT: __initdata should be placed after migration_factor
#397: FILE: kernel/sched.c:4899:
+static __initdata unsigned int migration_factor = MIGRATION_FACTOR_SCALE;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#406: FILE: kernel/sched.c:4908:
+__setup("migration_factor=", setup_migration_factor);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#425: FILE: kernel/sched.c:4927:
+		distance = MAX_DOMAIN_DISTANCE-1;
 		                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#444: FILE: kernel/sched.c:4946:
+#define MIN_CACHE_SIZE		(64*1024UL)
                       		   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#445: FILE: kernel/sched.c:4947:
+#define DEFAULT_CACHE_SIZE	(8*1024*1024UL)
                           	  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#445: FILE: kernel/sched.c:4947:
+#define DEFAULT_CACHE_SIZE	(8*1024*1024UL)
                           	       ^

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#457: FILE: kernel/sched.c:4959:
+	 * cachesize has to lie somewhere inbetween.
 	                                  ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: kernel/sched.c:4969:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#469: FILE: kernel/sched.c:4971:
+		printk("cpu %d and %d not both online!\n", cpu1, cpu2);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#476: FILE: kernel/sched.c:4978:
+	cache = vmalloc(2*size);
 	                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#478: FILE: kernel/sched.c:4980:
+		printk("could not vmalloc %ld bytes for cache!\n", 2*size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#478: FILE: kernel/sched.c:4980:
+		printk("could not vmalloc %ld bytes for cache!\n", 2*size);
 		                                                    ^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#478: FILE: kernel/sched.c:4980:
+	if (!cache) {
+		printk("could not vmalloc %ld bytes for cache!\n", 2*size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#481: FILE: kernel/sched.c:4983:
+	memset(cache, 0, 2*size);
 	                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#495: FILE: kernel/sched.c:4997:
+			cost1 += measure_one(cache, size - i*1024, cpu1, cpu2);
 			                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#496: FILE: kernel/sched.c:4998:
+			cost1 += measure_one(cache, size - i*1024, cpu2, cpu1);
 			                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#501: FILE: kernel/sched.c:5003:
+			cost2 += measure_one(cache, size - i*1024, cpu1, cpu1);
 			                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#502: FILE: kernel/sched.c:5004:
+			cost2 += measure_one(cache, size - i*1024, cpu2, cpu2);
 			                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#515: FILE: kernel/sched.c:5017:
+	do_div(cost, 2*ITERATIONS);
 	              ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#530: FILE: kernel/sched.c:5032:
+void __devinit calibrate_cache_decay(void)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#537: FILE: kernel/sched.c:5039:
+	printk("---------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: kernel/sched.c:5040:
+	printk("migration cost matrix (max_cache_size: %ld, cpu: %ld MHz):\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: kernel/sched.c:5041:
+	printk("migration cost matrix (max_cache_size: %ld, cpu: %ld MHz):\n",
+		max_cache_size, cpu_khz/1000);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#539: FILE: kernel/sched.c:5041:
+		max_cache_size, cpu_khz/1000);
 		                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#540: FILE: kernel/sched.c:5042:
+	printk("---------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: kernel/sched.c:5043:
+	printk("      ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#543: FILE: kernel/sched.c:5045:
+		printk("    [%02d]", cpu1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#544: FILE: kernel/sched.c:5046:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: kernel/sched.c:5051:
+		printk("[%02d]: ", cpu1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: kernel/sched.c:5054:
+				printk("    -   ");

CHECK:BRACES: braces {} should be used on all arms of this statement
#560: FILE: kernel/sched.c:5062:
+			if (migration_cost[distance])
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: kernel/sched.c:5064:
+			else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#566: FILE: kernel/sched.c:5068:
+			printk(" %2ld.%ld(%ld)", (long)cost / 1000000,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: kernel/sched.c:5069:
+			printk(" %2ld.%ld(%ld)", (long)cost / 1000000,
+				((long)cost / 100000) % 10, distance);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#569: FILE: kernel/sched.c:5071:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#571: FILE: kernel/sched.c:5073:
+	printk("---------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: kernel/sched.c:5074:
+	printk("cacheflush times [%ld]:", max_distance+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#572: FILE: kernel/sched.c:5074:
+	printk("cacheflush times [%ld]:", max_distance+1);
 	                                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#575: FILE: kernel/sched.c:5077:
+		printk(" %ld.%ld (%Ld)", (long)cost / 1000000,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#575: FILE: kernel/sched.c:5077:
+		printk(" %ld.%ld (%Ld)", (long)cost / 1000000,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: kernel/sched.c:5078:
+		printk(" %ld.%ld (%Ld)", (long)cost / 1000000,
+			((long)cost / 100000) % 10, cost);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#578: FILE: kernel/sched.c:5080:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: kernel/sched.c:5081:
+	printk("---------------------\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#596: FILE: kernel/sched.c:5098:
 static void __devinit arch_init_sched_domains(void)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#617: FILE: arch/ia64/kernel/domain.c:364:
+	max_cache_size = 32*1024*1024;
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#617: FILE: arch/ia64/kernel/domain.c:364:
+	max_cache_size = 32*1024*1024;
 	                        ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#621: FILE: arch/ia64/kernel/domain.c:368:
 void __devinit arch_destroy_sched_domains(void)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/sched.h:537:
+extern void calibrate_cache_decay(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 38 warnings, 43 checks, 485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
