WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
 include/asm-generic/atomic.h |  159 +++++++++++++++++++++++++++++++++++++++++++

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#55: 
--- a/arch/parisc/lib/bitops.c	2002-07-20 21:11:07.000000000 +0200

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#187: FILE: include/asm-arm/atomic.h:1:
+#include <asm-generic/atomic.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#340: FILE: include/asm-cris/atomic.h:1:
+#include <asm-generic/atomic.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#345: FILE: include/asm-generic/atomic.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#346: FILE: include/asm-generic/atomic.h:2:
+ *  linux/include/asm-generic/atomic.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#361: FILE: include/asm-generic/atomic.h:17:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#362: FILE: include/asm-generic/atomic.h:18:
+	volatile int counter;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#374: FILE: include/asm-generic/atomic.h:30:
+#define atomic_lock_complex(v) ^Ido {unsigned long flags; local_irq_save(flags);$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#374: FILE: include/asm-generic/atomic.h:30:
+#define atomic_lock_complex(v) 	do {unsigned long flags; local_irq_save(flags);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ';' (ctx:VxV)
#375: FILE: include/asm-generic/atomic.h:31:
+#define atomic_unlock_complex(v) local_irq_restore(flags);} while(0)
                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: include/asm-generic/atomic.h:31:
+#define atomic_unlock_complex(v) local_irq_restore(flags);} while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#375: FILE: include/asm-generic/atomic.h:31:
+#define atomic_unlock_complex(v) local_irq_restore(flags);} while(0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:SPACING: space required before the open parenthesis '('
#379: FILE: include/asm-generic/atomic.h:35:
+#define atomic_unlock_simple(v) } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#379: FILE: include/asm-generic/atomic.h:35:
+#define atomic_unlock_simple(v) } while(0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: include/asm-generic/atomic.h:47:
+ * to get the right index */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: include/asm-generic/atomic.h:49:
+         probably the fastest$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#393: FILE: include/asm-generic/atomic.h:49:
+/* NOTE: unless there are really a lot of CPUs ATOMIC_HASH_SIZE = 1 is
+         probably the fastest

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#400: FILE: include/asm-generic/atomic.h:56:
+	[0 ... (ATOMIC_HASH_SIZE-1)]  = SPIN_LOCK_UNLOCKED
 	                        ^

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#409: FILE: include/asm-generic/atomic.h:65:
+#define atomic_to_spinlock(v) (&__atomic_hash[(((unsigned long)v / sizeof(struct atomic_t)) + ((unsigned long)v / L1_CACHE_BYTES)) % ATOMIC_HASH_SIZE])

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#409: FILE: include/asm-generic/atomic.h:65:
+#define atomic_to_spinlock(v) (&__atomic_hash[(((unsigned long)v / sizeof(struct atomic_t)) + ((unsigned long)v / L1_CACHE_BYTES)) % ATOMIC_HASH_SIZE])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#409: FILE: include/asm-generic/atomic.h:65:
+#define atomic_to_spinlock(v) (&__atomic_hash[(((unsigned long)v / sizeof(struct atomic_t)) + ((unsigned long)v / L1_CACHE_BYTES)) % ATOMIC_HASH_SIZE])

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#415: FILE: include/asm-generic/atomic.h:71:
+#define atomic_lock_complex(v) do {unsigned long flags; spin_lock_irqsave(atomic_to_spinlock(v), flags)

ERROR:SPACING: space required before the open parenthesis '('
#416: FILE: include/asm-generic/atomic.h:72:
+#define atomic_unlock_complex(v) spin_unlock_irqrestore(atomic_to_spinlock(v), flags); } while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#416: FILE: include/asm-generic/atomic.h:72:
+#define atomic_unlock_complex(v) spin_unlock_irqrestore(atomic_to_spinlock(v), flags); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: include/asm-generic/atomic.h:143:
+#define atomic_sub_and_test(i,v) (atomic_sub_return((i), (v)) == 0)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: include/asm-generic/atomic.h:144:
+#define atomic_add_and_test(i,v) (atomic_add_return((i), (v)) == 0)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#495: FILE: include/asm-generic/atomic.h:151:
+#define atomic_add_negative(i,v) (atomic_add_return(i, v) < 0)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#496: FILE: include/asm-generic/atomic.h:152:
+#define atomic_sub_negative(i,v) (atomic_sub_return(i, v) < 0)
                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#795: FILE: include/asm-parisc/atomic.h:1:
+#include <asm-generic/atomic.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#902: FILE: include/asm-sh/atomic.h:1:
+#include <asm-generic/atomic.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440805.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 15 warnings, 3 checks, 820 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440805.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
