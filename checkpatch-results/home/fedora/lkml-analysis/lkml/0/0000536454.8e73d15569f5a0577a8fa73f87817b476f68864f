WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#58: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: fs/pipe.c:44:
+#define ASSERT(x)	do { if (!(x)) BUG(); } while(0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#84: FILE: fs/pipe.c:44:
+#define ASSERT(x)	do { if (!(x)) BUG(); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: fs/pipe.c:57:
+ * Do a quick page-table lookup for a single page. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: fs/pipe.c:59:
+static struct page * follow_page(struct mm_struct *mm, unsigned long address) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: fs/pipe.c:59:
+static struct page * follow_page(struct mm_struct *mm, unsigned long address) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#125: FILE: fs/pipe.c:85:
+pio_copy_to_user(struct inode* inode, char* ubuf, int chars)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#125: FILE: fs/pipe.c:85:
+pio_copy_to_user(struct inode* inode, char* ubuf, int chars)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#130: FILE: fs/pipe.c:90:
+	struct pipe_pio* pio;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#131: FILE: fs/pipe.c:91:
+	struct mm_struct* mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: fs/pipe.c:92:
+	struct vm_area_struct * vma;

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#136: FILE: fs/pipe.c:96:
+	ASSERT(pio->state>0);
 	                 ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#143: FILE: fs/pipe.c:103:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars)) {

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: fs/pipe.c:103:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#143: FILE: fs/pipe.c:103:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars)) {
+			return -EFAULT;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#160: FILE: fs/pipe.c:120:
+		int r;
+		if (pio->addr >= vma->vm_end) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: fs/pipe.c:135:
+			int ret;
+			spin_unlock(&mm->page_table_lock);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#193: FILE: fs/pipe.c:153:
+		pcount = PAGE_SIZE-pio->addr%PAGE_SIZE;
 		                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#193: FILE: fs/pipe.c:153:
+		pcount = PAGE_SIZE-pio->addr%PAGE_SIZE;
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: fs/pipe.c:156:
+		r = copy_to_user(ubuf, kaddr+pio->addr%PAGE_SIZE, pcount);
 		                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#196: FILE: fs/pipe.c:156:
+		r = copy_to_user(ubuf, kaddr+pio->addr%PAGE_SIZE, pcount);
 		                                      ^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#223: FILE: fs/pipe.c:183:
+			 * although no data was transfered.
 			                        ^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/pipe.c:212:
+		int chars = PIPE_LEN(*inode);
+		if (chars) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: fs/pipe.c:215:
+			int offset = PIPE_START(*inode);
+			if (chars > count)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#284: FILE: fs/pipe.c:217:
+			if (chars > PIPE_SIZE-offset)
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#285: FILE: fs/pipe.c:218:
+				chars = PIPE_SIZE-offset;
 				                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#286: FILE: fs/pipe.c:219:
+			if (copy_to_user(buf, pipebuf+offset, chars)) {
 			                             ^

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: fs/pipe.c:233:
+			if(chars < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: fs/pipe.c:244:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'read > 0'
#389: FILE: fs/pipe.c:279:
+	if ((read > 0) && !PIPE_LEN(*inode) && list_empty(&PIPE_PIO(*inode)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: fs/pipe.c:320:
+		int offset;
+		ret = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#453: FILE: fs/pipe.c:326:
+		if (free > PIPE_SIZE-offset)
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#454: FILE: fs/pipe.c:327:
+			free = PIPE_SIZE-offset;
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#456: FILE: fs/pipe.c:329:
+		if (copy_from_user(PIPE_BASE(*inode)+offset, buf, free)) {
 		                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: fs/pipe.c:338:
+^I^I^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#482: FILE: fs/pipe.c:344:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#500: FILE: fs/pipe.c:356:
+		if(!access_ok(VERIFY_READ, buf, count))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: fs/pipe.c:360:
+		if (segment_eq(get_fs(),KERNEL_DS))
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: fs/pipe.c:367:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#517: FILE: fs/pipe.c:368:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#523: FILE: fs/pipe.c:373:
+		 * give up this CPU, so it doesnt have to do
 		                           ^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#527: FILE: fs/pipe.c:377:
+		for(;;) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#627: FILE: fs/pipe.c:446:
+		struct pipe_pio * pio;

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: fs/pipe.c:447:
+		struct pipe_pio * pio;
+		pio = list_entry(PIPE_PIO(*inode).next, struct pipe_pio, list);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536454.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 11 warnings, 13 checks, 667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536454.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
