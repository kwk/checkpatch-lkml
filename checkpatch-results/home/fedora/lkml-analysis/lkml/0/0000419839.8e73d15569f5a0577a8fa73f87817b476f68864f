ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#168: FILE: ipc/util.h:57:
+struct kern_ipc_perm* ipc_get(struct ipc_ids* ids, int id);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#168: FILE: ipc/util.h:57:
+struct kern_ipc_perm* ipc_get(struct ipc_ids* ids, int id);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#169: FILE: ipc/util.h:58:
+struct kern_ipc_perm* ipc_lock(struct ipc_ids* ids, int id);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#169: FILE: ipc/util.h:58:
+struct kern_ipc_perm* ipc_lock(struct ipc_ids* ids, int id);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#170: FILE: ipc/util.h:59:
+void ipc_unlock(struct kern_ipc_perm* perm);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#171: FILE: ipc/util.h:60:
+int ipc_buildid(struct ipc_ids* ids, int id, int seq);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#172: FILE: ipc/util.h:61:
+int ipc_checkid(struct ipc_ids* ids, struct kern_ipc_perm* ipcp, int uid);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#172: FILE: ipc/util.h:61:
+int ipc_checkid(struct ipc_ids* ids, struct kern_ipc_perm* ipcp, int uid);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#182: FILE: ipc/util.c:362:
+struct kern_ipc_perm* ipc_get(struct ipc_ids* ids, int id)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#182: FILE: ipc/util.c:362:
+struct kern_ipc_perm* ipc_get(struct ipc_ids* ids, int id)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#184: FILE: ipc/util.c:364:
+	struct kern_ipc_perm* out;

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: ipc/util.c:366:
+	int lid = id % SEQ_MULTIPLIER;
+	if(lid >= ids->size)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#186: FILE: ipc/util.c:366:
+	if(lid >= ids->size)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#188: FILE: ipc/util.c:368:
+	rmb();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#193: FILE: ipc/util.c:373:
+struct kern_ipc_perm* ipc_lock(struct ipc_ids* ids, int id)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#193: FILE: ipc/util.c:373:
+struct kern_ipc_perm* ipc_lock(struct ipc_ids* ids, int id)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#195: FILE: ipc/util.c:375:
+	struct kern_ipc_perm* out;

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: ipc/util.c:379:
+	if(lid >= ids->size)

WARNING:MEMORY_BARRIER: memory barrier without comment
#201: FILE: ipc/util.c:381:
+	rmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!out"
#203: FILE: ipc/util.c:383:
+	if (out == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: ipc/util.c:386:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#219: FILE: ipc/util.c:399:
+void ipc_unlock(struct kern_ipc_perm* perm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#225: FILE: ipc/util.c:405:
+int ipc_buildid(struct ipc_ids* ids, int id, int seq)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#227: FILE: ipc/util.c:407:
+	return SEQ_MULTIPLIER*seq + id;
 	                     ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#230: FILE: ipc/util.c:410:
+int ipc_checkid(struct ipc_ids* ids, struct kern_ipc_perm* ipcp, int uid)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#230: FILE: ipc/util.c:410:
+int ipc_checkid(struct ipc_ids* ids, struct kern_ipc_perm* ipcp, int uid)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#232: FILE: ipc/util.c:412:
+	if(uid/SEQ_MULTIPLIER != ipcp->seq)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: ipc/util.c:412:
+	if(uid/SEQ_MULTIPLIER != ipcp->seq)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 3 warnings, 3 checks, 129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
