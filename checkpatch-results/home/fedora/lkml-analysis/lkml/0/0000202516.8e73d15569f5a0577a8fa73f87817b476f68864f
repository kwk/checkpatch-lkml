WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: kernel/power/disk.c:29:
+extern int swsusp_check(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#98: FILE: kernel/power/disk.c:31:
+extern void swsusp_close(void);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#182: FILE: kernel/power/disk.c:192:
+	if (!error) {
+		error = prepare_devices();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#199: FILE: kernel/power/disk.c:250:
+	if ((error = swsusp_check()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#200: FILE: kernel/power/disk.c:251:
+		goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#204: FILE: kernel/power/disk.c:255:
+	if ((error = prepare_processes())) {

CHECK:CAMELCASE: Avoid CamelCase: <Cleanup>
#206: FILE: kernel/power/disk.c:257:
+		goto Cleanup;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: kernel/power/disk.c:267:
+	if ((error = prepare_devices()))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: kernel/power/disk.c:368:
+static ssize_t resume_show(struct subsystem * subsys, char *buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#238: FILE: kernel/power/disk.c:370:
+	return sprintf(buf,"%d:%d\n", MAJOR(swsusp_resume_device),
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: kernel/power/disk.c:374:
+static ssize_t resume_store(struct subsystem * subsys, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: kernel/power/disk.c:374:
+static ssize_t resume_store(struct subsystem * subsys, const char * buf, size_t n)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: kernel/power/disk.c:386:
+		res = MKDEV(maj,min);
 		               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: kernel/power/disk.c:389:
+			printk("Attempting manual resume\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: kernel/power/swsusp.c:978:
+static unsigned long get_usable_page(unsigned gfp_mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#335: FILE: kernel/power/swsusp.c:1039:
+static struct pbe * swsusp_pagedir_relocate(struct pbe *pblist)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#344: FILE: kernel/power/swsusp.c:1188:
+static const char * sanity_check(void)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#453: FILE: kernel/power/swsusp.c:1394:
+		if (error)
+		    blkdev_put(resume_bdev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 6 warnings, 2 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
