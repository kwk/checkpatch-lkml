WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#60: FILE: include/linux/rmap.h:74:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#60: FILE: include/linux/rmap.h:74:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#60: FILE: include/linux/rmap.h:74:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: mm/rmap.c:449:
+static void __page_set_anon_rmap(struct page *page,
+	struct vm_area_struct *vma, unsigned long address)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#135: FILE: mm/rmap.c:453:
+	BUG_ON(!anon_vma);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#136: FILE: mm/rmap.c:454:
+	anon_vma = (void *) anon_vma + PAGE_MAPPING_ANON;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#137: FILE: mm/rmap.c:455:
+	page->mapping = (struct address_space *) anon_vma;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: mm/rmap.c:487:
+void page_add_new_anon_rmap(struct page *page,
+	struct vm_area_struct *vma, unsigned long address)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#183: FILE: mm/rmap.c:493:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageReferenced>
#237: FILE: include/linux/page-flags.h:185:
+#define __SetPageReferenced(page)	__set_bit(PG_referenced, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137667.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 6 checks, 164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137667.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
