WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
Content-Disposition: attachment; filename="generic-hardirqs-2.6.9-rc1-bk14-A6"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#575: FILE: include/linux/irq.h:77:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#576: FILE: include/linux/irq.h:78:
+extern int setup_irq(unsigned int irq, struct irqaction * new);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: include/linux/irq.h:78:
+extern int setup_irq(unsigned int irq, struct irqaction * new);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#579: FILE: include/linux/irq.h:81:
+extern asmlinkage int handle_IRQ_event(unsigned int irq, struct pt_regs *regs, struct irqaction *action);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#580: FILE: include/linux/irq.h:82:
+extern void synchronize_irq(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: include/linux/irq.h:83:
+extern void free_irq(unsigned int irq, void *dev_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: include/linux/irq.h:84:
+extern void disable_irq_nosync(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#583: FILE: include/linux/irq.h:85:
+extern void disable_irq(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: include/linux/irq.h:86:
+extern void enable_irq(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: include/linux/irq.h:87:
+extern void note_interrupt(int irq, irq_desc_t *desc, int action_ret);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/linux/irq.h:88:
+extern void init_irq_proc(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#654: FILE: kernel/hardirq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#655: FILE: kernel/hardirq.c:2:
+ * linux/kernel/hardirq.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#673: FILE: kernel/hardirq.c:20:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#677: FILE: kernel/hardirq.c:24:
+extern struct irq_desc irq_desc[NR_IRQS];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#679: FILE: kernel/hardirq.c:26:
+static struct proc_dir_entry * root_irq_dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#680: FILE: kernel/hardirq.c:27:
+static struct proc_dir_entry * irq_dir [NR_IRQS];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#680: FILE: kernel/hardirq.c:27:
+static struct proc_dir_entry * irq_dir [NR_IRQS];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: kernel/hardirq.c:40:
+asmlinkage int handle_IRQ_event(unsigned int irq,
+		struct pt_regs *regs, struct irqaction *action)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#721: FILE: kernel/hardirq.c:68:
+		printk(KERN_ERR "irq event %d: bogus return value %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: kernel/hardirq.c:69:
+		printk(KERN_ERR "irq event %d: bogus return value %x\n",
+				irq, action_ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#724: FILE: kernel/hardirq.c:71:
+		printk(KERN_ERR "irq %d: nobody cared!\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#727: FILE: kernel/hardirq.c:74:
+	printk(KERN_ERR "handlers:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#730: FILE: kernel/hardirq.c:77:
+		printk(KERN_ERR "[<%p>]", action->handler);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: kernel/hardirq.c:79:
+		print_symbol(" (%s)",
+			(unsigned long)action->handler);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#733: FILE: kernel/hardirq.c:80:
+		printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#748: FILE: kernel/hardirq.c:95:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#752: FILE: kernel/hardirq.c:99:
+	printk("IRQ lockup detection disabled\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#756: FILE: kernel/hardirq.c:103:
+__setup("noirqdebug", noirqdebug_setup);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#789: FILE: kernel/hardirq.c:136:
+		printk(KERN_EMERG "Disabling IRQ #%d\n", irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#804: FILE: kernel/hardirq.c:151:
+EXPORT_SYMBOL(synchronize_irq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#838: FILE: kernel/hardirq.c:185:
+EXPORT_SYMBOL(disable_irq_nosync);

WARNING:LINE_SPACING: Missing a blank line after declarations
#856: FILE: kernel/hardirq.c:203:
+	irq_desc_t *desc = irq_desc + irq;
+	disable_irq_nosync(irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#861: FILE: kernel/hardirq.c:208:
+EXPORT_SYMBOL(disable_irq);

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: kernel/hardirq.c:230:
+		unsigned int status = desc->status & ~IRQ_DISABLED;
+		desc->status = status;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: kernel/hardirq.c:233:
+			hw_resend_irq(desc->handler,irq);
 			                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#889: FILE: kernel/hardirq.c:236:
+		/* fall-through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#895: FILE: kernel/hardirq.c:242:
+		printk("enable_irq(%u) unbalanced from %p\n", irq,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'enable_irq', this function's name, in a string
#895: FILE: kernel/hardirq.c:242:
+		printk("enable_irq(%u) unbalanced from %p\n", irq,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#901: FILE: kernel/hardirq.c:248:
+EXPORT_SYMBOL(enable_irq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#903: FILE: kernel/hardirq.c:250:
+int setup_irq(unsigned int irq, struct irqaction * new)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#911: FILE: kernel/hardirq.c:258:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#932: FILE: kernel/hardirq.c:279:
+	spin_lock_irqsave(&desc->lock,flags);
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#934: FILE: kernel/hardirq.c:281:
+	if ((old = *p) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#937: FILE: kernel/hardirq.c:284:
+			spin_unlock_irqrestore(&desc->lock,flags);
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: kernel/hardirq.c:306:
+	spin_unlock_irqrestore(&desc->lock,flags);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: kernel/hardirq.c:341:
+	spin_lock_irqsave(&desc->lock,flags);
 	                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#997: FILE: kernel/hardirq.c:344:
+		struct irqaction * action = *p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#998: FILE: kernel/hardirq.c:345:
+		struct irqaction * action = *p;
+		if (action) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1000: FILE: kernel/hardirq.c:347:
+			struct irqaction **pp = p;
+			p = &action->next;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1013: FILE: kernel/hardirq.c:360:
+			spin_unlock_irqrestore(&desc->lock,flags);
 			                                  ^

WARNING:REPEATED_WORD: Possible repeated word: 'free'
#1022: FILE: kernel/hardirq.c:369:
+		printk("Trying to free free IRQ%d\n",irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1022: FILE: kernel/hardirq.c:369:
+		printk("Trying to free free IRQ%d\n",irq);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1022: FILE: kernel/hardirq.c:369:
+		printk("Trying to free free IRQ%d\n",irq);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1023: FILE: kernel/hardirq.c:370:
+		spin_unlock_irqrestore(&desc->lock,flags);
 		                                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1028: FILE: kernel/hardirq.c:375:
+EXPORT_SYMBOL(free_irq);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1034: FILE: kernel/hardirq.c:381:
+cpumask_t irq_affinity[NR_IRQS] = { [0 ... NR_IRQS-1] = CPU_MASK_ALL };
                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: kernel/hardirq.c:384:
+static int irq_affinity_read_proc(char *page, char **start, off_t off,
+			int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1040: FILE: kernel/hardirq.c:387:
+	int len = cpumask_scnprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: kernel/hardirq.c:394:
+static int irq_affinity_write_proc(struct file *file, const char __user *buffer,
+					unsigned long count, void *data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1077: FILE: kernel/hardirq.c:424:
+static int prof_cpu_mask_read_proc (char *page, char **start, off_t off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: kernel/hardirq.c:425:
+static int prof_cpu_mask_read_proc (char *page, char **start, off_t off,
+			int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1081: FILE: kernel/hardirq.c:428:
+	int len = cpumask_scnprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1087: FILE: kernel/hardirq.c:434:
+static int prof_cpu_mask_write_proc (struct file *file, const char __user *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1088: FILE: kernel/hardirq.c:435:
+static int prof_cpu_mask_write_proc (struct file *file, const char __user *buffer,
+					unsigned long count, void *data)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1106: FILE: kernel/hardirq.c:453:
+	char name [MAX_NAMELEN];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq_desc[irq].handler == &no_irq_type'
#1108: FILE: kernel/hardirq.c:455:
+	if (!root_irq_dir || (irq_desc[irq].handler == &no_irq_type) ||
+			irq_dir[irq])

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: kernel/hardirq.c:456:
+	if (!root_irq_dir || (irq_desc[irq].handler == &no_irq_type) ||
+			irq_dir[irq])

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1143: FILE: kernel/hardirq.c:490:
+	char name [MAX_NAMELEN];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1155: FILE: kernel/hardirq.c:502:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 32 warnings, 22 checks, 1090 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
