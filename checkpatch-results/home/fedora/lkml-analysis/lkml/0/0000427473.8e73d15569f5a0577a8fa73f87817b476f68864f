WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
defined for such applications in RFC2553bis, which is successor of RFC2553.  

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#81: FILE: linux/in6.h:173:
+#define IN6_IS_ADDR_UNSPECIFIED(a)			\
+	((((a)->s6_addr32[0]) == 0) &&			\
+	 (((a)->s6_addr32[1]) == 0) &&			\
+	 (((a)->s6_addr32[2]) == 0) &&			\
+	 (((a)->s6_addr32[3]) == 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#88: FILE: linux/in6.h:180:
+#define IN6_IS_ADDR_V4MAPPED(a)				\
+	((((a)->s6_addr32[0]) == 0) &&			\
+	 (((a)->s6_addr32[1]) == 0) &&			\
+	 (((a)->s6_addr32[2]) == __constant_htonl(0x0000ffff)))

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#108: FILE: linux/sysctl.h:372:
+	NET_IPV6_RTR_SOLICIT_DELAY=10,
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#109: FILE: linux/sysctl.h:373:
+	NET_IPV6_BINDV6ONLY=11
 	                   ^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: net/sock.h:174:
+^I                        pmtudisc:2,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: ipv4/tcp_ipv4.c:54:
+ *^I^I^I^I^I  cast address even if SO_REUSEADDR $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#202: FILE: ipv4/tcp_ipv4.c:205:
+		if (sk2->family == AF_INET6) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#205: FILE: ipv4/tcp_ipv4.c:208:
+				&((struct tcp_tw_bucket*)sk2)->v6_rcv_saddr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#212: FILE: ipv4/tcp_ipv4.c:215:
+		} else

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#217: FILE: ipv4/tcp_ipv4.c:220:
+		if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) &&

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for single statement blocks
#225: FILE: ipv4/tcp_ipv4.c:228:
+		if (addr_type2 != IPV6_ADDR_MAPPED && sk2->net_pinfo.af_inet6.ipv6only) {
+			continue;
+		}

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#240: FILE: ipv4/tcp_ipv4.c:243:
+								&((struct tcp_tw_bucket*)sk2)->v6_daddr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#240: FILE: ipv4/tcp_ipv4.c:243:
+								&((struct tcp_tw_bucket*)sk2)->v6_daddr;

CHECK:BRACES: braces {} should be used on all arms of this statement
#244: FILE: ipv4/tcp_ipv4.c:247:
+				if (sk2->family == AF_INET6) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#251: FILE: ipv4/tcp_ipv4.c:254:
+				} else

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#256: FILE: ipv4/tcp_ipv4.c:259:
+				if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#259: FILE: ipv4/tcp_ipv4.c:262:
+				if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: ipv4/tcp_ipv4.c:263:
+				if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) ||
+				     sk->rcv_saddr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk2"
#269: FILE: ipv4/tcp_ipv4.c:271:
+	ret = sk2 != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: ipv4/tcp_ipv4.c:327:
+^I^Iret = 1; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: ipv4/tcp_ipv4.c:328:
+^I^Iif (tb->fastreuse > 0 && $

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#313: FILE: ipv4/tcp_ipv4.c:516:
+				score+=2;
 				     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#319: FILE: ipv4/tcp_ipv4.c:521:
+				score+=2;
 				     ^

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#352: FILE: ipv4/udp.c:67:
+ *					  same port if IPV6_V6ONLY socket opttion is
+ *					  is set.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: ipv4/udp.c:70:
+ *^I^I^I^I^I  cast address even if SO_REUSEADDR $

CHECK:BRACES: braces {} should be used on all arms of this statement
#402: FILE: ipv4/udp.c:187:
+			if (sk2->family == AF_INET6) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#409: FILE: ipv4/udp.c:194:
+			} else

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#415: FILE: ipv4/udp.c:200:
+			if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) &&

WARNING:BRACES: braces {} are not necessary for single statement blocks
#423: FILE: ipv4/udp.c:208:
+			if (addr_type2 != IPV6_ADDR_MAPPED && sk2->net_pinfo.af_inet6.ipv6only) {
+				continue;
+			}

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#432: FILE: ipv4/udp.c:217:
+			    (addr_type2 != IPV6_ADDR_MAPPED ? (addr_type2 & IPV6_ADDR_MULTICAST) : MULTICAST(sk2->rcv_saddr)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: ipv4/udp.c:226:
+					if (sk2->family == AF_INET6) {
[...]
+					} else
[...]

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#442: FILE: ipv4/udp.c:227:
+						if (IN6_IS_ADDR_UNSPECIFIED(&sk2->net_pinfo.af_inet6.daddr))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#442: FILE: ipv4/udp.c:227:
+						if (IN6_IS_ADDR_UNSPECIFIED(&sk2->net_pinfo.af_inet6.daddr))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#444: FILE: ipv4/udp.c:229:
+						else if (IN6_IS_ADDR_V4MAPPED(&sk2->net_pinfo.af_inet6.daddr))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#444: FILE: ipv4/udp.c:229:
+						else if (IN6_IS_ADDR_V4MAPPED(&sk2->net_pinfo.af_inet6.daddr))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#446: FILE: ipv4/udp.c:231:
+						else

CHECK:BRACES: Unbalanced braces around else statement
#448: FILE: ipv4/udp.c:233:
+					} else

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#453: FILE: ipv4/udp.c:238:
+					if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#456: FILE: ipv4/udp.c:241:
+					if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) ||

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: ipv4/udp.c:301:
+			if(sk->family == PF_INET)

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#484: FILE: ipv4/udp.c:311:
+				score+=2;
 				     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#490: FILE: ipv4/udp.c:316:
+				score+=2;
 				     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#496: FILE: ipv4/udp.c:321:
+				score+=2;
 				     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#502: FILE: ipv4/udp.c:326:
+				score+=2;
 				     ^

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: ipv4/udp.c:328:
+			if(score == 9) {

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#604: FILE: ipv6/ipv6_sockglue.c:386:
+		if (sk->userlocks&SOCK_BINDADDR_LOCK)
 		                 ^

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: ipv6/tcp_ipv6.c:23:
+ *^I^I^I^I^I  cast address even if SO_REUSEADDR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: ipv6/tcp_ipv6.c:149:
+^I^I^Istruct in6_addr *sk_rcv_saddr6 = sk->state != TCP_TIME_WAIT ? $

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#655: FILE: ipv6/tcp_ipv6.c:150:
+								&sk->net_pinfo.af_inet6.rcv_saddr:
 								                                 ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#656: FILE: ipv6/tcp_ipv6.c:151:
+								&((struct tcp_tw_bucket*)sk)->v6_rcv_saddr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#656: FILE: ipv6/tcp_ipv6.c:151:
+								&((struct tcp_tw_bucket*)sk)->v6_rcv_saddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#683: FILE: ipv6/tcp_ipv6.c:163:
+				struct in6_addr *sk2_rcv_saddr6;
+				if (sk2 == sk ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#689: FILE: ipv6/tcp_ipv6.c:169:
+							&((struct tcp_tw_bucket*)sk2)->v6_rcv_saddr;

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#691: FILE: ipv6/tcp_ipv6.c:171:
+				if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) &&

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#692: FILE: ipv6/tcp_ipv6.c:172:
+				    (addr_type != IPV6_ADDR_MAPPED ? addr_type != IPV6_ADDR_ANY : sk->rcv_saddr)) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#693: FILE: ipv6/tcp_ipv6.c:173:
+					if (addr_type2 == IPV6_ADDR_MAPPED || addr_type == IPV6_ADDR_MAPPED) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#694: FILE: ipv6/tcp_ipv6.c:174:
+						if (addr_type2 != addr_type ||

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#698: FILE: ipv6/tcp_ipv6.c:178:
+						if (ipv6_addr_cmp(sk2_rcv_saddr6, sk_rcv_saddr6))

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#705: FILE: ipv6/tcp_ipv6.c:185:
+				     addr_type != IPV6_ADDR_MAPPED && sk->net_pinfo.af_inet6.ipv6only) ||

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#707: FILE: ipv6/tcp_ipv6.c:187:
+				     addr_type2 != IPV6_ADDR_MAPPED && sk2->net_pinfo.af_inet6.ipv6only)) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#718: FILE: ipv6/tcp_ipv6.c:198:
+						struct in6_addr *sk2_daddr6 = sk2->state != TCP_TIME_WAIT ?

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#719: FILE: ipv6/tcp_ipv6.c:199:
+										&sk2->net_pinfo.af_inet6.daddr :

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#720: FILE: ipv6/tcp_ipv6.c:200:
+										&((struct tcp_tw_bucket*)sk2)->v6_daddr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#720: FILE: ipv6/tcp_ipv6.c:200:
+										&((struct tcp_tw_bucket*)sk2)->v6_daddr;

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#721: FILE: ipv6/tcp_ipv6.c:201:
+						int addr_type2d = sk2->family == AF_INET6 ? ipv6_addr_type(sk2_daddr6) : IPV6_ADDR_MAPPED;

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#722: FILE: ipv6/tcp_ipv6.c:202:
+						if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: ipv6/tcp_ipv6.c:202:
+						int addr_type2d = sk2->family == AF_INET6 ? ipv6_addr_type(sk2_daddr6) : IPV6_ADDR_MAPPED;
+						if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#722: FILE: ipv6/tcp_ipv6.c:202:
+						if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: ipv6/tcp_ipv6.c:205:
+^I^I^I^I^I^Iif ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) || $

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#725: FILE: ipv6/tcp_ipv6.c:205:
+						if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) || 

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#725: FILE: ipv6/tcp_ipv6.c:205:
+						if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) || 

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#726: FILE: ipv6/tcp_ipv6.c:206:
+						    (addr_type != IPV6_ADDR_MAPPED ? addr_type != IPV6_ADDR_ANY : sk->rcv_saddr))

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: ipv6/udp.c:20:
+ *^I^I^I^I^I  cast address even if SO_REUSEADDR $

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#783: FILE: ipv6/udp.c:118:
+		    (addr_type != IPV6_ADDR_MAPPED ? (addr_type & IPV6_ADDR_MULTICAST) : MULTICAST(sk->rcv_saddr)))

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#809: FILE: ipv6/udp.c:132:
+			addr_type2 = sk2->family == AF_INET6 ? ipv6_addr_type(&sk2->net_pinfo.af_inet6.rcv_saddr) : IPV6_ADDR_MAPPED;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#811: FILE: ipv6/udp.c:134:
+			if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) &&

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#812: FILE: ipv6/udp.c:135:
+			    (addr_type != IPV6_ADDR_MAPPED ? addr_type != IPV6_ADDR_ANY : sk->rcv_saddr)) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#813: FILE: ipv6/udp.c:136:
+				if (addr_type2 == IPV6_ADDR_MAPPED || addr_type == IPV6_ADDR_MAPPED) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#825: FILE: ipv6/udp.c:148:
+^I^I^Iif ((addr_type2 == IPV6_ADDR_MAPPED && $

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#836: FILE: ipv6/udp.c:159:
+			    (addr_type2 != IPV6_ADDR_MAPPED ? (addr_type2 & IPV6_ADDR_MULTICAST) : MULTICAST(sk2->rcv_saddr)))

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#843: FILE: ipv6/udp.c:166:
+					int addr_type2d = sk2->family == AF_INET6 ? ipv6_addr_type(&sk2->net_pinfo.af_inet6.daddr) : IPV6_ADDR_MAPPED;

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#844: FILE: ipv6/udp.c:167:
+					if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#844: FILE: ipv6/udp.c:167:
+					int addr_type2d = sk2->family == AF_INET6 ? ipv6_addr_type(&sk2->net_pinfo.af_inet6.daddr) : IPV6_ADDR_MAPPED;
+					if (addr_type2d != IPV6_ADDR_MAPPED ? addr_type2d != IPV6_ADDR_ANY : sk2->daddr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: ipv6/udp.c:170:
+^I^I^I^I^Iif ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) || $

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#847: FILE: ipv6/udp.c:170:
+					if ((addr_type2 != IPV6_ADDR_MAPPED ? addr_type2 != IPV6_ADDR_ANY : sk2->rcv_saddr) || 

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#848: FILE: ipv6/udp.c:171:
+					    (addr_type != IPV6_ADDR_MAPPED ? addr_type != IPV6_ADDR_ANY : sk->rcv_saddr))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 58 warnings, 13 checks, 719 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427473.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
