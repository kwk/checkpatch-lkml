WARNING:TYPO_SPELLING: 'recieving' may be misspelled - perhaps 'receiving'?
#18: 
After recieving lots of input (including a name change)
      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#39: 
"sys_fork" printk'ed everytime somebody calls the
                     ^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
[root@penguin2 root]# echo "add 0xc0107d50 sys_fork" > /sys/kprobes_printk/ctl

WARNING:TYPO_SPELLING: 'addes' may be misspelled - perhaps 'adds'?
#68: 
* A tweak to traps.c that addes an exported function
                          ^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#	           ChangeSet	1.876   -> 1.877  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#	   arch/i386/Kconfig	1.13    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#	drivers/char/Makefile	1.46    -> 1.47   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#	               (new)	        -> 1.1     drivers/char/kprobes_printk.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
# 02/11/26	rusty@penguin.(none)	1.877

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
# Adding KPROBES_PRINTK option to build the kprobes printk driver that 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
# enables arbitrary printk statements to be inserted into valid kernel

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
# address using kprobes.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#111: 
--- a/arch/i386/Kconfig	Tue Nov 26 10:54:44 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: arch/i386/Kconfig:1569:
+^I  User space can access this functionality through sysfs.  For $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: arch/i386/Kconfig:1571:
+^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/i386/Kconfig:1574:
+^I  The module will be called kprobes_printk.o.  If you want to compile $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: drivers/char/kprobes_printk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: drivers/char/kprobes_printk.c:7:
+ * is reached, the message is printed. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: drivers/char/kprobes_printk.c:9:
+ * This uses a sysfs control file to manage a list of probes. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: drivers/char/kprobes_printk.c:14:
+ * and the control is named 'ctl'. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: drivers/char/kprobes_printk.c:20:
+ * where <address> is the address to break on, and <message> $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: drivers/char/kprobes_printk.c:21:
+ * is the message to print when the address is reached. $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: drivers/char/kprobes_printk.c:48:
+#define to_nprobe(entry) container_of(entry,struct nprobe,kobj.entry);
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: drivers/char/kprobes_printk.c:48:
+#define to_nprobe(entry) container_of(entry,struct nprobe,kobj.entry);
                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#199: FILE: drivers/char/kprobes_printk.c:48:
+#define to_nprobe(entry) container_of(entry,struct nprobe,kobj.entry);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#199: FILE: drivers/char/kprobes_printk.c:48:
+#define to_nprobe(entry) container_of(entry,struct nprobe,kobj.entry);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/char/kprobes_printk.c:62:
+/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: drivers/char/kprobes_printk.c:69:
+	struct nprobe *c = container_of(p, struct nprobe, probe);
+	printk(KERN_CRIT "%s: %s\n", __FUNCTION__, c->message);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#220: FILE: drivers/char/kprobes_printk.c:69:
+	printk(KERN_CRIT "%s: %s\n", __FUNCTION__, c->message);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#220: FILE: drivers/char/kprobes_printk.c:69:
+	printk(KERN_CRIT "%s: %s\n", __FUNCTION__, c->message);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: drivers/char/kprobes_printk.c:72:
+static void kp_post_handler(struct kprobe *p, struct pt_regs *r, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: drivers/char/kprobes_printk.c:82:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: drivers/char/kprobes_printk.c:84:
+ * struct kp_attribute - used for defining probe attributes, $

ERROR:SPACING: space required after that ',' (ctx:OxV)
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);
 	                                             ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nprobe *' should also have an identifier name
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#240: FILE: drivers/char/kprobes_printk.c:89:
+	ssize_t (*show)(struct nprobe *,char *,size_t,loff_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: drivers/char/kprobes_printk.c:92:
+
+

WARNING:TYPO_SPELLING: 'acessed' may be misspelled - perhaps 'accessed'?
#246: FILE: drivers/char/kprobes_printk.c:95:
+ *	@kobj:	kobject of probe being acessed.
   	      	                       ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: drivers/char/kprobes_printk.c:106:
+static ssize_t kp_attr_show(struct kobject * kobj, struct attribute * attr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: drivers/char/kprobes_printk.c:106:
+static ssize_t kp_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: drivers/char/kprobes_printk.c:107:
+			    char * page, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#260: FILE: drivers/char/kprobes_printk.c:109:
+	struct nprobe * n = container_of(kobj,struct nprobe,kobj);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: drivers/char/kprobes_printk.c:109:
+	struct nprobe * n = container_of(kobj,struct nprobe,kobj);
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: drivers/char/kprobes_printk.c:109:
+	struct nprobe * n = container_of(kobj,struct nprobe,kobj);
 	                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: drivers/char/kprobes_printk.c:110:
+^Istruct kp_attribute * kp_attr = $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: drivers/char/kprobes_printk.c:110:
+	struct kp_attribute * kp_attr = 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#262: FILE: drivers/char/kprobes_printk.c:111:
+		container_of(attr,struct kp_attribute,attr);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#262: FILE: drivers/char/kprobes_printk.c:111:
+		container_of(attr,struct kp_attribute,attr);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: drivers/char/kprobes_printk.c:112:
+	return kp_attr->show ? kp_attr->show(n,page,count,off) : 0;
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: drivers/char/kprobes_printk.c:112:
+	return kp_attr->show ? kp_attr->show(n,page,count,off) : 0;
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: drivers/char/kprobes_printk.c:112:
+	return kp_attr->show ? kp_attr->show(n,page,count,off) : 0;
 	                                                 ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#269: FILE: drivers/char/kprobes_printk.c:118:
+static struct sysfs_ops kp_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: drivers/char/kprobes_printk.c:122:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: drivers/char/kprobes_printk.c:124:
+static ssize_t kp_message_read(struct nprobe * n, char * page, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: drivers/char/kprobes_printk.c:124:
+static ssize_t kp_message_read(struct nprobe * n, char * page, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: drivers/char/kprobes_printk.c:124:
+static ssize_t kp_message_read(struct nprobe * n, char * page, 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#278: FILE: drivers/char/kprobes_printk.c:127:
+	return off ? 0: snprintf(page,MAX_MSG_SIZE,"%s\n",n->message);
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: drivers/char/kprobes_printk.c:127:
+	return off ? 0: snprintf(page,MAX_MSG_SIZE,"%s\n",n->message);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: drivers/char/kprobes_printk.c:127:
+	return off ? 0: snprintf(page,MAX_MSG_SIZE,"%s\n",n->message);
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: drivers/char/kprobes_printk.c:127:
+	return off ? 0: snprintf(page,MAX_MSG_SIZE,"%s\n",n->message);
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#282: FILE: drivers/char/kprobes_printk.c:131:
+	.attr	= { .name = "message", .mode = S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: drivers/char/kprobes_printk.c:136:
+static struct attribute * default_attrs[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: drivers/char/kprobes_printk.c:141:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: drivers/char/kprobes_printk.c:149:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: drivers/char/kprobes_printk.c:152:
+ * This is declared as an attribute of the subsystem, and added in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/char/kprobes_printk.c:153:
+ * kp_init(). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/char/kprobes_printk.c:154:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: drivers/char/kprobes_printk.c:156:
+ * Writing to it either adds or deletes a kp probe, as described at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: drivers/char/kprobes_printk.c:159:
+static ssize_t ctl_show(struct subsystem * s, char * page, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: drivers/char/kprobes_printk.c:159:
+static ssize_t ctl_show(struct subsystem * s, char * page, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: drivers/char/kprobes_printk.c:159:
+static ssize_t ctl_show(struct subsystem * s, char * page, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: drivers/char/kprobes_printk.c:162:
+	char * str = page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: drivers/char/kprobes_printk.c:167:
+		struct list_head * entry, * next;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#318: FILE: drivers/char/kprobes_printk.c:167:
+		struct list_head * entry, * next;
 		                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: drivers/char/kprobes_printk.c:168:
+		struct list_head * entry, * next;
+		list_for_each_safe(entry,next,&kp_subsys.list) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: drivers/char/kprobes_printk.c:168:
+		list_for_each_safe(entry,next,&kp_subsys.list) {
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#319: FILE: drivers/char/kprobes_printk.c:168:
+		list_for_each_safe(entry,next,&kp_subsys.list) {
 		                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#319: FILE: drivers/char/kprobes_printk.c:168:
+		list_for_each_safe(entry,next,&kp_subsys.list) {
 		                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: drivers/char/kprobes_printk.c:169:
+			struct nprobe * n = to_nprobe(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: drivers/char/kprobes_printk.c:170:
+			struct nprobe * n = to_nprobe(entry);
+			if ((ret + MAX_MSG_SIZE) > PAGE_SIZE)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: drivers/char/kprobes_printk.c:172:
+			str += snprintf(str,PAGE_SIZE - ret,"%p: %s\n",
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: drivers/char/kprobes_printk.c:172:
+			str += snprintf(str,PAGE_SIZE - ret,"%p: %s\n",
 			                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#324: FILE: drivers/char/kprobes_printk.c:173:
+					n->probe.addr,n->message);
 					             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: drivers/char/kprobes_printk.c:181:
+static int add(unsigned long addr, char * message)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: drivers/char/kprobes_printk.c:183:
+	struct nprobe * n;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: drivers/char/kprobes_printk.c:189:
+	n = kmalloc(sizeof(struct nprobe),GFP_KERNEL);
 	                                 ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*n)...) over kmalloc(sizeof(struct nprobe)...)
#340: FILE: drivers/char/kprobes_printk.c:189:
+	n = kmalloc(sizeof(struct nprobe),GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: drivers/char/kprobes_printk.c:192:
+	memset(n,0,sizeof(struct nprobe));
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: drivers/char/kprobes_printk.c:192:
+	memset(n,0,sizeof(struct nprobe));
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: drivers/char/kprobes_printk.c:195:
+	strncpy(n->message,message,MAX_MSG_SIZE);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: drivers/char/kprobes_printk.c:195:
+	strncpy(n->message,message,MAX_MSG_SIZE);
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: drivers/char/kprobes_printk.c:204:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#356: FILE: drivers/char/kprobes_printk.c:205:
+	if ((error = register_kprobe(&n->probe))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: drivers/char/kprobes_printk.c:206:
+^I^Iprintk(KERN_ERR "Unable to register probe at %p\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#357: FILE: drivers/char/kprobes_printk.c:206:
+		printk(KERN_ERR "Unable to register probe at %p\n", 

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#359: FILE: drivers/char/kprobes_printk.c:208:
+		goto Error;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#365: FILE: drivers/char/kprobes_printk.c:214:
+	if ((error = kobject_register(&n->kobj))) {

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#371: FILE: drivers/char/kprobes_printk.c:220:
+	goto Done;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: drivers/char/kprobes_printk.c:229:
+	struct list_head * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#381: FILE: drivers/char/kprobes_printk.c:230:
+	struct nprobe * n;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#383: FILE: drivers/char/kprobes_printk.c:232:
+	list_for_each(entry,&kp_subsys.list) {
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#383: FILE: drivers/char/kprobes_printk.c:232:
+	list_for_each(entry,&kp_subsys.list) {
 	                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n->probe.addr'
#385: FILE: drivers/char/kprobes_printk.c:234:
+		if ((unsigned long)(n->probe.addr) == addr) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: drivers/char/kprobes_printk.c:244:
+static ssize_t ctl_store(struct subsystem * s, const char * page, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: drivers/char/kprobes_printk.c:244:
+static ssize_t ctl_store(struct subsystem * s, const char * page, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: drivers/char/kprobes_printk.c:244:
+static ssize_t ctl_store(struct subsystem * s, const char * page, 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: drivers/char/kprobes_printk.c:257:
+	num = sscanf(page,"%15s 0x%lx %128s",ctl,&addr,message);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: drivers/char/kprobes_printk.c:257:
+	num = sscanf(page,"%15s 0x%lx %128s",ctl,&addr,message);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#408: FILE: drivers/char/kprobes_printk.c:257:
+	num = sscanf(page,"%15s 0x%lx %128s",ctl,&addr,message);
 	                                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#408: FILE: drivers/char/kprobes_printk.c:257:
+	num = sscanf(page,"%15s 0x%lx %128s",ctl,&addr,message);
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: drivers/char/kprobes_printk.c:257:
+	num = sscanf(page,"%15s 0x%lx %128s",ctl,&addr,message);
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: drivers/char/kprobes_printk.c:262:
+	if (!strcmp(ctl,"add") && num == 3)
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: drivers/char/kprobes_printk.c:263:
+		error = add(addr,message);
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: drivers/char/kprobes_printk.c:264:
+	else if (!strcmp(ctl,"del") && num == 2)
 	                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: drivers/char/kprobes_printk.c:280:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#435: FILE: drivers/char/kprobes_printk.c:284:
+	subsys_create_file(&kp_subsys,&subsys_attr_ctl);
 	                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#435: FILE: drivers/char/kprobes_printk.c:284:
+	subsys_create_file(&kp_subsys,&subsys_attr_ctl);
 	                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#439: FILE: drivers/char/kprobes_printk.c:288:
+static void __exit kp_exit (void)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#441: FILE: drivers/char/kprobes_printk.c:290:
+	subsys_remove_file(&kp_subsys,&subsys_attr_ctl);
 	                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#441: FILE: drivers/char/kprobes_printk.c:290:
+	subsys_remove_file(&kp_subsys,&subsys_attr_ctl);
 	                              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410878.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 85 errors, 37 warnings, 11 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410878.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
