ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: modinfo.8:59:
+\fBmodinfo\fR [\fB-0\fP]  [\fB-F \fIfield\fR\fP]  [\fB-T \fIkernelfile\fR\fP]  [modulename|filename \&...]  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: modinfo.8:83:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: modinfo.8:84:
+.PP $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: modinfo.8:116:
+.IP "\fB-T\fP \fB--taint\fP         " 10 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: modinfo.8:119:
+ $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#188: FILE: modinfo.c:355:
+	return (strcmp(license, "GPL") == 0
+		|| strcmp(license, "GPL v2") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#189: FILE: modinfo.c:356:
+		|| strcmp(license, "GPL v2") == 0
+		|| strcmp(license, "GPL and additional rights") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#190: FILE: modinfo.c:357:
+		|| strcmp(license, "GPL and additional rights") == 0
+		|| strcmp(license, "Dual BSD/GPL") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#191: FILE: modinfo.c:358:
+		|| strcmp(license, "Dual BSD/GPL") == 0
+		|| strcmp(license, "Dual MPL/GPL") == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: modinfo.c:392:
+		printf("%s: taint: No version magic\n",
+			filename);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#239: FILE: modinfo.c:406:
+		free (buf);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#251: FILE: modinfo.c:418:
+		if (strstr(buf, "gcc-") == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: modinfo.c:430:
+		printf("%s: taint: [for CONFIG_MODVERSIONS=n] version magic '%s' should be '%s'\n",
+			filename, modmagic, kernel_magic);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: modinfo.c:434:
+		printf("%s: taint: [for CONFIG_MODVERSIONS=y] version magic '%s' should be '%s'\n",
+			filename, modmagic, kernel_magic);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: modinfo.c:467:
+	while ((opt = getopt_long(argc,argv,"adlpVT:hn0F:",options,NULL)) >= 0){
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: modinfo.c:467:
+	while ((opt = getopt_long(argc,argv,"adlpVT:hn0F:",options,NULL)) >= 0){
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: modinfo.c:467:
+	while ((opt = getopt_long(argc,argv,"adlpVT:hn0F:",options,NULL)) >= 0){
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: modinfo.c:467:
+	while ((opt = getopt_long(argc,argv,"adlpVT:hn0F:",options,NULL)) >= 0){
 	                                                          ^

ERROR:SPACING: space required before the open brace '{'
#297: FILE: modinfo.c:467:
+	while ((opt = getopt_long(argc,argv,"adlpVT:hn0F:",options,NULL)) >= 0){

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#305: FILE: modinfo.c:475:
+		case 'T': check_taint = 1; kernel = optarg; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: modinfo.c:512:
+			exports = get_section(mod, modulesize, &exports_size,
+					"__ksymtab");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: modinfo.c:514:
+			gpls = get_section(mod, modulesize, &gpls_size,
+					"__ksymtab_gpl");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: modinfo.c:516:
+			crc = get_section(mod, modulesize, &crc_size,
+					"__kcrctab");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: modinfo.c:518:
+			gplcrc = get_section(mod, modulesize, &gplcrc_size,
+					"__kcrctab_gpl");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: modinfo.c:520:
+			setup = get_section(mod, modulesize, &setup_size,
+					"__param");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: modinfo.c:522:
+			obs_parm = get_section(mod, modulesize, &obs_parm_size,
+					"__obsparm");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: modinfo.c:524:
+			versions = get_section(mod, modulesize, &versions_size,
+					"__versions");

WARNING:LONG_LINE_STRING: line length of 134 exceeds 100 columns
#351: FILE: modinfo.c:534:
+			printf("*** export: %p, gpls: %p, crc: %p, gplcrc: %p, setup: %p, obs_parm: %p, versions: %p, modmagic: %p\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: modinfo.c:535:
+			printf("*** export: %p, gpls: %p, crc: %p, gplcrc: %p, setup: %p, obs_parm: %p, versions: %p, modmagic: %p\n",
+				exports, gpls, crc, gplcrc,

WARNING:SPLIT_STRING: quoted string split across lines
#367: FILE: modinfo.c:550:
+				printf("*** %s: taint [if CONFIG_MODVERSIONS=y]: "
+					"No versions for exported symbols.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#371: FILE: modinfo.c:554:
+				printf("*** %s: warning: ignoring new-style "
+					"parameters in presence of obsolete "

WARNING:SPLIT_STRING: quoted string split across lines
#372: FILE: modinfo.c:555:
+					"parameters in presence of obsolete "
+					"ones\n", filename);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#385: FILE: modversions.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#389: FILE: modversions.h:5:
+struct modversion_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175844.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 6 warnings, 16 checks, 308 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175844.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
