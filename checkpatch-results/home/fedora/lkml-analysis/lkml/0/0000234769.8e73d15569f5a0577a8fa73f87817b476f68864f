ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: fs/sysfs/dir.c:178:
+	struct sysfs_dirent * parent_sd = dentry->d_fsdata;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: fs/sysfs/dir.c:179:
+	struct sysfs_dirent * sd, * tmp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#86: FILE: fs/sysfs/dir.c:179:
+	struct sysfs_dirent * sd, * tmp;
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: fs/sysfs/inode.c:97:
+const unsigned char * sysfs_get_name(struct sysfs_dirent *sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: fs/sysfs/inode.c:99:
+	struct attribute * attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: fs/sysfs/inode.c:100:
+	struct bin_attribute * bin_attr;

ERROR:POINTER_LOCATION: "foo  * bar" should be "foo  *bar"
#172: FILE: fs/sysfs/inode.c:101:
+	struct sysfs_symlink  * sl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#175: FILE: fs/sysfs/inode.c:104:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#177: FILE: fs/sysfs/inode.c:106:
+	switch (sd->s_type) {
+		case SYSFS_DIR:
[...]
+		case SYSFS_KOBJ_ATTR:
[...]
+		case SYSFS_KOBJ_BIN_ATTR:
[...]
+		case SYSFS_KOBJ_LINK:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#197: FILE: fs/sysfs/inode.c:126:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: fs/sysfs/inode.c:131:
+void sysfs_drop_dentry(struct sysfs_dirent * sd, struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: fs/sysfs/inode.c:131:
+void sysfs_drop_dentry(struct sysfs_dirent * sd, struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: fs/sysfs/inode.c:133:
+	struct dentry * dentry = sd->s_dentry;

CHECK:BRACES: braces {} should be used on all arms of this statement
#208: FILE: fs/sysfs/inode.c:137:
+		if (!(d_unhashed(dentry) && dentry->d_inode)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#213: FILE: fs/sysfs/inode.c:142:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: fs/sysfs/inode.c:150:
+	struct sysfs_dirent * parent_sd = dir->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: fs/sysfs/sysfs.h:17:
+extern const unsigned char * sysfs_get_name(struct sysfs_dirent *sd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: fs/sysfs/sysfs.h:17:
+extern const unsigned char * sysfs_get_name(struct sysfs_dirent *sd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: fs/sysfs/sysfs.h:18:
+extern void sysfs_drop_dentry(struct sysfs_dirent *sd, struct dentry *parent);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: fs/sysfs/sysfs.h:76:
+static inline struct sysfs_dirent * sysfs_get(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: fs/sysfs/sysfs.h:76:
+static inline struct sysfs_dirent * sysfs_get(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: fs/sysfs/sysfs.h:85:
+static inline void sysfs_put(struct sysfs_dirent * sd)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 1 warnings, 5 checks, 225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
