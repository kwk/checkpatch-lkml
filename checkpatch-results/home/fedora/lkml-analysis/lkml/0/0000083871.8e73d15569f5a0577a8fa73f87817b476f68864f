WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#29: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Shailabh Nagar <nagar@watson.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Vivek Kashyap <kashyapv@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Matt Helsley <matthltc@us.ibm.com>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: kernel/ckrm/ckrm.c:128:
+struct ckrm_class *ckrm_alloc_class(struct ckrm_class *parent,
+						const char *name)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: kernel/ckrm/ckrm.c:133:
+	BUG_ON(parent == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#125: FILE: kernel/ckrm/ckrm.c:133:
+	BUG_ON(parent == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*class)...) over kzalloc(sizeof(struct ckrm_class)...)
#128: FILE: kernel/ckrm/ckrm.c:136:
+	class = kzalloc(sizeof(struct ckrm_class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: kernel/ckrm/ckrm.c:158:
+		struct ckrm_controller *ctlr = ckrm_get_controller_by_id(i);
+		if (!ctlr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: kernel/ckrm/ckrm.c:197:
+	BUG_ON(ckrm_is_class_root(class));

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: kernel/ckrm/ckrm.c:201:
+		struct ckrm_controller *ctlr = ckrm_get_controller_by_id(i);
+		if (!ctlr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: kernel/ckrm/ckrm.c:225:
+	BUG_ON(ckrm_is_class_root(class));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#218: FILE: kernel/ckrm/ckrm.c:236:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: kernel/ckrm/ckrm.c:283:
+  ^Iread_lock(&ckrm_class_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: kernel/ckrm/ckrm.c:283:
+  ^Iread_lock(&ckrm_class_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: kernel/ckrm/ckrm.c:283:
+  ^Iread_lock(&ckrm_class_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: kernel/ckrm/ckrm.c:287:
+  ^I^Ido_alloc_shares_struct(class, ctlr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: kernel/ckrm/ckrm.c:287:
+  ^I^Ido_alloc_shares_struct(class, ctlr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: kernel/ckrm/ckrm.c:287:
+  ^I^Ido_alloc_shares_struct(class, ctlr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: kernel/ckrm/ckrm.c:293:
+  ^Iread_unlock(&ckrm_class_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: kernel/ckrm/ckrm.c:293:
+  ^Iread_unlock(&ckrm_class_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: kernel/ckrm/ckrm.c:293:
+  ^Iread_unlock(&ckrm_class_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: kernel/ckrm/ckrm.c:330:
+  ^Iread_lock(&ckrm_class_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: kernel/ckrm/ckrm.c:330:
+  ^Iread_lock(&ckrm_class_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: kernel/ckrm/ckrm.c:330:
+  ^Iread_lock(&ckrm_class_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: kernel/ckrm/ckrm.c:334:
+  ^I^Ido_free_shares_struct(class, ctlr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: kernel/ckrm/ckrm.c:334:
+  ^I^Ido_free_shares_struct(class, ctlr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: kernel/ckrm/ckrm.c:334:
+  ^I^Ido_free_shares_struct(class, ctlr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: kernel/ckrm/ckrm.c:340:
+  ^Iread_unlock(&ckrm_class_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: kernel/ckrm/ckrm.c:340:
+  ^Iread_unlock(&ckrm_class_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: kernel/ckrm/ckrm.c:340:
+  ^Iread_unlock(&ckrm_class_lock);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#303: FILE: kernel/ckrm/ckrm.c:351:
+EXPORT_SYMBOL_GPL(ckrm_free_class);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#304: FILE: kernel/ckrm/ckrm.c:352:
+EXPORT_SYMBOL_GPL(ckrm_default_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#305: FILE: kernel/ckrm/ckrm.c:353:
+EXPORT_SYMBOL_GPL(ckrm_get_controller_by_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#306: FILE: kernel/ckrm/ckrm.c:354:
+EXPORT_SYMBOL_GPL(ckrm_get_controller_by_id);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#307: FILE: kernel/ckrm/ckrm.c:355:
+EXPORT_SYMBOL_GPL(ckrm_put_controller);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#317: FILE: include/linux/ckrm_rc.h:68:
+static inline int ckrm_is_class_root(const struct ckrm_class* class)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'parent' may be better as '(parent)' to avoid precedence issues
#322: FILE: include/linux/ckrm_rc.h:73:
+#define for_each_child(child, parent)	\
+	list_for_each_entry(child, &parent->children, siblings)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083871.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 28 warnings, 5 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083871.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
