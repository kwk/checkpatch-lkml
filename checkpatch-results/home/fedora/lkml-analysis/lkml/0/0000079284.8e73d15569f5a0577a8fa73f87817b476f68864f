WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: include/asm-i386/mach-default/mach_desc.h:1:
+#ifndef __ASM_MACH_DESC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#144: FILE: include/asm-i386/mach-default/mach_desc.h:4:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))
                                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#144: FILE: include/asm-i386/mach-default/mach_desc.h:4:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#145: FILE: include/asm-i386/mach-default/mach_desc.h:5:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#145: FILE: include/asm-i386/mach-default/mach_desc.h:5:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#147: FILE: include/asm-i386/mach-default/mach_desc.h:7:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#147: FILE: include/asm-i386/mach-default/mach_desc.h:7:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#148: FILE: include/asm-i386/mach-default/mach_desc.h:8:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#148: FILE: include/asm-i386/mach-default/mach_desc.h:8:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#149: FILE: include/asm-i386/mach-default/mach_desc.h:9:
+#define load_tr(tr) __asm__ __volatile("ltr %0"::"mr" (tr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#150: FILE: include/asm-i386/mach-default/mach_desc.h:10:
+#define load_ldt(ldt) __asm__ __volatile("lldt %0"::"mr" (ldt))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#152: FILE: include/asm-i386/mach-default/mach_desc.h:12:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#152: FILE: include/asm-i386/mach-default/mach_desc.h:12:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#152: FILE: include/asm-i386/mach-default/mach_desc.h:12:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#153: FILE: include/asm-i386/mach-default/mach_desc.h:13:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#153: FILE: include/asm-i386/mach-default/mach_desc.h:13:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#153: FILE: include/asm-i386/mach-default/mach_desc.h:13:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#154: FILE: include/asm-i386/mach-default/mach_desc.h:14:
+#define store_tr(tr) __asm__ ("str %0":"=mr" (tr))
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#154: FILE: include/asm-i386/mach-default/mach_desc.h:14:
+#define store_tr(tr) __asm__ ("str %0":"=mr" (tr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#155: FILE: include/asm-i386/mach-default/mach_desc.h:15:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=mr" (ldt))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#155: FILE: include/asm-i386/mach-default/mach_desc.h:15:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=mr" (ldt))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/asm-i386/mach-default/mach_desc.h:17:
+#define _set_tssldt_desc(n,addr,limit,type) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/asm-i386/mach-default/mach_desc.h:17:
+#define _set_tssldt_desc(n,addr,limit,type) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/asm-i386/mach-default/mach_desc.h:17:
+#define _set_tssldt_desc(n,addr,limit,type) \
                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#157: FILE: include/asm-i386/mach-default/mach_desc.h:17:
+#define _set_tssldt_desc(n,addr,limit,type) \
+__asm__ __volatile__ ("movw %w3,0(%2)\n\t" \
+	"movw %w1,2(%2)\n\t" \
+	"rorl $16,%1\n\t" \
+	"movb %b1,4(%2)\n\t" \
+	"movb %4,5(%2)\n\t" \
+	"movb $0,6(%2)\n\t" \
+	"movb %h1,7(%2)\n\t" \
+	"rorl $16,%1" \
+	: "=m"(*(n)) : "q" (addr), "r"(n), "ir"(limit), "i"(type))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#157: FILE: include/asm-i386/mach-default/mach_desc.h:17:
+#define _set_tssldt_desc(n,addr,limit,type) \
+__asm__ __volatile__ ("movw %w3,0(%2)\n\t" \
+	"movw %w1,2(%2)\n\t" \
+	"rorl $16,%1\n\t" \
+	"movb %b1,4(%2)\n\t" \
+	"movb %4,5(%2)\n\t" \
+	"movb $0,6(%2)\n\t" \
+	"movb %h1,7(%2)\n\t" \
+	"rorl $16,%1" \
+	: "=m"(*(n)) : "q" (addr), "r"(n), "ir"(limit), "i"(type))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: include/asm-i386/mach-default/mach_desc.h:31:
+	_set_tssldt_desc(&get_cpu_gdt_table(cpu)[entry], (int)addr,
+		offsetof(struct tss_struct, __cacheline_filler) - 1, 0x89);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/asm-i386/mach-default/mach_desc.h:34:
+#define set_tss_desc(cpu,addr) __set_tss_desc(cpu, GDT_ENTRY_TSS, addr)
                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: include/asm-i386/mach-default/mach_desc.h:38:
+	_set_tssldt_desc(&get_cpu_gdt_table(cpu)[GDT_ENTRY_LDT], (int)addr, ((size << 3)-1), 0x82);
 	                                                                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#181: FILE: include/asm-i386/mach-default/mach_desc.h:41:
+#define DEFAULT_LDT &default_ldt[0]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#191: FILE: include/asm-i386/mach-default/mach_desc.h:51:
+	__u32 *lp = (__u32 *)((char *)ldt + entry*8);
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#193: FILE: include/asm-i386/mach-default/mach_desc.h:53:
+	*(lp+1) = entry_b;
 	    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#202: FILE: include/asm-i386/mach-default/mach_desc.h:62:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#202: FILE: include/asm-i386/mach-default/mach_desc.h:62:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#202: FILE: include/asm-i386/mach-default/mach_desc.h:62:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#211: FILE: include/asm-i386/mach-xen/mach_desc.h:1:
+#ifndef __ASM_MACH_DESC_H

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#219: FILE: include/asm-i386/mach-xen/mach_desc.h:9:
+	struct Xgt_desc_struct *gdt_descr = (dtr);			\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: include/asm-i386/mach-xen/mach_desc.h:22:
+		BUG();							\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#236: FILE: include/asm-i386/mach-xen/mach_desc.h:26:
+#define load_tr(tr) __asm__ __volatile("ltr %0"::"mr" (tr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#237: FILE: include/asm-i386/mach-xen/mach_desc.h:27:
+#define load_ldt(ldt) __asm__ __volatile("lldt %0"::"mr" (ldt))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#239: FILE: include/asm-i386/mach-xen/mach_desc.h:29:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#239: FILE: include/asm-i386/mach-xen/mach_desc.h:29:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#239: FILE: include/asm-i386/mach-xen/mach_desc.h:29:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#240: FILE: include/asm-i386/mach-xen/mach_desc.h:30:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#240: FILE: include/asm-i386/mach-xen/mach_desc.h:30:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#240: FILE: include/asm-i386/mach-xen/mach_desc.h:30:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#241: FILE: include/asm-i386/mach-xen/mach_desc.h:31:
+#define store_tr(tr) __asm__ ("str %0":"=mr" (tr))
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#241: FILE: include/asm-i386/mach-xen/mach_desc.h:31:
+#define store_tr(tr) __asm__ ("str %0":"=mr" (tr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#242: FILE: include/asm-i386/mach-xen/mach_desc.h:32:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=mr" (ldt))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#242: FILE: include/asm-i386/mach-xen/mach_desc.h:32:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=mr" (ldt))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#244: FILE: include/asm-i386/mach-xen/mach_desc.h:34:
+#define set_tss_desc(cpu,addr)
                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: include/asm-i386/mach-xen/mach_desc.h:45:
+	struct mmuext_op op;
+	op.cmd = MMUEXT_SET_LDT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: include/asm-i386/mach-xen/mach_desc.h:48:
+	BUG_ON(HYPERVISOR_mmuext_op(&op, 1, NULL, DOMID_SELF) < 0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ldt' may be better as '(ldt)' to avoid precedence issues
#261: FILE: include/asm-i386/mach-xen/mach_desc.h:51:
+#define write_ldt_entry(ldt, entry, entry_a, entry_b) do {	\
+        __u32 *lp = (__u32 *)((char *)ldt + entry * 8);		\
+        maddr_t mach_lp = arbitrary_virt_to_machine(lp);	\
+        HYPERVISOR_update_descriptor(				\
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));	\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entry' may be better as '(entry)' to avoid precedence issues
#261: FILE: include/asm-i386/mach-xen/mach_desc.h:51:
+#define write_ldt_entry(ldt, entry, entry_a, entry_b) do {	\
+        __u32 *lp = (__u32 *)((char *)ldt + entry * 8);		\
+        maddr_t mach_lp = arbitrary_virt_to_machine(lp);	\
+        HYPERVISOR_update_descriptor(				\
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));	\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entry_a' may be better as '(entry_a)' to avoid precedence issues
#261: FILE: include/asm-i386/mach-xen/mach_desc.h:51:
+#define write_ldt_entry(ldt, entry, entry_a, entry_b) do {	\
+        __u32 *lp = (__u32 *)((char *)ldt + entry * 8);		\
+        maddr_t mach_lp = arbitrary_virt_to_machine(lp);	\
+        HYPERVISOR_update_descriptor(				\
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));	\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entry_b' may be better as '(entry_b)' to avoid precedence issues
#261: FILE: include/asm-i386/mach-xen/mach_desc.h:51:
+#define write_ldt_entry(ldt, entry, entry_a, entry_b) do {	\
+        __u32 *lp = (__u32 *)((char *)ldt + entry * 8);		\
+        maddr_t mach_lp = arbitrary_virt_to_machine(lp);	\
+        HYPERVISOR_update_descriptor(				\
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));	\
+} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: include/asm-i386/mach-xen/mach_desc.h:52:
+        __u32 *lp = (__u32 *)((char *)ldt + entry * 8);^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: include/asm-i386/mach-xen/mach_desc.h:52:
+        __u32 *lp = (__u32 *)((char *)ldt + entry * 8);^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: include/asm-i386/mach-xen/mach_desc.h:53:
+        maddr_t mach_lp = arbitrary_virt_to_machine(lp);^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: include/asm-i386/mach-xen/mach_desc.h:53:
+        maddr_t mach_lp = arbitrary_virt_to_machine(lp);^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: include/asm-i386/mach-xen/mach_desc.h:54:
+        HYPERVISOR_update_descriptor(^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: include/asm-i386/mach-xen/mach_desc.h:54:
+        HYPERVISOR_update_descriptor(^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: include/asm-i386/mach-xen/mach_desc.h:55:
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/asm-i386/mach-xen/mach_desc.h:55:
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));^I\$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#265: FILE: include/asm-i386/mach-xen/mach_desc.h:55:
+                mach_lp, (u64)entry_a | ((u64)entry_b<<32));	\
                                                      ^

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#274: FILE: include/asm-i386/mach-xen/mach_desc.h:64:
+#define C(i) HYPERVISOR_update_descriptor(virt_to_machine(&get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i]), *(u64 *)&t->tls_array[i])

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#274: FILE: include/asm-i386/mach-xen/mach_desc.h:64:
+#define C(i) HYPERVISOR_update_descriptor(virt_to_machine(&get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i]), *(u64 *)&t->tls_array[i])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#274: FILE: include/asm-i386/mach-xen/mach_desc.h:64:
+#define C(i) HYPERVISOR_update_descriptor(virt_to_machine(&get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i]), *(u64 *)&t->tls_array[i])

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079284.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 10 warnings, 31 checks, 231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079284.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
