WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
- ptimer_stop() is synchronous and is so the counterpart to del_timer_sync().

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: include/linux/ptimer.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#120: FILE: include/linux/ptimer.h:23:
+	spinlock_t lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ptimer *' should also have an identifier name
#131: FILE: include/linux/ptimer.h:34:
+	int (*function)(struct ptimer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/ptimer.h:37:
+extern void ptimer_init(struct ptimer *timer, int base);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/ptimer.h:38:
+extern void ptimer_start(struct ptimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/ptimer.h:39:
+extern void ptimer_modify(struct ptimer *timer, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#136: FILE: include/linux/ptimer.h:39:
+extern void ptimer_modify(struct ptimer *timer, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/ptimer.h:40:
+extern int ptimer_stop(struct ptimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/ptimer.h:41:
+extern int ptimer_try_to_stop(struct ptimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/ptimer.h:43:
+extern int ptimer_active(struct ptimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/ptimer.h:45:
+extern void ptimer_run_queues(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/ptimer.h:46:
+extern void init_ptimers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/ptimer.h:48:
+extern int it_real_fn(struct ptimer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ptimer *' should also have an identifier name
#145: FILE: include/linux/ptimer.h:48:
+extern int it_real_fn(struct ptimer *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: kernel/exit.c:845:
+ ^I^Iptimer_stop(&tsk->signal->real_timer);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: kernel/exit.c:845:
+ ^I^Iptimer_stop(&tsk->signal->real_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: kernel/exit.c:845:
+ ^I^Iptimer_stop(&tsk->signal->real_timer);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#462: FILE: kernel/ptimer.c:1:
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#544: FILE: kernel/ptimer.c:83:
+	if (!parent)
[...]
+	else if (time_before(timer->expires, entry->expires)) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#593: FILE: kernel/ptimer.c:132:
+	BUG_ON(ptimer_active(timer));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#725: FILE: kernel/ptimer.c:264:
+static void __devinit init_ptimers_cpu(int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#752: FILE: kernel/ptimer.c:291:
+static void __devinit migrate_ptimers(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#758: FILE: kernel/ptimer.c:297:
+	BUG_ON(cpu_online(cpu));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#765: FILE: kernel/ptimer.c:304:
+	for (i = 0; i < MAX_PTIMER_BASES; i++) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#770: FILE: kernel/ptimer.c:309:
+			BUG();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#785: FILE: kernel/ptimer.c:324:
+static int __devinit ptimer_cpu_notify(struct notifier_block *self,

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: kernel/ptimer.c:328:
+	long cpu = (long)hcpu;
+	switch(action) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#789: FILE: kernel/ptimer.c:328:
+	switch(action) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#804: FILE: kernel/ptimer.c:343:
+static struct notifier_block __devinitdata ptimers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after ptimers_nb
#804: FILE: kernel/ptimer.c:343:
+static struct notifier_block __devinitdata ptimers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 17 warnings, 12 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
