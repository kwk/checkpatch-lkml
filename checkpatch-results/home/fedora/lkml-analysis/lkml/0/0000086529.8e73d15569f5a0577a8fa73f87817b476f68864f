WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
> >                                                  ntohl(rx->vlanTag) & 0xffff);

CHECK:BRACES: Unbalanced braces around else statement
#179: FILE: drivers/net/bonding/bond_main.c:384:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#218: FILE: drivers/net/chelsio/sge.c:990:
+	} else
[...]
+	if (adapter->params.sge.polling)

CHECK:BRACES: Unbalanced braces around else statement
#218: FILE: drivers/net/chelsio/sge.c:990:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#238: FILE: drivers/net/e1000/e1000_main.c:3723:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#250: FILE: drivers/net/e1000/e1000_main.c:3733:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#267: FILE: drivers/net/e1000/e1000_main.c:3871:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#278: FILE: drivers/net/e1000/e1000_main.c:3880:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#298: FILE: drivers/net/ixgb/ixgb_main.c:1913:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#309: FILE: drivers/net/ixgb/ixgb_main.c:1922:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#329: FILE: drivers/net/s2io.c:5688:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#340: FILE: drivers/net/s2io.c:5697:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: include/linux/if_vlan.h:153:
+int __vlan_hwaccel_rx(struct sk_buff *skb,
 				    struct vlan_group *grp,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#479: FILE: net/core/dev_vlan.c:1:
+/* 802.1q helpers.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#487: FILE: net/core/dev_vlan.c:9:
+#if defined(CONFIG_VLAN_8021Q) || defined (CONFIG_VLAN_8021Q_MODULE)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: net/core/dev_vlan.c:16:
+int __vlan_hwaccel_rx(struct sk_buff *skb,
+				    struct vlan_group *grp,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->dev"
#500: FILE: net/core/dev_vlan.c:22:
+	if (skb->dev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#534: FILE: net/core/dev_vlan.c:56:
+	return (polling ? netif_receive_skb(skb) : netif_rx(skb));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: net/core/dev_vlan.c:67:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: net/core/dev_vlan.c:77:
+		struct sk_buff *sk_tmp = skb;
+		skb = skb_realloc_headroom(sk_tmp, VLAN_HLEN);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#558: FILE: net/core/dev_vlan.c:80:
+			printk(KERN_ERR "vlan: failed to realloc headroom\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: net/core/dev_vlan.c:86:
+			printk(KERN_ERR "vlan: failed to unshare skbuff\n");

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#575: FILE: net/core/dev_vlan.c:97:
+	veth->h_vlan_proto = __constant_htons(ETH_P_8021Q);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#580: FILE: net/core/dev_vlan.c:102:
+	skb->protocol = __constant_htons(ETH_P_8021Q);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086529.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 13 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086529.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
