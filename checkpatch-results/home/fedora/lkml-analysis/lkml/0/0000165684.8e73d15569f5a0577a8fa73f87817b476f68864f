WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
, miklos@szeredi.hu, Janak Desai <janak@us.ibm.com>, linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#26: 
adds support for mount/umount propogation for autofs initiated operations,
                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#58: FILE: fs/namespace.c:361:
+	int actual_refs=0;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#59: FILE: fs/namespace.c:362:
+	int minimum_refs=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#119: FILE: fs/namespace.c:409:
+	int ret=0;
 	       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: fs/namespace.c:410:
+	int ret=0;
+	spin_lock(&vfsmount_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#133: FILE: fs/namespace.c:433:
+void umount_mnt(struct vfsmount *mnt, int propogate)
                                           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#135: FILE: fs/namespace.c:435:
+	if (propogate && mnt->mnt_parent != mnt &&
 	    ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: fs/namespace.c:436:
+	if (propogate && mnt->mnt_parent != mnt &&
+		IS_MNT_SHARED(mnt->mnt_parent)) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#138: FILE: fs/namespace.c:438:
+		struct vfspnode *parent_pnode
+			= mnt->mnt_parent->mnt_pnode;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#139: FILE: fs/namespace.c:439:
+		BUG_ON(!parent_pnode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: fs/namespace.c:441:
+		pnode_umount(parent_pnode,
+			mnt->mnt_mountpoint,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#145: FILE: fs/namespace.c:445:
+			BUG_ON(!mnt->mnt_pnode);

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#152: FILE: fs/namespace.c:452:
+static void __umount_tree(struct vfsmount *mnt, int propogate)
                                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#175: FILE: fs/namespace.c:466:
+		umount_mnt(mnt, propogate);
 		                ^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#193: FILE: fs/namespace.c:748:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: fs/namespace.c:2112:
+ ^Iif ((error = attach_recursive_mnt(new_nd.mnt, &root_parent, 1))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: fs/namespace.c:2112:
+ ^Iif ((error = attach_recursive_mnt(new_nd.mnt, &root_parent, 1))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: fs/namespace.c:2112:
+ ^Iif ((error = attach_recursive_mnt(new_nd.mnt, &root_parent, 1))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#335: FILE: fs/namespace.c:2112:
+ 	if ((error = attach_recursive_mnt(new_nd.mnt, &root_parent, 1))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: fs/namespace.c:2119:
+ ^Imntput(new_nd.mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: fs/namespace.c:2119:
+ ^Imntput(new_nd.mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: fs/namespace.c:2119:
+ ^Imntput(new_nd.mnt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: fs/namespace.c:2122:
+ ^Iif ((error = attach_recursive_mnt(user_nd.mnt, &old_nd, 1))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: fs/namespace.c:2122:
+ ^Iif ((error = attach_recursive_mnt(user_nd.mnt, &old_nd, 1))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: fs/namespace.c:2122:
+ ^Iif ((error = attach_recursive_mnt(user_nd.mnt, &old_nd, 1))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#347: FILE: fs/namespace.c:2122:
+ 	if ((error = attach_recursive_mnt(user_nd.mnt, &old_nd, 1))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: fs/namespace.c:2129:
+ ^Imntput(user_nd.mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#355: FILE: fs/namespace.c:2129:
+ ^Imntput(user_nd.mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: fs/namespace.c:2129:
+ ^Imntput(user_nd.mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: fs/pnode.c:32:
+  __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#368: FILE: fs/pnode.c:32:
+  __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vfspnode_lock' should also have an identifier name
#368: FILE: fs/pnode.c:32:
+  __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: fs/pnode.c:689:
+			ret = do_refcount_check(child_mnt, refcnt+1);
 			                                         ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#415: FILE: include/linux/pnode.h:80:
+void pnode_member_to_slave(struct vfsmount *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165684.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 21 warnings, 5 checks, 358 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165684.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
