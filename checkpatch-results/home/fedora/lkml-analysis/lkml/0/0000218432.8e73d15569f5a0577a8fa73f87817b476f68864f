WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#68: FILE: kernel/sched_zaphod.c:724:
+extern unsigned long base_prom_interval;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: kernel/sched_zaphod.c:727:
+void zaphod_sched_set_child_genes(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#71: FILE: kernel/sched_zaphod.c:727:
+void zaphod_sched_set_child_genes(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#72: FILE: kernel/sched_zaphod.c:728:
+void zaphod_sched_calc_fitness(genetic_child_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#72: FILE: kernel/sched_zaphod.c:728:
+void zaphod_sched_calc_fitness(genetic_child_t *);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#87: FILE: kernel/sched_zaphod.c:743:
+	{ MIN_TIMESLICE, MAX_TIMESLICE, ((DEF_TIMESLICE * 15) / 10), 0 },	/* base_prom_interval */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: kernel/sched_zaphod.c:746:
+^I{ 1, 1000, DEFAULT_IA_THRESHOLD, 0 },  ^I^I^I^I/* ia_threshold */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: kernel/sched_zaphod.c:747:
+^I{ 1, 1000, DEFAULT_CPU_HOG_THRESHOLD, 0 }, ^I^I^I/* cpu_hog_threshold */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: kernel/sched_zaphod.c:749:
+^I{ 1, 1000, DEFAULT_UNPRIV_RT_THRESHOLD, 0 }, ^I^I^I/* unpriv_rt_threshold */$

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#94: FILE: kernel/sched_zaphod.c:750:
+	{ 1, 100, 1, 0 }, 						/* bgnd_time_slice_multiplier */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: kernel/sched_zaphod.c:750:
+^I{ 1, 100, 1, 0 }, ^I^I^I^I^I^I/* bgnd_time_slice_multiplier */$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init genetic_cpu_sched_init() should probably be void __init genetic_cpu_sched_init(void)
#98: FILE: kernel/sched_zaphod.c:754:
+void __init genetic_cpu_sched_init()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:SPACING: space required before the open parenthesis '('
#100: FILE: kernel/sched_zaphod.c:756:
+	if(genetic_init(0, &zaphod_sched_genetic_ops, ZAPHOD_SCHED_NUM_CHILDREN,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: kernel/sched_zaphod.c:761:
+void zaphod_sched_create_child(genetic_child_t * child)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#108: FILE: kernel/sched_zaphod.c:764:
+	static int child_num = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: kernel/sched_zaphod.c:767:
+	unsigned long * genes;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: kernel/sched_zaphod.c:768:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: kernel/sched_zaphod.c:769:
+	BUG_ON(!child);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: kernel/sched_zaphod.c:770:
+^I$

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#115: FILE: kernel/sched_zaphod.c:771:
+	child->genes = (void *)kmalloc(sizeof(struct zaphod_sched_genes), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*child->genes)...) over kmalloc(sizeof(struct zaphod_sched_genes)...)
#115: FILE: kernel/sched_zaphod.c:771:
+	child->genes = (void *)kmalloc(sizeof(struct zaphod_sched_genes), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: kernel/sched_zaphod.c:772:
+^Iif (!child->genes) $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'zaphod_sched_create_child', this function's name, in a string
#117: FILE: kernel/sched_zaphod.c:773:
+		panic("zaphod_sched_create_child: error kmalloc'n space");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#117: FILE: kernel/sched_zaphod.c:773:
+	if (!child->genes) 
+		panic("zaphod_sched_create_child: error kmalloc'n space");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: kernel/sched_zaphod.c:778:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: kernel/sched_zaphod.c:791:
+^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#149: FILE: lib/Kconfig:39:
+config GENETIC_CPU_SCHED
+	bool "Genetic Library - Zaphod CPU scheduler"
+	depends on GENETIC_LIB && EXPERIMENTAL && SCHEDSTATS
+	help
+	  This option will enable the genetic library on the zaphod
+	  CPU scheduler.
+
 #
 # compression support is select'ed if needed
 #

Kconfig symbols should have a help text which fully describes
it.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#231: FILE: kernel/sched.c:1350:
+int log_at_exit = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: kernel/sched.c:4936:
+void zaphod_sched_set_child_genes(void * in_genes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: kernel/sched.c:4938:
+	struct zaphod_sched_genes * genes = (struct zaphod_sched_genes *)in_genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: kernel/sched.c:4940:
+	runqueue_t * rq;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: kernel/sched.c:4953:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: kernel/sched.c:4964:
+void zaphod_sched_calc_fitness(genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: kernel/sched.c:4967:
+	runqueue_t * rq;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#281: FILE: kernel/sched.c:4973:
+	/* XXX at some point make sure onlining or offlining a CPU
+	   doesn't screw us */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#281: FILE: kernel/sched.c:4973:
+	   doesn't screw us */

WARNING:TYPO_SPELLING: 'minumum' may be misspelled - perhaps 'minimum'?
#306: FILE: include/linux/sched.h:144:
+ * timeslice is 1000 msecs and minumum configurable timeslice is 1 jiffy.
                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: include/linux/sched.h:411:
+#endif^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/linux/sched.h:677:
+extern void genetic_cpu_sched_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: include/linux/sched.h:1062:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218432.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 19 warnings, 3 checks, 311 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218432.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
