WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: security/selinux/hooks.c:2564:
+	   upon context transitions. See selinux_bprm_apply_creds. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#140: FILE: security/commoncap.c:121:
+	return ((p->ptrace & PT_PTRACED) && !(p->ptrace & PT_PTRACE_CAP))
+		|| atomic_read(&current->fs->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#141: FILE: security/commoncap.c:122:
+		|| atomic_read(&current->fs->count) > 1
+		|| atomic_read(&current->files->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#142: FILE: security/commoncap.c:123:
+		|| atomic_read(&current->files->count) > 1
+		|| atomic_read(&current->sighand->count) > 1;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: security/commoncap.c:126:
+void cap_bprm_apply_creds (struct linux_binprm *bprm)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: security/commoncap.c:140:
+^I    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#164: FILE: security/commoncap.c:147:
+	current->suid = current->euid = current->fsuid = bprm->e_uid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#165: FILE: security/commoncap.c:148:
+	current->sgid = current->egid = current->fsgid = bprm->e_gid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#179: FILE: security/commoncap.c:153:
+		if (must_not_trace_exec (current) && !capable (CAP_SETPCAP)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#179: FILE: security/commoncap.c:153:
+		if (must_not_trace_exec (current) && !capable (CAP_SETPCAP)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: security/commoncap.c:154:
+			new_permitted = cap_intersect (new_permitted,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'current->cap_permitted'
#182: FILE: security/commoncap.c:156:
+						       current->
+						       cap_permitted);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#229: FILE: security/dummy.c:174:
+static inline int must_not_trace_exec (struct task_struct *p)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#233: FILE: security/dummy.c:177:
+	return ((p->ptrace & PT_PTRACED) && !(p->ptrace & PT_PTRACE_CAP))
+		|| atomic_read(&current->fs->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#234: FILE: security/dummy.c:178:
+		|| atomic_read(&current->fs->count) > 1
+		|| atomic_read(&current->files->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#235: FILE: security/dummy.c:179:
+		|| atomic_read(&current->files->count) > 1
+		|| atomic_read(&current->sighand->count) > 1;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: security/dummy.c:182:
+static void dummy_bprm_apply_creds (struct linux_binprm *bprm)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: security/dummy.c:187:
+^I    $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#250: FILE: security/dummy.c:194:
+	current->suid = current->euid = current->fsuid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#251: FILE: security/dummy.c:195:
+	current->sgid = current->egid = current->fsgid = bprm->e_gid;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: include/linux/security.h:47:
+extern void cap_bprm_apply_creds (struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/security.h:47:
+extern void cap_bprm_apply_creds (struct linux_binprm *bprm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: include/linux/security.h:1029:
+	void (*bprm_apply_creds) (struct linux_binprm * bprm);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#320: FILE: include/linux/security.h:1029:
+	void (*bprm_apply_creds) (struct linux_binprm * bprm);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#329: FILE: include/linux/security.h:1293:
 }
+static inline void security_bprm_apply_creds (struct linux_binprm *bprm)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: include/linux/security.h:1293:
+static inline void security_bprm_apply_creds (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#332: FILE: include/linux/security.h:1295:
+	security_ops->bprm_apply_creds (bprm);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#341: FILE: include/linux/security.h:1965:
+static inline void security_bprm_apply_creds (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: include/linux/security.h:1967:
+	cap_bprm_apply_creds (bprm);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 20 warnings, 12 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
