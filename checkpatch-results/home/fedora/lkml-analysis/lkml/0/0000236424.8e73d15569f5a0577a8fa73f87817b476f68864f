WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: arch/x86_64/kernel/kprobes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#129: FILE: arch/x86_64/kernel/kprobes.c:3:
+ *  arch/x86_64/kernel/kprobes.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#142: FILE: arch/x86_64/kernel/kprobes.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: arch/x86_64/kernel/kprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#165: FILE: arch/x86_64/kernel/kprobes.c:39:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#166: FILE: arch/x86_64/kernel/kprobes.c:40:
+#include <asm/kdebug.h>

WARNING:BRACES: braces {} are not necessary for single statement blocks
#204: FILE: arch/x86_64/kernel/kprobes.c:78:
+	if (!p->ainsn.insn) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#246: FILE: arch/x86_64/kernel/kprobes.c:120:
+		/* We *are* holding lock here, so this is safe.
+		   Disarm the probe we just hit, and ignore it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#246: FILE: arch/x86_64/kernel/kprobes.c:120:
+		   Disarm the probe we just hit, and ignore it. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#253: FILE: arch/x86_64/kernel/kprobes.c:127:
+			if (p->break_handler && p->break_handler(p, regs)) {
+				goto ss_probe;
+			}

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#282: FILE: arch/x86_64/kernel/kprobes.c:156:
+	kprobe_saved_rflags = kprobe_old_rflags
+	    = (regs->eflags & (TF_MASK | IF_MASK));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:INDENTED_LABEL: labels should not be indented
#291: FILE: arch/x86_64/kernel/kprobes.c:165:
+      ss_probe:

WARNING:INDENTED_LABEL: labels should not be indented
#296: FILE: arch/x86_64/kernel/kprobes.c:170:
+      no_kprobe:

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#363: FILE: arch/x86_64/kernel/kprobes.c:237:
+	if (next_rip) {
[...]
+	} else {
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#403: FILE: arch/x86_64/kernel/kprobes.c:277:
+	if (current_kprobe->fault_handler
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))

ERROR:SPACING: space prohibited after that '&&' (ctx:ExW)
#403: FILE: arch/x86_64/kernel/kprobes.c:277:
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: arch/x86_64/kernel/kprobes.c:297:
+	struct die_args *args = (struct die_args *)data;
+	switch (val) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#454: FILE: arch/x86_64/kernel/kprobes.c:328:
+	jprobe_saved_rsp = (long *) regs->rsp;

CHECK:SPACING: No space is necessary after a cast
#463: FILE: arch/x86_64/kernel/kprobes.c:337:
+	memcpy(jprobes_stack, (kprobe_opcode_t *) addr, MIN_STACK_SIZE(addr));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#472: FILE: arch/x86_64/kernel/kprobes.c:346:
+	asm volatile ("       xchg   %%rbx,%%rsp     \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#473: FILE: arch/x86_64/kernel/kprobes.c:347:
+		      "       int3			\n"::"b"

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#474: FILE: arch/x86_64/kernel/kprobes.c:348:
+		      (jprobe_saved_rsp):"memory");
 		                        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#476: FILE: arch/x86_64/kernel/kprobes.c:350:
+}
+inline asmlinkage void jprobe_return_end(void)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#476: FILE: arch/x86_64/kernel/kprobes.c:350:
+inline asmlinkage void jprobe_return_end(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:SPACING: No space is necessary after a cast
#482: FILE: arch/x86_64/kernel/kprobes.c:356:
+	u8 *addr = (u8 *) (regs->rip - 1);

CHECK:SPACING: No space is necessary after a cast
#486: FILE: arch/x86_64/kernel/kprobes.c:360:
+	if ((addr > (u8 *) jprobe_return) && (addr < (u8 *) jprobe_return_end)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#490: FILE: arch/x86_64/kernel/kprobes.c:364:
+			printk("current rsp %p does not match saved rsp %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#492: FILE: arch/x86_64/kernel/kprobes.c:366:
+			printk("Saved registers for jprobe %p\n", jp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#494: FILE: arch/x86_64/kernel/kprobes.c:368:
+			printk("Current registers\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: arch/x86_64/kernel/kprobes.c:370:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#499: FILE: arch/x86_64/kernel/kprobes.c:373:
+		memcpy((kprobe_opcode_t *) stack_addr, jprobes_stack,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#517: FILE: arch/x86_64/kernel/kprobes.c:391:
+#define INSNS_PER_PAGE (PAGE_SIZE/(MAX_INSN_SIZE*sizeof(kprobe_opcode_t)))
                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#517: FILE: arch/x86_64/kernel/kprobes.c:391:
+#define INSNS_PER_PAGE (PAGE_SIZE/(MAX_INSN_SIZE*sizeof(kprobe_opcode_t)))
                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: arch/x86_64/kernel/kprobes.c:414:
+			int i;
+			for (i = 0; i < INSNS_PER_PAGE; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#544: FILE: arch/x86_64/kernel/kprobes.c:418:
+					return kip->insns + (i*MAX_INSN_SIZE);
 					                      ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*kip)...) over kmalloc(sizeof(struct kprobe_insn_page)...)
#553: FILE: arch/x86_64/kernel/kprobes.c:427:
+	kip = kmalloc(sizeof(struct kprobe_insn_page), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#554: FILE: arch/x86_64/kernel/kprobes.c:428:
+	if (!kip) {
+		return NULL;
+	}

CHECK:SPACING: No space is necessary after a cast
#557: FILE: arch/x86_64/kernel/kprobes.c:431:
+	kip->insns = (kprobe_opcode_t*) __vmalloc(PAGE_SIZE,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#557: FILE: arch/x86_64/kernel/kprobes.c:431:
+	kip->insns = (kprobe_opcode_t*) __vmalloc(PAGE_SIZE,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#558: FILE: arch/x86_64/kernel/kprobes.c:432:
+		GFP_ATOMIC|__GFP_HIGHMEM, __pgprot(__PAGE_KERNEL_EXEC));
 		          ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#582: FILE: arch/x86_64/kernel/kprobes.c:456:
+		if (kip->insns <= slot
+		    && slot < kip->insns+(INSNS_PER_PAGE*MAX_INSN_SIZE)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#582: FILE: arch/x86_64/kernel/kprobes.c:456:
+		    && slot < kip->insns+(INSNS_PER_PAGE*MAX_INSN_SIZE)) {
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#582: FILE: arch/x86_64/kernel/kprobes.c:456:
+		    && slot < kip->insns+(INSNS_PER_PAGE*MAX_INSN_SIZE)) {
 		                                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: arch/x86_64/kernel/kprobes.c:458:
+			int i = (slot - kip->insns) / MAX_INSN_SIZE;
+			kip->slot_used[i] = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: arch/x86_64/kernel/kprobes.c:471:
+					hlist_add_head(&kip->hlist,
+						&kprobe_insn_pages);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#625: FILE: arch/x86_64/kernel/traps.c:49:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: arch/x86_64/kernel/traps.c:82:
+	unsigned long flags;
+	spin_lock_irqsave(&die_notifier_lock, flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#659: FILE: arch/x86_64/kernel/traps.c:615:
+asmlinkage void do_int3(struct pt_regs * regs, long error_code)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: arch/x86_64/kernel/traps.c:617:
+	if (notify_die(DIE_INT3, "int3", regs, error_code, 3, SIGTRAP) == NOTIFY_STOP) {
+		return;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#666: FILE: arch/x86_64/kernel/traps.c:622:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: arch/x86_64/kernel/traps.c:654:
+	if (notify_die(DIE_DEBUG, "debug", regs, condition, error_code,
+						SIGTRAP) == NOTIFY_STOP) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#688: FILE: arch/x86_64/kernel/traps.c:889:
+	set_intr_gate(3,&int3);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#688: FILE: arch/x86_64/kernel/traps.c:889:
+	set_intr_gate(3,&int3);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#689: FILE: arch/x86_64/kernel/traps.c:890:
+	set_system_gate(4,&overflow);	/* int4-5 can be called from all */
 	                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#689: FILE: arch/x86_64/kernel/traps.c:890:
+	set_system_gate(4,&overflow);	/* int4-5 can be called from all */
 	                  ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#700: FILE: arch/x86_64/kernel/x8664_ksyms.c:35:
+#include <asm/kdebug.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#727: FILE: arch/x86_64/mm/fault.c:36:
+#include <asm/kdebug.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: arch/x86_64/mm/fault.c:275:
+		if (notify_die(DIE_PAGE_FAULT, "page fault", regs, error_code, 14,
+						SIGSEGV) == NOTIFY_STOP)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#768: FILE: include/asm-x86_64/kprobes.h:1:
+#ifndef _ASM_KPROBES_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#772: FILE: include/asm-x86_64/kprobes.h:5:
+ *  include/asm-x86_64/kprobes.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#785: FILE: include/asm-x86_64/kprobes.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#786: FILE: include/asm-x86_64/kprobes.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ADDR' - possible side-effects?
#803: FILE: include/asm-x86_64/kprobes.h:36:
+#define MIN_STACK_SIZE(ADDR) (((MAX_STACK_SIZE) < \
+	(((unsigned long)current_thread_info()) + THREAD_SIZE - (ADDR))) \
+	? (MAX_STACK_SIZE) \
+	: (((unsigned long)current_thread_info()) + THREAD_SIZE - (ADDR)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/asm-x86_64/kprobes.h:56:
+extern int post_kprobe_handler(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#824: FILE: include/asm-x86_64/kprobes.h:57:
+extern int kprobe_fault_handler(struct pt_regs *regs, int trapnr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#825: FILE: include/asm-x86_64/kprobes.h:58:
+extern int kprobe_handler(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#827: FILE: include/asm-x86_64/kprobes.h:60:
+extern int kprobe_exceptions_notify(struct notifier_block *self,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236424.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 24 warnings, 31 checks, 686 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236424.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
