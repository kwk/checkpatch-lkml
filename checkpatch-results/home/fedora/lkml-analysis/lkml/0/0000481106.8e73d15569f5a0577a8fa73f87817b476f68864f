WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
to contain all bugfixes applied to 2.4 plus allow relocating the journal plus

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#48: 
    More logical fix would require changes in fs/inode.c:iput() to
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accessable' may be misspelled - perhaps 'accessible'?
#120: 
    Fixes erroroneous page access before making sure page is really accessable.
                                                                    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unsuccesful' may be misspelled - perhaps 'unsuccessful'?
#166: 
    Do not print unsuccesful superblocks read warnings 
                 ^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: fs/reiserfs/file.c:105:
+        if (attr->ia_size > inode->i_size) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/reiserfs/file.c:105:
+        if (attr->ia_size > inode->i_size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#186: FILE: fs/reiserfs/file.c:105:
+        if (attr->ia_size > inode->i_size) {
+	    error = generic_cont_expand(inode, attr->ia_size) ;

WARNING:SPACING: space prohibited before semicolon
#187: FILE: fs/reiserfs/file.c:106:
+	    error = generic_cont_expand(inode, attr->ia_size) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#188: FILE: fs/reiserfs/file.c:107:
+	    if (REISERFS_I(inode)->i_prealloc_count > 0) {

WARNING:SPACING: space prohibited before semicolon
#189: FILE: fs/reiserfs/file.c:108:
+		struct reiserfs_transaction_handle th ;

WARNING:SPACING: space prohibited before semicolon
#191: FILE: fs/reiserfs/file.c:110:
+		journal_begin(&th, inode->i_sb, 4) ;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#192: FILE: fs/reiserfs/file.c:111:
+		reiserfs_discard_prealloc (&th, inode);

WARNING:SPACING: space prohibited before semicolon
#193: FILE: fs/reiserfs/file.c:112:
+		journal_end(&th, inode->i_sb, 4) ;

WARNING:TABSTOP: Statements should start on a tabstop
#194: FILE: fs/reiserfs/file.c:113:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#195: FILE: fs/reiserfs/file.c:114:
+	    if (error)

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/reiserfs/file.c:115:
+^I        return error ;$

WARNING:SPACING: space prohibited before semicolon
#196: FILE: fs/reiserfs/file.c:115:
+	        return error ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: fs/reiserfs/inode.c:2045:
+    if (f && (f->f_flags & O_SYNC)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: fs/buffer.c:1683:
+ * deal with the hole.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/buffer.c:1693:
+        limit = current->rlim[RLIMIT_FSIZE].rlim_cur;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/buffer.c:1693:
+        limit = current->rlim[RLIMIT_FSIZE].rlim_cur;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#238: FILE: fs/buffer.c:1701:
+	offset = (size & (PAGE_CACHE_SIZE-1)); /* Within page */
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: fs/buffer.c:1703:
+^I/* ugh.  in prepare/commit_write, if from==to==start of block, we $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#241: FILE: fs/buffer.c:1704:
+	/* ugh.  in prepare/commit_write, if from==to==start of block, we 
+	** skip the prepare.  make sure we never send an offset for the start

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#244: FILE: fs/buffer.c:1707:
+	if ((offset & (inode->i_sb->s_blocksize - 1)) == 0) {
+		offset++;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#253: FILE: fs/buffer.c:1716:
+	if (!err) {
+		err = mapping->a_ops->commit_write(NULL, page, offset, offset);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#256: FILE: fs/buffer.c:1719:
+	UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited before semicolon
#283: FILE: include/linux/fs.h:1447:
+extern int generic_cont_expand(struct inode *inode, loff_t size) ;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/fs.h:1447:
+extern int generic_cont_expand(struct inode *inode, loff_t size) ;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000481106.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 21 warnings, 3 checks, 94 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000481106.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
