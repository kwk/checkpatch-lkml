CHECK:MACRO_ARG_REUSE: Macro argument reuse '_p' - possible side-effects?
#53: FILE: include/linux/pagevec.h:92:
+#define __guardloop(_v, _i, _p, _z)				\
+({								\
+	struct zone *pagezone;					\
+								\
+	_p = (_v)->pages[i];					\
+	pagezone = page_zone(_p);				\
+								\
+	if (pagezone != (_z)) {					\
+		if (_z)						\
+			spin_unlock_irq(&(_z)->lru_lock);	\
+		_z = pagezone;					\
+		spin_lock_irq(&(_z)->lru_lock);		\
+	}							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_z' - possible side-effects?
#53: FILE: include/linux/pagevec.h:92:
+#define __guardloop(_v, _i, _p, _z)				\
+({								\
+	struct zone *pagezone;					\
+								\
+	_p = (_v)->pages[i];					\
+	pagezone = page_zone(_p);				\
+								\
+	if (pagezone != (_z)) {					\
+		if (_z)						\
+			spin_unlock_irq(&(_z)->lru_lock);	\
+		_z = pagezone;					\
+		spin_lock_irq(&(_z)->lru_lock);		\
+	}							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_z' - possible side-effects?
#72: FILE: include/linux/pagevec.h:111:
+#define __postloop(_v, _i, _p, _z)			\
+({							\
+	if ((_z) != NULL)				\
+		spin_unlock_irq(&(_z)->lru_lock);	\
+})

WARNING:TYPO_SPELLING: 'whould' may be misspelled - perhaps 'would'?
#81: FILE: include/linux/pagevec.h:120:
+ * to batch per-page operations that whould otherwise had to acquire hot
                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_v' - possible side-effects?
#87: FILE: include/linux/pagevec.h:126:
+#define pagevec_for_each_page(_v, _i, _p, _z)				\
+for (_i = 0, _z = NULL;							\
+     ((_i) < pagevec_count(_v) && (__guardloop(_v, _i, _p, _z), 1)) ||	\
+     (__postloop(_v, _i, _p, _z), 0);					\
+     (_i)++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_i' - possible side-effects?
#87: FILE: include/linux/pagevec.h:126:
+#define pagevec_for_each_page(_v, _i, _p, _z)				\
+for (_i = 0, _z = NULL;							\
+     ((_i) < pagevec_count(_v) && (__guardloop(_v, _i, _p, _z), 1)) ||	\
+     (__postloop(_v, _i, _p, _z), 0);					\
+     (_i)++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_p' - possible side-effects?
#87: FILE: include/linux/pagevec.h:126:
+#define pagevec_for_each_page(_v, _i, _p, _z)				\
+for (_i = 0, _z = NULL;							\
+     ((_i) < pagevec_count(_v) && (__guardloop(_v, _i, _p, _z), 1)) ||	\
+     (__postloop(_v, _i, _p, _z), 0);					\
+     (_i)++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_z' - possible side-effects?
#87: FILE: include/linux/pagevec.h:126:
+#define pagevec_for_each_page(_v, _i, _p, _z)				\
+for (_i = 0, _z = NULL;							\
+     ((_i) < pagevec_count(_v) && (__guardloop(_v, _i, _p, _z), 1)) ||	\
+     (__postloop(_v, _i, _p, _z), 0);					\
+     (_i)++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/linux/pagevec.h:128:
+     ((_i) < pagevec_count(_v) && (__guardloop(_v, _i, _p, _z), 1)) ||^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/linux/pagevec.h:129:
+     (__postloop(_v, _i, _p, _z), 0);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/linux/pagevec.h:130:
+     (_i)++)$

ERROR:SPACING: space required before the open brace '{'
#115: FILE: mm/swap.c:123:
+		if (!PageActive(page) && PageReferenced(page) && PageLRU(page)){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229008.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 7 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229008.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
