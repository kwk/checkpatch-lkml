WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5.20/include/linux/init.h working-2.5.20-initorder/include/linux/init.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#53: FILE: include/linux/init.h:4:
+ * Rusty Russell (C) 2002 IBM Corporation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'preceeds' may be misspelled - perhaps 'precedes'?
#82: FILE: include/linux/init.h:63:
+#define init_before(x) { .preceeds = __stringify(x) "-start" }
                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'preceeds' may be misspelled - perhaps 'precedes'?
#93: FILE: include/linux/init.h:67:
+  { .follows = __stringify(x) "-start",  .preceeds = __stringify(x) "-end" }
                                           ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: include/linux/init.h:67:
+  { .follows = __stringify(x) "-start",  .preceeds = __stringify(x) "-end" }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#97: FILE: include/linux/init.h:70:
+/* Example usage:
+	initcall(myinit, ppc_extras,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: include/linux/init.h:75:
+#define initcall(initfn,initname,...)					\
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: include/linux/init.h:75:
+#define initcall(initfn,initname,...)					\
                                 ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#102: FILE: include/linux/init.h:75:
+#define initcall(initfn,initname,...)					\
+	static inline initcall_t __init_##initname##_test(void)		\
+	{ return initfn; }						\
+	int __init_##initname(void) __attribute__((alias(#initfn)));	\
+	static const struct initcall_info initfn##_initcall_info	\
+	__attribute__ ((__section__ (".initcalls"))) =			\
+	{ .name = __stringify(initname), { __VA_ARGS__ } };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#initfn) over __attribute__((alias(#initfn)))
#105: FILE: include/linux/init.h:78:
+	int __init_##initname(void) __attribute__((alias(#initfn)));	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#105: FILE: include/linux/init.h:78:
+	int __init_##initname(void) __attribute__((alias(#initfn)));	\

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#107: FILE: include/linux/init.h:80:
+	__attribute__ ((__section__ (".initcalls"))) =			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".initcalls") over __attribute__((__section__(".initcalls")))
#107: FILE: include/linux/init.h:80:
+	__attribute__ ((__section__ (".initcalls"))) =			\

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#112: FILE: include/linux/init.h:84:
+struct initcall_order
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'preceeds' may be misspelled - perhaps 'precedes'?
#113: FILE: include/linux/init.h:85:
+	char preceeds[INITCALL_MAX_NAMELEN];
 	     ^^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#118: FILE: include/linux/init.h:90:
+struct initcall_info
+{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: include/linux/init.h:182:
+#define initcall(initfn,initname,...) module_init(initfn)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: include/linux/init.h:182:
+#define initcall(initfn,initname,...) module_init(initfn)
                                 ^

WARNING:HOTPLUG_SECTION: Using __devexitdata is unnecessary
#160: FILE: include/linux/init.h:198:
 #define __devexitdata __exitdata

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/linux/init.h:203:
+#define ___CAT2(a,b) a##b
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: include/linux/init.h:204:
+#define __CAT2(a,b) ___CAT2(a,b)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: include/linux/init.h:204:
+#define __CAT2(a,b) ___CAT2(a,b)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: include/linux/init.h:205:
+#define __FAKENAME __CAT2(KBUILD_BASENAME,__LINE__)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: include/linux/init.h:206:
+#define __obs_initcall(fn,name,subsys) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: include/linux/init.h:206:
+#define __obs_initcall(fn,name,subsys) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: include/linux/init.h:207:
+	initcall(fn,name,init_as_part_of(subsys))
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: include/linux/init.h:207:
+	initcall(fn,name,init_as_part_of(subsys))
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: include/linux/init.h:210:
+#define core_initcall(fn) __obs_initcall(fn,__FAKENAME,core_init)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: include/linux/init.h:210:
+#define core_initcall(fn) __obs_initcall(fn,__FAKENAME,core_init)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: include/linux/init.h:211:
+#define arch_initcall(fn) __obs_initcall(fn,__FAKENAME,arch_init)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: include/linux/init.h:211:
+#define arch_initcall(fn) __obs_initcall(fn,__FAKENAME,arch_init)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/linux/init.h:212:
+#define subsys_initcall(fn) __obs_initcall(fn,__FAKENAME,subsys_init)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/linux/init.h:212:
+#define subsys_initcall(fn) __obs_initcall(fn,__FAKENAME,subsys_init)
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: include/linux/init.h:213:
+#define fs_initcall(fn) __obs_initcall(fn,__FAKENAME,fs_init)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: include/linux/init.h:213:
+#define fs_initcall(fn) __obs_initcall(fn,__FAKENAME,fs_init)
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/linux/init.h:214:
+#define device_initcall(fn) __obs_initcall(fn,__FAKENAME,device_init)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/linux/init.h:214:
+#define device_initcall(fn) __obs_initcall(fn,__FAKENAME,device_init)
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: include/linux/init.h:215:
+#define late_initcall(fn) __obs_initcall(fn,__FAKENAME,late_init)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: include/linux/init.h:215:
+#define late_initcall(fn) __obs_initcall(fn,__FAKENAME,late_init)
                                                       ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#233: FILE: init/main.c:424:
+extern void do_initcalls(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#296: FILE: scripts/build-initcalls:2:
+# Given an objdump, and a list of object files, spit out C code to

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 15 warnings, 0 checks, 313 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
