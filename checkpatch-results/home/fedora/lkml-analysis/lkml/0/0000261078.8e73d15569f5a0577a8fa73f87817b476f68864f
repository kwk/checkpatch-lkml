ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/arch/arm/kernel/setup.c	Wed Aug 11 14:46:15 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#68: FILE: arch/arm/kernel/setup.c:230:
+static const char *hwcap_str[] = {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cache' - possible side-effects?
#87: FILE: arch/arm/kernel/setup.c:287:
+#define get_cache_info(_size, _assoc, _line_size, _sets, cache)		\
+do {									\
+	unsigned int mult = 2 + (CACHE_M(cache) ? 1 : 0);		\
+									\
+	cpuinfo._size = mult << (8 + CACHE_SIZE(cache));		\
+	cpuinfo._assoc = (mult << CACHE_ASSOC(cache)) >> 1;		\
+	cpuinfo._line_size =  8 << CACHE_LINE(cache);			\
+	cpuinfo._sets =  						\
+		1 << (6 + CACHE_SIZE(cache) - CACHE_ASSOC(cache) -	\
+			    CACHE_LINE(cache));				\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#87: FILE: arch/arm/kernel/setup.c:287:
+#define get_cache_info(_size, _assoc, _line_size, _sets, cache)		\
+do {									\
+	unsigned int mult = 2 + (CACHE_M(cache) ? 1 : 0);		\
+									\
+	cpuinfo._size = mult << (8 + CACHE_SIZE(cache));		\
+	cpuinfo._assoc = (mult << CACHE_ASSOC(cache)) >> 1;		\
+	cpuinfo._line_size =  8 << CACHE_LINE(cache);			\
+	cpuinfo._sets =  						\
+		1 << (6 + CACHE_SIZE(cache) - CACHE_ASSOC(cache) -	\
+			    CACHE_LINE(cache));				\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: arch/arm/kernel/setup.c:294:
+^Icpuinfo._sets =  ^I^I^I^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#97: FILE: arch/arm/kernel/setup.c:297:
+} while(0);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#135: FILE: arch/arm/kernel/setup.c:374:
+		cpuinfo.cache_clean = cache_clean[CACHE_TYPE(cache_info)],
+		cpuinfo.cache_lockdown = cache_lockdown[CACHE_TYPE(cache_info)];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: arch/arm/kernel/setup.c:376:
+^I^Icpuinfo.cache_format = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: arch/arm/kernel/setup.c:380:
+^I^I^Iget_cache_info(icache_size, icache_assoc, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: arch/arm/kernel/setup.c:381:
+^I^I^I^I^Iicache_line_size, icache_sets, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: arch/arm/kernel/setup.c:381:
+			get_cache_info(icache_size, icache_assoc, 
+					icache_line_size, icache_sets, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: arch/arm/kernel/setup.c:383:
+^I^I^Iget_cache_info(dcache_size, dcache_assoc, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: arch/arm/kernel/setup.c:384:
+^I^I^I^I^Idcache_line_size, dcache_sets, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: arch/arm/kernel/setup.c:384:
+			get_cache_info(dcache_size, dcache_assoc, 
+					dcache_line_size, dcache_sets, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: arch/arm/kernel/setup.c:387:
+^I^I^Iget_cache_info(cache_size, cache_assoc, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: arch/arm/kernel/setup.c:388:
+^I^I^I^I^Icache_line_size, cache_sets, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: arch/arm/kernel/setup.c:388:
+			get_cache_info(cache_size, cache_assoc, 
+					cache_line_size, cache_sets, 

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#169: FILE: arch/arm/kernel/setup.c:825:
+#define ARM_CPU_ATTR(_field, _format)					\
+static ssize_t show_##_field(struct sys_device*dev, char *buf)		\
+{									\
+	struct cpu *cpu = 						\
+		(struct cpu*)container_of(dev, struct cpu, sysdev);	\
+	struct arm_cpuinfo *cpuinfo = 					\
+				(struct arm_cpuinfo*)cpu->arch_cpuinfo; \
+									\
+	return sprintf(buf, _format, cpuinfo->_field);			\
+}									\
+SYSDEV_ATTR(_field, 0644, show_##_field, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#169: FILE: arch/arm/kernel/setup.c:825:
+#define ARM_CPU_ATTR(_field, _format)					\
+static ssize_t show_##_field(struct sys_device*dev, char *buf)		\
+{									\
+	struct cpu *cpu = 						\
+		(struct cpu*)container_of(dev, struct cpu, sysdev);	\
+	struct arm_cpuinfo *cpuinfo = 					\
+				(struct arm_cpuinfo*)cpu->arch_cpuinfo; \
+									\
+	return sprintf(buf, _format, cpuinfo->_field);			\
+}									\
+SYSDEV_ATTR(_field, 0644, show_##_field, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#169: FILE: arch/arm/kernel/setup.c:825:
+#define ARM_CPU_ATTR(_field, _format)					\
+static ssize_t show_##_field(struct sys_device*dev, char *buf)		\
+{									\
+	struct cpu *cpu = 						\
+		(struct cpu*)container_of(dev, struct cpu, sysdev);	\
+	struct arm_cpuinfo *cpuinfo = 					\
+				(struct arm_cpuinfo*)cpu->arch_cpuinfo; \
+									\
+	return sprintf(buf, _format, cpuinfo->_field);			\
+}									\
+SYSDEV_ATTR(_field, 0644, show_##_field, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#170: FILE: arch/arm/kernel/setup.c:826:
+static ssize_t show_##_field(struct sys_device*dev, char *buf)		\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: arch/arm/kernel/setup.c:828:
+^Istruct cpu *cpu = ^I^I^I^I^I^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#173: FILE: arch/arm/kernel/setup.c:829:
+		(struct cpu*)container_of(dev, struct cpu, sysdev);	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: arch/arm/kernel/setup.c:830:
+^Istruct arm_cpuinfo *cpuinfo = ^I^I^I^I^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#175: FILE: arch/arm/kernel/setup.c:831:
+				(struct arm_cpuinfo*)cpu->arch_cpuinfo; \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: arch/arm/kernel/setup.c:837:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#219: FILE: arch/arm/kernel/setup.c:874:
+		   loops_per_jiffy / (500000/HZ),
 		                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#220: FILE: arch/arm/kernel/setup.c:875:
+		   (loops_per_jiffy / (5000/HZ)) % 100);
 		                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#335: FILE: arch/arm/kernel/setup.c:976:
+	if (ret) return ret;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#341: FILE: arch/arm/kernel/setup.c:982:
+		if (CACHE_S(cache_info)) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: arch/arm/kernel/setup.c:987:
+^I}^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#398: FILE: arch/arm/kernel/setup.c:1017:
+	if ((processor_id & 0x0000f000) != 0x00000000) {
+		seq_printf(m, "CPU variant\t: 0x%x\n", cpuinfo.variant);
 	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: arch/arm/kernel/setup.c:1033:
+^I^I^Iseq_printf(m, "I assoc\t\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: arch/arm/kernel/setup.c:1034:
+			seq_printf(m, "I assoc\t\t: %d\n", 
+					cpuinfo.icache_assoc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: arch/arm/kernel/setup.c:1035:
+^I^I^Iseq_printf(m, "I line length\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: arch/arm/kernel/setup.c:1036:
+			seq_printf(m, "I line length\t: %d\n", 
+					cpuinfo.icache_line_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: arch/arm/kernel/setup.c:1040:
+^I^I^Iseq_printf(m, "D assoc\t\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: arch/arm/kernel/setup.c:1041:
+			seq_printf(m, "D assoc\t\t: %d\n", 
+					cpuinfo.dcache_assoc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: arch/arm/kernel/setup.c:1042:
+^I^I^Iseq_printf(m, "D line length\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: arch/arm/kernel/setup.c:1043:
+			seq_printf(m, "D line length\t: %d\n", 
+					cpuinfo.dcache_line_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: arch/arm/kernel/setup.c:1046:
+^I^I^Iseq_printf(m, "Cache size\t\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/arm/kernel/setup.c:1047:
+			seq_printf(m, "Cache size\t\t: %d\n", 
+					cpuinfo.icache_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: arch/arm/kernel/setup.c:1048:
+^I^I^Iseq_printf(m, "Cache assoc\t\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: arch/arm/kernel/setup.c:1049:
+			seq_printf(m, "Cache assoc\t\t: %d\n", 
+					cpuinfo.icache_assoc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/arm/kernel/setup.c:1050:
+^I^I^Iseq_printf(m, "Cache line length\t: %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: arch/arm/kernel/setup.c:1051:
+			seq_printf(m, "Cache line length\t: %d\n", 
+					cpuinfo.icache_line_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: arch/arm/kernel/setup.c:1052:
+^I^I^Iseq_printf(m, "Cache sets\t\t: %d", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: arch/arm/kernel/setup.c:1053:
+			seq_printf(m, "Cache sets\t\t: %d", 
+					cpuinfo.icache_sets);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#465: FILE: include/asm-arm/cpuinfo.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#466: FILE: include/asm-arm/cpuinfo.h:2:
+ * include/asm-arm/cpuinfo.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: include/asm-arm/cpuinfo.h:8:
+ * Copyright 2004 (c) MontaVista Software, Inc. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: include/asm-arm/cpuinfo.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: include/asm-arm/cpuinfo.h:10:
+ * This file is licensed under  the terms of the GNU General Public $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: include/asm-arm/cpuinfo.h:11:
+ * License version 2. This program is licensed "as is" without any $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#479: FILE: include/asm-arm/cpuinfo.h:15:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#483: FILE: include/asm-arm/cpuinfo.h:19:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: include/asm-arm/cpuinfo.h:37:
+^Iunsigned int cache_sets;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: include/asm-arm/cpuinfo.h:42:
+^Iunsigned int icache_sets;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: include/asm-arm/cpuinfo.h:47:
+^Iunsigned int dcache_sets;^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 11 warnings, 19 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
