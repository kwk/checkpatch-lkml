ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: fs/ext2/acl.c:92:
+^Iext_acl = kmalloc(sizeof(ext2_acl_header) + acl->a_count * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: fs/ext3/acl.c:93:
+^Iext_acl = kmalloc(sizeof(ext3_acl_header) + acl->a_count * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: fs/ext3/resize.c:442:
+^In_group_desc = kmalloc((gdb_num + 1) * sizeof(struct buffer_head *), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/ext3/resize.c:443:
+	n_group_desc = kmalloc((gdb_num + 1) * sizeof(struct buffer_head *), 
+			GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#131: FILE: fs/hpfs/buffer.c:79:
+	qbh->data = data = kmalloc(2048, GFP_NOFS);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#178: FILE: fs/jffs/intrep.c:491:
+	if (!(f = kzalloc(sizeof(*f), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#192: FILE: fs/jffs/intrep.c:517:
+	if (!(c = kmalloc(s, GFP_KERNEL))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#192: FILE: fs/jffs/intrep.c:517:
+	if (!(c = kmalloc(s, GFP_KERNEL))) {
 		goto fail_control;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#201: FILE: fs/jffs/intrep.c:525:
+	if (!(c->hash = kmalloc(s, GFP_KERNEL))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#201: FILE: fs/jffs/intrep.c:525:
+	if (!(c->hash = kmalloc(s, GFP_KERNEL))) {
 		goto fail_hash;
 	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: fs/jffs/intrep.c:594:
+	if (!(root = kmalloc(sizeof(struct jffs_file), GFP_KERNEL))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#211: FILE: fs/jffs/intrep.c:594:
+	if (!(root = kmalloc(sizeof(struct jffs_file), GFP_KERNEL))) {
 		return -ENOMEM;
 	}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*root)...) over kmalloc(sizeof(struct jffs_file)...)
#211: FILE: fs/jffs/intrep.c:594:
+	if (!(root = kmalloc(sizeof(struct jffs_file), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <TxBlock>
#248: FILE: fs/jfs/jfs_txnmgr.c:285:
+	TxBlock = vmalloc(size);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <TxLock>
#257: FILE: fs/jfs/jfs_txnmgr.c:310:
+	TxLock = vmalloc(size);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#449: FILE: fs/xfs/linux-2.6/xfs_file.c:373:
+		if ((read_buf = kmalloc(rlen, GFP_KERNEL)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: fs/xfs/linux-2.6/xfs_iops.c:556:
+	link = kmalloc(MAXPATHLEN+1, GFP_KERNEL);
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000055769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 3 warnings, 6 checks, 292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000055769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
