WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#48: 
count the mismatch didnt show only until much later in irq_exit() when
                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#76: FILE: kernel/sched.c:2973:
+	BUG_ON(((int)preempt_count() < 0));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#81: FILE: kernel/sched.c:2978:
+	BUG_ON((preempt_count() & PREEMPT_MASK) >= PREEMPT_MASK-10);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#81: FILE: kernel/sched.c:2978:
+	BUG_ON((preempt_count() & PREEMPT_MASK) >= PREEMPT_MASK-10);
 	                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: kernel/sched.c:2987:
+	BUG_ON(val > preempt_count());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#94: FILE: kernel/sched.c:2991:
+	BUG_ON((val < PREEMPT_MASK) && !(preempt_count() & PREEMPT_MASK));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#136: FILE: kernel/sched.c:4353:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: kernel/sched.c:4354:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#169: FILE: kernel/timer.c:470:
+				u32 preempt_count = preempt_count();
+				fn(data);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#171: FILE: kernel/timer.c:472:
+					printk("huh, entered %p with %08x, exited with %08x?\n", fn, preempt_count, preempt_count());

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: kernel/timer.c:472:
+					printk("huh, entered %p with %08x, exited with %08x?\n", fn, preempt_count, preempt_count());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: kernel/timer.c:473:
+					BUG();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: include/linux/preempt.h:13:
+  extern void fastcall add_preempt_count(int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/preempt.h:13:
+  extern void fastcall add_preempt_count(int val);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: include/linux/preempt.h:14:
+  extern void fastcall sub_preempt_count(int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/preempt.h:14:
+  extern void fastcall sub_preempt_count(int val);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#241: FILE: include/linux/preempt.h:16:
+# define add_preempt_count(val)	do { preempt_count() += (val); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#242: FILE: include/linux/preempt.h:17:
+# define sub_preempt_count(val)	do { preempt_count() -= (val); } while (0)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#284: FILE: lib/Kconfig.debug:55:
+config DEBUG_PREEMPT
+	bool "Debug preemptible kernel"
 	depends on PREEMPT && X86
 	default y
 	help
 	  If you say Y here then the kernel will use a debug variant of the
 	  commonly used smp_processor_id() function and will print warnings
+	  if kernel code uses it in a preemption-unsafe way. Also, the kernel

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000244560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 14 warnings, 5 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000244560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
