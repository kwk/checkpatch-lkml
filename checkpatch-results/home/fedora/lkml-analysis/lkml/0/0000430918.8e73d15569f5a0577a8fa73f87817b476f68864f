WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -urpN linux-2.5.37/arch/ppc/config.in linux-2.5.37-ltt/arch/ppc/config.in

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: arch/ppc/kernel/entry.S:174:
+ ^ITRACE_REAL_ASM_SYSCALL_EXIT ; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#171: FILE: arch/ppc/kernel/process.c:300:
+long original_kernel_thread(int (*fn) (void *), void* arg, unsigned long flags);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#172: FILE: arch/ppc/kernel/process.c:301:
+long kernel_thread(int (*fn) (void *), void* arg, unsigned long flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: arch/ppc/kernel/process.c:303:
+        long   retval;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: arch/ppc/kernel/process.c:303:
+        long   retval;$

CHECK:SPACING: No space is necessary after a cast
#178: FILE: arch/ppc/kernel/process.c:307:
+		TRACE_PROCESS(TRACE_EV_PROCESS_KTHREAD, retval, (int) fn);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: arch/ppc/kernel/time.c:163:
+ ^ITRACE_TRAP_ENTRY(regs->trap, instruction_pointer(regs));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: arch/ppc/kernel/time.c:163:
+ ^ITRACE_TRAP_ENTRY(regs->trap, instruction_pointer(regs));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/ppc/kernel/time.c:163:
+ ^ITRACE_TRAP_ENTRY(regs->trap, instruction_pointer(regs));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: arch/ppc/kernel/time.c:220:
+ ^ITRACE_TRAP_EXIT();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: arch/ppc/kernel/time.c:220:
+ ^ITRACE_TRAP_EXIT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/ppc/kernel/time.c:220:
+ ^ITRACE_TRAP_EXIT();$

CHECK:SPACING: No space is necessary after a cast
#278: FILE: arch/ppc/kernel/traps.c:389:
+	trace_syscall_event.syscall_id = (uint8_t) regs->gpr[0];

CHECK:SPACING: No space is necessary after a cast
#292: FILE: arch/ppc/kernel/traps.c:403:
+			     (void *) &lower_bound,

CHECK:SPACING: No space is necessary after a cast
#293: FILE: arch/ppc/kernel/traps.c:404:
+			     (void *) &upper_bound) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#297: FILE: arch/ppc/kernel/traps.c:408:
+	if ((use_depth == 1) || (use_bounds == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#297: FILE: arch/ppc/kernel/traps.c:408:
+	if ((use_depth == 1) || (use_bounds == 1)) {

CHECK:SPACING: No space is necessary after a cast
#299: FILE: arch/ppc/kernel/traps.c:410:
+		stack = (unsigned long *) regs->gpr[1];

CHECK:SPACING: No space is necessary after a cast
#304: FILE: arch/ppc/kernel/traps.c:415:
+		stack = (unsigned long *) addr;

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#306: FILE: arch/ppc/kernel/traps.c:417:
+		/* Keep on going until we reach the end of the process' stack limit (wherever it may be) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#307: FILE: arch/ppc/kernel/traps.c:418:
+		while (!get_user(addr, stack + 1)) {	/* "stack + 1", since this is where the IP is */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > current->mm->start_code'
#309: FILE: arch/ppc/kernel/traps.c:420:
+			if ((addr > current->mm->start_code)
+			    && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < current->mm->end_code'
#309: FILE: arch/ppc/kernel/traps.c:420:
+			if ((addr > current->mm->start_code)
+			    && (addr < current->mm->end_code)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#310: FILE: arch/ppc/kernel/traps.c:421:
+			if ((addr > current->mm->start_code)
+			    && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#312: FILE: arch/ppc/kernel/traps.c:423:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#312: FILE: arch/ppc/kernel/traps.c:423:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#312: FILE: arch/ppc/kernel/traps.c:423:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#312: FILE: arch/ppc/kernel/traps.c:423:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#312: FILE: arch/ppc/kernel/traps.c:423:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#313: FILE: arch/ppc/kernel/traps.c:424:
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: arch/ppc/kernel/traps.c:424:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:BRACES: Unbalanced braces around else statement
#319: FILE: arch/ppc/kernel/traps.c:430:
+				} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#326: FILE: arch/ppc/kernel/traps.c:437:
+			stack = (unsigned long *) addr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: arch/ppc/mm/fault.c:92:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#372: FILE: arch/ppc/mm/fault.c:102:
+		if (debugger_dabr_match(regs)){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#435: FILE: include/asm-ppc/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#436: FILE: include/asm-ppc/trace.h:2:
+ * linux/include/asm-ppc/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#451: FILE: include/asm-ppc/trace.h:17:
+#define TRACE_ARCH_VARIANT_PPC_6xx          2   /* 6xx/7xx/74xx/8260/POWER3 systems (desktop flavor) */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430918.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 12 warnings, 20 checks, 370 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430918.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
