CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
; Copyright (C) 2003-2006 Herbert Pötzl <herbert@13thfloor.at>
                                   ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#49: 
Signed-off-by: Herbert Pötzl <herbert@13thfloor.at>
                        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#60: FILE: fs/namei.c:1298:
+	int isdir, struct nameidata *nd)
 	                             ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: fs/namei.c:1298:
+static int may_delete(struct inode *dir, struct dentry *victim,
+	int isdir, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#69: FILE: fs/namei.c:1307:
+	error = permission(dir,MAY_WRITE | MAY_EXEC, nd);
 	                                             ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: fs/namei.c:1307:
+	error = permission(dir,MAY_WRITE | MAY_EXEC, nd);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#79: FILE: fs/namei.c:1725:
+	int mode, dev_t dev, struct nameidata *nd)
 	                                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: fs/namei.c:1725:
+int vfs_mknod(struct inode *dir, struct dentry *dentry,
+	int mode, dev_t dev, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#82: FILE: fs/namei.c:1727:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#92: FILE: fs/namei.c:1776:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#93: FILE: fs/namei.c:1777:
+					new_decode_dev(dev), &nd);
 					                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/namei.c:1777:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
+					new_decode_dev(dev), &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#97: FILE: fs/namei.c:1780:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#98: FILE: fs/namei.c:1781:
+					0, &nd);
 					    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: fs/namei.c:1781:
+			error = vfs_mknod(nd.dentry->d_inode, dentry, mode,
+					0, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#108: FILE: fs/namei.c:1800:
+	int mode, struct nameidata *nd)
 	                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: fs/namei.c:1800:
+int vfs_mkdir(struct inode *dir, struct dentry *dentry,
+	int mode, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#111: FILE: fs/namei.c:1802:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#120: FILE: fs/namei.c:1841:
+			error = vfs_mkdir(nd.dentry->d_inode, dentry,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#121: FILE: fs/namei.c:1842:
+				mode, &nd);
 				       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: fs/namei.c:1842:
+			error = vfs_mkdir(nd.dentry->d_inode, dentry,
+				mode, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#131: FILE: fs/namei.c:1883:
+	struct nameidata *nd)
 	                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/namei.c:1883:
+int vfs_rmdir(struct inode *dir, struct dentry *dentry,
+	struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#134: FILE: fs/namei.c:1885:
+	int error = may_delete(dir, dentry, 1, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#143: FILE: fs/namei.c:1946:
+		error = vfs_rmdir(nd.dentry->d_inode, dentry, &nd);
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#143: FILE: fs/namei.c:1946:
+		error = vfs_rmdir(nd.dentry->d_inode, dentry, &nd);
 		                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/namei.c:1958:
+	struct nameidata *nd)
 	                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/namei.c:1958:
+int vfs_unlink(struct inode *dir, struct dentry *dentry,
+	struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#156: FILE: fs/namei.c:1960:
+	int error = may_delete(dir, dentry, 0, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#165: FILE: fs/namei.c:2022:
+		error = vfs_unlink(nd.dentry->d_inode, dentry, &nd);
 		                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#165: FILE: fs/namei.c:2022:
+		error = vfs_unlink(nd.dentry->d_inode, dentry, &nd);
 		                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#175: FILE: fs/namei.c:2042:
+	const char *oldname, int mode, struct nameidata *nd)
 	                                                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: fs/namei.c:2042:
+int vfs_symlink(struct inode *dir, struct dentry *dentry,
+	const char *oldname, int mode, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#178: FILE: fs/namei.c:2044:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#187: FILE: fs/namei.c:2084:
+			error = vfs_symlink(nd.dentry->d_inode, dentry,
 			                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#188: FILE: fs/namei.c:2085:
+				from, S_IALLUGO, &nd);
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/namei.c:2085:
+			error = vfs_symlink(nd.dentry->d_inode, dentry,
+				from, S_IALLUGO, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/namei.c:2098:
+	struct dentry *new_dentry, struct nameidata *nd)
 	                                             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: fs/namei.c:2098:
+int vfs_link(struct dentry *old_dentry, struct inode *dir,
+	struct dentry *new_dentry, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/namei.c:2106:
+	error = may_create(dir, new_dentry, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#216: FILE: fs/namei.c:2168:
+		error = vfs_link(old_nd.dentry, nd.dentry->d_inode,
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#217: FILE: fs/namei.c:2169:
+			new_dentry, &nd);
 			             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/namei.c:2169:
+		error = vfs_link(old_nd.dentry, nd.dentry->d_inode,
+			new_dentry, &nd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: fs/nfsd/vfs.c:1445:
+			err = vfs_symlink(dentry->d_inode, dnew,
+				path_alloced, mode, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: fs/nfsd/vfs.c:1450:
+		err = vfs_symlink(dentry->d_inode, dnew,
+			path, mode, NULL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#284: FILE: fs/nfsd/vfs.c:1667:
 		} else
[...]
+		err = vfs_unlink(dirp, rdentry, NULL);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/fs.h:904:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#327: FILE: include/linux/fs.h:904:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#327: FILE: include/linux/fs.h:904:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#327: FILE: include/linux/fs.h:904:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#327: FILE: include/linux/fs.h:904:
+extern int vfs_mkdir(struct inode *, struct dentry *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: include/linux/fs.h:905:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#328: FILE: include/linux/fs.h:905:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#328: FILE: include/linux/fs.h:905:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#328: FILE: include/linux/fs.h:905:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#328: FILE: include/linux/fs.h:905:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#328: FILE: include/linux/fs.h:905:
+extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/fs.h:906:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#329: FILE: include/linux/fs.h:906:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#329: FILE: include/linux/fs.h:906:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#329: FILE: include/linux/fs.h:906:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#329: FILE: include/linux/fs.h:906:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#329: FILE: include/linux/fs.h:906:
+extern int vfs_symlink(struct inode *, struct dentry *, const char *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/fs.h:907:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#330: FILE: include/linux/fs.h:907:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#330: FILE: include/linux/fs.h:907:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#330: FILE: include/linux/fs.h:907:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#330: FILE: include/linux/fs.h:907:
+extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/fs.h:908:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#331: FILE: include/linux/fs.h:908:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#331: FILE: include/linux/fs.h:908:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#331: FILE: include/linux/fs.h:908:
+extern int vfs_rmdir(struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/fs.h:909:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#332: FILE: include/linux/fs.h:909:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#332: FILE: include/linux/fs.h:909:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#332: FILE: include/linux/fs.h:909:
+extern int vfs_unlink(struct inode *, struct dentry *, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#356: FILE: net/unix/af_unix.c:784:
+		err = vfs_mknod(nd.dentry->d_inode, dentry, mode, 0, NULL);
 		                ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112863.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 54 warnings, 22 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112863.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
