WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
, miklos@szeredi.hu, Janak Desai <janak@us.ibm.com>, linux-fsdevel@vger.kernel.org, linux-kernel@vger.kernel.org

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#27: 
propogation wherever needed.
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: fs/namespace.c:91:
+struct vfsmount *__lookup_mnt(struct vfsmount *mnt, struct dentry *dentry,
+		struct dentry *root)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: fs/namespace.c:105:
+		if (p->mnt_parent == mnt && p->mnt_mountpoint == dentry &&
+				(root == NULL || p->mnt_root == root)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root"
#79: FILE: fs/namespace.c:105:
+				(root == NULL || p->mnt_root == root)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#109: FILE: fs/namespace.c:136:
+		 * as the original if that was on one */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/namespace.c:167:
+	list_add_tail(&mnt->mnt_hash,
+			mount_hashtable+hash(nd->mnt, nd->dentry));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: fs/namespace.c:167:
+			mount_hashtable+hash(nd->mnt, nd->dentry));
 			               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#133: FILE: fs/namespace.c:172:
+static void attach_prepare_mnt(struct vfsmount *mnt, struct nameidata *nd)
                                                                        ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#140: FILE: fs/namespace.c:179:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: fs/namespace.c:183:
+	struct vfsmount *parent = mnt->mnt_parent;
+	BUG_ON(parent==mnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: fs/namespace.c:183:
+	BUG_ON(parent==mnt);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#144: FILE: fs/namespace.c:183:
+	BUG_ON(parent==mnt);
 	             ^

ERROR:SPACING: space required before the open parenthesis '('
#145: FILE: fs/namespace.c:184:
+	if(list_empty(&mnt->mnt_hash))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: fs/namespace.c:186:
+		list_add_tail(&mnt->mnt_hash,
+			mount_hashtable+hash(parent, mnt->mnt_mountpoint));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#147: FILE: fs/namespace.c:186:
+			mount_hashtable+hash(parent, mnt->mnt_mountpoint));
 			               ^

ERROR:SPACING: space required before the open parenthesis '('
#148: FILE: fs/namespace.c:187:
+	if(list_empty(&mnt->mnt_child))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/namespace.c:194:
+struct vfsmount *do_attach_prepare_mnt(struct vfsmount *mnt,
+		struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#160: FILE: fs/namespace.c:199:
+	struct nameidata nd;
 	                 ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#162: FILE: fs/namespace.c:201:
+	if (clone_flag) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: fs/namespace.c:202:
+		if(!(child_mnt = clone_mnt(template_mnt,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#163: FILE: fs/namespace.c:202:
+		if(!(child_mnt = clone_mnt(template_mnt,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: fs/namespace.c:203:
+		if(!(child_mnt = clone_mnt(template_mnt,
+				template_mnt->mnt_root)))

CHECK:BRACES: Unbalanced braces around else statement
#166: FILE: fs/namespace.c:205:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: fs/namespace.c:208:
+	nd.mnt = mnt;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#170: FILE: fs/namespace.c:209:
+	nd.dentry = dentry;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#172: FILE: fs/namespace.c:211:
+	attach_prepare_mnt(child_mnt, &nd);
 	                               ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: fs/namespace.c:222:
+		BUG_ON(atomic_read(&mnt->mnt_count) != 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: fs/namespace.c:249:
+	struct list_head *prev = p->mnt_mounts.prev;
+	while (prev != &p->mnt_mounts) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: fs/namespace.c:674:
+	struct vfsmount *p;
+	for (p = mnt; p; p = next_mnt(p, mnt)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: fs/namespace.c:696:
+	list_for_each_entry_safe(tmp_pnode, t_p, pnodehead,
+			pnode_peer_slave) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#338: FILE: fs/namespace.c:697:
+			pnode_peer_slave) {
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: fs/namespace.c:717:
+^I^I^I * ^Iwas made as a slave mnt.$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#374: FILE: fs/namespace.c:733:
+static void abort_attach_recursive_mnt(struct vfsmount *source_mnt, struct
+		vfsmount *last, struct list_head *head) { struct vfsmount *p =

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#375: FILE: fs/namespace.c:734:
+		vfsmount *last, struct list_head *head) { struct vfsmount *p =
 		         ^

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#376: FILE: fs/namespace.c:735:
+	source_mnt, *m; struct vfspnode *src_pnode;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#387: FILE: fs/namespace.c:746:
+		BUG_ON(!m->mnt_pnode);

ERROR:SPACING: space required before the open parenthesis '('
#396: FILE: fs/namespace.c:755:
+			if(is_pnode_slave)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: fs/namespace.c:766:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#411: FILE: fs/namespace.c:770:
+	} while ( p && m != last );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#411: FILE: fs/namespace.c:770:
+	} while ( p && m != last );

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#417: FILE: fs/namespace.c:776:
+ /*
+ *  @source_mnt : mount tree to be attached

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#418: FILE: fs/namespace.c:777:
+ *  @nd		: place the mount tree @source_mnt is attached
      ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#426: FILE: fs/namespace.c:785:
+ *  | source^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#427: FILE: fs/namespace.c:786:
+ *  |   |   ^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: fs/namespace.c:787:
+ *  |   v ^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: fs/namespace.c:789:
+ *  |^I     ^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#431: FILE: fs/namespace.c:790:
+ *  |  shared^I| shared (++) ^I|      shared (+)|shared (+)| shared (+)|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: fs/namespace.c:791:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: fs/namespace.c:792:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#434: FILE: fs/namespace.c:793:
+ *  | private^I| shared (+)^I|      private^I | private  | private  ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#435: FILE: fs/namespace.c:794:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: fs/namespace.c:795:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: fs/namespace.c:796:
+ *  | slave^I| shared (+)^I|      private   | private  | private  ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#438: FILE: fs/namespace.c:797:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: fs/namespace.c:798:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: fs/namespace.c:799:
+ *  | unclonable|    nomount^I|       nomount^I |  nomount | nomount ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#441: FILE: fs/namespace.c:800:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#442: FILE: fs/namespace.c:801:
+ *  |^I^I|^I^I|       ^I |   ^I    |    ^I|$

WARNING:TYPO_SPELLING: 'propogated' may be misspelled - perhaps 'propagated'?
#445: FILE: fs/namespace.c:804:
+ * (++)  the mount will be propogated to all the vfsmounts in the pnode tree
                            ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#446: FILE: fs/namespace.c:805:
+ *    ^I  of the destination vfsmount, and all the non-slave new mounts in$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#447: FILE: fs/namespace.c:806:
+ *    ^I  destination vfsmount will be added the source vfsmount's pnode.$

WARNING:TYPO_SPELLING: 'propogated' may be misspelled - perhaps 'propagated'?
#448: FILE: fs/namespace.c:807:
+ * (+)  the mount will be propogated to the destination vfsmount
                           ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: fs/namespace.c:808:
+ *    ^I  and the new mount will be added to the source vfsmount's pnode.$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#457: FILE: fs/namespace.c:816:
+ *
+  */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#459: FILE: fs/namespace.c:818:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: fs/namespace.c:818:
+static int attach_recursive_mnt(struct vfsmount *source_mnt,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#476: FILE: fs/namespace.c:835:
+		attach_mnt(source_mnt, nd);
 		                       ^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#493: FILE: fs/namespace.c:852:
+	for (m = source_mnt; m; m = next_mnt(m, source_mnt)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: fs/namespace.c:853:
+		BUG_ON(IS_MNT_UNCLONE(m));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#506: FILE: fs/namespace.c:865:
+		p=m;
 		 ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#510: FILE: fs/namespace.c:869:
+		src_pnode = (IS_MNT_SHARED(m))?
 		                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#517: FILE: fs/namespace.c:876:
+		if (!(tmp_pnode = pnode_alloc())) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#527: FILE: fs/namespace.c:886:
+			if ((ret = pnode_prepare_mount(dest_pnode, tmp_pnode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: fs/namespace.c:887:
+			if ((ret = pnode_prepare_mount(dest_pnode, tmp_pnode,
+					mntpt_dentry, m, mntpt_mnt))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: fs/namespace.c:896:
+				do_attach_prepare_mnt(mntpt_mnt,
+					mntpt_dentry, m, 0);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#601: FILE: fs/namespace.c:960:
+		err = attach_recursive_mnt(mnt, nd);
 		                                ^^

WARNING:REPEATED_WORD: Possible repeated word: 'dir'
#610: FILE: fs/namespace.c:1033:
+ * This operation is equivalent of mount --bind dir dir

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#610: FILE: fs/namespace.c:1033:
+ /*
+ * This operation is equivalent of mount --bind dir dir

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#614: FILE: fs/namespace.c:1037:
+ * under the new mount.
+  */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#618: FILE: fs/namespace.c:1041:
+	struct nameidata nd;
 	                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: fs/namespace.c:1062:
+		list_for_each_entry_safe(child_mnt, next,
+				&mnt->mnt_mounts, mnt_child) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#640: FILE: fs/namespace.c:1063:
+				&mnt->mnt_mounts, mnt_child) {
+

ERROR:SPACING: space required before the open parenthesis '('
#641: FILE: fs/namespace.c:1064:
+			if(child_mnt->mnt_mountpoint == dentry)

ERROR:SPACING: space required before the open parenthesis '('
#644: FILE: fs/namespace.c:1067:
+			if(!is_subdir(child_mnt->mnt_mountpoint, dentry))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#647: FILE: fs/namespace.c:1070:
+			detach_mnt(child_mnt, &nd);
 			                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#648: FILE: fs/namespace.c:1071:
+			nd.mnt = newmnt;
 			^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#649: FILE: fs/namespace.c:1072:
+			attach_mnt(child_mnt, &nd);
 			                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#652: FILE: fs/namespace.c:1075:
+		nd.mnt = mnt;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#653: FILE: fs/namespace.c:1076:
+		nd.dentry = dentry;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#654: FILE: fs/namespace.c:1077:
+		attach_mnt(newmnt, &nd);
 		                    ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: fs/namespace.c:1079:
+ ^I^Ispin_unlock(&vfsmount_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: fs/namespace.c:1079:
+ ^I^Ispin_unlock(&vfsmount_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: fs/namespace.c:1079:
+ ^I^Ispin_unlock(&vfsmount_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: fs/namespace.c:1080:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: fs/namespace.c:1080:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: fs/namespace.c:1080:
+ ^I}$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#662: FILE: fs/namespace.c:1085:
+ /*
+ * Inverse operation of do_make_mounted()

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#663: FILE: fs/namespace.c:1086:
+ * Inverse operation of do_make_mounted()
+  */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#667: FILE: fs/namespace.c:1090:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#683: FILE: fs/namespace.c:1106:
+		detach_mnt(child_mnt, &nd);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#684: FILE: fs/namespace.c:1107:
+		nd.mnt = parent_mnt;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#685: FILE: fs/namespace.c:1108:
+		attach_mnt(child_mnt, &nd);
 		                       ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: fs/namespace.c:1109:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#686: FILE: fs/namespace.c:1109:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: fs/namespace.c:1109:
+ ^I}$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#687: FILE: fs/namespace.c:1110:
+	detach_mnt(mnt, &nd);
 	                 ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: fs/namespace.c:1111:
+ ^Ispin_unlock(&vfsmount_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#688: FILE: fs/namespace.c:1111:
+ ^Ispin_unlock(&vfsmount_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: fs/namespace.c:1111:
+ ^Ispin_unlock(&vfsmount_lock);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#693: FILE: fs/namespace.c:1116:
+ * @nd: contains the vfsmount and the dentry where the new mount
     ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#694: FILE: fs/namespace.c:1117:
+ * ^Iis the be created$

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#697: FILE: fs/namespace.c:1120:
+ * propogate the mount to all other mounts if the mountpoint
    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#700: FILE: fs/namespace.c:1123:
+int make_mounted(struct nameidata *nd, struct vfsmount **mnt)
                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#704: FILE: fs/namespace.c:1127:
+	int err = mount_is_safe(nd);
 	                        ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#705: FILE: fs/namespace.c:1128:
+	int err = mount_is_safe(nd);
+	if (err)

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: fs/namespace.c:1132:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#709: FILE: fs/namespace.c:1132:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: fs/namespace.c:1132:
+ ^I/*$

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#713: FILE: fs/namespace.c:1136:
+	 * Also propogate the mount if parent_mnt
 	        ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#715: FILE: fs/namespace.c:1138:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#715: FILE: fs/namespace.c:1138:
+ ^I */$

ERROR:SPACING: space required before the open parenthesis '('
#716: FILE: fs/namespace.c:1139:
+	if(parent_dentry != parent_mnt->mnt_root) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#716: FILE: fs/namespace.c:1139:
+	if(parent_dentry != parent_mnt->mnt_root) {
[...]
+ 	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: fs/namespace.c:1142:
+			 pnode_make_mounted(parent_mnt->mnt_pnode,
+					 parent_mnt, parent_dentry) :

ERROR:CODE_INDENT: code indent should use tabs where possible
#723: FILE: fs/namespace.c:1146:
+ ^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#723: FILE: fs/namespace.c:1146:
+ ^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: fs/namespace.c:1146:
+ ^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#723: FILE: fs/namespace.c:1146:
+ 	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#729: FILE: fs/namespace.c:1152:
+ /*
+ * Inverse operation of make_mounted()

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#730: FILE: fs/namespace.c:1153:
+ * Inverse operation of make_mounted()
+  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#744: FILE: fs/namespace.c:1167:
+ ^Ielse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#744: FILE: fs/namespace.c:1167:
+ ^Ielse$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: fs/namespace.c:1167:
+ ^Ielse$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#758: FILE: fs/namespace.c:1216:
+	struct vfsmount *mnt = NULL, *overlay_mnt=NULL;
 	                                         ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#775: FILE: fs/namespace.c:1234:
 	if (check_mnt(nd->mnt) && (!recurse || check_mnt(old_nd.mnt))) {
+

ERROR:SPACING: space required before the open parenthesis '('
#783: FILE: fs/namespace.c:1242:
+		if(IS_MNT_SHARED(old_nd.mnt) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#783: FILE: fs/namespace.c:1242:
+		if(IS_MNT_SHARED(old_nd.mnt) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: fs/namespace.c:1243:
+		if(IS_MNT_SHARED(old_nd.mnt) &&
+			(err = make_mounted(&old_nd, &overlay_mnt)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#807: FILE: fs/namespace.c:1261:
+ ^I^I^Ispin_lock(&vfsmount_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#807: FILE: fs/namespace.c:1261:
+ ^I^I^Ispin_lock(&vfsmount_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: fs/namespace.c:1261:
+ ^I^I^Ispin_lock(&vfsmount_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#808: FILE: fs/namespace.c:1262:
+ ^I^I^Iumount_tree(mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#808: FILE: fs/namespace.c:1262:
+ ^I^I^Iumount_tree(mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: fs/namespace.c:1262:
+ ^I^I^Iumount_tree(mnt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#809: FILE: fs/namespace.c:1263:
+ ^I^I^Ispin_unlock(&vfsmount_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#809: FILE: fs/namespace.c:1263:
+ ^I^I^Ispin_unlock(&vfsmount_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: fs/namespace.c:1263:
+ ^I^I^Ispin_unlock(&vfsmount_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: fs/namespace.c:1270:
+ ^I^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#816: FILE: fs/namespace.c:1270:
+ ^I^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: fs/namespace.c:1270:
+ ^I^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: fs/namespace.c:1270:
+ 		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#817: FILE: fs/namespace.c:1271:
+ ^I^I^Imntput(mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#817: FILE: fs/namespace.c:1271:
+ ^I^I^Imntput(mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: fs/namespace.c:1271:
+ ^I^I^Imntput(mnt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: fs/namespace.c:1272:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#818: FILE: fs/namespace.c:1272:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: fs/namespace.c:1272:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: fs/namespace.c:1278:
+ ^Ipath_release(&old_nd);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#824: FILE: fs/namespace.c:1278:
+ ^Ipath_release(&old_nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: fs/namespace.c:1278:
+ ^Ipath_release(&old_nd);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: fs/pnode.c:93:
+		list_add(&mnt->mnt_pnode_mntlist,
+				&pnode->pnode_slavevfs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1004: FILE: fs/pnode.c:97:
+		list_add(&mnt->mnt_pnode_mntlist,
+				&pnode->pnode_vfs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1022: FILE: fs/pnode.c:444:
+int pnode_mount_func(struct vfspnode *pnode, void *indata,
+		void **outdata, va_list args)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1025: FILE: fs/pnode.c:447:
+	int ret=0;
 	       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1031: FILE: fs/pnode.c:453:
+	else if (!(pnode_slave = pnode_alloc()))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: fs/pnode.c:464:
+int vfs_make_mounted_func(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1045: FILE: fs/pnode.c:467:
+	int ret=0;
 	       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1050: FILE: fs/pnode.c:472:
+	if (!(child_mount = do_make_mounted(mnt, target_dentry))) {

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1056: FILE: fs/pnode.c:478:
+	case PNODE_SLAVE_VFS :
 	                     ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1059: FILE: fs/pnode.c:481:
+	case PNODE_MEMBER_VFS :
 	                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1070: FILE: fs/pnode.c:492:
+ *  ^I^Inew mount is created at dentry 'dentry'$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: fs/pnode.c:501:
+struct vfsmount *pnode_make_mounted(struct vfspnode *pnode,
+		struct vfsmount *mnt, struct dentry *dentry)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1084: FILE: fs/pnode.c:506:
+	if (!(child_pnode = pnode_alloc()))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1088: FILE: fs/pnode.c:510:
+	if (pnode_traverse(pnode, child_pnode, (void *)NULL,
+			pnode_mount_func, NULL, vfs_make_mounted_func,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1090: FILE: fs/pnode.c:512:
+  ^I^Igoto error;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1090: FILE: fs/pnode.c:512:
+  ^I^Igoto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1090: FILE: fs/pnode.c:512:
+  ^I^Igoto error;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: fs/pnode.c:523:
+int vfs_make_unmounted_func(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1104: FILE: fs/pnode.c:526:
+	int ret=0;
 	       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: fs/pnode.c:549:
+int vfs_prepare_mount_func(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1133: FILE: fs/pnode.c:555:
+	source_mnt = va_arg(args, struct vfsmount * );

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p_mnt != mnt'
#1137: FILE: fs/pnode.c:559:
+	if ((p_mnt != mnt) || (source_mnt == source_mnt->mnt_parent)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'source_mnt == source_mnt->mnt_parent'
#1137: FILE: fs/pnode.c:559:
+	if ((p_mnt != mnt) || (source_mnt == source_mnt->mnt_parent)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1137: FILE: fs/pnode.c:559:
+	if ((p_mnt != mnt) || (source_mnt == source_mnt->mnt_parent)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1139: FILE: fs/pnode.c:561:
+		child_mnt = do_attach_prepare_mnt(mnt, mountpoint_dentry,
+				source_mnt, (p_mnt != mnt));

CHECK:BRACES: Unbalanced braces around else statement
#1145: FILE: fs/pnode.c:567:
+	} else

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1149: FILE: fs/pnode.c:571:
+	case PNODE_SLAVE_VFS :
 	                     ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1152: FILE: fs/pnode.c:574:
+	case PNODE_MEMBER_VFS :
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: fs/pnode.c:583:
+int pnode_prepare_mount(struct vfspnode *pnode,
+		struct vfspnode *master_child_pnode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1178: FILE: fs/pnode.c:600:
+int pnode_commit_mount_post_func(struct vfspnode *pnode, void *indata,
+		va_list args)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1182: FILE: fs/pnode.c:604:
+		BUG_ON(!list_empty(&pnode->pnode_vfs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1183: FILE: fs/pnode.c:605:
+		BUG_ON(!list_empty(&pnode->pnode_slavevfs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1184: FILE: fs/pnode.c:606:
+		BUG_ON(!list_empty(&pnode->pnode_slavepnode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1193: FILE: fs/pnode.c:615:
+int vfs_commit_mount_func(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1195: FILE: fs/pnode.c:617:
+	BUG_ON(mnt == mnt->mnt_parent);

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#1208: FILE: fs/pnode.c:630:
+ * @pnode: walk the propogation tree and complete the
                     ^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1209: FILE: fs/pnode.c:631:
+ * ^Iattachments of the child mounts to the parents$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1210: FILE: fs/pnode.c:632:
+ * ^Icorrespondingly.$

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#1211: FILE: fs/pnode.c:633:
+ * @flag: if set destroy the propogation tree
                              ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: fs/pnode.c:643:
+int vfs_abort_mount_func(struct vfsmount *mnt,
+		enum pnode_vfs_type flag, void *indata, va_list args)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1225: FILE: fs/pnode.c:647:
+	struct vfsmount *exception_mnt = va_arg(args, struct vfsmount *);
+	BUG_ON(!mnt->mnt_pnode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1225: FILE: fs/pnode.c:647:
+	BUG_ON(!mnt->mnt_pnode);

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#1232: FILE: fs/pnode.c:654:
+ * clean the propogation tree under pnode, releasing all
              ^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1235: FILE: fs/pnode.c:657:
+ * ^Ireleasing all pnodes in the tree as well as$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1236: FILE: fs/pnode.c:658:
+ * ^Iunlinking any mounts, except 'exception_mnt'$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1238: FILE: fs/pnode.c:660:
+ * ^I^Ibug not released.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: fs/pnode.c:663:
+int pnode_abort_mount(struct vfspnode *pnode,
+		struct vfsmount *exception_mnt)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1255: FILE: include/linux/fs.h:1219:
+extern struct vfsmount *do_attach_prepare_mnt(struct vfsmount *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1255: FILE: include/linux/fs.h:1219:
+extern struct vfsmount *do_attach_prepare_mnt(struct vfsmount *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1255: FILE: include/linux/fs.h:1219:
+extern struct vfsmount *do_attach_prepare_mnt(struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1255: FILE: include/linux/fs.h:1219:
+extern struct vfsmount *do_attach_prepare_mnt(struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1255: FILE: include/linux/fs.h:1219:
+extern struct vfsmount *do_attach_prepare_mnt(struct vfsmount *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1256: FILE: include/linux/fs.h:1220:
+extern struct vfsmount *do_attach_prepare_mnt(struct vfsmount *,
+		struct dentry *, struct vfsmount *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1257: FILE: include/linux/fs.h:1221:
+extern void do_attach_commit_mnt(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1257: FILE: include/linux/fs.h:1221:
+extern void do_attach_commit_mnt(struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1259: FILE: include/linux/fs.h:1223:
+extern int do_make_unmounted(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1259: FILE: include/linux/fs.h:1223:
+extern int do_make_unmounted(struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1260: FILE: include/linux/fs.h:1224:
+extern void do_detach_prepare_mnt(struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1260: FILE: include/linux/fs.h:1224:
+extern void do_detach_prepare_mnt(struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1260: FILE: include/linux/fs.h:1224:
+extern void do_detach_prepare_mnt(struct vfsmount *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1284: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1284: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1284: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1284: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: include/linux/dcache.h:333:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *,
+		struct dentry *, struct dentry *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 127 warnings, 53 checks, 1186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
