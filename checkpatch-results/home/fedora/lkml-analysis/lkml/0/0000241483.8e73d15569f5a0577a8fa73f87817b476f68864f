WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#65: 
Content-Type: text/plain; name=x86-64-optimize-numa-lookup.patch; charset=UTF-8

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#130: FILE: arch/x86_64/mm/k8topology.c:152:
+	printk(KERN_INFO "Using node hash shift of %d\n", memnode_addr_shift);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#175: FILE: arch/x86_64/mm/numa.c:39:
+/* This is a special biased mem_map per node table.
+   It contains the mem_map for a node minus the start pfn.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#176: FILE: arch/x86_64/mm/numa.c:40:
+   This trick makes some common inline functions faster and smaller. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: arch/x86_64/mm/numa.c:58:
+	int i;
+	for (i = 0; i < NODEMAPSIZE; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: arch/x86_64/mm/numa.c:74:
+		memset(memnode_rel_memmap,0,sizeof(*memnode_rel_memmap) * NODEMAPSIZE);
 		                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: arch/x86_64/mm/numa.c:74:
+		memset(memnode_rel_memmap,0,sizeof(*memnode_rel_memmap) * NODEMAPSIZE);
 		                           ^

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#221: FILE: arch/x86_64/mm/numa.c:84:
+					    "node %ld shift %d addr %Lx conflict %d\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: arch/x86_64/mm/numa.c:97:
+	memset(memnode_rel_memmap,0,sizeof(*memnode_rel_memmap) * NODEMAPSIZE);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: arch/x86_64/mm/numa.c:97:
+	memset(memnode_rel_memmap,0,sizeof(*memnode_rel_memmap) * NODEMAPSIZE);
 	                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: arch/x86_64/mm/numa.c:251:
+ ^Imemnode_addr_shift = compute_hash_shift(nodes);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: arch/x86_64/mm/numa.c:251:
+ ^Imemnode_addr_shift = compute_hash_shift(nodes);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: arch/x86_64/mm/numa.c:251:
+ ^Imemnode_addr_shift = compute_hash_shift(nodes);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: arch/x86_64/mm/numa.c:253:
+ ^Iif (memnode_addr_shift < 0) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: arch/x86_64/mm/numa.c:253:
+ ^Iif (memnode_addr_shift < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/x86_64/mm/numa.c:253:
+ ^Iif (memnode_addr_shift < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: arch/x86_64/mm/numa.c:254:
+ ^I^Imemnode_addr_shift = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: arch/x86_64/mm/numa.c:254:
+ ^I^Imemnode_addr_shift = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: arch/x86_64/mm/numa.c:254:
+ ^I^Imemnode_addr_shift = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: arch/x86_64/mm/numa.c:255:
+ ^I^Imemnode_pfn_shift = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: arch/x86_64/mm/numa.c:255:
+ ^I^Imemnode_pfn_shift = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: arch/x86_64/mm/numa.c:255:
+ ^I^Imemnode_pfn_shift = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: arch/x86_64/mm/numa.c:259:
+ ^Ifor (i = 0; i < numa_fake; i++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: arch/x86_64/mm/numa.c:259:
+ ^Ifor (i = 0; i < numa_fake; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: arch/x86_64/mm/numa.c:259:
+ ^Ifor (i = 0; i < numa_fake; i++) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#297: FILE: arch/x86_64/mm/numa.c:259:
+ 	for (i = 0; i < numa_fake; i++) {
  		setup_node_bootmem(i, nodes[i].start, nodes[i].end);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: arch/x86_64/mm/numa.c:287:
+	mark_memnode(0,0);
 	              ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#323: FILE: arch/x86_64/mm/numa.c:336:
+EXPORT_SYMBOL(memnode_pfn_shift);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((pure))
#356: FILE: include/asm-x86_64/mmzone.h:37:
+static inline __attribute__((pure)) int pfn_to_nid(unsigned long pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: include/asm-x86_64/mmzone.h:40:
+	int nid;
+	VIRTUAL_BUG_ON((pfn >> memnode_pfn_shift) >= NODEMAPSIZE);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#380: FILE: include/asm-x86_64/mmzone.h:61:
+#define pfn_to_page(pfn) ((pfn) + memnode_rel_memmap[(pfn) >> memnode_pfn_shift])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#384: FILE: include/asm-x86_64/mmzone.h:63:
+#define page_to_pfn(page) ({ \
+	struct zone *z = page_zone(page); 				\
+	/* Could also cache zone_mem_map + zone_start_pfn. Worth it? */ \
+	((page) - z->zone_mem_map) + z->zone_start_pfn;			\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: include/asm-x86_64/mmzone.h:64:
+^Istruct zone *z = page_zone(page); ^I^I^I^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241483.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 21 warnings, 2 checks, 260 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241483.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
