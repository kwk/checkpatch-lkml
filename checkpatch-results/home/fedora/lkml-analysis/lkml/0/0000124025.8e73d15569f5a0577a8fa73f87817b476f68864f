CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: mm/mempolicy.c:574:
+static int migrate_pages_to(struct list_head *pagelist,
+	struct vm_area_struct *vma, int dest)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: mm/mempolicy.c:589:
+			page = alloc_page_vma(GFP_HIGHUSER, vma,
+						vma->vm_start);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#99: FILE: mm/mempolicy.c:599:
+		if (nr_pages > MIGRATE_CHUNK_SIZE);
+			break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#99: FILE: mm/mempolicy.c:599:
+		if (nr_pages > MIGRATE_CHUNK_SIZE);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: mm/mempolicy.c:641:
+^I            &pagelist);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#148: FILE: mm/mempolicy.c:644:
+	if (!list_empty(&pagelist)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#154: FILE: mm/mempolicy.c:650:
+
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: mm/mempolicy.c:668:
+  ^Idown_read(&mm->mmap_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: mm/mempolicy.c:668:
+  ^Idown_read(&mm->mmap_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: mm/mempolicy.c:668:
+  ^Idown_read(&mm->mmap_sem);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: mm/mempolicy.c:702:
+		int s,d;
 		     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#220: FILE: mm/mempolicy.c:707:
+		for_each_node_mask(s, tmp) {
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124025.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 3 warnings, 5 checks, 211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124025.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
