WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -urpN linux-2.5.67-bk6/arch/ia64/kernel/iosapic.c cpu-2.5.67-bk6-1/arch/ia64/kernel/iosapic.c

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#48: FILE: arch/ia64/kernel/iosapic.c:277:
+iosapic_set_affinity (unsigned int irq, unsigned long arg)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#83: FILE: arch/ia64/kernel/irq.c:809:
+#define HEX_DIGITS (2*sizeof(cpumask_t))
                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: arch/ia64/kernel/irq.c:811:
+static int parse_hex_value (const char *buffer, unsigned long count, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#86: FILE: arch/ia64/kernel/irq.c:811:
+static int parse_hex_value (const char *buffer, unsigned long count, 

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#112: FILE: arch/ia64/kernel/irq.c:840:
+		bitmap_shift_left(&cpus_coerce(value), &cpus_coerce(value), 4, NR_CPUS);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: arch/ia64/kernel/irq.c:841:
+^I^Ifor (k = 0; k < 4; ++k) $

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#124: FILE: arch/ia64/kernel/irq.c:854:
+static cpumask_t irq_affinity [NR_IRQS] = { [0 ... NR_IRQS-1] = CPU_MASK_ALL };

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#124: FILE: arch/ia64/kernel/irq.c:854:
+static cpumask_t irq_affinity [NR_IRQS] = { [0 ... NR_IRQS-1] = CPU_MASK_ALL };
                                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: arch/ia64/kernel/irq.c:880:
+		int j = sprintf(page, "%08lx\n", irq_affinity[(long)data].mask[k]);
+		len +=j;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#150: FILE: arch/ia64/kernel/irq.c:880:
+		len +=j;
 		    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#151: FILE: arch/ia64/kernel/irq.c:881:
+		page +=j;
 		     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: arch/ia64/kernel/irq.c:918:
+^Iirq_desc(irq)->handler->set_affinity(irq | (redir? IA64_IRQ_REDIRECTED : 0), $

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#176: FILE: arch/ia64/kernel/irq.c:918:
+	irq_desc(irq)->handler->set_affinity(irq | (redir? IA64_IRQ_REDIRECTED : 0), 
 	                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: arch/ia64/kernel/irq.c:936:
+		int j = sprintf(page, "%08lx\n", mask->mask[k]);
+		len += j;

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#229: FILE: arch/ia64/kernel/perfmon.c:268:
+	cpumask_t		ctx_saved_cpus_allowed;	/* copy of the task cpus_allowed (system wide) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: arch/ia64/kernel/perfmon.c:936:
+		for(i = 0; !cpus_empty(m); i++, cpus_shift_right(m, m, 1)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#258: FILE: arch/ia64/kernel/perfmon.c:938:
+			if (!cpu_isset(0, m)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#275: FILE: arch/ia64/kernel/perfmon.c:962:
+	for(i=0; !cpus_empty(undo_mask); i++, cpus_shift_right(undo_mask, undo_mask, 1)) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: arch/ia64/kernel/perfmon.c:962:
+	for(i=0; !cpus_empty(undo_mask); i++, cpus_shift_right(undo_mask, undo_mask, 1)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#275: FILE: arch/ia64/kernel/perfmon.c:962:
+	for(i=0; !cpus_empty(undo_mask); i++, cpus_shift_right(undo_mask, undo_mask, 1)) {
 		pfm_sessions.pfs_sys_session[i] = NULL;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#309: FILE: arch/ia64/kernel/perfmon.c:989:
+		for(i=0; !cpus_empty(m); i++, cpus_shift_right(m, m, 1)) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: arch/ia64/kernel/perfmon.c:989:
+		for(i=0; !cpus_empty(m); i++, cpus_shift_right(m, m, 1)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#310: FILE: arch/ia64/kernel/perfmon.c:990:
+			if (cpu_isset(0, m)) continue;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#357: FILE: arch/ia64/kernel/perfmon.c:1083:
+		if (cpus_weight(task->cpus_allowed) != NR_CPUS &&

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#394: FILE: arch/ia64/kernel/perfmon.c:3148:
+		if (!cpu_online(i)) continue;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#441: FILE: arch/ia64/kernel/setup.c:544:
+	while (*pos < NR_CPUS && !cpu_isset(*pos, cpu_online_map))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#466: FILE: arch/ia64/kernel/smpboot.c:82:
+volatile cpumask_t cpu_online_map;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#473: FILE: arch/ia64/kernel/smpboot.c:88:
+static volatile cpumask_t cpu_callin_map;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#540: FILE: arch/ia64/kernel/smpboot.c:439:
+volatile cpumask_t node_to_cpu_mask[MAX_NUMNODES] __cacheline_aligned;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#586: FILE: arch/ia64/kernel/smpboot.c:515:
 void __devinit smp_prepare_boot_cpu(void)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#603: FILE: arch/ia64/kernel/time.c:41:
+	extern cpumask_t prof_cpu_mask;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#644: FILE: include/asm-ia64/smp.h:42:
+extern volatile cpumask_t cpu_online_map;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377624.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 16 warnings, 2 checks, 561 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377624.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
