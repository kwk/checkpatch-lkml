ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: fs/inode.c:199:
+                        /* Set I_LOCK, reset I_DIRTY */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: fs/inode.c:200:
+                        inode->i_state |= I_LOCK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/inode.c:200:
+                        inode->i_state |= I_LOCK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: fs/inode.c:201:
+                        inode->i_state &= ~I_DIRTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: fs/inode.c:201:
+                        inode->i_state &= ~I_DIRTY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: fs/inode.c:202:
+                        spin_unlock(&inode_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: fs/inode.c:202:
+                        spin_unlock(&inode_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: fs/inode.c:204:
+                        inode->i_sb->s_op->write_inode(inode, sync);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: fs/inode.c:204:
+                        inode->i_sb->s_op->write_inode(inode, sync);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: fs/inode.c:206:
+                        spin_lock(&inode_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/inode.c:206:
+                        spin_lock(&inode_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: fs/inode.c:207:
+                        inode->i_state &= ~I_LOCK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: fs/inode.c:207:
+                        inode->i_state &= ~I_LOCK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: fs/inode.c:208:
+                        wake_up(&inode->i_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: fs/inode.c:208:
+                        wake_up(&inode->i_wait);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: fs/inode.c:209:
+                        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: fs/inode.c:209:
+                        return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: fs/inode.c:210:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: fs/inode.c:210:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: fs/inode.c:211:
+                inode->i_state &= ~I_DIRTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: fs/inode.c:211:
+                inode->i_state &= ~I_DIRTY;$

ERROR:SPACING: space required before the open parenthesis '('
#122: FILE: mm/shmem.c:71:
+	if(!(info->i_indirect[index])) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#123: FILE: mm/shmem.c:72:
+		info->i_indirect[index] = (swp_entry_t *) get_zeroed_page(GFP_USER);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#129: FILE: mm/shmem.c:77:
+	return info->i_indirect[index]+offset;
 	                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: mm/shmem.c:137:
+		spin_unlock (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#171: FILE: mm/shmem.c:141:
+	start = shmem_truncate_part (info->i_direct, SHMEM_NR_DIRECT, index, &freed);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#179: FILE: mm/shmem.c:147:
+	last = base + ((info->max_index - SHMEM_NR_DIRECT + ENTRIES_PER_PAGE - 1) / ENTRIES_PER_PAGE);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#189: FILE: mm/shmem.c:158:
+		start = shmem_truncate_part (*ptr, ENTRIES_PER_PAGE, start, &freed);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#198: FILE: mm/shmem.c:162:
+		free_page ((unsigned long)base);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#219: FILE: mm/shmem.c:199:
+	spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#220: FILE: mm/shmem.c:200:
+	list_del (&inode->u.shmem_i.list);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: mm/shmem.c:201:
+	spin_unlock (&shmem_ilock);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#260: FILE: mm/shmem.c:771:
+static inline int shmem_unuse_inode (struct shmem_inode_info *info, struct address_space *mapping, swp_entry_t entry, struct page *page)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#260: FILE: mm/shmem.c:771:
+static inline int shmem_unuse_inode (struct shmem_inode_info *info, struct address_space *mapping, swp_entry_t entry, struct page *page)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#268: FILE: mm/shmem.c:778:
+	if ((offset = shmem_clear_swp (entry,info->i_direct, SHMEM_NR_DIRECT)) >= 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: mm/shmem.c:778:
+	if ((offset = shmem_clear_swp (entry,info->i_direct, SHMEM_NR_DIRECT)) >= 0)
 	                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#268: FILE: mm/shmem.c:778:
+	if ((offset = shmem_clear_swp (entry,info->i_direct, SHMEM_NR_DIRECT)) >= 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#273: FILE: mm/shmem.c:782:
+	if (!(base = info->i_indirect))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#288: FILE: mm/shmem.c:794:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: mm/shmem.c:795:
+	add_to_page_cache (page, mapping, offset + idx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: mm/shmem.c:803:
+static struct inode * grab_next_inode(struct list_head **listp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: mm/shmem.c:823:
+	struct inode * inode, *next_inode = NULL;

WARNING:TYPO_SPELLING: 'inthe' may be misspelled - perhaps 'in the'?
#340: FILE: mm/shmem.c:837:
+	 * that the next pointer inthe list is valid.
 	                         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#345: FILE: mm/shmem.c:841:
+	for(inode = grab_next_inode(&p); inode; inode = next_inode) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: mm/shmem.c:846:
+		spin_lock (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: mm/shmem.c:848:
+		spin_unlock (&info->lock);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#354: FILE: mm/shmem.c:850:
+		iput (inode);
 		^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: mm/shmem.c:850:
+		iput (inode);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#360: FILE: mm/shmem.c:856:
+	iput(next_inode);
 	^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 29 warnings, 2 checks, 307 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
