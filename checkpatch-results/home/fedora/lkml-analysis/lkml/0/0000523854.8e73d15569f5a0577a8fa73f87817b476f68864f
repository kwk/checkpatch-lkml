WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff --exclude-from=/home/marcelo/exclude -Nur linux.orig/include/linux/swap.h linux/include/linux/swap.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/linux/swap.h:126:
+extern int total_free_shortage(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: include/linux/swap.h:128:
+extern int total_inactive_shortage(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: include/linux/swap.h:132:
+extern unsigned int zone_free_shortage(zone_t *zone);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/swap.h:133:
+extern unsigned int zone_inactive_shortage(zone_t *zone);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: mm/page_alloc.c:710:
+unsigned int zone_inactive_shortage(zone_t *zone) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: mm/page_alloc.c:723:
+     return (sum > 0 ? sum : 0);$

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#121: FILE: mm/vmscan.c:39:
+static void try_to_swap_out(zone_t *zone, struct mm_struct * mm, struct vm_area_struct* vma, unsigned long address, pte_t * page_table, struct page *page)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: mm/vmscan.c:39:
+static void try_to_swap_out(zone_t *zone, struct mm_struct * mm, struct vm_area_struct* vma, unsigned long address, pte_t * page_table, struct page *page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#121: FILE: mm/vmscan.c:39:
+static void try_to_swap_out(zone_t *zone, struct mm_struct * mm, struct vm_area_struct* vma, unsigned long address, pte_t * page_table, struct page *page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: mm/vmscan.c:39:
+static void try_to_swap_out(zone_t *zone, struct mm_struct * mm, struct vm_area_struct* vma, unsigned long address, pte_t * page_table, struct page *page)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: mm/vmscan.c:44:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: mm/vmscan.c:46:
+^I * touch pages from zones which don't have a $

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#142: FILE: mm/vmscan.c:142:
+static int swap_out_pmd(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, pmd_t *dir, unsigned long address, unsigned long end, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: mm/vmscan.c:142:
+static int swap_out_pmd(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, pmd_t *dir, unsigned long address, unsigned long end, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: mm/vmscan.c:142:
+static int swap_out_pmd(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, pmd_t *dir, unsigned long address, unsigned long end, int count)

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#160: FILE: mm/vmscan.c:179:
+static inline int swap_out_pgd(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, pgd_t *dir, unsigned long address, unsigned long end, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: mm/vmscan.c:179:
+static inline int swap_out_pgd(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, pgd_t *dir, unsigned long address, unsigned long end, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: mm/vmscan.c:179:
+static inline int swap_out_pgd(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, pgd_t *dir, unsigned long address, unsigned long end, int count)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#178: FILE: mm/vmscan.c:209:
+static int swap_out_vma(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, unsigned long address, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: mm/vmscan.c:209:
+static int swap_out_vma(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, unsigned long address, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: mm/vmscan.c:209:
+static int swap_out_vma(zone_t *zone, struct mm_struct * mm, struct vm_area_struct * vma, unsigned long address, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: mm/vmscan.c:236:
+static int swap_out_mm(zone_t *zone, struct mm_struct * mm, int count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: mm/vmscan.c:472:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: mm/vmscan.c:473:
+^I^I * If we are doing zone-specific laundering, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: mm/vmscan.c:474:
+^I^I * avoid touching pages from zones which do $

CHECK:BRACES: braces {} should be used on all arms of this statement
#270: FILE: mm/vmscan.c:597:
+				if (zone) {
[...]
+				} else if (!free_shortage()) 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: mm/vmscan.c:600:
+^I^I^I^I} else if (!free_shortage()) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: mm/vmscan.c:640:
+^Iif (CAN_DO_IO && !launder_loop && (free_shortage() $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#285: FILE: mm/vmscan.c:641:
+	if (CAN_DO_IO && !launder_loop && (free_shortage() 
+				|| (zone && zone_free_shortage(zone)))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: mm/vmscan.c:663:
+^I * First do a global scan if there is a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: mm/vmscan.c:670:
+^I * Then check if there is any specific zone $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: mm/vmscan.c:675:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: mm/vmscan.c:676:
+^I^Iif (zone_free_shortage(zone)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: mm/vmscan.c:678:
+^I} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: mm/vmscan.c:683:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#390: FILE: mm/vmscan.c:801:
+	if((sum = free_shortage()))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#390: FILE: mm/vmscan.c:801:
+	if((sum = free_shortage()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#419: FILE: mm/vmscan.c:842:
+}
+/*

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: mm/vmscan.c:850:
+	if((shortage = inactive_shortage()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: mm/vmscan.c:850:
+	if((shortage = inactive_shortage()))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: mm/vmscan.c:853:
+^Ishortage = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: mm/vmscan.c:930:
+static int refill_inactive_zone(zone_t *zone, unsigned int gfp_mask, int user) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: mm/vmscan.c:932:
+^Iint count, start_count, maxtry; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: mm/vmscan.c:933:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#465: FILE: mm/vmscan.c:934:
+	count = start_count = zone_inactive_shortage(zone);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#480: FILE: mm/vmscan.c:949:
+	} while(zone_inactive_shortage(zone));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#485: FILE: mm/vmscan.c:954:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: mm/vmscan.c:955:
+static int refill_inactive(unsigned int gfp_mask, int user) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: mm/vmscan.c:961:
+^I * First do a global scan if there is a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: mm/vmscan.c:968:
+^I * Then check if there is any specific zone $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: mm/vmscan.c:974:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: mm/vmscan.c:975:
+^I^Iif (zone_inactive_shortage(zone)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: mm/vmscan.c:977:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: mm/vmscan.c:1063:
+^I^Iif (total_inactive_shortage() || total_free_shortage()) $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523854.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 6 warnings, 10 checks, 481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523854.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
