ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#125: FILE: fs/nfs/dir.c:753:
+	if (S_ISDIR(inode->i_mode) && (anon = d_find_alias(inode))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#139: FILE: fs/nfs/dir.c:767:
+			iput(inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: fs/nfs/inode.c:248:
+		printk("nfs_get_another_root: get root inode failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: fs/nfs/inode.c:255:
+		printk("nfs_get_another_root: get root dentry failed\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#193: FILE: fs/nfs/inode.c:256:
+		iput(inode);
 		^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#230: FILE: fs/nfs/inode.c:293:
+	inode->i_mode = S_IFDIR | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#231: FILE: fs/nfs/inode.c:294:
+	inode->i_uid = inode->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#232: FILE: fs/nfs/inode.c:295:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#236: FILE: fs/nfs/inode.c:299:
+		iput(inode);
 		^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#370: FILE: fs/nfs/inode.c:1390:
+		memset(mntfh.data+mntfh.size, 0, sizeof(mntfh.data)-mntfh.size);
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#370: FILE: fs/nfs/inode.c:1390:
+		memset(mntfh.data+mntfh.size, 0, sizeof(mntfh.data)-mntfh.size);
 		                                                   ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#425: FILE: fs/nfs/inode.c:1440:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#425: FILE: fs/nfs/inode.c:1440:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#444: FILE: include/linux/dcache.h:201:
+extern void d_materialise_dentry(struct dentry *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#444: FILE: include/linux/dcache.h:201:
+extern void d_materialise_dentry(struct dentry *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#444: FILE: include/linux/dcache.h:201:
+extern void d_materialise_dentry(struct dentry *, struct dentry *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000278936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 8 warnings, 6 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000278936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
