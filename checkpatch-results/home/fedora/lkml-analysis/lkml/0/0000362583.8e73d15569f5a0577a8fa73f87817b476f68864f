WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#99: 
Content-Disposition: attachment; filename=reslabify-pmd-pgd-2.5.70-mjb1-0.patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: arch/i386/mm/init.c:521:
+		pmd_cache = kmem_cache_create("pmd",
+					PTRS_PER_PMD*sizeof(pmd_t),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#126: FILE: arch/i386/mm/init.c:521:
+					PTRS_PER_PMD*sizeof(pmd_t),
 					            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: arch/i386/mm/init.c:530:
+	pgd_cache = kmem_cache_create("pgd",
+				PTRS_PER_PGD*sizeof(pgd_t),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#135: FILE: arch/i386/mm/init.c:530:
+				PTRS_PER_PGD*sizeof(pgd_t),
 				            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: arch/i386/mm/pageattr.c:72:
+		pmd_t *pmd;
+		pgd = (pgd_t *)page_address(page) + pgd_index(address);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#202: FILE: arch/i386/mm/pgtable.c:157:
+	memset(pmd, 0, PTRS_PER_PMD*sizeof(pmd_t));
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: arch/i386/mm/pgtable.c:185:
+	memcpy((pgd_t *)pgd + USER_PTRS_PER_PGD,
 			swapper_pg_dir + USER_PTRS_PER_PGD,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: arch/i386/mm/pgtable.c:193:
+	memset(pgd, 0, USER_PTRS_PER_PGD*sizeof(pgd_t));
 	                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: arch/i386/mm/pgtable.c:216:
+		pmd_t *pmd = kmem_cache_alloc(pmd_cache, GFP_KERNEL);
+		if (!pmd)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#301: FILE: arch/i386/mm/pgtable.c:224:
+		kmem_cache_free(pmd_cache, (void *)__va(pgd_val(pgd[i])-1));
 		                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#317: FILE: arch/i386/mm/pgtable.c:236:
+			kmem_cache_free(pmd_cache, (void *)__va(pgd_val(pgd[i])-1));
 			                                                       ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#357: FILE: include/asm-i386/pgtable.h:41:
+void pmd_ctor(void *, kmem_cache_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#357: FILE: include/asm-i386/pgtable.h:41:
+void pmd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#357: FILE: include/asm-i386/pgtable.h:41:
+void pmd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#358: FILE: include/asm-i386/pgtable.h:42:
+void pgd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#358: FILE: include/asm-i386/pgtable.h:42:
+void pgd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#358: FILE: include/asm-i386/pgtable.h:42:
+void pgd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#359: FILE: include/asm-i386/pgtable.h:43:
+void pgd_dtor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#359: FILE: include/asm-i386/pgtable.h:43:
+void pgd_dtor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#359: FILE: include/asm-i386/pgtable.h:43:
+void pgd_dtor(void *, kmem_cache_t *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: arch/i386/mm/init.c:531:
+		kernel_pmd_cache = kmem_cache_create("pae_kernel_pmd",
+						(PTRS_PER_PMD*sizeof(pmd_t))*KERNEL_PGD_PTRS,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#410: FILE: arch/i386/mm/init.c:531:
+						(PTRS_PER_PMD*sizeof(pmd_t))*KERNEL_PGD_PTRS,
 						             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#410: FILE: arch/i386/mm/init.c:531:
+						(PTRS_PER_PMD*sizeof(pmd_t))*KERNEL_PGD_PTRS,
 						                            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pgtable_cache_init', this function's name, in a string
#416: FILE: arch/i386/mm/init.c:537:
+			panic("pgtable_cache_init(): cannot create kernel pmd cache");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: arch/i386/mm/pgtable.c:163:
+	int i;
+	for (i=USER_PGD_PTRS; i<PTRS_PER_PGD; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#430: FILE: arch/i386/mm/pgtable.c:163:
+	for (i=USER_PGD_PTRS; i<PTRS_PER_PGD; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#430: FILE: arch/i386/mm/pgtable.c:163:
+	for (i=USER_PGD_PTRS; i<PTRS_PER_PGD; i++) {
 	                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: arch/i386/mm/pgtable.c:164:
+^I^Ipmd_t *kern_pmd = (pmd_t *)pgd_page(swapper_pg_dir[i]); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#432: FILE: arch/i386/mm/pgtable.c:165:
+		pmd_t *kern_pmd = (pmd_t *)pgd_page(swapper_pg_dir[i]); 
+		memcpy(__pmd+PAGE_SIZE*(i-USER_PGD_PTRS), kern_pmd, PAGE_SIZE);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#432: FILE: arch/i386/mm/pgtable.c:165:
+		memcpy(__pmd+PAGE_SIZE*(i-USER_PGD_PTRS), kern_pmd, PAGE_SIZE);
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#432: FILE: arch/i386/mm/pgtable.c:165:
+		memcpy(__pmd+PAGE_SIZE*(i-USER_PGD_PTRS), kern_pmd, PAGE_SIZE);
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#432: FILE: arch/i386/mm/pgtable.c:165:
+		memcpy(__pmd+PAGE_SIZE*(i-USER_PGD_PTRS), kern_pmd, PAGE_SIZE);
 		                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: arch/i386/mm/pgtable.c:225:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#466: FILE: arch/i386/mm/pgtable.c:242:
+		pmd_t *pmd = pmd_offset(&pgd[i],0);
 		                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: arch/i386/mm/pgtable.c:243:
+		pmd_t *pmd = pmd_offset(&pgd[i],0);
+		kmem_cache_free(pmd_cache, pmd);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#481: FILE: arch/i386/mm/pgtable.c:256:
+			pmd_t *pmd_to_free = pmd_offset(&pgd[i],0);
 			                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: arch/i386/mm/pgtable.c:259:
+^I^I^I$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#485: FILE: arch/i386/mm/pgtable.c:260:
+			if (i < USER_PGD_PTRS) {
[...]
+			} else if (i == USER_PGD_PTRS) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#506: FILE: include/asm-i386/pgtable.h:42:
+void kernel_pmd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#506: FILE: include/asm-i386/pgtable.h:42:
+void kernel_pmd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#506: FILE: include/asm-i386/pgtable.h:42:
+void kernel_pmd_ctor(void *, kmem_cache_t *, unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: arch/i386/mm/init.c:126:
 
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#539: FILE: arch/i386/mm/init.c:131:
+void pmd_map_pfn_range(pmd_t* pmd_entry, unsigned long pfn, unsigned long max_pfn)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#547: FILE: arch/i386/mm/init.c:139:
+		pte_t* pte = one_page_table_init(pmd_entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: arch/i386/mm/init.c:140:
+		pte_t* pte = one_page_table_init(pmd_entry);
+		for (pte_ofs = 0; pte_ofs < PTRS_PER_PTE && pfn < max_pfn; pte++, pfn++, pte_ofs++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#580: FILE: arch/i386/mm/init.c:164:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#582: FILE: arch/i386/mm/init.c:166:
+		if( pgd_idx == pgd_index(PAGE_OFFSET) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#582: FILE: arch/i386/mm/init.c:166:
+		if( pgd_idx == pgd_index(PAGE_OFFSET) ) {

ERROR:SPACING: space required before the open parenthesis '('
#582: FILE: arch/i386/mm/init.c:166:
+		if( pgd_idx == pgd_index(PAGE_OFFSET) ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#582: FILE: arch/i386/mm/init.c:166:
+		if( pgd_idx == pgd_index(PAGE_OFFSET) ) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#585: FILE: arch/i386/mm/init.c:169:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: arch/i386/mm/init.c:174:
+^I^I^Ipfn += PTRS_PER_PTE; $

ERROR:SPACING: space required before the open parenthesis '('
#609: FILE: arch/i386/mm/init.c:193:
+	if(!cpu_has_pse) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#610: FILE: arch/i386/mm/init.c:194:
+		printk("PAE enabled, but no support for PSE (large pages)!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#611: FILE: arch/i386/mm/init.c:195:
+		printk("this is likely to waste some RAM.");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: arch/i386/mm/init.c:197:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: arch/i386/mm/init.c:198:
+^Ifor (; pmd_ofs < PTRS_PER_PMD && pfn <= max_low_pfn; pmd++, pmd_ofs++) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: arch/i386/mm/init.c:201:
+^I}^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#621: FILE: arch/i386/mm/init.c:205:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: arch/i386/mm/pgtable.c:165:
+^I/* $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#690: FILE: arch/i386/mm/pgtable.c:171:
+	for (i=FIRST_KERNEL_PGD_PTR; i<PTRS_PER_PGD; i++, pmd+=PTRS_PER_PMD) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#690: FILE: arch/i386/mm/pgtable.c:171:
+	for (i=FIRST_KERNEL_PGD_PTR; i<PTRS_PER_PGD; i++, pmd+=PTRS_PER_PMD) {
 	                              ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#690: FILE: arch/i386/mm/pgtable.c:171:
+	for (i=FIRST_KERNEL_PGD_PTR; i<PTRS_PER_PGD; i++, pmd+=PTRS_PER_PMD) {
 	                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#695: FILE: arch/i386/mm/pgtable.c:176:
+		int num_pmds = PTRS_PER_PMD-USER_PTRS_PER_PMD(i);
 		                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: arch/i386/mm/pgtable.c:177:
+^I^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#697: FILE: arch/i386/mm/pgtable.c:178:
+		memcpy(dst_pmd, src_pmd, num_pmds*sizeof(pmd_t));
 		                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#768: FILE: include/asm-i386/pgtable.h:69:
+#define __USER_PTRS_PER_PGD	(TASK_SIZE/PGDIR_SIZE)
                            	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#770: FILE: include/asm-i386/pgtable.h:71:
+#define PARTIAL_PGD	(TASK_SIZE > __USER_PTRS_PER_PGD*PGDIR_SIZE ? 1 : 0)
                    	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#771: FILE: include/asm-i386/pgtable.h:72:
+#define PARTIAL_PMD	((TASK_SIZE % PGDIR_SIZE)/PMD_SIZE)
                    	                         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#774: FILE: include/asm-i386/pgtable.h:75:
+static inline int USER_PTRS_PER_PMD(int pgd_index) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#778: FILE: include/asm-i386/pgtable.h:79:
+		return (PTRS_PER_PMD-PARTIAL_PMD);
 		                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#927: FILE: mm/memory.c:103:
+static inline void free_one_pgd(struct mmu_gather *tlb, pgd_t * pgd, unsigned long pgdi)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#950: FILE: mm/memory.c:145:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#973: FILE: arch/i386/kernel/vm86.c:155:
+	pte = mapped = pte_offset_map(tsk->mm, pmd, 0xA0000);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'virutal' may be misspelled - perhaps 'virtual'?
#1003: FILE: arch/i386/mm/pgtable.c:230:
+ * They provide the virutal space necessary for mapping the 8MB
                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1005: FILE: arch/i386/mm/pgtable.c:232:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1008: FILE: arch/i386/mm/pgtable.c:235:
+ * on an 8MB boundary, so that there stays only 1 of these special $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1009: FILE: arch/i386/mm/pgtable.c:236:
+ * pages, and the area doesn't get spread out over more than 1 PMD.  $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1015: FILE: arch/i386/mm/pgtable.c:242:
+	struct page* recursive_pte_page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1020: FILE: arch/i386/mm/pgtable.c:247:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: arch/i386/mm/pgtable.c:249:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1023: FILE: arch/i386/mm/pgtable.c:250:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1026: FILE: arch/i386/mm/pgtable.c:253:
+^I * on aren't active yet. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: arch/i386/mm/pgtable.c:257:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1033: FILE: arch/i386/mm/pgtable.c:260:
+		struct page* ukva_page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1034: FILE: arch/i386/mm/pgtable.c:261:
+		struct page* ukva_page;
+		if (j != pgd_index(UKVA_PTE_START)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1034: FILE: arch/i386/mm/pgtable.c:261:
+		if (j != pgd_index(UKVA_PTE_START)) {
[...]
+		} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: arch/i386/mm/pgtable.c:264:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#1037: FILE: arch/i386/mm/pgtable.c:264:
+		} else 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: arch/i386/mm/pgtable.c:269:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1054: FILE: arch/i386/mm/pgtable.c:281:
+	int j;
+	for (j = 0; j < 4; j++) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1069: FILE: arch/i386/mm/pgtable.c:311:
+		if (pgd_index(UKVA_PTE_START) == i )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: include/asm-generic/rmap.h:50:
+static inline int is_ukva_pte(pte_t *pte) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1094: FILE: include/asm-generic/rmap.h:53:
+	unsigned long pteaddr = (unsigned long)pte;
+	if (pteaddr >= UKVA_PTE_START &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1095: FILE: include/asm-generic/rmap.h:54:
+^I    pteaddr <= UKVA_PTE_END ) $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1095: FILE: include/asm-generic/rmap.h:54:
+	    pteaddr <= UKVA_PTE_END ) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1103: FILE: include/asm-generic/rmap.h:61:
+	struct page * page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1104: FILE: include/asm-generic/rmap.h:62:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1115: FILE: include/asm-generic/rmap.h:72:
+	struct page * page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: include/asm-generic/rmap.h:74:
+^I$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1133: FILE: include/asm-generic/rmap.h:89:
+	if (is_ukva_pte(ptep)) {
[...]
+	} else {
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1173: FILE: include/asm-i386/pgtable.h:108:
+# define UKVA_END	(PKMAP_BASE-2*PAGE_SIZE)
                  	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1173: FILE: include/asm-i386/pgtable.h:108:
+# define UKVA_END	(PKMAP_BASE-2*PAGE_SIZE)
                  	             ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1174: FILE: include/asm-i386/pgtable.h:109:
+# define UKVA_START ^I(UKVA_END-(1<<20)*16)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1174: FILE: include/asm-i386/pgtable.h:109:
+# define UKVA_START 	(UKVA_END-(1<<20)*16)
                     	         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1174: FILE: include/asm-i386/pgtable.h:109:
+# define UKVA_START 	(UKVA_END-(1<<20)*16)
                     	            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1174: FILE: include/asm-i386/pgtable.h:109:
+# define UKVA_START 	(UKVA_END-(1<<20)*16)
                     	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: include/asm-i386/pgtable.h:111:
+/* $

WARNING:TYPO_SPELLING: 'virutal' may be misspelled - perhaps 'virtual'?
#1180: FILE: include/asm-i386/pgtable.h:115:
+ * the physical space which will underly this virutal space will
                                               ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: include/asm-i386/pgtable.h:120:
+ * 4 ptes will be guaranteed to be mapped by a single pte.  This also $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: include/asm-i386/pgtable.h:121:
+ * guarantees that a single PMD page will map it, too.  This makes PMD $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1189: FILE: include/asm-i386/pgtable.h:124:
+# define UKVA_PTE_SIZE	(PTRS_PER_PGD*PTRS_PER_PMD*PTRS_PER_PTE*sizeof(pte_t))
                       	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1189: FILE: include/asm-i386/pgtable.h:124:
+# define UKVA_PTE_SIZE	(PTRS_PER_PGD*PTRS_PER_PMD*PTRS_PER_PTE*sizeof(pte_t))
                       	                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1189: FILE: include/asm-i386/pgtable.h:124:
+# define UKVA_PTE_SIZE	(PTRS_PER_PGD*PTRS_PER_PMD*PTRS_PER_PTE*sizeof(pte_t))
                       	                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1190: FILE: include/asm-i386/pgtable.h:125:
+# define UKVA_PTE_MASK	(~(UKVA_PTE_SIZE-1))
                       	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1192: FILE: include/asm-i386/pgtable.h:127:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: include/asm-i386/pgtable.h:128:
+ * the virtual address of the first and last UKVA PTE.  Note that the END is $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1198: FILE: include/asm-i386/pgtable.h:133:
+# define UKVA_PTE_START	((UKVA_START&UKVA_PTE_MASK)+UKVA_PTE_SIZE)
                        	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1198: FILE: include/asm-i386/pgtable.h:133:
+# define UKVA_PTE_START	((UKVA_START&UKVA_PTE_MASK)+UKVA_PTE_SIZE)
                        	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1199: FILE: include/asm-i386/pgtable.h:134:
+# define UKVA_PTE_END	(UKVA_PTE_START+UKVA_PTE_SIZE-sizeof(pte_t))
                      	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1199: FILE: include/asm-i386/pgtable.h:134:
+# define UKVA_PTE_END	(UKVA_PTE_START+UKVA_PTE_SIZE-sizeof(pte_t))
                      	                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1211: FILE: include/asm-i386/pgtable.h:146:
+	return ((unsigned long)address)>>PAGE_SHIFT;
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1216: FILE: include/asm-i386/pgtable.h:151:
+ * which controls "address".  This doesn't guarantee that there will be $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1220: FILE: include/asm-i386/pgtable.h:155:
+#define ukva_pte_offset(address) &((pte_t *)UKVA_PTE_START)[__ukva_pte_index(address)]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1221: FILE: include/asm-i386/pgtable.h:156:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1222: FILE: include/asm-i386/pgtable.h:157:
+# define VMALLOC_END	(UKVA_START-2*PAGE_SIZE)
                     	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1222: FILE: include/asm-i386/pgtable.h:157:
+# define VMALLOC_END	(UKVA_START-2*PAGE_SIZE)
                     	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1242: FILE: include/asm-i386/pgtable.h:362:
+ * There are times where current->mm->pgd is not actually resident in $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'address' - possible side-effects?
#1248: FILE: include/asm-i386/pgtable.h:368:
+#define pte_offset_map(__mm, dir, address) \
+	(\
+	 	(!funny_mm() && (__mm) == current->mm) ? \
+			ukva_pte_offset((void*)address) \
+	 		:\
+			__pte_offset_map(dir,address)\
+	)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1250: FILE: include/asm-i386/pgtable.h:370:
+^I ^I(!funny_mm() && (__mm) == current->mm) ? \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1250: FILE: include/asm-i386/pgtable.h:370:
+^I ^I(!funny_mm() && (__mm) == current->mm) ? \$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1251: FILE: include/asm-i386/pgtable.h:371:
+			ukva_pte_offset((void*)address) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1252: FILE: include/asm-i386/pgtable.h:372:
+^I ^I^I:\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1252: FILE: include/asm-i386/pgtable.h:372:
+^I ^I^I:\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1253: FILE: include/asm-i386/pgtable.h:373:
+			__pte_offset_map(dir,address)\
 			                    ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1260: FILE: include/asm-i386/pgtable.h:379:
+#define pte_unmap(pte) do { ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#1260: FILE: include/asm-i386/pgtable.h:379:
+#define pte_unmap(pte) do { 					\
+	if( (unsigned long)pte >= UKVA_PTE_START &&		\
+  	    (unsigned long)pte <= UKVA_PTE_END ){		\
+		/* it was a ukva pte, no need to unmap */	\
+	} 							\
+	else							\
+		kunmap_atomic(pte, KM_PTE0);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pte' may be better as '(pte)' to avoid precedence issues
#1260: FILE: include/asm-i386/pgtable.h:379:
+#define pte_unmap(pte) do { 					\
+	if( (unsigned long)pte >= UKVA_PTE_START &&		\
+  	    (unsigned long)pte <= UKVA_PTE_END ){		\
+		/* it was a ukva pte, no need to unmap */	\
+	} 							\
+	else							\
+		kunmap_atomic(pte, KM_PTE0);			\
+} while (0)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1261: FILE: include/asm-i386/pgtable.h:380:
+	if( (unsigned long)pte >= UKVA_PTE_START &&		\

ERROR:SPACING: space required before the open parenthesis '('
#1261: FILE: include/asm-i386/pgtable.h:380:
+	if( (unsigned long)pte >= UKVA_PTE_START &&		\

ERROR:CODE_INDENT: code indent should use tabs where possible
#1262: FILE: include/asm-i386/pgtable.h:381:
+  ^I    (unsigned long)pte <= UKVA_PTE_END ){^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1262: FILE: include/asm-i386/pgtable.h:381:
+  ^I    (unsigned long)pte <= UKVA_PTE_END ){^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: include/asm-i386/pgtable.h:381:
+  ^I    (unsigned long)pte <= UKVA_PTE_END ){^I^I\$

ERROR:SPACING: space required before the open brace '{'
#1262: FILE: include/asm-i386/pgtable.h:381:
+  	    (unsigned long)pte <= UKVA_PTE_END ){		\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1262: FILE: include/asm-i386/pgtable.h:381:
+  	    (unsigned long)pte <= UKVA_PTE_END ){		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1264: FILE: include/asm-i386/pgtable.h:383:
+^I} ^I^I^I^I^I^I^I\$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1280: FILE: include/linux/mm.h:418:
+void unmap_page_range(struct mm_struct *mm, struct mmu_gather *tlb, struct vm_area_struct *vma,
 			unsigned long address, unsigned long size);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1287: FILE: include/linux/mm.h:429:
+extern pte_t *FASTCALL(__pte_alloc_map(struct mm_struct *mm, pmd_t *pmd, unsigned long address, int shouldwarn));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1287: FILE: include/linux/mm.h:429:
+extern pte_t *FASTCALL(__pte_alloc_map(struct mm_struct *mm, pmd_t *pmd, unsigned long address, int shouldwarn));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1304: FILE: mm/memory.c:158:
+u64 ukva_map_pte_other(struct mm_struct *mm, struct page* new, pte_t *ukva_pte)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: mm/memory.c:165:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: mm/memory.c:168:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1316: FILE: mm/memory.c:170:
+^I * addresses. $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1327: FILE: mm/memory.c:181:
 {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1328: FILE: mm/memory.c:182:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: mm/memory.c:183:
+^I * what is the address of the ukva pte which controls "address"? $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1333: FILE: mm/memory.c:187:
+	pte_t *ukva_pte_vaddr = ukva_pte_offset((void*)address);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: mm/memory.c:188:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1335: FILE: mm/memory.c:189:
+^I * what is the address of the pte that controls _that_ address? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1336: FILE: mm/memory.c:190:
+^I * This will have to be set before there is anything mapped into the $

ERROR:SPACING: space prohibited after that open parenthesis '('
#1356: FILE: mm/memory.c:216:
+		if ( !funny_mm() && mm == current->mm )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1356: FILE: mm/memory.c:216:
+		if ( !funny_mm() && mm == current->mm )

CHECK:BRACES: braces {} should be used on all arms of this statement
#1356: FILE: mm/memory.c:216:
+		if ( !funny_mm() && mm == current->mm )
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1358: FILE: mm/memory.c:218:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1360: FILE: mm/memory.c:220:
+^I^I^I *  If mm isn't the current one, we need to map the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1371: FILE: mm/memory.c:230:
+^I} $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1386: FILE: mm/memory.c:336:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1411: FILE: mm/memory.c:363:
+			BUG_ON(src != current->mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1431: FILE: mm/memory.c:471:
+zap_pte_range(struct mm_struct *mm, struct mmu_gather *tlb, pmd_t * pmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1432: FILE: mm/memory.c:472:
+zap_pte_range(struct mm_struct *mm, struct mmu_gather *tlb, pmd_t * pmd,
 		unsigned long address, unsigned long size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1449: FILE: mm/memory.c:521:
+zap_pmd_range(struct mm_struct *mm, struct mmu_gather *tlb, pgd_t * dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1450: FILE: mm/memory.c:522:
+zap_pmd_range(struct mm_struct *mm, struct mmu_gather *tlb, pgd_t * dir,
 		unsigned long address, unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1466: FILE: mm/memory.c:546:
+void unmap_page_range(struct mm_struct *mm, struct mmu_gather *tlb, struct vm_area_struct *vma,
 			unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1501: FILE: mm/memory.c:896:
+static int zeromap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1502: FILE: mm/memory.c:897:
+static int zeromap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address,
                                     unsigned long size, pgprot_t prot)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1510: FILE: mm/memory.c:973:
+static int remap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address, unsigned long size,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1510: FILE: mm/memory.c:973:
+static int remap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1511: FILE: mm/memory.c:974:
+static int remap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address, unsigned long size,
 	unsigned long phys_addr, pgprot_t prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1587: FILE: mm/mprotect.c:28:
+change_pte_range(struct mm_struct *mm,
+		pmd_t *pmd, unsigned long address,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1602: FILE: mm/mprotect.c:46:
+	pte = ukva_pte_offset((void*)realaddress);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1612: FILE: mm/mprotect.c:70:
+change_pmd_range(struct mm_struct *mm, pgd_t *pgd, unsigned long address,
 		unsigned long size, pgprot_t newprot)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1618: FILE: mm/mprotect.c:76:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1618: FILE: mm/mprotect.c:76:
 
+	

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000362583.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 84 errors, 40 warnings, 60 checks, 1345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000362583.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
