CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#48: FILE: arch/um/kernel/skas/include/skas.h:36:
+extern int new_mm(int from, unsigned long stack);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open brace '{'
#79: FILE: arch/um/kernel/skas/mmu.c:83:
+	if(!proc_mm || !ptrace_faultinfo){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#79: FILE: arch/um/kernel/skas/mmu.c:83:
+	if(!proc_mm || !ptrace_faultinfo){

ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: arch/um/kernel/skas/mmu.c:85:
+		if(stack == 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/um/kernel/skas/mmu.c:87:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: arch/um/kernel/skas/mmu.c:87:
+  $

ERROR:SPACING: space required before the open brace '{'
#108: FILE: arch/um/kernel/skas/mmu.c:107:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: arch/um/kernel/skas/mmu.c:107:
+	if(proc_mm){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_mm != NULL'
#109: FILE: arch/um/kernel/skas/mmu.c:108:
+		if((cur_mm != NULL) && (cur_mm != &init_mm))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_mm != &init_mm'
#109: FILE: arch/um/kernel/skas/mmu.c:108:
+		if((cur_mm != NULL) && (cur_mm != &init_mm))

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: arch/um/kernel/skas/mmu.c:108:
+		if((cur_mm != NULL) && (cur_mm != &init_mm))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_mm"
#109: FILE: arch/um/kernel/skas/mmu.c:108:
+		if((cur_mm != NULL) && (cur_mm != &init_mm))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#111: FILE: arch/um/kernel/skas/mmu.c:110:
+		else from = -1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open brace '{'
#114: FILE: arch/um/kernel/skas/mmu.c:113:
+		if(ret < 0){

ERROR:SPACING: space required before the open parenthesis '('
#114: FILE: arch/um/kernel/skas/mmu.c:113:
+		if(ret < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#115: FILE: arch/um/kernel/skas/mmu.c:114:
+			printk("init_new_context_skas - new_mm failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#116: FILE: arch/um/kernel/skas/mmu.c:115:
+			printk("init_new_context_skas - new_mm failed, "
+			       "errno = %d\n", ret);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#121: FILE: arch/um/kernel/skas/mmu.c:120:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#121: FILE: arch/um/kernel/skas/mmu.c:120:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: arch/um/kernel/skas/mmu.c:130:
+	if(mm_id->stack != 0)

ERROR:SPACING: space required before the open brace '{'
#143: FILE: arch/um/kernel/skas/mmu.c:145:
+	if(!proc_mm || !ptrace_faultinfo){

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: arch/um/kernel/skas/mmu.c:145:
+	if(!proc_mm || !ptrace_faultinfo){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/um/kernel/skas/process.c:161:
+^I^I^Iprintk("mapping stub code failed, errno = %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#174: FILE: arch/um/kernel/skas/process.c:161:
+			printk("mapping stub code failed, errno = %d\n", 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: arch/um/kernel/skas/process.c:175:
+				printk("mapping stub stack failed, "

ERROR:SPACING: space required before the open brace '{'
#196: FILE: arch/um/kernel/skas/process.c:181:
+	if(!ptrace_faultinfo){

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: arch/um/kernel/skas/process.c:181:
+	if(!ptrace_faultinfo){

ERROR:SPACING: space prohibited after that open parenthesis '('
#204: FILE: arch/um/kernel/skas/process.c:207:
+	if ( stub_code_fd == -1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#204: FILE: arch/um/kernel/skas/process.c:207:
+	if ( stub_code_fd == -1 )

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#228: FILE: arch/um/kernel/skas/process.c:385:
+				      .u         =
+				      { .mmap    =

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#229: FILE: arch/um/kernel/skas/process.c:386:
+				      { .mmap    =
+					{ .addr    = code,

ERROR:SPACING: space required before the open parenthesis '('
#237: FILE: arch/um/kernel/skas/process.c:394:
+	if(n != sizeof(mmop))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map_stub_pages', this function's name, in a string
#238: FILE: arch/um/kernel/skas/process.c:395:
+		panic("map_stub_pages : /proc/mm map for code failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#239: FILE: arch/um/kernel/skas/process.c:396:
+		panic("map_stub_pages : /proc/mm map for code failed, "
+		      "err = %d\n", -n);

ERROR:SPACING: space prohibited after that open parenthesis '('
#241: FILE: arch/um/kernel/skas/process.c:398:
+	if ( stack ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#241: FILE: arch/um/kernel/skas/process.c:398:
+	if ( stack ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: arch/um/kernel/skas/process.c:401:
+		int map_fd = phys_mapping(to_phys((void *)stack), &map_offset);
+		mmop = ((struct proc_mm_op)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#247: FILE: arch/um/kernel/skas/process.c:404:
+				  .u         =
+				  { .mmap    =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#248: FILE: arch/um/kernel/skas/process.c:405:
+				  { .mmap    =
+				    { .addr    = data,

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: arch/um/kernel/skas/process.c:413:
+		if(n != sizeof(mmop))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map_stub_pages', this function's name, in a string
#257: FILE: arch/um/kernel/skas/process.c:414:
+			panic("map_stub_pages : /proc/mm map for data failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#258: FILE: arch/um/kernel/skas/process.c:415:
+			panic("map_stub_pages : /proc/mm map for data failed, "
+			      "err = %d\n", -n);

ERROR:SPACING: space required before the open parenthesis '('
#284: FILE: arch/um/kernel/skas/process_kern.c:153:
+	if(!ptrace_faultinfo)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155208.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 10 warnings, 5 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155208.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
