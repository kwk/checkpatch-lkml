WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
<http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/openxdsm/openxdsm/eventmodule/> 

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#104: 
    Rüdiger Klaehn
     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#125: FILE: fs/dnotify.c:158:
+	inotify_dentrychange(dentry,event);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#133: FILE: fs/inotify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#136: FILE: fs/inotify.c:4:
+ * Copyright (C) 2003,2004 Rüdiger Klaehn
                             ^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#159: FILE: fs/inotify.c:27:
+#include <asm/uaccess.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#170: FILE: fs/inotify.c:38:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#171: FILE: fs/inotify.c:39:
+typedef struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#181: FILE: fs/inotify.c:49:
+int in_buffer_head = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#182: FILE: fs/inotify.c:50:
+int in_buffer_tail = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: fs/inotify.c:61:
+	int i;
+	for(i=0;i<IGNORE_LEN;i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#193: FILE: fs/inotify.c:61:
+	for(i=0;i<IGNORE_LEN;i++)
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#193: FILE: fs/inotify.c:61:
+	for(i=0;i<IGNORE_LEN;i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#193: FILE: fs/inotify.c:61:
+	for(i=0;i<IGNORE_LEN;i++)
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#193: FILE: fs/inotify.c:61:
+	for(i=0;i<IGNORE_LEN;i++)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#193: FILE: fs/inotify.c:61:
+	for(i=0;i<IGNORE_LEN;i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/inotify.c:62:
+^I^Iif(in_ignore[i]==0) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#194: FILE: fs/inotify.c:62:
+		if(in_ignore[i]==0) 
+		{

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#194: FILE: fs/inotify.c:62:
+		if(in_ignore[i]==0) 
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#194: FILE: fs/inotify.c:62:
+		if(in_ignore[i]==0) 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#196: FILE: fs/inotify.c:64:
+			in_ignore[i]=ino;
 			            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: fs/inotify.c:73:
+	int i;
+	for(i=0;i<IGNORE_LEN;i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#205: FILE: fs/inotify.c:73:
+	for(i=0;i<IGNORE_LEN;i++)
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#205: FILE: fs/inotify.c:73:
+	for(i=0;i<IGNORE_LEN;i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#205: FILE: fs/inotify.c:73:
+	for(i=0;i<IGNORE_LEN;i++)
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#205: FILE: fs/inotify.c:73:
+	for(i=0;i<IGNORE_LEN;i++)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: fs/inotify.c:73:
+	for(i=0;i<IGNORE_LEN;i++)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#206: FILE: fs/inotify.c:74:
+		if(in_ignore[i]==ino)
+		{

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#206: FILE: fs/inotify.c:74:
+		if(in_ignore[i]==ino)
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#206: FILE: fs/inotify.c:74:
+		if(in_ignore[i]==ino)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#208: FILE: fs/inotify.c:76:
+			in_ignore[i]=0;
 			            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: fs/inotify.c:85:
+	int i;
+	if(!ino)

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: fs/inotify.c:85:
+	if(!ino)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#219: FILE: fs/inotify.c:87:
+	for(i=0;i<IGNORE_LEN;i++)
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#219: FILE: fs/inotify.c:87:
+	for(i=0;i<IGNORE_LEN;i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#219: FILE: fs/inotify.c:87:
+	for(i=0;i<IGNORE_LEN;i++)
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#219: FILE: fs/inotify.c:87:
+	for(i=0;i<IGNORE_LEN;i++)
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#219: FILE: fs/inotify.c:87:
+	for(i=0;i<IGNORE_LEN;i++)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#220: FILE: fs/inotify.c:88:
+		if(in_ignore[i]==ino)
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: fs/inotify.c:88:
+		if(in_ignore[i]==ino)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: fs/inotify.c:90:
+^Ireturn 0;^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#228: FILE: fs/inotify.c:96:
+	if (in_buffer_head == in_buffer_tail)
+	{

ERROR:SPACING: space prohibited after that open parenthesis '('
#230: FILE: fs/inotify.c:98:
+		spin_unlock_irqrestore( &in_lock, lock_flags );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#230: FILE: fs/inotify.c:98:
+		spin_unlock_irqrestore( &in_lock, lock_flags );

ERROR:SPACING: space required after that ',' (ctx:VxO)
#233: FILE: fs/inotify.c:101:
+	memcpy(info,&in_buffer[in_buffer_head],sizeof(in_info));
 	           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#233: FILE: fs/inotify.c:101:
+	memcpy(info,&in_buffer[in_buffer_head],sizeof(in_info));
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: fs/inotify.c:101:
+	memcpy(info,&in_buffer[in_buffer_head],sizeof(in_info));
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: fs/inotify.c:102:
+	memset(&in_buffer[in_buffer_head],0,sizeof(in_info));
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: fs/inotify.c:102:
+	memset(&in_buffer[in_buffer_head],0,sizeof(in_info));
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#236: FILE: fs/inotify.c:104:
+	if(in_buffer_head == BUFFER_LEN) in_buffer_head=0;
 	                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#236: FILE: fs/inotify.c:104:
+	if(in_buffer_head == BUFFER_LEN) in_buffer_head=0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#236: FILE: fs/inotify.c:104:
+	if(in_buffer_head == BUFFER_LEN) in_buffer_head=0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited after that open parenthesis '('
#237: FILE: fs/inotify.c:105:
+	spin_unlock_irqrestore( &in_lock, lock_flags );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#237: FILE: fs/inotify.c:105:
+	spin_unlock_irqrestore( &in_lock, lock_flags );

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#243: FILE: fs/inotify.c:111:
+	#if DEBUG>2
 	         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#244: FILE: fs/inotify.c:112:
+	printk("in: put_to_buffer: %ld %ld %ld %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: fs/inotify.c:113:
+	printk("in: put_to_buffer: %ld %ld %ld %ld\n",
+		info->event,info->file_ino,info->src_ino,info->dst_ino);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: fs/inotify.c:113:
+		info->event,info->file_ino,info->src_ino,info->dst_ino);
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: fs/inotify.c:113:
+		info->event,info->file_ino,info->src_ino,info->dst_ino);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: fs/inotify.c:113:
+		info->event,info->file_ino,info->src_ino,info->dst_ino);
 		                                        ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#248: FILE: fs/inotify.c:116:
+	if((in_buffer_tail + 1) == in_buffer_head || (

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#248: FILE: fs/inotify.c:116:
+	if((in_buffer_tail + 1) == in_buffer_head || (
+		((in_buffer_tail + 1) == BUFFER_LEN) &&
+		( in_buffer_head == 0 ) ))
+	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'in_buffer_head == 0'
#248: FILE: fs/inotify.c:116:
+	if((in_buffer_tail + 1) == in_buffer_head || (
+		((in_buffer_tail + 1) == BUFFER_LEN) &&
+		( in_buffer_head == 0 ) ))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: fs/inotify.c:116:
+	if((in_buffer_tail + 1) == in_buffer_head || (

ERROR:SPACING: space prohibited after that open parenthesis '('
#250: FILE: fs/inotify.c:118:
+		( in_buffer_head == 0 ) ))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#250: FILE: fs/inotify.c:118:
+		( in_buffer_head == 0 ) ))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#254: FILE: fs/inotify.c:122:
+		if ( in_buffer_head == BUFFER_LEN )
+		{

ERROR:SPACING: space prohibited after that open parenthesis '('
#254: FILE: fs/inotify.c:122:
+		if ( in_buffer_head == BUFFER_LEN )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#254: FILE: fs/inotify.c:122:
+		if ( in_buffer_head == BUFFER_LEN )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: fs/inotify.c:129:
+	memcpy(&in_buffer[in_buffer_tail],info,sizeof(in_info));
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: fs/inotify.c:129:
+	memcpy(&in_buffer[in_buffer_tail],info,sizeof(in_info));
 	                                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#263: FILE: fs/inotify.c:131:
+	if ( in_buffer_tail == BUFFER_LEN )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#263: FILE: fs/inotify.c:131:
+	if ( in_buffer_tail == BUFFER_LEN )

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#264: FILE: fs/inotify.c:132:
+		in_buffer_tail=0;
 		              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#265: FILE: fs/inotify.c:133:
+	spin_unlock_irqrestore( &in_lock, lock_flags );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#265: FILE: fs/inotify.c:133:
+	spin_unlock_irqrestore( &in_lock, lock_flags );

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: fs/inotify.c:138:
+/*
+void in_zero_buffer()

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: fs/inotify.c:149:
+int in_open_dev( struct inode *in,struct file * fi )

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: fs/inotify.c:149:
+int in_open_dev( struct inode *in,struct file * fi )
                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#281: FILE: fs/inotify.c:149:
+int in_open_dev( struct inode *in,struct file * fi )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#281: FILE: fs/inotify.c:149:
+int in_open_dev( struct inode *in,struct file * fi )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: fs/inotify.c:154:
+	printk("inotify: in_open_dev() %ld\n",in->i_ino);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: fs/inotify.c:154:
+	printk("inotify: in_open_dev() %ld\n",in->i_ino);
 	                                     ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'in_open_dev', this function's name, in a string
#286: FILE: fs/inotify.c:154:
+	printk("inotify: in_open_dev() %ld\n",in->i_ino);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: fs/inotify.c:159:
+int in_close_dev( struct inode *in,struct file * fi )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: fs/inotify.c:159:
+int in_close_dev( struct inode *in,struct file * fi )
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#291: FILE: fs/inotify.c:159:
+int in_close_dev( struct inode *in,struct file * fi )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#291: FILE: fs/inotify.c:159:
+int in_close_dev( struct inode *in,struct file * fi )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: fs/inotify.c:162:
+	printk("inotify: in_close_dev() %ld\n",in->i_ino);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: fs/inotify.c:162:
+	printk("inotify: in_close_dev() %ld\n",in->i_ino);
 	                                      ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'in_close_dev', this function's name, in a string
#294: FILE: fs/inotify.c:162:
+	printk("inotify: in_close_dev() %ld\n",in->i_ino);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#302: FILE: fs/inotify.c:170:
+/*ssize_t changedfiles_read_dev( struct inode *in,
+				  struct file *fi,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#304: FILE: fs/inotify.c:172:
+				  unsigned long count ) */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: fs/inotify.c:173:
+ssize_t in_read_dev( struct file *filep, char *buf, size_t count,loff_t *f_pos )
                                                                 ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#305: FILE: fs/inotify.c:173:
+ssize_t in_read_dev( struct file *filep, char *buf, size_t count,loff_t *f_pos )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#305: FILE: fs/inotify.c:173:
+ssize_t in_read_dev( struct file *filep, char *buf, size_t count,loff_t *f_pos )

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: fs/inotify.c:176:
+	in_info read_buf;
+	if(!in_get_from_buffer(&read_buf))

ERROR:SPACING: space required before the open parenthesis '('
#308: FILE: fs/inotify.c:176:
+	if(!in_get_from_buffer(&read_buf))

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#310: FILE: fs/inotify.c:178:
+#if DEBUG>2
          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: fs/inotify.c:179:
+	printk("inotify: got info from buffer\n");

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#313: FILE: fs/inotify.c:181:
+	if(count>sizeof(in_info))
 	        ^

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: fs/inotify.c:181:
+	if(count>sizeof(in_info))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: fs/inotify.c:182:
+		count=sizeof(in_info);
 		     ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#315: FILE: fs/inotify.c:183:
+	if(copy_to_user(buf,&read_buf,count))
+	{

ERROR:SPACING: space required after that ',' (ctx:VxO)
#315: FILE: fs/inotify.c:183:
+	if(copy_to_user(buf,&read_buf,count))
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#315: FILE: fs/inotify.c:183:
+	if(copy_to_user(buf,&read_buf,count))
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: fs/inotify.c:183:
+	if(copy_to_user(buf,&read_buf,count))
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: fs/inotify.c:183:
+	if(copy_to_user(buf,&read_buf,count))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: fs/inotify.c:185:
+		printk("inotify:  copy_to_user failed\n");

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#320: FILE: fs/inotify.c:188:
+#if DEBUG>2
          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#321: FILE: fs/inotify.c:189:
+	printk("inotify: changedfiles_read_dev() returning");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#326: FILE: fs/inotify.c:194:
+static struct file_operations in_fop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#327: FILE: fs/inotify.c:195:
+  read: in_read_dev,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#328: FILE: fs/inotify.c:196:
+  open: in_open_dev,
       ^

WARNING:INDENTED_LABEL: labels should not be indented
#328: FILE: fs/inotify.c:196:
+  open: in_open_dev,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#329: FILE: fs/inotify.c:197:
+  release: in_close_dev,
          ^

WARNING:INDENTED_LABEL: labels should not be indented
#329: FILE: fs/inotify.c:197:
+  release: in_close_dev,

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#335: FILE: fs/inotify.c:203:
+ * where we do not have the dentry, such as reading and writing
+*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: fs/inotify.c:207:
+	in_info info;
+	memset(&info,0,sizeof(in_info));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: fs/inotify.c:207:
+	memset(&info,0,sizeof(in_info));
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: fs/inotify.c:207:
+	memset(&info,0,sizeof(in_info));
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: fs/inotify.c:208:
+	if(test_ignore_ino(inode->i_ino))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#342: FILE: fs/inotify.c:210:
+	info.event=event;
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#343: FILE: fs/inotify.c:211:
+	info.file_ino=inode->i_ino;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#344: FILE: fs/inotify.c:212:
+	info.src_ino=0;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: fs/inotify.c:213:
+	info.dst_ino=0;
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#353: FILE: fs/inotify.c:221:
+void inotify_dentrychange(struct dentry *dentry,unsigned long event)
                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: fs/inotify.c:225:
+	struct dentry *parent;
+	memset(&info,0,sizeof(in_info));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: fs/inotify.c:225:
+	memset(&info,0,sizeof(in_info));
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: fs/inotify.c:225:
+	memset(&info,0,sizeof(in_info));
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#358: FILE: fs/inotify.c:226:
+	info.event=event;
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#360: FILE: fs/inotify.c:228:
+	if(dentry->d_inode)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#361: FILE: fs/inotify.c:229:
+		info.file_ino=dentry->d_inode->i_ino;
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#363: FILE: fs/inotify.c:231:
+		info.file_ino=0;
 		             ^

ERROR:SPACING: space required before the open parenthesis '('
#364: FILE: fs/inotify.c:232:
+	if(test_ignore_ino(info.file_ino))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#366: FILE: fs/inotify.c:234:
+	parent=dentry->d_parent;
 	      ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#367: FILE: fs/inotify.c:235:
+	if(parent!=dentry)
+	{

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#367: FILE: fs/inotify.c:235:
+	if(parent!=dentry)
 	         ^

ERROR:SPACING: space required before the open parenthesis '('
#367: FILE: fs/inotify.c:235:
+	if(parent!=dentry)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#370: FILE: fs/inotify.c:238:
+		info.src_ino=parent->d_inode->i_ino;
 		            ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#373: FILE: fs/inotify.c:241:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#374: FILE: fs/inotify.c:242:
+		info.src_ino=0;
 		            ^

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: fs/inotify.c:243:
+	if(test_ignore_ino(info.src_ino))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#377: FILE: fs/inotify.c:245:
+	info.dst_ino=0;
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: fs/inotify.c:246:
+	strncpy(info.name,dentry->d_name.name,DNAME_LEN);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: fs/inotify.c:246:
+	strncpy(info.name,dentry->d_name.name,DNAME_LEN);
 	                                     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#385: FILE: fs/inotify.c:253:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: fs/inotify.c:259:
+void inotify_dentrymove(struct dentry *dentry,struct dentry *dsrc,unsigned long event)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: fs/inotify.c:259:
+void inotify_dentrymove(struct dentry *dentry,struct dentry *dsrc,unsigned long event)
                                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#394: FILE: fs/inotify.c:262:
+/*	in_info info;
+	struct dentry *parent;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#419: FILE: fs/inotify.c:287:
+	in_put_to_buffer(&info);*/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#425: FILE: fs/inotify.c:293:
+	printk("initializing inotify subsystem...\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: fs/inotify.c:296:
+	int i;
+	for (i=0; i < BUFFER_LEN; i++)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#428: FILE: fs/inotify.c:296:
+	for (i=0; i < BUFFER_LEN; i++)
+	{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#428: FILE: fs/inotify.c:296:
+	for (i=0; i < BUFFER_LEN; i++)
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: fs/inotify.c:300:
+	memset(&in_ignore,0,sizeof(in_ignore));
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: fs/inotify.c:300:
+	memset(&in_ignore,0,sizeof(in_ignore));
 	                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#433: FILE: fs/inotify.c:301:
+	if ( register_chrdev(in_major, "inotify", &in_fop))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#459: FILE: include/linux/dnotify.h:26:
+	inotify_inodechange(inode,event);
 	                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#467: FILE: include/linux/inotify.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#470: FILE: include/linux/inotify.h:4:
+ * Copyright (C) 2003,2004 Rüdiger Klaehn
                             ^

WARNING:TYPO_SPELLING: 'attibutes' may be misspelled - perhaps 'attributes'?
#479: FILE: include/linux/inotify.h:13:
+#define IN_ATTRIB	0x00000020	/* Node changed attibutes */
                  	          	                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: include/linux/inotify.h:15:
+extern void inotify_inodechange(struct inode *inode, unsigned long event);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#482: FILE: include/linux/inotify.h:16:
+extern void inotify_dentrychange(struct dentry *dentry,unsigned long event);
                                                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#482: FILE: include/linux/inotify.h:16:
+extern void inotify_dentrychange(struct dentry *dentry,unsigned long event);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: include/linux/inotify.h:17:
+extern void inotify_dentrymove(struct dentry *dentry,struct dentry *dsrc,unsigned long event);
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: include/linux/inotify.h:17:
+extern void inotify_dentrymove(struct dentry *dentry,struct dentry *dsrc,unsigned long event);
                                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#483: FILE: include/linux/inotify.h:17:
+extern void inotify_dentrymove(struct dentry *dentry,struct dentry *dsrc,unsigned long event);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 126 errors, 33 warnings, 9 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
