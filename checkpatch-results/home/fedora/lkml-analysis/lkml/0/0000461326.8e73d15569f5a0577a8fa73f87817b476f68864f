WARNING:TYPO_SPELLING: 'oppinion' may be misspelled - perhaps 'opinion'?
#30: 
my oppinion. I had to accept that the ata_request and rq->special usage
   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#129: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#131: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
#	           ChangeSet	1.569   -> 1.570  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
#	drivers/block/ll_rw_blk.c	1.64    -> 1.65   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
#	include/linux/blkdev.h	1.43    -> 1.44   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
# 02/05/01	axboe@burns.home.kernel.dk	1.570

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
# Initial block level tagged command queueing helpers

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#144: 
--- a/drivers/block/ll_rw_blk.c	Wed May  1 14:36:31 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: drivers/block/ll_rw_blk.c:330:
+	BUG_ON(bqt->busy);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: drivers/block/ll_rw_blk.c:331:
+	BUG_ON(!list_empty(&bqt->busy_list));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: drivers/block/ll_rw_blk.c:357:
+	tags = kmalloc(sizeof(struct blk_queue_tag),GFP_ATOMIC);
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tags)...) over kmalloc(sizeof(struct blk_queue_tag)...)
#193: FILE: drivers/block/ll_rw_blk.c:357:
+	tags = kmalloc(sizeof(struct blk_queue_tag),GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#197: FILE: drivers/block/ll_rw_blk.c:361:
+	tags->tag_index = kmalloc(depth * sizeof(struct request *), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#202: FILE: drivers/block/ll_rw_blk.c:366:
+	tags->tag_map = kmalloc(bits * sizeof(unsigned long), GFP_ATOMIC);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#236: FILE: drivers/block/ll_rw_blk.c:400:
+	depth = i = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#279: FILE: drivers/block/ll_rw_blk.c:443:
+	BUG_ON(tag == -1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: drivers/block/ll_rw_blk.c:446:
+		printk("attempt to clear non-busy tag (%d)\n", tag);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bqt->tag_index[tag]"
#290: FILE: drivers/block/ll_rw_blk.c:454:
+	if (unlikely(bqt->tag_index[tag] == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: drivers/block/ll_rw_blk.c:455:
+		printk("tag %d is missing\n", tag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#411: FILE: drivers/block/ll_rw_blk.c:1972:
+EXPORT_SYMBOL(blk_queue_init_tags);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#412: FILE: drivers/block/ll_rw_blk.c:1973:
+EXPORT_SYMBOL(blk_queue_free_tags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#413: FILE: drivers/block/ll_rw_blk.c:1974:
+EXPORT_SYMBOL(blk_queue_start_tag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#414: FILE: drivers/block/ll_rw_blk.c:1975:
+EXPORT_SYMBOL(blk_queue_end_tag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#415: FILE: drivers/block/ll_rw_blk.c:1976:
+EXPORT_SYMBOL(blk_queue_invalidate_tags);

CHECK:BIT_MACRO: Prefer using the BIT macro
#439: FILE: include/linux/blkdev.h:102:
+#define REQ_QUEUED	(1 << __REQ_QUEUED)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#492: FILE: include/linux/blkdev.h:342:
+#define blk_queue_tag_queue(q)		((q)->queue_tags->busy < (q)->queue_tags->max_depth)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#494: FILE: include/linux/blkdev.h:344:
+extern int blk_queue_start_tag(request_queue_t *, struct request *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#494: FILE: include/linux/blkdev.h:344:
+extern int blk_queue_start_tag(request_queue_t *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#494: FILE: include/linux/blkdev.h:344:
+extern int blk_queue_start_tag(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#495: FILE: include/linux/blkdev.h:345:
+extern void blk_queue_end_tag(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#495: FILE: include/linux/blkdev.h:345:
+extern void blk_queue_end_tag(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#495: FILE: include/linux/blkdev.h:345:
+extern void blk_queue_end_tag(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#496: FILE: include/linux/blkdev.h:346:
+extern int blk_queue_init_tags(request_queue_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#496: FILE: include/linux/blkdev.h:346:
+extern int blk_queue_init_tags(request_queue_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#496: FILE: include/linux/blkdev.h:346:
+extern int blk_queue_init_tags(request_queue_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#497: FILE: include/linux/blkdev.h:347:
+extern void blk_queue_free_tags(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#497: FILE: include/linux/blkdev.h:347:
+extern void blk_queue_free_tags(request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: include/linux/blkdev.h:348:
+extern void blk_queue_invalidate_tags(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#498: FILE: include/linux/blkdev.h:348:
+extern void blk_queue_invalidate_tags(request_queue_t *);

WARNING:TYPO_SPELLING: 'maxium' may be misspelled - perhaps 'maximum'?
#549: FILE: drivers/ide/Config.help:766:
+  and 32 is valid, with 32 being the maxium that the hardware supports.
                                      ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#639: FILE: drivers/ide/ide-disk.c:159:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#642: FILE: drivers/ide/ide-disk.c:162:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#652: FILE: drivers/ide/ide-disk.c:199:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#655: FILE: drivers/ide/ide-disk.c:202:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#701: FILE: drivers/ide/ide-disk.c:330:
+			BUG_ON(!ata_pending_commands(drive));

CHECK:SPACING: No space is necessary after a cast
#717: FILE: drivers/ide/ide-disk.c:596:
+	ide_drive_t	*drive = (ide_drive_t *) data;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#730: FILE: drivers/ide/ide-disk.c:609:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#730: FILE: drivers/ide/ide-disk.c:609:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: drivers/ide/ide-disk.c:610:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#731: FILE: drivers/ide/ide-disk.c:610:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#732: FILE: drivers/ide/ide-disk.c:611:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#732: FILE: drivers/ide/ide-disk.c:611:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#733: FILE: drivers/ide/ide-disk.c:612:
+	len += sprintf(out+len, "Current depth:\t\t%d\n", ata_pending_commands(drive));
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#734: FILE: drivers/ide/ide-disk.c:613:
+	len += sprintf(out+len, "Active tags:\t\t[ ");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#741: FILE: drivers/ide/ide-disk.c:620:
+		len += sprintf(out+len, "%d, ", i);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#744: FILE: drivers/ide/ide-disk.c:623:
+	len += sprintf(out+len, "]\n");
 	                  ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#746: FILE: drivers/ide/ide-disk.c:625:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#746: FILE: drivers/ide/ide-disk.c:625:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);
 	                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#749: FILE: drivers/ide/ide-disk.c:628:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#749: FILE: drivers/ide/ide-disk.c:628:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);
 		                  ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#751: FILE: drivers/ide/ide-disk.c:630:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", test_bit(IDE_DMA, &HWGROUP(drive)->flags) ? "" : "not ");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#751: FILE: drivers/ide/ide-disk.c:630:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", test_bit(IDE_DMA, &HWGROUP(drive)->flags) ? "" : "not ");
 	                  ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#766: FILE: drivers/ide/ide-disk.c:645:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#766: FILE: drivers/ide/ide-disk.c:645:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },
 	        		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#766: FILE: drivers/ide/ide-disk.c:645:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 287 exceeds 100 columns
#809: FILE: drivers/ide/ide-disk.c:791:
+	ide_add_setting(drive,	"using_tcq",		SETTING_RW,					HDIO_GET_QDMA,		HDIO_SET_QDMA,		TYPE_BYTE,	0,	IDE_MAX_TAG,			1,		1,		&drive->using_tcq,		set_using_tcq);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#842: FILE: drivers/ide/ide-dma.c:547:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#842: FILE: drivers/ide/ide-dma.c:547:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#842: FILE: drivers/ide/ide-dma.c:547:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                                ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#952: FILE: drivers/ide/ide-taskfile.c:466:
+		if (args->taskfile.command == WIN_WRITEDMA || args->taskfile.command == WIN_WRITEDMA_EXT)

CHECK:BRACES: braces {} should be used on all arms of this statement
#952: FILE: drivers/ide/ide-taskfile.c:466:
+		if (args->taskfile.command == WIN_WRITEDMA || args->taskfile.command == WIN_WRITEDMA_EXT)
[...]
+		else if (args->taskfile.command == WIN_READDMA || args->taskfile.command == WIN_READDMA_EXT)
[...]
+		else if (args->taskfile.command == WIN_WRITEDMA_QUEUED || args->taskfile.command == WIN_WRITEDMA_QUEUED_EXT) {
[...]
+		} else if (args->taskfile.command == WIN_READDMA_QUEUED || args->taskfile.command == WIN_READDMA_QUEUED_EXT) {
[...]
+		} else {
[...]

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#954: FILE: drivers/ide/ide-taskfile.c:468:
+		else if (args->taskfile.command == WIN_READDMA || args->taskfile.command == WIN_READDMA_EXT)

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#956: FILE: drivers/ide/ide-taskfile.c:470:
+		else if (args->taskfile.command == WIN_WRITEDMA_QUEUED || args->taskfile.command == WIN_WRITEDMA_QUEUED_EXT) {

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#959: FILE: drivers/ide/ide-taskfile.c:473:
+		} else if (args->taskfile.command == WIN_READDMA_QUEUED || args->taskfile.command == WIN_READDMA_QUEUED_EXT) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#963: FILE: drivers/ide/ide-taskfile.c:477:
+			printk("ata_taskfile: unknown command %x\n", args->taskfile.command);

CHECK:BRACES: braces {} should be used on all arms of this statement
#972: FILE: drivers/ide/ide-taskfile.c:486:
+		if (tcq)
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#974: FILE: drivers/ide/ide-taskfile.c:488:
+			return drive->channel->udma(dma_act, drive, rq);
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#974: FILE: drivers/ide/ide-taskfile.c:488:
+		else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#994: FILE: drivers/ide/ide-tcq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1007: FILE: drivers/ide/ide-tcq.c:14:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1008: FILE: drivers/ide/ide-tcq.c:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#1022: FILE: drivers/ide/ide-tcq.c:29:
+#include <asm/delay.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1048: FILE: drivers/ide/ide-tcq.c:55:
+ide_startstop_t ide_service(ide_drive_t *drive);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1071: FILE: drivers/ide/ide-tcq.c:78:
+	printk("%s: invalidating pending queue (%d)\n", drive->name, ata_pending_commands(drive));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1088: FILE: drivers/ide/ide-tcq.c:95:
+#if 0

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1101: FILE: drivers/ide/ide-tcq.c:108:
+	ar->ar_rq->rq_dev = mk_kdev(drive->channel->major, (drive->select.b.unit)<<PARTN_BITS);
 	                                                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1116: FILE: drivers/ide/ide-tcq.c:123:
+	printk("ide_tcq_invalidate_queue: done\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_invalidate_queue', this function's name, in a string
#1116: FILE: drivers/ide/ide-tcq.c:123:
+	printk("ide_tcq_invalidate_queue: done\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#1121: FILE: drivers/ide/ide-tcq.c:128:
+	ide_drive_t *drive = (ide_drive_t *) data;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1125: FILE: drivers/ide/ide-tcq.c:132:
+	printk("ide_tcq_intr_timeout: timeout waiting for interrupt...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1125: FILE: drivers/ide/ide-tcq.c:132:
+	printk("ide_tcq_intr_timeout: timeout waiting for interrupt...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1130: FILE: drivers/ide/ide-tcq.c:137:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1130: FILE: drivers/ide/ide-tcq.c:137:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#1131: FILE: drivers/ide/ide-tcq.c:138:
+	if (hwgroup->handler == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1132: FILE: drivers/ide/ide-tcq.c:139:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1132: FILE: drivers/ide/ide-tcq.c:139:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

CHECK:SPACING: No space is necessary after a cast
#1158: FILE: drivers/ide/ide-tcq.c:165:
+	hwgroup->timer.data = (unsigned long) hwgroup->XXX_drive;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1176: FILE: drivers/ide/ide-tcq.c:183:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1211: FILE: drivers/ide/ide-tcq.c:218:
+		udelay(10);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1222: FILE: drivers/ide/ide-tcq.c:229:
+		printk("ide_service: BUSY clear took too long\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1222: FILE: drivers/ide/ide-tcq.c:229:
+		printk("ide_service: BUSY clear took too long\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1242: FILE: drivers/ide/ide-tcq.c:249:
+	if ((feat = GET_FEAT()) & NSEC_REL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1244: FILE: drivers/ide/ide-tcq.c:251:
+		printk("%s: release in service\n", drive->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1250: FILE: drivers/ide/ide-tcq.c:257:
+	TCQ_PRINTK("ide_service: stat %x, feat %x\n", stat, feat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1254: FILE: drivers/ide/ide-tcq.c:261:
+		printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1254: FILE: drivers/ide/ide-tcq.c:261:
+		printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1264: FILE: drivers/ide/ide-tcq.c:271:
+	TCQ_PRINTK("ide_service: starting command %x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_check_service', this function's name, in a string
#1272: FILE: drivers/ide/ide-tcq.c:279:
+	TCQ_PRINTK("%s: ide_check_service\n", drive->name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1277: FILE: drivers/ide/ide-tcq.c:284:
+	if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1300: FILE: drivers/ide/ide-tcq.c:307:
+		printk("ide_dmaq_intr: %s: error status %x\n", drive->name, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1307: FILE: drivers/ide/ide-tcq.c:314:
+		printk("%s: bad DMA status (dma_stat=%x)\n", drive->name, dma_stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1332: FILE: drivers/ide/ide-tcq.c:339:
+	TCQ_PRINTK("ide_dmaq_intr: stat=%x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1345: FILE: drivers/ide/ide-tcq.c:352:
+		TCQ_PRINTK("ide_dmaq_intr: SERV (stat=%x)\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1349: FILE: drivers/ide/ide-tcq.c:356:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1349: FILE: drivers/ide/ide-tcq.c:356:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

ERROR:SPACING: spaces required around that '&&' (ctx:WxV)
#1367: FILE: drivers/ide/ide-tcq.c:374:
+		if (drive->channel->drives[i].present &&drive->type == ATA_DISK)
 		                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1389: FILE: drivers/ide/ide-tcq.c:396:
+	printk("%s: NOP Auto-poll enabled\n", ch->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1415: FILE: drivers/ide/ide-tcq.c:422:
+		printk("%s: failed to enable write cache\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1429: FILE: drivers/ide/ide-tcq.c:436:
+		printk("%s: disabling release interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1443: FILE: drivers/ide/ide-tcq.c:450:
+		printk("%s: enabling service interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1467: FILE: drivers/ide/ide-tcq.c:474:
+			printk("%s: TCQ disabled\n", drive->name);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1483: FILE: drivers/ide/ide-tcq.c:490:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: drivers/ide/ide-tcq.c:490:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1494: FILE: drivers/ide/ide-tcq.c:501:
+		printk("%s: timeout waiting for data phase\n", drive->name);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1507: FILE: drivers/ide/ide-tcq.c:514:
+	switch (func) {
[...]
+		case ide_dma_queued_start:
[...]
+		case ide_dma_read_queued:
[...]
+		case ide_dma_queued_off:
[...]
+		case ide_dma_queued_on:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1515: FILE: drivers/ide/ide-tcq.c:522:
+				printk("queued_rw: IDE_BUSY not set\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1564: FILE: drivers/ide/ide-tcq.c:571:
+			if ((feat = GET_FEAT()) & NSEC_REL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1571: FILE: drivers/ide/ide-tcq.c:578:
+				if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1626: FILE: drivers/ide/ide.c:1352:
+			BUG_ON(!drive->using_tcq);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1688: FILE: include/linux/ide.h:373:
+^Iunsigned long^Iimmed_rel;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1749: FILE: include/linux/ide.h:900:
+ide_startstop_t ide_tcq_dmaproc(ide_dma_action_t func, struct ata_device *drive, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1753: FILE: include/linux/ide.h:904:
+extern int ide_start_dma(ide_dma_action_t func, struct ata_device *drive);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 88 warnings, 39 checks, 1500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
