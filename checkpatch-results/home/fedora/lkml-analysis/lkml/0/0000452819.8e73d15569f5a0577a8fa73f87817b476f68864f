WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
- Sanitize the handling of the ioctl's and fix a bug on the way in dealing with

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ar->command_type == IDE_DRIVE_TASK_RAW_WRITE'
#253: FILE: drivers/ide/ide.c:758:
+		if (((ar->command_type == IDE_DRIVE_TASK_RAW_WRITE) ||
+		     (ar->command_type == IDE_DRIVE_TASK_OUT)) &&
+				ar->prehandler && ar->handler)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ar->command_type == IDE_DRIVE_TASK_OUT'
#253: FILE: drivers/ide/ide.c:758:
+		if (((ar->command_type == IDE_DRIVE_TASK_RAW_WRITE) ||
+		     (ar->command_type == IDE_DRIVE_TASK_OUT)) &&
+				ar->prehandler && ar->handler)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ar->handler"
#513: FILE: drivers/ide/ide-taskfile.c:334:
+	if (ar->handler != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ar->prehandler"
#532: FILE: drivers/ide/ide-taskfile.c:349:
+		if (ar->prehandler != NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#548: FILE: drivers/ide/ide-taskfile.c:364:
+		else if (ar->cmd == WIN_READDMA
+		      || ar->cmd == WIN_READDMA_EXT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#556: FILE: drivers/ide/ide-taskfile.c:368:
+		else if (ar->cmd == WIN_WRITEDMA_QUEUED
+		      || ar->cmd == WIN_WRITEDMA_QUEUED_EXT

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#557: FILE: drivers/ide/ide-taskfile.c:369:
+		      || ar->cmd == WIN_WRITEDMA_QUEUED_EXT
+		      || ar->cmd == WIN_READDMA_QUEUED

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#558: FILE: drivers/ide/ide-taskfile.c:370:
+		      || ar->cmd == WIN_READDMA_QUEUED
+		      || ar->cmd == WIN_READDMA_QUEUED_EXT)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#563: FILE: drivers/ide/ide-taskfile.c:374:
+			printk("ata_taskfile: unknown command %x\n", ar->cmd);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->cmd != WIN_MULTWRITE'
#596: FILE: drivers/ide/ide-taskfile.c:468:
+	if ((args->cmd != WIN_MULTWRITE) &&
+	    (args->cmd != WIN_MULTWRITE_EXT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->cmd != WIN_MULTWRITE_EXT'
#596: FILE: drivers/ide/ide-taskfile.c:468:
+	if ((args->cmd != WIN_MULTWRITE) &&
+	    (args->cmd != WIN_MULTWRITE_EXT)) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#652: FILE: drivers/ide/ioctl.c:50:
+			udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#656: FILE: drivers/ide/ioctl.c:54:
+		return ata_error(drive, rq, __FUNCTION__); /* already calls ide_end_drive_cmd */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#847: FILE: drivers/ide/pdc4030.c:711:
+	args.cmd			= (rq_data_dir(rq)==READ)?PROMISE_READ:PROMISE_WRITE;
 	        			                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#847: FILE: drivers/ide/pdc4030.c:711:
+	args.cmd			= (rq_data_dir(rq)==READ)?PROMISE_READ:PROMISE_WRITE;
 	        			                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#847: FILE: drivers/ide/pdc4030.c:711:
+	args.cmd			= (rq_data_dir(rq)==READ)?PROMISE_READ:PROMISE_WRITE;
 	        			                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#995: FILE: include/linux/ide.h:669:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#995: FILE: include/linux/ide.h:669:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#995: FILE: include/linux/ide.h:669:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 14 checks, 853 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
