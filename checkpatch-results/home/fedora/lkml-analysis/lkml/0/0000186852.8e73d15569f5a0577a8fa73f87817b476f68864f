WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#71: 
diff -urp -X dontdiff linux-2.6.12-rc3/fs/buffer.c linux-2.6.12-rc3-getblocks/fs/buffer.c

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: fs/buffer.c:2518:
+int nobh_writepage(struct page *page, get_blocks_t *get_blocks,
+		struct writeback_control *wbc, writepage_t bh_writepage_fn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: fs/ext2/inode.c:660:
+static int ext2_nobh_writepage(struct page *page,
+			struct writeback_control *wbc)

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: fs/ext2/inode.c:679:
+        return __mpage_writepages(mapping, wbc, ext2_get_blocks,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: fs/ext2/inode.c:679:
+        return __mpage_writepages(mapping, wbc, ext2_get_blocks,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: fs/ext3/inode.c:870:
+static int ext3_writepages_get_blocks(struct inode *inode, sector_t iblock,
+		unsigned long max_blocks, struct buffer_head *bh, int create)

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/ext3/inode.c:1372:
+        ret = __mpage_writepages(mapping, wbc, ext3_writepages_get_blocks,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/ext3/inode.c:1372:
+        ret = __mpage_writepages(mapping, wbc, ext3_writepages_get_blocks,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: fs/ext3/inode.c:1373:
+        ret = __mpage_writepages(mapping, wbc, ext3_writepages_get_blocks,
 					ext3_writeback_writepage_helper);

WARNING:TYPO_SPELLING: 'reaquire' may be misspelled - perhaps 'reacquire'?
#197: FILE: fs/ext3/inode.c:1376:
+	 * Need to reaquire the handle since ext3_writepages_get_blocks()
 	           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: fs/ext3/inode.c:1406:
+		ret = nobh_writepage(page, ext3_writepages_get_blocks, wbc,
+			ext3_writeback_writepage_helper);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#234: FILE: fs/ext3/super.c:1589:
+		printk("NOBH option set\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/jfs/inode.c:274:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: fs/jfs/inode.c:276:
+^I * we figure out why we see exposures with truncate on $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: fs/jfs/inode.c:289:
+static int jfs_bh_writepage(struct page *page,
+				struct writeback_control *wbc)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: fs/jfs/inode.c:294:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: fs/jfs/inode.c:303:
+        return __mpage_writepages(mapping, wbc, jfs_mpage_get_blocks,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: fs/jfs/inode.c:303:
+        return __mpage_writepages(mapping, wbc, jfs_mpage_get_blocks,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: fs/mpage.c:378:
+	unsigned long final_block_in_request;
+	sector_t long block_in_bio;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: fs/mpage.c:390:
+static unsigned long mpage_get_more_blocks(struct mpageio *mio,
+	struct inode *inode, get_blocks_t get_blocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/mpage.c:398:
+	while ((first_unmapped < mio->final_block_in_request) &&
+		(mio->map_bh.b_size < PAGE_SIZE)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#342: FILE: fs/mpage.c:399:
+		(mio->map_bh.b_size < PAGE_SIZE)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/mpage.c:401:
+		if (get_blocks(inode, first_unmapped,
+			mio->final_block_in_request - first_unmapped,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'map_bh.b_blocknr != next_contig_block'
#347: FILE: fs/mpage.c:404:
+		if (mio_nblocks && ((map_bh.b_blocknr != next_contig_block) ||
+			map_bh.b_bdev != mio->map_bh.b_bdev))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: fs/mpage.c:405:
+		if (mio_nblocks && ((map_bh.b_blocknr != next_contig_block) ||
+			map_bh.b_bdev != mio->map_bh.b_bdev))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: fs/mpage.c:407:
+^I^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: fs/mpage.c:410:
+			int i = 0;
+			for (; i < map_bh.b_size >> inode->i_blkbits; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: fs/mpage.c:412:
+				unmap_underlying_metadata(map_bh.b_bdev,
+					map_bh.b_blocknr + i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: fs/mpage.c:414:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: fs/mpage.c:452:
+__mpage_writepage(struct mpageio *mio, struct page *page,
+	get_blocks_t get_blocks, struct writeback_control *wbc,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: fs/mpage.c:500:
+^I^I^I^Iif (bh->b_blocknr != map_bh->b_blocknr $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: fs/mpage.c:548:
+^Iif (mio->boundary && (mio->boundary_block < map_bh->b_blocknr $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: fs/mpage.c:554:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: fs/mpage.c:588:
+^I^I/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: fs/mpage.c:593:
+		bio = mpage_alloc(bdev, map_bh->b_blocknr << (blkbits - 9),
 				bio_get_nr_vecs(bdev), GFP_NOFS|__GFP_HIGH);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#576: FILE: fs/mpage.c:712:
+	const unsigned blkbits = inode->i_blkbits;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_blocks"
#597: FILE: fs/mpage.c:733:
+	if (get_blocks == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: fs/mpage.c:783:
+^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: fs/mpage.c:805:
+				ret = __mpage_writepage(&mio, page, get_blocks,
+						wbc, writepage_fn);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: fs/mpage.c:818:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: fs/mpage.c:840:
+int mpage_writepage(struct page *page, get_blocks_t get_blocks,
+		struct writeback_control *wbc, writepage_t writepage_fn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#670: FILE: fs/mpage.c:845:
+	const unsigned blkbits = inode->i_blkbits;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: fs/mpage.c:853:
+	ret = __mpage_writepage(&mio, page, get_blocks,
+			wbc, writepage_fn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: include/linux/buffer_head.h:207:
+int nobh_writepage(struct page *page, get_blocks_t *get_blocks,
+	struct writeback_control *wbc, writepage_t bh_writepage);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: include/linux/mpage.h:21:
+int mpage_writepage(struct page *page, get_blocks_t *get_blocks,
+		struct writeback_control *wbc, writepage_t writepage);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#755: FILE: include/linux/pagevec.h:31:
+unsigned pagevec_contig_lookup_tag(struct pagevec *pvec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: include/linux/pagevec.h:32:
+unsigned pagevec_contig_lookup_tag(struct pagevec *pvec,
+		struct address_space *mapping, pgoff_t *index, int tag,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#757: FILE: include/linux/pagevec.h:33:
+		unsigned nr_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: include/linux/radix-tree.h:63:
+__radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
+		unsigned long first_index, unsigned int max_items, int tag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: lib/radix-tree.c:632:
+__radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
+		unsigned long first_index, unsigned int max_items, int tag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: mm/filemap.c:650:
+	ret = __radix_tree_gang_lookup_tag(&mapping->page_tree,
+			(void **)pages, *index, nr_pages, tag, contig);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: mm/swap.c:393:
+pagevec_contig_lookup_tag(struct pagevec *pvec, struct address_space *mapping,
+		pgoff_t *index, int tag, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#904: FILE: mm/swap.c:393:
+		pgoff_t *index, int tag, unsigned nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: mm/swap.c:396:
+	pvec->nr = find_get_pages_tag(mapping, index, tag,
+					nr_pages, pvec->pages, 1);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186852.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 13 warnings, 28 checks, 746 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186852.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
