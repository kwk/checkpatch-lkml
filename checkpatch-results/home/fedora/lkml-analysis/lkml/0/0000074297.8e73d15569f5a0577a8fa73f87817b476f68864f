WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#36: 
	wide in-kernel block variables. There are some fileystem wide
	                                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#42: 
Signed-Off-By: Mingming Cao <cmm@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:NEW_TYPEDEFS: do not add new typedefs
#64: FILE: include/linux/ext3_fs_i.h:25:
+typedef int ext3_grpblk_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#67: FILE: include/linux/ext3_fs_i.h:28:
+typedef unsigned long ext3_fsblk_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#88: FILE: include/linux/ext3_fs.h:735:
+extern ext3_fsblk_t ext3_new_block (handle_t *handle, struct inode *inode,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/ext3_fs.h:735:
+extern ext3_fsblk_t ext3_new_block (handle_t *handle, struct inode *inode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: include/linux/ext3_fs.h:736:
+extern ext3_fsblk_t ext3_new_block (handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int *errp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#90: FILE: include/linux/ext3_fs.h:737:
+extern ext3_fsblk_t ext3_new_blocks (handle_t *handle, struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/ext3_fs.h:737:
+extern ext3_fsblk_t ext3_new_blocks (handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: include/linux/ext3_fs.h:738:
+extern ext3_fsblk_t ext3_new_blocks (handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, unsigned long *count, int *errp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#92: FILE: include/linux/ext3_fs.h:739:
+extern void ext3_free_blocks (handle_t *handle, struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/ext3_fs.h:739:
+extern void ext3_free_blocks (handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: include/linux/ext3_fs.h:740:
+extern void ext3_free_blocks (handle_t *handle, struct inode *inode,
+			ext3_fsblk_t block, unsigned long count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#94: FILE: include/linux/ext3_fs.h:741:
+extern void ext3_free_blocks_sb (handle_t *handle, struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/ext3_fs.h:741:
+extern void ext3_free_blocks_sb (handle_t *handle, struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: fs/ext3/balloc.c:167:
+goal_in_my_reservation(struct ext3_reserve_window *rsv, ext3_grpblk_t grp_goal,
 			unsigned int group, struct super_block * sb)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'grp_goal >= 0'
#132: FILE: fs/ext3/balloc.c:178:
+	if ((grp_goal >= 0) && ((grp_goal + group_first_block < rsv->_rsv_start)
+		|| (grp_goal + group_first_block > rsv->_rsv_end)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#133: FILE: fs/ext3/balloc.c:179:
+	if ((grp_goal >= 0) && ((grp_goal + group_first_block < rsv->_rsv_start)
+		|| (grp_goal + group_first_block > rsv->_rsv_end)))

WARNING:SPLIT_STRING: quoted string split across lines
#185: FILE: fs/ext3/balloc.c:336:
 			    "Freeing blocks not in datazone - "
+			    "block = "E3FSBLK", count = %lu", block, count);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#185: FILE: fs/ext3/balloc.c:336:
+			    "block = "E3FSBLK", count = %lu", block, count);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#194: FILE: fs/ext3/balloc.c:372:
 			    "Freeing blocks in system zones - "
+			    "Block = "E3FSBLK", count = %lu",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#194: FILE: fs/ext3/balloc.c:372:
+			    "Block = "E3FSBLK", count = %lu",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#203: FILE: fs/ext3/balloc.c:456:
+				"bit already cleared for block "E3FSBLK,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: fs/ext3/balloc.c:548:
+bitmap_search_next_usable_block(ext3_grpblk_t start, struct buffer_head *bh,
+					ext3_grpblk_t maxblocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: fs/ext3/balloc.c:582:
+find_next_usable_block(ext3_grpblk_t start, struct buffer_head *bh,
+			ext3_grpblk_t maxblocks)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start <= grp_goal'
#302: FILE: fs/ext3/balloc.c:679:
+		if ((start <= grp_goal) && (grp_goal < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'grp_goal < end'
#302: FILE: fs/ext3/balloc.c:679:
+		if ((start <= grp_goal) && (grp_goal < end))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: fs/ext3/balloc.c:702:
+			for (i = 0; i < 7 && grp_goal > start &&
+					ext3_test_allocatable(grp_goal - 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: fs/ext3/balloc.c:703:
+					ext3_test_allocatable(grp_goal - 1,
 								bitmap_bh);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#362: FILE: fs/ext3/balloc.c:724:
+	while (num < *count && grp_goal < end
+		&& ext3_test_allocatable(grp_goal, bitmap_bh)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#363: FILE: fs/ext3/balloc.c:725:
+		&& ext3_test_allocatable(grp_goal, bitmap_bh)
+		&& claim_block(sb_bgl_lock(EXT3_SB(sb), group), grp_goal, bitmap_bh)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: fs/ext3/balloc.c:772:
+				struct super_block * sb,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#444: FILE: fs/ext3/balloc.c:1068:
+			struct ext3_reserve_window_node * my_rsv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: fs/ext3/balloc.c:1131:
+			ret = alloc_new_reservation(my_rsv, grp_goal, sb,
 							group, bitmap_bh);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#489: FILE: fs/ext3/balloc.c:1137:
+		} else if (grp_goal > 0 && (my_rsv->rsv_end-grp_goal+1) < *count)
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#489: FILE: fs/ext3/balloc.c:1137:
+		} else if (grp_goal > 0 && (my_rsv->rsv_end-grp_goal+1) < *count)
 		                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#492: FILE: fs/ext3/balloc.c:1139:
+					*count-my_rsv->rsv_end + grp_goal - 1);
 					      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: fs/ext3/balloc.c:1209:
+ext3_fsblk_t ext3_new_blocks(handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, unsigned long *count, int *errp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: fs/ext3/balloc.c:1300:
+		grp_alloc_blk = ext3_try_to_allocate_with_rsv(sb, handle,
+					group_no, bitmap_bh, grp_target_blk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: fs/ext3/balloc.c:1341:
+		grp_alloc_blk = ext3_try_to_allocate_with_rsv(sb, handle,
+					group_no, bitmap_bh, -1, my_rsv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: fs/ext3/balloc.c:1380:
+	    in_range(ret_block, le32_to_cpu(gdp->bg_inode_table),
 		      EXT3_SB(sb)->s_itb_per_group) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: fs/ext3/balloc.c:1382:
+	    in_range(ret_block + num - 1, le32_to_cpu(gdp->bg_inode_table),
 		      EXT3_SB(sb)->s_itb_per_group))

WARNING:SPLIT_STRING: quoted string split across lines
#599: FILE: fs/ext3/balloc.c:1385:
 			    "Allocating block in system zone - "
+			    "blocks from "E3FSBLK", length %lu",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#599: FILE: fs/ext3/balloc.c:1385:
+			    "blocks from "E3FSBLK", length %lu",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: fs/ext3/balloc.c:1408:
+			if (ext3_test_bit(grp_alloc_blk+i,
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: fs/ext3/balloc.c:1409:
+			if (ext3_test_bit(grp_alloc_blk+i,
 					bh2jh(bitmap_bh)->b_committed_data)) {

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#637: FILE: fs/ext3/balloc.c:1422:
+			    "block("E3FSBLK") >= blocks count(%d) - "

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/ext3/balloc.c:1434:
+	ext3_debug("allocating block %lu. Goal hits %d of %d.\n",
 			ret_block, goal_hits, goal_attempts);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: fs/ext3/balloc.c:1474:
+ext3_fsblk_t ext3_new_block(handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int *errp)

CHECK:SPACING: No space is necessary after a cast
#693: FILE: fs/ext3/ialloc.c:312:
+	max_debt = EXT3_BLOCKS_PER_GROUP(sb) / max(blocks_per_dir, (ext3_fsblk_t)BLOCK_COST);

WARNING:MINMAX: max() should probably be max_t(ext3_fsblk_t, blocks_per_dir, BLOCK_COST)
#693: FILE: fs/ext3/ialloc.c:312:
+	max_debt = EXT3_BLOCKS_PER_GROUP(sb) / max(blocks_per_dir, (ext3_fsblk_t)BLOCK_COST);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#739: FILE: fs/ext3/resize.c:67:
+		ext3_warning(sb, __FUNCTION__,

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#740: FILE: fs/ext3/resize.c:68:
+			     "Cannot read last block ("E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#749: FILE: fs/ext3/resize.c:81:
+			     "Inode table not in group (blocks %u-"E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#758: FILE: fs/ext3/resize.c:89:
+			     "Block bitmap (%u) in inode table (%u-"E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#763: FILE: fs/ext3/resize.c:93:
+			     "Inode bitmap (%u) in inode table (%u-"E3FSBLK")",

WARNING:SPLIT_STRING: quoted string split across lines
#769: FILE: fs/ext3/resize.c:98:
+			     "Block bitmap (%u) in GDT table"
+			     " ("E3FSBLK"-"E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#769: FILE: fs/ext3/resize.c:98:
+			     " ("E3FSBLK"-"E3FSBLK")",

WARNING:SPLIT_STRING: quoted string split across lines
#775: FILE: fs/ext3/resize.c:103:
+			     "Inode bitmap (%u) in GDT table"
+			     " ("E3FSBLK"-"E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#775: FILE: fs/ext3/resize.c:103:
+			     " ("E3FSBLK"-"E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#781: FILE: fs/ext3/resize.c:108:
+			     "Inode table (%u-"E3FSBLK") overlaps"

WARNING:SPLIT_STRING: quoted string split across lines
#782: FILE: fs/ext3/resize.c:109:
+			     "Inode table (%u-"E3FSBLK") overlaps"
+			     "GDT table ("E3FSBLK"-"E3FSBLK")",

WARNING:MISSING_SPACE: break quoted strings at a space character
#782: FILE: fs/ext3/resize.c:109:
+			     "Inode table (%u-"E3FSBLK") overlaps"
+			     "GDT table ("E3FSBLK"-"E3FSBLK")",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#782: FILE: fs/ext3/resize.c:109:
+			     "GDT table ("E3FSBLK"-"E3FSBLK")",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 27)
#859: FILE: fs/ext3/xattr.c:234:
 	if (ext3_xattr_check_block(bh)) {
[...]
+			   "inode %ld: bad block %u", inode->i_ino,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#898: FILE: fs/ext3/xattr.c:795:
+			ext3_fsblk_t goal = le32_to_cpu(

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074297.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 18 warnings, 46 checks, 811 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074297.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
