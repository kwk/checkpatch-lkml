WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#74: FILE: digsig.c:64:
+	unsigned count;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: digsig.c:96:
+	ksec = security_get_value_type(&file->f_security, DIGSIG_LSM_ID,
+				struct digsig_ksec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: digsig.c:107:
+	ksec = security_get_value_type(&file->f_security, DIGSIG_LSM_ID,
+				struct digsig_ksec);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ksec)...) over kmalloc(sizeof(struct digsig_ksec)...)
#104: FILE: digsig.c:109:
+		ksec = kmalloc(sizeof(struct digsig_ksec), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: digsig.c:117:
+		security_add_value_type(&file->f_security, DIGSIG_LSM_ID,
+				 ksec);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: digsig.c:123:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: digsig.c:129:
+	ksec = security_get_value_type(&inode->i_security, DIGSIG_LSM_ID,
+				struct digsig_ksec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: digsig.c:140:
+	ksec = security_get_value_type(&inode->i_security, DIGSIG_LSM_ID,
+				struct digsig_ksec);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ksec)...) over kmalloc(sizeof(struct digsig_ksec)...)
#137: FILE: digsig.c:142:
+		ksec = kmalloc(sizeof(struct digsig_ksec), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: digsig.c:150:
+		security_add_value_type(&inode->i_security, DIGSIG_LSM_ID,
+				 ksec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: digsig.c:459:
+	ksec = security_get_value_type(&file->f_security, DIGSIG_LSM_ID,
+				struct digsig_ksec);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#207: FILE: digsig.c:615:
+static int digsig_file_mmap(struct file * file, unsigned long reqprot, unsigned long prot, unsigned long flags)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: digsig.c:615:
+static int digsig_file_mmap(struct file * file, unsigned long reqprot, unsigned long prot, unsigned long flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: digsig.c:759:
+	ksec = security_del_value_type(&inode->i_security, DIGSIG_LSM_ID,
+				struct digsig_ksec);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#241: FILE: digsig.c:817:
+		printk(KERN_NOTICE "free_ichain unlinking %u, %d, %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: digsig.c:818:
+		printk(KERN_NOTICE "free_ichain unlinking %u, %d, %lu\n",
+			ksec->count, ksec->lsm_list.security_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#249: FILE: digsig.c:825:
+		printk(KERN_NOTICE "free_ichain freeing 1\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 12 checks, 211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
