ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: Documentation/pagg.txt:37:
+This section will describe files and data structures that need to be $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: Documentation/pagg.txt:38:
+modified to implement PAGGs.  In addition, new files and data $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: Documentation/pagg.txt:47:
+-  include/asm-i386/unistd.h  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: Documentation/pagg.txt:50:
+-  kernel/Makefile  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: Documentation/pagg.txt:68:
+The following existing data structures need to be altered to implement $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: Documentation/pagg.txt:74:
+The new member in task_struct, pagg,  points to a linked list of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: Documentation/pagg.txt:79:
+The following new data structures will be introduced to implement $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: Documentation/pagg.txt:92:
+     $

WARNING:TYPO_SPELLING: 'Funtion' may be misspelled - perhaps 'Function'?
#199: FILE: Documentation/pagg.txt:101:
+     int  (*do_paggctl)(int, void *);     /* Funtion for paggctl */
                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: Documentation/pagg.txt:107:
+The pagg_task_s structure provides the process' reference to the PAGG $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: Documentation/pagg.txt:108:
+containers provided by the modules.  The attach function pointer is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: Documentation/pagg.txt:109:
+the function used to update the referenced PAGG container that the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: Documentation/pagg.txt:110:
+process is being attached.  The detach function pointer is used to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: Documentation/pagg.txt:111:
+update the referenced PAGG container when the process is exiting or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: Documentation/pagg.txt:114:
+The pagg_module_s structure provides the reference to the PAGG module $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: Documentation/pagg.txt:115:
+that implements a type of PAGG container.  In addition to the function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: Documentation/pagg.txt:116:
+pointers described concerning pagg_task_s, this structure provides two $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: Documentation/pagg.txt:117:
+addition function pointers.  The init function pointer is optional and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: Documentation/pagg.txt:118:
+is used to attach currently running processes to a default PAGG $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: Documentation/pagg.txt:119:
+container.  If the init function is not defined, then it is assumed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: Documentation/pagg.txt:120:
+that NULL represents the default PAGG container for that module.  The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: Documentation/pagg.txt:121:
+do_paggctl function provides this modules interface for the paggctl $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: Documentation/pagg.txt:122:
+system call.  If paggctl is called using this modules name, this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: Documentation/pagg.txt:123:
+function will  be used, passing it a request code and data pointer. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: Documentation/pagg.txt:124:
+The pagg_module_s structures will be stored in a simple hash table to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: Documentation/pagg.txt:126:
+     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: Documentation/pagg.txt:133:
+     /* execute the following pseudocode before add to run-queue  */  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: Documentation/pagg.txt:139:
+               Call detach_pagg function with current task_struct $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: Documentation/pagg.txt:167:
+     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: Documentation/pagg.txt:170:
+The following new system call will be added to implement a control $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: Documentation/pagg.txt:175:
+          Return -EINVAL      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: Documentation/pagg.txt:184:
+The paggctl system call provides the necessary interface for $

WARNING:TYPO_SPELLING: 'ond' may be misspelled - perhaps 'one'?
#316: FILE: Documentation/pagg.txt:218:
+       ond argument, request, is a code	 that  indicates  to  the
        ^^^

WARNING:TYPO_SPELLING: 'strucuture' may be misspelled - perhaps 'structure'?
#318: FILE: Documentation/pagg.txt:220:
+       final argument, data, is a pointer to a strucuture used to
                                                ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: include/asm-i386/unistd.h:231:
+#define __NR_paggctl          ^I223 $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: include/asm-i386/unistd.h:231:
+#define __NR_paggctl          ^I223 $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#419: FILE: include/asm-i386/unistd.h:234:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#422: FILE: include/asm-i386/unistd.h:236:
<asm-i386/errno.h> */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: include/asm-ia64/unistd.h:211:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: include/linux/pagg.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#445: FILE: include/linux/pagg.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: include/linux/pagg.h:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: include/linux/pagg.h:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: include/linux/pagg.h:14:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: include/linux/pagg.h:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: include/linux/pagg.h:25:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: include/linux/pagg.h:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: include/linux/pagg.h:30:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: include/linux/pagg.h:32:
+ * $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#479: FILE: include/linux/pagg.h:35:
+ * Description:	This file, include/linux/pagg.h, contains the data

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#489: FILE: include/linux/pagg.h:45:
+ * Created: ^I2000.05.23^ISam Watters <watters@sgi.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#491: FILE: include/linux/pagg.h:47:
+ * Changes:  ^I2000.07.15^ISam Watters <watters@sgi.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: include/linux/pagg.h:48:
+ * ^I^IChanged definitions of structures.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#505: FILE: include/linux/pagg.h:61:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: include/linux/pagg.h:63:
+ * Used by task_struct to manage list of pagg attachments for the process.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: include/linux/pagg.h:64:
+ * Each pagg_task_s provides the link between the process and the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: include/linux/pagg.h:71:
+ *                     a process to the pagg container referenced by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: include/linux/pagg.h:74:
+ *                     a process to the pagg container referenced by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: include/linux/pagg.h:81:
+       char                    *name;  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: include/linux/pagg.h:81:
+       char                    *name;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: include/linux/pagg.h:82:
+       int                     (*do_attach)(struct task_struct *, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: include/linux/pagg.h:82:
+       int                     (*do_attach)(struct task_struct *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#526: FILE: include/linux/pagg.h:82:
+       int                     (*do_attach)(struct task_struct *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#526: FILE: include/linux/pagg.h:82:
+       int                     (*do_attach)(struct task_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_task_s *' should also have an identifier name
#526: FILE: include/linux/pagg.h:82:
+       int                     (*do_attach)(struct task_struct *, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: include/linux/pagg.h:83:
+                                           void *, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: include/linux/pagg.h:83:
+                                           void *, $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: include/linux/pagg.h:83:
+       int                     (*do_attach)(struct task_struct *, 
+                                           void *, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: include/linux/pagg.h:83:
+                                           void *, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: include/linux/pagg.h:84:
+                                           struct pagg_task_s *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: include/linux/pagg.h:84:
+                                           struct pagg_task_s *);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: include/linux/pagg.h:85:
+       int                     (*do_detach)(struct task_struct *, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: include/linux/pagg.h:85:
+       int                     (*do_detach)(struct task_struct *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#529: FILE: include/linux/pagg.h:85:
+       int                     (*do_detach)(struct task_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_task_s *' should also have an identifier name
#529: FILE: include/linux/pagg.h:85:
+       int                     (*do_detach)(struct task_struct *, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: include/linux/pagg.h:86:
+                                           struct pagg_task_s *);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: include/linux/pagg.h:86:
+       int                     (*do_detach)(struct task_struct *, 
+                                           struct pagg_task_s *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: include/linux/pagg.h:86:
+                                           struct pagg_task_s *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: include/linux/pagg.h:87:
+       void                    *data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: include/linux/pagg.h:88:
+       struct list_head^I       entry;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: include/linux/pagg.h:92:
+ * Used by pagg modules to define the callback functions into the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: include/linux/pagg.h:99:
+ *                     a process to the pagg container referenced by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: include/linux/pagg.h:102:
+ *                     a process to the pagg container referenced by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: include/linux/pagg.h:107:
+ *                     the pagg module. This is optional and may be set to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: include/linux/pagg.h:113:
+ *     module:         Pointer to kernel module struct.  Used to increment & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: include/linux/pagg.h:115:
+ *     prev:           Pointer to previous pagg_module_s entry in hashtable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: include/linux/pagg.h:116:
+ *                     chain list.     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: include/linux/pagg.h:121:
+       char                    *name;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: include/linux/pagg.h:122:
+       int                     (*do_attach)(struct task_struct *, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: include/linux/pagg.h:122:
+       int                     (*do_attach)(struct task_struct *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#566: FILE: include/linux/pagg.h:122:
+       int                     (*do_attach)(struct task_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#566: FILE: include/linux/pagg.h:122:
+       int                     (*do_attach)(struct task_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_task_s *' should also have an identifier name
#566: FILE: include/linux/pagg.h:122:
+       int                     (*do_attach)(struct task_struct *, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: include/linux/pagg.h:123:
+                                           void *, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: include/linux/pagg.h:123:
+                                           void *, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: include/linux/pagg.h:123:
+       int                     (*do_attach)(struct task_struct *, 
+                                           void *, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: include/linux/pagg.h:123:
+                                           void *, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: include/linux/pagg.h:124:
+                                           struct pagg_task_s *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: include/linux/pagg.h:124:
+                                           struct pagg_task_s *);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: include/linux/pagg.h:125:
+       int                     (*do_detach)(struct task_struct *, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: include/linux/pagg.h:125:
+       int                     (*do_detach)(struct task_struct *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#569: FILE: include/linux/pagg.h:125:
+       int                     (*do_detach)(struct task_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_task_s *' should also have an identifier name
#569: FILE: include/linux/pagg.h:125:
+       int                     (*do_detach)(struct task_struct *, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: include/linux/pagg.h:126:
+                                           struct pagg_task_s *);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: include/linux/pagg.h:126:
+       int                     (*do_detach)(struct task_struct *, 
+                                           struct pagg_task_s *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: include/linux/pagg.h:126:
+                                           struct pagg_task_s *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: include/linux/pagg.h:127:
+       int                     (*do_init)(struct task_struct *,$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#571: FILE: include/linux/pagg.h:127:
+       int                     (*do_init)(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_task_s *' should also have an identifier name
#571: FILE: include/linux/pagg.h:127:
+       int                     (*do_init)(struct task_struct *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: include/linux/pagg.h:128:
+                                                struct pagg_task_s *);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: include/linux/pagg.h:128:
+       int                     (*do_init)(struct task_struct *,
+                                                struct pagg_task_s *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: include/linux/pagg.h:128:
+                                                struct pagg_task_s *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: include/linux/pagg.h:129:
+       int                     (*do_paggctl)(int, void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#573: FILE: include/linux/pagg.h:129:
+       int                     (*do_paggctl)(int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#573: FILE: include/linux/pagg.h:129:
+       int                     (*do_paggctl)(int, void *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: include/linux/pagg.h:130:
+       void                    *data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: include/linux/pagg.h:131:
+       struct module           *module;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: include/linux/pagg.h:132:
+       struct pagg_module_s    *next;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: include/linux/pagg.h:133:
+}; /* pagg_module_s */ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#579: FILE: include/linux/pagg.h:135:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: include/linux/pagg.h:137:
+extern struct pagg_task_s *find_pagg(struct task_struct *, char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#581: FILE: include/linux/pagg.h:137:
+extern struct pagg_task_s *find_pagg(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#581: FILE: include/linux/pagg.h:137:
+extern struct pagg_task_s *find_pagg(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: include/linux/pagg.h:138:
+extern int register_pagg(struct pagg_module_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_module_s *' should also have an identifier name
#582: FILE: include/linux/pagg.h:138:
+extern int register_pagg(struct pagg_module_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#583: FILE: include/linux/pagg.h:139:
+extern int unregister_pagg(struct pagg_module_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg_module_s *' should also have an identifier name
#583: FILE: include/linux/pagg.h:139:
+extern int unregister_pagg(struct pagg_module_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: include/linux/pagg.h:140:
+extern int attach_pagg(struct list_head *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#584: FILE: include/linux/pagg.h:140:
+extern int attach_pagg(struct list_head *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#584: FILE: include/linux/pagg.h:140:
+extern int attach_pagg(struct list_head *, struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: include/linux/pagg.h:141:
+extern int detach_pagg(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#585: FILE: include/linux/pagg.h:141:
+extern int detach_pagg(struct task_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: include/linux/pagg.h:143:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: include/linux/pagg.h:144:
+ *  Macro used when a child process must inherit attachment to pagg $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#591: FILE: include/linux/pagg.h:147:
+#define attach_pagg_chk(parent, child)                                    \
+do {                                                                      \
+       /* Need this check until we go into INIT_TASK */			  \
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \
+       INIT_LIST_HEAD(&child->pagg_list);				  \
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \
+       }                                                                  \
+} while(0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'parent' may be better as '(parent)' to avoid precedence issues
#591: FILE: include/linux/pagg.h:147:
+#define attach_pagg_chk(parent, child)                                    \
+do {                                                                      \
+       /* Need this check until we go into INIT_TASK */			  \
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \
+       INIT_LIST_HEAD(&child->pagg_list);				  \
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \
+       }                                                                  \
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'child' - possible side-effects?
#591: FILE: include/linux/pagg.h:147:
+#define attach_pagg_chk(parent, child)                                    \
+do {                                                                      \
+       /* Need this check until we go into INIT_TASK */			  \
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \
+       INIT_LIST_HEAD(&child->pagg_list);				  \
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \
+       }                                                                  \
+} while(0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'child' may be better as '(child)' to avoid precedence issues
#591: FILE: include/linux/pagg.h:147:
+#define attach_pagg_chk(parent, child)                                    \
+do {                                                                      \
+       /* Need this check until we go into INIT_TASK */			  \
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \
+       INIT_LIST_HEAD(&child->pagg_list);				  \
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \
+       }                                                                  \
+} while(0);

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#591: FILE: include/linux/pagg.h:147:
+#define attach_pagg_chk(parent, child)                                    \
+do {                                                                      \
+       /* Need this check until we go into INIT_TASK */			  \
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \
+       INIT_LIST_HEAD(&child->pagg_list);				  \
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \
+       }                                                                  \
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#591: FILE: include/linux/pagg.h:147:
+#define attach_pagg_chk(parent, child)                                    \
+do {                                                                      \
+       /* Need this check until we go into INIT_TASK */			  \
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \
+       INIT_LIST_HEAD(&child->pagg_list);				  \
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \
+       }                                                                  \
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 7)
#592: FILE: include/linux/pagg.h:148:
+do {                                                                      \
[...]
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: include/linux/pagg.h:150:
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);^I  \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#594: FILE: include/linux/pagg.h:150:
+       if (parent->pid == 0) INIT_LIST_HEAD(&parent->pagg_list);	  \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: include/linux/pagg.h:151:
+       INIT_LIST_HEAD(&child->pagg_list);^I^I^I^I  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: include/linux/pagg.h:152:
+       if (!list_empty(&parent->pagg_list)) {                             \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#596: FILE: include/linux/pagg.h:152:
+       if (!list_empty(&parent->pagg_list)) {                             \
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: include/linux/pagg.h:153:
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: include/linux/pagg.h:153:
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#597: FILE: include/linux/pagg.h:153:
+               if (attach_pagg(&parent->pagg_list, child) != 0)           \
+                       goto bad_fork_cleanup;                             \

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: include/linux/pagg.h:154:
+                       goto bad_fork_cleanup;                             \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: include/linux/pagg.h:154:
+                       goto bad_fork_cleanup;                             \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: include/linux/pagg.h:155:
+       }                                                                  \$

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: include/linux/pagg.h:156:
+} while(0);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: include/linux/pagg.h:158:
+/* $

WARNING:TYPO_SPELLING: 'currenlty' may be misspelled - perhaps 'currently'?
#604: FILE: include/linux/pagg.h:160:
+ * is currenlty a member.
       ^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#606: FILE: include/linux/pagg.h:162:
+#define detach_pagg_chk(tsk)                                              \
+do {                                                                      \
+       if (!list_empty(&tsk->pagg_list)) {                                \
+               detach_pagg(tsk);                                          \
+       }                                                                  \
+} while(0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#606: FILE: include/linux/pagg.h:162:
+#define detach_pagg_chk(tsk)                                              \
+do {                                                                      \
+       if (!list_empty(&tsk->pagg_list)) {                                \
+               detach_pagg(tsk);                                          \
+       }                                                                  \
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#606: FILE: include/linux/pagg.h:162:
+#define detach_pagg_chk(tsk)                                              \
+do {                                                                      \
+       if (!list_empty(&tsk->pagg_list)) {                                \
+               detach_pagg(tsk);                                          \
+       }                                                                  \
+} while(0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 7)
#607: FILE: include/linux/pagg.h:163:
+do {                                                                      \
+       if (!list_empty(&tsk->pagg_list)) {                                \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: include/linux/pagg.h:164:
+       if (!list_empty(&tsk->pagg_list)) {                                \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#608: FILE: include/linux/pagg.h:164:
+       if (!list_empty(&tsk->pagg_list)) {                                \
+               detach_pagg(tsk);                                          \

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: include/linux/pagg.h:165:
+               detach_pagg(tsk);                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: include/linux/pagg.h:165:
+               detach_pagg(tsk);                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: include/linux/pagg.h:166:
+       }                                                                  \$

ERROR:SPACING: space required before the open parenthesis '('
#611: FILE: include/linux/pagg.h:167:
+} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: include/linux/pagg.h:171:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: include/linux/pagg.h:175:
+#define detach_pagg_chk(tsk)  do {  } while(0);        $

ERROR:SPACING: space required before the open parenthesis '('
#619: FILE: include/linux/pagg.h:175:
+#define detach_pagg_chk(tsk)  do {  } while(0);        

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#619: FILE: include/linux/pagg.h:175:
+#define detach_pagg_chk(tsk)  do {  } while(0);        

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: include/linux/pagg.h:176:
+#define attach_pagg_chk(parent, child)  do { } while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#620: FILE: include/linux/pagg.h:176:
+#define attach_pagg_chk(parent, child)  do { } while(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#630: FILE: include/linux/paggctl.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#644: FILE: include/linux/paggctl.h:15:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#645: FILE: include/linux/paggctl.h:16:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#656: FILE: include/linux/paggctl.h:27:
+ * Description:	This file, include/linux/paggctl.h, contains the data

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: include/linux/paggctl.h:28:
+ * ^I^Istructure definitions used by user-mode programs to $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: include/linux/paggctl.h:28:
+ * ^I^Istructure definitions used by user-mode programs to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: include/linux/paggctl.h:29:
+ * ^I^Icommunicate with the PAGG modules via the paggctl $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: include/linux/paggctl.h:29:
+ * ^I^Icommunicate with the PAGG modules via the paggctl $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: include/linux/paggctl.h:30:
+ * ^I^Ifunction.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#664: FILE: include/linux/paggctl.h:35:
+ * 		Moved file to include/linux/paggctl.h & cleanup

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#664: FILE: include/linux/paggctl.h:35:
+ * ^I^IMoved file to include/linux/paggctl.h & cleanup$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#674: FILE: include/linux/paggctl.h:45:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#733: FILE: kernel/exit.c:461:
+^I *      call pagg modules to detach $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: kernel/exit.c:462:
+^I *      from process aggregates to which the current process is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: kernel/exit.c:468:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: kernel/exit.c:468:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: kernel/fork.c:667:
+^I *      to the same process aggregate containers as the $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#797: FILE: kernel/ksyms.c:480:
+EXPORT_SYMBOL(register_pagg);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#798: FILE: kernel/ksyms.c:481:
+EXPORT_SYMBOL(unregister_pagg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#799: FILE: kernel/ksyms.c:482:
+EXPORT_SYMBOL(attach_pagg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#800: FILE: kernel/ksyms.c:483:
+EXPORT_SYMBOL(detach_pagg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: kernel/pagg.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: kernel/pagg.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: kernel/pagg.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: kernel/pagg.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: kernel/pagg.c:14:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: kernel/pagg.c:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#834: FILE: kernel/pagg.c:25:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: kernel/pagg.c:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: kernel/pagg.c:30:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: kernel/pagg.c:32:
+ * $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#844: FILE: kernel/pagg.c:35:
+ * Description:  This file, kernel/pagg.c, contains the routines used

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: kernel/pagg.c:51:
+ * ^I^IChanges so PAGG modules can be compiled into the kernel$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#874: FILE: kernel/pagg.c:65:
+
+

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#878: FILE: kernel/pagg.c:69:
+	NULL /* A */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* H */ ,
 	             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#878: FILE: kernel/pagg.c:69:
+	NULL /* A */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* H */ ,
 	                                                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#879: FILE: kernel/pagg.c:70:
+	NULL /* I */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* P */ ,
 	             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#879: FILE: kernel/pagg.c:70:
+	NULL /* I */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* P */ ,
 	                                                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#880: FILE: kernel/pagg.c:71:
+	NULL /* Q */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* X */ ,
 	             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#880: FILE: kernel/pagg.c:71:
+	NULL /* Q */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* X */ ,
 	                                                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#881: FILE: kernel/pagg.c:72:
+	NULL /* Y */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* f */ ,
 	             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#881: FILE: kernel/pagg.c:72:
+	NULL /* Y */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* f */ ,
 	                                                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#882: FILE: kernel/pagg.c:73:
+	NULL /* g */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* n */ ,
 	             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#882: FILE: kernel/pagg.c:73:
+	NULL /* g */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* n */ ,
 	                                                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#883: FILE: kernel/pagg.c:74:
+	NULL /* o */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* u */ ,
 	             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#883: FILE: kernel/pagg.c:74:
+	NULL /* o */ , NULL, NULL, NULL, NULL, NULL, NULL, NULL /* u */ ,
 	                                                                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#884: FILE: kernel/pagg.c:75:
+	NULL /* w */ , NULL, NULL, NULL	/* z */
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: kernel/pagg.c:80:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: kernel/pagg.c:83:
+ * Given a task and the pagg ID key (name), this function will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: kernel/pagg.c:93:
+^I^Istruct pagg_task_s *pagg = list_entry(entry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: kernel/pagg.c:94:
+^I^I^I^I^I^I      struct pagg_task_s, $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#905: FILE: kernel/pagg.c:96:
+		if (pagg->name == key) {
+			return pagg;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#912: FILE: kernel/pagg.c:103:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: kernel/pagg.c:110:
+ * (processes) are attached to the initial pagg container.  If no init $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pm_new->name"
#936: FILE: kernel/pagg.c:127:
+	if (pm_new->name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#946: FILE: kernel/pagg.c:137:
+			printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#948: FILE: kernel/pagg.c:139:
+					"Attempt to register duplicate"
+					" PAGG support (name=%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#958: FILE: kernel/pagg.c:149:
+	printk(KERN_INFO "Registering PAGG support for (name=%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: kernel/pagg.c:150:
+	printk(KERN_INFO "Registering PAGG support for (name=%s)\n",
+			pm_new->name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#961: FILE: kernel/pagg.c:152:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: kernel/pagg.c:155:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: kernel/pagg.c:156:
+^I * If the module has a init function defined, we need $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: kernel/pagg.c:157:
+^I * to touch each process so that it can be attached to a $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pt)...) over kmalloc(sizeof(struct pagg_task_s)...)
#982: FILE: kernel/pagg.c:173:
+			pt = kmalloc(sizeof(struct pagg_task_s), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#986: FILE: kernel/pagg.c:177:
+				printk(KERN_ERR "Initialization for PAGG"

WARNING:SPLIT_STRING: quoted string split across lines
#987: FILE: kernel/pagg.c:178:
+				printk(KERN_ERR "Initialization for PAGG"
+						" support failed (name=%s)"

WARNING:SPLIT_STRING: quoted string split across lines
#988: FILE: kernel/pagg.c:179:
+						" support failed (name=%s)"
+						" - memory allocation"

WARNING:SPLIT_STRING: quoted string split across lines
#989: FILE: kernel/pagg.c:180:
+						" - memory allocation"
+						" failure in kernel\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: kernel/pagg.c:183:
+^I^I^I^I/* $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1016: FILE: kernel/pagg.c:207:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1018: FILE: kernel/pagg.c:209:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1032: FILE: kernel/pagg.c:223:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pm_old->name"
#1038: FILE: kernel/pagg.c:229:
+	if (pm_old->name == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1047: FILE: kernel/pagg.c:238:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1050: FILE: kernel/pagg.c:241:
+^I^I^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1051: FILE: kernel/pagg.c:242:
+^I^I^I * Since the processes will not exit as a result of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: kernel/pagg.c:245:
+^I^I^I * information in the container referenced will be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1060: FILE: kernel/pagg.c:251:
+^I^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1074: FILE: kernel/pagg.c:265:
+			printk(KERN_INFO "Unregistering PAGG support for"

WARNING:SPLIT_STRING: quoted string split across lines
#1075: FILE: kernel/pagg.c:266:
+			printk(KERN_INFO "Unregistering PAGG support for"
+					" (name=%s)\n", pm_old->name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1081: FILE: kernel/pagg.c:272:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1084: FILE: kernel/pagg.c:275:
+	printk(KERN_WARNING "Attempt to unregister PAGG support (name=%s)"

WARNING:SPLIT_STRING: quoted string split across lines
#1085: FILE: kernel/pagg.c:276:
+	printk(KERN_WARNING "Attempt to unregister PAGG support (name=%s)"
+			" failed - not found\n", pm_old->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1086: FILE: kernel/pagg.c:277:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1090: FILE: kernel/pagg.c:281:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1100: FILE: kernel/pagg.c:291:
+^Iint  ^I^I   retcode = 0;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1102: FILE: kernel/pagg.c:293:
+	if (!task) {
+		return -EINVAL;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1110: FILE: kernel/pagg.c:301:
+^I^Istruct pagg_task_s *ppagg = list_entry(entry, $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pagg)...) over kmalloc(sizeof(struct pagg_task_s)...)
#1113: FILE: kernel/pagg.c:304:
+		pagg = kmalloc(sizeof(struct pagg_task_s), GFP_KERNEL);

WARNING:INDENTED_LABEL: labels should not be indented
#1132: FILE: kernel/pagg.c:323:
+  error_return:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1133: FILE: kernel/pagg.c:324:
+^I/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1141: FILE: kernel/pagg.c:332:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1160: FILE: kernel/pagg.c:351:
+^I^Istruct pagg_task_s *pagg = list_entry(entry, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1175: FILE: kernel/pagg.c:366:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: kernel/pagg.c:367:
+/* $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1189: FILE: kernel/pagg.c:380:
+	if (name == NULL) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1189: FILE: kernel/pagg.c:380:
+	if (name == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1193: FILE: kernel/pagg.c:384:
+	if (name[0] < 'A' || name[0] > 'z') {
+		return -EINVAL;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1205: FILE: kernel/pagg.c:396:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1207: FILE: kernel/pagg.c:398:
+^I^I^I * removed. At this point the read lock on the $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list->do_paggctl"
#1213: FILE: kernel/pagg.c:404:
+			if (list->do_paggctl == NULL)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1215: FILE: kernel/pagg.c:406:
+				retcode = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1223: FILE: kernel/pagg.c:414:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1226: FILE: kernel/pagg.c:417:
+^I/* $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1232: FILE: kernel/pagg.c:423:
+	return -ENOSYS;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000546002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 133 errors, 104 warnings, 39 checks, 1083 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000546002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
