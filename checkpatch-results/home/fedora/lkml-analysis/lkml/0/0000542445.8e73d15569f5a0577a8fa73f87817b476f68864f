WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
Currently, debug register settings in Linux are per-process. This is all that 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: arch/i386/kernel/dr_alloc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: arch/i386/kernel/dr_alloc.c:7:
+ * the Free Software Foundation; either version 2 of the License, or $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/i386/kernel/dr_alloc.c:9:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#136: FILE: arch/i386/kernel/dr_alloc.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: arch/i386/kernel/dr_alloc.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#137: FILE: arch/i386/kernel/dr_alloc.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#148: FILE: arch/i386/kernel/dr_alloc.c:28:
+unsigned long dr7_global_mask = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: arch/i386/kernel/dr_alloc.c:31:
+static inline void set_dr7_global_mask(int regnum) $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#153: FILE: arch/i386/kernel/dr_alloc.c:33:
+	switch(regnum) {
+		case 0: dr7_global_mask |= DR7_DR0_BITS; break;
+		case 1: dr7_global_mask |= DR7_DR1_BITS; break;
+		case 2: dr7_global_mask |= DR7_DR2_BITS; break;
+		case 3: dr7_global_mask |= DR7_DR3_BITS; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: arch/i386/kernel/dr_alloc.c:33:
+	switch(regnum) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#154: FILE: arch/i386/kernel/dr_alloc.c:34:
+		case 0: dr7_global_mask |= DR7_DR0_BITS; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: arch/i386/kernel/dr_alloc.c:35:
+		case 1: dr7_global_mask |= DR7_DR1_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#156: FILE: arch/i386/kernel/dr_alloc.c:36:
+		case 2: dr7_global_mask |= DR7_DR2_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: arch/i386/kernel/dr_alloc.c:37:
+		case 3: dr7_global_mask |= DR7_DR3_BITS; break;

WARNING:RETURN_VOID: void function return statements are not generally useful
#160: FILE: arch/i386/kernel/dr_alloc.c:40:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: arch/i386/kernel/dr_alloc.c:42:
+static inline void clear_dr7_global_mask(int regnum) $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#164: FILE: arch/i386/kernel/dr_alloc.c:44:
+	switch(regnum) {
+		case 0: dr7_global_mask &= ~DR7_DR0_BITS; break;
+		case 1: dr7_global_mask &= ~DR7_DR1_BITS; break;
+		case 2: dr7_global_mask &= ~DR7_DR2_BITS; break;
+		case 3: dr7_global_mask &= ~DR7_DR3_BITS; break;

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: arch/i386/kernel/dr_alloc.c:44:
+	switch(regnum) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#165: FILE: arch/i386/kernel/dr_alloc.c:45:
+		case 0: dr7_global_mask &= ~DR7_DR0_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#166: FILE: arch/i386/kernel/dr_alloc.c:46:
+		case 1: dr7_global_mask &= ~DR7_DR1_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#167: FILE: arch/i386/kernel/dr_alloc.c:47:
+		case 2: dr7_global_mask &= ~DR7_DR2_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#168: FILE: arch/i386/kernel/dr_alloc.c:48:
+		case 3: dr7_global_mask &= ~DR7_DR3_BITS; break;

WARNING:RETURN_VOID: void function return statements are not generally useful
#171: FILE: arch/i386/kernel/dr_alloc.c:51:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag == DR_ALLOC_GLOBAL'
#175: FILE: arch/i386/kernel/dr_alloc.c:55:
+	if ((flag == DR_ALLOC_GLOBAL) && (dr_list[regnum].flag == DR_UNUSED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dr_list[regnum].flag == DR_UNUSED'
#175: FILE: arch/i386/kernel/dr_alloc.c:55:
+	if ((flag == DR_ALLOC_GLOBAL) && (dr_list[regnum].flag == DR_UNUSED)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#180: FILE: arch/i386/kernel/dr_alloc.c:60:
+	}
+	else if ((dr_list[regnum].flag == DR_UNUSED) || (dr_list[regnum].flag == DR_LOCAL)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: arch/i386/kernel/dr_alloc.c:67:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: arch/i386/kernel/dr_alloc.c:71:
+	int i;
+	if (flag) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#205: FILE: arch/i386/kernel/dr_alloc.c:85:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#205: FILE: arch/i386/kernel/dr_alloc.c:85:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: arch/i386/kernel/dr_alloc.c:97:
+^Iif (! (--dr_list[regnum].use_count)) $

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#217: FILE: arch/i386/kernel/dr_alloc.c:97:
+	if (! (--dr_list[regnum].use_count)) 
 	    ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#220: FILE: arch/i386/kernel/dr_alloc.c:100:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: arch/i386/kernel/dr_alloc.c:102:
+static inline void dr_free_global(int regnum) $

WARNING:RETURN_VOID: void function return statements are not generally useful
#228: FILE: arch/i386/kernel/dr_alloc.c:108:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: arch/i386/kernel/dr_alloc.c:109:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: arch/i386/kernel/dr_alloc.c:114:
+	unsigned long flags;
+	spin_lock_irqsave(&dr_lock, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: arch/i386/kernel/dr_alloc.c:115:
+^Iif (regnum == DR_ANY) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: arch/i386/kernel/dr_alloc.c:128:
+	unsigned long flags;
+	spin_lock_irqsave(&dr_lock, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: arch/i386/kernel/dr_alloc.c:133:
+^Iif (dr_list[regnum].flag == DR_LOCAL) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: arch/i386/kernel/dr_alloc.c:135:
+^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: arch/i386/kernel/dr_alloc.c:145:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#267: FILE: arch/i386/kernel/dr_alloc.c:147:
+	for (i =0; i < DR_MAX; i++) {
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: arch/i386/kernel/dr_alloc.c:159:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#281: FILE: arch/i386/kernel/dr_alloc.c:161:
+	for (i =0; i < DR_MAX; i++) {
 	       ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#292: FILE: arch/i386/kernel/dr_alloc.c:172:
+			:"r" (val))
 			^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#295: FILE: arch/i386/kernel/dr_alloc.c:175:
+	switch(regnum) {
+		case 0: set_dr(0, val); break;
+		case 1: set_dr(1, val); break;
+		case 2: set_dr(2, val); break;
+		case 3: set_dr(3, val); break;
+		case 7: set_dr(7, val); break;
+		default: printk("write_dr: invalid debug register\n"); 

ERROR:SPACING: space required before the open parenthesis '('
#295: FILE: arch/i386/kernel/dr_alloc.c:175:
+	switch(regnum) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#296: FILE: arch/i386/kernel/dr_alloc.c:176:
+		case 0: set_dr(0, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#297: FILE: arch/i386/kernel/dr_alloc.c:177:
+		case 1: set_dr(1, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#298: FILE: arch/i386/kernel/dr_alloc.c:178:
+		case 2: set_dr(2, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#299: FILE: arch/i386/kernel/dr_alloc.c:179:
+		case 3: set_dr(3, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: arch/i386/kernel/dr_alloc.c:180:
+		case 7: set_dr(7, val); break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: arch/i386/kernel/dr_alloc.c:181:
+^I^Idefault: printk("write_dr: invalid debug register\n"); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: arch/i386/kernel/dr_alloc.c:181:
+		default: printk("write_dr: invalid debug register\n"); 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#301: FILE: arch/i386/kernel/dr_alloc.c:181:
+		default: printk("write_dr: invalid debug register\n"); 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_dr', this function's name, in a string
#301: FILE: arch/i386/kernel/dr_alloc.c:181:
+		default: printk("write_dr: invalid debug register\n"); 

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:RETURN_VOID: void function return statements are not generally useful
#305: FILE: arch/i386/kernel/dr_alloc.c:185:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#306: FILE: arch/i386/kernel/dr_alloc.c:186:
+}
+#undef set_dr

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#310: FILE: arch/i386/kernel/dr_alloc.c:190:
+			:"=r" (val))
 			^

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: arch/i386/kernel/dr_alloc.c:194:
+	unsigned long val = 0;
+	switch(regnum) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#314: FILE: arch/i386/kernel/dr_alloc.c:194:
+	switch(regnum) {
+		case 0: get_dr(0, val); break;
+		case 1: get_dr(1, val); break;
+		case 2: get_dr(2, val); break;
+		case 3: get_dr(3, val); break;
+		case 7: get_dr(7, val); break;
+		default: printk("read_dr: invalid debug register\n"); 

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: arch/i386/kernel/dr_alloc.c:194:
+	switch(regnum) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#315: FILE: arch/i386/kernel/dr_alloc.c:195:
+		case 0: get_dr(0, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#316: FILE: arch/i386/kernel/dr_alloc.c:196:
+		case 1: get_dr(1, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#317: FILE: arch/i386/kernel/dr_alloc.c:197:
+		case 2: get_dr(2, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#318: FILE: arch/i386/kernel/dr_alloc.c:198:
+		case 3: get_dr(3, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#319: FILE: arch/i386/kernel/dr_alloc.c:199:
+		case 7: get_dr(7, val); break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: arch/i386/kernel/dr_alloc.c:200:
+^I^Idefault: printk("read_dr: invalid debug register\n"); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: arch/i386/kernel/dr_alloc.c:200:
+		default: printk("read_dr: invalid debug register\n"); 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#320: FILE: arch/i386/kernel/dr_alloc.c:200:
+		default: printk("read_dr: invalid debug register\n"); 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_dr', this function's name, in a string
#320: FILE: arch/i386/kernel/dr_alloc.c:200:
+		default: printk("read_dr: invalid debug register\n"); 

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#325: FILE: arch/i386/kernel/dr_alloc.c:205:
+}
+#undef get_dr

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: arch/i386/kernel/dr_alloc.c:206:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#333: FILE: arch/i386/kernel/dr_alloc.c:213:
+	switch(condition & DR_TRAP_MASK) {
+		case DR_TRAP0: return 0;
+		case DR_TRAP1: return 1;
+		case DR_TRAP2: return 2;
+		case DR_TRAP3: return 3;
+		default: return -1;

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: arch/i386/kernel/dr_alloc.c:213:
+	switch(condition & DR_TRAP_MASK) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#344: FILE: arch/i386/kernel/dr_alloc.c:224:
+ * the debug trap occured.
                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: arch/i386/kernel/process.c:485:
+^I^Idr_dec_use_count(tsk->thread.debugreg[7]); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: arch/i386/kernel/process.c:561:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: arch/i386/kernel/process.c:562:
+^I * If this task is using debug registers, up the debug register $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: arch/i386/kernel/process.c:563:
+^I * use count. Note that debug register state could not have changed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: arch/i386/kernel/process.c:566:
+^I * caveat: We depend on the fact that do_fork does not fail if $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: arch/i386/kernel/process.c:567:
+^I * copy_thread is successful. Otherwise, we will need to call a $

WARNING:LINE_SPACING: Missing a blank line after declarations
#435: FILE: arch/i386/kernel/process.c:686:
+	unsigned long next_dr7 = next->debugreg[7];
+	if (next_dr7){

ERROR:SPACING: space required before the open brace '{'
#435: FILE: arch/i386/kernel/process.c:686:
+	if (next_dr7){

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#436: FILE: arch/i386/kernel/process.c:687:
+		if (DR7_L0(next_dr7)) loaddebug(next, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#437: FILE: arch/i386/kernel/process.c:688:
+		if (DR7_L1(next_dr7)) loaddebug(next, 1);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#438: FILE: arch/i386/kernel/process.c:689:
+		if (DR7_L2(next_dr7)) loaddebug(next, 2);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#439: FILE: arch/i386/kernel/process.c:690:
+		if (DR7_L3(next_dr7)) loaddebug(next, 3);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: arch/i386/kernel/process.c:706:
+#endif^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: arch/i386/kernel/ptrace.c:142:
+ * This routine decides if the ptrace request is for enabling or disabling $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: arch/i386/kernel/ptrace.c:147:
+ * allocate/free the 1st debug register and return. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: arch/i386/kernel/ptrace.c:151:
+ * directly. $

WARNING:TYPO_SPELLING: 'succeds' may be misspelled - perhaps 'succeeds'?
#489: FILE: arch/i386/kernel/ptrace.c:154:
+ * debug register always succeds and it doesn't check the return value of 
                          ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: arch/i386/kernel/ptrace.c:154:
+ * debug register always succeds and it doesn't check the return value of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: arch/i386/kernel/ptrace.c:155:
+ * ptrace. Now with this new LOCAL/GLOBAL DEBUG REGISTER ALLOCATION LOGIC, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: arch/i386/kernel/ptrace.c:157:
+ * register is already globally allocated. Since gdb fails to notice this $

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: arch/i386/kernel/ptrace.c:164:
+	int i, dr_shift = 1UL;
+	for (i = 0; i < DR_MAX; i++, dr_shift <<= 2) {

WARNING:TABSTOP: Statements should start on a tabstop
#520: FILE: arch/i386/kernel/ptrace.c:325:
+			  int retval;

WARNING:TABSTOP: Statements should start on a tabstop
#521: FILE: arch/i386/kernel/ptrace.c:326:
+			  if (addr == 7) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: arch/i386/kernel/ptrace.c:326:
+			  int retval;
+			  if (addr == 7) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: arch/i386/kernel/ptrace.c:332:
+^I^I^I  }^I$

WARNING:TABSTOP: Statements should start on a tabstop
#527: FILE: arch/i386/kernel/ptrace.c:332:
+			  }	

WARNING:BRACES: braces {} are not necessary for single statement blocks
#556: FILE: arch/i386/kernel/signal.c:705:
+		if (current->thread.debugreg[7]) {
+			write_dr(7, (read_dr(7) & dr7_global_mask) | current->thread.debugreg[7]);
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#561: FILE: arch/i386/kernel/signal.c:710:
+                __asm__("movl %0,%%db7" : : "r" (current->thread.debugreg[7]));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: arch/i386/kernel/signal.c:710:
+                __asm__("movl %0,%%db7" : : "r" (current->thread.debugreg[7]));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: arch/i386/kernel/traps.c:573:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: arch/i386/kernel/traps.c:577:
+^Iwrite_dr(7, (read_dr(7) & dr7_global_mask));^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#601: FILE: include/asm-i386/dr_alloc.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#616: FILE: include/asm-i386/dr_alloc.h:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#617: FILE: include/asm-i386/dr_alloc.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: include/asm-i386/dr_alloc.h:35:
+^I$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#637: FILE: include/asm-i386/dr_alloc.h:37:
+#define DR_ANY		DR_MAX + 1

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#643: FILE: include/asm-i386/dr_alloc.h:43:
+#define DR7_RW_SET(dr, regnum, rw)                              \
+       do {                                                    \
+               (dr) &= ~(0x3 << (16 + (4 * (regnum))));         \
+               (dr) |= (((rw) & 0x3) << (16 + (4 * (regnum)))); \
+       } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#643: FILE: include/asm-i386/dr_alloc.h:43:
+#define DR7_RW_SET(dr, regnum, rw)                              \
+       do {                                                    \
+               (dr) &= ~(0x3 << (16 + (4 * (regnum))));         \
+               (dr) |= (((rw) & 0x3) << (16 + (4 * (regnum)))); \
+       } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: include/asm-i386/dr_alloc.h:44:
+       do {                                                    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#644: FILE: include/asm-i386/dr_alloc.h:44:
+       do {                                                    \
+               (dr) &= ~(0x3 << (16 + (4 * (regnum))));         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: include/asm-i386/dr_alloc.h:45:
+               (dr) &= ~(0x3 << (16 + (4 * (regnum))));         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: include/asm-i386/dr_alloc.h:45:
+               (dr) &= ~(0x3 << (16 + (4 * (regnum))));         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: include/asm-i386/dr_alloc.h:46:
+               (dr) |= (((rw) & 0x3) << (16 + (4 * (regnum)))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: include/asm-i386/dr_alloc.h:46:
+               (dr) |= (((rw) & 0x3) << (16 + (4 * (regnum)))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: include/asm-i386/dr_alloc.h:47:
+       } while (0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: include/asm-i386/dr_alloc.h:50:
+       (((dr) >> (16 + (4 * (regnum)))) & 0x3)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#652: FILE: include/asm-i386/dr_alloc.h:52:
+#define DR7_LEN_SET(dr, regnum, rw)                             \
+       do {                                                    \
+               (dr) &= ~(0x3 << (18 + (4 * (regnum))));         \
+               (dr) |= (((rw) & 0x3) << (18 + (4 * (regnum)))); \
+       } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#652: FILE: include/asm-i386/dr_alloc.h:52:
+#define DR7_LEN_SET(dr, regnum, rw)                             \
+       do {                                                    \
+               (dr) &= ~(0x3 << (18 + (4 * (regnum))));         \
+               (dr) |= (((rw) & 0x3) << (18 + (4 * (regnum)))); \
+       } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: include/asm-i386/dr_alloc.h:53:
+       do {                                                    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#653: FILE: include/asm-i386/dr_alloc.h:53:
+       do {                                                    \
+               (dr) &= ~(0x3 << (18 + (4 * (regnum))));         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: include/asm-i386/dr_alloc.h:54:
+               (dr) &= ~(0x3 << (18 + (4 * (regnum))));         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: include/asm-i386/dr_alloc.h:54:
+               (dr) &= ~(0x3 << (18 + (4 * (regnum))));         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: include/asm-i386/dr_alloc.h:55:
+               (dr) |= (((rw) & 0x3) << (18 + (4 * (regnum)))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: include/asm-i386/dr_alloc.h:55:
+               (dr) |= (((rw) & 0x3) << (18 + (4 * (regnum)))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: include/asm-i386/dr_alloc.h:56:
+       } while (0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: include/asm-i386/dr_alloc.h:59:
+       (((dr) >> (18 + (4 * (regnum)))) & 0x3)$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#661: FILE: include/asm-i386/dr_alloc.h:61:
+#define DR7_G0(dr)    (((dr)>>1)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#661: FILE: include/asm-i386/dr_alloc.h:61:
+#define DR7_G0(dr)    (((dr)>>1)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#664: FILE: include/asm-i386/dr_alloc.h:64:
+#define DR7_G1(dr)    (((dr)>>3)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#664: FILE: include/asm-i386/dr_alloc.h:64:
+#define DR7_G1(dr)    (((dr)>>3)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#667: FILE: include/asm-i386/dr_alloc.h:67:
+#define DR7_G2(dr)    (((dr)>>5)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#667: FILE: include/asm-i386/dr_alloc.h:67:
+#define DR7_G2(dr)    (((dr)>>5)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#670: FILE: include/asm-i386/dr_alloc.h:70:
+#define DR7_G3(dr)    (((dr)>>7)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#670: FILE: include/asm-i386/dr_alloc.h:70:
+#define DR7_G3(dr)    (((dr)>>7)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#674: FILE: include/asm-i386/dr_alloc.h:74:
+#define DR7_L0(dr)    (((dr))&0x1)
                              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#677: FILE: include/asm-i386/dr_alloc.h:77:
+#define DR7_L1(dr)    (((dr)>>2)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#677: FILE: include/asm-i386/dr_alloc.h:77:
+#define DR7_L1(dr)    (((dr)>>2)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#680: FILE: include/asm-i386/dr_alloc.h:80:
+#define DR7_L2(dr)    (((dr)>>4)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#680: FILE: include/asm-i386/dr_alloc.h:80:
+#define DR7_L2(dr)    (((dr)>>4)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#683: FILE: include/asm-i386/dr_alloc.h:83:
+#define DR7_L3(dr)    (((dr)>>6)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#683: FILE: include/asm-i386/dr_alloc.h:83:
+#define DR7_L3(dr)    (((dr)>>6)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#687: FILE: include/asm-i386/dr_alloc.h:87:
+#define DR_IS_LOCAL(dr, num) ((dr) & (1UL << (num <<1)))
                                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#687: FILE: include/asm-i386/dr_alloc.h:87:
+#define DR_IS_LOCAL(dr, num) ((dr) & (1UL << (num <<1)))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#695: FILE: include/asm-i386/dr_alloc.h:95:
+#define SET_DR7(dr, regnum, access, len) \
+	DR7_RW_SET(dr, regnum, access); \
+	DR7_LEN_SET(dr, regnum, len); \
+	dr |= (2UL << regnum*2);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#695: FILE: include/asm-i386/dr_alloc.h:95:
+#define SET_DR7(dr, regnum, access, len) \
+	DR7_RW_SET(dr, regnum, access); \
+	DR7_LEN_SET(dr, regnum, len); \
+	dr |= (2UL << regnum*2);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#695: FILE: include/asm-i386/dr_alloc.h:95:
+#define SET_DR7(dr, regnum, access, len) \
+	DR7_RW_SET(dr, regnum, access); \
+	DR7_LEN_SET(dr, regnum, len); \
+	dr |= (2UL << regnum*2);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#695: FILE: include/asm-i386/dr_alloc.h:95:
+#define SET_DR7(dr, regnum, access, len) \
+	DR7_RW_SET(dr, regnum, access); \
+	DR7_LEN_SET(dr, regnum, len); \
+	dr |= (2UL << regnum*2);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#698: FILE: include/asm-i386/dr_alloc.h:98:
+	dr |= (2UL << regnum*2);
 	                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#701: FILE: include/asm-i386/dr_alloc.h:101:
+#define RESET_DR7(dr, regnum) \
+	dr &= ~(3UL << regnum*2); \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dr' may be better as '(dr)' to avoid precedence issues
#701: FILE: include/asm-i386/dr_alloc.h:101:
+#define RESET_DR7(dr, regnum) \
+	dr &= ~(3UL << regnum*2); \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regnum' may be better as '(regnum)' to avoid precedence issues
#701: FILE: include/asm-i386/dr_alloc.h:101:
+#define RESET_DR7(dr, regnum) \
+	dr &= ~(3UL << regnum*2); \
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#701: FILE: include/asm-i386/dr_alloc.h:101:
+#define RESET_DR7(dr, regnum) \
+	dr &= ~(3UL << regnum*2); \
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#702: FILE: include/asm-i386/dr_alloc.h:102:
+	dr &= ~(3UL << regnum*2); \
 	                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#709: FILE: include/asm-i386/dr_alloc.h:109:
+#define DR_TRAP_MASK ^I^I0xF$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#717: FILE: include/asm-i386/dr_alloc.h:117:
+extern int dr_trap(unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#717: FILE: include/asm-i386/dr_alloc.h:117:
+extern int dr_trap(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#718: FILE: include/asm-i386/dr_alloc.h:118:
+extern unsigned long dr_trap_addr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#718: FILE: include/asm-i386/dr_alloc.h:118:
+extern unsigned long dr_trap_addr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#719: FILE: include/asm-i386/dr_alloc.h:119:
+extern int dr_trap_type(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#719: FILE: include/asm-i386/dr_alloc.h:119:
+extern int dr_trap_type(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#721: FILE: include/asm-i386/dr_alloc.h:121:
+extern unsigned long read_dr(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#721: FILE: include/asm-i386/dr_alloc.h:121:
+extern unsigned long read_dr(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#722: FILE: include/asm-i386/dr_alloc.h:122:
+extern void write_dr(int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#722: FILE: include/asm-i386/dr_alloc.h:122:
+extern void write_dr(int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#722: FILE: include/asm-i386/dr_alloc.h:122:
+extern void write_dr(int, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#724: FILE: include/asm-i386/dr_alloc.h:124:
+extern int dr_alloc(int regnum, int flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: include/asm-i386/dr_alloc.h:125:
+extern int dr_free(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#726: FILE: include/asm-i386/dr_alloc.h:126:
+extern int dr_inc_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/asm-i386/dr_alloc.h:127:
+extern int dr_dec_use_count(unsigned long mask);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000542445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 89 errors, 47 warnings, 41 checks, 595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000542445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
