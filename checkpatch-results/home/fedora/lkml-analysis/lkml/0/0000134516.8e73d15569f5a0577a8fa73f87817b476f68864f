ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#52: FILE: arch/powerpc/platforms/cell/spufs/context.c:20:
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: arch/powerpc/platforms/cell/spufs/context.c:91:
+	struct mm_struct *mm;
+	spu_acquire_saved(ctx);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: arch/powerpc/platforms/cell/spufs/file.c:35:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: arch/powerpc/platforms/cell/spufs/file.c:94:
+	unsigned long offset = address - vma->vm_start;
+	offset += vma->vm_pgoff << PAGE_SHIFT;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#304: FILE: arch/powerpc/platforms/cell/spufs/file.c:112:
+static struct vm_operations_struct spufs_mem_mmap_vmops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: arch/powerpc/platforms/cell/spufs/file.c:146:
+	struct spufs_inode_info *i = SPUFS_I(inode);
+	file->private_data = i->i_ctx;

WARNING:SIZEOF_PARENTHESIS: sizeof lscsa->gprs should be sizeof(lscsa->gprs)
#368: FILE: arch/powerpc/platforms/cell/spufs/file.c:161:
+				      lscsa->gprs, sizeof lscsa->gprs);

WARNING:SIZEOF_PARENTHESIS: sizeof lscsa->gprs should be sizeof(lscsa->gprs)
#382: FILE: arch/powerpc/platforms/cell/spufs/file.c:175:
+	size = min_t(ssize_t, sizeof lscsa->gprs - *pos, size);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#396: FILE: arch/powerpc/platforms/cell/spufs/file.c:189:
+static struct file_operations spufs_regs_fops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: arch/powerpc/platforms/cell/spufs/file.c:197:
+spufs_fpcr_read(struct file *file, char __user * buffer,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#405: FILE: arch/powerpc/platforms/cell/spufs/file.c:198:
+		size_t size, loff_t * pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#421: FILE: arch/powerpc/platforms/cell/spufs/file.c:214:
+spufs_fpcr_write(struct file *file, const char __user * buffer,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: arch/powerpc/platforms/cell/spufs/file.c:215:
+		 size_t size, loff_t * pos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#442: FILE: arch/powerpc/platforms/cell/spufs/file.c:235:
+static struct file_operations spufs_fpcr_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#508: FILE: arch/powerpc/platforms/cell/spufs/file.c:307:
+ * ^ISame as wait_event_interruptible(), except that here$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#513: FILE: arch/powerpc/platforms/cell/spufs/file.c:312:
+#define spufs_wait(wq, condition)					\
+({									\
+	int __ret = 0;							\
+	DEFINE_WAIT(__wait);						\
+	for (;;) {							\
+		prepare_to_wait(&(wq), &__wait, TASK_INTERRUPTIBLE);	\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			spu_release(ctx);				\
+			schedule();					\
+			spu_acquire(ctx);				\
+			continue;					\
+		}							\
+		__ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	finish_wait(&(wq), &__wait);					\
+	__ret;								\
+})

WARNING:LINE_SPACING: Missing a blank line after declarations
#995: FILE: arch/powerpc/platforms/cell/spufs/file.c:728:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	spu_acquire_saved(ctx);

CHECK:SPACING: No space is necessary after a cast
#996: FILE: arch/powerpc/platforms/cell/spufs/file.c:729:
+	lscsa->decr.slot[0] = (u32) val;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1005: FILE: arch/powerpc/platforms/cell/spufs/file.c:738:
+	u64 ret;
+	spu_acquire_saved(ctx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1017: FILE: arch/powerpc/platforms/cell/spufs/file.c:750:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	spu_acquire_saved(ctx);

CHECK:SPACING: No space is necessary after a cast
#1018: FILE: arch/powerpc/platforms/cell/spufs/file.c:751:
+	lscsa->decr_status.slot[0] = (u32) val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1027: FILE: arch/powerpc/platforms/cell/spufs/file.c:760:
+	u64 ret;
+	spu_acquire_saved(ctx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1039: FILE: arch/powerpc/platforms/cell/spufs/file.c:772:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	spu_acquire_saved(ctx);

CHECK:SPACING: No space is necessary after a cast
#1040: FILE: arch/powerpc/platforms/cell/spufs/file.c:773:
+	lscsa->tag_mask.slot[0] = (u32) val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1049: FILE: arch/powerpc/platforms/cell/spufs/file.c:782:
+	u64 ret;
+	spu_acquire_saved(ctx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1061: FILE: arch/powerpc/platforms/cell/spufs/file.c:794:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	spu_acquire_saved(ctx);

CHECK:SPACING: No space is necessary after a cast
#1062: FILE: arch/powerpc/platforms/cell/spufs/file.c:795:
+	lscsa->event_mask.slot[0] = (u32) val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1071: FILE: arch/powerpc/platforms/cell/spufs/file.c:804:
+	u64 ret;
+	spu_acquire_saved(ctx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1083: FILE: arch/powerpc/platforms/cell/spufs/file.c:816:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	spu_acquire_saved(ctx);

CHECK:SPACING: No space is necessary after a cast
#1084: FILE: arch/powerpc/platforms/cell/spufs/file.c:817:
+	lscsa->srr0.slot[0] = (u32) val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1093: FILE: arch/powerpc/platforms/cell/spufs/file.c:826:
+	u64 ret;
+	spu_acquire_saved(ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1151: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:61:
+	int (*mbox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1151: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:61:
+	int (*mbox_read) (struct spu_context * ctx, u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1151: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:61:
+	int (*mbox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1152: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:62:
+	 u32(*mbox_stat_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1152: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:62:
+	 u32(*mbox_stat_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1152: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:62:
+	 u32(*mbox_stat_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1153: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:63:
+	int (*ibox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1153: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:63:
+	int (*ibox_read) (struct spu_context * ctx, u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1153: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:63:
+	int (*ibox_read) (struct spu_context * ctx, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1154: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:64:
+	int (*wbox_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1154: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:64:
+	int (*wbox_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1155: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:65:
+	 u32(*signal1_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1155: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:65:
+	 u32(*signal1_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1155: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:65:
+	 u32(*signal1_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1156: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:66:
+	void (*signal1_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1156: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:66:
+	void (*signal1_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1157: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:67:
+	 u32(*signal2_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1157: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:67:
+	 u32(*signal2_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1157: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:67:
+	 u32(*signal2_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1158: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:68:
+	void (*signal2_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1158: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:68:
+	void (*signal2_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1159: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:69:
+	void (*signal1_type_set) (struct spu_context * ctx, u64 val);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1159: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:69:
+	void (*signal1_type_set) (struct spu_context * ctx, u64 val);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1160: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:70:
+	 u64(*signal1_type_get) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1160: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:70:
+	 u64(*signal1_type_get) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1160: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:70:
+	 u64(*signal1_type_get) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1161: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:71:
+	void (*signal2_type_set) (struct spu_context * ctx, u64 val);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1161: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:71:
+	void (*signal2_type_set) (struct spu_context * ctx, u64 val);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1162: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:72:
+	 u64(*signal2_type_get) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1162: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:72:
+	 u64(*signal2_type_get) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1162: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:72:
+	 u64(*signal2_type_get) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1163: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:73:
+	 u32(*npc_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1163: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:73:
+	 u32(*npc_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1163: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:73:
+	 u32(*npc_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1164: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:74:
+	void (*npc_write) (struct spu_context * ctx, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1164: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:74:
+	void (*npc_write) (struct spu_context * ctx, u32 data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1165: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:75:
+	 u32(*status_read) (struct spu_context * ctx);

WARNING:SPACING: missing space after return type
#1165: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:75:
+	 u32(*status_read) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1165: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:75:
+	 u32(*status_read) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1166: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:76:
+	char*(*get_ls) (struct spu_context * ctx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1166: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:76:
+	char*(*get_ls) (struct spu_context * ctx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1180: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:98:
+struct spu_context * alloc_spu_context(struct address_space *local_store);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1220: FILE: arch/powerpc/platforms/cell/setup.c:76:
+	struct device_node *cpu;
+	cpu = spe->parent->parent;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: arch/powerpc/platforms/cell/setup.c:85:
+static void __init cell_spuprop_present(struct device_node *spe,
+				       const char *prop, int early)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1234: FILE: arch/powerpc/platforms/cell/setup.c:90:
+	} __attribute__((packed)) *p;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1240: FILE: arch/powerpc/platforms/cell/setup.c:96:
+	p = (void*)get_property(spe, prop, &proplen);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1241: FILE: arch/powerpc/platforms/cell/setup.c:97:
+	WARN_ON(proplen != sizeof (*p));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1249: FILE: arch/powerpc/platforms/cell/setup.c:105:
+	/* We need to call memory_present *before* the call to sparse_init,
+	   but we can initialize the page structs only *after* that call.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1250: FILE: arch/powerpc/platforms/cell/setup.c:106:
+	   Thus, we're being called twice. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1251: FILE: arch/powerpc/platforms/cell/setup.c:107:
+	if (early)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1253: FILE: arch/powerpc/platforms/cell/setup.c:109:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1255: FILE: arch/powerpc/platforms/cell/setup.c:111:
+		/* As the pages backing SPU LS and I/O are outside the range
+		   of regular memory, their page structs were not initialized

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1256: FILE: arch/powerpc/platforms/cell/setup.c:112:
+		   by free_area_init. Do it here instead. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1259: FILE: arch/powerpc/platforms/cell/setup.c:115:
+			struct page *page = pfn_to_page(pfn);
+			set_page_links(page, ZONE_DMA, node_id, pfn);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1271: FILE: arch/powerpc/platforms/cell/setup.c:127:
+	struct device_node *node;
+	for (node = of_find_node_by_type(NULL, "spe");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: arch/powerpc/platforms/cell/spufs/switch.c:2113:
+		panic("%s failed on SPU[%d] rc=%d.\n",
+		       __func__, spu->number, rc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1544: FILE: arch/powerpc/platforms/cell/spufs/switch.c:2211:
+	unsigned char *p;
+	for (p = csa->lscsa->ls; p < csa->lscsa->ls + LS_SIZE; p += PAGE_SIZE)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1631: FILE: arch/powerpc/platforms/cell/spu_base.c:132:
+	mb();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1747: FILE: arch/powerpc/platforms/cell/spu_base.c:503:
+	if (!error) {
[...]
-
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1756: FILE: arch/powerpc/platforms/cell/spu_base.c:511:
+static inline int spu_pending(struct spu *spu, u32 * stat)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1867: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:1:
+/* backing_ops.c - query/set operations on saved SPU context.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1886: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1887: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1902: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:36:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1905: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:39:
+#include <asm/mmu_context.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch0_cnt == 0'
#1924: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:58:
+	if ((ch0_cnt == 0) && !(ch0_data & event) && (ch1_data & event)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1924: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:58:
+	if ((ch0_cnt == 0) && !(ch0_data & event) && (ch1_data & event)) {
+		ctx->csa.spu_chnlcnt_RW[0] = 1;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1929: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:63:
+static int spu_backing_mbox_read(struct spu_context *ctx, u32 * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1956: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:90:
+static int spu_backing_ibox_read(struct spu_context *ctx, u32 * data)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctx->csa.prob.mb_stat_R'
#1985: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:119:
+	if ((ctx->csa.prob.mb_stat_R) & 0x00ff00) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1993: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:127:
+		BUG_ON(avail != (4 - slot));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2001: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:135:
+		/* make sure we get woken up by the interrupt when space
+		   becomes available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2001: FILE: arch/powerpc/platforms/cell/spufs/backing_ops.c:135:
+		   becomes available */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2124: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:1:
+/* hw_ops.c - query/set operations on active SPU context.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2140: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2141: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:18:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2156: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:33:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#2159: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:36:
+#include <asm/mmu_context.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2162: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:39:
+static int spu_hw_mbox_read(struct spu_context *ctx, u32 * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2184: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:61:
+static int spu_hw_ibox_read(struct spu_context *ctx, u32 * data)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2221: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:98:
+		/* make sure we get woken up by the interrupt when space
+		   becomes available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2221: FILE: arch/powerpc/platforms/cell/spufs/hw_ops.c:98:
+		   becomes available */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2335: FILE: arch/powerpc/platforms/cell/spufs/sched.c:1:
+/* sched.c - SPU scheduler.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2357: FILE: arch/powerpc/platforms/cell/spufs/sched.c:23:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2358: FILE: arch/powerpc/platforms/cell/spufs/sched.c:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2375: FILE: arch/powerpc/platforms/cell/spufs/sched.c:41:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#2376: FILE: arch/powerpc/platforms/cell/spufs/sched.c:42:
+#include <asm/mmu_context.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2381: FILE: arch/powerpc/platforms/cell/spufs/sched.c:47:
+#define SPU_BITMAP_SIZE (((MAX_PRIO+BITS_PER_LONG)/BITS_PER_LONG)+1)
                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2381: FILE: arch/powerpc/platforms/cell/spufs/sched.c:47:
+#define SPU_BITMAP_SIZE (((MAX_PRIO+BITS_PER_LONG)/BITS_PER_LONG)+1)
                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2381: FILE: arch/powerpc/platforms/cell/spufs/sched.c:47:
+#define SPU_BITMAP_SIZE (((MAX_PRIO+BITS_PER_LONG)/BITS_PER_LONG)+1)
                                                                  ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#2399: FILE: arch/powerpc/platforms/cell/spufs/sched.c:65:
+static struct spu_runqueue *spu_runqueues = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2413: FILE: arch/powerpc/platforms/cell/spufs/sched.c:79:
+	BUG_ON(rq->nr_idle <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2414: FILE: arch/powerpc/platforms/cell/spufs/sched.c:80:
+	BUG_ON(list_empty(&rq->idle_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2424: FILE: arch/powerpc/platforms/cell/spufs/sched.c:90:
+	BUG_ON(rq->nr_active <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2425: FILE: arch/powerpc/platforms/cell/spufs/sched.c:91:
+	BUG_ON(list_empty(&rq->active_list));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2448: FILE: arch/powerpc/platforms/cell/spufs/sched.c:114:
+		int best = sched_find_first_bit(rq->prio.bitmap);
+		if (best < MAX_PRIO) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2450: FILE: arch/powerpc/platforms/cell/spufs/sched.c:116:
+			wait_queue_head_t *wq = &rq->prio.waitq[best];
+			wake_up_interruptible_nr(wq, 1);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2466: FILE: arch/powerpc/platforms/cell/spufs/sched.c:132:
+		pr_debug("%s: pid=%d prio=%d\n", __FUNCTION__,

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#2473: FILE: arch/powerpc/platforms/cell/spufs/sched.c:139:
+	if (!waitqueue_active(wq))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2489: FILE: arch/powerpc/platforms/cell/spufs/sched.c:155:
+	__cpus_setall(&mm->cpu_vm_mask, NR_CPUS);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2491: FILE: arch/powerpc/platforms/cell/spufs/sched.c:157:
+	__cpus_setall(&mm->cpu_vm_mask, NR_CPUS+1); /* is this ok? */
 	                                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2491: FILE: arch/powerpc/platforms/cell/spufs/sched.c:157:
+	__cpus_setall(&mm->cpu_vm_mask, NR_CPUS+1); /* is this ok? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2497: FILE: arch/powerpc/platforms/cell/spufs/sched.c:163:
+	pr_debug("%s: pid=%d SPU=%d\n", __FUNCTION__, current->pid,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2509: FILE: arch/powerpc/platforms/cell/spufs/sched.c:175:
+	mb();

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2515: FILE: arch/powerpc/platforms/cell/spufs/sched.c:181:
+	pr_debug("%s: unbind pid=%d SPU=%d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2550: FILE: arch/powerpc/platforms/cell/spufs/sched.c:216:
+					 __FUNCTION__, spu->pid, spu->number);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2572: FILE: arch/powerpc/platforms/cell/spufs/sched.c:238:
+				/* Fall through. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2575: FILE: arch/powerpc/platforms/cell/spufs/sched.c:241:
+				break;
+			} else {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2578: FILE: arch/powerpc/platforms/cell/spufs/sched.c:244:
+				yield();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2579: FILE: arch/powerpc/platforms/cell/spufs/sched.c:245:
+				if (signal_pending(current)) {
+					return NULL;
+				}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2588: FILE: arch/powerpc/platforms/cell/spufs/sched.c:254:
+				if ((spu = preempt_active(rq)) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'breifly' may be misspelled - perhaps 'briefly'?
#2647: FILE: arch/powerpc/platforms/cell/spufs/sched.c:313:
+ *	The rq->sem is breifly held (inside or outside a
   	               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctx->state == SPU_STATE_RUNNABLE'
#2687: FILE: arch/powerpc/platforms/cell/spufs/sched.c:353:
+	if ((ctx->state == SPU_STATE_RUNNABLE) &&
+	    (sched_find_first_bit(spu->rq->prio.bitmap) <= current->prio)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2689: FILE: arch/powerpc/platforms/cell/spufs/sched.c:355:
+		pr_debug("%s: yielding SPU %d\n", __FUNCTION__, spu->number);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2702: FILE: arch/powerpc/platforms/cell/spufs/sched.c:368:
+	rq = spu_runqueues = kmalloc(sizeof(struct spu_runqueue), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*spu_runqueues)...) over kmalloc(sizeof(struct spu_runqueue)...)
#2702: FILE: arch/powerpc/platforms/cell/spufs/sched.c:368:
+	rq = spu_runqueues = kmalloc(sizeof(struct spu_runqueue), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2704: FILE: arch/powerpc/platforms/cell/spufs/sched.c:370:
+		printk(KERN_WARNING "%s: Unable to allocate runqueues.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2705: FILE: arch/powerpc/platforms/cell/spufs/sched.c:371:
+		       __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2725: FILE: arch/powerpc/platforms/cell/spufs/sched.c:391:
+		pr_debug("%s: adding SPU[%d]\n", __FUNCTION__, spu->number);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2730: FILE: arch/powerpc/platforms/cell/spufs/sched.c:396:
+		printk(KERN_WARNING "%s: No available SPUs.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2730: FILE: arch/powerpc/platforms/cell/spufs/sched.c:396:
+		printk(KERN_WARNING "%s: No available SPUs.\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2743: FILE: arch/powerpc/platforms/cell/spufs/sched.c:409:
+		printk(KERN_WARNING "%s: no runqueues!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2743: FILE: arch/powerpc/platforms/cell/spufs/sched.c:409:
+		printk(KERN_WARNING "%s: no runqueues!\n", __FUNCTION__);

WARNING:SPACING: Unnecessary space before function pointer name
#2824: FILE: include/asm-powerpc/spu.h:139:
+	void (* wbox_callback)(struct spu *spu);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2824: FILE: include/asm-powerpc/spu.h:139:
+	void (* wbox_callback)(struct spu *spu);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#2825: FILE: include/asm-powerpc/spu.h:140:
+	void (* ibox_callback)(struct spu *spu);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#2825: FILE: include/asm-powerpc/spu.h:140:
+	void (* ibox_callback)(struct spu *spu);
 	      ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2847: FILE: include/asm-powerpc/spu_csa.h:244:
+	spinlock_t register_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 92 warnings, 27 checks, 2682 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
