WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
> > > Speaking of sddr09 devices (of which I possess one), what's the current

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: isd200.c:504:
+                                                                 sg_address(sg[i]),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: isd200.c:504:
+                                                                 sg_address(sg[i]),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: isd200.c:510:
+                                                                 sg_address(sg[i]),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: isd200.c:510:
+                                                                 sg_address(sg[i]),$

CHECK:SPACING: No space is necessary after a cast
#176: FILE: protocol.c:68:
+		return (void *) sg_address(sg[0]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#253: FILE: scsiglue.c:604:
+	  *(char*)(sg_address(sg[db])) = 0;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#273: FILE: scsiglue.c:797:
+		 char *dst = sg_address(sg[db]) + di;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#317: FILE: sddr09.c:1094:
+		int alloc_req = (i < alloc_blocks-1 ? 1 << 17 : alloc_len);
 		                                 ^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#319: FILE: sddr09.c:1096:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,3)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: sddr09.c:1096:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,3)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: sddr09.c:1096:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,3)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#319: FILE: sddr09.c:1096:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,3)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#371: FILE: sddr09.c:1154:
+		ptr = sg_address(sg[i>>11]) + ((i&0x7ff)<<6);
 		                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#371: FILE: sddr09.c:1154:
+		ptr = sg_address(sg[i>>11]) + ((i&0x7ff)<<6);
 		                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#371: FILE: sddr09.c:1154:
+		ptr = sg_address(sg[i>>11]) + ((i&0x7ff)<<6);
 		                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#475: FILE: usb.c:292:
+			memcpy(sg_address(sg[i]), data+transferred, amt);
 			                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ss->htmplt
#607: FILE: usb.c:1065:
+		result = scsi_register_module(MODULE_SCSI_HA, &(ss->htmplt));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around next->htmplt
#616: FILE: usb.c:1169:
+		scsi_unregister_module(MODULE_SCSI_HA, &(next->htmplt));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#637: FILE: usb.h:211:
+#define sg_address(sg)		(page_address((sg).page) + (sg).offset)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 6 warnings, 9 checks, 509 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
