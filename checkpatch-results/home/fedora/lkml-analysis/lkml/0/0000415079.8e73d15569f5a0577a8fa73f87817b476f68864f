WARNING:REPEATED_WORD: Possible repeated word: 'returns'
#81: FILE: mm/slab.c:97:
+ * - the behaviour is bad if get_free_pages returns returns

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: mm/slab.c:98:
+ *   memory from the another node: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'chache' may be misspelled - perhaps 'cache'?
#86: FILE: mm/slab.c:102:
+ * - determine the optimal placement for the chache spinlock:
                                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: mm/slab.c:111:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: mm/slab.c:111:
+ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: mm/slab.c:225:
+ * ^Ikmalloc general cache, otherwise the bootstrap will crash.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#153: FILE: mm/slab.c:259:
+#define	STATS_INC_ACTIVE(x)	do { (x)->num_active++; \
+				     if ((x)->num_active > (x)->high_mark) \
+					(x)->high_mark = (x)->num_active; \
+				} while (0)

WARNING:TABSTOP: Statements should start on a tabstop
#154: FILE: mm/slab.c:260:
+				     if ((x)->num_active > (x)->high_mark) \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: mm/slab.c:358:
+#define STATS_INC_FOREIGN(x)^Ido { } while (0)^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#288: FILE: mm/slab.c:547:
+	memsize = sizeof(void*)*limit+sizeof(struct array_cache);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#288: FILE: mm/slab.c:547:
+	memsize = sizeof(void*)*limit+sizeof(struct array_cache);
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#288: FILE: mm/slab.c:547:
+	memsize = sizeof(void*)*limit+sizeof(struct array_cache);
 	                             ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: mm/slab.c:650:
+ * ^Ifor the object.$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#381: FILE: mm/slab.c:655:
+	return (((unsigned long)obj)/4/1024/1024)%MAX_NUMNODES;
 	                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#381: FILE: mm/slab.c:655:
+	return (((unsigned long)obj)/4/1024/1024)%MAX_NUMNODES;
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#381: FILE: mm/slab.c:655:
+	return (((unsigned long)obj)/4/1024/1024)%MAX_NUMNODES;
 	                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#381: FILE: mm/slab.c:655:
+	return (((unsigned long)obj)/4/1024/1024)%MAX_NUMNODES;
 	                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#384: FILE: mm/slab.c:658:
+static inline struct array_cache * ac_data_ptr(kmem_cache_t *cachep, void *objp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#391: FILE: mm/slab.c:665:
+}
+#define DEFINE_NUMALIST_PTR(x)	\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#391: FILE: mm/slab.c:665:
+#define DEFINE_NUMALIST_PTR(x)	\
+	struct kmem_list3 *x

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#394: FILE: mm/slab.c:668:
+#define set_numalist_ptr(x, cachep, objp) \
+		do { x = &cachep->lists[ptr_to_node(objp)]; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#394: FILE: mm/slab.c:668:
+#define set_numalist_ptr(x, cachep, objp) \
+		do { x = &cachep->lists[ptr_to_node(objp)]; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#395: FILE: mm/slab.c:669:
+		do { x = &cachep->lists[ptr_to_node(objp)]; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#396: FILE: mm/slab.c:670:
+#define set_numalist_cur(x, cachep) \
+		do { x = &cachep->lists[__cpu_to_node(smp_processor_id())]; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#396: FILE: mm/slab.c:670:
+#define set_numalist_cur(x, cachep) \
+		do { x = &cachep->lists[__cpu_to_node(smp_processor_id())]; } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#397: FILE: mm/slab.c:671:
+		do { x = &cachep->lists[__cpu_to_node(smp_processor_id())]; } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: mm/slab.c:679:
+#define DEFINE_NUMALIST_PTR(x)^I$

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: mm/slab.c:680:
+#define set_numalist_ptr(x, cachep, objp)	do { } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#407: FILE: mm/slab.c:681:
+#define set_numalist_cur(x, cachep)^I ^Ido { } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: mm/slab.c:681:
+#define set_numalist_cur(x, cachep)	 	do { } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: mm/slab.c:683:
+#define access_numalist_ptr(cachep, x)^I ^I(&(cachep->lists[0]))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->lists[0]
#409: FILE: mm/slab.c:683:
+#define access_numalist_ptr(cachep, x)	 	(&(cachep->lists[0]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#409: FILE: mm/slab.c:683:
+#define access_numalist_ptr(cachep, x)	 	(&(cachep->lists[0]))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#423: FILE: mm/slab.c:697:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#423: FILE: mm/slab.c:697:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#423: FILE: mm/slab.c:697:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#423: FILE: mm/slab.c:697:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#438: FILE: mm/slab.c:764:
+		void * ptr2;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#450: FILE: mm/slab.c:772:
+		BUG_ON(cache_cache.cpudata[smp_processor_id()].native != &initarray_cache.cache);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: mm/slab.c:784:
+		BUG_ON(malloc_sizes[0].cs_cachep->cpudata[smp_processor_id()].native !=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#492: FILE: mm/slab.c:1120:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#492: FILE: mm/slab.c:1120:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#492: FILE: mm/slab.c:1120:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#492: FILE: mm/slab.c:1120:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: mm/slab.c:1143:
+			ac_data(cachep) = alloc_acdata(1,1);
 			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#512: FILE: mm/slab.c:1146:
+					alloc_acdata(1,1);
 					              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#528: FILE: mm/slab.c:1155:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#528: FILE: mm/slab.c:1155:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#528: FILE: mm/slab.c:1155:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#528: FILE: mm/slab.c:1155:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#530: FILE: mm/slab.c:1157:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3 +
 					                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#531: FILE: mm/slab.c:1158:
+					i*HZ/10;
 					 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#531: FILE: mm/slab.c:1158:
+					i*HZ/10;
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#555: FILE: mm/slab.c:1263:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#555: FILE: mm/slab.c:1263:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#555: FILE: mm/slab.c:1263:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#555: FILE: mm/slab.c:1263:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:SPACING: space required before the open parenthesis '('
#556: FILE: mm/slab.c:1264:
+		for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: mm/slab.c:1274:
+				BUG();

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#601: FILE: mm/slab.c:1343:
+		for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#615: FILE: mm/slab.c:1445:
+static struct kmem_list3 *cache_grow (kmem_cache_t * cachep, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#615: FILE: mm/slab.c:1445:
+static struct kmem_list3 *cache_grow (kmem_cache_t * cachep, int flags)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#705: FILE: mm/slab.c:1686:
+					slabp->s_mem + slabp->free*cachep->objsize;
 					                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#706: FILE: mm/slab.c:1687:
+			slabp->free=slab_bufctl(slabp)[slabp->free];
 			           ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#737: FILE: mm/slab.c:1773:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#737: FILE: mm/slab.c:1773:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#737: FILE: mm/slab.c:1773:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#755: FILE: mm/slab.c:1782:
+		struct slab* slabp;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#767: FILE: mm/slab.c:1789:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#767: FILE: mm/slab.c:1789:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: mm/slab.c:1794:
+^I$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#798: FILE: mm/slab.c:1814:
+			list_add_tail(&slabp->list, &(access_numalist_ptr(cachep, l3)->slabs_partial));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: mm/slab.c:2040:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#919: FILE: mm/slab.c:2044:
+		struct array_cache* ccold;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: mm/slab.c:2045:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#962: FILE: mm/slab.c:2143:
+		if(time_after(access_numalist_ptr(searchp, l3)->next_reap, jiffies))

ERROR:SPACING: space required before the open parenthesis '('
#967: FILE: mm/slab.c:2147:
+		if(time_after(access_numalist_ptr(searchp, l3)->next_reap, jiffies)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#967: FILE: mm/slab.c:2147:
+		if(time_after(access_numalist_ptr(searchp, l3)->next_reap, jiffies)) {
 			goto next_unlock;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: mm/slab.c:2270:
+	seq_printf(m, "%-17s : %6u %6u %4u 0x%04x %6u %4u %4u",
+		name, cachep->objsize, cachep->num, (1<<cachep->gfporder),

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1077: FILE: mm/slab.c:2270:
+		name, cachep->objsize, cachep->num, (1<<cachep->gfporder),
 		                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1085: FILE: mm/slab.c:2278:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1089: FILE: mm/slab.c:2282:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1089: FILE: mm/slab.c:2282:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1089: FILE: mm/slab.c:2282:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1089: FILE: mm/slab.c:2282:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1096: FILE: mm/slab.c:2289:
+		list_for_each(q,&l3->slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1096: FILE: mm/slab.c:2289:
+		list_for_each(q,&l3->slabs_full) {
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1099: FILE: mm/slab.c:2292:
+				BUG();

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1103: FILE: mm/slab.c:2296:
+		list_for_each(q,&l3->slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1103: FILE: mm/slab.c:2296:
+		list_for_each(q,&l3->slabs_partial) {
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1105: FILE: mm/slab.c:2298:
+			BUG_ON(slabp->inuse == cachep->num || !slabp->inuse);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1109: FILE: mm/slab.c:2302:
+		list_for_each(q,&l3->slabs_free) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1109: FILE: mm/slab.c:2302:
+		list_for_each(q,&l3->slabs_free) {
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1112: FILE: mm/slab.c:2305:
+				BUG();

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1115: FILE: mm/slab.c:2308:
+		num_slabs+=active_slabs;
 		         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1116: FILE: mm/slab.c:2309:
+		num_objs = num_slabs*cachep->num;
 		                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1118: FILE: mm/slab.c:2311:
+		BUG_ON(num_objs - active_objs != l3->free_objects);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: mm/slab.c:2313:
+		seq_printf(m, "# Node %2u         : %6lu %6lu %8lu %8lu",
+			i, active_slabs, num_slabs, active_objs, num_objs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1122: FILE: mm/slab.c:2315:
+		BUG_ON(active_objs != l3->num_active);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: mm/slab.c:2317:
+^I^Iseq_printf(m, " %8lu %8lu %6lu", l3->num_allocations, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: mm/slab.c:2318:
+		seq_printf(m, " %8lu %8lu %6lu", l3->num_allocations, 
+					l3->high_mark, l3->grown);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1150: FILE: mm/slab.c:2324:
+	for (i=0;i<NR_CPUS;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1150: FILE: mm/slab.c:2324:
+	for (i=0;i<NR_CPUS;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1150: FILE: mm/slab.c:2324:
+	for (i=0;i<NR_CPUS;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1150: FILE: mm/slab.c:2324:
+	for (i=0;i<NR_CPUS;i++) {
 	                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1150: FILE: mm/slab.c:2324:
+	for (i=0;i<NR_CPUS;i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1157: FILE: mm/slab.c:2329:
+^I^I^I^Ii, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1157: FILE: mm/slab.c:2329:
+		seq_printf(m, "# Cpu %2i          : %6u %6u %6u %6u",
+				i, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1164: FILE: mm/slab.c:2336:
+		seq_printf(m, " %6u",
+				atomic_read(&cachep->foreign[i]));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415079.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 24 warnings, 27 checks, 1068 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415079.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
