WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
zero-page, both buddies are zero'd, one is allocated and the other is placed

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#88: FILE: include/linux/mmzone.h:286:
+#define inc_zeroblock_count(zone, order, flags) \
+	flags & __GFP_ZERO ? zone->zeroblock_count[order]++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#88: FILE: include/linux/mmzone.h:286:
+#define inc_zeroblock_count(zone, order, flags) \
+	flags & __GFP_ZERO ? zone->zeroblock_count[order]++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#88: FILE: include/linux/mmzone.h:286:
+#define inc_zeroblock_count(zone, order, flags) \
+	flags & __GFP_ZERO ? zone->zeroblock_count[order]++ : 0

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: mm/page_alloc.c:157:
+	if (test_bit(bitidx+3, zone->free_area_usemap)) return ALLOC_USERZERO;
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#143: FILE: mm/page_alloc.c:157:
+	if (test_bit(bitidx+3, zone->free_area_usemap)) return ALLOC_USERZERO;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#152: FILE: mm/page_alloc.c:176:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: mm/page_alloc.c:184:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#168: FILE: mm/page_alloc.c:192:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: mm/page_alloc.c:195:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#174: FILE: mm/page_alloc.c:198:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: mm/page_alloc.c:199:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#176: FILE: mm/page_alloc.c:200:
+		set_bit(bitidx+3, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: mm/page_alloc.c:208:
+	clear_bit(bitidx+3, zone->free_area_usemap);
 	                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#197: FILE: mm/page_alloc.c:372:
+	if (alloctype == ALLOC_USERZERO) alloctype = ALLOC_KERNNORCLM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: mm/page_alloc.c:569:
+static struct page *__rmqueue(struct zone *zone, unsigned int order, int flags,
+				unsigned long *irq_flags)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#220: FILE: mm/page_alloc.c:585:
+	}
+	else if (flags & __GFP_USERRCLM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#233: FILE: mm/page_alloc.c:660:
+			int zero_order=order;
 			              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: mm/page_alloc.c:667:
+^I^I^I * the zero page. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: mm/page_alloc.c:673:
+^I^I^I * pages to leak into the USERRCLM and KERNRCLM $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: mm/page_alloc.c:684:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#257: FILE: mm/page_alloc.c:684:
+
+			

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#263: FILE: mm/page_alloc.c:690:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#270: FILE: mm/page_alloc.c:697:
+		int reserve_type=start_alloctype;
 		                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#286: FILE: mm/page_alloc.c:711:
+			prep_zero_page(page, MAX_ORDER-1, flags);
 			                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#287: FILE: mm/page_alloc.c:712:
+			inc_zeroblock_count(zone, MAX_ORDER-1, flags);
 			                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#290: FILE: mm/page_alloc.c:715:
+			reserve_type=ALLOC_KERNNORCLM;
 			            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: mm/page_alloc.c:719:
+^I^Ilist_add(&page->lru, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: mm/page_alloc.c:720:
+		list_add(&page->lru, 
+			&(zone->free_area_lists[start_alloctype][MAX_ORDER-1].free_list));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#295: FILE: mm/page_alloc.c:720:
+			&(zone->free_area_lists[start_alloctype][MAX_ORDER-1].free_list));
 			                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[start_alloctype][MAX_ORDER-1].free_list
#295: FILE: mm/page_alloc.c:720:
+			&(zone->free_area_lists[start_alloctype][MAX_ORDER-1].free_list));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#323: FILE: mm/page_alloc.c:949:
+	int need_zero=0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#331: FILE: mm/page_alloc.c:964:
+			if (gfp_flags & __GFP_ZERO) need_zero=1;
 			                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#331: FILE: mm/page_alloc.c:964:
+			if (gfp_flags & __GFP_ZERO) need_zero=1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: mm/page_alloc.c:2062:
+		memset((unsigned long *)zone->zeroblock_count, 0,
+					sizeof(zone->zeroblock_count));

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#372: FILE: mm/page_alloc.c:2253:
+		seq_printf(m, "Zeroblock count ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#373: FILE: mm/page_alloc.c:2254:
+		for (i=0; i < MAX_ORDER; i++) {
 		      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#373: FILE: mm/page_alloc.c:2254:
+		for (i=0; i < MAX_ORDER; i++) {
+			seq_printf(m, "%6lu ", zone->zeroblock_count[i]);
+		}

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#376: FILE: mm/page_alloc.c:2257:
+		seq_printf(m, "\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 4 warnings, 20 checks, 295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
