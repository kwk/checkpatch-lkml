WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: FILE: Makefile:4:
+EXTRAVERSION = .2
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#240: FILE: arch/sparc64/mm/init.c:884:
+	avoid_start = avoid_end = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#261: FILE: arch/sparc64/mm/init.c:905:
+		trim_low = start = pavail[i].phys_addr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#262: FILE: arch/sparc64/mm/init.c:906:
+		trim_high = end = start + pavail[i].reg_size;

WARNING:SIZEOF_PARENTHESIS: sizeof *h should be sizeof(*h)
#565: FILE: drivers/block/aoe/aoecmd.c:123:
+	skb_put(skb, sizeof *h + sizeof *ah);

WARNING:SIZEOF_PARENTHESIS: sizeof *h should be sizeof(*h)
#582: FILE: drivers/block/aoe/aoecmd.c:206:
+		skb_put(skb, sizeof *h + sizeof *ch);

WARNING:SIZEOF_PARENTHESIS: sizeof *h should be sizeof(*h)
#600: FILE: drivers/block/aoe/aoecmd.c:700:
+	skb_put(skb, sizeof *h + sizeof *ah);

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: drivers/char/mem.c:649:
+        ^Iif (zeromap_page_range(vma, addr, count, PAGE_COPY))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#627: FILE: drivers/char/mem.c:649:
+        ^Iif (zeromap_page_range(vma, addr, count, PAGE_COPY))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: drivers/char/mem.c:649:
+        ^Iif (zeromap_page_range(vma, addr, count, PAGE_COPY))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: drivers/char/mem.c:722:
+	err = zeromap_page_range(vma, vma->vm_start,
+			vma->vm_end - vma->vm_start, vma->vm_page_prot);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#645: FILE: drivers/char/mem.c:723:
+	BUG_ON(err == -EEXIST);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#716: FILE: drivers/i2c/chips/ds1337.c:350:
+		u8 buf[1+16];	/* First byte is interpreted as address */
 		        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#725: FILE: drivers/i2c/chips/ds1337.c:359:
+		buf[1+DS1337_REG_DAY] = 1;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#726: FILE: drivers/i2c/chips/ds1337.c:360:
+		buf[1+DS1337_REG_DATE] = 1;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#727: FILE: drivers/i2c/chips/ds1337.c:361:
+		buf[1+DS1337_REG_MONTH] = 1;
 		     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#766: FILE: drivers/ieee1394/ohci1394.c:3522:
+	 * to save power on laptops */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#780: FILE: drivers/infiniband/ulp/srp/ib_srp.c:1882:
+	srp_dev->fmr_page_mask  = ~((u64) srp_dev->fmr_page_size - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#827: FILE: drivers/media/dvb/dvb-core/dvb_net.c:620:
+				printk(KERN_WARNING "%lu: CRC32 check FAILED: %08x / %08x, SNDU len %d type %#x, ts_remain %d, next 2: %x.\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#929: FILE: drivers/net/bonding/bond_main.c:3678:
+			if (netif_carrier_ok(bond->dev)) {
 				mii->val_out = BMSR_LSTATUS;
 			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#955: FILE: drivers/net/wireless/zd1211rw/zd_ieee80211.h:67:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1015: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:736:
+} __attribute__((packed));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1035: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:895:
+	if (skb->len < ZD_PLCP_HEADER_SIZE + IEEE80211_1ADDR_LEN +
+	               IEEE80211_FCS_LEN + sizeof(struct rx_status))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1036: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:896:
+^I               IEEE80211_FCS_LEN + sizeof(struct rx_status))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:899:
+		dev_dbg_f(zd_mac_dev(mac), "Packet with length %u to small.\n",
+			 skb->len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1057: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:911:
+^I^I        (IEEE80211_FCS_LEN + sizeof(struct rx_status)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1061: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:914:
+^I^I         status->signal_strength);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:914:
+	update_qual_rssi(mac, skb->data, skb->len, stats.signal,
+		         status->signal_strength);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1110: FILE: drivers/net/wireless/zd1211rw/zd_mac.c:952:
+	if (!skb) {
+		dev_warn(zd_mac_dev(mac), "Could not allocate skb.\n");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1130: FILE: drivers/net/wireless/zd1211rw/zd_mac.h:85:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1139: FILE: drivers/net/wireless/zd1211rw/zd_mac.h:96:
+} __attribute__((packed));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1172: FILE: drivers/net/wireless/zd1211rw/zd_usb.c:602:
+			zd_mac_rx_irq(mac, buffer+l, k);
 			                         ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1192: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:77:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1198: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:82:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1204: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:87:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1213: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:104:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1222: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:121:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1228: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:126:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1237: FILE: drivers/net/wireless/zd1211rw/zd_usb.h:134:
+} __attribute__((packed));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1275: FILE: fs/cramfs/inode.c:485:
+			printk(KERN_ERR "cramfs: bad compressed blocksize %u\n", compr_len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1289: FILE: fs/ext2/dir.c:373:
+			ext2_error(dir->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: fs/ext2/dir.c:374:
+			ext2_error(dir->i_sb, __FUNCTION__,
+				"dir %lu size %lld exceeds block count %llu",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1321: FILE: fs/ext3/namei.c:556:
+		if (!ext3_check_dir_entry("htree_dirblock_to_tree", dir, de, bh,
+					(block<<EXT3_BLOCK_SIZE_BITS(dir->i_sb))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1321: FILE: fs/ext3/namei.c:556:
+					(block<<EXT3_BLOCK_SIZE_BITS(dir->i_sb))
 					      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#1322: FILE: fs/ext3/namei.c:557:
+						+((char *)de - bh->b_data))) {
 						^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1326: FILE: fs/ext3/namei.c:561:
+			brelse (bh);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1381: FILE: include/asm-arm/unistd.h:350:
+#define __NR_openat			(__NR_SYSCALL_BASE+322)
                    			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1382: FILE: include/asm-arm/unistd.h:351:
+#define __NR_mkdirat			(__NR_SYSCALL_BASE+323)
                     			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1383: FILE: include/asm-arm/unistd.h:352:
+#define __NR_mknodat			(__NR_SYSCALL_BASE+324)
                     			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1384: FILE: include/asm-arm/unistd.h:353:
+#define __NR_fchownat			(__NR_SYSCALL_BASE+325)
                      			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1385: FILE: include/asm-arm/unistd.h:354:
+#define __NR_futimesat			(__NR_SYSCALL_BASE+326)
                       			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1386: FILE: include/asm-arm/unistd.h:355:
+#define __NR_fstatat64			(__NR_SYSCALL_BASE+327)
                       			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1387: FILE: include/asm-arm/unistd.h:356:
+#define __NR_unlinkat			(__NR_SYSCALL_BASE+328)
                      			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1388: FILE: include/asm-arm/unistd.h:357:
+#define __NR_renameat			(__NR_SYSCALL_BASE+329)
                      			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1389: FILE: include/asm-arm/unistd.h:358:
+#define __NR_linkat			(__NR_SYSCALL_BASE+330)
                    			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1390: FILE: include/asm-arm/unistd.h:359:
+#define __NR_symlinkat			(__NR_SYSCALL_BASE+331)
                       			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1391: FILE: include/asm-arm/unistd.h:360:
+#define __NR_readlinkat			(__NR_SYSCALL_BASE+332)
                        			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1392: FILE: include/asm-arm/unistd.h:361:
+#define __NR_fchmodat			(__NR_SYSCALL_BASE+333)
                      			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1393: FILE: include/asm-arm/unistd.h:362:
+#define __NR_faccessat			(__NR_SYSCALL_BASE+334)
                       			                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1408: FILE: include/linux/libata.h:747:
+extern int ata_busy_sleep(struct ata_port *ap,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1617: FILE: mm/mincore.c:62:
+^I * FIXME: This is just stupid. And returning ENOMEM is $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1690: FILE: mm/mincore.c:120:
+ ^Iif (start & ~PAGE_CACHE_MASK)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1690: FILE: mm/mincore.c:120:
+ ^Iif (start & ~PAGE_CACHE_MASK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1690: FILE: mm/mincore.c:120:
+ ^Iif (start & ~PAGE_CACHE_MASK)$

CHECK:SPACING: No space is necessary after a cast
#1697: FILE: mm/mincore.c:124:
+	if (!access_ok(VERIFY_READ, (void __user *) start, len))

CHECK:SPACING: No space is necessary after a cast
#1732: FILE: mm/mincore.c:134:
+	tmp = (void *) __get_free_page(GFP_USER);

CHECK:SPACING: No space is necessary after a cast
#1777: FILE: mm/mincore.c:159:
+	free_page((unsigned long) tmp);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'limit <= SHMEM_NR_DIRECT'
#1925: FILE: mm/shmem.c:523:
+	if (!topdir || (punch_hole && (limit <= SHMEM_NR_DIRECT)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2085: FILE: net/core/pktgen.c:211:
+       struct pktgen_thread *t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2086: FILE: net/core/pktgen.c:212:
+       struct completion *c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2109: FILE: net/core/pktgen.c:3317:
+        complete(info->c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2109: FILE: net/core/pktgen.c:3317:
+        complete(info->c);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2119: FILE: net/core/pktgen.c:3531:
+        struct completion started;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2119: FILE: net/core/pktgen.c:3531:
+        struct completion started;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2129: FILE: net/core/pktgen.c:3573:
+        info.t = t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2129: FILE: net/core/pktgen.c:3573:
+        info.t = t;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2130: FILE: net/core/pktgen.c:3574:
+        info.c = &started;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2130: FILE: net/core/pktgen.c:3574:
+        info.c = &started;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2133: FILE: net/core/pktgen.c:3577:
+	err = kernel_thread((void *)pktgen_thread_worker, (void *)&info,
 			  CLONE_FS | CLONE_FILES | CLONE_SIGHAND);

WARNING:INDENTED_LABEL: labels should not be indented
#2256: FILE: net/ipv4/udp.c:176:
+		next:

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2423: FILE: sound/sparc/cs4231.c:1873:
+	udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000002579.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 35 warnings, 36 checks, 1988 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000002579.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
