WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -X /home/sds/dontdiff -ru linux-2.6.old/security/selinux/hooks.c linux-2.6/security/selinux/hooks.c

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#51: FILE: security/selinux/hooks.c:4223:
+	printk(KERN_INFO "SELinux:  Unregistering netfilter hooks\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: security/selinux/hooks.c:4224:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: security/selinux/hooks.c:4235:
+#define selinux_nf_ip_exit() $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: security/selinux/hooks.c:4243:
+	extern void exit_sel_fs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#72: FILE: security/selinux/hooks.c:4244:
+	static int selinux_disabled = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#84: FILE: security/selinux/hooks.c:4256:
+	printk(KERN_INFO "SELinux:  Disabled at runtime.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: security/selinux/hooks.c:4259:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: security/selinux/hooks.c:4273:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: security/selinux/Kconfig:32:
+^I  This option enables writing to a selinuxfs node 'disable', which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: security/selinux/Kconfig:34:
+^I  SELinux will then remain disabled until the next boot. $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: security/selinux/selinuxfs.c:158:
+static ssize_t sel_write_disable(struct file * file, const char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: security/selinux/selinuxfs.c:158:
+static ssize_t sel_write_disable(struct file * file, const char * buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: security/selinux/selinuxfs.c:165:
+	int new_value;
+	extern int selinux_disable(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#163: FILE: security/selinux/selinuxfs.c:165:
+	extern int selinux_disable(void);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#171: FILE: security/selinux/selinuxfs.c:173:
+	page = (char*)__get_free_page(GFP_KERNEL);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#180: FILE: security/selinux/selinuxfs.c:182:
+	if (sscanf(page, "%d", &new_value) != 1)
+		goto out;

CHECK:SPACING: No space is necessary after a cast
#191: FILE: security/selinux/selinuxfs.c:193:
+	free_page((unsigned long) page);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#198: FILE: security/selinux/selinuxfs.c:200:
+static struct file_operations sel_disable_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#209: FILE: security/selinux/selinuxfs.c:1058:
+		[SEL_DISABLE] = {"disable", &sel_disable_ops, S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 9 warnings, 2 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
