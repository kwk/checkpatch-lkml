WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: net/xfrm.h:271:
+		memcmp(fl->fl6_src,
+		 &sel->saddr,

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#94: FILE: net/xfrm.h:273:
+		!((fl->uli_u.ports.dport^sel->dport)&sel->dport_mask) &&
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#94: FILE: net/xfrm.h:273:
+		!((fl->uli_u.ports.dport^sel->dport)&sel->dport_mask) &&
 		                                    ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#95: FILE: net/xfrm.h:274:
+		!((fl->uli_u.ports.sport^sel->sport)&sel->sport_mask) &&
 		                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#95: FILE: net/xfrm.h:274:
+		!((fl->uli_u.ports.sport^sel->sport)&sel->sport_mask) &&
 		                                    ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: net/xfrm.h:336:
+extern int __xfrm6_policy_check(struct sock *, int dir, struct sk_buff *skb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: net/xfrm.h:342:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: net/xfrm.h:386:
+extern struct xfrm_state *xfrm6_state_find(struct in6_addr *daddr, struct in6_addr *saddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: net/xfrm.h:387:
+extern struct xfrm_state *xfrm6_state_find(struct in6_addr *daddr, struct in6_addr *saddr,
+					  struct flowi *fl, struct xfrm_tmpl *tmpl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: net/xfrm.h:393:
+extern struct xfrm_state *xfrm6_state_lookup(struct in6_addr *daddr, u32 spi, u8 proto);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: net/xfrm.h:413:
+struct xfrm_state * xfrm6_find_acq(u8 mode, u16 reqid, u8 proto, struct in6_addr *daddr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#170: FILE: netsyms.c:326:
+EXPORT_SYMBOL(xfrm6_state_lookup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#171: FILE: netsyms.c:327:
+EXPORT_SYMBOL(xfrm6_find_acq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#172: FILE: netsyms.c:328:
+EXPORT_SYMBOL(xfrm6_alloc_spi);

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: ipv4/xfrm_state.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: ipv4/xfrm_state.c:231:
+^I^Iif (x->props.family == AF_INET && $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#223: FILE: ipv4/xfrm_state.c:330:
+xfrm6_state_find(struct in6_addr *daddr, struct in6_addr *saddr, struct flowi *fl, struct xfrm_tmpl *tmpl,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: ipv4/xfrm_state.c:331:
+xfrm6_state_find(struct in6_addr *daddr, struct in6_addr *saddr, struct flowi *fl, struct xfrm_tmpl *tmpl,
+		struct xfrm_policy *pol, int *err)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: ipv4/xfrm_state.c:333:
+	unsigned h = ntohl(daddr->s6_addr32[3]);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#232: FILE: ipv4/xfrm_state.c:339:
+	h = (h ^ (h>>16)) % XFRM_DST_HSIZE;
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: ipv4/xfrm_state.c:342:
+	list_for_each_entry(x, xfrm_state_bydst+h, bydst) {
 	                                       ^

ERROR:SPACING: spaces required around that '&&' (ctx:VxE)
#236: FILE: ipv4/xfrm_state.c:343:
+		if (x->props.family == AF_INET6&&
 		                               ^

ERROR:SPACING: spaces required around that '||' (ctx:VxW)
#239: FILE: ipv4/xfrm_state.c:346:
+		    (!memcmp(saddr, &x->props.saddr, sizeof(*saddr))|| ipv6_addr_any(saddr)) &&
 		                                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#243: FILE: ipv4/xfrm_state.c:350:
+			/* Resolution logic:
+			   1. There is a valid state with matching selector.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#279: FILE: ipv4/xfrm_state.c:386:
+	if (!error && !acquire_in_progress &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#282: FILE: ipv4/xfrm_state.c:389:
+		 * to current session. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#294: FILE: ipv4/xfrm_state.c:401:
+		if (ipv6_addr_any((struct in6_addr*)&x->id.daddr))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#297: FILE: ipv4/xfrm_state.c:404:
+		if (ipv6_addr_any((struct in6_addr*)&x->props.saddr))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#305: FILE: ipv4/xfrm_state.c:412:
+			list_add_tail(&x->bydst, xfrm_state_bydst+h);
 			                                         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#308: FILE: ipv4/xfrm_state.c:415:
+				struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: ipv4/xfrm_state.c:416:
+				struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;
+				h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#309: FILE: ipv4/xfrm_state.c:416:
+				h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);
 				                              ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#309: FILE: ipv4/xfrm_state.c:416:
+				h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);
 				                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#310: FILE: ipv4/xfrm_state.c:417:
+				h = (h ^ (h>>10) ^ (h>>20)) % XFRM_DST_HSIZE;
 				           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#310: FILE: ipv4/xfrm_state.c:417:
+				h = (h ^ (h>>10) ^ (h>>20)) % XFRM_DST_HSIZE;
 				                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: ipv4/xfrm_state.c:418:
+				list_add(&x->byspi, xfrm_state_byspi+h);
 				                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#316: FILE: ipv4/xfrm_state.c:423:
+			mod_timer(&x->timer, ACQ_EXPIRES*HZ);
 			                                ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#334: FILE: ipv4/xfrm_state.c:440:
+	unsigned h = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: ipv4/xfrm_state.c:441:
+	unsigned h = 0;
+	switch(x->props.family) {

ERROR:SPACING: space required before the open parenthesis '('
#335: FILE: ipv4/xfrm_state.c:441:
+	switch(x->props.family) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#341: FILE: ipv4/xfrm_state.c:447:
+		struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: ipv4/xfrm_state.c:448:
+		struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;
+		h = ntohl(addr->s6_addr32[3]);

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: ipv4/xfrm_state.c:460:
+	switch(x->props.family) {

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#357: FILE: ipv4/xfrm_state.c:462:
+		h = ntohl(x->id.daddr.xfrm4_addr^x->id.spi^x->id.proto);
 		                                ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#357: FILE: ipv4/xfrm_state.c:462:
+		h = ntohl(x->id.daddr.xfrm4_addr^x->id.spi^x->id.proto);
 		                                          ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#361: FILE: ipv4/xfrm_state.c:466:
+		struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: ipv4/xfrm_state.c:467:
+		struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;
+		h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#362: FILE: ipv4/xfrm_state.c:467:
+		h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);
 		                              ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#362: FILE: ipv4/xfrm_state.c:467:
+		h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);
 		                                        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#386: FILE: ipv4/xfrm_state.c:544:
+	unsigned h = ntohl(daddr->s6_addr32[3]^spi^proto);

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#386: FILE: ipv4/xfrm_state.c:544:
+	unsigned h = ntohl(daddr->s6_addr32[3]^spi^proto);
 	                                      ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#386: FILE: ipv4/xfrm_state.c:544:
+	unsigned h = ntohl(daddr->s6_addr32[3]^spi^proto);
 	                                          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#389: FILE: ipv4/xfrm_state.c:547:
+	h = (h ^ (h>>10) ^ (h>>20)) % XFRM_DST_HSIZE;
 	           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#389: FILE: ipv4/xfrm_state.c:547:
+	h = (h ^ (h>>10) ^ (h>>20)) % XFRM_DST_HSIZE;
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: ipv4/xfrm_state.c:550:
+	list_for_each_entry(x, xfrm_state_byspi+h, byspi) {
 	                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#427: FILE: ipv4/xfrm_state.c:608:
+		mod_timer(&x0->timer, jiffies + ACQ_EXPIRES*HZ);
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#429: FILE: ipv4/xfrm_state.c:610:
+		list_add_tail(&x0->bydst, xfrm_state_bydst+h);
 		                                          ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#437: FILE: ipv4/xfrm_state.c:618:
+xfrm6_find_acq(u8 mode, u16 reqid, u8 proto, struct in6_addr *daddr, struct in6_addr *saddr, int create)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#440: FILE: ipv4/xfrm_state.c:621:
+	unsigned h = ntohl(daddr->s6_addr32[3]);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#442: FILE: ipv4/xfrm_state.c:623:
+	h = (h ^ (h>>16)) % XFRM_DST_HSIZE;
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#446: FILE: ipv4/xfrm_state.c:627:
+	list_for_each_entry(x, xfrm_state_bydst+h, bydst) {
 	                                       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 28)
#447: FILE: ipv4/xfrm_state.c:628:
+		if (x->props.family == AF_INET6 &&
[...]
+			    if (!x0)

WARNING:TABSTOP: Statements should start on a tabstop
#454: FILE: ipv4/xfrm_state.c:635:
+			    if (!x0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 36)
#454: FILE: ipv4/xfrm_state.c:635:
+			    if (!x0)
+				    x0 = x;

WARNING:TABSTOP: Statements should start on a tabstop
#456: FILE: ipv4/xfrm_state.c:637:
+			    if (x->id.spi)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 36)
#456: FILE: ipv4/xfrm_state.c:637:
+			    if (x->id.spi)
+				    continue;

WARNING:TABSTOP: Statements should start on a tabstop
#457: FILE: ipv4/xfrm_state.c:638:
+				    continue;

WARNING:TABSTOP: Statements should start on a tabstop
#459: FILE: ipv4/xfrm_state.c:640:
+			    break;

WARNING:TABSTOP: Statements should start on a tabstop
#460: FILE: ipv4/xfrm_state.c:641:
+		    }

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#464: FILE: ipv4/xfrm_state.c:645:
+	} else if (create && (x0 = xfrm_state_alloc()) != NULL) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#493: FILE: ipv4/xfrm_state.c:740:
+		x0 = xfrm6_state_lookup((struct in6_addr*)&x->id.daddr, minspi, x->id.proto);

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: ipv4/xfrm_state.c:748:
+		u32 spi = 0;
+		minspi = ntohl(minspi);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#503: FILE: ipv4/xfrm_state.c:750:
+		for (h=0; h<maxspi-minspi+1; h++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#503: FILE: ipv4/xfrm_state.c:750:
+		for (h=0; h<maxspi-minspi+1; h++) {
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#503: FILE: ipv4/xfrm_state.c:750:
+		for (h=0; h<maxspi-minspi+1; h++) {
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#503: FILE: ipv4/xfrm_state.c:750:
+		for (h=0; h<maxspi-minspi+1; h++) {
 		                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#504: FILE: ipv4/xfrm_state.c:751:
+			spi = minspi + net_random()%(maxspi-minspi+1);
 			                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#504: FILE: ipv4/xfrm_state.c:751:
+			spi = minspi + net_random()%(maxspi-minspi+1);
 			                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#504: FILE: ipv4/xfrm_state.c:751:
+			spi = minspi + net_random()%(maxspi-minspi+1);
 			                                          ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#505: FILE: ipv4/xfrm_state.c:752:
+			x0 = xfrm6_state_lookup((struct in6_addr*)&x->id.daddr, htonl(spi), x->id.proto);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#505: FILE: ipv4/xfrm_state.c:752:
+			x0 = xfrm6_state_lookup((struct in6_addr*)&x->id.daddr, htonl(spi), x->id.proto);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!x0"
#506: FILE: ipv4/xfrm_state.c:753:
+			if (x0 == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#513: FILE: ipv4/xfrm_state.c:760:
+		struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: ipv4/xfrm_state.c:761:
+		struct in6_addr *addr = (struct in6_addr*)&x->id.daddr;
+		spin_lock_bh(&xfrm_state_lock);

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#515: FILE: ipv4/xfrm_state.c:762:
+		h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);
 		                              ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#515: FILE: ipv4/xfrm_state.c:762:
+		h = ntohl((addr->s6_addr32[3])^x->id.spi^x->id.proto);
 		                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#516: FILE: ipv4/xfrm_state.c:763:
+		h = (h ^ (h>>10) ^ (h>>20)) % XFRM_DST_HSIZE;
 		           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#516: FILE: ipv4/xfrm_state.c:763:
+		h = (h ^ (h>>10) ^ (h>>20)) % XFRM_DST_HSIZE;
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#517: FILE: ipv4/xfrm_state.c:764:
+		list_add(&x->byspi, xfrm_state_byspi+h);
 		                                    ^

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#589: FILE: key/af_key.c:521:
+		return AF_INET6;
+		break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#604: FILE: key/af_key.c:554:
+		x = xfrm6_state_lookup(&((struct sockaddr_in6*)(addr + 1))->sin6_addr,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#633: FILE: key/af_key.c:701:
+		size += (sizeof(struct sadb_address) + sizeof(struct sockaddr_in)) *2;
 		                                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: key/af_key.c:703:
+^I^I^Isize += sizeof(struct sadb_address) + $

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#638: FILE: key/af_key.c:706:
+		size += (sizeof(struct sadb_address) + ((sizeof(struct sockaddr_in6) + 7) & ~7)) *2;
 		                                                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: key/af_key.c:801:
+^I^I/* "if the ports are non-zero, then the sadb_address_proto field, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: key/af_key.c:802:
+^I^I   normally zero, MUST be filled in with the transport $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#693: FILE: key/af_key.c:802:
+		/* "if the ports are non-zero, then the sadb_address_proto field, 
+		   normally zero, MUST be filled in with the transport 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#694: FILE: key/af_key.c:803:
+		   protocol's number." - RFC2367 */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: key/af_key.c:804:
+^I^Iaddr->sadb_address_proto = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: key/af_key.c:805:
+^I^Iaddr->sadb_address_prefixlen = 32; /* XXX */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: key/af_key.c:811:
+^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#705: FILE: key/af_key.c:811:
+		addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#705: FILE: key/af_key.c:811:
+		addr = (struct sadb_address*) skb_put(skb, 

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#706: FILE: key/af_key.c:812:
+						      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#706: FILE: key/af_key.c:812:
+						      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));
 						                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: key/af_key.c:813:
+^I^Iaddr->sadb_address_len = $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#708: FILE: key/af_key.c:814:
+			(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#708: FILE: key/af_key.c:814:
+			(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 			                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: key/af_key.c:817:
+^I^Iaddr->sadb_address_proto = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: key/af_key.c:818:
+^I^Iaddr->sadb_address_prefixlen = 32; /* XXX */ $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#714: FILE: key/af_key.c:820:
+		((struct sockaddr_in*)(addr + 1))->sin_family = AF_INET;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#715: FILE: key/af_key.c:821:
+^I^I((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#715: FILE: key/af_key.c:821:
+		((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#719: FILE: key/af_key.c:825:
+^I^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#719: FILE: key/af_key.c:825:
+			addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#719: FILE: key/af_key.c:825:
+			addr = (struct sadb_address*) skb_put(skb, 

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#720: FILE: key/af_key.c:826:
+							      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#720: FILE: key/af_key.c:826:
+							      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));
 							                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: key/af_key.c:827:
+^I^I^Iaddr->sadb_address_len = $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#722: FILE: key/af_key.c:828:
+				(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 				                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#722: FILE: key/af_key.c:828:
+				(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 				                                                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#728: FILE: key/af_key.c:834:
+			((struct sockaddr_in*)(addr + 1))->sin_family = AF_INET;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: key/af_key.c:835:
+^I^I^I((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#729: FILE: key/af_key.c:835:
+			((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: key/af_key.c:837:
+^I^I^I((struct sockaddr_in*)(addr + 1))->sin_port = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#731: FILE: key/af_key.c:837:
+			((struct sockaddr_in*)(addr + 1))->sin_port = 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: key/af_key.c:842:
+^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#736: FILE: key/af_key.c:842:
+		addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#736: FILE: key/af_key.c:842:
+		addr = (struct sadb_address*) skb_put(skb, 

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#737: FILE: key/af_key.c:843:
+						      sizeof(struct sadb_address)+
 						                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: key/af_key.c:845:
+^I^Iaddr->sadb_address_len = $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#740: FILE: key/af_key.c:846:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#740: FILE: key/af_key.c:846:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: key/af_key.c:849:
+^I^Iaddr->sadb_address_proto = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: key/af_key.c:850:
+^I^Iaddr->sadb_address_prefixlen = 128; /* XXX */ $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#746: FILE: key/af_key.c:852:
+		((struct sockaddr_in6*)(addr + 1))->sin6_family = AF_INET6;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#747: FILE: key/af_key.c:853:
+		memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, &x->props.saddr, sizeof(struct in6_addr));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#747: FILE: key/af_key.c:853:
+		memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, &x->props.saddr, sizeof(struct in6_addr));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: key/af_key.c:855:
+^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#749: FILE: key/af_key.c:855:
+		addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#749: FILE: key/af_key.c:855:
+		addr = (struct sadb_address*) skb_put(skb, 

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#750: FILE: key/af_key.c:856:
+						      sizeof(struct sadb_address)+
 						                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: key/af_key.c:858:
+^I^Iaddr->sadb_address_len = $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#753: FILE: key/af_key.c:859:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#753: FILE: key/af_key.c:859:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: key/af_key.c:862:
+^I^Iaddr->sadb_address_proto = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: key/af_key.c:863:
+^I^Iaddr->sadb_address_prefixlen = 128; /* XXX */ $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#759: FILE: key/af_key.c:865:
+		((struct sockaddr_in6*)(addr + 1))->sin6_family = AF_INET6;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#760: FILE: key/af_key.c:866:
+		memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, &x->id.daddr, sizeof(struct in6_addr));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#760: FILE: key/af_key.c:866:
+		memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, &x->id.daddr, sizeof(struct in6_addr));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: key/af_key.c:869:
+^I^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#763: FILE: key/af_key.c:869:
+			addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#763: FILE: key/af_key.c:869:
+			addr = (struct sadb_address*) skb_put(skb, 

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#764: FILE: key/af_key.c:870:
+						      sizeof(struct sadb_address)+
 						                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: key/af_key.c:872:
+^I^I^Iaddr->sadb_address_len = $

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#767: FILE: key/af_key.c:873:
+				(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#767: FILE: key/af_key.c:873:
+				(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 				                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#767: FILE: key/af_key.c:873:
+				(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 				                                                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#773: FILE: key/af_key.c:879:
+			((struct sockaddr_in6*)(addr + 1))->sin6_family = AF_INET6;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: key/af_key.c:880:
+^I^I^I((struct sockaddr_in6*)(addr + 1))->sin6_port = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#774: FILE: key/af_key.c:880:
+			((struct sockaddr_in6*)(addr + 1))->sin6_port = 

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#776: FILE: key/af_key.c:882:
+			memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, &x->sel.saddr, sizeof(struct in6_addr));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#776: FILE: key/af_key.c:882:
+			memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, &x->sel.saddr, sizeof(struct in6_addr));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: key/af_key.c:1041:
+^Ix->props.family = pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], $

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#786: FILE: key/af_key.c:1041:
+	x->props.family = pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], 

CHECK:SPACING: No space is necessary after a cast
#786: FILE: key/af_key.c:1041:
+	x->props.family = pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#786: FILE: key/af_key.c:1041:
+	x->props.family = pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], 
 	                                                                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: key/af_key.c:1042:
+	x->props.family = pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1], 
 				  &x->props.saddr);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#801: FILE: key/af_key.c:1204:
+		struct sadb_address *addr
+			 = (struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1];

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#801: FILE: key/af_key.c:1204:
+			 = (struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#801: FILE: key/af_key.c:1204:
+			 = (struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1];
 			                                                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#802: FILE: key/af_key.c:1205:
+		switch (((struct sockaddr*)(addr + 1))->sa_family) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#814: FILE: key/af_key.c:1217:
+					    (struct in6_addr*)&x->id.daddr,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#815: FILE: key/af_key.c:1218:
+					    (struct in6_addr*)&x->props.saddr, 0);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#839: FILE: key/af_key.c:1574:
+		size += (sizeof(struct sadb_address) + sizeof(struct sockaddr_in))*2+
 		                                                                  ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#839: FILE: key/af_key.c:1574:
+		size += (sizeof(struct sadb_address) + sizeof(struct sockaddr_in))*2+
 		                                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#841: FILE: key/af_key.c:1576:
+					xp->xfrm_nr*(sizeof(struct sadb_x_ipsecrequest) +
 					           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#842: FILE: key/af_key.c:1577:
+						     sizeof(struct sockaddr_in)*2);
 						                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#844: FILE: key/af_key.c:1579:
+		size += (sizeof(struct sadb_address) + ((sizeof(struct sockaddr_in6)+7)&~7))*2+
 		                                                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#844: FILE: key/af_key.c:1579:
+		size += (sizeof(struct sadb_address) + ((sizeof(struct sockaddr_in6)+7)&~7))*2+
 		                                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#844: FILE: key/af_key.c:1579:
+		size += (sizeof(struct sadb_address) + ((sizeof(struct sockaddr_in6)+7)&~7))*2+
 		                                                                            ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#844: FILE: key/af_key.c:1579:
+		size += (sizeof(struct sadb_address) + ((sizeof(struct sockaddr_in6)+7)&~7))*2+
 		                                                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#846: FILE: key/af_key.c:1581:
+					xp->xfrm_nr*(sizeof(struct sadb_x_ipsecrequest) +
 					           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#847: FILE: key/af_key.c:1582:
+						((sizeof(struct sockaddr_in6)+7)&~7)*2);
 						                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#847: FILE: key/af_key.c:1582:
+						((sizeof(struct sockaddr_in6)+7)&~7)*2);
 						                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#847: FILE: key/af_key.c:1582:
+						((sizeof(struct sockaddr_in6)+7)&~7)*2);
 						                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: key/af_key.c:1595:
+^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#889: FILE: key/af_key.c:1595:
+		addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#889: FILE: key/af_key.c:1595:
+		addr = (struct sadb_address*) skb_put(skb, 

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#890: FILE: key/af_key.c:1596:
+						      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#890: FILE: key/af_key.c:1596:
+						      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));
 						                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: key/af_key.c:1597:
+^I^Iaddr->sadb_address_len = $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#892: FILE: key/af_key.c:1598:
+			(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#892: FILE: key/af_key.c:1598:
+			(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 			                                                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#895: FILE: key/af_key.c:1601:
+		sin = (struct sockaddr_in*)(addr + 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: key/af_key.c:1611:
+^I^Iaddr = (struct sadb_address*) skb_put(skb, $

CHECK:SPACING: No space is necessary after a cast
#905: FILE: key/af_key.c:1611:
+		addr = (struct sadb_address*) skb_put(skb, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#905: FILE: key/af_key.c:1611:
+		addr = (struct sadb_address*) skb_put(skb, 

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#906: FILE: key/af_key.c:1612:
+						      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#906: FILE: key/af_key.c:1612:
+						      sizeof(struct sadb_address)+sizeof(struct sockaddr_in));
 						                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#908: FILE: key/af_key.c:1614:
+			(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#908: FILE: key/af_key.c:1614:
+			(sizeof(struct sadb_address)+sizeof(struct sockaddr_in))/
 			                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#912: FILE: key/af_key.c:1618:
+^I^Iaddr->sadb_address_prefixlen = xp->selector.prefixlen_d; $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#914: FILE: key/af_key.c:1620:
+		sin = (struct sockaddr_in*)(addr + 1);

CHECK:SPACING: No space is necessary after a cast
#921: FILE: key/af_key.c:1627:
+		addr = (struct sadb_address*) skb_put(skb,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#921: FILE: key/af_key.c:1627:
+		addr = (struct sadb_address*) skb_put(skb,

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#923: FILE: key/af_key.c:1629:
+						      +((sizeof(struct sockaddr_in6) +7) & ~7));
 						      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#923: FILE: key/af_key.c:1629:
+						      +((sizeof(struct sockaddr_in6) +7) & ~7));
 						                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#925: FILE: key/af_key.c:1631:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#925: FILE: key/af_key.c:1631:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                                                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#927: FILE: key/af_key.c:1633:
+		sin6 = (struct sockaddr_in6*)(addr + 1);

CHECK:SPACING: No space is necessary after a cast
#936: FILE: key/af_key.c:1642:
+		addr = (struct sadb_address*) skb_put(skb,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#936: FILE: key/af_key.c:1642:
+		addr = (struct sadb_address*) skb_put(skb,

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#938: FILE: key/af_key.c:1644:
+						      +((sizeof(struct sockaddr_in6) +7) & ~7));
 						      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#938: FILE: key/af_key.c:1644:
+						      +((sizeof(struct sockaddr_in6) +7) & ~7));
 						                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#940: FILE: key/af_key.c:1646:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#940: FILE: key/af_key.c:1646:
+			(sizeof(struct sadb_address)+((sizeof(struct sockaddr_in6) + 7) & ~7))/
 			                                                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#942: FILE: key/af_key.c:1648:
+		sin6 = (struct sockaddr_in6*)(addr + 1);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#964: FILE: key/af_key.c:1710:
+				req_size += 2*sizeof(struct sockaddr_in);
 				             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#966: FILE: key/af_key.c:1712:
+				req_size += 2*((sizeof(struct sockaddr_in6) + 7) & ~7);
 				             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: key/af_key.c:1714:
+^I^I^Iif (xp->family == AF_INET) $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#969: FILE: key/af_key.c:1715:
+				size -= 2*sizeof(struct sockaddr_in);
 				         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#971: FILE: key/af_key.c:1717:
+				size -= 2*((sizeof(struct sockaddr_in6) + 7) & ~7);
 				         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#991: FILE: key/af_key.c:1732:
+				sin = (void*)(rq+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#991: FILE: key/af_key.c:1732:
+				sin = (void*)(rq+1);
 				                ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1002: FILE: key/af_key.c:1743:
+				sin6 = (void*)(rq+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1002: FILE: key/af_key.c:1743:
+				sin6 = (void*)(rq+1);
 				                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1032: FILE: key/af_key.c:2225:
+	if (x->props.family == AF_INET) {
[...]
+	} else if (x->props.family == AF_INET6) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1038: FILE: key/af_key.c:2231:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: key/af_key.c:2236:
+^I^I^Isalen*2 + $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1044: FILE: key/af_key.c:2236:
+			salen*2 + 
 			     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1053: FILE: key/af_key.c:2260:
+					      sizeof(struct sadb_address)+salen);
 					                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1056: FILE: key/af_key.c:2262:
+		(sizeof(struct sadb_address)+salen)/
 		                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#1056: FILE: key/af_key.c:2262:
+		(sizeof(struct sadb_address)+salen)/
 		                                   ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1068: FILE: key/af_key.c:2269:
+		((struct sockaddr_in*)(addr + 1))->sin_family = AF_INET;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1069: FILE: key/af_key.c:2270:
+^I^I((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1069: FILE: key/af_key.c:2270:
+		((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1071: FILE: key/af_key.c:2272:
+		((struct sockaddr_in*)(addr + 1))->sin_port = 0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1073: FILE: key/af_key.c:2274:
+		((struct sockaddr_in6*)(addr + 1))->sin6_family = AF_INET6;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1074: FILE: key/af_key.c:2275:
+^I^Imemcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1074: FILE: key/af_key.c:2275:
+		memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1076: FILE: key/af_key.c:2277:
+		((struct sockaddr_in6*)(addr + 1))->sin6_port = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1082: FILE: key/af_key.c:2282:
+					      sizeof(struct sadb_address)+salen);
 					                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1085: FILE: key/af_key.c:2284:
+		(sizeof(struct sadb_address)+salen)/
 		                            ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#1085: FILE: key/af_key.c:2284:
+		(sizeof(struct sadb_address)+salen)/
 		                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1090: FILE: key/af_key.c:2288:
+^Iaddr->sadb_address_prefixlen = plen; $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1097: FILE: key/af_key.c:2291:
+		((struct sockaddr_in*)(addr + 1))->sin_family = AF_INET;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: key/af_key.c:2292:
+^I^I((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1098: FILE: key/af_key.c:2292:
+		((struct sockaddr_in*)(addr + 1))->sin_addr.s_addr = 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1100: FILE: key/af_key.c:2294:
+		((struct sockaddr_in*)(addr + 1))->sin_port = 0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1102: FILE: key/af_key.c:2296:
+		((struct sockaddr_in6*)(addr + 1))->sin6_family = AF_INET6;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1103: FILE: key/af_key.c:2297:
+		memcpy(&((struct sockaddr_in6*)(addr + 1))->sin6_addr,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1105: FILE: key/af_key.c:2299:
+		((struct sockaddr_in6*)(addr + 1))->sin6_port = 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402363.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 98 errors, 43 warnings, 116 checks, 982 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402363.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
