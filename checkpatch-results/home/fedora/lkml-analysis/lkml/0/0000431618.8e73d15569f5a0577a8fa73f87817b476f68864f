ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: drivers/char/tty_io.c:1233:
+			for_each_task_pid(o_tty->session, PIDTYPE_SID, p,l, pid)
 			                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#217: FILE: include/linux/pid.h:1:
+#ifndef _LINUX_PID_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#221: FILE: include/linux/pid.h:5:
+enum pid_type
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#229: FILE: include/linux/pid.h:13:
+struct pid
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#238: FILE: include/linux/pid.h:22:
+struct pid_link
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/linux/pid.h:37:
+extern int FASTCALL(attach_pid(struct task_struct *, enum pid_type, int));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#253: FILE: include/linux/pid.h:37:
+extern int FASTCALL(attach_pid(struct task_struct *, enum pid_type, int));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#253: FILE: include/linux/pid.h:37:
+extern int FASTCALL(attach_pid(struct task_struct *, enum pid_type, int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/pid.h:42:
+extern void FASTCALL(detach_pid(struct task_struct *task, enum pid_type));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/linux/pid.h:47:
+extern struct pid *FASTCALL(find_pid(enum pid_type, int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#263: FILE: include/linux/pid.h:47:
+extern struct pid *FASTCALL(find_pid(enum pid_type, int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/pid.h:49:
+extern int alloc_pidmap(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: include/linux/pid.h:50:
+extern void FASTCALL(free_pidmap(int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#266: FILE: include/linux/pid.h:50:
+extern void FASTCALL(free_pidmap(int));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#268: FILE: include/linux/pid.h:52:
+#define for_each_task_pid(who, type, task, elem, pid)		\
+	if ((pid = find_pid(type, who)))			\
+	        for (elem = pid->task_list.next,			\
+			prefetch(elem->next),				\
+			task = pid_task(elem, type);			\
+			elem != &pid->task_list;			\
+			elem = elem->next, prefetch(elem->next), 	\
+			task = pid_task(elem, type))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#268: FILE: include/linux/pid.h:52:
+#define for_each_task_pid(who, type, task, elem, pid)		\
+	if ((pid = find_pid(type, who)))			\
+	        for (elem = pid->task_list.next,			\
+			prefetch(elem->next),				\
+			task = pid_task(elem, type);			\
+			elem != &pid->task_list;			\
+			elem = elem->next, prefetch(elem->next), 	\
+			task = pid_task(elem, type))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elem' - possible side-effects?
#268: FILE: include/linux/pid.h:52:
+#define for_each_task_pid(who, type, task, elem, pid)		\
+	if ((pid = find_pid(type, who)))			\
+	        for (elem = pid->task_list.next,			\
+			prefetch(elem->next),				\
+			task = pid_task(elem, type);			\
+			elem != &pid->task_list;			\
+			elem = elem->next, prefetch(elem->next), 	\
+			task = pid_task(elem, type))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pid' - possible side-effects?
#268: FILE: include/linux/pid.h:52:
+#define for_each_task_pid(who, type, task, elem, pid)		\
+	if ((pid = find_pid(type, who)))			\
+	        for (elem = pid->task_list.next,			\
+			prefetch(elem->next),				\
+			task = pid_task(elem, type);			\
+			elem != &pid->task_list;			\
+			elem = elem->next, prefetch(elem->next), 	\
+			task = pid_task(elem, type))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#269: FILE: include/linux/pid.h:53:
+	if ((pid = find_pid(type, who)))			\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: include/linux/pid.h:54:
+^I        for (elem = pid->task_list.next,^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: include/linux/pid.h:58:
+^I^I^Ielem = elem->next, prefetch(elem->next), ^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/sched.h:270:
+extern struct user_struct *find_user(uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#292: FILE: include/linux/sched.h:270:
+extern struct user_struct *find_user(uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: include/linux/sched.h:479:
+extern struct task_struct *find_task_by_pid(int pid);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#364: FILE: include/linux/threads.h:27:
+#define PID_MAX_LIMIT (4*1024*1024)
                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#364: FILE: include/linux/threads.h:27:
+#define PID_MAX_LIMIT (4*1024*1024)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#375: FILE: include/asm-i386/types.h:45:
+#define BITS_PER_LONG		(1 << BITS_PER_LONG_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: fs/fcntl.c:499:
+		send_sigio_to_task(p, fown,fd,band);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: fs/fcntl.c:499:
+		send_sigio_to_task(p, fown,fd,band);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: kernel/exit.c:148:
+^I^I^I^I|| p->state == TASK_ZOMBIE $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#505: FILE: kernel/exit.c:148:
+		if (p == ignored_task
+				|| p->state == TASK_ZOMBIE 

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#506: FILE: kernel/exit.c:149:
+				|| p->state == TASK_ZOMBIE 
+				|| p->real_parent->pid == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#512: FILE: kernel/exit.c:152:
+		if (p->real_parent->pgrp != pgrp
+			    && p->real_parent->session == p->session) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#555: FILE: kernel/pid.c:1:
+/*

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#585: FILE: kernel/pid.c:31:
+#define pid_hashfn(nr) ((nr >> 8) ^ nr) & (PIDHASH_SIZE - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#585: FILE: kernel/pid.c:31:
+#define pid_hashfn(nr) ((nr >> 8) ^ nr) & (PIDHASH_SIZE - 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr' may be better as '(nr)' to avoid precedence issues
#585: FILE: kernel/pid.c:31:
+#define pid_hashfn(nr) ((nr >> 8) ^ nr) & (PIDHASH_SIZE - 1)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#592: FILE: kernel/pid.c:38:
+#define PIDMAP_ENTRIES		(PID_MAX_LIMIT/PAGE_SIZE/8)
                       		              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#592: FILE: kernel/pid.c:38:
+#define PIDMAP_ENTRIES		(PID_MAX_LIMIT/PAGE_SIZE/8)
                       		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#593: FILE: kernel/pid.c:39:
+#define BITS_PER_PAGE		(PAGE_SIZE*8)
                      		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#594: FILE: kernel/pid.c:40:
+#define BITS_PER_PAGE_MASK	(BITS_PER_PAGE-1)
                           	              ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#602: FILE: kernel/pid.c:48:
+typedef struct pidmap {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#608: FILE: kernel/pid.c:54:
+static pidmap_t pidmap_array[PIDMAP_ENTRIES] =
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#608: FILE: kernel/pid.c:54:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };
 	                         ^

ERROR:SPACING: space prohibited after that open square bracket '['
#608: FILE: kernel/pid.c:54:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };

ERROR:SPACING: space prohibited before that close square bracket ']'
#608: FILE: kernel/pid.c:54:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: kernel/pid.c:72:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: kernel/pid.c:125:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#714: FILE: kernel/pid.c:160:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: kernel/pid.c:203:
+		BUG();

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#790: FILE: kernel/pid.c:236:
+extern struct task_struct *find_task_by_pid(int nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: kernel/pid.c:263:
+	pid_cache = kmem_cache_create("pid_cache", sizeof(struct pid),
+				0, SLAB_HWCACHE_ALIGN, NULL, NULL);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#829: FILE: kernel/sched.c:2102:
+	extern void pid_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#878: FILE: kernel/signal.c:980:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#950: FILE: kernel/sys.c:209:
+	if (p->uid != current->euid &&
+		p->uid != current->uid && !capable(CAP_SYS_NICE)) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1008: FILE: kernel/sys.c:243:
+	switch (which) {
+		case PRIO_PROCESS:
[...]
+		case PRIO_PGRP:
[...]
+		case PRIO_USER:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1066: FILE: kernel/sys.c:296:
+	switch (which) {
+		case PRIO_PROCESS:
[...]
+		case PRIO_PGRP:
[...]
+		case PRIO_USER:

CHECK:BRACES: braces {} should be used on all arms of this statement
#1303: FILE: kernel/fork.c:669:
+	if (clone_flags & CLONE_IDLETASK)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1305: FILE: kernel/fork.c:671:
+	else {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1353: FILE: init/main.c:69:
+extern void pidhash_init(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431618.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 15 warnings, 28 checks, 1174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431618.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
