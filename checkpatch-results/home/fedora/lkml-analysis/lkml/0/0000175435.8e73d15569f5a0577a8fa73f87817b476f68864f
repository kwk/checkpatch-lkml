ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: arch/i386/kernel/apic.c:1165:
+        if (ipipe_running)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/i386/kernel/apic.c:1165:
+        if (ipipe_running)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#109: FILE: arch/i386/kernel/apic.c:1165:
+        if (ipipe_running)
+	    regs =  __ipipe_tick_regs + cpu;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: arch/i386/kernel/entry.S:81:
+#define FIXUP_ROOT_IF           call __ipipe_if_fixup_root ; movl $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#137: FILE: arch/i386/kernel/entry.S:81:
ORIG_EAX(%esp),%eax

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/i386/kernel/entry.S:82:
+#define EMULATE_ROOT_IRET^Icall __ipipe_unstall_iret_root ; movl $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: arch/i386/kernel/entry.S:83:
+#define TEST_PREEMPTIBLE(regs)  call __ipipe_kpreempt_root ; testl $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: arch/i386/kernel/entry.S:484:
+^Iiret^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: arch/i386/kernel/entry.S:487:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#381: FILE: arch/i386/kernel/i386_ksyms.c:51:
+EXPORT_SYMBOL(irq_vector);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#407: FILE: arch/i386/kernel/i8259.c:181:
+	if (irq == 0) {
[...]
+	    outb(0x20,PIC_MASTER_CMD);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#409: FILE: arch/i386/kernel/i8259.c:183:
+	    /* Fast timer ack -- don't mask
+	      (unless supposedly spurious) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#409: FILE: arch/i386/kernel/i8259.c:183:
+	      (unless supposedly spurious) */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#410: FILE: arch/i386/kernel/i8259.c:184:
+	    outb(0x20,PIC_MASTER_CMD);
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#412: FILE: arch/i386/kernel/i8259.c:186:
+	    return;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#420: FILE: arch/i386/kernel/i8259.c:194:
+		outb(0x60+(irq&7),PIC_SLAVE_CMD);/* 'Specific EOI' to slave */
 		         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#420: FILE: arch/i386/kernel/i8259.c:194:
+		outb(0x60+(irq&7),PIC_SLAVE_CMD);/* 'Specific EOI' to slave */
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#420: FILE: arch/i386/kernel/i8259.c:194:
+		outb(0x60+(irq&7),PIC_SLAVE_CMD);/* 'Specific EOI' to slave */
 		                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: arch/i386/kernel/i8259.c:195:
+^I^Ioutb(0x60+PIC_CASCADE_IR,PIC_MASTER_CMD); /* 'Specific EOI' to $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#421: FILE: arch/i386/kernel/i8259.c:195:
+		outb(0x60+PIC_CASCADE_IR,PIC_MASTER_CMD); /* 'Specific EOI' to 
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: arch/i386/kernel/i8259.c:195:
+		outb(0x60+PIC_CASCADE_IR,PIC_MASTER_CMD); /* 'Specific EOI' to 
 		                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#423: FILE: arch/i386/kernel/i8259.c:196:
+		outb(0x60+PIC_CASCADE_IR,PIC_MASTER_CMD); /* 'Specific EOI' to 
+	} else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#452: FILE: arch/i386/kernel/io_apic.c:1834:
+static void ack_edge_ioapic_irq (unsigned irq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#452: FILE: arch/i386/kernel/io_apic.c:1834:
+static void ack_edge_ioapic_irq (unsigned irq)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: arch/i386/kernel/io_apic.c:1837:
+    move_irq(irq);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: arch/i386/kernel/io_apic.c:1838:
+    if ((irq_desc[irq].status & (IRQ_PENDING | IRQ_DISABLED)) == $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: arch/i386/kernel/io_apic.c:1838:
+    if ((irq_desc[irq].status & (IRQ_PENDING | IRQ_DISABLED)) == $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#456: FILE: arch/i386/kernel/io_apic.c:1838:
+    if ((irq_desc[irq].status & (IRQ_PENDING | IRQ_DISABLED)) == 
(IRQ_PENDING | IRQ_DISABLED))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: arch/i386/kernel/io_apic.c:1841:
+	unsigned long flags;
+	spin_lock_irqsave_hw(&ioapic_lock,flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: arch/i386/kernel/io_apic.c:1841:
+	spin_lock_irqsave_hw(&ioapic_lock,flags);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: arch/i386/kernel/io_apic.c:1843:
+	spin_unlock_irqrestore_hw(&ioapic_lock,flags);
 	                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/i386/kernel/io_apic.c:1846:
+    __ack_APIC_irq();$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#489: FILE: arch/i386/kernel/io_apic.c:1886:
+/* Prevent low priority IRQs grabbed by high priority domains from
+   being delayed, waiting for a high priority interrupt handler

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#490: FILE: arch/i386/kernel/io_apic.c:1887:
+   running in a low priority domain to complete. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#494: FILE: arch/i386/kernel/io_apic.c:1891:
+static void end_level_ioapic_irq (unsigned irq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: arch/i386/kernel/io_apic.c:1891:
+static void end_level_ioapic_irq (unsigned irq)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: arch/i386/kernel/io_apic.c:1894:
+    move_irq(irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: arch/i386/kernel/io_apic.c:1896:
+    spin_lock(&ioapic_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: arch/i386/kernel/io_apic.c:1898:
+    if (test_and_clear_bit(irq,&bugous_edge_triggers))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#501: FILE: arch/i386/kernel/io_apic.c:1898:
+    if (test_and_clear_bit(irq,&bugous_edge_triggers))
+	{

ERROR:SPACING: space required after that ',' (ctx:VxO)
#501: FILE: arch/i386/kernel/io_apic.c:1898:
+    if (test_and_clear_bit(irq,&bugous_edge_triggers))
                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#501: FILE: arch/i386/kernel/io_apic.c:1898:
+    if (test_and_clear_bit(irq,&bugous_edge_triggers))
                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: arch/i386/kernel/io_apic.c:1903:
+    else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: arch/i386/kernel/io_apic.c:1906:
+    spin_unlock(&ioapic_lock);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#512: FILE: arch/i386/kernel/io_apic.c:1909:
+static void mask_and_ack_level_ioapic_irq (unsigned irq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: arch/i386/kernel/io_apic.c:1909:
+static void mask_and_ack_level_ioapic_irq (unsigned irq)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: arch/i386/kernel/io_apic.c:1912:
+    unsigned long v;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/i386/kernel/io_apic.c:1913:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/i386/kernel/io_apic.c:1915:
+    i = IO_APIC_VECTOR(irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: arch/i386/kernel/io_apic.c:1916:
+    v = apic_read(APIC_TMR + ((i & ~0x1f) >> 1));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: arch/i386/kernel/io_apic.c:1918:
+    spin_lock(&ioapic_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: arch/i386/kernel/io_apic.c:1920:
+    if (!(v & (1 << (i & 0x1f))))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#523: FILE: arch/i386/kernel/io_apic.c:1920:
+    if (!(v & (1 << (i & 0x1f))))
+	{

ERROR:SPACING: space required after that ',' (ctx:VxO)
#525: FILE: arch/i386/kernel/io_apic.c:1922:
+	set_bit(irq,&bugous_edge_triggers);
 	           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#525: FILE: arch/i386/kernel/io_apic.c:1922:
+	set_bit(irq,&bugous_edge_triggers);
 	            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: arch/i386/kernel/io_apic.c:1925:
+    else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: arch/i386/kernel/io_apic.c:1928:
+    spin_unlock(&ioapic_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: arch/i386/kernel/io_apic.c:1930:
+    __ack_APIC_irq();$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#576: FILE: arch/i386/kernel/ipipe.c:1:
+/*   -*- linux-c -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#577: FILE: arch/i386/kernel/ipipe.c:2:
+ *   linux/arch/i386/kernel/ipipe.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#583: FILE: arch/i386/kernel/ipipe.c:8:
+ *   the Free Software Foundation, Inc., 675 Mass Ave, Cambridge MA 02139,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#593: FILE: arch/i386/kernel/ipipe.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: arch/i386/kernel/ipipe.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#594: FILE: arch/i386/kernel/ipipe.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#609: FILE: arch/i386/kernel/ipipe.c:33:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#613: FILE: arch/i386/kernel/ipipe.c:37:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#616: FILE: arch/i386/kernel/ipipe.c:40:
+#include <asm/bitops.h>

WARNING:SPACING: Unnecessary space before function pointer arguments
#639: FILE: arch/i386/kernel/ipipe.c:63:
+static void (*__ipipe_cpu_sync) (void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: arch/i386/kernel/ipipe.c:67:
+#define __ipipe_call_asm_irq_handler(ipd,irq) \
                                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#643: FILE: arch/i386/kernel/ipipe.c:67:
+#define __ipipe_call_asm_irq_handler(ipd,irq) \
+   __asm__ __volatile__ ("pushfl\n\t" \
+                         "push %%cs\n\t" \
+                         "call *%1\n" \
+			 : /* no output */ \
+			 : "a" (irq), "m" ((ipd)->irqs[irq].handler))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#643: FILE: arch/i386/kernel/ipipe.c:67:
+#define __ipipe_call_asm_irq_handler(ipd,irq) \
+   __asm__ __volatile__ ("pushfl\n\t" \
+                         "push %%cs\n\t" \
+                         "call *%1\n" \
+			 : /* no output */ \
+			 : "a" (irq), "m" ((ipd)->irqs[irq].handler))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/i386/kernel/ipipe.c:68:
+   __asm__ __volatile__ ("pushfl\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: arch/i386/kernel/ipipe.c:69:
+                         "push %%cs\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/i386/kernel/ipipe.c:69:
+                         "push %%cs\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: arch/i386/kernel/ipipe.c:70:
+                         "call *%1\n" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/i386/kernel/ipipe.c:70:
+                         "call *%1\n" \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: arch/i386/kernel/ipipe.c:74:
+#define __ipipe_call_c_root_irq_handler(ipd,irq) \
                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#650: FILE: arch/i386/kernel/ipipe.c:74:
+#define __ipipe_call_c_root_irq_handler(ipd,irq) \
+   __asm__ __volatile__ ("pushfl\n\t" \
+                         "pushl %%cs\n\t" \
+                         "pushl $1f\n\t" \
+	                 "pushl $-1\n\t" \
+	                 "pushl %%es\n\t" \
+	                 "pushl %%ds\n\t" \
+	                 "pushl %%eax\n\t" \
+	                 "pushl %%ebp\n\t" \
+	                 "pushl %%edi\n\t" \
+	                 "pushl %%esi\n\t" \
+	                 "pushl %%edx\n\t" \
+	                 "pushl %%ecx\n\t" \
+	                 "pushl %%ebx\n\t" \
+                         "pushl %%eax\n\t" \
+                         "call *%1\n\t" \
+			 "addl $4,%%esp\n\t" \
+	                 "jmp ret_from_intr\n\t" \
+	                 "1:\n" \
+			 : /* no output */ \
+			 : "a" (irq), "m" ((ipd)->irqs[irq].handler))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#650: FILE: arch/i386/kernel/ipipe.c:74:
+#define __ipipe_call_c_root_irq_handler(ipd,irq) \
+   __asm__ __volatile__ ("pushfl\n\t" \
+                         "pushl %%cs\n\t" \
+                         "pushl $1f\n\t" \
+	                 "pushl $-1\n\t" \
+	                 "pushl %%es\n\t" \
+	                 "pushl %%ds\n\t" \
+	                 "pushl %%eax\n\t" \
+	                 "pushl %%ebp\n\t" \
+	                 "pushl %%edi\n\t" \
+	                 "pushl %%esi\n\t" \
+	                 "pushl %%edx\n\t" \
+	                 "pushl %%ecx\n\t" \
+	                 "pushl %%ebx\n\t" \
+                         "pushl %%eax\n\t" \
+                         "call *%1\n\t" \
+			 "addl $4,%%esp\n\t" \
+	                 "jmp ret_from_intr\n\t" \
+	                 "1:\n" \
+			 : /* no output */ \
+			 : "a" (irq), "m" ((ipd)->irqs[irq].handler))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/i386/kernel/ipipe.c:75:
+   __asm__ __volatile__ ("pushfl\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: arch/i386/kernel/ipipe.c:76:
+                         "pushl %%cs\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: arch/i386/kernel/ipipe.c:76:
+                         "pushl %%cs\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#653: FILE: arch/i386/kernel/ipipe.c:77:
+                         "pushl $1f\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: arch/i386/kernel/ipipe.c:77:
+                         "pushl $1f\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: arch/i386/kernel/ipipe.c:78:
+^I                 "pushl $-1\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: arch/i386/kernel/ipipe.c:79:
+^I                 "pushl %%es\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: arch/i386/kernel/ipipe.c:80:
+^I                 "pushl %%ds\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: arch/i386/kernel/ipipe.c:81:
+^I                 "pushl %%eax\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: arch/i386/kernel/ipipe.c:82:
+^I                 "pushl %%ebp\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: arch/i386/kernel/ipipe.c:83:
+^I                 "pushl %%edi\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: arch/i386/kernel/ipipe.c:84:
+^I                 "pushl %%esi\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: arch/i386/kernel/ipipe.c:85:
+^I                 "pushl %%edx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: arch/i386/kernel/ipipe.c:86:
+^I                 "pushl %%ecx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: arch/i386/kernel/ipipe.c:87:
+^I                 "pushl %%ebx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: arch/i386/kernel/ipipe.c:88:
+                         "pushl %%eax\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/i386/kernel/ipipe.c:88:
+                         "pushl %%eax\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: arch/i386/kernel/ipipe.c:89:
+                         "call *%1\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: arch/i386/kernel/ipipe.c:89:
+                         "call *%1\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: arch/i386/kernel/ipipe.c:91:
+^I                 "jmp ret_from_intr\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: arch/i386/kernel/ipipe.c:92:
+^I                 "1:\n" \$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#673: FILE: arch/i386/kernel/ipipe.c:97:
+/* Do _not_ forcibly re-enable hw IRQs in the following trampoline
+   used for non-root domains; unlike Linux handlers, non-root domain

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#674: FILE: arch/i386/kernel/ipipe.c:98:
+   handlers are fully in control of the hw masking state. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#676: FILE: arch/i386/kernel/ipipe.c:100:
+#define __ipipe_call_c_irq_handler(ipd,irq) \
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#676: FILE: arch/i386/kernel/ipipe.c:100:
+#define __ipipe_call_c_irq_handler(ipd,irq) \
+   __asm__ __volatile__ ("pushl %%ebp\n\t" \
+	                 "pushl %%edi\n\t" \
+                      	 "pushl %%esi\n\t" \
+	                 "pushl %%edx\n\t" \
+                         "pushl %%ecx\n\t" \
+	                 "pushl %%ebx\n\t" \
+                         "pushl %%eax\n\t" \
+                         "call *%1\n\t" \
+                         "addl $4,%%esp\n\t" \
+                         "popl %%ebx\n\t" \
+                         "popl %%ecx\n\t" \
+	                 "popl %%edx\n\t" \
+	                 "popl %%esi\n\t" \
+	                 "popl %%edi\n\t" \
+	                 "popl %%ebp\n" \
+			 : /* no output */ \
+			 : "a" (irq), "m" ((ipd)->irqs[irq].handler))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#676: FILE: arch/i386/kernel/ipipe.c:100:
+#define __ipipe_call_c_irq_handler(ipd,irq) \
+   __asm__ __volatile__ ("pushl %%ebp\n\t" \
+	                 "pushl %%edi\n\t" \
+                      	 "pushl %%esi\n\t" \
+	                 "pushl %%edx\n\t" \
+                         "pushl %%ecx\n\t" \
+	                 "pushl %%ebx\n\t" \
+                         "pushl %%eax\n\t" \
+                         "call *%1\n\t" \
+                         "addl $4,%%esp\n\t" \
+                         "popl %%ebx\n\t" \
+                         "popl %%ecx\n\t" \
+	                 "popl %%edx\n\t" \
+	                 "popl %%esi\n\t" \
+	                 "popl %%edi\n\t" \
+	                 "popl %%ebp\n" \
+			 : /* no output */ \
+			 : "a" (irq), "m" ((ipd)->irqs[irq].handler))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: arch/i386/kernel/ipipe.c:101:
+   __asm__ __volatile__ ("pushl %%ebp\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#678: FILE: arch/i386/kernel/ipipe.c:102:
+^I                 "pushl %%edi\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: arch/i386/kernel/ipipe.c:103:
+                      ^I "pushl %%esi\n\t" \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#679: FILE: arch/i386/kernel/ipipe.c:103:
+                      ^I "pushl %%esi\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: arch/i386/kernel/ipipe.c:103:
+                      ^I "pushl %%esi\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: arch/i386/kernel/ipipe.c:104:
+^I                 "pushl %%edx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: arch/i386/kernel/ipipe.c:105:
+                         "pushl %%ecx\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: arch/i386/kernel/ipipe.c:105:
+                         "pushl %%ecx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: arch/i386/kernel/ipipe.c:106:
+^I                 "pushl %%ebx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: arch/i386/kernel/ipipe.c:107:
+                         "pushl %%eax\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: arch/i386/kernel/ipipe.c:107:
+                         "pushl %%eax\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: arch/i386/kernel/ipipe.c:108:
+                         "call *%1\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: arch/i386/kernel/ipipe.c:108:
+                         "call *%1\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: arch/i386/kernel/ipipe.c:109:
+                         "addl $4,%%esp\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: arch/i386/kernel/ipipe.c:109:
+                         "addl $4,%%esp\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: arch/i386/kernel/ipipe.c:110:
+                         "popl %%ebx\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: arch/i386/kernel/ipipe.c:110:
+                         "popl %%ebx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: arch/i386/kernel/ipipe.c:111:
+                         "popl %%ecx\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: arch/i386/kernel/ipipe.c:111:
+                         "popl %%ecx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: arch/i386/kernel/ipipe.c:112:
+^I                 "popl %%edx\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: arch/i386/kernel/ipipe.c:113:
+^I                 "popl %%esi\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: arch/i386/kernel/ipipe.c:114:
+^I                 "popl %%edi\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: arch/i386/kernel/ipipe.c:115:
+^I                 "popl %%ebp\n" \$

WARNING:INLINE: plain inline is preferred over __inline__
#695: FILE: arch/i386/kernel/ipipe.c:119:
+static __inline__ unsigned long flnz(unsigned long word)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: arch/i386/kernel/ipipe.c:121:
+      __asm__("bsrl %1, %0":"=r"(word)$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#697: FILE: arch/i386/kernel/ipipe.c:121:
+      __asm__("bsrl %1, %0":"=r"(word)
                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: arch/i386/kernel/ipipe.c:122:
+      :^I"r"(word));$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#702: FILE: arch/i386/kernel/ipipe.c:126:
+int __ipipe_ack_system_irq(unsigned irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#714: FILE: arch/i386/kernel/ipipe.c:138:
+static void __ipipe_do_critical_sync(unsigned irq)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#723: FILE: arch/i386/kernel/ipipe.c:147:
+	/* Now we are in sync with the lock requestor running on another
+	   CPU. Enter a spinning wait until he releases the global

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#724: FILE: arch/i386/kernel/ipipe.c:148:
+	   lock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#741: FILE: arch/i386/kernel/ipipe.c:165:
+/* ipipe_critical_enter() -- Grab the superlock excluding all CPUs
+   but the current one from a critical section. This lock is used when

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#743: FILE: arch/i386/kernel/ipipe.c:167:
+   possibly SMP system whichever context the CPUs are running. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: arch/i386/kernel/ipipe.c:176:
+^Iif (num_online_cpus() > 1) {^I/* We might be running a SMP-kernel on a $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#752: FILE: arch/i386/kernel/ipipe.c:176:
+	if (num_online_cpus() > 1) {	/* We might be running a SMP-kernel on a 
UP box... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#754: FILE: arch/i386/kernel/ipipe.c:177:
+	if (num_online_cpus() > 1) {	/* We might be running a SMP-kernel on a 
+		ipipe_declare_cpuid;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: arch/i386/kernel/ipipe.c:217:
+^Iif (num_online_cpus() > 1) {^I/* We might be running a SMP-kernel on a $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#794: FILE: arch/i386/kernel/ipipe.c:217:
+	if (num_online_cpus() > 1) {	/* We might be running a SMP-kernel on a 
UP box... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#796: FILE: arch/i386/kernel/ipipe.c:218:
+	if (num_online_cpus() > 1) {	/* We might be running a SMP-kernel on a 
+		ipipe_declare_cpuid;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#845: FILE: arch/i386/kernel/ipipe.c:267:
+/* __ipipe_sync_stage() -- Flush the pending IRQs for the current
+   domain (and processor).  This routine flushes the interrupt log

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#854: FILE: arch/i386/kernel/ipipe.c:276:
+   interrupts off. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: arch/i386/kernel/ipipe.c:284:
+	int level, rank, sync;
+	ipipe_declare_cpuid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#863: FILE: arch/i386/kernel/ipipe.c:285:
+	unsigned irq;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#872: FILE: arch/i386/kernel/ipipe.c:294:
+	/* The policy here is to keep the dispatching code interrupt-free
+	   by stalling the current stage. If the upper domain handler

WARNING:TYPO_SPELLING: 'unstall' may be misspelled - perhaps 'install'?
#875: FILE: arch/i386/kernel/ipipe.c:297:
+	   sigaction()), it will have to unstall (then stall again before
 	                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#876: FILE: arch/i386/kernel/ipipe.c:298:
+	   returning to us!) the stage when it sees fit. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#880: FILE: arch/i386/kernel/ipipe.c:302:
+		/* Give a slight priority advantage to high-numbered IRQs
+		   like the virtual ones. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#880: FILE: arch/i386/kernel/ipipe.c:302:
+		   like the virtual ones. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#900: FILE: arch/i386/kernel/ipipe.c:322:
+			if (ipd == ipipe_root_domain) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#902: FILE: arch/i386/kernel/ipipe.c:324:
+				/* Make sure to re-enable hw interrupts to reduce
+				   preemption latency by higher priority domains when

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: arch/i386/kernel/ipipe.c:328:
+				   for a rescheduling opportunity in ret_from_intr. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#910: FILE: arch/i386/kernel/ipipe.c:332:
+				if (!test_bit
[...]
+				} else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#914: FILE: arch/i386/kernel/ipipe.c:336:
+					__ipipe_call_c_root_irq_handler(ipd,irq);
 					                                   ^

CHECK:BRACES: Unbalanced braces around else statement
#916: FILE: arch/i386/kernel/ipipe.c:338:
+				} else

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: arch/i386/kernel/ipipe.c:340:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: arch/i386/kernel/ipipe.c:351:
+					/* We expect any domain to clear the SYNC bit each
+					   time it switches in a new task, so that preemptions

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#937: FILE: arch/i386/kernel/ipipe.c:359:
+					   now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#955: FILE: arch/i386/kernel/ipipe.c:377:
+/* __ipipe_walk_pipeline(): Plays interrupts pending in the log. Must
+   be called with local hw interrupts disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#955: FILE: arch/i386/kernel/ipipe.c:377:
+   be called with local hw interrupts disabled. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#969: FILE: arch/i386/kernel/ipipe.c:391:
+		if (next_domain->cpudata[cpuid].irq_pending_hi != 0) {
[...]
+		} else if (next_domain == this_domain)
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#970: FILE: arch/i386/kernel/ipipe.c:392:
+		if (next_domain->cpudata[cpuid].irq_pending_hi != 0) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#971: FILE: arch/i386/kernel/ipipe.c:393:
+			if (next_domain == this_domain)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#973: FILE: arch/i386/kernel/ipipe.c:395:
+			else {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_domain->cpudata[cpuid].irq_pending_hi'
#980: FILE: arch/i386/kernel/ipipe.c:402:
+				if (this_domain->cpudata[cpuid].
+				    irq_pending_hi != 0

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#981: FILE: arch/i386/kernel/ipipe.c:403:
+				    irq_pending_hi != 0
+				    && !test_bit(IPIPE_STALL_FLAG,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_domain->cpudata[cpuid].status'
#983: FILE: arch/i386/kernel/ipipe.c:405:
+						 &this_domain->cpudata[cpuid].
+						 status)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#984: FILE: arch/i386/kernel/ipipe.c:406:
+						 status)
+				    && !test_bit(IPIPE_SYNC_FLAG,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_domain->cpudata[cpuid].status'
#986: FILE: arch/i386/kernel/ipipe.c:408:
+						 &this_domain->cpudata[cpuid].
+						 status))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#999: FILE: arch/i386/kernel/ipipe.c:421:
+/* __ipipe_handle_irq() -- IPIPE's generic IRQ handler. An optimistic
+   interrupt protection log is maintained here for each domain.  Hw

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1000: FILE: arch/i386/kernel/ipipe.c:422:
+   interrupts are off on entry. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1005: FILE: arch/i386/kernel/ipipe.c:427:
+	unsigned irq = regs.orig_eax & 0xff;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1008: FILE: arch/i386/kernel/ipipe.c:430:
+	struct ipipe_domain *this_domain;
+	ipipe_declare_cpuid;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1030: FILE: arch/i386/kernel/ipipe.c:452:
+		/* For each domain handling the incoming IRQ, mark it as
+		   pending in its log. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1030: FILE: arch/i386/kernel/ipipe.c:452:
+		   pending in its log. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1035: FILE: arch/i386/kernel/ipipe.c:457:
+			/* Domains that handle this IRQ are polled for
+			   acknowledging it by decreasing priority order. The

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1037: FILE: arch/i386/kernel/ipipe.c:459:
+			   status flags before the PIC is unlocked. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1043: FILE: arch/i386/kernel/ipipe.c:465:
+			/* Always get the first master acknowledge available. Once
+			   we've got it, allow slave acknowledge handlers to run

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1044: FILE: arch/i386/kernel/ipipe.c:466:
+			   (until one of them stops us). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1055: FILE: arch/i386/kernel/ipipe.c:477:
+		/* If the domain does not want the IRQ to be passed down the
+		   interrupt pipe, exit the loop now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1055: FILE: arch/i386/kernel/ipipe.c:477:
+		   interrupt pipe, exit the loop now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1074: FILE: arch/i386/kernel/ipipe.c:496:
+	/* Now walk the pipeline, yielding control to the highest
+	   priority domain that has pending interrupt(s) or

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1077: FILE: arch/i386/kernel/ipipe.c:499:
+	   current domain in the pipeline. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1090: FILE: arch/i386/kernel/ipipe.c:512:
+	/* Prevent a spurious rescheduling from being triggered on
+	   preemptible kernels along the way out through ret_from_intr. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1090: FILE: arch/i386/kernel/ipipe.c:512:
+	   preemptible kernels along the way out through ret_from_intr. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1098: FILE: arch/i386/kernel/ipipe.c:520:
+/* ipipe_trigger_irq() -- Push the interrupt at front of the pipeline
+   just like if it has been actually received from a hw source. Also

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1099: FILE: arch/i386/kernel/ipipe.c:521:
+   works for virtual interrupts. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1101: FILE: arch/i386/kernel/ipipe.c:523:
+int fastcall ipipe_trigger_irq(unsigned irq)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1133: FILE: arch/i386/kernel/ipipe.c:555:
+		/* Have the saved hw state look like the domain stall bit, so
+		   that __ipipe_unstall_iret_root() restores the proper

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1134: FILE: arch/i386/kernel/ipipe.c:556:
+		   pipeline state for the root stage upon exit. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1154: FILE: arch/i386/kernel/ipipe.c:576:
+/*  Check the interrupt flag to make sure the existing preemption
+    opportunity upon in-kernel resumption could be exploited. If

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1159: FILE: arch/i386/kernel/ipipe.c:581:
+    re-enabled. This routine must be called with hw interrupts off. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1197: FILE: arch/i386/kernel/ipipe.c:619:
+	/* Restore the software state as it used to be on kernel
+	   entry. CAUTION: NMIs must *not* return through this

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1198: FILE: arch/i386/kernel/ipipe.c:620:
+	   emulation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1209: FILE: arch/i386/kernel/ipipe.c:631:
+		/* Only sync virtual IRQs here, so that we don't recurse
+		   indefinitely in case of an external interrupt flood. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1209: FILE: arch/i386/kernel/ipipe.c:631:
+		   indefinitely in case of an external interrupt flood. */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ipipe_root_domain->cpudata[cpuid].irq_pending_hi'
#1212: FILE: arch/i386/kernel/ipipe.c:634:
+		if ((ipipe_root_domain->cpudata[cpuid].
+		     irq_pending_hi & IPIPE_IRQMASK_VIRT) != 0)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1217: FILE: arch/i386/kernel/ipipe.c:639:
+EXPORT_SYMBOL(__ipipe_init_stage);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1218: FILE: arch/i386/kernel/ipipe.c:640:
+EXPORT_SYMBOL(__ipipe_sync_stage);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1219: FILE: arch/i386/kernel/ipipe.c:641:
+EXPORT_SYMBOL(__ipipe_ack_system_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1220: FILE: arch/i386/kernel/ipipe.c:642:
+EXPORT_SYMBOL(__ipipe_handle_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1221: FILE: arch/i386/kernel/ipipe.c:643:
+EXPORT_SYMBOL(__ipipe_tick_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1222: FILE: arch/i386/kernel/ipipe.c:644:
+EXPORT_SYMBOL(ipipe_critical_enter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1223: FILE: arch/i386/kernel/ipipe.c:645:
+EXPORT_SYMBOL(ipipe_critical_exit);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1233: FILE: arch/i386/kernel/process.c:164:
+ ^I^I^Iipipe_suspend_domain();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1233: FILE: arch/i386/kernel/process.c:164:
+ ^I^I^Iipipe_suspend_domain();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1233: FILE: arch/i386/kernel/process.c:164:
+ ^I^I^Iipipe_suspend_domain();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1302: FILE: arch/i386/kernel/smp.c:318:
+    ^Iunsigned long cpu, flags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1302: FILE: arch/i386/kernel/smp.c:318:
+    ^Iunsigned long cpu, flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: arch/i386/kernel/smp.c:318:
+    ^Iunsigned long cpu, flags;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1372: FILE: arch/i386/kernel/time.c:262:
+		unsigned long flags;
+		spin_lock_irqsave_hw_cond(&i8259A_lock,flags);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1372: FILE: arch/i386/kernel/time.c:262:
+		spin_lock_irqsave_hw_cond(&i8259A_lock,flags);
 		                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1377: FILE: arch/i386/kernel/time.c:266:
+		spin_unlock_irqrestore_hw_cond(&i8259A_lock,flags);
 		                                           ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1390: FILE: arch/i386/kernel/traps.c:230:
+	if (ipipe_current_domain != ipipe_root_domain)
+	    printk("I-pipe domain %s",ipipe_current_domain->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1391: FILE: arch/i386/kernel/traps.c:231:
+	    printk("I-pipe domain %s",ipipe_current_domain->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1391: FILE: arch/i386/kernel/traps.c:231:
+	    printk("I-pipe domain %s",ipipe_current_domain->name);
 	                             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1392: FILE: arch/i386/kernel/traps.c:232:
+	else
[...]
  	printk("Process %s (pid: %d, threadinfo=%p task=%p)",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1455: FILE: include/asm-i386/apic.h:73:
+#define ack_APIC_irq() do { if (!ipipe_running) __ack_APIC_irq(); } $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1455: FILE: include/asm-i386/apic.h:73:
+#define ack_APIC_irq() do { if (!ipipe_running) __ack_APIC_irq(); } 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#1456: FILE: include/asm-i386/apic.h:73:
while(0)
+static inline void __ack_APIC_irq(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1495: FILE: include/asm-i386/ipipe.h:1:
+/*   -*- linux-c -*-

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1496: FILE: include/asm-i386/ipipe.h:2:
+ *   include/asm-i386/ipipe.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1502: FILE: include/asm-i386/ipipe.h:8:
+ *   the Free Software Foundation, Inc., 675 Mass Ave, Cambridge MA 02139,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1512: FILE: include/asm-i386/ipipe.h:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1513: FILE: include/asm-i386/ipipe.h:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1513: FILE: include/asm-i386/ipipe.h:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1538: FILE: include/asm-i386/ipipe.h:43:
+#define IPIPE_CRITICAL_VECTOR  0xf9^I/* Used by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1540: FILE: include/asm-i386/ipipe.h:44:
+#define IPIPE_CRITICAL_IPI     (IPIPE_CRITICAL_VECTOR - $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1540: FILE: include/asm-i386/ipipe.h:44:
+#define IPIPE_CRITICAL_VECTOR  0xf9	/* Used by 
+#define IPIPE_CRITICAL_IPI     (IPIPE_CRITICAL_VECTOR - 

ERROR:CODE_INDENT: code indent should use tabs where possible
#1547: FILE: include/asm-i386/ipipe.h:50:
+                                  (cpuid) = ipipe_processor_id();^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1548: FILE: include/asm-i386/ipipe.h:51:
+                               } while(0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1550: FILE: include/asm-i386/ipipe.h:53:
+                                  local_irq_save_hw(flags); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1551: FILE: include/asm-i386/ipipe.h:54:
+                                  (cpuid) = ipipe_processor_id(); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1552: FILE: include/asm-i386/ipipe.h:55:
+                               } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#1566: FILE: include/asm-i386/ipipe.h:69:
+#define ipipe_get_cpu(flags)    do { flags = flags; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#1566: FILE: include/asm-i386/ipipe.h:69:
+#define ipipe_get_cpu(flags)    do { flags = flags; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1566: FILE: include/asm-i386/ipipe.h:69:
+#define ipipe_get_cpu(flags)    do { flags = flags; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1574: FILE: include/asm-i386/ipipe.h:77:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1574: FILE: include/asm-i386/ipipe.h:77:
+ $

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1577: FILE: include/asm-i386/ipipe.h:78:
+	spin_unlock_irq(&(rq)->lock);		\

ERROR:SPACING: space required before the open parenthesis '('
#1578: FILE: include/asm-i386/ipipe.h:79:
+} while(0)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1582: FILE: include/asm-i386/ipipe.h:83:
+struct ipipe_sysinfo {
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1589: FILE: include/asm-i386/ipipe.h:90:
+		unsigned tmirq;	/* Timer tick IRQ */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1596: FILE: include/asm-i386/ipipe.h:97:
+/* We must cover the whole IRQ space to map the local timer interrupt
+   (#207). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1596: FILE: include/asm-i386/ipipe.h:97:
+   (#207). */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1609: FILE: include/asm-i386/ipipe.h:110:
+#define IPIPE_VIRQ_BASE  (((IPIPE_NR_XIRQS + BITS_PER_LONG - 1) / $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1609: FILE: include/asm-i386/ipipe.h:110:
+#define IPIPE_VIRQ_BASE  (((IPIPE_NR_XIRQS + BITS_PER_LONG - 1) / 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1614: FILE: include/asm-i386/ipipe.h:114:
+#define IPIPE_IRQ_IWORDS  ((IPIPE_NR_IRQS + BITS_PER_LONG - 1) / $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1614: FILE: include/asm-i386/ipipe.h:114:
+#define IPIPE_IRQ_IWORDS  ((IPIPE_NR_IRQS + BITS_PER_LONG - 1) / 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1620: FILE: include/asm-i386/ipipe.h:119:
+#define IPIPE_IRQMASK_VIRT  (IPIPE_IRQMASK_ANY << (IPIPE_VIRQ_BASE / $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1620: FILE: include/asm-i386/ipipe.h:119:
+#define IPIPE_IRQMASK_VIRT  (IPIPE_IRQMASK_ANY << (IPIPE_VIRQ_BASE / 

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1624: FILE: include/asm-i386/ipipe.h:122:
+struct ipipe_domain {
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1628: FILE: include/asm-i386/ipipe.h:126:
+		volatile unsigned long status;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1629: FILE: include/asm-i386/ipipe.h:127:
+		volatile unsigned long irq_pending_hi;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1630: FILE: include/asm-i386/ipipe.h:128:
+		volatile unsigned long irq_pending_lo[IPIPE_IRQ_IWORDS];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1631: FILE: include/asm-i386/ipipe.h:129:
+		volatile unsigned irq_hits[IPIPE_NR_IRQS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1631: FILE: include/asm-i386/ipipe.h:129:
+		volatile unsigned irq_hits[IPIPE_NR_IRQS];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1635: FILE: include/asm-i386/ipipe.h:133:
+		int (*acknowledge) (unsigned irq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1635: FILE: include/asm-i386/ipipe.h:133:
+		int (*acknowledge) (unsigned irq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1636: FILE: include/asm-i386/ipipe.h:134:
+		void (*handler) (unsigned irq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1636: FILE: include/asm-i386/ipipe.h:134:
+		void (*handler) (unsigned irq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1641: FILE: include/asm-i386/ipipe.h:139:
+	unsigned domid;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1649: FILE: include/asm-i386/ipipe.h:147:
+#define __ipipe_set_irq_bit(ipd,cpuid,irq) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1649: FILE: include/asm-i386/ipipe.h:147:
+#define __ipipe_set_irq_bit(ipd,cpuid,irq) \
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1649: FILE: include/asm-i386/ipipe.h:147:
+#define __ipipe_set_irq_bit(ipd,cpuid,irq) \
+do { \
+    if (!test_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) { \
+        __set_bit(irq & 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#1650: FILE: include/asm-i386/ipipe.h:148:
+do { \
+    if (!test_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) { \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1651: FILE: include/asm-i386/ipipe.h:149:
+    if (!test_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) { \$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1651: FILE: include/asm-i386/ipipe.h:149:
+    if (!test_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) { \
                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1651: FILE: include/asm-i386/ipipe.h:149:
+    if (!test_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) { \
                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1652: FILE: include/asm-i386/ipipe.h:150:
+        __set_bit(irq & $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1652: FILE: include/asm-i386/ipipe.h:150:
+        __set_bit(irq & $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1652: FILE: include/asm-i386/ipipe.h:150:
+        __set_bit(irq & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1655: FILE: include/asm-i386/ipipe.h:151:
+        __set_bit(irq >> $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1655: FILE: include/asm-i386/ipipe.h:151:
+        __set_bit(irq >> $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1655: FILE: include/asm-i386/ipipe.h:151:
+        __set_bit(irq >> $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: include/asm-i386/ipipe.h:152:
+       } \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1657: FILE: include/asm-i386/ipipe.h:152:
+       } \

ERROR:SPACING: space required before the open parenthesis '('
#1658: FILE: include/asm-i386/ipipe.h:153:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1660: FILE: include/asm-i386/ipipe.h:155:
+#define __ipipe_clear_pend(ipd,cpuid,irq) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1660: FILE: include/asm-i386/ipipe.h:155:
+#define __ipipe_clear_pend(ipd,cpuid,irq) \
                                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'irq' may be better as '(irq)' to avoid precedence issues
#1660: FILE: include/asm-i386/ipipe.h:155:
+#define __ipipe_clear_pend(ipd,cpuid,irq) \
+do { \
+    __clear_bit(irq & 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#1661: FILE: include/asm-i386/ipipe.h:156:
+do { \
+    __clear_bit(irq & 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1662: FILE: include/asm-i386/ipipe.h:157:
+    __clear_bit(irq & $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1662: FILE: include/asm-i386/ipipe.h:157:
+    __clear_bit(irq & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1665: FILE: include/asm-i386/ipipe.h:158:
+    if ((ipd)->cpudata[cpuid].irq_pending_lo[irq >> IPIPE_IRQ_ISHIFT] $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1665: FILE: include/asm-i386/ipipe.h:158:
+    if ((ipd)->cpudata[cpuid].irq_pending_lo[irq >> IPIPE_IRQ_ISHIFT] $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1665: FILE: include/asm-i386/ipipe.h:158:
+    if ((ipd)->cpudata[cpuid].irq_pending_lo[irq >> IPIPE_IRQ_ISHIFT] 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1667: FILE: include/asm-i386/ipipe.h:159:
+        __clear_bit(irq >> $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1667: FILE: include/asm-i386/ipipe.h:159:
+        __clear_bit(irq >> $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1667: FILE: include/asm-i386/ipipe.h:159:
+        __clear_bit(irq >> $

ERROR:SPACING: space required before the open parenthesis '('
#1669: FILE: include/asm-i386/ipipe.h:160:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1671: FILE: include/asm-i386/ipipe.h:162:
+#define __ipipe_lock_irq(ipd,cpuid,irq) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1671: FILE: include/asm-i386/ipipe.h:162:
+#define __ipipe_lock_irq(ipd,cpuid,irq) \
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ipd' - possible side-effects?
#1671: FILE: include/asm-i386/ipipe.h:162:
+#define __ipipe_lock_irq(ipd,cpuid,irq) \
+do { \
+    if (!test_and_set_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
+	__ipipe_clear_pend(ipd,cpuid,irq); \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1671: FILE: include/asm-i386/ipipe.h:162:
+#define __ipipe_lock_irq(ipd,cpuid,irq) \
+do { \
+    if (!test_and_set_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
+	__ipipe_clear_pend(ipd,cpuid,irq); \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#1672: FILE: include/asm-i386/ipipe.h:163:
+do { \
+    if (!test_and_set_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1673: FILE: include/asm-i386/ipipe.h:164:
+    if (!test_and_set_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1673: FILE: include/asm-i386/ipipe.h:164:
+    if (!test_and_set_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
                                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1673: FILE: include/asm-i386/ipipe.h:164:
+    if (!test_and_set_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1674: FILE: include/asm-i386/ipipe.h:165:
+	__ipipe_clear_pend(ipd,cpuid,irq); \
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1674: FILE: include/asm-i386/ipipe.h:165:
+	__ipipe_clear_pend(ipd,cpuid,irq); \
 	                            ^

ERROR:SPACING: space required before the open parenthesis '('
#1675: FILE: include/asm-i386/ipipe.h:166:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1677: FILE: include/asm-i386/ipipe.h:168:
+#define __ipipe_unlock_irq(ipd,irq) \
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ipd' - possible side-effects?
#1677: FILE: include/asm-i386/ipipe.h:168:
+#define __ipipe_unlock_irq(ipd,irq) \
+do { \
+    int __cpuid, __nr_cpus = num_online_cpus();			       \
+    if (test_and_clear_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
+	for (__cpuid = 0; __cpuid < __nr_cpus; __cpuid++)      \
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1677: FILE: include/asm-i386/ipipe.h:168:
+#define __ipipe_unlock_irq(ipd,irq) \
+do { \
+    int __cpuid, __nr_cpus = num_online_cpus();			       \
+    if (test_and_clear_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
+	for (__cpuid = 0; __cpuid < __nr_cpus; __cpuid++)      \
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#1678: FILE: include/asm-i386/ipipe.h:169:
+do { \
+    int __cpuid, __nr_cpus = num_online_cpus();			       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1679: FILE: include/asm-i386/ipipe.h:170:
+    int __cpuid, __nr_cpus = num_online_cpus();^I^I^I       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1680: FILE: include/asm-i386/ipipe.h:171:
+    if (test_and_clear_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1680: FILE: include/asm-i386/ipipe.h:171:
+    if (test_and_clear_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1680: FILE: include/asm-i386/ipipe.h:171:
+    if (test_and_clear_bit(IPIPE_LOCK_FLAG,&(ipd)->irqs[irq].control)) \
                                            ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 9)
#1681: FILE: include/asm-i386/ipipe.h:172:
+	for (__cpuid = 0; __cpuid < __nr_cpus; __cpuid++)      \
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1682: FILE: include/asm-i386/ipipe.h:173:
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1682: FILE: include/asm-i386/ipipe.h:173:
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1682: FILE: include/asm-i386/ipipe.h:173:
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1684: FILE: include/asm-i386/ipipe.h:174:
+           set_bit(irq & $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1684: FILE: include/asm-i386/ipipe.h:174:
+           set_bit(irq & $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1684: FILE: include/asm-i386/ipipe.h:174:
+         if ((ipd)->cpudata[__cpuid].irq_hits[irq] > 0) { /* We need 
+           set_bit(irq & 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1687: FILE: include/asm-i386/ipipe.h:175:
+           set_bit(irq >> $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1687: FILE: include/asm-i386/ipipe.h:175:
+           set_bit(irq >> $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1689: FILE: include/asm-i386/ipipe.h:176:
+         } \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1705: FILE: include/asm-i386/ipipe.h:192:
+#define ipipe_hw_save_flags_and_sti(x)^I__asm__ __volatile__("pushfl ; $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1707: FILE: include/asm-i386/ipipe.h:193:
+#define local_irq_disable_hw() ^I^I^I__asm__ __volatile__("cli": : :"memory")$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1709: FILE: include/asm-i386/ipipe.h:195:
+#define local_irq_save_hw(x)    __asm__ __volatile__("pushfl ; popl %0 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1711: FILE: include/asm-i386/ipipe.h:196:
+#define local_irq_restore_hw(x) __asm__ __volatile__("pushl %0 ; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1713: FILE: include/asm-i386/ipipe.h:197:
+#define local_save_flags_hw(x)   __asm__ __volatile__("pushfl ; popl $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1724: FILE: include/asm-i386/ipipe.h:207:
+#define ipipe_cpu_freq() ({ unsigned long long __freq = $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1729: FILE: include/asm-i386/ipipe.h:211:
+/* We are over a combo I-pipe+PREEMPT_RT _patched_ kernel, but
+   CONFIG_PREEMPT_RT is not necessarily enabled; use the raw spinlock

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1730: FILE: include/asm-i386/ipipe.h:212:
+   support for the I-pipe. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1754: FILE: include/asm-i386/ipipe.h:236:
+#define spin_lock_irqsave_hw(x,flags)  \
                               ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1755: FILE: include/asm-i386/ipipe.h:237:
+do { \
+   local_irq_save_hw(flags); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1756: FILE: include/asm-i386/ipipe.h:238:
+   local_irq_save_hw(flags); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1757: FILE: include/asm-i386/ipipe.h:239:
+   spin_lock_hw(x); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1760: FILE: include/asm-i386/ipipe.h:242:
+#define spin_unlock_irqrestore_hw(x,flags)  \
                                    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1761: FILE: include/asm-i386/ipipe.h:243:
+do { \
+   spin_unlock_hw(x); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1762: FILE: include/asm-i386/ipipe.h:244:
+   spin_unlock_hw(x); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1763: FILE: include/asm-i386/ipipe.h:245:
+   local_irq_restore_hw(flags); \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1767: FILE: include/asm-i386/ipipe.h:249:
+do { \
+   local_irq_disable_hw(); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1768: FILE: include/asm-i386/ipipe.h:250:
+   local_irq_disable_hw(); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1769: FILE: include/asm-i386/ipipe.h:251:
+   spin_lock_hw(x); \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1773: FILE: include/asm-i386/ipipe.h:255:
+do { \
+   spin_unlock_hw(x); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1774: FILE: include/asm-i386/ipipe.h:256:
+   spin_unlock_hw(x); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1775: FILE: include/asm-i386/ipipe.h:257:
+   local_irq_enable_hw(); \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1779: FILE: include/asm-i386/ipipe.h:261:
+do { \
+   local_irq_save_hw(flags); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1780: FILE: include/asm-i386/ipipe.h:262:
+   local_irq_save_hw(flags); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1781: FILE: include/asm-i386/ipipe.h:263:
+   read_lock_hw(lock); \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1785: FILE: include/asm-i386/ipipe.h:267:
+do { \
+   read_unlock_hw(lock); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1786: FILE: include/asm-i386/ipipe.h:268:
+   read_unlock_hw(lock); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1787: FILE: include/asm-i386/ipipe.h:269:
+   local_irq_restore_hw(flags); \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1791: FILE: include/asm-i386/ipipe.h:273:
+do { \
+   local_irq_save_hw(flags); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1792: FILE: include/asm-i386/ipipe.h:274:
+   local_irq_save_hw(flags); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1793: FILE: include/asm-i386/ipipe.h:275:
+   write_lock_hw(lock); \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 3)
#1797: FILE: include/asm-i386/ipipe.h:279:
+do { \
+   write_unlock_hw(lock); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1798: FILE: include/asm-i386/ipipe.h:280:
+   write_unlock_hw(lock); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1799: FILE: include/asm-i386/ipipe.h:281:
+   local_irq_restore_hw(flags); \$

ERROR:SPACING: space required before the open parenthesis '('
#1806: FILE: include/asm-i386/ipipe.h:288:
+#define __ipipe_check_platform() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1808: FILE: include/asm-i386/ipipe.h:290:
+#define __ipipe_init_platform() do { } while(0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1818: FILE: include/asm-i386/ipipe.h:300:
+int __ipipe_ack_system_irq(unsigned irq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1882: FILE: include/asm-i386/pgalloc.h:53:
+	struct task_struct * p;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1885: FILE: include/asm-i386/pgalloc.h:56:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1889: FILE: include/asm-i386/pgalloc.h:60:
+		if(p->mm)
+		    *pgd_offset(p->mm,address) = entry;

ERROR:SPACING: space required before the open parenthesis '('
#1889: FILE: include/asm-i386/pgalloc.h:60:
+		if(p->mm)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1890: FILE: include/asm-i386/pgalloc.h:61:
+		    *pgd_offset(p->mm,address) = entry;
 		                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1956: FILE: include/asm-i386/system.h:467:
+    __ipipe_unstall_root(); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1957: FILE: include/asm-i386/system.h:468:
+    __asm__ __volatile__("sti; hlt": : :"memory"); \$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1957: FILE: include/asm-i386/system.h:468:
+    __asm__ __volatile__("sti; hlt": : :"memory"); \
                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1957: FILE: include/asm-i386/system.h:468:
+    __asm__ __volatile__("sti; hlt": : :"memory"); \
                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#1958: FILE: include/asm-i386/system.h:469:
+} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1982: FILE: ipipe/x86.c:1:
+/*   -*- linux-c -*-

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1983: FILE: ipipe/x86.c:2:
+ *   linux/ipipe/x86.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1989: FILE: ipipe/x86.c:8:
+ *   the Free Software Foundation, Inc., 675 Mass Ave, Cambridge MA 02139,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1999: FILE: ipipe/x86.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2000: FILE: ipipe/x86.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2000: FILE: ipipe/x86.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#2013: FILE: ipipe/x86.c:31:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#2017: FILE: ipipe/x86.c:35:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#2020: FILE: ipipe/x86.c:38:
+#include <asm/bitops.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2031: FILE: ipipe/x86.c:49:
+extern void (*__ipipe_irq_trampolines[]) (void);	/* in entry.S */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2038: FILE: ipipe/x86.c:56:
+#define __ipipe_set_gate(gate_addr,type,dpl,addr)  \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2038: FILE: ipipe/x86.c:56:
+#define __ipipe_set_gate(gate_addr,type,dpl,addr)  \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2038: FILE: ipipe/x86.c:56:
+#define __ipipe_set_gate(gate_addr,type,dpl,addr)  \
                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gate_addr' - possible side-effects?
#2038: FILE: ipipe/x86.c:56:
+#define __ipipe_set_gate(gate_addr,type,dpl,addr)  \
+do { \
+  int __d0, __d1; \
+  __asm__ __volatile__ ("movw %%dx,%%ax\n\t" \
+	"movw %4,%%dx\n\t" \
+	"movl %%eax,%0\n\t" \
+	"movl %%edx,%1" \
+	:"=m" (*((long *) (gate_addr))), \
+	 "=m" (*(1+(long *) (gate_addr))), "=&a" (__d0), "=&d" (__d1) \
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
+	 "3" ((char *) (addr)),"2" (__KERNEL_CS << 16)); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dpl' may be better as '(dpl)' to avoid precedence issues
#2038: FILE: ipipe/x86.c:56:
+#define __ipipe_set_gate(gate_addr,type,dpl,addr)  \
+do { \
+  int __d0, __d1; \
+  __asm__ __volatile__ ("movw %%dx,%%ax\n\t" \
+	"movw %4,%%dx\n\t" \
+	"movl %%eax,%0\n\t" \
+	"movl %%edx,%1" \
+	:"=m" (*((long *) (gate_addr))), \
+	 "=m" (*(1+(long *) (gate_addr))), "=&a" (__d0), "=&d" (__d1) \
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
+	 "3" ((char *) (addr)),"2" (__KERNEL_CS << 16)); \
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#2039: FILE: ipipe/x86.c:57:
+do { \
+  int __d0, __d1; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2040: FILE: ipipe/x86.c:58:
+  int __d0, __d1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2041: FILE: ipipe/x86.c:59:
+  __asm__ __volatile__ ("movw %%dx,%%ax\n\t" \$

CHECK:SPACING: No space is necessary after a cast
#2045: FILE: ipipe/x86.c:63:
+	:"=m" (*((long *) (gate_addr))), \

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#2045: FILE: ipipe/x86.c:63:
+	:"=m" (*((long *) (gate_addr))), \
 	^

CHECK:SPACING: No space is necessary after a cast
#2046: FILE: ipipe/x86.c:64:
+	 "=m" (*(1+(long *) (gate_addr))), "=&a" (__d0), "=&d" (__d1) \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2046: FILE: ipipe/x86.c:64:
+	 "=m" (*(1+(long *) (gate_addr))), "=&a" (__d0), "=&d" (__d1) \
 	          ^

CHECK:SPACING: No space is necessary after a cast
#2047: FILE: ipipe/x86.c:65:
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#2047: FILE: ipipe/x86.c:65:
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
 	^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2047: FILE: ipipe/x86.c:65:
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
 	                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2047: FILE: ipipe/x86.c:65:
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2047: FILE: ipipe/x86.c:65:
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2047: FILE: ipipe/x86.c:65:
+	:"i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
 	                                     ^

CHECK:SPACING: No space is necessary after a cast
#2048: FILE: ipipe/x86.c:66:
+	 "3" ((char *) (addr)),"2" (__KERNEL_CS << 16)); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2048: FILE: ipipe/x86.c:66:
+	 "3" ((char *) (addr)),"2" (__KERNEL_CS << 16)); \
 	                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#2051: FILE: ipipe/x86.c:69:
+#define __ipipe_get_gate_addr(v) \
+	((void *)((idt_table[v].b & 0xffff0000)|(idt_table[v].a & 0xffff)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2052: FILE: ipipe/x86.c:70:
+	((void *)((idt_table[v].b & 0xffff0000)|(idt_table[v].a & 0xffff)))
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2054: FILE: ipipe/x86.c:72:
+#define __ipipe_set_irq_gate(vector,addr) \
                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vector' may be better as '(vector)' to avoid precedence issues
#2054: FILE: ipipe/x86.c:72:
+#define __ipipe_set_irq_gate(vector,addr) \
+__ipipe_set_gate(idt_table+vector,14,0,addr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2055: FILE: ipipe/x86.c:73:
+__ipipe_set_gate(idt_table+vector,14,0,addr)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2055: FILE: ipipe/x86.c:73:
+__ipipe_set_gate(idt_table+vector,14,0,addr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2055: FILE: ipipe/x86.c:73:
+__ipipe_set_gate(idt_table+vector,14,0,addr)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2055: FILE: ipipe/x86.c:73:
+__ipipe_set_gate(idt_table+vector,14,0,addr)
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2057: FILE: ipipe/x86.c:75:
+#define __ipipe_set_trap_gate(vector,addr) \
                                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vector' may be better as '(vector)' to avoid precedence issues
#2057: FILE: ipipe/x86.c:75:
+#define __ipipe_set_trap_gate(vector,addr) \
+__ipipe_set_gate(idt_table+vector,15,0,addr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2058: FILE: ipipe/x86.c:76:
+__ipipe_set_gate(idt_table+vector,15,0,addr)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2058: FILE: ipipe/x86.c:76:
+__ipipe_set_gate(idt_table+vector,15,0,addr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2058: FILE: ipipe/x86.c:76:
+__ipipe_set_gate(idt_table+vector,15,0,addr)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2058: FILE: ipipe/x86.c:76:
+__ipipe_set_gate(idt_table+vector,15,0,addr)
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2060: FILE: ipipe/x86.c:78:
+#define __ipipe_set_sys_gate(vector,addr) \
                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vector' may be better as '(vector)' to avoid precedence issues
#2060: FILE: ipipe/x86.c:78:
+#define __ipipe_set_sys_gate(vector,addr) \
+__ipipe_set_gate(idt_table+vector,15,3,addr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2061: FILE: ipipe/x86.c:79:
+__ipipe_set_gate(idt_table+vector,15,3,addr)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2061: FILE: ipipe/x86.c:79:
+__ipipe_set_gate(idt_table+vector,15,3,addr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2061: FILE: ipipe/x86.c:79:
+__ipipe_set_gate(idt_table+vector,15,3,addr)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2061: FILE: ipipe/x86.c:79:
+__ipipe_set_gate(idt_table+vector,15,3,addr)
                                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2063: FILE: ipipe/x86.c:81:
+static int __ipipe_ack_common_irq(unsigned irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2072: FILE: ipipe/x86.c:90:
+static unsigned __ipipe_override_irq_startup(unsigned irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2072: FILE: ipipe/x86.c:90:
+static unsigned __ipipe_override_irq_startup(unsigned irq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2075: FILE: ipipe/x86.c:93:
+	unsigned long adflags, hwflags;
+	ipipe_declare_cpuid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2076: FILE: ipipe/x86.c:94:
+	unsigned s;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2091: FILE: ipipe/x86.c:109:
+static void __ipipe_override_irq_shutdown(unsigned irq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2094: FILE: ipipe/x86.c:112:
+	unsigned long adflags, hwflags;
+	ipipe_declare_cpuid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2107: FILE: ipipe/x86.c:125:
+static void __ipipe_override_irq_enable(unsigned irq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2110: FILE: ipipe/x86.c:128:
+	unsigned long adflags, hwflags;
+	ipipe_declare_cpuid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2123: FILE: ipipe/x86.c:141:
+static void __ipipe_override_irq_disable(unsigned irq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2126: FILE: ipipe/x86.c:144:
+	unsigned long adflags, hwflags;
+	ipipe_declare_cpuid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2139: FILE: ipipe/x86.c:157:
+static void __ipipe_override_irq_ack(unsigned irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2145: FILE: ipipe/x86.c:163:
+static void __ipipe_override_irq_end(unsigned irq)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2148: FILE: ipipe/x86.c:166:
+	unsigned long adflags, hwflags;
+	ipipe_declare_cpuid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2165: FILE: ipipe/x86.c:183:
+static void __ipipe_override_irq_affinity(unsigned irq, cpumask_t mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2168: FILE: ipipe/x86.c:186:
+	unsigned long adflags, hwflags;
+	ipipe_declare_cpuid;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2181: FILE: ipipe/x86.c:199:
+/* __ipipe_enable_pipeline() -- Take over the interrupt control from
+   the root domain (i.e. Linux). After this routine has returned, all

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2182: FILE: ipipe/x86.c:200:
+   interrupts go through the pipeline. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2186: FILE: ipipe/x86.c:204:
+	unsigned vector, irq, rirq;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2198: FILE: ipipe/x86.c:216:
+	/* This vector must be set up prior to call
+	   ipipe_critical_enter(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2198: FILE: ipipe/x86.c:216:
+	   ipipe_critical_enter(). */

CHECK:BRACES: Unbalanced braces around else statement
#2226: FILE: ipipe/x86.c:244:
+		} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2238: FILE: ipipe/x86.c:256:
+				     (void (*)(unsigned))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2248: FILE: ipipe/x86.c:266:
+	/* Interpose on the IRQ control routines so we can make them
+	   atomic using hw masking and prevent the interrupt log from

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2252: FILE: ipipe/x86.c:270:
+	   rough way. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2258: FILE: ipipe/x86.c:276:
+	/* The original controller structs may be shared, so we first
+	   save them all before changing any of them. Notice that we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2260: FILE: ipipe/x86.c:278:
+	   XT-PIC/IO-APIC management code is already IPIPE-aware. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_desc[irq].handler->set_affinity"
#2271: FILE: ipipe/x86.c:289:
+		if (irq_desc[irq].handler->set_affinity != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2279: FILE: ipipe/x86.c:297:
+	/* Map the APIC system vectors including the unused ones so that
+	   client domains can virtualize the corresponding IRQs. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2279: FILE: ipipe/x86.c:297:
+	   client domains can virtualize the corresponding IRQs. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2284: FILE: ipipe/x86.c:302:
+				     (void (*)(unsigned))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2307: FILE: ipipe/x86.c:325:
+	/* All interrupts must be pipelined, but the spurious one since we
+	   don't even want to acknowledge it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2307: FILE: ipipe/x86.c:325:
+	   don't even want to acknowledge it. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2312: FILE: ipipe/x86.c:330:
+				     (void (*)(unsigned))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2329: FILE: ipipe/x86.c:347:
+	printk(KERN_WARNING "I-pipe: Pipelining started.\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2336: FILE: ipipe/x86.c:354:
+	unsigned vector, irq;

CHECK:BRACES: Unbalanced braces around else statement
#2357: FILE: ipipe/x86.c:375:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2392: FILE: ipipe/x86.c:410:
+	printk(KERN_WARNING "I-pipe: Pipelining stopped.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2396: FILE: ipipe/x86.c:414:
+/* ipipe_virtualize_irq_from() -- Attach a handler (and optionally a
+   hw acknowledge routine) to an interrupt for the given domain. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2396: FILE: ipipe/x86.c:414:
+   hw acknowledge routine) to an interrupt for the given domain. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2399: FILE: ipipe/x86.c:417:
+			      unsigned irq,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2400: FILE: ipipe/x86.c:418:
+			      void (*handler) (unsigned irq),

WARNING:SPACING: Unnecessary space before function pointer arguments
#2400: FILE: ipipe/x86.c:418:
+			      void (*handler) (unsigned irq),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2401: FILE: ipipe/x86.c:419:
+			      int (*acknowledge) (unsigned irq),

WARNING:SPACING: Unnecessary space before function pointer arguments
#2401: FILE: ipipe/x86.c:419:
+			      int (*acknowledge) (unsigned irq),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2402: FILE: ipipe/x86.c:420:
+			      unsigned modemask)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handler"
#2415: FILE: ipipe/x86.c:433:
+	if (handler != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2416: FILE: ipipe/x86.c:434:
+	if (handler != NULL) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handler"
#2420: FILE: ipipe/x86.c:438:
+			if (handler == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ipd->irqs[irq].handler"
#2425: FILE: ipipe/x86.c:443:
+			   ipd->irqs[irq].handler != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#2438: FILE: ipipe/x86.c:456:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acknowledge"
#2443: FILE: ipipe/x86.c:461:
+	if (acknowledge == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2446: FILE: ipipe/x86.c:464:
+			/* Acknowledge handler unspecified -- this is ok in
+			   non-shared management mode, but we will force the use

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2447: FILE: ipipe/x86.c:465:
+			   of the Linux-defined handler instead. */

CHECK:BRACES: Unbalanced braces around else statement
#2449: FILE: ipipe/x86.c:467:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2451: FILE: ipipe/x86.c:469:
+			/* A valid acknowledge handler to be called in shared mode
+			   is required when declaring a shared IRQ. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2451: FILE: ipipe/x86.c:469:
+			   is required when declaring a shared IRQ. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handler"
#2462: FILE: ipipe/x86.c:480:
+	    handler != NULL &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2466: FILE: ipipe/x86.c:484:
+			/* IRQ enable/disable state is domain-sensitive, so we may
+			   not change it for another domain. What is allowed

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2469: FILE: ipipe/x86.c:487:
+			   thus may be different from ipipe_current_domain. */

WARNING:INDENTED_LABEL: labels should not be indented
#2479: FILE: ipipe/x86.c:497:
+      unlock_and_exit:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2487: FILE: ipipe/x86.c:505:
+ * the current domain. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2489: FILE: ipipe/x86.c:507:
+int ipipe_control_irq(unsigned irq, unsigned clrmask, unsigned setmask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2489: FILE: ipipe/x86.c:507:
+int ipipe_control_irq(unsigned irq, unsigned clrmask, unsigned setmask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2489: FILE: ipipe/x86.c:507:
+int ipipe_control_irq(unsigned irq, unsigned clrmask, unsigned setmask)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipd->irqs[irq].handler"
#2508: FILE: ipipe/x86.c:526:
+	if (ipd->irqs[irq].handler == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2514: FILE: ipipe/x86.c:532:
+^Iif ((clrmask & (IPIPE_HANDLE_MASK | IPIPE_STICKY_MASK)) != 0)^I/* If $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#2514: FILE: ipipe/x86.c:532:
+	if ((clrmask & (IPIPE_HANDLE_MASK | IPIPE_STICKY_MASK)) != 0)	/* If 
one goes, both go. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2516: FILE: ipipe/x86.c:533:
+	if ((clrmask & (IPIPE_HANDLE_MASK | IPIPE_STICKY_MASK)) != 0)	/* If 
+		clrmask |= (IPIPE_HANDLE_MASK | IPIPE_STICKY_MASK);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 166 errors, 264 warnings, 60 checks, 2344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
