WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Here the slablru patch ported to 2.5.30.  Thanks go out to Andrew Morton for

WARNING:TYPO_SPELLING: 'seting' may be misspelled - perhaps 'setting'?
#40: 
     the first page of these slabs for reference bit seting and testing.  Older versions
                                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#	           ChangeSet	1.484   -> 1.487  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#	       fs/nfs/read.c	1.15    -> 1.16   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#	      fs/ufs/super.c	1.25    -> 1.27   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	net/ipv4/netfilter/ip_conntrack_core.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	     fs/adfs/super.c	1.18    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	      kernel/ksyms.c	1.111   -> 1.113  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	     fs/sysv/inode.c	1.22    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	         fs/buffer.c	1.136   -> 1.137  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	   fs/jffs2/malloc.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	net/core/neighbour.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	drivers/ieee1394/eth1394.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	     fs/jbd/revoke.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	       kernel/fork.c	1.57    -> 1.58   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	drivers/block/ll_rw_blk.c	1.98    -> 1.99   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#	          fs/fcntl.c	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#	          fs/dquot.c	1.44    -> 1.45   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#	    fs/smbfs/inode.c	1.27    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#	         fs/dcache.c	1.29    -> 1.31   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#	         mm/vmscan.c	1.88    -> 1.89   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#	  net/ipv4/af_inet.c	1.14    -> 1.15   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#	     fs/ntfs/super.c	1.117   -> 1.119  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
#	    fs/jbd/journal.c	1.20    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#	     fs/devfs/base.c	1.48    -> 1.49   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#	   net/core/skbuff.c	1.13    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#	net/bluetooth/af_bluetooth.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#	      fs/nfs/write.c	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
#	  drivers/md/raid5.c	1.37    -> 1.38   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
#	    net/ipv6/route.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
#	 arch/i386/mm/init.c	1.23    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
#	    lib/radix-tree.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
#	drivers/ieee1394/ieee1394_core.c	1.15    -> 1.16   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
#	      fs/efs/super.c	1.12    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#	net/decnet/dn_table.c	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#	  net/ipv6/ip6_fib.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#	      net/ipv4/tcp.c	1.25    -> 1.26   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#	        fs/dnotify.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#	arch/cris/drivers/usb-host.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#	     fs/qnx4/inode.c	1.21    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#	    fs/jffs2/super.c	1.18    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#	       fs/char_dev.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#	     fs/proc/inode.c	1.14    -> 1.16   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#	      fs/hfs/super.c	1.17    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#	       kernel/user.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#	        net/socket.c	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#	   fs/nfs/pagelist.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#	 net/ipv4/inetpeer.c	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
#	     kernel/signal.c	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#	      fs/bfs/inode.c	1.18    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
#	          mm/shmem.c	1.69    -> 1.70   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
#	arch/arm/mach-arc/mm.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
#	      net/atm/clip.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#	      fs/fat/inode.c	1.42    -> 1.44   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#	 fs/reiserfs/super.c	1.50    -> 1.52   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#	      fs/jfs/super.c	1.19    -> 1.21   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
#	include/linux/slab.h	1.12    -> 1.14   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
#	     net/ipv4/ipmr.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#	 net/ipv4/fib_hash.c	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
#	    net/ipx/af_spx.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
#	    fs/ncpfs/inode.c	1.27    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
#	     fs/coda/inode.c	1.20    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
#	 drivers/scsi/scsi.c	1.34    -> 1.35   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
#	    fs/minix/inode.c	1.26    -> 1.28   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
#	 net/ipv6/af_inet6.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
#	     fs/hpfs/super.c	1.17    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#128: 
#	            fs/bio.c	1.22    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#129: 
#	 fs/jffs/inode-v23.c	1.35    -> 1.36   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
#	  net/unix/af_unix.c	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
#	      fs/namespace.c	1.27    -> 1.28   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
#	      fs/udf/super.c	1.25    -> 1.27   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
#	     fs/ext2/super.c	1.28    -> 1.30   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
#	    fs/romfs/inode.c	1.21    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
#	     fs/affs/super.c	1.26    -> 1.28   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
#	     net/core/sock.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
#	           mm/slab.c	1.26    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
#	      fs/nfs/inode.c	1.47    -> 1.49   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
#	fs/intermezzo/dcache.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
#	fs/freevxfs/vxfs_super.c	1.10    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
#	drivers/usb/host/uhci-hcd.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
#	     fs/ext3/super.c	1.28    -> 1.30   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
#	           mm/rmap.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
#	          fs/locks.c	1.23    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#145: 
#	net/decnet/dn_route.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#146: 
#	    fs/isofs/inode.c	1.23    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
#	          fs/inode.c	1.67    -> 1.69   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
#	    net/ipv4/route.c	1.16    -> 1.17   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#149: 
#	include/linux/dcache.h	1.14    -> 1.15   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#150: 
#	  fs/smbfs/request.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#151: 
#	      fs/block_dev.c	1.78    -> 1.79   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#152: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#153: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#154: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#155: 
# 02/08/01	ed@oscar.et.ca	1.485

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#156: 
# slablru_30-2a

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#157: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#158: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#160: 
--- a/include/linux/slab.h	Fri Aug  2 15:50:10 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_pruner_t' should also have an identifier name
#170: FILE: include/linux/slab.h:55:
+extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#177: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#178: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#178: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#179: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr)                 SetPageReferenced(virt_to_page(addr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#182: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#185: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#185: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#185: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#188: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#188: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#188: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#191: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#191: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#191: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: mm/slab.c:219:
+^Iint ^I^I^Icount;^I^I/* count used to trigger shrink */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: mm/slab.c:258:
+#define^IDFLGS_NONLRU^I0x000002UL^I/* there are reciently allocated $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#213: FILE: mm/slab.c:259:
+#define	DFLGS_NONLRU	0x000002UL	/* there are reciently allocated 
+					   non lru pages in this cache */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: mm/slab.c:259:
+					   non lru pages in this cache */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: mm/slab.c:419:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: mm/slab.c:419:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: mm/slab.c:420:
+/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: mm/slab.c:428:
+	int ret = 0;
+	if (cachep->gfporder) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: mm/slab.c:430:
+		struct page *bpage = virt_to_page(slabp->s_mem - slabp->colouroff);
+		if (bpage != page)

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: mm/slab.c:434:
+	if (cachep->pruner != NULL) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#241: FILE: mm/slab.c:434:
+	if (cachep->pruner != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: mm/slab.c:437:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#244: FILE: mm/slab.c:437:
+	} else 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: mm/slab.c:443:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: mm/slab.c:445:
+int kmem_do_prunes(int gfp_mask) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: mm/slab.c:450:
+        if (gfp_mask & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: mm/slab.c:450:
+        if (gfp_mask & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: mm/slab.c:451:
+                down(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: mm/slab.c:451:
+                down(&cache_chain_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: mm/slab.c:452:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: mm/slab.c:452:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: mm/slab.c:453:
+                if (down_trylock(&cache_chain_sem))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: mm/slab.c:453:
+                if (down_trylock(&cache_chain_sem))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: mm/slab.c:454:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: mm/slab.c:454:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: mm/slab.c:456:
+        list_for_each(p,&cache_chain) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: mm/slab.c:456:
+        list_for_each(p,&cache_chain) {$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#263: FILE: mm/slab.c:456:
+        list_for_each(p,&cache_chain) {
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#263: FILE: mm/slab.c:456:
+        list_for_each(p,&cache_chain) {
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: mm/slab.c:457:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: mm/slab.c:457:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#265: FILE: mm/slab.c:458:
+		if (cachep->pruner != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#273: FILE: mm/slab.c:466:
+
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: mm/slab.c:468:
+        up(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: mm/slab.c:468:
+        up(&cache_chain_sem);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#288: FILE: mm/slab.c:511:
+	BUG_ON(!cache_cache.num);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: mm/slab.c:536:
+		BUG_ON(!(sizes->cs_cachep =

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: mm/slab.c:547:
+^I^I^Icache_names[sizes-cache_sizes].name_dma, $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#313: FILE: mm/slab.c:547:
+			cache_names[sizes-cache_sizes].name_dma, 
 			                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#318: FILE: mm/slab.c:549:
+			SLAB_CACHE_DMA|SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);
 			              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: mm/slab.c:550:
+		BUG_ON(!sizes->cs_dmacachep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: mm/slab.c:590:
+/* Interface to system's page release. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#340: FILE: mm/slab.c:591:
+ * Normally called with pagemap_lru_lock held */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#359: FILE: mm/slab.c:640:
 
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#376: FILE: mm/slab.c:658:
+				BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: mm/slab.c:658:
+				BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#377: FILE: mm/slab.c:659:
+				BUG_ON(*((unsigned long*)(objp + cachep->objsize

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: mm/slab.c:659:
+				BUG_ON(*((unsigned long*)(objp + cachep->objsize

CHECK:SPACING: spaces preferred around that '-' (ctx:ExV)
#378: FILE: mm/slab.c:660:
+					-BYTES_PER_WORD)) != RED_MAGIC1);
 					^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: mm/slab.c:670:
+			BUG_ON((cachep->flags & SLAB_POISON)  &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: mm/slab.c:671:
+			BUG_ON((cachep->flags & SLAB_POISON)  &&
+				kmem_check_poison_obj(cachep, objp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#417: FILE: mm/slab.c:728:
+	BUG_ON((!name) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: mm/slab.c:729:
+	BUG_ON((!name) ||
 		in_interrupt() ||

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: mm/slab.c:763:
+	BUG_ON(flags & ~CREATE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#453: FILE: mm/slab.c:973:
+	BUG_ON(smp_call_function(func, arg, 1, 1));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: mm/slab.c:1021:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: mm/slab.c:1022:
+/* $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: mm/slab.c:1040:
+		BUG_ON(slabp->inuse);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: mm/slab.c:1051:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#499: FILE: mm/slab.c:1052:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: mm/slab.c:1062:
+^Iret = !list_empty(&cachep->slabs_full) || $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: mm/slab.c:1078:
+	BUG_ON(!cachep || in_interrupt() || !is_chained_kmem_cache(cachep));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#527: FILE: mm/slab.c:1082:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: mm/slab.c:1083:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: mm/slab.c:1086:
+ * the last time we shrunk this cache. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: mm/slab.c:1098:
+^I ^Iif (!cachep->growing) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: mm/slab.c:1098:
+^I ^Iif (!cachep->growing) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: mm/slab.c:1101:
+				int nr = __kmem_cache_shrink_locked(cachep);
+				cachep->dflags &= ~DFLGS_NONLRU;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#548: FILE: mm/slab.c:1103:
+				return nr<<cachep->gfporder;
 				         ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#549: FILE: mm/slab.c:1104:
+				return nr<<cachep->gfporder;
+			} else {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#553: FILE: mm/slab.c:1108:
+				return 1<<cachep->gfporder;
 				        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#555: FILE: mm/slab.c:1110:
+			BUG_ON(PageActive(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: mm/slab.c:1114:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#562: FILE: mm/slab.c:1117:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: mm/slab.c:1135:
+	BUG_ON(!cachep || in_interrupt() || cachep->growing);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#585: FILE: mm/slab.c:1223:
+			BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#585: FILE: mm/slab.c:1223:
+			BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#586: FILE: mm/slab.c:1224:
+			BUG_ON(*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: mm/slab.c:1224:
+			BUG_ON(*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: mm/slab.c:1251:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#605: FILE: mm/slab.c:1251:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));
 	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#605: FILE: mm/slab.c:1251:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: mm/slab.c:1261:
+	BUG_ON(in_interrupt() && (flags & __GFP_WAIT));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: mm/slab.c:1299:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: mm/slab.c:1300:
+^I * We want the pagemap_lru_lock, in UP spin locks to not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: mm/slab.c:1302:
+^I * optimizating for speed, we process if we do not get it. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: mm/slab.c:1323:
+^I^Iif (locked) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#669: FILE: mm/slab.c:1351:
+^I/* do not use kmem_freepages - we are not in the lru yet... */      $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#682: FILE: mm/slab.c:1374:
+	BUG_ON(objnr >= cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#683: FILE: mm/slab.c:1375:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#683: FILE: mm/slab.c:1375:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);
 	                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#689: FILE: mm/slab.c:1379:
+		BUG_ON(i == objnr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#699: FILE: mm/slab.c:1388:
+		BUG_ON(!(cachep->gfpflags & GFP_DMA));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: mm/slab.c:1390:
+		BUG_ON(cachep->gfpflags & GFP_DMA);

CHECK:BRACES: braces {} should be used on all arms of this statement
#711: FILE: mm/slab.c:1412:
+	if (unlikely(cachep->gfporder)) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#712: FILE: mm/slab.c:1413:
+		void *objb = slabp->s_mem-slabp->colouroff;
 		                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#713: FILE: mm/slab.c:1414:
+		void *objb = slabp->s_mem-slabp->colouroff;
+		kmem_touch_page(objb);

CHECK:BRACES: Unbalanced braces around else statement
#714: FILE: mm/slab.c:1415:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#720: FILE: mm/slab.c:1419:
+		BUG_ON(kmem_check_poison_obj(cachep, objp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: mm/slab.c:1422:
+		BUG_ON(xchg((unsigned long *)objp, RED_MAGIC2) !=

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#731: FILE: mm/slab.c:1424:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: mm/slab.c:1424:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -
 		                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#747: FILE: mm/slab.c:1603:
+		BUG_ON(xchg((unsigned long *)objp, RED_MAGIC1) != RED_MAGIC2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: mm/slab.c:1605:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#749: FILE: mm/slab.c:1605:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -
 		                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#761: FILE: mm/slab.c:1745:
+	BUG_ON(cachep != GET_PAGE_CACHE(virt_to_page(objp)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#771: FILE: mm/slab.c:1950:
+			BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#789: FILE: mm/slab.c:2003:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#807: FILE: mm/slab.c:2089:
+		BUG_ON(slabp->inuse != cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#815: FILE: mm/slab.c:2095:
+		BUG_ON(slabp->inuse == cachep->num || !slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#823: FILE: mm/slab.c:2101:
+		BUG_ON(slabp->inuse);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: mm/vmscan.c:108:
+^I^I * counter for the cache and to tell us if we should try to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#840: FILE: mm/vmscan.c:113:
+^I^I^Iif (kmem_count_page(page, TestClearPageReferenced(page))) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#841: FILE: mm/vmscan.c:114:
+				if ((nr_pages -= kmem_shrink_slab(page)) <= 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#855: FILE: mm/vmscan.c:153:
+		if (page_referenced(page) && (PageSlab(page) || page_mapping_inuse(page)) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: mm/vmscan.c:419:
+^I/* $

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#937: FILE: arch/cris/drivers/usb-host.c:2333:
+	usb_desc_cache = kmem_cache_create("usb_desc_cache", sizeof(USB_EP_Desc_t), 0, 0, NULL, NULL, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: arch/i386/mm/init.c:486:
+                SLAB_HWCACHE_ALIGN | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: arch/i386/mm/init.c:486:
+                SLAB_HWCACHE_ALIGN | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL, NULL);$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1009: FILE: drivers/scsi/scsi.c:2535:
+		sgp->slab = kmem_cache_create(sgp->name, size, 0, SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1090: FILE: fs/block_dev.c:252:
+^I^I^I^I^I 0, SLAB_HWCACHE_ALIGN, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1091: FILE: fs/block_dev.c:253:
+^I^I^I^I         NULL, init_once, NULL);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1145: FILE: fs/dcache.c:126:
+	BUG_ON(!list_empty(&dentry->d_lru));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1170: FILE: fs/dcache.c:350:
+		BUG_ON(atomic_read(&dentry->d_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: fs/dcache.c:570:
+ * more memory. $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1220: FILE: fs/dcache.c:674:
+	BUG_ON(!list_empty(&entry->d_alias));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1229: FILE: fs/dcache.c:973:
+	BUG_ON(!list_empty(&entry->d_hash));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1265: FILE: fs/dcache.c:1405:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1397: FILE: fs/freevxfs/vxfs_super.c:250:
+	if (vxfs_inode_cachep) {
 		return (register_filesystem(&vxfs_fs_type));
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1435: FILE: fs/inode.c:390:
+	for(; goal; goal--) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: fs/inode.c:417:
+ * more memory. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1511: FILE: fs/intermezzo/dcache.c:130:
+                                  NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1511: FILE: fs/intermezzo/dcache.c:130:
+                                  NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2167: FILE: net/ipv4/netfilter/ip_conntrack_core.c:1355:
+^I                                        SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2219: FILE: net/ipv6/af_inet6.c:658:
+                                           SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2219: FILE: net/ipv6/af_inet6.c:658:
+                                           SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2223: FILE: net/ipv6/af_inet6.c:661:
+                                           SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2223: FILE: net/ipv6/af_inet6.c:661:
+                                           SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2227: FILE: net/ipv6/af_inet6.c:664:
+                                           SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2227: FILE: net/ipv6/af_inet6.c:664:
+                                           SLAB_HWCACHE_ALIGN, NULL, NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2263: FILE: net/ipx/af_spx.c:876:
+                                                      NULL, NULL, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2263: FILE: net/ipx/af_spx.c:876:
+                                                      NULL, NULL, NULL);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000442240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 185 warnings, 33 checks, 1730 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000442240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
