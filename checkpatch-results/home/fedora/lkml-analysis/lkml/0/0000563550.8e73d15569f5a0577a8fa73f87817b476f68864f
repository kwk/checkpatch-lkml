WARNING:TYPO_SPELLING: 'mutliple' may be misspelled - perhaps 'multiple'?
#12: 
Subject: [PATCH] mutliple root devs (take II)
                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'afterall' may be misspelled - perhaps 'after all'?
#27: 
fairly large re-ordering of code afterall.
                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'arguements' may be misspelled - perhaps 'arguments'?
#30: 
devices passed to the kernel as arguements before giving up on the rootfs.
                                ^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff --recursive --unified --ignore-all-space linux/Documentation/kernel-parameters.txt linux-2.4.0.11/Documentation/kernel-parameters.txt

WARNING:TYPO_SPELLING: 'suceeds' may be misspelled - perhaps 'succeeds'?
#58: FILE: Documentation/kernel-parameters.txt:478:
+                        presented until kernel suceeds in mounting a
                                                ^^^^^^^

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#59: FILE: Documentation/kernel-parameters.txt:479:
+                        filesystem, multiple independant 'root=' entries
                                              ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: Documentation/kernel-parameters.txt:480:
+                        allowed as well.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: fs/super.c:22:
+ *                                    Tracy Camp <campt@openmars.com> 11/22/00 $

ERROR:SPACING: space required before the open parenthesis '('
#90: FILE: fs/super.c:1534:
+	for(root_device_index = 0; root_device_index < number_root_devs; root_device_index++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#91: FILE: fs/super.c:1535:
+		printk("VFS: trying root on %s\n",&root_device_name[root_device_index][0]);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#91: FILE: fs/super.c:1535:
+		printk("VFS: trying root on %s\n",&root_device_name[root_device_index][0]);
 		                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#91: FILE: fs/super.c:1535:
+		printk("VFS: trying root on %s\n",&root_device_name[root_device_index][0]);
 		                                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#92: FILE: fs/super.c:1536:
+		if(root_device_name[root_device_index][0] != '\0')
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: fs/super.c:1536:
+		if(root_device_name[root_device_index][0] != '\0')

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#94: FILE: fs/super.c:1538:
+			ROOT_DEV = name_to_kdev_t(&root_device_name[root_device_index][0]); /* translate */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: fs/super.c:1540:
+		devfs_make_root (&root_device_name[root_device_index][0]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: fs/super.c:1541:
+^I^Ihandle = devfs_find_handle (NULL, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#97: FILE: fs/super.c:1541:
+		handle = devfs_find_handle (NULL, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: fs/super.c:1542:
+		handle = devfs_find_handle (NULL, 
+				&root_device_name[root_device_index][0],

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: fs/super.c:1579:
+			&root_device_name[root_device_index][0], kdevname (ROOT_DEV));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#110: FILE: fs/super.c:1580:
+		printk("VFS: Unable to mount root fs on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/super.c:1581:
+		printk("VFS: Unable to mount root fs on %s\n",
 			kdevname(ROOT_DEV));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#121: FILE: fs/super.c:1606:
+	printk("VFS: Unable to mount root fs on %s", kdevname(ROOT_DEV));

WARNING:TYPO_SPELLING: 'corrent' may be misspelled - perhaps 'correct'?
#123: FILE: fs/super.c:1608:
+	printk("VFS: Please append a corrent \"root=\" boot option\n");
 	                             ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#123: FILE: fs/super.c:1608:
+	printk("VFS: Please append a corrent \"root=\" boot option\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#133: FILE: fs/super.c:1789:
+/* this function seems to only be used when after an initrd usage,
+* so the actual value of ROOT_DEV hasn't been determined until mount_root

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: fs/super.c:1796:
+*/               $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/fs.h:1234:
+extern kdev_t name_to_kdev_t(char *); /* in init/main.c */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#154: FILE: include/linux/fs.h:1234:
+extern kdev_t name_to_kdev_t(char *); /* in init/main.c */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#167: FILE: init/main.c:134:
+int number_root_devs = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#199: FILE: init/main.c:288:
+/* number_root_devs is initially 0 and not touched except for
+incrementing, so this function should be re-callable with the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#200: FILE: init/main.c:289:
+desired results */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: init/main.c:291:
+       memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);       $

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#204: FILE: init/main.c:291:
+       memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);       

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: init/main.c:291:
+       memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);       $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: init/main.c:291:
+       memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);       

WARNING:SIZEOF_PARENTHESIS: sizeof root_device_name[number_root_devs] should be sizeof(root_device_name[number_root_devs])
#204: FILE: init/main.c:291:
+       memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);       

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#205: FILE: init/main.c:292:
+	for (i = 0; i < sizeof root_device_name[number_root_devs] - 1; ++i) {
+           ch = line[i];

WARNING:SIZEOF_PARENTHESIS: sizeof root_device_name[number_root_devs] should be sizeof(root_device_name[number_root_devs])
#205: FILE: init/main.c:292:
+	for (i = 0; i < sizeof root_device_name[number_root_devs] - 1; ++i) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: init/main.c:293:
+           ch = line[i];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: init/main.c:293:
+           ch = line[i];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: init/main.c:294:
+           if ( ch == ',') {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: init/main.c:294:
+           if ( ch == ',') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 15)
#207: FILE: init/main.c:294:
+           if ( ch == ',') {
+               if(number_root_devs == 0) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#207: FILE: init/main.c:294:
+           if ( ch == ',') {

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: init/main.c:295:
+               if(number_root_devs == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: init/main.c:295:
+               if(number_root_devs == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#208: FILE: init/main.c:295:
+               if(number_root_devs == 0) {
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: init/main.c:295:
+               if(number_root_devs == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#208: FILE: init/main.c:295:
+               if(number_root_devs == 0) {
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);
+                       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: init/main.c:296:
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: init/main.c:296:
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: init/main.c:297:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: init/main.c:297:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: init/main.c:298:
+               number_root_devs++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: init/main.c:298:
+               number_root_devs++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: init/main.c:299:
+               if(number_root_devs >= 8) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: init/main.c:299:
+               if(number_root_devs >= 8) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#212: FILE: init/main.c:299:
+               if(number_root_devs >= 8) {
+                       break;

ERROR:SPACING: space required before the open parenthesis '('
#212: FILE: init/main.c:299:
+               if(number_root_devs >= 8) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#212: FILE: init/main.c:299:
+               if(number_root_devs >= 8) {
+                       break;
+		       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: init/main.c:300:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: init/main.c:300:
+                       break;$

WARNING:TABSTOP: Statements should start on a tabstop
#214: FILE: init/main.c:301:
+		       }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: init/main.c:302:
+               i++;             $

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: init/main.c:302:
+               i++;             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: init/main.c:302:
+               i++;             $

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: init/main.c:303:
+               line += i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: init/main.c:303:
+               line += i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: init/main.c:304:
+               i = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: init/main.c:304:
+               i = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: init/main.c:305:
+               if (strncmp (line, "/dev/", 5) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: init/main.c:305:
+               if (strncmp (line, "/dev/", 5) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#218: FILE: init/main.c:305:
+               if (strncmp (line, "/dev/", 5) == 0) {
+                       line += 5;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: init/main.c:305:
+               if (strncmp (line, "/dev/", 5) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#218: FILE: init/main.c:305:
+               if (strncmp (line, "/dev/", 5) == 0) {
+                       line += 5;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: init/main.c:306:
+                       line += 5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: init/main.c:306:
+                       line += 5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: init/main.c:307:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: init/main.c:307:
+                       }$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#224: FILE: init/main.c:309:
+               memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: init/main.c:309:
+               memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: init/main.c:309:
+               memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: init/main.c:309:
+               memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);

WARNING:SIZEOF_PARENTHESIS: sizeof root_device_name[number_root_devs] should be sizeof(root_device_name[number_root_devs])
#224: FILE: init/main.c:309:
+               memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: init/main.c:310:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: init/main.c:310:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: init/main.c:311:
+           if ( isspace (ch) || (ch == '\0') ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: init/main.c:311:
+           if ( isspace (ch) || (ch == '\0') ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 15)
#226: FILE: init/main.c:311:
+           if ( isspace (ch) || (ch == '\0') ) {
+               if(number_root_devs == 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#226: FILE: init/main.c:311:
+           if ( isspace (ch) || (ch == '\0') ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#226: FILE: init/main.c:311:
+           if ( isspace (ch) || (ch == '\0') ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#226: FILE: init/main.c:311:
+           if ( isspace (ch) || (ch == '\0') ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: init/main.c:312:
+               if(number_root_devs == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: init/main.c:312:
+               if(number_root_devs == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#227: FILE: init/main.c:312:
+               if(number_root_devs == 0) {
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);

ERROR:SPACING: space required before the open parenthesis '('
#227: FILE: init/main.c:312:
+               if(number_root_devs == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#227: FILE: init/main.c:312:
+               if(number_root_devs == 0) {
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: init/main.c:313:
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: init/main.c:313:
+                       ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: init/main.c:314:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: init/main.c:314:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: init/main.c:315:
+               number_root_devs++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: init/main.c:315:
+               number_root_devs++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: init/main.c:316:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: init/main.c:316:
+               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: init/main.c:317:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: init/main.c:317:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: init/main.c:318:
+           root_device_name[number_root_devs][i] = ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: init/main.c:318:
+           root_device_name[number_root_devs][i] = ch;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#235: FILE: init/main.c:320:
+printk("root_dev_setup number_root_devs: %d\n",number_root_devs);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: init/main.c:320:
+printk("root_dev_setup number_root_devs: %d\n",number_root_devs);
                                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563550.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 66 warnings, 3 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563550.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
