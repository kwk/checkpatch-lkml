WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: include/linux/security-stack.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#67: FILE: include/linux/security-stack.h:12:
+extern fastcall struct security_list *security_get_value(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/security-stack.h:12:
+extern fastcall struct security_list *security_get_value(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#71: FILE: include/linux/security-stack.h:16:
+extern fastcall struct security_list *security_set_value(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/security-stack.h:16:
+extern fastcall struct security_list *security_set_value(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#74: FILE: include/linux/security-stack.h:19:
+extern fastcall struct security_list *security_add_value(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/security-stack.h:19:
+extern fastcall struct security_list *security_add_value(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/security-stack.h:22:
+extern int security_unlink_value(struct hlist_node *n);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#78: FILE: include/linux/security-stack.h:23:
+extern fastcall struct security_list *security_del_value(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/security-stack.h:23:
+extern fastcall struct security_list *security_del_value(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: include/linux/security.h:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#102: FILE: include/linux/security.h:51:
+#define security_get_value_type(head, id, type) ( { \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#104: FILE: include/linux/security.h:53:
+	v ? hlist_entry(v, type, lsm_list) : NULL; } )

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#106: FILE: include/linux/security.h:55:
+#define security_set_value_type(head, id, value) \
+	security_set_value((head), id, &(value)->lsm_list);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#109: FILE: include/linux/security.h:58:
+#define security_add_value_type(head, id, value) \
+	security_add_value((head), id, &(value)->lsm_list);

ERROR:SPACING: space prohibited after that open parenthesis '('
#112: FILE: include/linux/security.h:61:
+#define security_del_value_type(head, id, type) ( { \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#115: FILE: include/linux/security.h:64:
+	v ? hlist_entry(v, type, lsm_list) : NULL; } )

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/security.h:67:
+extern void security_disown_value(struct hlist_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hlist_head *' should also have an identifier name
#118: FILE: include/linux/security.h:67:
+extern void security_disown_value(struct hlist_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: security/security.c:50:
+security_set_value(struct hlist_head *head, int security_id,
+	struct security_list *obj_node)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#161: FILE: security/security.c:52:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: security/security.c:66:
+security_add_value(struct hlist_head *head, int security_id,
+	struct security_list *obj_node)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#177: FILE: security/security.c:68:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: security/security.c:92:
+	int ret = 0;
+	spin_lock(&stacker_value_spinlock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#255: FILE: security/security.c:146:
+EXPORT_SYMBOL_GPL(security_get_value);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#256: FILE: security/security.c:147:
+EXPORT_SYMBOL_GPL(security_set_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#257: FILE: security/security.c:148:
+EXPORT_SYMBOL_GPL(security_add_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#258: FILE: security/security.c:149:
+EXPORT_SYMBOL_GPL(security_unlink_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: security/security.c:150:
+EXPORT_SYMBOL_GPL(security_disown_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#260: FILE: security/security.c:151:
+EXPORT_SYMBOL_GPL(security_del_value);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 11 warnings, 15 checks, 199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
