WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#102: FILE: include/asm-x86/desc.h:333:
+	BUG_ON(ret != vector);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#159: FILE: arch/x86/kernel/io_apic.c:1204:
+	BUG_ON(!spin_is_locked(&vector_lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#159: FILE: arch/x86/kernel/io_apic.c:1204:
+	BUG_ON(!spin_is_locked(&vector_lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#195: FILE: arch/x86/kernel/io_apic.c:1243:
+	BUG_ON(!spin_is_locked(&vector_lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#195: FILE: arch/x86/kernel/io_apic.c:1243:
+	BUG_ON(!spin_is_locked(&vector_lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: arch/x86/kernel/io_apic.c:1341:
+		BUG_ON(desc == NULL || desc == NON_IRQ_DESC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#270: FILE: arch/x86/kernel/io_apic.c:1341:
+		BUG_ON(desc == NULL || desc == NON_IRQ_DESC);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#277: FILE: arch/x86/kernel/io_apic.c:1347:
+		if (desc == NULL || desc == NON_IRQ_DESC)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#304: FILE: arch/x86/kernel/io_apic.c:2406:
+		if (desc == NULL || desc == NON_IRQ_DESC)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#420: FILE: arch/x86/kernel/irq_32.c:237:
+	if (unlikely(desc == NULL || desc == NON_IRQ_DESC)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "desc"
#433: FILE: arch/x86/kernel/irq_64.c:225:
+	if (likely(desc != NULL && desc != NON_IRQ_DESC)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: include/asm-x86/irq.h:51:
+extern int grab_irq_vector(struct irq_desc *desc, unsigned int vector,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#472: FILE: arch/x86/kernel/irq.c:1:
+#include <linux/irq.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: arch/x86/kernel/irq.c:6:
+int grab_irq_vector(struct irq_desc *desc, unsigned int vector,
+		   cpumask_t *domain)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: arch/x86/kernel/irq.c:10:
+	BUG_ON(!spin_is_locked(&vector_lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#481: FILE: arch/x86/kernel/irq.c:10:
+	BUG_ON(!spin_is_locked(&vector_lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#534: FILE: arch/x86/kernel/irqinit_32.c:85:
+		BUG_ON(ret != vector);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#564: FILE: arch/x86/kernel/irqinit_64.c:140:
+		BUG_ON(ret != vector);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000226519.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 7 checks, 437 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000226519.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
