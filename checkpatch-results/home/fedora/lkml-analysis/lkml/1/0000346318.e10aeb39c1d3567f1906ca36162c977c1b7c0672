WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#186: FILE: arch/x86/Kconfig.debug:135:
+choice
+	prompt "IO delay type"
+	default IO_DELAY_0X80
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#190: FILE: arch/x86/Kconfig.debug:139:
+config IO_DELAY_0X80
+	bool "port 0x80 based port-IO delay [recommended]"
+	help
+	  This is the traditional Linux IO delay used for in/out_p.
+	  It is the most tested hence safest selection here.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#196: FILE: arch/x86/Kconfig.debug:145:
+config IO_DELAY_0XED
+	bool "port 0xed based port-IO delay"
+	help
+	  Use port 0xed as the IO delay. This frees up port 0x80 which is
+	  often used as a hardware-debug port.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#202: FILE: arch/x86/Kconfig.debug:151:
+config IO_DELAY_UDELAY
+	bool "udelay based port-IO delay"
+	help
+	  Use udelay(2) as the IO delay method. This provides the delay
+	  while not having any side-effect on the IO port space.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#208: FILE: arch/x86/Kconfig.debug:157:
+config IO_DELAY_NONE
+	bool "no port-IO delay"
+	help
+	  No port-IO delay. Will break on old boxes that require port-IO
+	  delay for certain operations. Should work on most new machines.
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: arch/x86/boot/compressed/misc_32.c:280:
+	outb(0xff & (pos >> 9), vidport+1);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#256: FILE: arch/x86/boot/compressed/misc_32.c:282:
+	outb(0xff & (pos >> 1), vidport+1);
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#273: FILE: arch/x86/boot/compressed/misc_64.c:273:
+	outb(0xff & (pos >> 9), vidport+1);
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#275: FILE: arch/x86/boot/compressed/misc_64.c:275:
+	outb(0xff & (pos >> 1), vidport+1);
 	                               ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#310: FILE: arch/x86/kernel/io_delay.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#322: FILE: arch/x86/kernel/io_delay.c:13:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:MISPLACED_INIT: __initdata should be placed after io_delay_override
#327: FILE: arch/x86/kernel/io_delay.c:18:
+static int __initdata io_delay_override;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#359: FILE: arch/x86/kernel/io_delay.c:50:
+	printk(KERN_NOTICE "%s: using 0xed I/O delay port\n", id->ident);

WARNING:MISPLACED_INIT: __initdata should be placed after io_delay_0xed_port_dmi_table[]
#369: FILE: arch/x86/kernel/io_delay.c:60:
+static struct dmi_system_id __initdata io_delay_0xed_port_dmi_table[] = {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#413: FILE: arch/x86/kernel/setup_32.c:651:
+	io_delay_init();;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: include/asm-x86/io_32.h:253:
+extern void native_io_delay(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: include/asm-x86/io_32.h:256:
+extern void io_delay_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: include/asm-x86/io_64.h:38:
+extern void native_io_delay(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: include/asm-x86/io_64.h:41:
+extern void io_delay_init(void);

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#484: FILE: include/asm-x86/io_64.h:60:
+__asm__ __volatile__ ("out" #s " %" s1 "0,%" s2 "1" : : "a" (value), "Nd" (port))
                                                                       ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: include/asm-x86/io_64.h:63:
+__OUT1(s,x) __OUT2(s,s1,"w"); } \
         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: include/asm-x86/io_64.h:63:
+__OUT1(s,x) __OUT2(s,s1,"w"); } \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: include/asm-x86/io_64.h:63:
+__OUT1(s,x) __OUT2(s,s1,"w"); } \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: include/asm-x86/io_64.h:64:
+__OUT1(s##_p,x) __OUT2(s,s1,"w"); slow_down_io(); }
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: include/asm-x86/io_64.h:64:
+__OUT1(s##_p,x) __OUT2(s,s1,"w"); slow_down_io(); }
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: include/asm-x86/io_64.h:64:
+__OUT1(s##_p,x) __OUT2(s,s1,"w"); slow_down_io(); }
                            ^

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#497: FILE: include/asm-x86/io_64.h:70:
+__asm__ __volatile__ ("in" #s " %" s2 "1,%" s1 "0" : "=a" (_v) : "Nd" (port))
                                                                   ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: include/asm-x86/io_64.h:72:
+#define __IN(s,s1) \
               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#502: FILE: include/asm-x86/io_64.h:72:
+#define __IN(s,s1) \
+__IN1(s) __IN2(s,s1,"w"); return _v; } \
+__IN1(s##_p) __IN2(s,s1,"w"); slow_down_io(); return _v; }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#502: FILE: include/asm-x86/io_64.h:72:
+#define __IN(s,s1) \
+__IN1(s) __IN2(s,s1,"w"); return _v; } \
+__IN1(s##_p) __IN2(s,s1,"w"); slow_down_io(); return _v; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#502: FILE: include/asm-x86/io_64.h:72:
+#define __IN(s,s1) \
+__IN1(s) __IN2(s,s1,"w"); return _v; } \
+__IN1(s##_p) __IN2(s,s1,"w"); slow_down_io(); return _v; }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: include/asm-x86/io_64.h:73:
+__IN1(s) __IN2(s,s1,"w"); return _v; } \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: include/asm-x86/io_64.h:73:
+__IN1(s) __IN2(s,s1,"w"); return _v; } \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: include/asm-x86/io_64.h:74:
+__IN1(s##_p) __IN2(s,s1,"w"); slow_down_io(); return _v; }
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: include/asm-x86/io_64.h:74:
+__IN1(s##_p) __IN2(s,s1,"w"); slow_down_io(); return _v; }
                        ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#516: FILE: kernel/sysctl.c:56:
+#include <asm/io.h>

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346318.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 13 warnings, 11 checks, 336 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346318.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
