WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: drivers/block/brd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#169: FILE: drivers/block/brd.c:20:
+#include <asm/uaccess.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#178: FILE: drivers/block/brd.c:29:
+	unsigned	brd_blocksize;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#183: FILE: drivers/block/brd.c:34:
+	spinlock_t		brd_lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: drivers/block/brd.c:50:
+	BUG_ON(page && page->index != idx);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#224: FILE: drivers/block/brd.c:75:
+	if (radix_tree_insert(&brd->brd_pages, idx, page)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: drivers/block/brd.c:78:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#228: FILE: drivers/block/brd.c:79:
+		BUG_ON(page->index != idx);

CHECK:BRACES: Unbalanced braces around else statement
#229: FILE: drivers/block/brd.c:80:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: drivers/block/brd.c:100:
+		nr_pages = radix_tree_gang_lookup(&brd->brd_pages,
+				(void **)pages, pos, FREE_BATCH);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: drivers/block/brd.c:103:
+			BUG_ON(pages[i]->index < pos);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: drivers/block/brd.c:104:
+			pos = pages[i]->index+1;
 			                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#262: FILE: drivers/block/brd.c:113:
+	unsigned int offset = (sector & (PAGE_SECTORS-1)) << 9;
 	                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#279: FILE: drivers/block/brd.c:130:
+	unsigned int offset = (sector & (PAGE_SECTORS-1)) << 9;
 	                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: drivers/block/brd.c:135:
+	BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: drivers/block/brd.c:144:
+		BUG_ON(!page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#305: FILE: drivers/block/brd.c:156:
+	unsigned int offset = (sector & (PAGE_SECTORS-1)) << 9;
 	                                             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#310: FILE: drivers/block/brd.c:161:
+	if (page) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#314: FILE: drivers/block/brd.c:165:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#320: FILE: drivers/block/brd.c:171:
+		if (page) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#324: FILE: drivers/block/brd.c:175:
+		} else

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#329: FILE: drivers/block/brd.c:180:
+static int brd_do_bvec(struct brd_device *brd, struct page *page, unsigned int len, unsigned int off, int rw, sector_t sector)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#341: FILE: drivers/block/brd.c:192:
+	if (rw == READ) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#344: FILE: drivers/block/brd.c:195:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: drivers/block/brd.c:223:
+		unsigned int len = bvec->bv_len;
+		err = brd_do_bvec(brd, bvec->bv_page, len, bvec->bv_offset, rw, sector);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/block/brd.c:236:
+static int brd_ioctl(struct inode *inode, struct file *file,
+			unsigned int cmd, unsigned long arg)

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#409: FILE: drivers/block/brd.c:260:
+static struct block_device_operations brd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#430: FILE: drivers/block/brd.c:281:
+	rd_size = simple_strtol(str,NULL,0);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#430: FILE: drivers/block/brd.c:281:
+	rd_size = simple_strtol(str,NULL,0);
 	                                ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#430: FILE: drivers/block/brd.c:281:
+	rd_size = simple_strtol(str,NULL,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#433: FILE: drivers/block/brd.c:284:
+}
+static int __init ramdisk_size2(char *str)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#437: FILE: drivers/block/brd.c:288:
+}
+static int __init rd_nr(char *str)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#439: FILE: drivers/block/brd.c:290:
+	rd_nr = simple_strtol(str, NULL, 0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#442: FILE: drivers/block/brd.c:293:
+__setup("ramdisk=", ramdisk_size);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#443: FILE: drivers/block/brd.c:294:
+__setup("ramdisk_size=", ramdisk_size2);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#444: FILE: drivers/block/brd.c:295:
+__setup("rd_nr=", rd_nr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: drivers/block/brd.c:298:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#470: FILE: drivers/block/brd.c:321:
+	disk = brd->brd_disk = alloc_disk(1);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: drivers/block/brd.c:436:
+	blk_register_region(MKDEV(RAMDISK_MAJOR, 0), range,
+				  THIS_MODULE, brd_probe, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#587: FILE: drivers/block/brd.c:438:
+	printk(KERN_INFO "brd: module loaded\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369664.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 23 checks, 514 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369664.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
