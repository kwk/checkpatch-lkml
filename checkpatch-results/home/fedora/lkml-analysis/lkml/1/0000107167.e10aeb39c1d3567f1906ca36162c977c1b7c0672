WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters-fixes-for-linus

WARNING:TYPO_SPELLING: 'overlow' may be misspelled - perhaps 'overflow'?
#119: 
      perf_counter: Add event overlow handling
                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: arch/powerpc/include/asm/perf_counter.h:30:
+	int		(*compute_mmcr)(u64 events[], int n_ev,
+				unsigned int hwc[], unsigned long mmcr[]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: arch/powerpc/include/asm/perf_counter.h:32:
+	int		(*get_constraint)(u64 event, unsigned long *mskp,
+				unsigned long *valp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: arch/powerpc/include/asm/perf_counter.h:34:
+	int		(*get_alternatives)(u64 event, unsigned int flags,
+				u64 alt[]);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: arch/powerpc/include/asm/perf_counter.h:58:
+extern int register_power_pmu(struct power_pmu *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct power_pmu *' should also have an identifier name
#278: FILE: arch/powerpc/include/asm/perf_counter.h:58:
+extern int register_power_pmu(struct power_pmu *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#329: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#334: FILE: arch/powerpc/kernel/mpc7450-pmu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#590: FILE: arch/powerpc/kernel/mpc7450-pmu.c:257:
+};
+static const u32 pmcsel_mask[N_COUNTER] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <MMCR0_PMCnCE>
#658: FILE: arch/powerpc/kernel/mpc7450-pmu.c:325:
+		mmcr0 |= MMCR0_PMCnCE;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#684: FILE: arch/powerpc/kernel/mpc7450-pmu.c:351:
+^I[PERF_COUNT_HW_BRANCH_MISSES] ^I^I= 0x41c, /* PM_BR_MPRED */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#695: FILE: arch/powerpc/kernel/mpc7450-pmu.c:362:
+^I[C(L1D)] = {^I^I/* ^IRESULT_ACCESS^IRESULT_MISS */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#700: FILE: arch/powerpc/kernel/mpc7450-pmu.c:367:
+^I[C(L1I)] = {^I^I/* ^IRESULT_ACCESS^IRESULT_MISS */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#705: FILE: arch/powerpc/kernel/mpc7450-pmu.c:372:
+^I[C(LL)] = {^I^I/* ^IRESULT_ACCESS^IRESULT_MISS */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#710: FILE: arch/powerpc/kernel/mpc7450-pmu.c:377:
+^I[C(DTLB)] = {^I^I/* ^IRESULT_ACCESS^IRESULT_MISS */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#715: FILE: arch/powerpc/kernel/mpc7450-pmu.c:382:
+^I[C(ITLB)] = {^I^I/* ^IRESULT_ACCESS^IRESULT_MISS */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#720: FILE: arch/powerpc/kernel/mpc7450-pmu.c:387:
+^I[C(BPU)] = {^I^I/* ^IRESULT_ACCESS^IRESULT_MISS */$

CHECK:CAMELCASE: Avoid CamelCase: <MMCR0_PMCjCE>
#775: FILE: arch/powerpc/kernel/perf_counter.c:56:
+#define MMCR0_PMCjCE		MMCR0_PMCnCE

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#784: FILE: arch/powerpc/kernel/perf_counter.c:65:
+}
+static inline void perf_set_pmu_inuse(int inuse) { }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#790: FILE: arch/powerpc/kernel/perf_counter.c:71:
+}
+static inline void perf_read_regs(struct pt_regs *regs) { }

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: arch/powerpc/kernel/perf_counter.c:90:
+		unsigned long slot = (mmcra & MMCRA_SLOT) >> MMCRA_SLOT_SHIFT;
+		if (slot > 1)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1209: FILE: arch/powerpc/kernel/power4-pmu.c:191:
 	[PM_ISU1_ALT] =
+		    { 0x20080000000000ul, 0x88000000000000ul, PM_ISU1, 0 },

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1218: FILE: arch/powerpc/kernel/power4-pmu.c:194:
 	[PM_IFU_ALT] =
+		    { 0x02200000000000ul, 0x08820000000000ul, PM_IFU, 41 },

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1369: FILE: arch/powerpc/kernel/power5+-pmu.c:131:
+static unsigned long unit_cons[PM_LASTUNIT+1][2] = {
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1525: FILE: arch/powerpc/kernel/power5+-pmu.c:682:
+	if (strcmp(cur_cpu_spec->oprofile_cpu_type, "ppc64/power5+")
+	    && strcmp(cur_cpu_spec->oprofile_cpu_type, "ppc64/power5++"))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1557: FILE: arch/powerpc/kernel/power5-pmu.c:135:
+static unsigned long unit_cons[PM_LASTUNIT+1][2] = {
                                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1754: FILE: arch/powerpc/kernel/power6-pmu.c:46:
+#define MMCR1_PMC1_LLA		(1ul << 44)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1755: FILE: arch/powerpc/kernel/power6-pmu.c:47:
+#define MMCR1_PMC1_LLA_VALUE	(1ul << 39)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1756: FILE: arch/powerpc/kernel/power6-pmu.c:48:
+#define MMCR1_PMC1_ADDR_SEL	(1ul << 35)

CHECK:SPACING: No space is necessary after a cast
#1931: FILE: arch/powerpc/kernel/power7-pmu.c:271:
+			mmcr1 |= (unsigned long) unit

CHECK:SPACING: No space is necessary after a cast
#1933: FILE: arch/powerpc/kernel/power7-pmu.c:273:
+			mmcr1 |= (unsigned long) combine

CHECK:SPACING: No space is necessary after a cast
#1938: FILE: arch/powerpc/kernel/power7-pmu.c:277:
+				mmcr1 |= (unsigned long) l2sel

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2015: FILE: arch/powerpc/kernel/ppc970-pmu.c:188:
+static unsigned long unit_cons[PM_LASTUNIT+1][2] = {
                                           ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2135: FILE: arch/powerpc/kernel/ppc970-pmu.c:493:
+	if (strcmp(cur_cpu_spec->oprofile_cpu_type, "ppc64/970")
+	    && strcmp(cur_cpu_spec->oprofile_cpu_type, "ppc64/970MP"))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2169: FILE: arch/powerpc/kernel/time.c:540:
+#define clear_perf_counter_pending()	__get_cpu_var(perf_counter_pending) = 0

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2254: FILE: arch/x86/include/asm/pgtable_32.h:53:
+^I(in_nmi() ? KM_NMI_PTE : ^I\$

ERROR:SPACING: space prohibited after that open square bracket '['
#2313: FILE: arch/x86/kernel/cpu/perf_counter.c:400:
+		[ C(RESULT_ACCESS) ] = 0x0040, /* Data Cache Accesses        */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2313: FILE: arch/x86/kernel/cpu/perf_counter.c:400:
+		[ C(RESULT_ACCESS) ] = 0x0040, /* Data Cache Accesses        */

ERROR:SPACING: space prohibited after that open square bracket '['
#2314: FILE: arch/x86/kernel/cpu/perf_counter.c:401:
+		[ C(RESULT_MISS)   ] = 0x0041, /* Data Cache Misses          */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2314: FILE: arch/x86/kernel/cpu/perf_counter.c:401:
+		[ C(RESULT_MISS)   ] = 0x0041, /* Data Cache Misses          */

ERROR:SPACING: space prohibited after that open square bracket '['
#2318: FILE: arch/x86/kernel/cpu/perf_counter.c:404:
+		[ C(RESULT_ACCESS) ] = 0x0042, /* Data Cache Refills from L2 */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2318: FILE: arch/x86/kernel/cpu/perf_counter.c:404:
+		[ C(RESULT_ACCESS) ] = 0x0042, /* Data Cache Refills from L2 */

ERROR:SPACING: space prohibited after that open square bracket '['
#2324: FILE: arch/x86/kernel/cpu/perf_counter.c:408:
+		[ C(RESULT_ACCESS) ] = 0x0267, /* Data Prefetcher :attempts  */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2324: FILE: arch/x86/kernel/cpu/perf_counter.c:408:
+		[ C(RESULT_ACCESS) ] = 0x0267, /* Data Prefetcher :attempts  */

ERROR:SPACING: space prohibited after that open square bracket '['
#2325: FILE: arch/x86/kernel/cpu/perf_counter.c:409:
+		[ C(RESULT_MISS)   ] = 0x0167, /* Data Prefetcher :cancelled */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2325: FILE: arch/x86/kernel/cpu/perf_counter.c:409:
+		[ C(RESULT_MISS)   ] = 0x0167, /* Data Prefetcher :cancelled */

ERROR:SPACING: space prohibited after that open square bracket '['
#2334: FILE: arch/x86/kernel/cpu/perf_counter.c:422:
+		[ C(RESULT_ACCESS) ] = 0x014B, /* Prefetch Instructions :Load */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2334: FILE: arch/x86/kernel/cpu/perf_counter.c:422:
+		[ C(RESULT_ACCESS) ] = 0x014B, /* Prefetch Instructions :Load */

ERROR:SPACING: space prohibited after that open square bracket '['
#2342: FILE: arch/x86/kernel/cpu/perf_counter.c:428:
+		[ C(RESULT_ACCESS) ] = 0x037D, /* Requests to L2 Cache :IC+DC */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2342: FILE: arch/x86/kernel/cpu/perf_counter.c:428:
+		[ C(RESULT_ACCESS) ] = 0x037D, /* Requests to L2 Cache :IC+DC */

ERROR:SPACING: space prohibited after that open square bracket '['
#2343: FILE: arch/x86/kernel/cpu/perf_counter.c:429:
+		[ C(RESULT_MISS)   ] = 0x037E, /* L2 Cache Misses : IC+DC     */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2343: FILE: arch/x86/kernel/cpu/perf_counter.c:429:
+		[ C(RESULT_MISS)   ] = 0x037E, /* L2 Cache Misses : IC+DC     */

ERROR:SPACING: space prohibited after that open square bracket '['
#2347: FILE: arch/x86/kernel/cpu/perf_counter.c:432:
+		[ C(RESULT_ACCESS) ] = 0x017F, /* L2 Fill/Writeback           */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2347: FILE: arch/x86/kernel/cpu/perf_counter.c:432:
+		[ C(RESULT_ACCESS) ] = 0x017F, /* L2 Fill/Writeback           */

ERROR:SPACING: space prohibited after that open square bracket '['
#2357: FILE: arch/x86/kernel/cpu/perf_counter.c:442:
+		[ C(RESULT_ACCESS) ] = 0x0040, /* Data Cache Accesses        */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2357: FILE: arch/x86/kernel/cpu/perf_counter.c:442:
+		[ C(RESULT_ACCESS) ] = 0x0040, /* Data Cache Accesses        */

ERROR:SPACING: space prohibited after that open square bracket '['
#2358: FILE: arch/x86/kernel/cpu/perf_counter.c:443:
+		[ C(RESULT_MISS)   ] = 0x0046, /* L1 DTLB and L2 DLTB Miss   */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2358: FILE: arch/x86/kernel/cpu/perf_counter.c:443:
+		[ C(RESULT_MISS)   ] = 0x0046, /* L1 DTLB and L2 DLTB Miss   */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2470: FILE: arch/x86/kernel/cpu/perf_counter.c:1633:
+		memcpy(to, map+offset, size);
 		              ^

CHECK:SPACING: No space is necessary after a cast
#2588: FILE: arch/x86/mm/gup.c:238:
+	len = (unsigned long) nr_pages << PAGE_SHIFT;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2591: FILE: arch/x86/mm/gup.c:241:
+	if (unlikely(!access_ok(write ? VERIFY_WRITE : VERIFY_READ,
+					(void __user *)start, len)))

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2610: FILE: arch/x86/mm/gup.c:260:
+	 * address down to the the page and take a ref on it.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2724: FILE: include/linux/perf_counter.h:284:
+^I * ^Istruct perf_event_header^Iheader;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2725: FILE: include/linux/perf_counter.h:285:
+^I * ^Iu64^I^I^I^Iid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2726: FILE: include/linux/perf_counter.h:286:
+^I * ^Iu64^I^I^I^Ilost;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2825: FILE: include/linux/perf_counter.h:639:
+extern void set_perf_counter_pending(void);

WARNING:MEMORY_BARRIER: memory barrier without comment
#3090: FILE: kernel/perf_counter.c:2211:
+	smp_rmb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3483: FILE: tools/perf/builtin-annotate.c:31:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3545: FILE: tools/perf/builtin-annotate.c:93:
 
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct map *' should also have an identifier name
#3575: FILE: tools/perf/builtin-annotate.c:197:
+	u64	 (*map_ip)(struct map *, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#3575: FILE: tools/perf/builtin-annotate.c:197:
+	u64	 (*map_ip)(struct map *, u64);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3682: FILE: tools/perf/builtin-annotate.c:1055:
+	if (percent >= MIN_RED)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3684: FILE: tools/perf/builtin-annotate.c:1057:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3721: FILE: tools/perf/builtin-annotate.c:1119:
+		if (offset < len && sym_ext) {
[...]
+		} else if (sym->hist_sum)
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3744: FILE: tools/perf/builtin-annotate.c:1134:
+			if (!prev_line || strcmp(prev_line, path)
+				       || color != prev_color) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3764: FILE: tools/perf/builtin-annotate.c:1162:
+	while (*p != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:INDENTED_LABEL: labels should not be indented
#3837: FILE: tools/perf/builtin-annotate.c:1235:
+	next:

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#3910: FILE: tools/perf/builtin-annotate.c:1300:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", (u64)start, (u64)end, filename);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3910: FILE: tools/perf/builtin-annotate.c:1300:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", (u64)start, (u64)end, filename);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#3940: FILE: tools/perf/builtin-record.c:40:
+static int			call_graph			= 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4200: FILE: tools/perf/builtin-record.c:435:
+			PROT_READ|PROT_WRITE, MAP_SHARED, fd[nr_cpu][counter], 0);
 			         ^

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#4293: FILE: tools/perf/builtin-report.c:49:
+static char		default_parent_pattern[] = "^sys_|^do_page_fault";

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct map *' should also have an identifier name
#4404: FILE: tools/perf/builtin-report.c:216:
+	u64	 (*map_ip)(struct map *, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4404: FILE: tools/perf/builtin-report.c:216:
+	u64	 (*map_ip)(struct map *, u64);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#4562: FILE: tools/perf/builtin-report.c:657:
+static int sort__has_parent = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4580: FILE: tools/perf/builtin-report.c:693:
+			int ret = regcomp(&parent_regex, parent_pattern, REG_EXTENDED);
+			if (ret) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'se == &sort_parent'
#4614: FILE: tools/perf/builtin-report.c:778:
+		if (exclude_other && (se == &sort_parent))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#4628: FILE: tools/perf/builtin-report.c:795:
+resolve_symbol(struct thread *thread, struct map **mapp,
                                                    ^^^^

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#4632: FILE: tools/perf/builtin-report.c:799:
+	struct map *map = mapp ? *mapp : NULL;
 	                  ^^^^

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#4632: FILE: tools/perf/builtin-report.c:799:
+	struct map *map = mapp ? *mapp : NULL;
 	                          ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map"
#4645: FILE: tools/perf/builtin-report.c:812:
+	if (map != NULL) {

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#4646: FILE: tools/perf/builtin-report.c:813:
+		if (mapp)
 		    ^^^^

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#4647: FILE: tools/perf/builtin-report.c:814:
+			*mapp = map;
 			 ^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#4660: FILE: tools/perf/builtin-report.c:827:
+		if ((long long)ip < 0)
+		dso = kernel_dso;

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#4750: FILE: tools/perf/builtin-report.c:1044:
+	fprintf(fp, "# (%Ld samples)\n", (u64)total_samples);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'se == &sort_parent'
#4756: FILE: tools/perf/builtin-report.c:1049:
+		if (exclude_other && (se == &sort_parent))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'se == &sort_parent'
#4766: FILE: tools/perf/builtin-report.c:1059:
+		if (exclude_other && (se == &sort_parent))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4778: FILE: tools/perf/builtin-report.c:1076:
+	if (sort_order == default_sort_order &&
+			parent_pattern == default_parent_pattern) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4797: FILE: tools/perf/builtin-report.c:1111:
+	if (chain->nr*sizeof(u64) > chain_size)
 	             ^

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#4835: FILE: tools/perf/builtin-report.c:1148:
+		dprintf("... chain: nr:%Lu\n", chain->nr);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#4844: FILE: tools/perf/builtin-report.c:1157:
+				dprintf("..... %2d: %016Lx\n", i, chain->ips[i]);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#4903: FILE: tools/perf/builtin-report.c:1283:
+	dprintf("%p [%p]: PERF_EVENT_LOST: id:%Ld: lost:%Ld\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4934: FILE: tools/perf/builtin-report.c:1314:
+		if (((i & 15) == 15) || i == event->header.size-1) {
 		                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4936: FILE: tools/perf/builtin-report.c:1316:
+			for (j = 0; j < 15-(i & 15); j++)
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4939: FILE: tools/perf/builtin-report.c:1319:
+				if (isprint(raw_event[i-15+j]))
 				                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4939: FILE: tools/perf/builtin-report.c:1319:
+				if (isprint(raw_event[i-15+j]))
 				                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4940: FILE: tools/perf/builtin-report.c:1320:
+					cdprintf("%c", raw_event[i-15+j]);
 					                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4940: FILE: tools/perf/builtin-report.c:1320:
+					cdprintf("%c", raw_event[i-15+j]);
 					                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5008: FILE: tools/perf/builtin-report.c:1459:
+	dprintf("\n%p [%p]: event: %d\n",
 			(void *)(offset + head),

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#5084: FILE: tools/perf/builtin-stat.c:86:
+static int			run_idx			=  0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5091: FILE: tools/perf/builtin-stat.c:93:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5187: FILE: tools/perf/builtin-stat.c:231:
+	if ((pid = fork()) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5214: FILE: tools/perf/builtin-stat.c:258:
+			(double)noise[0]/(count[0]+1)*100.0);
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5214: FILE: tools/perf/builtin-stat.c:258:
+			(double)noise[0]/(count[0]+1)*100.0);
 			                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5214: FILE: tools/perf/builtin-stat.c:258:
+			(double)noise[0]/(count[0]+1)*100.0);
 			                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5224: FILE: tools/perf/builtin-stat.c:268:
+	if (attrs[counter].type == PERF_TYPE_SOFTWARE &&
+		attrs[counter].config == PERF_COUNT_SW_TASK_CLOCK) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5225: FILE: tools/perf/builtin-stat.c:269:
+		attrs[counter].config == PERF_COUNT_SW_TASK_CLOCK) {
+

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#5235: FILE: tools/perf/builtin-stat.c:279:
+	fprintf(stderr, " %14Ld  %-20s", count[0], event_name(counter));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5238: FILE: tools/perf/builtin-stat.c:282:
+	if (runtime_cycles_avg &&
+		attrs[counter].type == PERF_TYPE_HARDWARE &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5240: FILE: tools/perf/builtin-stat.c:284:
+			attrs[counter].config == PERF_COUNT_HW_INSTRUCTIONS) {
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5246: FILE: tools/perf/builtin-stat.c:290:
+				(double)count[0]/runtime_nsecs_avg*1000.0);
 				                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5246: FILE: tools/perf/builtin-stat.c:290:
+				(double)count[0]/runtime_nsecs_avg*1000.0);
 				                                  ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#5344: FILE: tools/perf/builtin-stat.c:343:
+		fprintf(stderr, "debug: %20s[%d]: %Ld\n", name, idx, *val);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5346: FILE: tools/perf/builtin-stat.c:345:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5363: FILE: tools/perf/builtin-stat.c:362:
+			update_avg("counter/0", j,
+				event_res_avg[j]+0, event_res[i][j]+0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5363: FILE: tools/perf/builtin-stat.c:362:
+				event_res_avg[j]+0, event_res[i][j]+0);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5363: FILE: tools/perf/builtin-stat.c:362:
+				event_res_avg[j]+0, event_res[i][j]+0);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5365: FILE: tools/perf/builtin-stat.c:364:
+			update_avg("counter/1", j,
+				event_res_avg[j]+1, event_res[i][j]+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5365: FILE: tools/perf/builtin-stat.c:364:
+				event_res_avg[j]+1, event_res[i][j]+1);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5365: FILE: tools/perf/builtin-stat.c:364:
+				event_res_avg[j]+1, event_res[i][j]+1);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5367: FILE: tools/perf/builtin-stat.c:366:
+			update_avg("counter/2", j,
+				event_res_avg[j]+2, event_res[i][j]+2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5367: FILE: tools/perf/builtin-stat.c:366:
+				event_res_avg[j]+2, event_res[i][j]+2);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5367: FILE: tools/perf/builtin-stat.c:366:
+				event_res_avg[j]+2, event_res[i][j]+2);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5369: FILE: tools/perf/builtin-stat.c:368:
+			update_avg("scaled", j,
+				event_scaled_avg + j, event_scaled[i]+j);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5369: FILE: tools/perf/builtin-stat.c:368:
+				event_scaled_avg + j, event_scaled[i]+j);
 				                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5450: FILE: tools/perf/builtin-stat.c:435:
+	fprintf(stderr, " %14.9f  seconds time elapsed.\n",
+			(double)walltime_nsecs_avg/1e9);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5450: FILE: tools/perf/builtin-stat.c:435:
+			(double)walltime_nsecs_avg/1e9);
 			                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5490: FILE: tools/perf/builtin-stat.c:514:
+			fprintf(stderr, "[ perf stat: executing run #%d ... ]\n", run_idx+1);
 			                                                                 ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#5527: FILE: tools/perf/builtin-top.c:197:
+		printf("%Ld", (u64)attrs[0].sample_period);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5600: FILE: tools/perf/types.h:1:
+#ifndef _PERF_TYPES_H

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5641: FILE: tools/perf/util/ctype.c:24:
+	PS,P, P, P, R, P, P, P, R, R, G, R, P, P, R, P,		/*  32.. 47 */
 	  ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#5751: FILE: tools/perf/util/symbol.c:24:
+			(u64)start, (unsigned long)len, name, self->hist, (void *)(unsigned long)obj_start);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dso *' should also have an identifier name
#5850: FILE: tools/perf/util/symbol.h:24:
+	struct symbol    *(*find_symbol)(struct dso *, u64 ip);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5901: FILE: tools/perf/util/util.h:343:
+#define isprint(x) sane_istest(x,GIT_PRINT)
                                 ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107167.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 44 warnings, 70 checks, 5298 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107167.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
