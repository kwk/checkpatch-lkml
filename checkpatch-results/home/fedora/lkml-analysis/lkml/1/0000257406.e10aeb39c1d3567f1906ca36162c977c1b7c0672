WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
> > The irq2pcap[] array looks horrible to me. It's actually a sparse array.

WARNING:BAD_SIGN_OFF: email address 'philipp.zabel@gmail.com, linux-kernel@vger.kernel.org' might be better as 'philipp.zabel@gmail.com linux-kernel@vger.kernel.org'
#78: 
Cc: philipp.zabel@gmail.com, linux-kernel@vger.kernel.org

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'philipp.zabel@gmail.com, linux-kernel@vger.kernel.org', should be: 'philipp.zabel@gmail.com (linux-kernel@vger.kernel.org)'
#78: 
Cc: philipp.zabel@gmail.com, linux-kernel@vger.kernel.org

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: drivers/mfd/ezx-pcap.c:1:
+/* Driver for Motorola PCAP2 as present in EZX phones

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#135: FILE: drivers/mfd/ezx-pcap.c:41:
+	u_int32_t ret = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#160: FILE: drivers/mfd/ezx-pcap.c:66:
+void ezx_pcap_write(u_int8_t reg_num, u_int32_t value)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#164: FILE: drivers/mfd/ezx-pcap.c:70:
+		| (reg_num<<PCAP_REGISTER_ADDRESS_SHIFT);
 		          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#170: FILE: drivers/mfd/ezx-pcap.c:76:
+void ezx_pcap_read(u_int8_t reg_num, u_int32_t *value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#172: FILE: drivers/mfd/ezx-pcap.c:78:
+	u_int32_t frame = PCAP_REGISTER_READ_OP_BIT

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#173: FILE: drivers/mfd/ezx-pcap.c:79:
+		| (reg_num<<PCAP_REGISTER_ADDRESS_SHIFT);
 		          ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#179: FILE: drivers/mfd/ezx-pcap.c:85:
+void ezx_pcap_set_sw(u_int8_t sw, u_int8_t what, u_int8_t val)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#181: FILE: drivers/mfd/ezx-pcap.c:87:
+	u_int32_t tmp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#190: FILE: drivers/mfd/ezx-pcap.c:96:
+static u_int8_t vaux_table[][8] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#202: FILE: drivers/mfd/ezx-pcap.c:108:
+int ezx_pcap_set_vaux(u_int8_t vaux, u_int8_t what, u_int8_t val)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#204: FILE: drivers/mfd/ezx-pcap.c:110:
+	u_int8_t reg, shift, mask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#205: FILE: drivers/mfd/ezx-pcap.c:111:
+	u_int32_t tmp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#313: FILE: drivers/mfd/ezx-pcap.c:219:
+	u_int32_t reg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#325: FILE: drivers/mfd/ezx-pcap.c:231:
+	u_int32_t tmp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#346: FILE: drivers/mfd/ezx-pcap.c:252:
+	u_int32_t isr;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#350: FILE: drivers/mfd/ezx-pcap.c:256:
+	for (i = ARRAY_SIZE(pcap2irq)-1; i >= 0; i--) {
 	                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: drivers/mfd/ezx-pcap.c:258:
+		unsigned int pirq = pcap2irq[i];
+		if (!(isr & irq2pcap[pirq]))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#387: FILE: drivers/mfd/ezx-pcap.c:293:
+		printk(KERN_ERR "Unable to get IRQ for pcap!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#393: FILE: drivers/mfd/ezx-pcap.c:299:
+		printk(KERN_ERR "Unable to register SSP handler!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: drivers/mfd/ezx-pcap.c:305:
+	ssp_config(&ezx_ssp_dev,
+		(SSCR0_Motorola | SSCR0_DataSize(16) | SSCR0_EDSS),

CHECK:CAMELCASE: Avoid CamelCase: <SSCR0_Motorola>
#399: FILE: drivers/mfd/ezx-pcap.c:305:
+		(SSCR0_Motorola | SSCR0_DataSize(16) | SSCR0_EDSS),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SSCR0_DataSize>
#399: FILE: drivers/mfd/ezx-pcap.c:305:
+		(SSCR0_Motorola | SSCR0_DataSize(16) | SSCR0_EDSS),

CHECK:CAMELCASE: Avoid CamelCase: <SSCR1_TxTresh>
#400: FILE: drivers/mfd/ezx-pcap.c:306:
+		(SSCR1_TxTresh(1) | SSCR1_RxTresh(1)),

CHECK:CAMELCASE: Avoid CamelCase: <SSCR1_RxTresh>
#400: FILE: drivers/mfd/ezx-pcap.c:306:
+		(SSCR1_TxTresh(1) | SSCR1_RxTresh(1)),

CHECK:CAMELCASE: Avoid CamelCase: <SSCR0_SerClkDiv>
#401: FILE: drivers/mfd/ezx-pcap.c:307:
+		0, SSCR0_SerClkDiv(pcap_data->clk));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: drivers/mfd/ezx-pcap.c:327:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#422: FILE: drivers/mfd/ezx-pcap.c:328:
+	printk(KERN_INFO "ezx-pcap: ssp driver registered\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#472: FILE: include/linux/mfd/ezx-pcap.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#501: FILE: include/linux/mfd/ezx-pcap.h:30:
+#define pbit(reg, bit)	((reg << PCAP_REGISTER_ADDRESS_SHIFT) | bit)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bit' may be better as '(bit)' to avoid precedence issues
#501: FILE: include/linux/mfd/ezx-pcap.h:30:
+#define pbit(reg, bit)	((reg << PCAP_REGISTER_ADDRESS_SHIFT) | bit)

WARNING:TYPO_SPELLING: 'acessible' may be misspelled - perhaps 'accessible'?
#503: FILE: include/linux/mfd/ezx-pcap.h:32:
+/* registers acessible by both pcap ports */
              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'acessible' may be misspelled - perhaps 'accessible'?
#521: FILE: include/linux/mfd/ezx-pcap.h:50:
+/* registers acessible by pcap port 1 only (a1200, e2 & e6) */
              ^^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#536: FILE: include/linux/mfd/ezx-pcap.h:65:
+#define PCAP_IRQ_ADCDONE	(1 << 0)	/* AD Conversion Done Port 1 */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#537: FILE: include/linux/mfd/ezx-pcap.h:66:
+#define PCAP_IRQ_TS		(1 << 1)	/* Touch Screen */

CHECK:BIT_MACRO: Prefer using the BIT macro
#538: FILE: include/linux/mfd/ezx-pcap.h:67:
+#define PCAP_IRQ_1HZ		(1 << 2)	/* 1HZ Timer */

CHECK:BIT_MACRO: Prefer using the BIT macro
#539: FILE: include/linux/mfd/ezx-pcap.h:68:
+#define PCAP_IRQ_WH		(1 << 3)	/* "...high"??? */

CHECK:BIT_MACRO: Prefer using the BIT macro
#540: FILE: include/linux/mfd/ezx-pcap.h:69:
+#define PCAP_IRQ_WL		(1 << 4)	/* "...low"??? */

CHECK:BIT_MACRO: Prefer using the BIT macro
#541: FILE: include/linux/mfd/ezx-pcap.h:70:
+#define PCAP_IRQ_TODA		(1 << 5)	/* RTC Time Of Day?

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#542: FILE: include/linux/mfd/ezx-pcap.h:71:
+#define PCAP_IRQ_TODA		(1 << 5)	/* RTC Time Of Day?
+						     (see "RTC_TODA") */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#542: FILE: include/linux/mfd/ezx-pcap.h:71:
+						     (see "RTC_TODA") */

CHECK:BIT_MACRO: Prefer using the BIT macro
#543: FILE: include/linux/mfd/ezx-pcap.h:72:
+#define PCAP_IRQ_USB4V		(1 << 6)	/* USB OTG */

CHECK:BIT_MACRO: Prefer using the BIT macro
#544: FILE: include/linux/mfd/ezx-pcap.h:73:
+#define PCAP_IRQ_ONOFF		(1 << 7)	/* in blob: "ONOFFSNS" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#545: FILE: include/linux/mfd/ezx-pcap.h:74:
+#define PCAP_IRQ_ONOFF2		(1 << 8)	/* in blob: "ONOFFSNS2" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#546: FILE: include/linux/mfd/ezx-pcap.h:75:
+#define PCAP_IRQ_USB1V		(1 << 9)	/* USB below 1volt???

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#547: FILE: include/linux/mfd/ezx-pcap.h:76:
+#define PCAP_IRQ_USB1V		(1 << 9)	/* USB below 1volt???
+						     in blob: "USBDET_1V" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#547: FILE: include/linux/mfd/ezx-pcap.h:76:
+						     in blob: "USBDET_1V" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#548: FILE: include/linux/mfd/ezx-pcap.h:77:
+#define PCAP_IRQ_MOBPORT	(1 << 10)	/* GSM-related?? ("mobport",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#549: FILE: include/linux/mfd/ezx-pcap.h:78:
+#define PCAP_IRQ_MOBPORT	(1 << 10)	/* GSM-related?? ("mobport",
+				see 958_MotDoc.pdf); in blob: "MOBSENSB" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#549: FILE: include/linux/mfd/ezx-pcap.h:78:
+				see 958_MotDoc.pdf); in blob: "MOBSENSB" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#550: FILE: include/linux/mfd/ezx-pcap.h:79:
+#define PCAP_IRQ_MB2		(1 << 11)	/* Mic; in blob: "MB2SNS" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#551: FILE: include/linux/mfd/ezx-pcap.h:80:
+#define PCAP_IRQ_A1		(1 << 12)	/* Audio jack;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#552: FILE: include/linux/mfd/ezx-pcap.h:81:
+#define PCAP_IRQ_A1		(1 << 12)	/* Audio jack;
+						     in blob: "A1SNS" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#552: FILE: include/linux/mfd/ezx-pcap.h:81:
+						     in blob: "A1SNS" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#553: FILE: include/linux/mfd/ezx-pcap.h:82:
+#define PCAP_IRQ_ST		(1 << 13)	/* called "MSTB" in blob */

CHECK:BIT_MACRO: Prefer using the BIT macro
#554: FILE: include/linux/mfd/ezx-pcap.h:83:
+#define PCAP_IRQ_PC		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#555: FILE: include/linux/mfd/ezx-pcap.h:84:
+#define PCAP_IRQ_WARM		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#556: FILE: include/linux/mfd/ezx-pcap.h:85:
+#define PCAP_IRQ_EOL		(1 << 16)	/* battery End Of Life???

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#557: FILE: include/linux/mfd/ezx-pcap.h:86:
+#define PCAP_IRQ_EOL		(1 << 16)	/* battery End Of Life???
+					(see below); in blob: "EOL_STAT" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#557: FILE: include/linux/mfd/ezx-pcap.h:86:
+					(see below); in blob: "EOL_STAT" */

CHECK:BIT_MACRO: Prefer using the BIT macro
#558: FILE: include/linux/mfd/ezx-pcap.h:87:
+#define PCAP_IRQ_CLK		(1 << 17)	/* called "CLK_STAT" in blob */

CHECK:BIT_MACRO: Prefer using the BIT macro
#559: FILE: include/linux/mfd/ezx-pcap.h:88:
+#define PCAP_IRQ_SYSRST		(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#560: FILE: include/linux/mfd/ezx-pcap.h:89:
+#define PCAP_IRQ_ADCDONE2	(1 << 20)	/* AD Conversion Done Port 2 */

CHECK:BIT_MACRO: Prefer using the BIT macro
#561: FILE: include/linux/mfd/ezx-pcap.h:90:
+#define PCAP_IRQ_SOFTRESET	(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#562: FILE: include/linux/mfd/ezx-pcap.h:91:
+#define PCAP_IRQ_MNEXB		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#565: FILE: include/linux/mfd/ezx-pcap.h:94:
+#define PCAP_VREG2_V1_STBY	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#566: FILE: include/linux/mfd/ezx-pcap.h:95:
+#define PCAP_VREG2_V2_STBY	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#568: FILE: include/linux/mfd/ezx-pcap.h:97:
+#define PCAP_VREG2_V3_STBY	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#569: FILE: include/linux/mfd/ezx-pcap.h:98:
+#define PCAP_VREG2_V4_STBY	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#570: FILE: include/linux/mfd/ezx-pcap.h:99:
+#define PCAP_VREG2_V5_STBY	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#572: FILE: include/linux/mfd/ezx-pcap.h:101:
+#define PCAP_VREG2_V6_STBY	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#573: FILE: include/linux/mfd/ezx-pcap.h:102:
+#define PCAP_VREG2_V7_STBY	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#575: FILE: include/linux/mfd/ezx-pcap.h:104:
+#define PCAP_VREG2_V8_STBY	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#576: FILE: include/linux/mfd/ezx-pcap.h:105:
+#define PCAP_VREG2_V9_STBY	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#577: FILE: include/linux/mfd/ezx-pcap.h:106:
+#define PCAP_VREG2_V10_STBY	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#578: FILE: include/linux/mfd/ezx-pcap.h:107:
+#define PCAP_VREG2_V1_LOWPWR	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#579: FILE: include/linux/mfd/ezx-pcap.h:108:
+#define PCAP_VREG2_V2_LOWPWR	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#581: FILE: include/linux/mfd/ezx-pcap.h:110:
+#define PCAP_VREG2_V3_LOWPWR	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#582: FILE: include/linux/mfd/ezx-pcap.h:111:
+#define PCAP_VREG2_V4_LOWPWR	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#583: FILE: include/linux/mfd/ezx-pcap.h:112:
+#define PCAP_VREG2_V5_LOWPWR	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#585: FILE: include/linux/mfd/ezx-pcap.h:114:
+#define PCAP_VREG2_V6_LOWPWR	(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#586: FILE: include/linux/mfd/ezx-pcap.h:115:
+#define PCAP_VREG2_V7_LOWPWR	(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#588: FILE: include/linux/mfd/ezx-pcap.h:117:
+#define PCAP_VREG2_V8_LOWPWR	(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#589: FILE: include/linux/mfd/ezx-pcap.h:118:
+#define PCAP_VREG2_V9_LOWPWR	(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#590: FILE: include/linux/mfd/ezx-pcap.h:119:
+#define PCAP_VREG2_V10_LOWPWR	(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#610: FILE: include/linux/mfd/ezx-pcap.h:139:
+#define PCAP_BATT_B_FDBK		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#611: FILE: include/linux/mfd/ezx-pcap.h:140:
+#define PCAP_BATT_EXT_ISENSE		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#614: FILE: include/linux/mfd/ezx-pcap.h:143:
+#define PCAP_BATT_I_COIN		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#615: FILE: include/linux/mfd/ezx-pcap.h:144:
+#define PCAP_BATT_COIN_CH_EN		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#618: FILE: include/linux/mfd/ezx-pcap.h:147:
+#define PCAP_BATT_EOL_CMP_EN		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#619: FILE: include/linux/mfd/ezx-pcap.h:148:
+#define PCAP_BATT_BATT_DET_EN		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#620: FILE: include/linux/mfd/ezx-pcap.h:149:
+#define PCAP_BATT_THERMBIAS_CTRL	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#622: FILE: include/linux/mfd/ezx-pcap.h:151:
+#define PCAP_ADC_ADEN			(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#623: FILE: include/linux/mfd/ezx-pcap.h:152:
+#define PCAP_ADC_RAND			(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#624: FILE: include/linux/mfd/ezx-pcap.h:153:
+#define PCAP_ADC_AD_SEL1		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#625: FILE: include/linux/mfd/ezx-pcap.h:154:
+#define PCAP_ADC_AD_SEL2		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#632: FILE: include/linux/mfd/ezx-pcap.h:161:
+#define PCAP_ADC_ATOX			(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#633: FILE: include/linux/mfd/ezx-pcap.h:162:
+#define PCAP_ADC_MTR1			(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#634: FILE: include/linux/mfd/ezx-pcap.h:163:
+#define PCAP_ADC_MTR2			(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#637: FILE: include/linux/mfd/ezx-pcap.h:166:
+#define PCAP_ADC_TS_REF_LOWPWR		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#638: FILE: include/linux/mfd/ezx-pcap.h:167:
+#define PCAP_ADC_TS_REFENB		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#639: FILE: include/linux/mfd/ezx-pcap.h:168:
+#define PCAP_ADC_BATT_I_POLARITY	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#640: FILE: include/linux/mfd/ezx-pcap.h:169:
+#define PCAP_ADC_BATT_I_ADC		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#646: FILE: include/linux/mfd/ezx-pcap.h:175:
+#define PCAP_ADR_ADINC1			(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#647: FILE: include/linux/mfd/ezx-pcap.h:176:
+#define PCAP_ADR_ADINC2			(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#648: FILE: include/linux/mfd/ezx-pcap.h:177:
+#define PCAP_ADR_ASC			(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#649: FILE: include/linux/mfd/ezx-pcap.h:178:
+#define PCAP_ADR_ONESHOT		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#651: FILE: include/linux/mfd/ezx-pcap.h:180:
+#define PCAP_BUSCTRL_FSENB		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#652: FILE: include/linux/mfd/ezx-pcap.h:181:
+#define PCAP_BUSCTRL_USB_SUSPEND	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#653: FILE: include/linux/mfd/ezx-pcap.h:182:
+#define PCAP_BUSCTRL_USB_PU		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#654: FILE: include/linux/mfd/ezx-pcap.h:183:
+#define PCAP_BUSCTRL_USB_PD		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#655: FILE: include/linux/mfd/ezx-pcap.h:184:
+#define PCAP_BUSCTRL_VUSB_EN		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#656: FILE: include/linux/mfd/ezx-pcap.h:185:
+#define PCAP_BUSCTRL_USB_PS		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#657: FILE: include/linux/mfd/ezx-pcap.h:186:
+#define PCAP_BUSCTRL_VUSB_MSTR_EN	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#658: FILE: include/linux/mfd/ezx-pcap.h:187:
+#define PCAP_BUSCTRL_VBUS_PD_ENB	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#659: FILE: include/linux/mfd/ezx-pcap.h:188:
+#define PCAP_BUSCTRL_CURRLIM		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#660: FILE: include/linux/mfd/ezx-pcap.h:189:
+#define PCAP_BUSCTRL_RS232ENB		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#661: FILE: include/linux/mfd/ezx-pcap.h:190:
+#define PCAP_BUSCTRL_RS232_DIR		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#662: FILE: include/linux/mfd/ezx-pcap.h:191:
+#define PCAP_BUSCTRL_SE0_CONN		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#663: FILE: include/linux/mfd/ezx-pcap.h:192:
+#define PCAP_BUSCTRL_USB_PDM		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#664: FILE: include/linux/mfd/ezx-pcap.h:193:
+#define PCAP_BUSCTRL_BUS_PRI_ADJ	(1 << 24)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#716: FILE: include/linux/mfd/ezx-pcap.h:245:
+void ezx_pcap_write(u_int8_t, u_int32_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int32_t' should also have an identifier name
#716: FILE: include/linux/mfd/ezx-pcap.h:245:
+void ezx_pcap_write(u_int8_t, u_int32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#717: FILE: include/linux/mfd/ezx-pcap.h:246:
+void ezx_pcap_read(u_int8_t, u_int32_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int32_t *' should also have an identifier name
#717: FILE: include/linux/mfd/ezx-pcap.h:246:
+void ezx_pcap_read(u_int8_t, u_int32_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#718: FILE: include/linux/mfd/ezx-pcap.h:247:
+void ezx_pcap_set_sw(u_int8_t, u_int8_t, u_int8_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#718: FILE: include/linux/mfd/ezx-pcap.h:247:
+void ezx_pcap_set_sw(u_int8_t, u_int8_t, u_int8_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#718: FILE: include/linux/mfd/ezx-pcap.h:247:
+void ezx_pcap_set_sw(u_int8_t, u_int8_t, u_int8_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#719: FILE: include/linux/mfd/ezx-pcap.h:248:
+int ezx_pcap_set_vaux(u_int8_t, u_int8_t, u_int8_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#719: FILE: include/linux/mfd/ezx-pcap.h:248:
+int ezx_pcap_set_vaux(u_int8_t, u_int8_t, u_int8_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_int8_t' should also have an identifier name
#719: FILE: include/linux/mfd/ezx-pcap.h:248:
+int ezx_pcap_set_vaux(u_int8_t, u_int8_t, u_int8_t);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#729: FILE: drivers/mfd/Kconfig:52:
+config EZX_PCAP
+	bool "PCAP Support"
+	depends on PXA_SSP && PXA_EZX
+	help
+	  This enables the PCAP ASIC present on EZX Phones. This is
+	  needed for MMC, TouchScreen, Sound, USB, etc..
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 103 checks, 778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
