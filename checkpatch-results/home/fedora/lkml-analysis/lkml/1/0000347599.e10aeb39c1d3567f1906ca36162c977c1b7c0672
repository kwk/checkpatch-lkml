WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#33: 
which is changed - included its name - to accomodate for the way
                                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#72: FILE: include/asm-x86/desc.h:36:
+#define _LDT_empty(info) (\
+	(info)->base_addr	== 0	&& \
+	(info)->limit		== 0	&& \
+	(info)->contents	== 0	&& \
+	(info)->read_exec_only	== 1	&& \
+	(info)->seg_32bit	== 0	&& \
+	(info)->limit_in_pages	== 0	&& \
+	(info)->seg_not_present	== 1	&& \
+	(info)->useable		== 0)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#80: FILE: include/asm-x86/desc.h:44:
+	(info)->useable		== 0)
 	        ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#83: FILE: include/asm-x86/desc.h:47:
+#define LDT_empty(info) (_LDT_empty(info) && ((info)->lm == 0))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#124: FILE: include/asm-x86/desc.h:88:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#124: FILE: include/asm-x86/desc.h:88:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#124: FILE: include/asm-x86/desc.h:88:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gdt' - possible side-effects?
#124: FILE: include/asm-x86/desc.h:88:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#124: FILE: include/asm-x86/desc.h:88:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#125: FILE: include/asm-x86/desc.h:89:
+	movb idx*8+4(gdt), lo_b; \
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: include/asm-x86/desc.h:89:
+	movb idx*8+4(gdt), lo_b; \
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#126: FILE: include/asm-x86/desc.h:90:
+	movb idx*8+7(gdt), hi_b; \
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: include/asm-x86/desc.h:90:
+	movb idx*8+7(gdt), hi_b; \
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#128: FILE: include/asm-x86/desc.h:92:
+	movw idx*8+2(gdt), lo_w;
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: include/asm-x86/desc.h:92:
+	movw idx*8+2(gdt), lo_w;
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: include/asm-x86/desc.h:94:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#264: FILE: include/asm-x86/desc_64.h:141:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#265: FILE: include/asm-x86/desc_64.h:142:
+		unsigned cpu = smp_processor_id();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: include/asm-x86/desc_64.h:145:
+		set_tssldt_descriptor(&get_cpu_gdt_table(cpu)[GDT_ENTRY_LDT],
+			     (unsigned long)addr, DESC_LDT, entries * 8 - 1);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#269: FILE: include/asm-x86/desc_64.h:146:
+		__asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8));
 		                                                   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347599.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 4 warnings, 15 checks, 274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347599.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
