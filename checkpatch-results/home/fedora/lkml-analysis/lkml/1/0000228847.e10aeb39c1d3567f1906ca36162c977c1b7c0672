WARNING:REPEATED_WORD: Possible repeated word: 'vmlinux'
#62: FILE: arch/arm/boot/compressed/Makefile:74:
+targets       := vmlinux vmlinux.lds \

WARNING:NEW_TYPEDEFS: do not add new typedefs
#153: FILE: arch/arm/boot/compressed/misc.c:175:
+typedef ulg memptr ;

WARNING:SPACING: space prohibited before semicolon
#153: FILE: arch/arm/boot/compressed/misc.c:175:
+typedef ulg memptr ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#248: FILE: arch/arm/boot/compressed/misc.c:228:
+	ptr = (ulg *) (((long)input_data_end) - 4);

CHECK:SPACING: No space is necessary after a cast
#256: FILE: arch/arm/boot/compressed/misc.c:236:
+		   NULL, NULL, (unsigned char *) output_start, &pos, error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: arch/arm/boot/compressed/piggy.bz2.S:1:
+	.section .piggydata,#alloc

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: arch/arm/boot/compressed/piggy.gz.S:1:
+	.section .piggydata,#alloc

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#303: FILE: arch/arm/boot/compressed/piggy.lzma.S:1:
+	.section .piggydata,#alloc

WARNING:REPEATED_WORD: Possible repeated word: 'vmlinux'
#369: FILE: arch/x86/boot/compressed/Makefile:7:
+targets := vmlinux vmlinux.bin vmlinux.bin.gz vmlinux.bin.bz2 vmlinux.bin.lzma head_$(BITS).o misc.o piggy.o

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#594: FILE: drivers/block/Kconfig:360:
+config RD_BZIP2
+	bool "Initial ramdisk compressed using bzip2"
+	default n
+	depends on BLK_DEV_INITRD=y
+	help
+	  Support loading of a bzip2 encoded initial ramdisk or cpio buffer
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#602: FILE: drivers/block/Kconfig:368:
+config RD_LZMA
+	bool "Initial ramdisk compressed using lzma"
+	default n
+	depends on BLK_DEV_INITRD=y
+	help
+	  Support loading of a lzma encoded initial ramdisk or cpio buffer
+	  If unsure, say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#610: FILE: drivers/block/Kconfig:376:
+config RD_GZIP
+	bool "Initial ramdisk compressed using gzip"
+	default y
+	depends on BLK_DEV_INITRD=y
+	help
+	  Support loading of a gzip encoded initial ramdisk or cpio buffer.
+	  If unsure, say Y.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#651: FILE: include/linux/decompress/bunzip2.h:1:
+#ifndef DECOMPRESS_BUNZIP2_H

WARNING:SPACING: missing space after return type
#655: FILE: include/linux/decompress/bunzip2.h:5:
+	    int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#656: FILE: include/linux/decompress/bunzip2.h:6:
+	    int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#659: FILE: include/linux/decompress/bunzip2.h:9:
+	    void(*error)(char *x));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#665: FILE: include/linux/decompress/generic.h:1:
+#ifndef DECOMPRESS_GENERIC_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: include/linux/decompress/generic.h:6:
+ *Lzma prefers 0x10000 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: missing space after return type
#674: FILE: include/linux/decompress/generic.h:10:
+			      int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#675: FILE: include/linux/decompress/generic.h:11:
+			      int(*writebb)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#678: FILE: include/linux/decompress/generic.h:14:
+			      void(*error)(char *x));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#693: FILE: include/linux/decompress/generic.h:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#699: FILE: include/linux/decompress/inflate.h:1:
+#ifndef INFLATE_H

WARNING:SPACING: missing space after return type
#706: FILE: include/linux/decompress/inflate.h:8:
+	   int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#707: FILE: include/linux/decompress/inflate.h:9:
+	   int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#710: FILE: include/linux/decompress/inflate.h:12:
+	   void(*error_fn)(char *x));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#716: FILE: include/linux/decompress/mm.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#788: FILE: include/linux/decompress/mm.h:73:
+ * needed by inflate */

WARNING:SPACING: missing space after return type
#796: FILE: include/linux/decompress/mm.h:81:
+static void(*error)(char *m);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#797: FILE: include/linux/decompress/mm.h:82:
+#define set_error_fn(x) error = x;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#797: FILE: include/linux/decompress/mm.h:82:
+#define set_error_fn(x) error = x;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: include/linux/decompress/unlzma.h:1:
+#ifndef DECOMPRESS_UNLZMA_H

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#813: FILE: include/linux/decompress/unlzma.h:4:
+int unlzma(unsigned char *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#813: FILE: include/linux/decompress/unlzma.h:4:
+int unlzma(unsigned char *, int,

WARNING:SPACING: missing space after return type
#814: FILE: include/linux/decompress/unlzma.h:5:
+	   int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#815: FILE: include/linux/decompress/unlzma.h:6:
+	   int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#818: FILE: include/linux/decompress/unlzma.h:9:
+	   void(*error)(char *x)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#843: FILE: init/do_mounts_rd.c:37:
 
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0x5a'
#880: FILE: init/do_mounts_rd.c:99:
+	if (buf[0] == 0x42 && (buf[1] == 0x5a)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#881: FILE: init/do_mounts_rd.c:100:
+		printk(KERN_NOTICE

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0x00'
#894: FILE: init/do_mounts_rd.c:113:
+	if (buf[0] == 0x5d && (buf[1] == 0x00)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#895: FILE: init/do_mounts_rd.c:114:
+		printk(KERN_NOTICE

WARNING:LINE_SPACING: Missing a blank line after declarations
#1004: FILE: init/do_mounts_rd.c:309:
+	int r = sys_read(crd_infd, buf, len);
+	if (r < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1005: FILE: init/do_mounts_rd.c:310:
+		printk(KERN_ERR "RAMDISK: error while reading compressed data");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1007: FILE: init/do_mounts_rd.c:312:
+		printk(KERN_ERR "RAMDISK: EOF while reading compressed data");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1037: FILE: init/do_mounts_rd.c:319:
+	int written = sys_write(crd_outfd, window, outcnt);
+	if (written != outcnt) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1039: FILE: init/do_mounts_rd.c:321:
+			printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1099: FILE: init/initramfs.c:333:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1100: FILE: init/initramfs.c:334:
+static int __init flush_buffer(void *bufv, unsigned len)

CHECK:SPACING: No space is necessary after a cast
#1102: FILE: init/initramfs.c:336:
+	char *buf = (char *) bufv;

CHECK:CAMELCASE: Avoid CamelCase: <origLen>
#1104: FILE: init/initramfs.c:338:
+	int origLen = len;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1121: FILE: init/initramfs.c:357:
+static unsigned my_inptr;   /* index of next byte to be processed in inbuf */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!message"
#1218: FILE: init/initramfs.c:395:
+		    message == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1224: FILE: init/initramfs.c:401:
+				   think an error has already occured */
 				                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1224: FILE: init/initramfs.c:401:
+		message = NULL; /* Zero out message, or else cpio will
+				   think an error has already occured */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1224: FILE: init/initramfs.c:401:
+				   think an error has already occured */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1227: FILE: init/initramfs.c:404:
+			     &my_inptr, error) < 0
+		    &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!message"
#1228: FILE: init/initramfs.c:405:
+		    message == NULL) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1235: FILE: init/initramfs.c:412:
+				   think an error has already occured */
 				                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1235: FILE: init/initramfs.c:412:
+		message = NULL; /* Zero out message, or else cpio will
+				   think an error has already occured */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1235: FILE: init/initramfs.c:412:
+				   think an error has already occured */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1238: FILE: init/initramfs.c:415:
+			    &my_inptr, error) < 0
+		    &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!message"
#1239: FILE: init/initramfs.c:416:
+		    message == NULL) {

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1286: FILE: init/Kconfig:125:
+config KERNEL_GZIP
+       bool "Gzip"
+       help
+         The old and tried gzip compression. Its compression ratio is
+	 the poorest among the 3 choices; however its speed (both
+	 compression and decompression) is the fastest.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1322: FILE: lib/decompress_bunzip2.c:1:
+/* vi: set sw = 4 ts = 4: */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1324: FILE: lib/decompress_bunzip2.c:3:
+/*	Small bzip2 deflate implementation, by Rob Landley (rob@landley.net).
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1335: FILE: lib/decompress_bunzip2.c:14:
+/*
+	Size and speed optimizations by Manuel Novoa III  (mjn3@codepoet.org).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1365: FILE: lib/decompress_bunzip2.c:44:
+/*
+	Made it fit for running in Linux Kernel by Alain Knaff (alain@knaff.lu)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1368: FILE: lib/decompress_bunzip2.c:47:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1381: FILE: lib/decompress_bunzip2.c:60:
+#define GROUP_SIZE   ^I^I50^I/* 64 would have been more efficient */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1382: FILE: lib/decompress_bunzip2.c:61:
+#define MAX_HUFCODE_BITS ^I20^I/* Longest Huffman code allowed */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1383: FILE: lib/decompress_bunzip2.c:62:
+#define MAX_SYMBOLS ^I^I258^I/* 256 literals + RUNA + RUNB */$

WARNING:TYPO_SPELLING: 'sentinal' may be misspelled - perhaps 'sentinel'?
#1402: FILE: lib/decompress_bunzip2.c:81:
+	/* We have an extra slot at the end of limit[] for a sentinal value. */
 	                                                     ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1403: FILE: lib/decompress_bunzip2.c:82:
+	int limit[MAX_HUFCODE_BITS+1];
 	                          ^

CHECK:CAMELCASE: Avoid CamelCase: <minLen>
#1406: FILE: lib/decompress_bunzip2.c:85:
+	int minLen, maxLen;

CHECK:CAMELCASE: Avoid CamelCase: <maxLen>
#1406: FILE: lib/decompress_bunzip2.c:85:
+	int minLen, maxLen;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1410: FILE: lib/decompress_bunzip2.c:89:
+/* Structure holding all the housekeeping data, including IO buffers and
+   memory that persists between calls to bunzip */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1410: FILE: lib/decompress_bunzip2.c:89:
+   memory that persists between calls to bunzip */

CHECK:CAMELCASE: Avoid CamelCase: <writeCopies>
#1413: FILE: lib/decompress_bunzip2.c:92:
+	int writeCopies, writePos, writeRunCountdown, writeCount, writeCurrent;

CHECK:CAMELCASE: Avoid CamelCase: <writePos>
#1413: FILE: lib/decompress_bunzip2.c:92:
+	int writeCopies, writePos, writeRunCountdown, writeCount, writeCurrent;

CHECK:CAMELCASE: Avoid CamelCase: <writeRunCountdown>
#1413: FILE: lib/decompress_bunzip2.c:92:
+	int writeCopies, writePos, writeRunCountdown, writeCount, writeCurrent;

CHECK:CAMELCASE: Avoid CamelCase: <writeCount>
#1413: FILE: lib/decompress_bunzip2.c:92:
+	int writeCopies, writePos, writeRunCountdown, writeCount, writeCurrent;

CHECK:CAMELCASE: Avoid CamelCase: <writeCurrent>
#1413: FILE: lib/decompress_bunzip2.c:92:
+	int writeCopies, writePos, writeRunCountdown, writeCount, writeCurrent;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1415: FILE: lib/decompress_bunzip2.c:94:
+	int (*fill)(void*, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1415: FILE: lib/decompress_bunzip2.c:94:
+	int (*fill)(void*, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <inbufCount>
#1416: FILE: lib/decompress_bunzip2.c:95:
+	int inbufCount, inbufPos /*, outbufPos*/;

CHECK:CAMELCASE: Avoid CamelCase: <inbufPos>
#1416: FILE: lib/decompress_bunzip2.c:95:
+	int inbufCount, inbufPos /*, outbufPos*/;

CHECK:CAMELCASE: Avoid CamelCase: <inbufBitCount>
#1418: FILE: lib/decompress_bunzip2.c:97:
+	unsigned int inbufBitCount, inbufBits;

CHECK:CAMELCASE: Avoid CamelCase: <inbufBits>
#1418: FILE: lib/decompress_bunzip2.c:97:
+	unsigned int inbufBitCount, inbufBits;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1420: FILE: lib/decompress_bunzip2.c:99:
+	/* The CRC values stored in the block header and calculated from the
+	data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1420: FILE: lib/decompress_bunzip2.c:99:
+	data */

CHECK:CAMELCASE: Avoid CamelCase: <crc32Table>
#1421: FILE: lib/decompress_bunzip2.c:100:
+	unsigned int crc32Table[256], headerCRC, totalCRC, writeCRC;

CHECK:CAMELCASE: Avoid CamelCase: <headerCRC>
#1421: FILE: lib/decompress_bunzip2.c:100:
+	unsigned int crc32Table[256], headerCRC, totalCRC, writeCRC;

CHECK:CAMELCASE: Avoid CamelCase: <totalCRC>
#1421: FILE: lib/decompress_bunzip2.c:100:
+	unsigned int crc32Table[256], headerCRC, totalCRC, writeCRC;

CHECK:CAMELCASE: Avoid CamelCase: <writeCRC>
#1421: FILE: lib/decompress_bunzip2.c:100:
+	unsigned int crc32Table[256], headerCRC, totalCRC, writeCRC;

CHECK:CAMELCASE: Avoid CamelCase: <dbufSize>
#1423: FILE: lib/decompress_bunzip2.c:102:
+	unsigned int *dbuf, dbufSize;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1430: FILE: lib/decompress_bunzip2.c:109:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1432: FILE: lib/decompress_bunzip2.c:111:
+/* Return the next nnn bits of input.  All reads from the compressed input
+   are done through this function.  All reads are big endian */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1432: FILE: lib/decompress_bunzip2.c:111:
+   are done through this function.  All reads are big endian */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1438: FILE: lib/decompress_bunzip2.c:117:
+	/* If we need to get more data from the byte buffer, do so.
+	   (Loop getting one byte at a time to enforce endianness and avoid

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1439: FILE: lib/decompress_bunzip2.c:118:
+	   unaligned access.) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1442: FILE: lib/decompress_bunzip2.c:121:
+		/* If we need to read more data from file into byte buffer, do
+		   so */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1442: FILE: lib/decompress_bunzip2.c:121:
+		   so */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1455: FILE: lib/decompress_bunzip2.c:134:
+			bits = bd->inbufBits&((1 << bd->inbufBitCount)-1);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1455: FILE: lib/decompress_bunzip2.c:134:
+			bits = bd->inbufBits&((1 << bd->inbufBitCount)-1);
 			                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1461: FILE: lib/decompress_bunzip2.c:140:
+		bd->inbufBits = (bd->inbufBits << 8)|bd->inbuf[bd->inbufPos++];
 		                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1466: FILE: lib/decompress_bunzip2.c:145:
+	bits |= (bd->inbufBits >> bd->inbufBitCount)&((1 << bits_wanted)-1);
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1466: FILE: lib/decompress_bunzip2.c:145:
+	bits |= (bd->inbufBits >> bd->inbufBitCount)&((1 << bits_wanted)-1);
 	                                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <hufGroup>
#1475: FILE: lib/decompress_bunzip2.c:154:
+	struct group_data *hufGroup = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <dbufCount>
#1478: FILE: lib/decompress_bunzip2.c:157:
+	int dbufCount, nextSym, dbufSize, groupCount, selector,

CHECK:CAMELCASE: Avoid CamelCase: <nextSym>
#1478: FILE: lib/decompress_bunzip2.c:157:
+	int dbufCount, nextSym, dbufSize, groupCount, selector,

CHECK:CAMELCASE: Avoid CamelCase: <groupCount>
#1478: FILE: lib/decompress_bunzip2.c:157:
+	int dbufCount, nextSym, dbufSize, groupCount, selector,

CHECK:CAMELCASE: Avoid CamelCase: <runPos>
#1479: FILE: lib/decompress_bunzip2.c:158:
+		i, j, k, t, runPos, symCount, symTotal, nSelectors,

CHECK:CAMELCASE: Avoid CamelCase: <symCount>
#1479: FILE: lib/decompress_bunzip2.c:158:
+		i, j, k, t, runPos, symCount, symTotal, nSelectors,

CHECK:CAMELCASE: Avoid CamelCase: <symTotal>
#1479: FILE: lib/decompress_bunzip2.c:158:
+		i, j, k, t, runPos, symCount, symTotal, nSelectors,

CHECK:CAMELCASE: Avoid CamelCase: <nSelectors>
#1479: FILE: lib/decompress_bunzip2.c:158:
+		i, j, k, t, runPos, symCount, symTotal, nSelectors,

CHECK:CAMELCASE: Avoid CamelCase: <byteCount>
#1480: FILE: lib/decompress_bunzip2.c:159:
+		byteCount[256];

CHECK:CAMELCASE: Avoid CamelCase: <symToByte>
#1481: FILE: lib/decompress_bunzip2.c:160:
+	unsigned char uc, symToByte[256], mtfSymbol[256], *selectors;

CHECK:CAMELCASE: Avoid CamelCase: <mtfSymbol>
#1481: FILE: lib/decompress_bunzip2.c:160:
+	unsigned char uc, symToByte[256], mtfSymbol[256], *selectors;

CHECK:CAMELCASE: Avoid CamelCase: <origPtr>
#1482: FILE: lib/decompress_bunzip2.c:161:
+	unsigned int *dbuf, origPtr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1489: FILE: lib/decompress_bunzip2.c:168:
+	/* Read in header signature and CRC, then validate signature.
+	   (last block signature means CRC is for whole file, return now) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1489: FILE: lib/decompress_bunzip2.c:168:
+	   (last block signature means CRC is for whole file, return now) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0x177245'
#1493: FILE: lib/decompress_bunzip2.c:172:
+	if ((i == 0x177245) && (j == 0x385090))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'j == 0x385090'
#1493: FILE: lib/decompress_bunzip2.c:172:
+	if ((i == 0x177245) && (j == 0x385090))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i != 0x314159'
#1495: FILE: lib/decompress_bunzip2.c:174:
+	if ((i != 0x314159) || (j != 0x265359))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'j != 0x265359'
#1495: FILE: lib/decompress_bunzip2.c:174:
+	if ((i != 0x314159) || (j != 0x265359))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1498: FILE: lib/decompress_bunzip2.c:177:
+	/* We can add support for blockRandomised if anybody complains.
+	   There was some code for this in busybox 1.0.0-pre3, but nobody ever

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1499: FILE: lib/decompress_bunzip2.c:178:
+	   noticed that it didn't actually work. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1506: FILE: lib/decompress_bunzip2.c:185:
+	/* mapping table: if some byte values are never used (encoding things
+	   like ascii text), the compression code removes the gaps to have fewer

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1509: FILE: lib/decompress_bunzip2.c:188:
+	   symbols back to the corresponding bytes. */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1513: FILE: lib/decompress_bunzip2.c:192:
+		if (t&(1 << (15-i))) {
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1513: FILE: lib/decompress_bunzip2.c:192:
+		if (t&(1 << (15-i))) {
 		               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1516: FILE: lib/decompress_bunzip2.c:195:
+				if (k&(1 << (15-j)))
 				     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1516: FILE: lib/decompress_bunzip2.c:195:
+				if (k&(1 << (15-j)))
 				               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1517: FILE: lib/decompress_bunzip2.c:196:
+					symToByte[symTotal++] = (16*i)+j;
 					                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1517: FILE: lib/decompress_bunzip2.c:196:
+					symToByte[symTotal++] = (16*i)+j;
 					                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1525: FILE: lib/decompress_bunzip2.c:204:
+	/* nSelectors: Every GROUP_SIZE many symbols we select a new
+	   Huffman coding group.  Read in the group selector list,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1528: FILE: lib/decompress_bunzip2.c:207:
+	   list.) */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1542: FILE: lib/decompress_bunzip2.c:221:
+			mtfSymbol[j] = mtfSymbol[j-1];
 			                          ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1543: FILE: lib/decompress_bunzip2.c:222:
+		mtfSymbol[0] = selectors[i] = uc;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1546: FILE: lib/decompress_bunzip2.c:225:
+	/* Read the Huffman coding tables for each group, which code
+	   for symTotal literal symbols, plus two run symbols (RUNA,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1547: FILE: lib/decompress_bunzip2.c:226:
+	   RUNB) */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1548: FILE: lib/decompress_bunzip2.c:227:
+	symCount = symTotal+2;
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1550: FILE: lib/decompress_bunzip2.c:229:
+		unsigned char length[MAX_SYMBOLS], temp[MAX_HUFCODE_BITS+1];
 		                                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1553: FILE: lib/decompress_bunzip2.c:232:
+		/* Read Huffman code lengths for each symbol.  They're
+		   stored in a way similar to mtf; record a starting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1560: FILE: lib/decompress_bunzip2.c:239:
+		   it.) */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1561: FILE: lib/decompress_bunzip2.c:240:
+		t = get_bits(bd, 5)-1;
 		                   ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1564: FILE: lib/decompress_bunzip2.c:243:
+				if (((unsigned)t) > (MAX_HUFCODE_BITS-1))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1564: FILE: lib/decompress_bunzip2.c:243:
+				if (((unsigned)t) > (MAX_HUFCODE_BITS-1))
 				                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1568: FILE: lib/decompress_bunzip2.c:247:
+				/* If first bit is 0, stop.  Else
+				   second bit indicates whether to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1571: FILE: lib/decompress_bunzip2.c:250:
+				   the second if the first was 0. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1579: FILE: lib/decompress_bunzip2.c:258:
+				 * subtract 1.  Avoids if/else */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1580: FILE: lib/decompress_bunzip2.c:259:
+				t += (((k+1)&2)-1);
 				         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1580: FILE: lib/decompress_bunzip2.c:259:
+				t += (((k+1)&2)-1);
 				            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1580: FILE: lib/decompress_bunzip2.c:259:
+				t += (((k+1)&2)-1);
 				               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1583: FILE: lib/decompress_bunzip2.c:262:
+			 * final symbol length */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1584: FILE: lib/decompress_bunzip2.c:263:
+			length[i] = t+1;
 			             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1587: FILE: lib/decompress_bunzip2.c:266:
+		minLen = maxLen = length[0];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1611: FILE: lib/decompress_bunzip2.c:290:
+		hufGroup = bd->groups+j;
 		                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1615: FILE: lib/decompress_bunzip2.c:294:
+		/* Note that minLen can't be smaller than 1, so we
+		   adjust the base and limit array pointers so we're

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1617: FILE: lib/decompress_bunzip2.c:296:
+		   again when using them (during symbol decoding).*/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1618: FILE: lib/decompress_bunzip2.c:297:
+		base = hufGroup->base-1;
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1619: FILE: lib/decompress_bunzip2.c:298:
+		limit = hufGroup->limit-1;
 		                       ^

WARNING:TYPO_SPELLING: 'Concurently' may be misspelled - perhaps 'Concurrently'?
#1620: FILE: lib/decompress_bunzip2.c:299:
+		/* Calculate permute[].  Concurently, initialize
 		                         ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1621: FILE: lib/decompress_bunzip2.c:300:
+		 * temp[] and limit[]. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1624: FILE: lib/decompress_bunzip2.c:303:
+			temp[i] = limit[i] = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1637: FILE: lib/decompress_bunzip2.c:316:
+		 *already). */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1638: FILE: lib/decompress_bunzip2.c:317:
+		pp = t = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1642: FILE: lib/decompress_bunzip2.c:321:
+			/* We read the largest possible symbol size
+			   and then unget bits after determining how

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1650: FILE: lib/decompress_bunzip2.c:329:
+			   comparison. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1653: FILE: lib/decompress_bunzip2.c:332:
+			base[i+1] = pp-(t += temp[i]);
 			      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1653: FILE: lib/decompress_bunzip2.c:332:
+			base[i+1] = pp-(t += temp[i]);
 			              ^

WARNING:TYPO_SPELLING: 'Sentinal' may be misspelled - perhaps 'Sentinel'?
#1655: FILE: lib/decompress_bunzip2.c:334:
+		limit[maxLen+1] = INT_MAX; /* Sentinal value for
 		                              ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1655: FILE: lib/decompress_bunzip2.c:334:
+		limit[maxLen+1] = INT_MAX; /* Sentinal value for
 		            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1656: FILE: lib/decompress_bunzip2.c:335:
+					    * reading next sym. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1657: FILE: lib/decompress_bunzip2.c:336:
+		limit[maxLen] = pp+temp[maxLen]-1;
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1657: FILE: lib/decompress_bunzip2.c:336:
+		limit[maxLen] = pp+temp[maxLen]-1;
 		                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1661: FILE: lib/decompress_bunzip2.c:340:
+	/* We've finished reading and digesting the block header.  Now
+	   read this block's Huffman coded symbols from the file and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1663: FILE: lib/decompress_bunzip2.c:342:
+	   result into dbuf[dbufCount++] = uc */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1666: FILE: lib/decompress_bunzip2.c:345:
+	 * Front table */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1672: FILE: lib/decompress_bunzip2.c:351:
+	runPos = dbufCount = symCount = selector = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1676: FILE: lib/decompress_bunzip2.c:355:
+			symCount = GROUP_SIZE-1;
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1679: FILE: lib/decompress_bunzip2.c:358:
+			hufGroup = bd->groups+selectors[selector++];
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1680: FILE: lib/decompress_bunzip2.c:359:
+			base = hufGroup->base-1;
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1681: FILE: lib/decompress_bunzip2.c:360:
+			limit = hufGroup->limit-1;
 			                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1685: FILE: lib/decompress_bunzip2.c:364:
+		/* Note: It is far cheaper to read maxLen bits and
+		   back up than it is to read minLen bits and then an

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1701: FILE: lib/decompress_bunzip2.c:380:
+				(bd->inbufBits << 8)|bd->inbuf[bd->inbufPos++];
 				                    ^

CHECK:SPACING: space preferred before that '&' (ctx:VxE)
#1705: FILE: lib/decompress_bunzip2.c:384:
+		j = (bd->inbufBits >> bd->inbufBitCount)&
 		                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1706: FILE: lib/decompress_bunzip2.c:385:
+			((1 << hufGroup->maxLen)-1);
 			                        ^

WARNING:REPEATED_WORD: Possible repeated word: 'how'
#1708: FILE: lib/decompress_bunzip2.c:387:
+		/* Figure how how many bits are in next symbol and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1709: FILE: lib/decompress_bunzip2.c:388:
+		 * unget extras */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i > hufGroup->maxLen'
#1715: FILE: lib/decompress_bunzip2.c:394:
+		if ((i > hufGroup->maxLen)
+			|| (((unsigned)(j = (j>>(hufGroup->maxLen-i))-base[i]))
+				>= MAX_SYMBOLS))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1715: FILE: lib/decompress_bunzip2.c:394:
+		if ((i > hufGroup->maxLen)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1716: FILE: lib/decompress_bunzip2.c:395:
+		if ((i > hufGroup->maxLen)
+			|| (((unsigned)(j = (j>>(hufGroup->maxLen-i))-base[i]))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1716: FILE: lib/decompress_bunzip2.c:395:
+			|| (((unsigned)(j = (j>>(hufGroup->maxLen-i))-base[i]))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1716: FILE: lib/decompress_bunzip2.c:395:
+			|| (((unsigned)(j = (j>>(hufGroup->maxLen-i))-base[i]))
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1716: FILE: lib/decompress_bunzip2.c:395:
+			|| (((unsigned)(j = (j>>(hufGroup->maxLen-i))-base[i]))
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1716: FILE: lib/decompress_bunzip2.c:395:
+			|| (((unsigned)(j = (j>>(hufGroup->maxLen-i))-base[i]))
 			                                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1721: FILE: lib/decompress_bunzip2.c:400:
+		/* We have now decoded the symbol, which indicates
+		   either a new literal byte, or a repeated run of the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1724: FILE: lib/decompress_bunzip2.c:403:
+		   how many times to repeat the last literal. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1725: FILE: lib/decompress_bunzip2.c:404:
+		if (((unsigned)nextSym) <= SYMBOL_RUNB) { /* RUNA or RUNB */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1727: FILE: lib/decompress_bunzip2.c:406:
+			 * counter */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1733: FILE: lib/decompress_bunzip2.c:412:
+			/* Neat trick that saves 1 symbol: instead of
+			   or-ing 0 or 1 at each bit position, add 1

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1741: FILE: lib/decompress_bunzip2.c:420:
+			   Thus space is saved. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1749: FILE: lib/decompress_bunzip2.c:428:
+		/* When we hit the first non-run symbol after a run,
+		   we now know how many times to repeat the last

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1753: FILE: lib/decompress_bunzip2.c:432:
+		   array.) */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1756: FILE: lib/decompress_bunzip2.c:435:
+			if (dbufCount+t >= dbufSize)
 			             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1768: FILE: lib/decompress_bunzip2.c:447:
+		/* At this point, nextSym indicates a new literal
+		   character.  Subtract one to get the position in the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1775: FILE: lib/decompress_bunzip2.c:454:
+		   non-literal nextSym values equals -1.) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1784: FILE: lib/decompress_bunzip2.c:463:
+		 *overhead and other assorted setup costs. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1786: FILE: lib/decompress_bunzip2.c:465:
+			mtfSymbol[i] = mtfSymbol[i-1];
 			                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1795: FILE: lib/decompress_bunzip2.c:474:
+	/* At this point, we've read all the Huffman-coded symbols
+	   (and repeated runs) for this block from the input stream,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1804: FILE: lib/decompress_bunzip2.c:483:
+		k = j+byteCount[i];
 		     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1815: FILE: lib/decompress_bunzip2.c:494:
+	/* Decode first byte by hand to initialize "previous" byte.
+	   Note that it doesn't get output, and if the first three

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1817: FILE: lib/decompress_bunzip2.c:496:
+	   writeRunCountdown = 5). */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1822: FILE: lib/decompress_bunzip2.c:501:
+		bd->writeCurrent = (unsigned char)(bd->writePos&0xff);
 		                                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1832: FILE: lib/decompress_bunzip2.c:511:
+/* Undo burrows-wheeler transform on intermediate buffer to produce output.
+   If start_bunzip was initialized with out_fd =-1, then up to len bytes of

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1853: FILE: lib/decompress_bunzip2.c:532:
+	/* We will always have pending decoded data to write into the output
+	   buffer unless this is the very first call (in which case we haven't

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1854: FILE: lib/decompress_bunzip2.c:533:
+	   Huffman-decoded a block into the intermediate buffer yet). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1862: FILE: lib/decompress_bunzip2.c:541:
+			 * state and return */

CHECK:SPACING: spaces preferred around that '^' (ctx:ExV)
#1872: FILE: lib/decompress_bunzip2.c:551:
+				^bd->crc32Table[((bd->writeCRC) >> 24)
 				^

CHECK:SPACING: spaces preferred around that '^' (ctx:ExV)
#1873: FILE: lib/decompress_bunzip2.c:552:
+				^xcurrent]);
 				^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1875: FILE: lib/decompress_bunzip2.c:554:
+			 * copies of this byte */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1884: FILE: lib/decompress_bunzip2.c:563:
+			 * Burrows-Wheeler transform */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1887: FILE: lib/decompress_bunzip2.c:566:
+			xcurrent = pos&0xff;
 			              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1890: FILE: lib/decompress_bunzip2.c:569:
+			/* After 3 consecutive copies of the same
+			   byte, the 4th is a repeat count.  We count

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1892: FILE: lib/decompress_bunzip2.c:571:
+			   testing for non-zero is faster */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1898: FILE: lib/decompress_bunzip2.c:577:
+				 * indicates the count */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1903: FILE: lib/decompress_bunzip2.c:582:
+				 * (run length 0) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1907: FILE: lib/decompress_bunzip2.c:586:
+				 * anyway to get extras */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1917: FILE: lib/decompress_bunzip2.c:596:
+			bd->totalCRC = bd->headerCRC+1;
 			                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1923: FILE: lib/decompress_bunzip2.c:602:
+	 * block of input */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1942: FILE: lib/decompress_bunzip2.c:621:
+/* Allocate the structure, read file header.  If in_fd ==-1, inbuf must contain
+   a complete bunzip file (len bytes long).  If in_fd!=-1, inbuf and len are

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1943: FILE: lib/decompress_bunzip2.c:622:
+   ignored, and data is read from file handle into temporary buffer. */

CHECK:CAMELCASE: Avoid CamelCase: <BZh0>
#1949: FILE: lib/decompress_bunzip2.c:628:
+	const unsigned int BZh0 =

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1950: FILE: lib/decompress_bunzip2.c:629:
+		(((unsigned int)'B') << 24)+(((unsigned int)'Z') << 16)
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#1951: FILE: lib/decompress_bunzip2.c:630:
+		+(((unsigned int)'h') << 8)+(unsigned int)'0';
 		^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1951: FILE: lib/decompress_bunzip2.c:630:
+		+(((unsigned int)'h') << 8)+(unsigned int)'0';
 		                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fill"
#1962: FILE: lib/decompress_bunzip2.c:641:
+	if (fill != NULL)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1971: FILE: lib/decompress_bunzip2.c:650:
+			c = c&0x80000000 ? (c << 1)^0x04c11db7 : (c << 1);
 			     ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#1971: FILE: lib/decompress_bunzip2.c:650:
+			c = c&0x80000000 ? (c << 1)^0x04c11db7 : (c << 1);
 			                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1977: FILE: lib/decompress_bunzip2.c:656:
+	if (((unsigned int)(i-BZh0-1)) >= 9)
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1977: FILE: lib/decompress_bunzip2.c:656:
+	if (((unsigned int)(i-BZh0-1)) >= 9)
 	                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1981: FILE: lib/decompress_bunzip2.c:660:
+	/* Fourth byte (ascii '1'-'9'), indicates block size in units of 100k of
+	   uncompressed data.  Allocate intermediate buffer for block. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1981: FILE: lib/decompress_bunzip2.c:660:
+	   uncompressed data.  Allocate intermediate buffer for block. */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1982: FILE: lib/decompress_bunzip2.c:661:
+	bd->dbufSize = 100000*(i-BZh0);
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1982: FILE: lib/decompress_bunzip2.c:661:
+	bd->dbufSize = 100000*(i-BZh0);
 	                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1989: FILE: lib/decompress_bunzip2.c:668:
+/* Example usage: decompress src_fd to dst_fd.  (Stops at end of bzip2 data,
+   not end of file.) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1989: FILE: lib/decompress_bunzip2.c:668:
+   not end of file.) */

WARNING:SPACING: missing space after return type
#1991: FILE: lib/decompress_bunzip2.c:670:
+			int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#1992: FILE: lib/decompress_bunzip2.c:671:
+			int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#1995: FILE: lib/decompress_bunzip2.c:674:
+			void(*error_fn)(char *x))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2006: FILE: lib/decompress_bunzip2.c:685:
+		len -= 4; /* Uncompressed size hack active in pre-boot
+			     environment */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2006: FILE: lib/decompress_bunzip2.c:685:
+			     environment */

WARNING:TYPO_SPELLING: 'bufer' may be misspelled - perhaps 'buffer'?
#2008: FILE: lib/decompress_bunzip2.c:687:
+		error("Could not allocate output bufer");
 		                                 ^^^^^

WARNING:TYPO_SPELLING: 'bufer' may be misspelled - perhaps 'buffer'?
#2016: FILE: lib/decompress_bunzip2.c:695:
+		error("Could not allocate input bufer");
 		                                ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2061: FILE: lib/decompress_unlzma.c:1:
+/* Lzma decompressor for Linux kernel. Shamelessly snarfed

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2088: FILE: lib/decompress_unlzma.c:28:
+ *License along with this library; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2089: FILE: lib/decompress_unlzma.c:29:
+ *Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#2098: FILE: lib/decompress_unlzma.c:38:
+#define	MIN(a, b) (((a) < (b)) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#2098: FILE: lib/decompress_unlzma.c:38:
+#define	MIN(a, b) (((a) < (b)) ? (a) : (b))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2106: FILE: lib/decompress_unlzma.c:46:
+		ret = (ret << 8) | ptr[size-i-1];
 		                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2106: FILE: lib/decompress_unlzma.c:46:
+		ret = (ret << 8) | ptr[size-i-1];
 		                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2110: FILE: lib/decompress_unlzma.c:50:
+#define ENDIAN_CONVERT(x) \
+  x = (typeof(x))read_int((unsigned char *)&x, sizeof(x))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2110: FILE: lib/decompress_unlzma.c:50:
+#define ENDIAN_CONVERT(x) \
+  x = (typeof(x))read_int((unsigned char *)&x, sizeof(x))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2111: FILE: lib/decompress_unlzma.c:51:
+  x = (typeof(x))read_int((unsigned char *)&x, sizeof(x))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2113: FILE: lib/decompress_unlzma.c:53:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#2126: FILE: lib/decompress_unlzma.c:66:
+	int (*fill)(void*, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2126: FILE: lib/decompress_unlzma.c:66:
+	int (*fill)(void*, unsigned int);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2127: FILE: lib/decompress_unlzma.c:67:
+	uint8_t *ptr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2128: FILE: lib/decompress_unlzma.c:68:
+	uint8_t *buffer;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2129: FILE: lib/decompress_unlzma.c:69:
+	uint8_t *buffer_end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2131: FILE: lib/decompress_unlzma.c:71:
+	uint32_t code;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2132: FILE: lib/decompress_unlzma.c:72:
+	uint32_t range;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2133: FILE: lib/decompress_unlzma.c:73:
+	uint32_t bound;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2136: FILE: lib/decompress_unlzma.c:76:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2141: FILE: lib/decompress_unlzma.c:81:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2154: FILE: lib/decompress_unlzma.c:94:
+static inline void INIT rc_init(struct rc *rc,
+				       int (*fill)(void*, unsigned int),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2178: FILE: lib/decompress_unlzma.c:118:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2193: FILE: lib/decompress_unlzma.c:133:
+}
+static inline void INIT rc_normalize(struct rc *rc)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2209: FILE: lib/decompress_unlzma.c:149:
+}
+static inline int INIT rc_is_bit_0(struct rc *rc, uint16_t *p)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2211: FILE: lib/decompress_unlzma.c:151:
+	uint32_t t = rc_is_bit_0_helper(rc, p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2212: FILE: lib/decompress_unlzma.c:152:
+	uint32_t t = rc_is_bit_0_helper(rc, p);
+	return rc->code < t;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2221: FILE: lib/decompress_unlzma.c:161:
+}
+static inline void rc_update_bit_1(struct rc *rc, uint16_t *p)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2235: FILE: lib/decompress_unlzma.c:175:
+		return 0;
+	} else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2266: FILE: lib/decompress_unlzma.c:206:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2275: FILE: lib/decompress_unlzma.c:215:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2277: FILE: lib/decompress_unlzma.c:217:
+	uint8_t pos;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2278: FILE: lib/decompress_unlzma.c:218:
+	uint32_t dict_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2279: FILE: lib/decompress_unlzma.c:219:
+	uint64_t dst_size;

WARNING:SPACING: space prohibited before semicolon
#2280: FILE: lib/decompress_unlzma.c:220:
+} __attribute__ ((packed)) ;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2280: FILE: lib/decompress_unlzma.c:220:
+} __attribute__ ((packed)) ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2282: FILE: lib/decompress_unlzma.c:222:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#2298: FILE: lib/decompress_unlzma.c:238:
+		       +(1 << (LZMA_NUM_POS_BITS_MAX + LZMA_LEN_NUM_MID_BITS)))
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#2324: FILE: lib/decompress_unlzma.c:264:
+		       +(LZMA_NUM_LEN_TO_POS_STATES << LZMA_NUM_POS_SLOT_BITS))
 		       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2331: FILE: lib/decompress_unlzma.c:271:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2333: FILE: lib/decompress_unlzma.c:273:
+	uint8_t *buffer;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2334: FILE: lib/decompress_unlzma.c:274:
+	uint8_t previous_byte;

WARNING:SPACING: missing space after return type
#2338: FILE: lib/decompress_unlzma.c:278:
+	int(*flush)(void*, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#2338: FILE: lib/decompress_unlzma.c:278:
+	int(*flush)(void*, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2338: FILE: lib/decompress_unlzma.c:278:
+	int(*flush)(void*, unsigned int);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2344: FILE: lib/decompress_unlzma.c:284:
+	uint32_t rep0, rep1, rep2, rep3;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2354: FILE: lib/decompress_unlzma.c:294:
+static inline uint8_t INIT peek_old_byte(struct writer *wr,
+						uint32_t offs)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2357: FILE: lib/decompress_unlzma.c:297:
+		int32_t pos;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2358: FILE: lib/decompress_unlzma.c:298:
+		int32_t pos;
+		while (offs > wr->header->dict_size)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2362: FILE: lib/decompress_unlzma.c:302:
+		return wr->buffer[pos];
+	} else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2363: FILE: lib/decompress_unlzma.c:303:
+		uint32_t pos = wr->buffer_pos - offs;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2364: FILE: lib/decompress_unlzma.c:304:
+		uint32_t pos = wr->buffer_pos - offs;
+		while (pos >= wr->header->dict_size)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2369: FILE: lib/decompress_unlzma.c:309:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2373: FILE: lib/decompress_unlzma.c:313:
+	wr->buffer[wr->buffer_pos++] = wr->previous_byte = byte;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2381: FILE: lib/decompress_unlzma.c:321:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2388: FILE: lib/decompress_unlzma.c:328:
+static inline void INIT copy_bytes(struct writer *wr,
+					 uint32_t rep0, int len)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2388: FILE: lib/decompress_unlzma.c:328:
+					 uint32_t rep0, int len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2401: FILE: lib/decompress_unlzma.c:341:
+	int mi = 1;
+	rc_update_bit_0(rc, prob);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2410: FILE: lib/decompress_unlzma.c:350:
+		int match_byte = peek_old_byte(wr, cst->rep0);
+		do {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2412: FILE: lib/decompress_unlzma.c:352:
+			uint16_t *prob_lit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2427: FILE: lib/decompress_unlzma.c:367:
+		uint16_t *prob_lit = prob + mi;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2428: FILE: lib/decompress_unlzma.c:368:
+		uint16_t *prob_lit = prob + mi;
+		rc_get_bit(rc, prob_lit, &mi);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2440: FILE: lib/decompress_unlzma.c:380:
+static inline void INIT process_bit1(struct writer *wr, struct rc *rc,
+					    struct cstate *cst, uint16_t *p,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2442: FILE: lib/decompress_unlzma.c:382:
+  int offset;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2443: FILE: lib/decompress_unlzma.c:383:
+	uint16_t *prob_len;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2472: FILE: lib/decompress_unlzma.c:412:
+				return;
+			} else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2476: FILE: lib/decompress_unlzma.c:416:
+			uint32_t distance;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2546: FILE: lib/decompress_unlzma.c:486:
+		if (pos_slot >= LZMA_START_POS_MODEL_INDEX) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2548: FILE: lib/decompress_unlzma.c:488:
+			int i, mi;
+			num_bits = (pos_slot >> 1) - 1;

CHECK:BRACES: Unbalanced braces around else statement
#2570: FILE: lib/decompress_unlzma.c:510:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cst->rep0'
#2572: FILE: lib/decompress_unlzma.c:512:
+		if (++(cst->rep0) == 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2581: FILE: lib/decompress_unlzma.c:521:
+
+

WARNING:SPACING: missing space after return type
#2584: FILE: lib/decompress_unlzma.c:524:
+			      int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#2585: FILE: lib/decompress_unlzma.c:525:
+			      int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#2588: FILE: lib/decompress_unlzma.c:528:
+			      void(*error_fn)(char *x)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2593: FILE: lib/decompress_unlzma.c:533:
+	uint32_t pos_state_mask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2594: FILE: lib/decompress_unlzma.c:534:
+	uint32_t literal_pos_mask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2595: FILE: lib/decompress_unlzma.c:535:
+	uint16_t *p;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2607: FILE: lib/decompress_unlzma.c:547:
+		in_len -= 4; /* Uncompressed size hack active in pre-boot
+				environment */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2607: FILE: lib/decompress_unlzma.c:547:
+				environment */

WARNING:TYPO_SPELLING: 'bufer' may be misspelled - perhaps 'buffer'?
#2613: FILE: lib/decompress_unlzma.c:553:
+		error("Could not allocate input bufer");
 		                                ^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2618: FILE: lib/decompress_unlzma.c:558:
+	cst.rep0 = cst.rep1 = cst.rep2 = cst.rep3 = 1;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2658: FILE: lib/decompress_unlzma.c:598:
+	if (output)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2660: FILE: lib/decompress_unlzma.c:600:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wr.buffer"
#2664: FILE: lib/decompress_unlzma.c:604:
+	if (wr.buffer == NULL)

CHECK:SPACING: No space is necessary after a cast
#2668: FILE: lib/decompress_unlzma.c:608:
+	p = (uint16_t *) large_malloc(num_probs * sizeof(*p));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2679: FILE: lib/decompress_unlzma.c:619:
+		uint16_t *prob = p + LZMA_IS_MATCH +

CHECK:BRACES: Unbalanced braces around else statement
#2684: FILE: lib/decompress_unlzma.c:624:
+		else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2692: FILE: lib/decompress_unlzma.c:632:
+		*posp = rc.ptr-rc.buffer;
 		              ^

WARNING:SPACING: missing space after return type
#2726: FILE: lib/inflate.c:119:
+static int(*flush_cb)(void*, unsigned int);

WARNING:SPACING: missing space after return type
#2727: FILE: lib/inflate.c:120:
+static int(*fill_cb)(void*, unsigned int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2729: FILE: lib/inflate.c:122:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2752: FILE: lib/inflate.c:139:
+static uint8_t *inbuf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2753: FILE: lib/inflate.c:140:
+static uint8_t *window;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2755: FILE: lib/inflate.c:142:
+static unsigned insize;  /* valid bytes in inbuf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2756: FILE: lib/inflate.c:143:
+static unsigned outcnt;  /* bytes in output buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2761: FILE: lib/inflate.c:148:
+static unsigned inptr;   /* index of next byte to be processed in inbuf */

CHECK:CAMELCASE: Avoid CamelCase: <Assert>
#2786: FILE: lib/inflate.c:173:
+#define Assert(cond, msg)

CHECK:CAMELCASE: Avoid CamelCase: <Trace>
#2787: FILE: lib/inflate.c:174:
+#define Trace(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracev>
#2788: FILE: lib/inflate.c:175:
+#define Tracev(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracevv>
#2789: FILE: lib/inflate.c:176:
+#define Tracevv(x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracec>
#2790: FILE: lib/inflate.c:177:
+#define Tracec(c, x)

CHECK:CAMELCASE: Avoid CamelCase: <Tracecv>
#2791: FILE: lib/inflate.c:178:
+#define Tracecv(c, x)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2805: FILE: lib/inflate.c:193:
+  uint8_t e;                /* number of extra bits or operation */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2805: FILE: lib/inflate.c:193:
+  uint8_t e;                /* number of extra bits or operation */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2806: FILE: lib/inflate.c:194:
+  uint8_t b;                /* number of bits in this code or subcode */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2806: FILE: lib/inflate.c:194:
+  uint8_t b;                /* number of bits in this code or subcode */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2809: FILE: lib/inflate.c:196:
+    uint16_t n;              /* literal, length base, or distance base */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2809: FILE: lib/inflate.c:196:
+    uint16_t n;              /* literal, length base, or distance base */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2837: FILE: lib/inflate.c:227:
+static const unsigned border[] = {   /* Order of the bit length code lengths */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2840: FILE: lib/inflate.c:229:
+static const uint16_t cplens[] = { /* Copy lengths for literal codes 257..285 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2845: FILE: lib/inflate.c:233:
+static const uint16_t cplext[] = {   /* Extra bits for literal codes 257..285 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2849: FILE: lib/inflate.c:236:
+static const uint16_t cpdist[] = {   /* Copy offsets for distance codes 0..29 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2854: FILE: lib/inflate.c:240:
+static const uint16_t cpdext[] = {   /* Extra bits for distance codes */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2863: FILE: lib/inflate.c:277:
+STATIC uint32_t bb;                         /* bit buffer */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2867: FILE: lib/inflate.c:280:
+STATIC const uint16_t mask_bits[] = {

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2875: FILE: lib/inflate.c:286:
+#define NEXTBYTE()  ({ int v = get_byte(); if (v < 0) goto underrun; \
+			(uint8_t)v; })

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2878: FILE: lib/inflate.c:289:
+			{b |= ((uint32_t)NEXTBYTE())<<k; k += 8; } }
 			                            ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2939: FILE: lib/inflate.c:341:
+	const uint16_t *d,      /* list of base values for non-simple codes */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2940: FILE: lib/inflate.c:342:
+	const uint16_t *e,      /* list of extra bits for non-simple codes */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2960: FILE: lib/inflate.c:533:
+      r.b = (uint8_t)(k - w);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2983: FILE: lib/inflate.c:614:
+  unsigned n;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2983: FILE: lib/inflate.c:614:
+  unsigned n;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2984: FILE: lib/inflate.c:615:
+  int d;              /* source index for copy */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2989: FILE: lib/inflate.c:619:
+  register uint32_t b;       /* bit buffer */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2989: FILE: lib/inflate.c:619:
+  register uint32_t b;       /* bit buffer */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2998: FILE: lib/inflate.c:645:
+      slide[w++] = (uint8_t)t->v.n;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3009: FILE: lib/inflate.c:684:
+		 * manage wrap-around */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3010: FILE: lib/inflate.c:685:
+		e = WSIZE - ((d &= WSIZE-1) > w ? d : w);
 		                        ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#3034: FILE: lib/inflate.c:707:
+	if (w == WSIZE) {
+	  flush_output(w);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3044: FILE: lib/inflate.c:735:
+  register uint32_t b;       /* bit buffer */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3044: FILE: lib/inflate.c:735:
+  register uint32_t b;       /* bit buffer */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3053: FILE: lib/inflate.c:765:
+    slide[w++] = (uint8_t)b;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3062: FILE: lib/inflate.c:871:
+  register uint32_t b;       /* bit buffer */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3062: FILE: lib/inflate.c:871:
+  register uint32_t b;       /* bit buffer */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3071: FILE: lib/inflate.c:1066:
+  register uint32_t b;       /* bit buffer */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3071: FILE: lib/inflate.c:1066:
+  register uint32_t b;       /* bit buffer */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3081: FILE: lib/inflate.c:1163:
+static uint32_t crc_32_tab[256];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3082: FILE: lib/inflate.c:1164:
+static uint32_t crc;	/* initialized in makecrc() so it'll reside in bss */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3091: FILE: lib/inflate.c:1205:
+  crc = (uint32_t)0xffffffffUL; /* shift register contents */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3105: FILE: lib/inflate.c:1223:
+	uint32_t c = crc;         /* temporary variable */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3106: FILE: lib/inflate.c:1224:
+	unsigned n;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#3107: FILE: lib/inflate.c:1225:
+	uint8_t *in, ch;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "flush_cb"
#3116: FILE: lib/inflate.c:1234:
+	if (flush_cb != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3128: FILE: lib/inflate.c:1246:
+
+

WARNING:SPACING: missing space after return type
#3135: FILE: lib/inflate.c:1252:
+		       int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#3136: FILE: lib/inflate.c:1253:
+		       int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#3139: FILE: lib/inflate.c:1256:
+		       void(*error_fn)(char *x)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3140: FILE: lib/inflate.c:1257:
+  )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3143: FILE: lib/inflate.c:1259:
+    uint8_t flags;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#3143: FILE: lib/inflate.c:1259:
+    uint8_t flags;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3148: FILE: lib/inflate.c:1262:
+    uint32_t orig_crc = 0;       /* original crc */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3148: FILE: lib/inflate.c:1262:
+    uint32_t orig_crc = 0;       /* original crc */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3149: FILE: lib/inflate.c:1263:
+    uint32_t orig_len = 0;       /* original uncompressed length */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3149: FILE: lib/inflate.c:1263:
+    uint32_t orig_len = 0;       /* original uncompressed length */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3152: FILE: lib/inflate.c:1266:
+    set_error_fn(error_fn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3153: FILE: lib/inflate.c:1267:
+    if (fill == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3153: FILE: lib/inflate.c:1267:
+    if (fill == NULL)
+	    fill_cb = empty_fill;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fill"
#3153: FILE: lib/inflate.c:1267:
+    if (fill == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3155: FILE: lib/inflate.c:1269:
+    else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3155: FILE: lib/inflate.c:1269:
+    else
+	    fill_cb = fill;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3157: FILE: lib/inflate.c:1271:
+    if (output)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3157: FILE: lib/inflate.c:1271:
+    if (output)
+	    window = output;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3157: FILE: lib/inflate.c:1271:
+    if (output)
[...]
+    else {
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3159: FILE: lib/inflate.c:1273:
+    else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3159: FILE: lib/inflate.c:1273:
+    else {
+	    window = malloc(0x8000);

CHECK:BRACES: Unbalanced braces around else statement
#3159: FILE: lib/inflate.c:1273:
+    else {

WARNING:TABSTOP: Statements should start on a tabstop
#3161: FILE: lib/inflate.c:1275:
+	    if (!window)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#3161: FILE: lib/inflate.c:1275:
+	    if (!window)
+		    panic("can't allocate buffers");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3164: FILE: lib/inflate.c:1278:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3166: FILE: lib/inflate.c:1280:
+    insize = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3167: FILE: lib/inflate.c:1281:
+    if (buf)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3167: FILE: lib/inflate.c:1281:
+    if (buf)
+	    inbuf = buf;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3169: FILE: lib/inflate.c:1283:
+    else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3169: FILE: lib/inflate.c:1283:
+    else
+	    inbuf = malloc(INBUFSIZ);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3171: FILE: lib/inflate.c:1285:
+    inptr = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3172: FILE: lib/inflate.c:1286:
+    outcnt = 0;^I^I/* bytes in output buffer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3173: FILE: lib/inflate.c:1287:
+    bytes_out = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3174: FILE: lib/inflate.c:1288:
+    crc = (uint32_t)0xffffffffL; /* shift register contents */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3175: FILE: lib/inflate.c:1289:
+    makecrc();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3185: FILE: lib/inflate.c:1307:
+    flags  = (uint8_t)get_byte();$

CHECK:SPACING: No space is necessary after a cast
#3197: FILE: lib/inflate.c:1372:
+    orig_crc = (uint32_t) NEXTBYTE();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3197: FILE: lib/inflate.c:1372:
+    orig_crc = (uint32_t) NEXTBYTE();$

CHECK:SPACING: No space is necessary after a cast
#3198: FILE: lib/inflate.c:1373:
+    orig_crc |= (uint32_t) NEXTBYTE() << 8;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3198: FILE: lib/inflate.c:1373:
+    orig_crc |= (uint32_t) NEXTBYTE() << 8;$

CHECK:SPACING: No space is necessary after a cast
#3199: FILE: lib/inflate.c:1374:
+    orig_crc |= (uint32_t) NEXTBYTE() << 16;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3199: FILE: lib/inflate.c:1374:
+    orig_crc |= (uint32_t) NEXTBYTE() << 16;$

CHECK:SPACING: No space is necessary after a cast
#3200: FILE: lib/inflate.c:1375:
+    orig_crc |= (uint32_t) NEXTBYTE() << 24;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3200: FILE: lib/inflate.c:1375:
+    orig_crc |= (uint32_t) NEXTBYTE() << 24;$

CHECK:SPACING: No space is necessary after a cast
#3206: FILE: lib/inflate.c:1377:
+    orig_len = (uint32_t) NEXTBYTE();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3206: FILE: lib/inflate.c:1377:
+    orig_len = (uint32_t) NEXTBYTE();$

CHECK:SPACING: No space is necessary after a cast
#3207: FILE: lib/inflate.c:1378:
+    orig_len |= (uint32_t) NEXTBYTE() << 8;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3207: FILE: lib/inflate.c:1378:
+    orig_len |= (uint32_t) NEXTBYTE() << 8;$

CHECK:SPACING: No space is necessary after a cast
#3208: FILE: lib/inflate.c:1379:
+    orig_len |= (uint32_t) NEXTBYTE() << 16;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3208: FILE: lib/inflate.c:1379:
+    orig_len |= (uint32_t) NEXTBYTE() << 16;$

CHECK:SPACING: No space is necessary after a cast
#3209: FILE: lib/inflate.c:1380:
+    orig_len |= (uint32_t) NEXTBYTE() << 24;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3209: FILE: lib/inflate.c:1380:
+    orig_len |= (uint32_t) NEXTBYTE() << 24;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3217: FILE: lib/inflate.c:1391:
+    if (!output)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3217: FILE: lib/inflate.c:1391:
+    if (!output)
+	    free(window);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3219: FILE: lib/inflate.c:1393:
+    if (posp)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3219: FILE: lib/inflate.c:1393:
+    if (posp)
+	    *posp = inptr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3224: FILE: lib/inflate.c:1398:
+    free(window);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3225: FILE: lib/inflate.c:1399:
+    if (!buf)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#3225: FILE: lib/inflate.c:1399:
+    if (!buf)
+	    free(inbuf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#3252: FILE: scripts/bin_size:2:
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 237 warnings, 219 checks, 3129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
