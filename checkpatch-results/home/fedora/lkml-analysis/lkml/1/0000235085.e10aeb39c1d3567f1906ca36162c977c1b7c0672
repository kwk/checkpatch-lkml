CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/ptrace.h:174:
+extern void ptrace_utrace_exit(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/sched.h:1776:
+extern void do_notify_parent_cldstop(struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#100: FILE: include/linux/sched.h:1776:
+extern void do_notify_parent_cldstop(struct task_struct *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#100: FILE: include/linux/sched.h:1776:
+extern void do_notify_parent_cldstop(struct task_struct *, int);

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: kernel/ptrace.c:87:
+	struct utrace_attached_engine *engine;
+	engine = utrace_attach_task(child, UTRACE_ATTACH_MATCH_OPS,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#206: FILE: kernel/ptrace.c:89:
+	if (likely(!IS_ERR(engine))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: kernel/ptrace.c:91:
+		int ret = utrace_control(child, engine, UTRACE_DETACH);
+		WARN_ON(ret && ret != -ESRCH);

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: kernel/ptrace.c:99:
+	struct task_struct *child;
+	read_lock(&tasklist_lock);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#249: FILE: kernel/ptrace.c:167:
+static struct utrace_attached_engine *ptrace_attach_utrace(

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: kernel/ptrace.c:214:
+		int ret;
+		engine = utrace_attach_task(task, UTRACE_ATTACH_MATCH_OPS,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#317: FILE: kernel/ptrace.c:235:
+static struct task_struct *ptrace_tracer_task(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#336: FILE: kernel/ptrace.c:254:
+static enum utrace_syscall_action ptrace_syscall_action(

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#441: FILE: kernel/ptrace.c:359:
+	if (unlikely(IS_ERR(child_engine))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#445: FILE: kernel/ptrace.c:363:
+		/* XXX already set by old ptrace code
+		task_lock(child);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: kernel/ptrace.c:375:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#461: FILE: kernel/ptrace.c:379:
+	int code = SIGTRAP;
+	if (task->ptrace & PT_TRACESYSGOOD)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#491: FILE: kernel/ptrace.c:409:
+		int ret = utrace_set_events(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#543: FILE: kernel/ptrace.c:461:
+	/* Update the siginfo structure if the signal has
+	   changed.  If the debugger wanted something

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#545: FILE: kernel/ptrace.c:463:
+	   have updated *info via PTRACE_SETSIGINFO.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: kernel/ptrace.c:501:
+			int x = utrace_control(task, engine, UTRACE_INTERRUPT);
+			WARN_ON(x);

WARNING:SIZEOF_PARENTHESIS: sizeof *info should be sizeof(*info)
#599: FILE: kernel/ptrace.c:517:
+			memset(info, 0, sizeof *info);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#606: FILE: kernel/ptrace.c:524:
+		/* Fall through.  */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#649: FILE: kernel/ptrace.c:567:
+	int ret = utrace_control(task, engine, UTRACE_DETACH);
+	WARN_ON(ret && ret != -ESRCH);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#656: FILE: kernel/ptrace.c:574:
+static struct utrace_attached_engine *ptrace_attach_utrace(

WARNING:LINE_SPACING: Missing a blank line after declarations
#660: FILE: kernel/ptrace.c:578:
+	struct utrace_attached_engine *engine;
+	engine = utrace_attach_task(child, UTRACE_ATTACH_CREATE |

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#716: FILE: kernel/ptrace.c:670:
+	if (unlikely(IS_ERR(engine))) {

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#849: FILE: kernel/ptrace.c:1072:
+	if (unlikely(IS_ERR(engine)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000235085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 8 checks, 836 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000235085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
