WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: drivers/regulator/virtual.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#64: FILE: drivers/regulator/virtual.c:20:
+	struct mutex lock;

CHECK:CAMELCASE: Avoid CamelCase: <min_uV>
#76: FILE: drivers/regulator/virtual.c:32:
+	if (data->min_uV && data->max_uV

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <max_uV>
#76: FILE: drivers/regulator/virtual.c:32:
+	if (data->min_uV && data->max_uV

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#77: FILE: drivers/regulator/virtual.c:33:
+	if (data->min_uV && data->max_uV
+	    && data->min_uV <= data->max_uV) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#81: FILE: drivers/regulator/virtual.c:37:
+			printk(KERN_ERR "regulator_set_voltage() failed: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#92: FILE: drivers/regulator/virtual.c:48:
+			printk(KERN_ERR "regulator_enable() failed: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: drivers/regulator/virtual.c:49:
+			printk(KERN_ERR "regulator_enable() failed: %d\n",
+				ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#101: FILE: drivers/regulator/virtual.c:57:
+			printk(KERN_ERR "regulator_disable() failed: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: drivers/regulator/virtual.c:58:
+			printk(KERN_ERR "regulator_disable() failed: %d\n",
+				ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: drivers/regulator/virtual.c:66:
+	struct virtual_consumer_data *data = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n", data->min_uV);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#119: FILE: drivers/regulator/virtual.c:75:
+	if (strict_strtol(buf, 10, &val) != 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: drivers/regulator/virtual.c:92:
+	struct virtual_consumer_data *data = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n", data->max_uV);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#145: FILE: drivers/regulator/virtual.c:101:
+	if (strict_strtol(buf, 10, &val) != 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#184: FILE: drivers/regulator/virtual.c:140:
+	if (strncmp(buf, "fast", strlen("fast")) == 0)
[...]
+	else if (strncmp(buf, "normal", strlen("normal")) == 0)
[...]
+	else if (strncmp(buf, "idle", strlen("idle")) == 0)
[...]
+	else if (strncmp(buf, "standby", strlen("standby")) == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: drivers/regulator/virtual.c:148:
+	else {

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0666' used
#206: FILE: drivers/regulator/virtual.c:162:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#208: FILE: drivers/regulator/virtual.c:164:
+static DEVICE_ATTR(min_microvolts, 0666, show_min_uV, set_min_uV);

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#209: FILE: drivers/regulator/virtual.c:165:
+static DEVICE_ATTR(max_microvolts, 0666, show_max_uV, set_max_uV);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0666' used
#209: FILE: drivers/regulator/virtual.c:165:
+static DEVICE_ATTR(max_microvolts, 0666, show_max_uV, set_max_uV);

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#209: FILE: drivers/regulator/virtual.c:165:
+static DEVICE_ATTR(max_microvolts, 0666, show_max_uV, set_max_uV);
WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#210: FILE: drivers/regulator/virtual.c:166:
+static DEVICE_ATTR(mode, 0666, show_mode, set_mode);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0666' used
#210: FILE: drivers/regulator/virtual.c:166:
+static DEVICE_ATTR(mode, 0666, show_mode, set_mode);

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#210: FILE: drivers/regulator/virtual.c:166:
+static DEVICE_ATTR(mode, 0666, show_mode, set_mode);
CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*drvdata)...) over kzalloc(sizeof(struct virtual_consumer_data)...)
#224: FILE: drivers/regulator/virtual.c:180:
+	drvdata = kzalloc(sizeof(struct virtual_consumer_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drvdata"
#225: FILE: drivers/regulator/virtual.c:181:
+	if (drvdata == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: drivers/regulator/virtual.c:237:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286447.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 11 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286447.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
