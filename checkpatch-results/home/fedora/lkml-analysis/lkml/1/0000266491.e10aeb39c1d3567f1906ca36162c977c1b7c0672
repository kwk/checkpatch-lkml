WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '7b7254ed4c788b8dbfdca3d52f21e29ae935805c', maybe rebased or not pulled?
#59: 
commit 7b7254ed4c788b8dbfdca3d52f21e29ae935805c

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: arch/um/include/kern_util.h:23:
+extern void do_signal(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#176: FILE: arch/um/kernel/skas/syscall.c:15:
+extern int unvcpu(struct pt_regs *regs, siginfo_t *siginfo);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#219: FILE: arch/um/kernel/syscall.c:13:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#229: FILE: arch/um/kernel/syscall.c:162:
+extern long do_vcpu(int mm_fd, struct vcpu_user __user *new,

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#277: FILE: arch/x86/kernel/entry_32.S:374:
+	testl $(_TIF_SYSCALL_EMU|_TIF_SYSCALL_TRACE|_TIF_SECCOMP|_TIF_SYSCALL_AUDIT|_TIF_VCPU),TI_flags(%ebp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#447: FILE: arch/x86/kernel/sys_i386_32.c:277:
+extern long do_vcpu(int mm_fd, struct vcpu_user __user *new,

CHECK:SPACING: No space is necessary after a cast
#454: FILE: arch/x86/kernel/sys_i386_32.c:284:
+	err = do_vcpu(regs.bx, (struct vcpu_user __user *) regs.cx, &regs);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#469: FILE: arch/x86/kernel/sys_x86_64.c:266:
+extern long do_vcpu(int mm_fd, struct vcpu_user __user *new,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#501: FILE: include/asm-um/desc.h:5:
+#define LM(info) (info)->lm == 0

CHECK:BIT_MACRO: Prefer using the BIT macro
#591: FILE: include/asm-um/thread_info.h:95:
+#define _TIF_VCPU		(1 << TIF_VCPU)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#610: FILE: include/asm-x86/thread_info_32.h:165:
+#define _TIF_VCPU		(1<<TIF_VCPU)
                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#610: FILE: include/asm-x86/thread_info_32.h:165:
+#define _TIF_VCPU		(1<<TIF_VCPU)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#630: FILE: include/asm-x86/thread_info_64.h:150:
+#define _TIF_VCPU		(1<<TIF_VCPU)
                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#630: FILE: include/asm-x86/thread_info_64.h:150:
+#define _TIF_VCPU		(1<<TIF_VCPU)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#773: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#778: FILE: kernel/vcpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#784: FILE: kernel/vcpu.c:7:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#788: FILE: kernel/vcpu.c:11:
+extern asmlinkage int sys_set_thread_area(struct user_desc __user *u_info);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#789: FILE: kernel/vcpu.c:12:
+extern int do_switch(struct task_struct *task, int fd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->vcpu"
#797: FILE: kernel/vcpu.c:20:
+	if (current->vcpu == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*current->vcpu)...) over kmalloc(sizeof(struct vcpu)...)
#798: FILE: kernel/vcpu.c:21:
+		current->vcpu = kmalloc(sizeof(struct vcpu), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->vcpu"
#799: FILE: kernel/vcpu.c:22:
+		if (current->vcpu == NULL)

ERROR:SPACING: space required before the open brace '{'
#822: FILE: kernel/vcpu.c:45:
+	for (i = 0; i < ARRAY_SIZE(new->tls_array); i++){

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#855: FILE: kernel/vcpu.c:78:
+extern void do_switch_mm_struct(struct task_struct *task,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vcpu->mm"
#867: FILE: kernel/vcpu.c:90:
+	if (vcpu->mm != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'siginfo != NULL'
#878: FILE: kernel/vcpu.c:101:
+	if ((siginfo != NULL) &&
+	    (copy_to_user(&vcpu->state->siginfo, siginfo,
+			  sizeof(siginfo_t)) != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "siginfo"
#878: FILE: kernel/vcpu.c:101:
+	if ((siginfo != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "siginfo"
#883: FILE: kernel/vcpu.c:106:
+	event = (siginfo != NULL) ? VCPU_SIGNAL : VCPU_SYSCALL;

ERROR:SPACING: space required before the open brace '{'
#889: FILE: kernel/vcpu.c:112:
+	for (i = 0; i < ARRAY_SIZE(vcpu->state->tls_array); i++){

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 12 warnings, 15 checks, 659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
