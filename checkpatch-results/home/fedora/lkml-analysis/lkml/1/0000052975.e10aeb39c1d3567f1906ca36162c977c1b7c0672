WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: arch/arm/mach-msm/board-dream-gpio.c:1:
+/* arch/arm/mach-msm/board-dream-gpio.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: arch/arm/mach-msm/board-dream-gpio.c:1:
+/* arch/arm/mach-msm/board-dream-gpio.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#82: FILE: arch/arm/mach-msm/board-dream-gpio.c:22:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#83: FILE: arch/arm/mach-msm/board-dream-gpio.c:23:
+#include <asm/gpio.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#95: FILE: arch/arm/mach-msm/board-dream-gpio.c:35:
+static uint8_t dream_cpld_shadow[4] = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: arch/arm/mach-msm/board-dream-gpio.c:38:
+        [0] = 0x40, // for serial debug, low current$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: arch/arm/mach-msm/board-dream-gpio.c:38:
+        [0] = 0x40, // for serial debug, low current$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/arm/mach-msm/board-dream-gpio.c:41:
+        [0] = 0x80, // for serial debug, low current$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/arm/mach-msm/board-dream-gpio.c:41:
+        [0] = 0x80, // for serial debug, low current$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: arch/arm/mach-msm/board-dream-gpio.c:43:
+        [1] = 0x04, // I2C_PULL$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: arch/arm/mach-msm/board-dream-gpio.c:43:
+        [1] = 0x04, // I2C_PULL$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: arch/arm/mach-msm/board-dream-gpio.c:44:
+        [3] = 0x04, // mmdi 32k en$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/arm/mach-msm/board-dream-gpio.c:44:
+        [3] = 0x04, // mmdi 32k en$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#106: FILE: arch/arm/mach-msm/board-dream-gpio.c:46:
+};
+static uint8_t dream_int_mask[2] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#106: FILE: arch/arm/mach-msm/board-dream-gpio.c:46:
+static uint8_t dream_int_mask[2] = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: arch/arm/mach-msm/board-dream-gpio.c:47:
+        [0] = 0xff, /* mask all interrupts */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: arch/arm/mach-msm/board-dream-gpio.c:47:
+        [0] = 0xff, /* mask all interrupts */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: arch/arm/mach-msm/board-dream-gpio.c:48:
+        [1] = 0xff,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/arm/mach-msm/board-dream-gpio.c:48:
+        [1] = 0xff,$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: arch/arm/mach-msm/board-dream-gpio.c:50:
+};
+static uint8_t dream_sleep_int_mask[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#110: FILE: arch/arm/mach-msm/board-dream-gpio.c:50:
+static uint8_t dream_sleep_int_mask[] = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: arch/arm/mach-msm/board-dream-gpio.c:51:
+        [0] = 0xff,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: arch/arm/mach-msm/board-dream-gpio.c:51:
+        [0] = 0xff,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: arch/arm/mach-msm/board-dream-gpio.c:52:
+        [1] = 0xff,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: arch/arm/mach-msm/board-dream-gpio.c:52:
+        [1] = 0xff,$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#114: FILE: arch/arm/mach-msm/board-dream-gpio.c:54:
+};
+static int dream_suspended;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#116: FILE: arch/arm/mach-msm/board-dream-gpio.c:56:
+static int dream_gpio_read(struct gpio_chip *chip, unsigned n)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#118: FILE: arch/arm/mach-msm/board-dream-gpio.c:58:
+	uint8_t b;

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: arch/arm/mach-msm/board-dream-gpio.c:60:
+	int reg;
+	if (n >= TROUT_GPIO_VIRTUAL_BASE)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#127: FILE: arch/arm/mach-msm/board-dream-gpio.c:67:
+static void update_pwrsink(unsigned gpio, unsigned on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#127: FILE: arch/arm/mach-msm/board-dream-gpio.c:67:
+static void update_pwrsink(unsigned gpio, unsigned on)

ERROR:SPACING: space required before the open parenthesis '('
#129: FILE: arch/arm/mach-msm/board-dream-gpio.c:69:
+	switch(gpio) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: arch/arm/mach-msm/board-dream-gpio.c:77:
+static uint8_t dream_gpio_write_shadow(unsigned n, unsigned on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: arch/arm/mach-msm/board-dream-gpio.c:77:
+static uint8_t dream_gpio_write_shadow(unsigned n, unsigned on)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#139: FILE: arch/arm/mach-msm/board-dream-gpio.c:79:
+	uint8_t b = 1U << (n & 7);

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: arch/arm/mach-msm/board-dream-gpio.c:82:
+	if(on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: arch/arm/mach-msm/board-dream-gpio.c:88:
+static int dream_gpio_write(struct gpio_chip *chip, unsigned n, unsigned on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: arch/arm/mach-msm/board-dream-gpio.c:88:
+static int dream_gpio_write(struct gpio_chip *chip, unsigned n, unsigned on)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#152: FILE: arch/arm/mach-msm/board-dream-gpio.c:92:
+	uint8_t reg_val;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#155: FILE: arch/arm/mach-msm/board-dream-gpio.c:95:
+		printk(KERN_ERR "dream_gpio_write called on input %d\n", n);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dream_gpio_write', this function's name, in a string
#155: FILE: arch/arm/mach-msm/board-dream-gpio.c:95:
+		printk(KERN_ERR "dream_gpio_write called on input %d\n", n);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#156: FILE: arch/arm/mach-msm/board-dream-gpio.c:96:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: arch/arm/mach-msm/board-dream-gpio.c:109:
+	if(flags & (GPIOF_OUTPUT_LOW | GPIOF_OUTPUT_HIGH))

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#174: FILE: arch/arm/mach-msm/board-dream-gpio.c:114:
+static int dream_gpio_get_irq_num(struct gpio_chip *chip, unsigned int gpio, unsigned int *irqp, unsigned long *irqnumflagsp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#182: FILE: arch/arm/mach-msm/board-dream-gpio.c:122:
+	if(irqnumflagsp)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#190: FILE: arch/arm/mach-msm/board-dream-gpio.c:130:
+	uint8_t mask = TROUT_INT_TO_MASK(irq);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#199: FILE: arch/arm/mach-msm/board-dream-gpio.c:139:
+	uint8_t reg_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#201: FILE: arch/arm/mach-msm/board-dream-gpio.c:141:
+	uint8_t mask = TROUT_INT_TO_MASK(irq);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#207: FILE: arch/arm/mach-msm/board-dream-gpio.c:147:
+	/*printk(KERN_INFO "dream_gpio_irq_mask irq %d => %d:%02x\n",
+	       irq, bank, reg_val);*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#207: FILE: arch/arm/mach-msm/board-dream-gpio.c:147:
+	       irq, bank, reg_val);*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#216: FILE: arch/arm/mach-msm/board-dream-gpio.c:156:
+	uint8_t reg_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#218: FILE: arch/arm/mach-msm/board-dream-gpio.c:158:
+	uint8_t mask = TROUT_INT_TO_MASK(irq);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#224: FILE: arch/arm/mach-msm/board-dream-gpio.c:164:
+	/*printk(KERN_INFO "dream_gpio_irq_unmask irq %d => %d:%02x\n",
+	       irq, bank, reg_val);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#224: FILE: arch/arm/mach-msm/board-dream-gpio.c:164:
+	       irq, bank, reg_val);*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#234: FILE: arch/arm/mach-msm/board-dream-gpio.c:174:
+	uint8_t mask = TROUT_INT_TO_MASK(irq);

ERROR:SPACING: space required before the open parenthesis '('
#237: FILE: arch/arm/mach-msm/board-dream-gpio.c:177:
+	if(on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#248: FILE: arch/arm/mach-msm/board-dream-gpio.c:188:
+	unsigned v;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#252: FILE: arch/arm/mach-msm/board-dream-gpio.c:192:
+	uint8_t int_mask;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#260: FILE: arch/arm/mach-msm/board-dream-gpio.c:200:
+			printk(KERN_ERR "dream_gpio_irq_handler: got masked "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dream_gpio_irq_handler', this function's name, in a string
#260: FILE: arch/arm/mach-msm/board-dream-gpio.c:200:
+			printk(KERN_ERR "dream_gpio_irq_handler: got masked "

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: arch/arm/mach-msm/board-dream-gpio.c:201:
+			printk(KERN_ERR "dream_gpio_irq_handler: got masked "
+			       "interrupt: %d:%02x\n", bank, v & int_mask);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#268: FILE: arch/arm/mach-msm/board-dream-gpio.c:208:
+			/*printk(KERN_INFO "msm_gpio_irq_handler %d:%02x %02x b"
+			       "it %d irq %d\n", bank, v, m, j, int_base + j);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#268: FILE: arch/arm/mach-msm/board-dream-gpio.c:208:
+			       "it %d irq %d\n", bank, v, m, j, int_base + j);*/

WARNING:MISSING_SPACE: break quoted strings at a space character
#268: FILE: arch/arm/mach-msm/board-dream-gpio.c:208:
+			/*printk(KERN_INFO "msm_gpio_irq_handler %d:%02x %02x b"
+			       "it %d irq %d\n", bank, v, m, j, int_base + j);*/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dream_init_gpio', this function's name, in a string
#337: FILE: arch/arm/mach-msm/board-dream-gpio.c:277:
+	pr_info("dream_init_gpio: cpld_usb_hw2_sw = %d\n", cpld_usb_h2w_sw);

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: arch/arm/mach-msm/board-dream-gpio.c:280:
+	for(i = 0; i < ARRAY_SIZE(dream_cpld_shadow); i++)

ERROR:SPACING: space required before the open parenthesis '('
#343: FILE: arch/arm/mach-msm/board-dream-gpio.c:283:
+	for(i = TROUT_INT_START; i <= TROUT_INT_END; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: arch/arm/mach-msm/board-dream-gpio.c:295:
+	if(sysdev_class_register(&dream_sysdev_class) == 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#368: FILE: arch/arm/mach-msm/board-dream-mmc.c:1:
+/* linux/arch/arm/mach-msm/board-dream-mmc.c

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#368: FILE: arch/arm/mach-msm/board-dream-mmc.c:1:
+/* linux/arch/arm/mach-msm/board-dream-mmc.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#383: FILE: arch/arm/mach-msm/board-dream-mmc.c:16:
+#include <asm/gpio.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#384: FILE: arch/arm/mach-msm/board-dream-mmc.c:17:
+#include <asm/io.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#396: FILE: arch/arm/mach-msm/board-dream-mmc.c:29:
+extern int msm_add_sdcc(unsigned int controller, struct mmc_platform_data *plat,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#400: FILE: arch/arm/mach-msm/board-dream-mmc.c:33:
+static void config_gpio_table(uint32_t *table, int len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#403: FILE: arch/arm/mach-msm/board-dream-mmc.c:36:
+	unsigned id;

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: arch/arm/mach-msm/board-dream-mmc.c:37:
+	unsigned id;
+	for(n = 0; n < len; n++) {

ERROR:SPACING: space required before the open parenthesis '('
#404: FILE: arch/arm/mach-msm/board-dream-mmc.c:37:
+	for(n = 0; n < len; n++) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#412: FILE: arch/arm/mach-msm/board-dream-mmc.c:45:
+static uint32_t sdcard_on_gpio_table[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#421: FILE: arch/arm/mach-msm/board-dream-mmc.c:54:
+static uint32_t sdcard_off_gpio_table[] = {

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#434: FILE: arch/arm/mach-msm/board-dream-mmc.c:67:
+	int cal = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#435: FILE: arch/arm/mach-msm/board-dream-mmc.c:68:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#440: FILE: arch/arm/mach-msm/board-dream-mmc.c:73:
+__setup("board_dream.disable_sdcard=", dream_disablesdcard_setup);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: arch/arm/mach-msm/board-dream-mmc.c:103:
+	BUG_ON(!vreg_sdslot);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: arch/arm/mach-msm/board-dream-mmc.c:112:
+		printk("%s: Disabling SD slot power\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: arch/arm/mach-msm/board-dream-mmc.c:124:
+			printk(KERN_ERR "%s: Error enabling vreg (%d)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: arch/arm/mach-msm/board-dream-mmc.c:135:
+			printk("%s: Setting level to %u\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#503: FILE: arch/arm/mach-msm/board-dream-mmc.c:136:
+^I^I^I        __func__, mmc_vdd_table[i].level);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: arch/arm/mach-msm/board-dream-mmc.c:136:
+			printk("%s: Setting level to %u\n",
+			        __func__, mmc_vdd_table[i].level);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#508: FILE: arch/arm/mach-msm/board-dream-mmc.c:141:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#516: FILE: arch/arm/mach-msm/board-dream-mmc.c:149:
+	printk(KERN_ERR "%s: Invalid VDD %d specified\n", __func__, vdd);

CHECK:SPACING: No space is necessary after a cast
#524: FILE: arch/arm/mach-msm/board-dream-mmc.c:157:
+	status = (unsigned int) gpio_get_value(TROUT_GPIO_SDMC_CD_N);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#528: FILE: arch/arm/mach-msm/board-dream-mmc.c:161:
+#define TROUT_MMC_VDD	MMC_VDD_165_195 | MMC_VDD_20_21 | MMC_VDD_21_22 \
+			| MMC_VDD_22_23 | MMC_VDD_23_24 | MMC_VDD_24_25 \
+			| MMC_VDD_25_26 | MMC_VDD_26_27 | MMC_VDD_27_28 \
+			| MMC_VDD_28_29 | MMC_VDD_29_30

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#553: FILE: arch/arm/mach-msm/board-dream-mmc.c:186:
+		printk(KERN_INFO "dream: SD-Card interface disabled\n");

CHECK:SPACING: No space is necessary after a cast
#560: FILE: arch/arm/mach-msm/board-dream-mmc.c:193:
+	dream_sdslot_switchvdd(NULL, (unsigned int) val);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#572: FILE: arch/arm/mach-msm/board-dream-mmc.c:205:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#628: FILE: arch/arm/mach-msm/board-dream.c:27:
+#include <asm/gpio.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#638: FILE: arch/arm/mach-msm/board-dream.c:38:
+
+

WARNING:CONST_STRUCT: struct machine_desc should normally be const
#653: FILE: arch/arm/mach-msm/board-dream.c:54:
+static void __init dream_fixup(struct machine_desc *desc, struct tag *tags,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: arch/arm/mach-msm/board-dream.c:55:
+static void __init dream_fixup(struct machine_desc *desc, struct tag *tags,
 				char **cmdline, struct meminfo *mi)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#669: FILE: arch/arm/mach-msm/board-dream.c:70:
+		printk(KERN_CRIT "%s: MMC init failure (%d)\n", __func__, rc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: arch/arm/mach-msm/board-dream.c:73:
+        mdelay(300);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: arch/arm/mach-msm/board-dream.c:73:
+        mdelay(300);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: arch/arm/mach-msm/board-dream.c:75:
+        mdelay(300);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: arch/arm/mach-msm/board-dream.c:75:
+        mdelay(300);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: arch/arm/mach-msm/board-dream.c:76:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: arch/arm/mach-msm/board-dream.c:76:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: arch/arm/mach-msm/board-dream.c:78:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: arch/arm/mach-msm/board-dream.c:78:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: arch/arm/mach-msm/board-dream.c:80:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: arch/arm/mach-msm/board-dream.c:80:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: arch/arm/mach-msm/board-dream.c:81:
+        mdelay(300);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: arch/arm/mach-msm/board-dream.c:81:
+        mdelay(300);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: arch/arm/mach-msm/board-dream.c:82:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: arch/arm/mach-msm/board-dream.c:82:
+        gpio_set_value(TROUT_GPIO_UI_LED_EN, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: arch/arm/mach-msm/board-dream.c:83:
+        mdelay(300);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: arch/arm/mach-msm/board-dream.c:83:
+        mdelay(300);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: arch/arm/mach-msm/board-dream.c:85:
+        mdelay(300);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: arch/arm/mach-msm/board-dream.c:85:
+        mdelay(300);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: arch/arm/mach-msm/board-dream.c:87:
+        mdelay(300);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: arch/arm/mach-msm/board-dream.c:87:
+        mdelay(300);$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#752: FILE: arch/arm/mach-msm/board-dream.h:27:
+#define MSM_PMEM_GPU1_BASE	MSM_RAM_CONSOLE_BASE - MSM_PMEM_GPU1_SIZE

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#754: FILE: arch/arm/mach-msm/board-dream.h:29:
+#define MSM_RAM_CONSOLE_BASE	MSM_EBI_BASE + 0x6d00000

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#755: FILE: arch/arm/mach-msm/board-dream.h:30:
+#define MSM_RAM_CONSOLE_SIZE	128 * SZ_1K

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#869: FILE: arch/arm/mach-msm/board-dream.h:144:
+#define TROUT_GPIO_TO_INT(n) (((n) <= TROUT_GPIO_BANK0_LAST_INT_SOURCE) ? \
+	(TROUT_INT_START - TROUT_GPIO_BANK0_FIRST_INT_SOURCE + (n)) : \
+	(TROUT_INT_BANK1_START - TROUT_GPIO_BANK1_FIRST_INT_SOURCE + (n)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#873: FILE: arch/arm/mach-msm/board-dream.h:148:
+#define TROUT_INT_TO_BANK(n) ((n - TROUT_INT_START) / TROUT_INT_BANK0_COUNT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#874: FILE: arch/arm/mach-msm/board-dream.h:149:
+#define TROUT_INT_TO_MASK(n) (1U << ((n - TROUT_INT_START) & 7))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#887: FILE: arch/arm/mach-msm/devices.c:158:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#976: FILE: arch/arm/mach-msm/devices.c:315:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#993: FILE: arch/arm/mach-msm/devices.c:332:
+	pdev = msm_sdcc_devices[controller-1];
 	                                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#997: FILE: arch/arm/mach-msm/devices.c:336:
+	if (!res)
[...]
+	else if (stat_irq) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1000: FILE: arch/arm/mach-msm/devices.c:339:
+		res->start = res->end = stat_irq;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1013: FILE: arch/arm/mach-msm/generic_gpio.c:1:
+/* arch/arm/mach-msm/generic_gpio.c

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1013: FILE: arch/arm/mach-msm/generic_gpio.c:1:
+/* arch/arm/mach-msm/generic_gpio.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#1033: FILE: arch/arm/mach-msm/generic_gpio.c:21:
+#include <asm/gpio.h>

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1036: FILE: arch/arm/mach-msm/generic_gpio.c:24:
+#define GPIO_NUM_TO_CHIP_INDEX(gpio) ((gpio)>>5)
                                             ^

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#1056: FILE: arch/arm/mach-msm/generic_gpio.c:44:
+	new_gpio_chip->state = kzalloc((new_gpio_chip->end + 1 - new_gpio_chip->start) * sizeof(new_gpio_chip->state[0]), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_gpio_chip->state"
#1057: FILE: arch/arm/mach-msm/generic_gpio.c:45:
+	if (new_gpio_chip->state == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1058: FILE: arch/arm/mach-msm/generic_gpio.c:46:
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_gpio_chip', this function's name, in a string
#1058: FILE: arch/arm/mach-msm/generic_gpio.c:46:
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1058: FILE: arch/arm/mach-msm/generic_gpio.c:46:
+	if (new_gpio_chip->state == NULL) {
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1069: FILE: arch/arm/mach-msm/generic_gpio.c:57:
+		new_gpio_chip_array = kmalloc(new_gpio_chip_array_size * sizeof(new_gpio_chip_array[0]), GFP_ATOMIC);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1069: FILE: arch/arm/mach-msm/generic_gpio.c:57:
+		new_gpio_chip_array = kmalloc(new_gpio_chip_array_size * sizeof(new_gpio_chip_array[0]), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_gpio_chip_array"
#1070: FILE: arch/arm/mach-msm/generic_gpio.c:58:
+		if (new_gpio_chip_array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1071: FILE: arch/arm/mach-msm/generic_gpio.c:59:
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_gpio_chip', this function's name, in a string
#1071: FILE: arch/arm/mach-msm/generic_gpio.c:59:
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1071: FILE: arch/arm/mach-msm/generic_gpio.c:59:
+		if (new_gpio_chip_array == NULL) {
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1088: FILE: arch/arm/mach-msm/generic_gpio.c:76:
+			printk(KERN_ERR "register_gpio_source %u-%u overlaps with %u-%u\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gpio_chip_array[i]"
#1098: FILE: arch/arm/mach-msm/generic_gpio.c:86:
+		if (gpio_chip_array[i] == NULL || gpio_chip_array[i]->start > new_gpio_chip->start)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#1117: FILE: arch/arm/mach-msm/generic_gpio.c:105:
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#1137: FILE: arch/arm/mach-msm/generic_gpio.c:125:
+	if (chip == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1142: FILE: arch/arm/mach-msm/generic_gpio.c:130:
+	if (chip->state[chip_index].refcount == 0) {
[...]
+	} else if ((flags & IRQF_SHARED) && (chip->state[chip_index].flags & IRQF_SHARED))
[...]
+	else
[...]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1155: FILE: arch/arm/mach-msm/generic_gpio.c:143:
+int gpio_request(unsigned gpio, const char *label)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1161: FILE: arch/arm/mach-msm/generic_gpio.c:149:
+void gpio_free(unsigned gpio)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1179: FILE: arch/arm/mach-msm/generic_gpio.c:167:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1191: FILE: arch/arm/mach-msm/generic_gpio.c:179:
+int gpio_to_irq(unsigned gpio)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1194: FILE: arch/arm/mach-msm/generic_gpio.c:182:
+	int ret, irq;
+	ret = gpio_get_irq_num(gpio, &irq, NULL);

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1203: FILE: arch/arm/mach-msm/generic_gpio.c:191:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1216: FILE: arch/arm/mach-msm/generic_gpio.c:204:
+int gpio_direction_input(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1222: FILE: arch/arm/mach-msm/generic_gpio.c:210:
+int gpio_direction_output(unsigned gpio, int value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1229: FILE: arch/arm/mach-msm/generic_gpio.c:217:
+int gpio_get_value(unsigned gpio)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1231: FILE: arch/arm/mach-msm/generic_gpio.c:219:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1244: FILE: arch/arm/mach-msm/generic_gpio.c:232:
+void gpio_set_value(unsigned gpio, int on)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1246: FILE: arch/arm/mach-msm/generic_gpio.c:234:
+	int ret = -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1260: FILE: arch/arm/mach-msm/generic_gpio.c:248:
+	int ret = -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1275: FILE: arch/arm/mach-msm/generic_gpio.c:263:
+	int ret = -ENOTSUPP;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1293: FILE: arch/arm/mach-msm/gpio_chip.h:1:
+/* arch/arm/mach-msm/gpio_chip.h

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1293: FILE: arch/arm/mach-msm/gpio_chip.h:1:
+/* arch/arm/mach-msm/gpio_chip.h

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1321: FILE: arch/arm/mach-msm/gpio_chip.h:29:
+	int (*get_irq_num)(struct gpio_chip *chip, unsigned int gpio, unsigned int *irqp, unsigned long *irqnumflagsp);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1323: FILE: arch/arm/mach-msm/gpio_chip.h:31:
+	int (*write)(struct gpio_chip *chip, unsigned int gpio, unsigned on);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1337: FILE: arch/arm/mach-msm/gpio_hw.h:1:
+/* arch/arm/mach-msm/gpio_hw.h

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1337: FILE: arch/arm/mach-msm/gpio_hw.h:1:
+/* arch/arm/mach-msm/gpio_hw.h

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1359: FILE: arch/arm/mach-msm/gpio_hw.h:23:
+/* see 80-VA736-2 Rev C pp 695-751
+**

WARNING:TYPO_SPELLING: 'interrup' may be misspelled - perhaps 'interrupt'?
#1396: FILE: arch/arm/mach-msm/gpio_hw.h:60:
+/* same pin map as above, 1=edge 0=level interrup */
                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1443: FILE: arch/arm/mach-msm/include/mach/gpio.h:1:
+/* linux/include/asm-arm/arch-msm/gpio.h

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1464: FILE: arch/arm/mach-msm/include/mach/gpio.h:22:
+int gpio_request(unsigned gpio, const char *label);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1465: FILE: arch/arm/mach-msm/include/mach/gpio.h:23:
+void gpio_free(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1466: FILE: arch/arm/mach-msm/include/mach/gpio.h:24:
+int gpio_direction_input(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1467: FILE: arch/arm/mach-msm/include/mach/gpio.h:25:
+int gpio_direction_output(unsigned gpio, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1468: FILE: arch/arm/mach-msm/include/mach/gpio.h:26:
+int gpio_get_value(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1469: FILE: arch/arm/mach-msm/include/mach/gpio.h:27:
+void gpio_set_value(unsigned gpio, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1470: FILE: arch/arm/mach-msm/include/mach/gpio.h:28:
+int gpio_to_irq(unsigned gpio);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1477: FILE: arch/arm/mach-msm/include/mach/gpio.h:35:
+#define GPIOF_IRQF_TRIGGER_NONE 0x00010000 /* IRQF_TRIGGER_NONE is 0 which also means "as already configured" */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1485: FILE: arch/arm/mach-msm/include/mach/gpio.h:43:
+extern int gpio_configure(unsigned int gpio, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1486: FILE: arch/arm/mach-msm/include/mach/gpio.h:44:
+extern int gpio_read_detect_status(unsigned int gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1487: FILE: arch/arm/mach-msm/include/mach/gpio.h:45:
+extern int gpio_clear_detect_status(unsigned int gpio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1498: FILE: drivers/mmc/host/msm_sdcc.c:72:
+	printk("msm..._request_end\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1506: FILE: drivers/mmc/host/msm_sdcc.c:123:
+	printk("data complete func\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1514: FILE: drivers/mmc/host/msm_sdcc.c:365:
+	printk("start_command\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1523: FILE: drivers/mmc/host/msm_sdcc.c:490:
+	printk("msmsdcc_pio_irq\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'msmsdcc_pio_irq', this function's name, in a string
#1523: FILE: drivers/mmc/host/msm_sdcc.c:490:
+	printk("msmsdcc_pio_irq\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1531: FILE: drivers/mmc/host/msm_sdcc.c:597:
+	printk("handle_irq_data\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1539: FILE: drivers/mmc/host/msm_sdcc.c:705:
+	printk("msm..._request\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1551: FILE: kernel/printk.c:717:
+#if 0

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052975.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 112 warnings, 49 checks, 1434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052975.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
