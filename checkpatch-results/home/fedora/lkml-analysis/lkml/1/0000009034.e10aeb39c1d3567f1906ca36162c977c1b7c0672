WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
>   Actually, there are more problems than these in the truncate path.  Some

WARNING:TYPO_SPELLING: 'Noticably' may be misspelled - perhaps 'Noticeably'?
#182: FILE: fs/attr.c:116:
+ * in attr. Noticably missing is inode size update, which is more complex
             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: fs/buffer.c:1965:
+int block_write_begin_newtrunc(struct file *file, struct address_space *mapping,
 			loff_t pos, unsigned len, unsigned flags,

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#277: FILE: fs/buffer.c:2010:
+ * bringing partial write blocks uptodate first.
                                  ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/buffer.c:2017:
+int block_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#284: FILE: fs/buffer.c:2017:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#284: FILE: fs/buffer.c:2017:
+			loff_t pos, unsigned len, unsigned flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: fs/buffer.c:2024:
+	ret = block_write_begin_newtrunc(file, mapping, pos, len, flags,
+					pagep, fsdata, get_block);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pagep"
#303: FILE: fs/buffer.c:2036:
+	if (unlikely(ret) && *pagep == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: fs/buffer.c:2038:
+		loff_t isize = mapping->host->i_size;
+		if (pos + len > isize)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: fs/buffer.c:2363:
+int cont_write_begin_newtrunc(struct file *file, struct address_space *mapping,
 			loff_t pos, unsigned len, unsigned flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: fs/buffer.c:2384:
+	err = block_write_begin_newtrunc(file, mapping, pos, len,
 				flags, pagep, fsdata, get_block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: fs/buffer.c:2391:
+int cont_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#336: FILE: fs/buffer.c:2391:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#336: FILE: fs/buffer.c:2391:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: fs/buffer.c:2401:
+		loff_t isize = mapping->host->i_size;
+		if (pos + len > isize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: fs/buffer.c:2526:
+int nobh_write_begin_newtrunc(struct file *file, struct address_space *mapping,
 			loff_t pos, unsigned len, unsigned flags,

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#401: FILE: fs/buffer.c:2668:
+ * On entry, the page is fully not uptodate.
                                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#402: FILE: fs/buffer.c:2669:
+ * On exit the page is fully uptodate in the areas outside (from,to)
                              ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: fs/buffer.c:2672:
+int nobh_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#405: FILE: fs/buffer.c:2672:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#405: FILE: fs/buffer.c:2672:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: fs/buffer.c:2688:
+		loff_t isize = mapping->host->i_size;
+		if (pos + len > isize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: fs/direct-io.c:1092:
+__blockdev_direct_IO_newtrunc(int rw, struct kiocb *iocb, struct inode *inode,
 	struct block_device *bdev, const struct iovec *iov, loff_t offset, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/direct-io.c:1209:
+__blockdev_direct_IO(int rw, struct kiocb *iocb, struct inode *inode,
+	struct block_device *bdev, const struct iovec *iov, loff_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: fs/direct-io.c:1216:
+	retval = __blockdev_direct_IO_newtrunc(rw, iocb, inode, bdev, iov,
+				offset, nr_segs, get_block, end_io, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: include/linux/fs.h:2248:
+ssize_t __blockdev_direct_IO_newtrunc(int rw, struct kiocb *iocb, struct inode *inode,
+	struct block_device *bdev, const struct iovec *iov, loff_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: include/linux/fs.h:2265:
+static inline ssize_t blockdev_direct_IO_newtrunc(int rw, struct kiocb *iocb,
+	struct inode *inode, struct block_device *bdev, const struct iovec *iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: include/linux/fs.h:2275:
+static inline ssize_t blockdev_direct_IO_no_locking_newtrunc(int rw, struct kiocb *iocb,
+	struct inode *inode, struct block_device *bdev, const struct iovec *iov,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#667: FILE: include/linux/fs.h:2352:
+extern int simple_setattr(struct dentry *dentry, struct iattr *attr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: include/linux/fs.h:2359:
+extern int simple_setsize(struct inode *inode, loff_t newsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#683: FILE: include/linux/fs.h:2394:
+extern int __must_check inode_setattr(struct inode *, const struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#683: FILE: include/linux/fs.h:2394:
+extern int __must_check inode_setattr(struct inode *, const struct iattr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iattr *' should also have an identifier name
#683: FILE: include/linux/fs.h:2394:
+extern int __must_check inode_setattr(struct inode *, const struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: include/linux/fs.h:2395:
+extern void generic_setattr(struct inode *inode, const struct iattr *attr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#724: FILE: include/linux/buffer_head.h:206:
+int block_write_begin_newtrunc(struct file *, struct address_space *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: include/linux/buffer_head.h:207:
+int block_write_begin_newtrunc(struct file *, struct address_space *,
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#725: FILE: include/linux/buffer_head.h:207:
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#725: FILE: include/linux/buffer_head.h:207:
+				loff_t, unsigned, unsigned,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#734: FILE: include/linux/buffer_head.h:220:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: include/linux/buffer_head.h:221:
+int cont_write_begin_newtrunc(struct file *, struct address_space *, loff_t,
+			unsigned, unsigned, struct page **, void **,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#735: FILE: include/linux/buffer_head.h:221:
+			unsigned, unsigned, struct page **, void **,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#735: FILE: include/linux/buffer_head.h:221:
+			unsigned, unsigned, struct page **, void **,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#744: FILE: include/linux/buffer_head.h:234:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: include/linux/buffer_head.h:235:
+int nobh_write_begin_newtrunc(struct file *, struct address_space *,
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#745: FILE: include/linux/buffer_head.h:235:
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#745: FILE: include/linux/buffer_head.h:235:
+				loff_t, unsigned, unsigned,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009034.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 47 warnings, 22 checks, 567 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009034.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
