WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Gitweb:     http://git.kernel.org/tip/8fa66bdcc81dd4fc2c91228074d0a4698120c5a2

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#98: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: Documentation/perf_counter/builtin-report.c:1:
+#define _GNU_SOURCE

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#140: FILE: Documentation/perf_counter/builtin-report.c:38:
+static char ^I^Iconst *input_name = "output.perf";$

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#140: FILE: Documentation/perf_counter/builtin-report.c:38:
+static char 		const *input_name = "output.perf";

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#147: FILE: Documentation/perf_counter/builtin-report.c:45:
+static const char *perf_event_names[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#158: FILE: Documentation/perf_counter/builtin-report.c:56:
+};
+struct mmap_event {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#166: FILE: Documentation/perf_counter/builtin-report.c:64:
+};
+struct comm_event {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: Documentation/perf_counter/builtin-report.c:66:
+	__u32 pid,tid;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#172: FILE: Documentation/perf_counter/builtin-report.c:70:
+typedef union event_union {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#181: FILE: Documentation/perf_counter/builtin-report.c:79:
+	uint64_t	 start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#182: FILE: Documentation/perf_counter/builtin-report.c:80:
+	uint64_t	 end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#183: FILE: Documentation/perf_counter/builtin-report.c:81:
+	uint64_t	 offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#187: FILE: Documentation/perf_counter/builtin-report.c:85:
+static struct section *section__new(uint64_t start, uint64_t size,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#188: FILE: Documentation/perf_counter/builtin-report.c:86:
+				    uint64_t offset, char *name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#192: FILE: Documentation/perf_counter/builtin-report.c:90:
+	if (self != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#209: FILE: Documentation/perf_counter/builtin-report.c:107:
+	uint64_t	 start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#210: FILE: Documentation/perf_counter/builtin-report.c:108:
+	uint64_t	 end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#214: FILE: Documentation/perf_counter/builtin-report.c:112:
+static struct symbol *symbol__new(uint64_t start, uint64_t len, const char *name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#218: FILE: Documentation/perf_counter/builtin-report.c:116:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#249: FILE: Documentation/perf_counter/builtin-report.c:147:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#288: FILE: Documentation/perf_counter/builtin-report.c:186:
+	if (self == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dso"
#339: FILE: Documentation/perf_counter/builtin-report.c:237:
+	if (dso == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dso"
#341: FILE: Documentation/perf_counter/builtin-report.c:239:
+		if (dso != NULL && dso__load(dso) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kernel_dso"
#365: FILE: Documentation/perf_counter/builtin-report.c:263:
+	if (kernel_dso == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#370: FILE: Documentation/perf_counter/builtin-report.c:268:
+	if (file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym"
#389: FILE: Documentation/perf_counter/builtin-report.c:287:
+			if (sym == NULL)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#408: FILE: Documentation/perf_counter/builtin-report.c:306:
+	uint64_t	 start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#409: FILE: Documentation/perf_counter/builtin-report.c:307:
+	uint64_t	 end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#410: FILE: Documentation/perf_counter/builtin-report.c:308:
+	uint64_t	 pgoff;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#418: FILE: Documentation/perf_counter/builtin-report.c:316:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->dso"
#424: FILE: Documentation/perf_counter/builtin-report.c:322:
+		if (self->dso == NULL)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#443: FILE: Documentation/perf_counter/builtin-report.c:341:
+	uint32_t	 count;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#452: FILE: Documentation/perf_counter/builtin-report.c:350:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#503: FILE: Documentation/perf_counter/builtin-report.c:401:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symhist"
#537: FILE: Documentation/perf_counter/builtin-report.c:435:
+	if (symhist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symhist"
#539: FILE: Documentation/perf_counter/builtin-report.c:437:
+		if (symhist == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#599: FILE: Documentation/perf_counter/builtin-report.c:497:
+	if (thread == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "thread"
#601: FILE: Documentation/perf_counter/builtin-report.c:499:
+		if (thread != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#615: FILE: Documentation/perf_counter/builtin-report.c:513:
+	if (self == NULL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#635: FILE: Documentation/perf_counter/builtin-report.c:533:
+#if 0

WARNING:INDENTED_LABEL: labels should not be indented
#638: FILE: Documentation/perf_counter/builtin-report.c:536:
+	std::string sym = "<unknown>";

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#640: FILE: Documentation/perf_counter/builtin-report.c:538:
+	maps_t &m = maps[pid];
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#641: FILE: Documentation/perf_counter/builtin-report.c:539:
+	maps_t::const_iterator mi = m.upper_bound(map(ip));

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#647: FILE: Documentation/perf_counter/builtin-report.c:545:
+	symbols_t &s = dsos[mi->dso].syms;
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#648: FILE: Documentation/perf_counter/builtin-report.c:546:
+	symbols_t::const_iterator si = s.upper_bound(symbol(ip));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#658: FILE: Documentation/perf_counter/builtin-report.c:556:
+#if 0

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#669: FILE: Documentation/perf_counter/builtin-report.c:567:
+	printf(

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#697: FILE: Documentation/perf_counter/builtin-report.c:595:
+		case 'i': input_name			= strdup(optarg); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#698: FILE: Documentation/perf_counter/builtin-report.c:596:
+		case 'k': show_mask &= ~SHOW_KERNEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#699: FILE: Documentation/perf_counter/builtin-report.c:597:
+		case 'u': show_mask &= ~SHOW_USER; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#700: FILE: Documentation/perf_counter/builtin-report.c:598:
+		case 'h': show_mask &= ~SHOW_HV; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#701: FILE: Documentation/perf_counter/builtin-report.c:599:
+		default: error = 1; break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#768: FILE: Documentation/perf_counter/builtin-report.c:666:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#783: FILE: Documentation/perf_counter/builtin-report.c:681:
+		if (thread == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#794: FILE: Documentation/perf_counter/builtin-report.c:692:
+			struct map *map = thread__find_map(thread, event->ip.ip);
+			if (map != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map"
#794: FILE: Documentation/perf_counter/builtin-report.c:692:
+			if (map != NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#808: FILE: Documentation/perf_counter/builtin-report.c:706:
+	} else switch (event->header.type) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#813: FILE: Documentation/perf_counter/builtin-report.c:711:
+		if (thread == NULL || map == NULL )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#813: FILE: Documentation/perf_counter/builtin-report.c:711:
+		if (thread == NULL || map == NULL )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map"
#813: FILE: Documentation/perf_counter/builtin-report.c:711:
+		if (thread == NULL || map == NULL )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#821: FILE: Documentation/perf_counter/builtin-report.c:719:
+		if (thread == NULL ||

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#836: FILE: Documentation/perf_counter/builtin-report.c:734:
+#if 0

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#837: FILE: Documentation/perf_counter/builtin-report.c:735:
+	std::map<std::string, int>::iterator hi = hist.begin();
 	        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxO)
#837: FILE: Documentation/perf_counter/builtin-report.c:735:
+	std::map<std::string, int>::iterator hi = hist.begin();
 	                         ^

WARNING:INDENTED_LABEL: labels should not be indented
#837: FILE: Documentation/perf_counter/builtin-report.c:735:
+	std::map<std::string, int>::iterator hi = hist.begin();

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#840: FILE: Documentation/perf_counter/builtin-report.c:738:
+		rev_hist.insert(std::pair<int, std::string>(hi->second, hi->first));
 		                         ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#840: FILE: Documentation/perf_counter/builtin-report.c:738:
+		rev_hist.insert(std::pair<int, std::string>(hi->second, hi->first));
 		                                          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#844: FILE: Documentation/perf_counter/builtin-report.c:742:
+	std::multimap<int, std::string>::const_iterator ri = rev_hist.begin();
 	             ^

ERROR:SPACING: spaces required around that '>' (ctx:VxO)
#844: FILE: Documentation/perf_counter/builtin-report.c:742:
+	std::multimap<int, std::string>::const_iterator ri = rev_hist.begin();
 	                              ^

WARNING:INDENTED_LABEL: labels should not be indented
#844: FILE: Documentation/perf_counter/builtin-report.c:742:
+	std::multimap<int, std::string>::const_iterator ri = rev_hist.begin();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#847: FILE: Documentation/perf_counter/builtin-report.c:745:
+		printf(" %5.2f %s\n", (100.0 * ri->first)/total, ri->second.c_str());
 		                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#862: FILE: Documentation/perf_counter/builtin.h:19:
+extern int cmd_report(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 16 warnings, 43 checks, 796 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
