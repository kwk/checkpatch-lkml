WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/pramfs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: fs/pramfs/super.c:2:
+ * FILE NAME fs/pramfs/super.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#96: FILE: fs/pramfs/super.c:50:
+	/*
+	* We've already validated the user input and the value here must be

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#102: FILE: fs/pramfs/super.c:56:
+	sb->s_blocksize = (1<<bits);
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Opt_addr>
#128: FILE: fs/pramfs/super.c:82:
+	Opt_addr, Opt_bpi, Opt_size,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_bpi>
#128: FILE: fs/pramfs/super.c:82:
+	Opt_addr, Opt_bpi, Opt_size,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_size>
#128: FILE: fs/pramfs/super.c:82:
+	Opt_addr, Opt_bpi, Opt_size,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_num_inodes>
#129: FILE: fs/pramfs/super.c:83:
+	Opt_num_inodes, Opt_mode, Opt_uid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mode>
#129: FILE: fs/pramfs/super.c:83:
+	Opt_num_inodes, Opt_mode, Opt_uid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#129: FILE: fs/pramfs/super.c:83:
+	Opt_num_inodes, Opt_mode, Opt_uid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#130: FILE: fs/pramfs/super.c:84:
+	Opt_gid, Opt_blocksize, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_blocksize>
#130: FILE: fs/pramfs/super.c:84:
+	Opt_gid, Opt_blocksize, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#130: FILE: fs/pramfs/super.c:84:
+	Opt_gid, Opt_blocksize, Opt_err

CHECK:SPACING: No space is necessary after a cast
#148: FILE: fs/pramfs/super.c:102:
+	char *options = (char *) *data;

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#153: FILE: fs/pramfs/super.c:107:
+	phys_addr = (phys_addr_t)simple_strtoull(options, &options, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/pramfs/super.c:110:
+		pram_err("Invalid phys addr specification: %s\n",
+		       (char *) *data);

CHECK:SPACING: No space is necessary after a cast
#156: FILE: fs/pramfs/super.c:110:
+		       (char *) *data);

WARNING:SPLIT_STRING: quoted string split across lines
#161: FILE: fs/pramfs/super.c:115:
+		pram_err("physical address 0x%16llx for pramfs isn't "
+			  "aligned to a page boundary\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#167: FILE: fs/pramfs/super.c:121:
+	*data = (void *) options;

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: fs/pramfs/super.c:136:
+		int token;
+		if (!*p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: fs/pramfs/super.c:188:
+				if (sbi->blocksize < PRAM_MIN_BLOCK_SIZE ||
+					sbi->blocksize > PRAM_MAX_BLOCK_SIZE ||

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#242: FILE: fs/pramfs/super.c:196:
+				return -EINVAL;
+				break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#299: FILE: fs/pramfs/super.c:253:
+		/* default is that 5% of the filesystem is
+		   devoted to the inode table */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#299: FILE: fs/pramfs/super.c:253:
+		   devoted to the inode table */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#310: FILE: fs/pramfs/super.c:264:
+	/* up num_inodes such that the end of the inode table
+	   (and start of bitmap) is on a block boundary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: fs/pramfs/super.c:264:
+	   (and start of bitmap) is on a block boundary */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#311: FILE: fs/pramfs/super.c:265:
+	bitmap_start = PRAM_SB_SIZE + (num_inodes<<PRAM_INODE_BITS);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#314: FILE: fs/pramfs/super.c:268:
+			~(blocksize-1);
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#334: FILE: fs/pramfs/super.c:288:
+		bitmap_size = (bitmap_size + blocksize) & ~(blocksize-1);
 		                                                     ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct pram_sb_info)...)
#388: FILE: fs/pramfs/super.c:342:
+	sbi = kzalloc(sizeof(struct pram_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#398: FILE: fs/pramfs/super.c:352:
+	sbi->mode = (S_IRWXUGO | S_ISVTX);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'istance' may be misspelled - perhaps 'instance'?
#407: FILE: fs/pramfs/super.c:361:
+	/* Init a new pramfs istance */
 	                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: fs/pramfs/super.c:374:
+	pram_dbg("checking physical address 0x%016llx for pramfs image\n",
+		   (u64)sbi->phys_addr);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#440: FILE: fs/pramfs/super.c:394:
+	if (pram_calc_checksum((u32 *)super, PRAM_SB_SIZE>>2)) {
 	                                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#449: FILE: fs/pramfs/super.c:403:
+	pram_info("pramfs image appears to be %lu KB in size\n", initsize>>10);
 	                                                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#456: FILE: fs/pramfs/super.c:410:
+	if (pram_calc_checksum((u32 *)root_i, PRAM_INODE_SIZE>>2)) {
 	                                                     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#515: FILE: fs/pramfs/super.c:469:
+	buf->f_bfree = buf->f_bavail = ps->s_free_blocks_count;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#535: FILE: fs/pramfs/super.c:489:
+	if (sbi->mode != (S_IRWXUGO | S_ISVTX))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: fs/pramfs/super.c:553:
+static int pram_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110771.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 25 checks, 580 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110771.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
