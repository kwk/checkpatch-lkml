ERROR:POINTER_LOCATION: "(foo*__force )" should be "(foo *__force)"
#92: FILE: include/linux/rcupdate.h:233:
+				typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#92: FILE: include/linux/rcupdate.h:233:
+				typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#93: FILE: include/linux/rcupdate.h:234:
+				(void) (((typeof (*p) __rcu *)p) == p); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#93: FILE: include/linux/rcupdate.h:234:
+				(void) (((typeof (*p) __rcu *)p) == p); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#111: FILE: include/linux/rcupdate.h:251:
+#define __rcu_dereference(p)     ({ \
+				(void) (((typeof (*p) __rcu *)p) == p); \
+				((typeof(*p) __force __kernel *)(p)); \
 				})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#111: FILE: include/linux/rcupdate.h:251:
+#define __rcu_dereference(p)     ({ \
+				(void) (((typeof (*p) __rcu *)p) == p); \
+				((typeof(*p) __force __kernel *)(p)); \
 				})

CHECK:SPACING: No space is necessary after a cast
#112: FILE: include/linux/rcupdate.h:252:
+				(void) (((typeof (*p) __rcu *)p) == p); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: include/linux/rcupdate.h:252:
+				(void) (((typeof (*p) __rcu *)p) == p); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#130: FILE: include/linux/rcupdate.h:282:
+#define __rcu_assign_pointer(p, v) \
+	({ \
+		(p) = (typeof(*v) __force __rcu *)(v); \
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#130: FILE: include/linux/rcupdate.h:282:
+#define __rcu_assign_pointer(p, v) \
+	({ \
+		(p) = (typeof(*v) __force __rcu *)(v); \
+	})

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#139: FILE: include/linux/rcupdate.h:291:
+#define RCU_INIT_POINTER(p, v) \
+		p = (typeof(*v) __force __rcu *)(v)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#139: FILE: include/linux/rcupdate.h:291:
+#define RCU_INIT_POINTER(p, v) \
+		p = (typeof(*v) __force __rcu *)(v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#139: FILE: include/linux/rcupdate.h:291:
+#define RCU_INIT_POINTER(p, v) \
+		p = (typeof(*v) __force __rcu *)(v)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 2 warnings, 8 checks, 83 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
