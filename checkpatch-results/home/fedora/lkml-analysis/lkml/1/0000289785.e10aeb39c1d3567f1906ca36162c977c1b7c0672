WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: drivers/hid/Kconfig:81:
+config HID_APPLE
+	tristate "Apple"
+	default m
+	depends on (USB_HID || BT_HIDP)
+	---help---
+	Support for some Apple devices which less or more break
+	HID specification.
+
+	Say Y here if you want support for the special keys (Fn, Numlock) on
+	Apple iBooks, PowerBooks, MacBooks, MacBook Pros and aluminum USB
+	keyboards.
+
+	If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#83: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: drivers/hid/hid-apple.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPLIT_STRING: quoted string split across lines
#137: FILE: drivers/hid/hid-apple.c:50:
+MODULE_PARM_DESC(fnmode, "Mode of fn key on Apple keyboards (0 = disabled, "
+		"[1] = fkeyslast, 2 = fkeysfirst)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#218: FILE: drivers/hid/hid-apple.c:131:
+static struct apple_key_translation *apple_find_translation(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: drivers/hid/hid-apple.c:145:
+static int hidinput_apple_event(struct hid_device *hid, struct input_dev *input,
+		struct hid_usage *usage, __s32 value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/hid/hid-apple.c:165:
+		trans = apple_find_translation((hid->product < 0x220 ||
+					hid->product >= 0x300) ?

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: drivers/hid/hid-apple.c:185:
+				input_event(input, usage->type, trans->to,
+						value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: drivers/hid/hid-apple.c:192:
+		if (test_bit(usage->code, asc->pressed_numlock) ||
+				test_bit(LED_NUML, input->led)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/hid/hid-apple.c:194:
+			trans = apple_find_translation(powerbook_numlock_keys,
+					usage->code);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: drivers/hid/hid-apple.c:199:
+					set_bit(usage->code,
+							asc->pressed_numlock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: drivers/hid/hid-apple.c:202:
+					clear_bit(usage->code,
+							asc->pressed_numlock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/hid/hid-apple.c:205:
+				input_event(input, usage->type, trans->to,
+						value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/hid/hid-apple.c:224:
+static int apple_event(struct hid_device *hdev, struct hid_field *field,
+		struct hid_usage *usage, __s32 value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/hid/hid-apple.c:232:
+	if ((asc->quirks & APPLE_INVERT_HWHEEL) &&
+			usage->code == REL_HWHEEL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: drivers/hid/hid-apple.c:234:
+		input_event(field->hidinput->input, usage->type, usage->code,
+				-value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: drivers/hid/hid-apple.c:239:
+	if ((asc->quirks & APPLE_HAS_FN) &&
+			hidinput_apple_event(hdev, field->hidinput->input,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: drivers/hid/hid-apple.c:240:
+			hidinput_apple_event(hdev, field->hidinput->input,
+				usage, value))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: drivers/hid/hid-apple.c:243:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/hid/hid-apple.c:248:
+static void apple_input_mapped(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_usage *usage, unsigned long **bit, int *max)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: drivers/hid/hid-apple.c:263:
+static int apple_probe(struct hid_device *hdev,
+		const struct hid_device_id *id)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!asc"
#357: FILE: drivers/hid/hid-apple.c:270:
+	if (asc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#358: FILE: drivers/hid/hid-apple.c:271:
+	if (asc == NULL) {
+		dev_err(&hdev->dev, "can't alloc apple descriptor\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: drivers/hid/hid-apple.c:371:
+static void apple_usb_report_fixup(struct hid_device *hdev, __u8 *rdesc,
+		unsigned int rsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/hid/hid-apple.c:376:
+	if ((asc->quirks & APPLE_RDESC_JIS) && rsize >= 60 &&
+			rdesc[53] == 0x65 && rdesc[59] == 0x65) {

WARNING:SPLIT_STRING: quoted string split across lines
#465: FILE: drivers/hid/hid-apple.c:378:
+		dev_info(&hdev->dev, "fixing up MacBook JIS keyboard report "
+				"descriptor\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#466: FILE: drivers/hid/hid-apple.c:379:
+		rdesc[53] = rdesc[59] = 0xe7;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: drivers/hid/hid-apple.c:404:
+static int apple_input_mapping(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_usage *usage, unsigned long **bit, int *max)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: drivers/hid/hid-apple.c:417:
+static int apple_usb_probe(struct hid_device *hdev,
+		const struct hid_device_id *id)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: drivers/hid/hid-apple.c:420:
+	/* return something else or move to hid layer? device will reside
+	   allocated */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#507: FILE: drivers/hid/hid-apple.c:420:
+	   allocated */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: drivers/hid/hid-apple.c:422:
+	if ((id->driver_data & APPLE_IGNORE_MOUSE) &&
+			to_usb_interface(hdev->dev.parent)->cur_altsetting->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_altsetting->desc.bInterfaceProtocol'
#510: FILE: drivers/hid/hid-apple.c:423:
+			to_usb_interface(hdev->dev.parent)->cur_altsetting->
+			desc.bInterfaceProtocol == USB_INTERFACE_PROTOCOL_MOUSE)

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#510: FILE: drivers/hid/hid-apple.c:423:
+			desc.bInterfaceProtocol == USB_INTERFACE_PROTOCOL_MOUSE)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#553: FILE: drivers/hid/hid-apple.c:466:
+		printk(KERN_ERR "can't register apple-usb driver\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#563: FILE: drivers/hid/hid-apple.c:476:
+		printk(KERN_ERR "can't register apple-bt driver\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289785.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 25 checks, 991 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289785.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
