WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/cpup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#90: FILE: fs/aufs/cpup.c:47:
+	if (!force
+	    && !S_ISDIR(h_inode->i_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#91: FILE: fs/aufs/cpup.c:48:
+	    && !S_ISDIR(h_inode->i_mode)
+	    && au_opt_test(au_mntflags(sb), PLINK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#92: FILE: fs/aufs/cpup.c:49:
+	    && au_opt_test(au_mntflags(sb), PLINK)
+	    && au_plink_test(inode))

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#174: FILE: fs/aufs/cpup.c:131:
+		AuWarn("restoring timestamps failed(%d). ignored\n", err);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#221: FILE: fs/aufs/cpup.c:178:
+	struct mutex *h_mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#232: FILE: fs/aufs/cpup.c:189:
+		AuDbg("len %lld\n", len);

CHECK:CAMELCASE: Avoid CamelCase: <AuLabel>
#268: FILE: fs/aufs/cpup.c:225:
+			AuLabel(hole);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD2>
#300: FILE: fs/aufs/cpup.c:257:
+			mutex_lock_nested(h_mtx, AuLsc_I_CHILD2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: fs/aufs/cpup.c:306:
+static int au_cp_regular(struct dentry *dentry, aufs_bindex_t bdst,
+			aufs_bindex_t bsrc, loff_t len)

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#392: FILE: fs/aufs/cpup.c:349:
+	IMustLock(file[SRC].dentry->d_inode);

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#423: FILE: fs/aufs/cpup.c:380:
+		AuIOErr("failed unlinking cpup-ed %.*s(%d, %d)\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#424: FILE: fs/aufs/cpup.c:381:
+			AuDLNPair(h_path->dentry), err, rerr);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#439: FILE: fs/aufs/cpup.c:396:
+	err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#485: FILE: fs/aufs/cpup.c:442:
+	AuDebugOn(h_inode != au_h_iptr(dentry->d_inode, bsrc));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#508: FILE: fs/aufs/cpup.c:465:
+		err = vfsub_create(h_dir, &h_path, mode | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#534: FILE: fs/aufs/cpup.c:491:
+		/*FALLTHROUGH*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#546: FILE: fs/aufs/cpup.c:503:
+	if (!au_opt_test(mnt_flags, UDBA_NONE)
+	    && !isdir

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#547: FILE: fs/aufs/cpup.c:504:
+	    && !isdir
+	    && au_opt_test(mnt_flags, XINO)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#548: FILE: fs/aufs/cpup.c:505:
+	    && au_opt_test(mnt_flags, XINO)
+	    && h_inode->i_nlink == 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#551: FILE: fs/aufs/cpup.c:508:
+	    /* && dentry->d_inode->i_nlink == 1 */
+	    && bdst < bsrc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#552: FILE: fs/aufs/cpup.c:509:
+	    && bdst < bsrc
+	    && !au_ftest_cpup(flags, KEEPLINO))

WARNING:SPLIT_STRING: quoted string split across lines
#603: FILE: fs/aufs/cpup.c:560:
+			AuIOErr("i%lu exists on a upper branch "
+				"but plink is disabled\n", inode->i_ino);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#617: FILE: fs/aufs/cpup.c:574:
+				AuIOErr("i%lu exists on a upper branch "
+					"but plink is broken\n", inode->i_ino);

CHECK:BRACES: Unbalanced braces around else statement
#632: FILE: fs/aufs/cpup.c:589:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#654: FILE: fs/aufs/cpup.c:611:
+		if (!isdir
+		    && h_src->d_inode->i_nlink > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#655: FILE: fs/aufs/cpup.c:612:
+		    && h_src->d_inode->i_nlink > 1
+		    && plink)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#707: FILE: fs/aufs/cpup.c:664:
+	if ((mode != S_IFCHR && mode != S_IFBLK)
+	    || capable(CAP_MKNOD))

CHECK:BRACES: Unbalanced braces around else statement
#710: FILE: fs/aufs/cpup.c:667:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: fs/aufs/cpup.c:745:
+		umode_t mode = dentry->d_inode->i_mode;
+		do_sio = (((mode & (S_IFCHR | S_IFBLK))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#789: FILE: fs/aufs/cpup.c:746:
+		do_sio = (((mode & (S_IFCHR | S_IFBLK))
+			   && !capable(CAP_MKNOD))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#790: FILE: fs/aufs/cpup.c:747:
+			   && !capable(CAP_MKNOD))
+			  || ((mode & (S_ISUID | S_ISGID))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#791: FILE: fs/aufs/cpup.c:748:
+			  || ((mode & (S_ISUID | S_ISGID))
+			      && !capable(CAP_FSETID)));

CHECK:BRACES: braces {} should be used on all arms of this statement
#793: FILE: fs/aufs/cpup.c:750:
+	if (!do_sio)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#795: FILE: fs/aufs/cpup.c:752:
+	else {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#834: FILE: fs/aufs/cpup.c:791:
+		dinfo->di_hdentry[0 + bstart].hd_dentry
+			= au_h_fptr(file, au_fbstart(file))->f_dentry;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_DTIME>
#835: FILE: fs/aufs/cpup.c:792:
+	err = au_cpup_single(dentry, bdst, bstart, len, !AuCpup_DTIME,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT2>
#936: FILE: fs/aufs/cpup.c:893:
+		mutex_lock_nested(&h_tmpdir->i_mutex, AuLsc_I_PARENT2);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#937: FILE: fs/aufs/cpup.c:894:
+		mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#940: FILE: fs/aufs/cpup.c:897:
+	if (!au_test_h_perm_sio(h_tmpdir, MAY_EXEC | MAY_WRITE))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#942: FILE: fs/aufs/cpup.c:899:
+	else {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#962: FILE: fs/aufs/cpup.c:919:
+	iput(h_dir);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_PARENT2>
#988: FILE: fs/aufs/cpup.c:945:
+	au_pin_init(&pin, dentry, bdst, AuLsc_DI_PARENT2, AuLsc_I_PARENT2,

CHECK:CAMELCASE: Avoid CamelCase: <AuPin_MNT_WRITE>
#989: FILE: fs/aufs/cpup.c:946:
+		    au_opt_udba(dentry->d_sb), AuPin_MNT_WRITE);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#1005: FILE: fs/aufs/cpup.c:962:
+			di_read_lock_parent3(parent, !AuLock_IR);

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1038: FILE: fs/aufs/cpup.c:995:
+		       struct dentry *h_parent __maybe_unused ,
 		                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1078: FILE: fs/aufs/cpup.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_KEEPLINO>
#1110: FILE: fs/aufs/cpup.h:33:
+#define AuCpup_KEEPLINO	(1 << 1)	/* do not clear the lower xino,

CHECK:BIT_MACRO: Prefer using the BIT macro
#1110: FILE: fs/aufs/cpup.h:33:
+#define AuCpup_KEEPLINO	(1 << 1)	/* do not clear the lower xino,

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1111: FILE: fs/aufs/cpup.h:34:
+#define AuCpup_KEEPLINO	(1 << 1)	/* do not clear the lower xino,
+					   for link(2) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1111: FILE: fs/aufs/cpup.h:34:
+					   for link(2) */

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_##name>
#1112: FILE: fs/aufs/cpup.h:35:
+#define au_ftest_cpup(flags, name)	((flags) & AuCpup_##name)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1140: FILE: fs/aufs/cpup.h:63:
+};
+void au_dtime_store(struct au_dtime *dt, struct dentry *dentry,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154218.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 41 checks, 1096 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154218.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
