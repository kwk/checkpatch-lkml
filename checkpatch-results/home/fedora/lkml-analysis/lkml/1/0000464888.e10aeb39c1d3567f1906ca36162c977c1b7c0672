WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#563: FILE: arch/s390/zfcpdump/zfcpdump.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: arch/s390/zfcpdump/zfcpdump.c:48:
+	char *token;
+	token = strtok(parameter, "=");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!token"
#611: FILE: arch/s390/zfcpdump/zfcpdump.c:49:
+	if (token == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!g.parm_dir"
#617: FILE: arch/s390/zfcpdump/zfcpdump.c:55:
+		if (g.parm_dir == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: arch/s390/zfcpdump/zfcpdump.c:57:
+			PRINT_WARN("No value for '%s' parameter specified\n",
+				    PARM_DIR);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!g.parm_part"
#626: FILE: arch/s390/zfcpdump/zfcpdump.c:64:
+		if (g.parm_part == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#628: FILE: arch/s390/zfcpdump/zfcpdump.c:66:
+			PRINT_ERR("No value for '%s' parameter "
+				  "specified\n", PARM_PART);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#633: FILE: arch/s390/zfcpdump/zfcpdump.c:71:
+		char *mem_str = strtok(NULL,"=");
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: arch/s390/zfcpdump/zfcpdump.c:72:
+		char *mem_str = strtok(NULL,"=");
+		if (mem_str == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem_str"
#634: FILE: arch/s390/zfcpdump/zfcpdump.c:72:
+		if (mem_str == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#636: FILE: arch/s390/zfcpdump/zfcpdump.c:74:
+			PRINT_ERR("No value for '%s' parameter "
+				  "specified\n", PARM_MEM);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!g.parm_compress"
#643: FILE: arch/s390/zfcpdump/zfcpdump.c:81:
+		if (g.parm_compress == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#645: FILE: arch/s390/zfcpdump/zfcpdump.c:83:
+			PRINT_WARN("No value for '%s' parameter "
+				   "specified\n", PARM_COMP);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#654: FILE: arch/s390/zfcpdump/zfcpdump.c:92:
+				"specified!\n",g.parm_compress);
 				              ^

WARNING:SPLIT_STRING: quoted string split across lines
#654: FILE: arch/s390/zfcpdump/zfcpdump.c:92:
+			PRINT_WARN("Unknown dump compression '%s' "
+				"specified!\n",g.parm_compress);

WARNING:LINE_SPACING: Missing a blank line after declarations
#661: FILE: arch/s390/zfcpdump/zfcpdump.c:99:
+		char *s = strtok(NULL, "=");
+		if (s == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#661: FILE: arch/s390/zfcpdump/zfcpdump.c:99:
+		if (s == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#663: FILE: arch/s390/zfcpdump/zfcpdump.c:101:
+			PRINT_WARN("No value for '%s' parameter "
+				"specified\n", PARM_DEBUG);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'g.parm_debug < PARM_DEBUG_MIN'
#667: FILE: arch/s390/zfcpdump/zfcpdump.c:105:
+			if ((g.parm_debug < PARM_DEBUG_MIN) ||
+			    (g.parm_debug > PARM_DEBUG_MAX)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'g.parm_debug > PARM_DEBUG_MAX'
#667: FILE: arch/s390/zfcpdump/zfcpdump.c:105:
+			if ((g.parm_debug < PARM_DEBUG_MIN) ||
+			    (g.parm_debug > PARM_DEBUG_MAX)) {

WARNING:SPLIT_STRING: quoted string split across lines
#670: FILE: arch/s390/zfcpdump/zfcpdump.c:108:
+				PRINT_WARN("Invalid value (%i) for %s "
+				"parameter specified (allowed range is "

ERROR:SPACING: space required after that ',' (ctx:VxV)
#671: FILE: arch/s390/zfcpdump/zfcpdump.c:109:
+				"%i - %i)\n",g.parm_debug,
 				            ^

WARNING:SPLIT_STRING: quoted string split across lines
#671: FILE: arch/s390/zfcpdump/zfcpdump.c:109:
+				"parameter specified (allowed range is "
+				"%i - %i)\n",g.parm_debug,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: arch/s390/zfcpdump/zfcpdump.c:113:
+				PRINT_WARN("Using default: %i\n",
+				PARM_DEBUG_DFLT);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#681: FILE: arch/s390/zfcpdump/zfcpdump.c:119:
+		char *s = strtok(NULL,"=");
 		                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#682: FILE: arch/s390/zfcpdump/zfcpdump.c:120:
+		char *s = strtok(NULL,"=");
+		if (s == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#682: FILE: arch/s390/zfcpdump/zfcpdump.c:120:
+		if (s == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#684: FILE: arch/s390/zfcpdump/zfcpdump.c:122:
+			PRINT_WARN("No value for '%s' parameter "
+				"specified\n", PARM_MODE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: arch/s390/zfcpdump/zfcpdump.c:124:
+			PRINT_WARN("Using default: %s\n",
+				PARM_MODE_DFLT);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: arch/s390/zfcpdump/zfcpdump.c:125:
+		} else if (strcmp(s,PARM_MODE_INTERACT) == 0) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#689: FILE: arch/s390/zfcpdump/zfcpdump.c:127:
+		} else if (strcmp(s,PARM_MODE_AUTO) == 0) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#692: FILE: arch/s390/zfcpdump/zfcpdump.c:130:
+			PRINT_WARN("Unknown dump mode: %s\n",s);
 			                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: arch/s390/zfcpdump/zfcpdump.c:132:
+			PRINT_WARN("Using default: %s\n",
+				PARM_MODE_DFLT);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#707: FILE: arch/s390/zfcpdump/zfcpdump.c:145:
+static int parse_parmline(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#710: FILE: arch/s390/zfcpdump/zfcpdump.c:148:
+	char *parms[KERN_PARM_MAX];
 	      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#726: FILE: arch/s390/zfcpdump/zfcpdump.c:164:
+	if ((count = read(fh, g.parmline, CMDLINE_MAX_LEN)) == -1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#731: FILE: arch/s390/zfcpdump/zfcpdump.c:169:
+	g.parmline[count-1] = '\0'; /* remove \n */
 	                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "token"
#734: FILE: arch/s390/zfcpdump/zfcpdump.c:172:
+	while (token != NULL) {

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#735: FILE: arch/s390/zfcpdump/zfcpdump.c:173:
+		parms[token_cnt] = token;
 		^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#736: FILE: arch/s390/zfcpdump/zfcpdump.c:174:
+		token = strtok(NULL," \t\n");
 		                   ^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#745: FILE: arch/s390/zfcpdump/zfcpdump.c:183:
+		if (parse_parameter(parms[i])) {
 		                    ^^^^^

CHECK:SPACING: No space is necessary after a cast
#754: FILE: arch/s390/zfcpdump/zfcpdump.c:192:
+	PRINT_TRACE("dump mem:   %llx\n", (unsigned long long) g.parm_mem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: arch/s390/zfcpdump/zfcpdump.c:255:
+	read_file("/sys/firmware/ipl/device", g.dump_devno,
+		sizeof(g.dump_devno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: arch/s390/zfcpdump/zfcpdump.c:277:
+	read_file("/sys/firmware/ipl/bootprog", g.dump_bootprog,
+		sizeof(g.dump_bootprog));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#861: FILE: arch/s390/zfcpdump/zfcpdump.c:299:
+		waitpid (pid, NULL, 0);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#899: FILE: arch/s390/zfcpdump/zfcpdump.c:337:
+	token = strtok(line, " \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#905: FILE: arch/s390/zfcpdump/zfcpdump.c:343:
+		token = strtok(NULL, " \n");

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#928: FILE: arch/s390/zfcpdump/zfcpdump.c:366:
+static __sighandler_t dump_sig_handler(int sig, siginfo_t *sip, void*p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#971: FILE: arch/s390/zfcpdump/zfcpdump.c:409:
+	char *sysctl_names[] = {"/proc/sys/vm/dirty_ratio",

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#978: FILE: arch/s390/zfcpdump/zfcpdump.c:416:
+	char *sysctl_values[] = {"2", "5", "50", "50", "500", "32", NULL};

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1008: FILE: arch/s390/zfcpdump/zfcpdump.c:446:
+	DIR* dir = NULL;

WARNING:TYPO_SPELLING: 'evalute' may be misspelled - perhaps 'evaluate'?
#1016: FILE: arch/s390/zfcpdump/zfcpdump.c:454:
+		PRINT_PERR("Cannot evalute dump number\n");
 		                   ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: arch/s390/zfcpdump/zfcpdump.c:460:
+		int num;
+		if (sscanf(dir_ent->d_name, "dump.%ui", &num) == 1) {

WARNING:NAKED_SSCANF: unchecked sscanf return value
#1029: FILE: arch/s390/zfcpdump/zfcpdump.c:467:
+			sscanf(dir_ent->d_name, "dump.%s", suffix1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1035: FILE: arch/s390/zfcpdump/zfcpdump.c:473:
+				/* In the unlikely case of 'dump.-1',
+				   'dump.-10' etc */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1035: FILE: arch/s390/zfcpdump/zfcpdump.c:473:
+				   'dump.-10' etc */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1089: FILE: arch/s390/zfcpdump/zfcpdump.c:527:
+		if (strcmp(answ,"n") == 0)
 		               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1121: FILE: arch/s390/zfcpdump/zfcpdump.c:559:
+		ssize_t rc;
+		rc = write(fd, buf + written, count - written);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == ENOSPC'
#1122: FILE: arch/s390/zfcpdump/zfcpdump.c:560:
+		if ((rc == -1) && (errno == ENOSPC)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1163: FILE: arch/s390/zfcpdump/zfcpdump.c:601:
+		/* In this case the compressed output is bigger than
+		   the uncompressed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1163: FILE: arch/s390/zfcpdump/zfcpdump.c:601:
+		   the uncompressed */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1188: FILE: arch/s390/zfcpdump/zfcpdump.c:626:
+static void s390_to_lkcd_hdr(struct dump_hdr_s390* s390_dh,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1189: FILE: arch/s390/zfcpdump/zfcpdump.c:627:
+			     struct dump_hdr_lkcd* dh)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1195: FILE: arch/s390/zfcpdump/zfcpdump.c:633:
+	__u64 tod = s390_dh->tod;
+	tod -= 0x8126d60e46000000LL - (0x3c26700LL * 1000000 * 4096);

CHECK:SPACING: No space is necessary after a cast
#1208: FILE: arch/s390/zfcpdump/zfcpdump.c:646:
+		(unsigned long long) s390_dh->cpu_id);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1211: FILE: arch/s390/zfcpdump/zfcpdump.c:649:
+		strcpy(dh->utsname_machine,"s390");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1213: FILE: arch/s390/zfcpdump/zfcpdump.c:651:
+		strcpy(dh->utsname_machine,"s390x");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1215: FILE: arch/s390/zfcpdump/zfcpdump.c:653:
+		strcpy(dh->utsname_machine,"unknown");
 		                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'time < g.last_progress'
#1237: FILE: arch/s390/zfcpdump/zfcpdump.c:675:
+	if ((time < g.last_progress) && (written != max) && (written != 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'written != max'
#1237: FILE: arch/s390/zfcpdump/zfcpdump.c:675:
+	if ((time < g.last_progress) && (written != max) && (written != 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'written != 0'
#1237: FILE: arch/s390/zfcpdump/zfcpdump.c:675:
+	if ((time < g.last_progress) && (written != max) && (written != 0))

CHECK:SPACING: No space is necessary after a cast
#1240: FILE: arch/s390/zfcpdump/zfcpdump.c:678:
+	percent = ((double) written / (double) max) * 100.0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: arch/s390/zfcpdump/zfcpdump.c:680:
+	PRINT(" %4lli MB of %4lli MB (%5.1f%% )\n", written >> 20, max >> 20,
+		percent);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1266: FILE: arch/s390/zfcpdump/zfcpdump.c:704:
+		PRINT_ERR("Specified dump dir '%s' not found!\n",dumpdir);
 		                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: arch/s390/zfcpdump/zfcpdump.c:708:
+		PRINT_ERR("Specified dump dir '%s' is not a directory!\n",
+			dumpdir);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1293: FILE: arch/s390/zfcpdump/zfcpdump.c:731:
+	if ((fout = open(dump_name, DUMP_FLAGS, DUMP_MODE)) < 0) {

WARNING:SPLIT_STRING: quoted string split across lines
#1304: FILE: arch/s390/zfcpdump/zfcpdump.c:742:
+		PRINT_ERR("Cannot lseek() to get the dump header from the "
+			"dump file!\n");

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1312: FILE: arch/s390/zfcpdump/zfcpdump.c:750:
+	s390_to_lkcd_hdr(&s390_dh,&dh);
 	                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1312: FILE: arch/s390/zfcpdump/zfcpdump.c:750:
+	s390_to_lkcd_hdr(&s390_dh,&dh);
 	                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#1320: FILE: arch/s390/zfcpdump/zfcpdump.c:758:
+		PRINT_WARN("Dumper has no gzip support."
+			   " Compression disabled!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: arch/s390/zfcpdump/zfcpdump.c:806:
+		size = compress_fn((unsigned char *)buf, PAGE_SIZE,
+			(unsigned char *)dpcpage, PAGE_SIZE);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1371: FILE: arch/s390/zfcpdump/zfcpdump.c:809:
+		 * we write an uncompressed page */

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1425: FILE: arch/s390/zfcpdump/zfcpdump.c:863:
+#ifdef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1453: FILE: arch/s390/zfcpdump/zfcpdump.c:891:
+	if (mknod(DEV_NULL, S_IFCHR | 0600,
+		makedev(DEV_NULL_MAJOR, DEV_NULL_MINOR))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1466: FILE: arch/s390/zfcpdump/zfcpdump.c:904:
+	if (mknod(DEV_SCSI, S_IFBLK | 0600,
+		makedev(DEV_SCSI_MAJOR, atoi(g.parm_part)))) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1475: FILE: arch/s390/zfcpdump/zfcpdump.c:913:
+	PRINT(" \n"); /* leading blank is needed that sclp console prints */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1476: FILE: arch/s390/zfcpdump/zfcpdump.c:914:
+                      /* the newline */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1486: FILE: arch/s390/zfcpdump/zfcpdump.c:924:
+	PRINT(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1493: FILE: arch/s390/zfcpdump/zfcpdump.c:931:
+	PRINT(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1504: FILE: arch/s390/zfcpdump/zfcpdump.c:942:
+	PRINT(" \n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1510: FILE: arch/s390/zfcpdump/zfcpdump.c:948:
+	PRINT("DUMP 'dump.%i' FAILED\n",g.dump_nr);
 	                               ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1521: FILE: arch/s390/zfcpdump/zfcpdump.h:1:
+/*

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1537: FILE: arch/s390/zfcpdump/zfcpdump.h:17:
+#define PRINT_TRACE(x...) \
+	if (g.parm_debug >= 3) { \
+		fprintf(stderr, "TRACE: "); \
+		fprintf(stderr, ##x); \
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#1565: FILE: arch/s390/zfcpdump/zfcpdump.h:45:
+#define DUMP_MODE (S_IRUSR | S_IWUSR| S_IRGRP| S_IROTH)
                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#1565: FILE: arch/s390/zfcpdump/zfcpdump.h:45:
+#define DUMP_MODE (S_IRUSR | S_IWUSR| S_IRGRP| S_IROTH)
                                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR| S_IRGRP| S_IROTH' are not preferred. Consider using octal permissions '0644'.
#1565: FILE: arch/s390/zfcpdump/zfcpdump.h:45:
+#define DUMP_MODE (S_IRUSR | S_IWUSR| S_IRGRP| S_IROTH)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1586: FILE: arch/s390/zfcpdump/zfcpdump.h:66:
+#define MIN(x,y) ((x) < (y) ? (x) : (y))
              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1586: FILE: arch/s390/zfcpdump/zfcpdump.h:66:
+#define MIN(x,y) ((x) < (y) ? (x) : (y))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#1586: FILE: arch/s390/zfcpdump/zfcpdump.h:66:
+#define MIN(x,y) ((x) < (y) ? (x) : (y))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1589: FILE: arch/s390/zfcpdump/zfcpdump.h:69:
+#define MAX(x,y) ((x) > (y) ? (x) : (y))
              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1589: FILE: arch/s390/zfcpdump/zfcpdump.h:69:
+#define MAX(x,y) ((x) > (y) ? (x) : (y))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#1589: FILE: arch/s390/zfcpdump/zfcpdump.h:69:
+#define MAX(x,y) ((x) > (y) ? (x) : (y))

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1613: FILE: arch/s390/zfcpdump/zfcpdump.h:93:
+#ifdef __s390x__

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1695: FILE: arch/s390/zfcpdump/zfcpdump.h:175:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1718: FILE: arch/s390/zfcpdump/zfcpdump.h:198:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1728: FILE: arch/s390/zfcpdump/zfcpdump.h:208:
+} __attribute__((packed));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464888.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 42 warnings, 37 checks, 1661 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464888.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
