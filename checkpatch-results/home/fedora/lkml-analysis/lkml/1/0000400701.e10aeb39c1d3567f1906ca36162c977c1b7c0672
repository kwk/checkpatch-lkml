WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
master.kernel.org:/pub/scm/linux/kernel/git/cooloney/blackfin-2.6.git/ for-linus

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#146: 
      Input Serio: Blackfin doesnt support I8042 - make sure it doesnt get selected
                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#146: 
      Input Serio: Blackfin doesnt support I8042 - make sure it doesnt get selected
                                                                ^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'core'
#150: 
      Blackfin arch: setup aliases for some core Core A MMRs

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#212: FILE: arch/blackfin/Kconfig:1003:
+config DEBUG_BFIN_HWTRACE_COMPRESSION_OFF
+	bool "Trace all Loops"
+	help
+	  The trace buffer records all changes of flow 
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: arch/blackfin/Kconfig:1006:
+^I  The trace buffer records all changes of flow $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#217: FILE: arch/blackfin/Kconfig:1008:
+config DEBUG_BFIN_HWTRACE_COMPRESSION_ONE
+	bool "Compress single-level loops"
+	help
+	  The trace buffer does not record single loops - helpful if trace 
+	  is spinning on a while or do loop.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/blackfin/Kconfig:1011:
+^I  The trace buffer does not record single loops - helpful if trace $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#223: FILE: arch/blackfin/Kconfig:1014:
+config DEBUG_BFIN_HWTRACE_COMPRESSION_TWO
+	bool "Compress two-level loops"
+	help
+	  The trace buffer does not record loops two levels deep. Helpful if
+	  the trace is spinning in a nested loop
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: arch/blackfin/Kconfig:1037:
+^I  into a software buffer, for dumping when there is an issue. This $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: arch/blackfin/Kconfig:1038:
+^I  has a great impact on performance, (an interrupt every 16 change of $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#312: FILE: arch/blackfin/kernel/bfin_gpio.c:121:
+char *str_ident = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#324: FILE: arch/blackfin/kernel/bfin_gpio.c:153:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: arch/blackfin/kernel/bfin_gpio.c:156:
+		strncpy(str_ident + ident * RESOURCE_LABEL_SIZE, label,
+			 RESOURCE_LABEL_SIZE);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#363: FILE: arch/blackfin/kernel/bfin_gpio.c:184:
+		if (usage == GPIO_USAGE) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#365: FILE: arch/blackfin/kernel/bfin_gpio.c:186:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#403: FILE: arch/blackfin/kernel/bfin_gpio.c:224:
+		if (port_mux_lut[y][PMUX_LUT_RES] == per) {
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#409: FILE: arch/blackfin/kernel/bfin_gpio.c:230:
+			if (offset != 1) {
[...]
+			} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#448: FILE: arch/blackfin/kernel/bfin_gpio.c:270:
+	printk(KERN_INFO "Blackfin GPIO Controller\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: arch/blackfin/kernel/bfin_gpio.c:302:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio))); \

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: arch/blackfin/kernel/bfin_gpio.c:322:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio))); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: arch/blackfin/kernel/bfin_gpio.c:337:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: arch/blackfin/kernel/bfin_gpio.c:356:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: arch/blackfin/kernel/bfin_gpio.c:365:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: arch/blackfin/kernel/bfin_gpio.c:429:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#574: FILE: arch/blackfin/kernel/bfin_gpio.c:631:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: arch/blackfin/kernel/bfin_gpio.c:633:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#594: FILE: arch/blackfin/kernel/bfin_gpio.c:651:
+	if (!check_gpio(ident)) {
[...]
+	if (unlikely(reserved_gpio_map[gpio_bank(ident)] & gpio_bit(ident))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#595: FILE: arch/blackfin/kernel/bfin_gpio.c:652:
+	if (!check_gpio(ident)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#597: FILE: arch/blackfin/kernel/bfin_gpio.c:654:
+		printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#599: FILE: arch/blackfin/kernel/bfin_gpio.c:656:
+		       __FUNCTION__, ident, get_label(ident));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#605: FILE: arch/blackfin/kernel/bfin_gpio.c:662:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#607: FILE: arch/blackfin/kernel/bfin_gpio.c:664:
+	if (unlikely(reserved_peri_map[gpio_bank(ident)] & gpio_bit(ident))) {
[...]
+	if (!(per & P_MAYSHARE)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#608: FILE: arch/blackfin/kernel/bfin_gpio.c:665:
+	if (unlikely(reserved_peri_map[gpio_bank(ident)] & gpio_bit(ident))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#615: FILE: arch/blackfin/kernel/bfin_gpio.c:672:
+	if (!(per & P_MAYSHARE)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#624: FILE: arch/blackfin/kernel/bfin_gpio.c:681:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#626: FILE: arch/blackfin/kernel/bfin_gpio.c:683:
+			       "%s: Peripheral %d function %d is already"
+			       "reserved by %s !\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#626: FILE: arch/blackfin/kernel/bfin_gpio.c:683:
+			       "%s: Peripheral %d function %d is already"
+			       "reserved by %s !\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#627: FILE: arch/blackfin/kernel/bfin_gpio.c:684:
+			       __FUNCTION__, ident, P_FUNCT2MUX(per),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#634: FILE: arch/blackfin/kernel/bfin_gpio.c:691:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#638: FILE: arch/blackfin/kernel/bfin_gpio.c:695:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#657: FILE: arch/blackfin/kernel/bfin_gpio.c:714:
+	for (cnt = 0; per[cnt] != 0; cnt++) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: arch/blackfin/kernel/bfin_gpio.c:718:
+			for ( ; cnt > 0; cnt--) {
+				peripheral_free(per[cnt - 1]);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#694: FILE: arch/blackfin/kernel/bfin_gpio.c:751:
+	if (!(per & P_MAYSHARE)) {
+		port_setup(ident, GPIO_USAGE);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#708: FILE: arch/blackfin/kernel/bfin_gpio.c:765:
+	for (cnt = 0; per[cnt] != 0; cnt++) {
+		peripheral_free(per[cnt]);
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#712: FILE: arch/blackfin/kernel/bfin_gpio.c:769:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: arch/blackfin/kernel/bfin_gpio.c:840:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#766: FILE: arch/blackfin/kernel/bfin_gpio.c:853:
+	BUG_ON(!(reserved_gpio_map[gpio_bank(gpio)] & gpio_bit(gpio)));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#820: FILE: arch/blackfin/kernel/irqchip.c:153:
+	printk(KERN_INFO "Hardware Trace expanded to %ik\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: arch/blackfin/kernel/irqchip.c:154:
+	printk(KERN_INFO "Hardware Trace expanded to %ik\n",
+	  1 << CONFIG_DEBUG_BFIN_HWTRACE_EXPAND_LEN);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#932: FILE: arch/blackfin/kernel/traps.c:148:
+		CHK_DEBUGGER(trapnr, sig, info.si_code, fp, ); \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#953: FILE: arch/blackfin/kernel/traps.c:448:
+	printk(KERN_EMERG "Hardware Trace:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#961: FILE: arch/blackfin/kernel/traps.c:452:
+			printk(KERN_EMERG "%4i Target : ", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#964: FILE: arch/blackfin/kernel/traps.c:454:
+			printk("\n" KERN_EMERG "     Source : ");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#972: FILE: arch/blackfin/kernel/traps.c:462:
+		index = trace_buff_offset/4 - 1;
 		                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#978: FILE: arch/blackfin/kernel/traps.c:468:
+		printk(KERN_EMERG "%4i Target : ", i);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#981: FILE: arch/blackfin/kernel/traps.c:471:
+		if (index < 0 )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#983: FILE: arch/blackfin/kernel/traps.c:473:
+		printk("\n" KERN_EMERG "     Source : ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#988: FILE: arch/blackfin/kernel/traps.c:478:
+		printk("\n");

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1330: FILE: arch/blackfin/mach-bf548/boards/ezkit.c:97:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1358: FILE: arch/blackfin/mach-bf548/boards/ezkit.c:126:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1368: FILE: arch/blackfin/mach-bf548/boards/ezkit.c:136:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1370: FILE: arch/blackfin/mach-bf548/boards/ezkit.c:138:
+	spi_register_board_info(bf54x_spi_board_info,
+			ARRAY_SIZE(bf54x_spi_board_info));

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1384: FILE: arch/blackfin/mach-bf548/gpio.c:52:
+char *str_ident = NULL;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1419: FILE: arch/blackfin/mach-bf548/gpio.c:98:
 {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1433: FILE: arch/blackfin/mach-bf548/gpio.c:112:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1436: FILE: arch/blackfin/mach-bf548/gpio.c:115:
+		strncpy(str_ident + ident * RESOURCE_LABEL_SIZE, label,
+			 RESOURCE_LABEL_SIZE);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1482: FILE: arch/blackfin/mach-bf548/gpio.c:162:
+		       __FUNCTION__, ident, get_label(ident));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1495: FILE: arch/blackfin/mach-bf548/gpio.c:177:
 		if (!((per & P_MAYSHARE) && (funct == P_FUNCT2MUX(per)))) {
[...]
+		if (cmp_label(ident, label) == 0)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1496: FILE: arch/blackfin/mach-bf548/gpio.c:178:
 		if (!((per & P_MAYSHARE) && (funct == P_FUNCT2MUX(per)))) {
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1509: FILE: arch/blackfin/mach-bf548/gpio.c:189:
+			       __FUNCTION__, ident, P_FUNCT2MUX(per), get_label(ident));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1536: FILE: arch/blackfin/mach-bf548/gpio.c:215:
 	for (cnt = 0; per[cnt] != 0; cnt++) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1542: FILE: arch/blackfin/mach-bf548/gpio.c:219:
+			for ( ; cnt > 0; cnt--) {
+				peripheral_free(per[cnt - 1]);
+			}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1549: FILE: arch/blackfin/mach-bf548/gpio.c:226:
 
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1577: FILE: arch/blackfin/mach-bf548/gpio.c:298:
+		printk(KERN_ERR "bfin-gpio: GPIO %d is already reserved by %s !\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: arch/blackfin/mach-bf548/gpio.c:299:
+		printk(KERN_ERR "bfin-gpio: GPIO %d is already reserved by %s !\n",
+			 gpio, get_label(gpio));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2327: FILE: arch/blackfin/mach-common/ints-priority-sc.c:583:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#2329: FILE: arch/blackfin/mach-common/ints-priority-sc.c:585:
+		"GPIO IRQ %d :Not in PINT Assign table "
+		"Reconfigure Interrupt to Port Assignemt\n", irq);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2612: FILE: drivers/spi/spi_bfin5xx.c:4:
+ * ^I^IBryan Wu <bryan.wu@analog.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2614: FILE: drivers/spi/spi_bfin5xx.c:6:
+ * ^I^ILuke Yang (Analog Devices Inc.)$

WARNING:TYPO_SPELLING: 'Contoller' may be misspelled - perhaps 'Controller'?
#2662: FILE: drivers/spi/spi_bfin5xx.c:54:
+MODULE_DESCRIPTION("Blackfin BF5xx SPI Contoller Driver");
                                        ^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i > 0'
#2769: FILE: drivers/spi/spi_bfin5xx.c:208:
+		if ((i > 0) && (i <= MAX_SPI0_SSEL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i <= MAX_SPI0_SSEL'
#2769: FILE: drivers/spi/spi_bfin5xx.c:208:
+		if ((i > 0) && (i <= MAX_SPI0_SSEL))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2770: FILE: drivers/spi/spi_bfin5xx.c:209:
+			ret = peripheral_request(ssel[i-1], DRV_NAME);
 			                               ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3052: FILE: drivers/spi/spi_bfin5xx.c:1153:
+{
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3056: FILE: drivers/spi/spi_bfin5xx.c:1157:
+		if (peripheral_request_list(pin_req, DRV_NAME)) {
+			return -EFAULT;
+		}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3112: FILE: include/asm-blackfin/bfin-global.h:64:
+extern void init_exception_vectors(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3129: FILE: include/asm-blackfin/bfin5xx_spi.h:158:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3168: FILE: include/asm-blackfin/blackfin.h:23:
+		__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3177: FILE: include/asm-blackfin/blackfin.h:32:
+		__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3184: FILE: include/asm-blackfin/blackfin.h:39:
+		__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3219: FILE: include/asm-blackfin/blackfin.h:54:
+		__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3228: FILE: include/asm-blackfin/blackfin.h:63:
+		__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3235: FILE: include/asm-blackfin/blackfin.h:70:
+		__asm__ __volatile__(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3337: FILE: include/asm-blackfin/gpio.h:445:
+static inline int gpio_to_irq(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3342: FILE: include/asm-blackfin/gpio.h:450:
+static inline int irq_to_gpio(unsigned irq)

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3359: FILE: include/asm-blackfin/mach-bf533/anomaly.h:2:
+ * File: include/asm-blackfin/mach-bf533/anomaly.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3707: FILE: include/asm-blackfin/mach-bf533/anomaly.h:190:
+/* Trace Buffers may record discontinuities into emulation mode and/or exception, NMI, reset handlers */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3737: FILE: include/asm-blackfin/mach-bf533/anomaly.h:220:
+/* When booting from a 16-bit asynchronous memory device, the upper 8-bits of each word must be 0x00 */

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#3745: FILE: include/asm-blackfin/mach-bf533/anomaly.h:228:
+/* A killed 32-bit System MMR write will lead to the next system MMR access thinking it should be 32-bit. */

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3984: FILE: include/asm-blackfin/mach-bf537/anomaly.h:2:
+ * File: include/asm-blackfin/mach-bf537/anomaly.h

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#4159: FILE: include/asm-blackfin/mach-bf537/anomaly.h:74:
+#define ANOMALY_05000258 (((ANOMALY_BF536 || ANOMALY_BF537) && __SILICON_REVISION__ == 1) || __SILICON_REVISION__ == 2)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#4183: FILE: include/asm-blackfin/mach-bf537/anomaly.h:98:
+#define ANOMALY_05000278 (((ANOMALY_BF536 || ANOMALY_BF537) && __SILICON_REVISION__ < 3) || (ANOMALY_BF534 && __SILICON_REVISION__ < 2))

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ETxD0>
#4350: FILE: include/asm-blackfin/mach-bf537/portmux.h:110:
+	P_MII0_ETxD0, \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ETxD1>
#4351: FILE: include/asm-blackfin/mach-bf537/portmux.h:111:
+	P_MII0_ETxD1, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ETxD2>
#4352: FILE: include/asm-blackfin/mach-bf537/portmux.h:112:
+	P_MII0_ETxD2, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ETxD3>
#4353: FILE: include/asm-blackfin/mach-bf537/portmux.h:113:
+	P_MII0_ETxD3, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ETxEN>
#4354: FILE: include/asm-blackfin/mach-bf537/portmux.h:114:
+	P_MII0_ETxEN, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_TxCLK>
#4355: FILE: include/asm-blackfin/mach-bf537/portmux.h:115:
+	P_MII0_TxCLK, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxD0>
#4358: FILE: include/asm-blackfin/mach-bf537/portmux.h:118:
+	P_MII0_ERxD0, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxD1>
#4359: FILE: include/asm-blackfin/mach-bf537/portmux.h:119:
+	P_MII0_ERxD1, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxD2>
#4360: FILE: include/asm-blackfin/mach-bf537/portmux.h:120:
+	P_MII0_ERxD2, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxD3>
#4361: FILE: include/asm-blackfin/mach-bf537/portmux.h:121:
+	P_MII0_ERxD3, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxDV>
#4362: FILE: include/asm-blackfin/mach-bf537/portmux.h:122:
+	P_MII0_ERxDV, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxCLK>
#4363: FILE: include/asm-blackfin/mach-bf537/portmux.h:123:
+	P_MII0_ERxCLK, \

CHECK:CAMELCASE: Avoid CamelCase: <P_MII0_ERxER>
#4364: FILE: include/asm-blackfin/mach-bf537/portmux.h:124:
+	P_MII0_ERxER, \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4369: FILE: include/asm-blackfin/mach-bf537/portmux.h:129:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4382: FILE: include/asm-blackfin/mach-bf537/portmux.h:142:
+#endif^I^I^I        ^I/* _MACH_PORTMUX_H_ */$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#4403: FILE: include/asm-blackfin/mach-bf548/anomaly.h:2:
+ * File: include/asm-blackfin/mach-bf548/anomaly.h

WARNING:TYPO_SPELLING: 'shoule' may be misspelled - perhaps 'should'?
#4424: FILE: include/asm-blackfin/mach-bf548/anomaly.h:9:
+/* This file shoule be up to date with:
              ^^^^^^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#4763: FILE: include/asm-blackfin/mach-bf561/anomaly.h:2:
+ * File: include/asm-blackfin/mach-bf561/anomaly.h

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#4897: FILE: include/asm-blackfin/mach-bf561/anomaly.h:75:
+/* Data Cache Fill data can be corrupted after/during Instruction DMA if certain core stalls exist */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5416: FILE: include/asm-blackfin/mach-common/def_LPBlackfin.h:49:
+	uint8_t __v; \

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5426: FILE: include/asm-blackfin/mach-common/def_LPBlackfin.h:59:
+	uint16_t __v; \

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5436: FILE: include/asm-blackfin/mach-common/def_LPBlackfin.h:69:
+	uint32_t __v; \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5445: FILE: include/asm-blackfin/mach-common/def_LPBlackfin.h:78:
+#define bfin_write8(addr, val) \
+	__asm__ __volatile__( \
+		NOP_PAD_ANOMALY_05000198 \
+		"b[%0] = %1;" \
+		: \
+		: "a" (addr), "d" (val) \
+		: "memory" \
+	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5454: FILE: include/asm-blackfin/mach-common/def_LPBlackfin.h:87:
+#define bfin_write16(addr, val) \
+	__asm__ __volatile__( \
+		NOP_PAD_ANOMALY_05000198 \
+		"w[%0] = %1;" \
+		: \
+		: "a" (addr), "d" (val) \
+		: "memory" \
+	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5463: FILE: include/asm-blackfin/mach-common/def_LPBlackfin.h:96:
+#define bfin_write32(addr, val) \
+	__asm__ __volatile__( \
+		NOP_PAD_ANOMALY_05000198 \
+		"[%0] = %1;" \
+		: \
+		: "a" (addr), "d" (val) \
+		: "memory" \
+	)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5485: FILE: include/asm-blackfin/portmux.h:17:
 
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5538: FILE: include/asm-blackfin/system.h:47:
+#define local_irq_enable() \
+	__asm__ __volatile__( \
+		"sti %0;" \
+		: \
+		: "d" (irq_flags) \
+	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5580: FILE: include/asm-blackfin/system.h:69:
+#define idle_with_irq_disabled() \
+	__asm__ __volatile__( \
+		NOP_PAD_ANOMALY_05000244 \
+		".align 8;" \
+		"sti %0;" \
+		"idle;" \
+		: \
+		: "d" (irq_flags) \
+	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5596: FILE: include/asm-blackfin/system.h:80:
+# define __save_and_cli(x) \
+	__asm__ __volatile__( \
+		"cli %0;" \
+		"sti %1;" \
+		: "=&d" (x) \
+		: "d" (0x3F) \
+	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5609: FILE: include/asm-blackfin/system.h:88:
+# define __save_and_cli(x) \
+	__asm__ __volatile__( \
+		"cli %0;" \
+		: "=&d" (x) \
+	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5619: FILE: include/asm-blackfin/system.h:95:
+#define local_save_flags(x) \
+	__asm__ __volatile__( \
+		"cli %0;" \
+		"sti %0;" \
+		: "=d" (x) \
+	)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5677: FILE: include/asm-blackfin/thread_info.h:97:
+	return (struct thread_info *)((long)ti & ~((long)THREAD_SIZE-1));
 	                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#5744: FILE: include/asm-blackfin/trace.h:58:
+#define trace_buffer_start(preg, dreg)	\
 	preg.L = LO(TBUFCTL);		\
 	preg.H = HI(TBUFCTL);		\
+	dreg = BFIN_TRACE_ON;		\
+	[preg] = dreg;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dreg' - possible side-effects?
#5744: FILE: include/asm-blackfin/trace.h:58:
+#define trace_buffer_start(preg, dreg)	\
 	preg.L = LO(TBUFCTL);		\
 	preg.H = HI(TBUFCTL);		\
+	dreg = BFIN_TRACE_ON;		\
+	[preg] = dreg;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#5744: FILE: include/asm-blackfin/trace.h:58:
+#define trace_buffer_start(preg, dreg)	\
 	preg.L = LO(TBUFCTL);		\
 	preg.H = HI(TBUFCTL);		\
+	dreg = BFIN_TRACE_ON;		\
+	[preg] = dreg;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#5751: FILE: include/asm-blackfin/trace.h:64:
+#define trace_buffer_init(preg, dreg) \
+	preg.L = LO(TBUFCTL);         \
+	preg.H = HI(TBUFCTL);         \
+	dreg = BFIN_TRACE_INIT;       \
 	[preg] = dreg;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dreg' - possible side-effects?
#5751: FILE: include/asm-blackfin/trace.h:64:
+#define trace_buffer_init(preg, dreg) \
+	preg.L = LO(TBUFCTL);         \
+	preg.H = HI(TBUFCTL);         \
+	dreg = BFIN_TRACE_INIT;       \
 	[preg] = dreg;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#5751: FILE: include/asm-blackfin/trace.h:64:
+#define trace_buffer_init(preg, dreg) \
+	preg.L = LO(TBUFCTL);         \
+	preg.H = HI(TBUFCTL);         \
+	dreg = BFIN_TRACE_INIT;       \
 	[preg] = dreg;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000400701.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 66 warnings, 59 checks, 4991 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000400701.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
