CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: tools/perf/builtin-annotate.c:507:
+	dump_printf("%p [%p]: PERF_EVENT (IP, %d): %d: %p\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: tools/perf/builtin-annotate.c:582:
+	dump_printf("%p [%p]: PERF_EVENT_MMAP %d: [%p(%p) @ %p]: %s\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: tools/perf/builtin-annotate.c:608:
+	dump_printf("%p [%p]: PERF_EVENT_COMM: %s:%d\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: tools/perf/builtin-annotate.c:631:
+	dump_printf("%p [%p]: PERF_EVENT_FORK: %d:%d\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: tools/perf/builtin-annotate.c:1022:
+	dump_printf("%p [%p]: event: %d\n",
 			(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: tools/perf/builtin-annotate.c:1029:
+		dump_printf("%p [%p]: skipping unknown header type: %d\n",
 			(void *)(offset + head),

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#212: FILE: tools/perf/builtin-report.c:715:
+	dump_printf(" ...... map: %Lx -> %Lx\n", *ipp, ip);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#221: FILE: tools/perf/builtin-report.c:1109:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: tools/perf/builtin-report.c:1110:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",
 		(void *)(offset + head),

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#230: FILE: tools/perf/builtin-report.c:1122:
+		dump_printf("... chain: nr:%Lu\n", chain->nr);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#239: FILE: tools/perf/builtin-report.c:1131:
+				dump_printf("..... %2d: %016Lx\n", i, chain->ips[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: tools/perf/builtin-report.c:1199:
+	dump_printf("%p [%p]: PERF_EVENT_MMAP %d/%d: [%p(%p) @ %p]: %s\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: tools/perf/builtin-report.c:1227:
+	dump_printf("%p [%p]: PERF_EVENT_COMM: %s:%d\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: tools/perf/builtin-report.c:1251:
+	dump_printf("%p [%p]: PERF_EVENT_%s: (%d:%d):(%d:%d)\n",
 		(void *)(offset + head),

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#324: FILE: tools/perf/builtin-report.c:1279:
+	dump_printf("%p [%p]: PERF_EVENT_LOST: id:%Ld: lost:%Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: tools/perf/builtin-report.c:1280:
+	dump_printf("%p [%p]: PERF_EVENT_LOST: id:%Ld: lost:%Ld\n",
 		(void *)(offset + head),

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#357: FILE: tools/perf/builtin-report.c:1360:
+	dump_printf("%p [%p]: PERF_EVENT_READ: %d %d %s %Lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: tools/perf/builtin-report.c:1361:
+	dump_printf("%p [%p]: PERF_EVENT_READ: %d %d %s %Lu\n",
 			(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: tools/perf/builtin-report.c:1542:
+	dump_printf("\n%p [%p]: event: %d\n",
 			(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: tools/perf/builtin-report.c:1549:
+		dump_printf("%p [%p]: skipping unknown header type: %d\n",
 			(void *)(offset + head),

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#405: FILE: tools/perf/util/debug.c:9:
+int dump_trace = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#438: FILE: tools/perf/util/debug.h:7:
+int dump_printf(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000083918.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 14 checks, 341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000083918.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
