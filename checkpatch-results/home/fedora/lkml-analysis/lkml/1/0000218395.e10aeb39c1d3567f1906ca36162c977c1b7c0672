WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Cleaned up immensely by Olaf Hartman <o.hartmann@telovital.com> and Christoph

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#143: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#148: FILE: drivers/staging/et131x/Kconfig:1:
+config ET131X
+	tristate "Agere ET-1310 Gigabit Ethernet support"
+	depends on NETDEV_1000 && PCI
+	default n
+	---help---
+	  This driver supports Agere ET-1310 ethernet adapters.
+
+	  To compile this driver as a module, choose M here. The module
+	  will be called et131x.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#158: FILE: drivers/staging/et131x/Kconfig:11:
+config ET131X_DEBUG
+	bool "Enable et131x debugging"
+	depends on ET131X
+	default n
+	---help---
+	  Say Y for detailed debug information.
+
+	  If in doubt, say N.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: drivers/staging/et131x/et1310_address_map.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#231: FILE: drivers/staging/et131x/et1310_address_map.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#248: FILE: drivers/staging/et131x/et1310_address_map.h:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#269: FILE: drivers/staging/et131x/et1310_address_map.h:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: drivers/staging/et131x/et1310_address_map.h:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#290: FILE: drivers/staging/et131x/et1310_address_map.h:64:
+typedef union _Q_ADDR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#331: FILE: drivers/staging/et131x/et1310_address_map.h:105:
+typedef union _PM_CSR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#366: FILE: drivers/staging/et131x/et1310_address_map.h:140:
+typedef union _INTERRUPT_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#435: FILE: drivers/staging/et131x/et1310_address_map.h:209:
+typedef union _SW_RESET_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#466: FILE: drivers/staging/et131x/et1310_address_map.h:240:
+typedef union _SLV_TIMER_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#483: FILE: drivers/staging/et131x/et1310_address_map.h:257:
+typedef union _MSI_CONFIG_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#504: FILE: drivers/staging/et131x/et1310_address_map.h:278:
+typedef union _LOOPBACK_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#523: FILE: drivers/staging/et131x/et1310_address_map.h:297:
+typedef struct _GLOBAL_t {			// Location:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: drivers/staging/et131x/et1310_address_map.h:317:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#550: FILE: drivers/staging/et131x/et1310_address_map.h:324:
+typedef union _TXDMA_CSR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#589: FILE: drivers/staging/et131x/et1310_address_map.h:363:
+typedef union _TXDMA_PR_NUM_DES_t {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#602: FILE: drivers/staging/et131x/et1310_address_map.h:376:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#603: FILE: drivers/staging/et131x/et1310_address_map.h:377:
+typedef union _DMA10W_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#660: FILE: drivers/staging/et131x/et1310_address_map.h:434:
+typedef union _DMA4W_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#691: FILE: drivers/staging/et131x/et1310_address_map.h:465:
+typedef union _TXDMA_ERROR_t {

CHECK:CAMELCASE: Avoid CamelCase: <WrbkRewind>
#696: FILE: drivers/staging/et131x/et1310_address_map.h:470:
+		u32 WrbkRewind:1;	// bit 9

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <WrbkResend>
#697: FILE: drivers/staging/et131x/et1310_address_map.h:471:
+		u32 WrbkResend:1;	// bit 8

CHECK:CAMELCASE: Avoid CamelCase: <DescrRewind>
#699: FILE: drivers/staging/et131x/et1310_address_map.h:473:
+		u32 DescrRewind:1;	// bit 5

CHECK:CAMELCASE: Avoid CamelCase: <DescrResend>
#700: FILE: drivers/staging/et131x/et1310_address_map.h:474:
+		u32 DescrResend:1;	// bit 4

CHECK:CAMELCASE: Avoid CamelCase: <PyldRewind>
#702: FILE: drivers/staging/et131x/et1310_address_map.h:476:
+		u32 PyldRewind:1;	// bit 1

CHECK:CAMELCASE: Avoid CamelCase: <PyldResend>
#703: FILE: drivers/staging/et131x/et1310_address_map.h:477:
+		u32 PyldResend:1;	// bit 0

WARNING:NEW_TYPEDEFS: do not add new typedefs
#722: FILE: drivers/staging/et131x/et1310_address_map.h:496:
+typedef struct _TXDMA_t {		// Location:

CHECK:CAMELCASE: Avoid CamelCase: <TxDmaError>
#736: FILE: drivers/staging/et131x/et1310_address_map.h:510:
+	TXDMA_ERROR_t TxDmaError;	//  0x1034

CHECK:CAMELCASE: Avoid CamelCase: <DescAbortCount>
#737: FILE: drivers/staging/et131x/et1310_address_map.h:511:
+	u32 DescAbortCount;		//  0x1038

CHECK:CAMELCASE: Avoid CamelCase: <PayloadAbortCnt>
#738: FILE: drivers/staging/et131x/et1310_address_map.h:512:
+	u32 PayloadAbortCnt;		//  0x103c

CHECK:CAMELCASE: Avoid CamelCase: <WriteBackAbortCnt>
#739: FILE: drivers/staging/et131x/et1310_address_map.h:513:
+	u32 WriteBackAbortCnt;		//  0x1040

CHECK:CAMELCASE: Avoid CamelCase: <DescTimeoutCnt>
#740: FILE: drivers/staging/et131x/et1310_address_map.h:514:
+	u32 DescTimeoutCnt;		//  0x1044

CHECK:CAMELCASE: Avoid CamelCase: <PayloadTimeoutCnt>
#741: FILE: drivers/staging/et131x/et1310_address_map.h:515:
+	u32 PayloadTimeoutCnt;		//  0x1048

CHECK:CAMELCASE: Avoid CamelCase: <WriteBackTimeoutCnt>
#742: FILE: drivers/staging/et131x/et1310_address_map.h:516:
+	u32 WriteBackTimeoutCnt;	//  0x104c

CHECK:CAMELCASE: Avoid CamelCase: <DescErrorCount>
#743: FILE: drivers/staging/et131x/et1310_address_map.h:517:
+	u32 DescErrorCount;		//  0x1050

CHECK:CAMELCASE: Avoid CamelCase: <PayloadErrorCnt>
#744: FILE: drivers/staging/et131x/et1310_address_map.h:518:
+	u32 PayloadErrorCnt;		//  0x1054

CHECK:CAMELCASE: Avoid CamelCase: <WriteBackErrorCnt>
#745: FILE: drivers/staging/et131x/et1310_address_map.h:519:
+	u32 WriteBackErrorCnt;		//  0x1058

CHECK:CAMELCASE: Avoid CamelCase: <DroppedTLPCount>
#746: FILE: drivers/staging/et131x/et1310_address_map.h:520:
+	u32 DroppedTLPCount;		//  0x105c

CHECK:CAMELCASE: Avoid CamelCase: <NewServiceComplete>
#747: FILE: drivers/staging/et131x/et1310_address_map.h:521:
+	DMA10W_t NewServiceComplete;	//  0x1060

CHECK:CAMELCASE: Avoid CamelCase: <EthernetPacketCount>
#748: FILE: drivers/staging/et131x/et1310_address_map.h:522:
+	u32 EthernetPacketCount;	//  0x1064

CHECK:LINE_SPACING: Please don't use multiple blank lines
#753: FILE: drivers/staging/et131x/et1310_address_map.h:527:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#760: FILE: drivers/staging/et131x/et1310_address_map.h:534:
+typedef union _RXDMA_CSR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#815: FILE: drivers/staging/et131x/et1310_address_map.h:589:
+typedef union _RXDMA_NUM_PKT_DONE_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#832: FILE: drivers/staging/et131x/et1310_address_map.h:606:
+typedef union _RXDMA_MAX_PKT_TIME_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#879: FILE: drivers/staging/et131x/et1310_address_map.h:653:
+typedef union _RXDMA_PSR_NUM_DES_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#896: FILE: drivers/staging/et131x/et1310_address_map.h:670:
+typedef union _RXDMA_PSR_AVAIL_OFFSET_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#915: FILE: drivers/staging/et131x/et1310_address_map.h:689:
+typedef union _RXDMA_PSR_FULL_OFFSET_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#934: FILE: drivers/staging/et131x/et1310_address_map.h:708:
+typedef union _RXDMA_PSR_ACCESS_INDEX_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#951: FILE: drivers/staging/et131x/et1310_address_map.h:725:
+typedef union _RXDMA_PSR_MIN_DES_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#980: FILE: drivers/staging/et131x/et1310_address_map.h:754:
+typedef union _RXDMA_FBR_NUM_DES_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1009: FILE: drivers/staging/et131x/et1310_address_map.h:783:
+typedef union _RXDMA_FBC_RD_INDEX_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1026: FILE: drivers/staging/et131x/et1310_address_map.h:800:
+typedef union _RXDMA_FBR_MIN_DES_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1079: FILE: drivers/staging/et131x/et1310_address_map.h:853:
+typedef struct _RXDMA_t {				// Location:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1113: FILE: drivers/staging/et131x/et1310_address_map.h:887:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1120: FILE: drivers/staging/et131x/et1310_address_map.h:894:
+typedef union _TXMAC_CTL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1151: FILE: drivers/staging/et131x/et1310_address_map.h:925:
+typedef union _TXMAC_SHADOW_PTR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1172: FILE: drivers/staging/et131x/et1310_address_map.h:946:
+typedef union _TXMAC_ERR_CNT_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1193: FILE: drivers/staging/et131x/et1310_address_map.h:967:
+typedef union _TXMAC_MAX_FILL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1210: FILE: drivers/staging/et131x/et1310_address_map.h:984:
+typedef union _TXMAC_CF_PARAM_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1227: FILE: drivers/staging/et131x/et1310_address_map.h:1001:
+typedef union _TXMAC_TXTEST_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1250: FILE: drivers/staging/et131x/et1310_address_map.h:1024:
+typedef union _TXMAC_ERR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1281: FILE: drivers/staging/et131x/et1310_address_map.h:1055:
+typedef union _TXMAC_ERR_INT_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1312: FILE: drivers/staging/et131x/et1310_address_map.h:1086:
+typedef union _TXMAC_CP_CTRL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1330: FILE: drivers/staging/et131x/et1310_address_map.h:1104:
+typedef struct _TXMAC_t {		// Location:

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1350: FILE: drivers/staging/et131x/et1310_address_map.h:1124:
+typedef union _RXMAC_CTRL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1379: FILE: drivers/staging/et131x/et1310_address_map.h:1153:
+typedef union _RXMAC_WOL_CTL_CRC0_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1420: FILE: drivers/staging/et131x/et1310_address_map.h:1194:
+typedef union _RXMAC_WOL_CRC12_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1437: FILE: drivers/staging/et131x/et1310_address_map.h:1211:
+typedef union _RXMAC_WOL_CRC34_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1454: FILE: drivers/staging/et131x/et1310_address_map.h:1228:
+typedef union _RXMAC_WOL_SA_LO_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1475: FILE: drivers/staging/et131x/et1310_address_map.h:1249:
+typedef union _RXMAC_WOL_SA_HI_t {

WARNING:TYPO_SPELLING: 'Paket' may be misspelled - perhaps 'Packet'?
#1497: FILE: drivers/staging/et131x/et1310_address_map.h:1271:
+ * structure for Unicast Paket Filter Address 1 reg in rxmac address map
                          ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1500: FILE: drivers/staging/et131x/et1310_address_map.h:1274:
+typedef union _RXMAC_UNI_PF_ADDR1_t {

WARNING:TYPO_SPELLING: 'Paket' may be misspelled - perhaps 'Packet'?
#1518: FILE: drivers/staging/et131x/et1310_address_map.h:1292:
+ * structure for Unicast Paket Filter Address 2 reg in rxmac address map
                          ^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1521: FILE: drivers/staging/et131x/et1310_address_map.h:1295:
+typedef union _RXMAC_UNI_PF_ADDR2_t {

WARNING:TYPO_SPELLING: 'Paket' may be misspelled - perhaps 'Packet'?
#1539: FILE: drivers/staging/et131x/et1310_address_map.h:1313:
+ * structure for Unicast Paket Filter Address 1 & 2 reg in rxmac address map
                          ^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1542: FILE: drivers/staging/et131x/et1310_address_map.h:1316:
+typedef union _RXMAC_UNI_PF_ADDR3_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1569: FILE: drivers/staging/et131x/et1310_address_map.h:1343:
+typedef union _RXMAC_PF_CTRL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1596: FILE: drivers/staging/et131x/et1310_address_map.h:1370:
+typedef union _RXMAC_MCIF_CTRL_MAX_SEG_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1617: FILE: drivers/staging/et131x/et1310_address_map.h:1391:
+typedef union _RXMAC_MCIF_WATER_MARK_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1638: FILE: drivers/staging/et131x/et1310_address_map.h:1412:
+typedef union _RXMAC_RXQ_DIAG_t {

WARNING:TYPO_SPELLING: 'availiable' may be misspelled - perhaps 'available'?
#1656: FILE: drivers/staging/et131x/et1310_address_map.h:1430:
+ * structure for space availiable reg in rxmac address map.
                        ^^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1659: FILE: drivers/staging/et131x/et1310_address_map.h:1433:
+typedef union _RXMAC_SPACE_AVAIL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1680: FILE: drivers/staging/et131x/et1310_address_map.h:1454:
+typedef union _RXMAC_MIF_CTL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1699: FILE: drivers/staging/et131x/et1310_address_map.h:1473:
+typedef union _RXMAC_ERROR_REG_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1721: FILE: drivers/staging/et131x/et1310_address_map.h:1495:
+typedef struct _RXMAC_t {				// Location:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1767: FILE: drivers/staging/et131x/et1310_address_map.h:1541:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1774: FILE: drivers/staging/et131x/et1310_address_map.h:1548:
+typedef union _MAC_CFG1_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1819: FILE: drivers/staging/et131x/et1310_address_map.h:1593:
+typedef union _MAC_CFG2_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1854: FILE: drivers/staging/et131x/et1310_address_map.h:1628:
+typedef union _MAC_IPG_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1881: FILE: drivers/staging/et131x/et1310_address_map.h:1655:
+typedef union _MAC_HFDP_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1912: FILE: drivers/staging/et131x/et1310_address_map.h:1686:
+typedef union _MAC_MAX_FM_LEN_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1935: FILE: drivers/staging/et131x/et1310_address_map.h:1709:
+typedef union _MAC_TEST_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1952: FILE: drivers/staging/et131x/et1310_address_map.h:1726:
+typedef union _MII_MGMT_CFG_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1977: FILE: drivers/staging/et131x/et1310_address_map.h:1751:
+typedef union _MII_MGMT_CMD_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1996: FILE: drivers/staging/et131x/et1310_address_map.h:1770:
+typedef union _MII_MGMT_ADDR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2017: FILE: drivers/staging/et131x/et1310_address_map.h:1791:
+typedef union _MII_MGMT_CTRL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2034: FILE: drivers/staging/et131x/et1310_address_map.h:1808:
+typedef union _MII_MGMT_STAT_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2051: FILE: drivers/staging/et131x/et1310_address_map.h:1825:
+typedef union _MII_MGMT_INDICATOR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2072: FILE: drivers/staging/et131x/et1310_address_map.h:1846:
+typedef union _MAC_IF_CTRL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2119: FILE: drivers/staging/et131x/et1310_address_map.h:1893:
+typedef union _MAC_IF_STAT_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2154: FILE: drivers/staging/et131x/et1310_address_map.h:1928:
+typedef union _MAC_STATION_ADDR1_t {

CHECK:CAMELCASE: Avoid CamelCase: <Octet6>
#2158: FILE: drivers/staging/et131x/et1310_address_map.h:1932:
+		u32 Octet6:8;	// bits 24-31

CHECK:CAMELCASE: Avoid CamelCase: <Octet5>
#2159: FILE: drivers/staging/et131x/et1310_address_map.h:1933:
+		u32 Octet5:8;	// bits 16-23

CHECK:CAMELCASE: Avoid CamelCase: <Octet4>
#2160: FILE: drivers/staging/et131x/et1310_address_map.h:1934:
+		u32 Octet4:8;	// bits 8-15

CHECK:CAMELCASE: Avoid CamelCase: <Octet3>
#2161: FILE: drivers/staging/et131x/et1310_address_map.h:1935:
+		u32 Octet3:8;	// bits 0-7

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2175: FILE: drivers/staging/et131x/et1310_address_map.h:1949:
+typedef union _MAC_STATION_ADDR2_t {

CHECK:CAMELCASE: Avoid CamelCase: <Octet2>
#2179: FILE: drivers/staging/et131x/et1310_address_map.h:1953:
+		u32 Octet2:8;	// bits 24-31

CHECK:CAMELCASE: Avoid CamelCase: <Octet1>
#2180: FILE: drivers/staging/et131x/et1310_address_map.h:1954:
+		u32 Octet1:8;	// bits 16-23

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2193: FILE: drivers/staging/et131x/et1310_address_map.h:1967:
+typedef struct _MAC_t {					// Location:

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2222: FILE: drivers/staging/et131x/et1310_address_map.h:1996:
+typedef union _MAC_STAT_REG_1_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2285: FILE: drivers/staging/et131x/et1310_address_map.h:2059:
+typedef union _MAC_STAT_REG_2_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2339: FILE: drivers/staging/et131x/et1310_address_map.h:2113:
+typedef struct _MAC_STAT_t {		// Location:

CHECK:CAMELCASE: Avoid CamelCase: <TRMax>
#2358: FILE: drivers/staging/et131x/et1310_address_map.h:2132:
+	u32 TRMax;			//  0x6094

CHECK:CAMELCASE: Avoid CamelCase: <TRMgv>
#2361: FILE: drivers/staging/et131x/et1310_address_map.h:2135:
+	u32 TRMgv;			//  0x6098

CHECK:CAMELCASE: Avoid CamelCase: <RByt>
#2364: FILE: drivers/staging/et131x/et1310_address_map.h:2138:
+	u32 RByt;			//  0x609C

CHECK:CAMELCASE: Avoid CamelCase: <RPkt>
#2367: FILE: drivers/staging/et131x/et1310_address_map.h:2141:
+	u32 RPkt;			//  0x60A0

CHECK:CAMELCASE: Avoid CamelCase: <RFcs>
#2370: FILE: drivers/staging/et131x/et1310_address_map.h:2144:
+	u32 RFcs;			//  0x60A4

CHECK:CAMELCASE: Avoid CamelCase: <RMca>
#2373: FILE: drivers/staging/et131x/et1310_address_map.h:2147:
+	u32 RMca;			//  0x60A8

CHECK:CAMELCASE: Avoid CamelCase: <RBca>
#2376: FILE: drivers/staging/et131x/et1310_address_map.h:2150:
+	u32 RBca;			//  0x60AC

CHECK:CAMELCASE: Avoid CamelCase: <RxCf>
#2379: FILE: drivers/staging/et131x/et1310_address_map.h:2153:
+	u32 RxCf;			//  0x60B0

CHECK:CAMELCASE: Avoid CamelCase: <RxPf>
#2382: FILE: drivers/staging/et131x/et1310_address_map.h:2156:
+	u32 RxPf;			//  0x60B4

CHECK:CAMELCASE: Avoid CamelCase: <RxUo>
#2385: FILE: drivers/staging/et131x/et1310_address_map.h:2159:
+	u32 RxUo;			//  0x60B8

CHECK:CAMELCASE: Avoid CamelCase: <RAln>
#2388: FILE: drivers/staging/et131x/et1310_address_map.h:2162:
+	u32 RAln;			//  0x60BC

CHECK:CAMELCASE: Avoid CamelCase: <RFlr>
#2391: FILE: drivers/staging/et131x/et1310_address_map.h:2165:
+	u32 RFlr;			//  0x60C0

CHECK:CAMELCASE: Avoid CamelCase: <RCde>
#2394: FILE: drivers/staging/et131x/et1310_address_map.h:2168:
+	u32 RCde;			//  0x60C4

CHECK:CAMELCASE: Avoid CamelCase: <RCse>
#2397: FILE: drivers/staging/et131x/et1310_address_map.h:2171:
+	u32 RCse;			//  0x60C8

CHECK:CAMELCASE: Avoid CamelCase: <RUnd>
#2400: FILE: drivers/staging/et131x/et1310_address_map.h:2174:
+	u32 RUnd;			//  0x60CC

CHECK:CAMELCASE: Avoid CamelCase: <ROvr>
#2403: FILE: drivers/staging/et131x/et1310_address_map.h:2177:
+	u32 ROvr;			//  0x60D0

CHECK:CAMELCASE: Avoid CamelCase: <RFrg>
#2406: FILE: drivers/staging/et131x/et1310_address_map.h:2180:
+	u32 RFrg;			//  0x60D4

CHECK:CAMELCASE: Avoid CamelCase: <RJbr>
#2409: FILE: drivers/staging/et131x/et1310_address_map.h:2183:
+	u32 RJbr;			//  0x60D8

CHECK:CAMELCASE: Avoid CamelCase: <RDrp>
#2412: FILE: drivers/staging/et131x/et1310_address_map.h:2186:
+	u32 RDrp;			//  0x60DC

CHECK:CAMELCASE: Avoid CamelCase: <TByt>
#2415: FILE: drivers/staging/et131x/et1310_address_map.h:2189:
+	u32 TByt;			//  0x60E0

CHECK:CAMELCASE: Avoid CamelCase: <TPkt>
#2418: FILE: drivers/staging/et131x/et1310_address_map.h:2192:
+	u32 TPkt;			//  0x60E4

CHECK:CAMELCASE: Avoid CamelCase: <TMca>
#2421: FILE: drivers/staging/et131x/et1310_address_map.h:2195:
+	u32 TMca;			//  0x60E8

CHECK:CAMELCASE: Avoid CamelCase: <TBca>
#2424: FILE: drivers/staging/et131x/et1310_address_map.h:2198:
+	u32 TBca;			//  0x60EC

CHECK:CAMELCASE: Avoid CamelCase: <TxPf>
#2427: FILE: drivers/staging/et131x/et1310_address_map.h:2201:
+	u32 TxPf;			//  0x60F0

CHECK:CAMELCASE: Avoid CamelCase: <TDfr>
#2430: FILE: drivers/staging/et131x/et1310_address_map.h:2204:
+	u32 TDfr;			//  0x60F4

CHECK:CAMELCASE: Avoid CamelCase: <TEdf>
#2433: FILE: drivers/staging/et131x/et1310_address_map.h:2207:
+	u32 TEdf;			//  0x60F8

CHECK:CAMELCASE: Avoid CamelCase: <TScl>
#2436: FILE: drivers/staging/et131x/et1310_address_map.h:2210:
+	u32 TScl;			//  0x60FC

CHECK:CAMELCASE: Avoid CamelCase: <TMcl>
#2439: FILE: drivers/staging/et131x/et1310_address_map.h:2213:
+	u32 TMcl;			//  0x6100

CHECK:CAMELCASE: Avoid CamelCase: <TLcl>
#2442: FILE: drivers/staging/et131x/et1310_address_map.h:2216:
+	u32 TLcl;			//  0x6104

CHECK:CAMELCASE: Avoid CamelCase: <TXcl>
#2445: FILE: drivers/staging/et131x/et1310_address_map.h:2219:
+	u32 TXcl;			//  0x6108

CHECK:CAMELCASE: Avoid CamelCase: <TNcl>
#2448: FILE: drivers/staging/et131x/et1310_address_map.h:2222:
+	u32 TNcl;			//  0x610C

CHECK:CAMELCASE: Avoid CamelCase: <TPfh>
#2451: FILE: drivers/staging/et131x/et1310_address_map.h:2225:
+	u32 TPfh;			//  0x6110

CHECK:CAMELCASE: Avoid CamelCase: <TDrp>
#2454: FILE: drivers/staging/et131x/et1310_address_map.h:2228:
+	u32 TDrp;			//  0x6114

CHECK:CAMELCASE: Avoid CamelCase: <TJbr>
#2457: FILE: drivers/staging/et131x/et1310_address_map.h:2231:
+	u32 TJbr;			//  0x6118

CHECK:CAMELCASE: Avoid CamelCase: <TFcs>
#2460: FILE: drivers/staging/et131x/et1310_address_map.h:2234:
+	u32 TFcs;			//  0x611C

CHECK:CAMELCASE: Avoid CamelCase: <TxCf>
#2463: FILE: drivers/staging/et131x/et1310_address_map.h:2237:
+	u32 TxCf;			//  0x6120

CHECK:CAMELCASE: Avoid CamelCase: <TOvr>
#2466: FILE: drivers/staging/et131x/et1310_address_map.h:2240:
+	u32 TOvr;			//  0x6124

CHECK:CAMELCASE: Avoid CamelCase: <TUnd>
#2469: FILE: drivers/staging/et131x/et1310_address_map.h:2243:
+	u32 TUnd;			//  0x6128

CHECK:CAMELCASE: Avoid CamelCase: <TFrg>
#2472: FILE: drivers/staging/et131x/et1310_address_map.h:2246:
+	u32 TFrg;			//  0x612C

CHECK:CAMELCASE: Avoid CamelCase: <Carry1>
#2475: FILE: drivers/staging/et131x/et1310_address_map.h:2249:
+	MAC_STAT_REG_1_t Carry1;	//  0x6130

CHECK:CAMELCASE: Avoid CamelCase: <Carry2>
#2478: FILE: drivers/staging/et131x/et1310_address_map.h:2252:
+	MAC_STAT_REG_2_t Carry2;	//  0x6134

CHECK:CAMELCASE: Avoid CamelCase: <Carry1M>
#2481: FILE: drivers/staging/et131x/et1310_address_map.h:2255:
+	MAC_STAT_REG_1_t Carry1M;	//  0x6138

CHECK:CAMELCASE: Avoid CamelCase: <Carry2M>
#2484: FILE: drivers/staging/et131x/et1310_address_map.h:2258:
+	MAC_STAT_REG_2_t Carry2M;	//  0x613C

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2489: FILE: drivers/staging/et131x/et1310_address_map.h:2263:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2496: FILE: drivers/staging/et131x/et1310_address_map.h:2270:
+typedef union _MMC_CTRL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2525: FILE: drivers/staging/et131x/et1310_address_map.h:2299:
+typedef union _MMC_SRAM_ACCESS_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2557: FILE: drivers/staging/et131x/et1310_address_map.h:2331:
+typedef struct _MMC_t {			// Location:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2568: FILE: drivers/staging/et131x/et1310_address_map.h:2342:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2576: FILE: drivers/staging/et131x/et1310_address_map.h:2350:
+#if 0

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2577: FILE: drivers/staging/et131x/et1310_address_map.h:2351:
+typedef struct _EXP_ROM_t {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2578: FILE: drivers/staging/et131x/et1310_address_map.h:2352:
+typedef struct _EXP_ROM_t {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2584: FILE: drivers/staging/et131x/et1310_address_map.h:2358:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2588: FILE: drivers/staging/et131x/et1310_address_map.h:2362:
+typedef struct _ADDRESS_MAP_t {

CHECK:CAMELCASE: Avoid CamelCase: <macStat>
#2607: FILE: drivers/staging/et131x/et1310_address_map.h:2381:
+	MAC_STAT_t macStat;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2617: FILE: drivers/staging/et131x/et1310_address_map.h:2391:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2632: FILE: drivers/staging/et131x/et1310_eeprom.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#2636: FILE: drivers/staging/et131x/et1310_eeprom.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#2653: FILE: drivers/staging/et131x/et1310_eeprom.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#2674: FILE: drivers/staging/et131x/et1310_eeprom.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#2708: FILE: drivers/staging/et131x/et1310_eeprom.c:77:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#2710: FILE: drivers/staging/et131x/et1310_eeprom.c:79:
+#include <asm/bitops.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2729: FILE: drivers/staging/et131x/et1310_eeprom.c:98:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2771: FILE: drivers/staging/et131x/et1310_eeprom.c:140:
+#define EXTRACT_DATA_REGISTER(x)    (uint8_t)(x & 0xFF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2771: FILE: drivers/staging/et131x/et1310_eeprom.c:140:
+#define EXTRACT_DATA_REGISTER(x)    (uint8_t)(x & 0xFF)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2772: FILE: drivers/staging/et131x/et1310_eeprom.c:141:
+#define EXTRACT_STATUS_REGISTER(x)  (uint8_t)((x >> 16) & 0xFF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2772: FILE: drivers/staging/et131x/et1310_eeprom.c:141:
+#define EXTRACT_STATUS_REGISTER(x)  (uint8_t)((x >> 16) & 0xFF)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2773: FILE: drivers/staging/et131x/et1310_eeprom.c:142:
+#define EXTRACT_CONTROL_REG(x)      (uint8_t)((x >> 8) & 0xFF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2773: FILE: drivers/staging/et131x/et1310_eeprom.c:142:
+#define EXTRACT_CONTROL_REG(x)      (uint8_t)((x >> 8) & 0xFF)

CHECK:CAMELCASE: Avoid CamelCase: <EepromWriteByte>
#2785: FILE: drivers/staging/et131x/et1310_eeprom.c:154:
+int32_t EepromWriteByte(struct et131x_adapter *pAdapter, uint32_t unAddress,

CHECK:CAMELCASE: Avoid CamelCase: <pAdapter>
#2785: FILE: drivers/staging/et131x/et1310_eeprom.c:154:
+int32_t EepromWriteByte(struct et131x_adapter *pAdapter, uint32_t unAddress,

CHECK:CAMELCASE: Avoid CamelCase: <unAddress>
#2785: FILE: drivers/staging/et131x/et1310_eeprom.c:154:
+int32_t EepromWriteByte(struct et131x_adapter *pAdapter, uint32_t unAddress,

CHECK:CAMELCASE: Avoid CamelCase: <bData>
#2786: FILE: drivers/staging/et131x/et1310_eeprom.c:155:
+			uint8_t bData, uint32_t unEepromId,

CHECK:CAMELCASE: Avoid CamelCase: <unEepromId>
#2786: FILE: drivers/staging/et131x/et1310_eeprom.c:155:
+			uint8_t bData, uint32_t unEepromId,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2786: FILE: drivers/staging/et131x/et1310_eeprom.c:155:
+			uint8_t bData, uint32_t unEepromId,

CHECK:CAMELCASE: Avoid CamelCase: <unAddressingMode>
#2787: FILE: drivers/staging/et131x/et1310_eeprom.c:156:
+			uint32_t unAddressingMode)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2789: FILE: drivers/staging/et131x/et1310_eeprom.c:158:
+        struct pci_dev *pdev = pAdapter->pdev;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2789: FILE: drivers/staging/et131x/et1310_eeprom.c:158:
+        struct pci_dev *pdev = pAdapter->pdev;$

CHECK:CAMELCASE: Avoid CamelCase: <nIndex>
#2790: FILE: drivers/staging/et131x/et1310_eeprom.c:159:
+	int32_t nIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2790: FILE: drivers/staging/et131x/et1310_eeprom.c:159:
+	int32_t nIndex;

CHECK:CAMELCASE: Avoid CamelCase: <nRetries>
#2791: FILE: drivers/staging/et131x/et1310_eeprom.c:160:
+	int32_t nRetries;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2791: FILE: drivers/staging/et131x/et1310_eeprom.c:160:
+	int32_t nRetries;

CHECK:CAMELCASE: Avoid CamelCase: <nError>
#2792: FILE: drivers/staging/et131x/et1310_eeprom.c:161:
+	int32_t nError = false;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2792: FILE: drivers/staging/et131x/et1310_eeprom.c:161:
+	int32_t nError = false;

CHECK:CAMELCASE: Avoid CamelCase: <nI2CWriteActive>
#2793: FILE: drivers/staging/et131x/et1310_eeprom.c:162:
+	int32_t nI2CWriteActive = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2793: FILE: drivers/staging/et131x/et1310_eeprom.c:162:
+	int32_t nI2CWriteActive = 0;

CHECK:CAMELCASE: Avoid CamelCase: <nWriteSuccessful>
#2794: FILE: drivers/staging/et131x/et1310_eeprom.c:163:
+	int32_t nWriteSuccessful = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2794: FILE: drivers/staging/et131x/et1310_eeprom.c:163:
+	int32_t nWriteSuccessful = 0;

CHECK:CAMELCASE: Avoid CamelCase: <bControl>
#2795: FILE: drivers/staging/et131x/et1310_eeprom.c:164:
+	uint8_t bControl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2795: FILE: drivers/staging/et131x/et1310_eeprom.c:164:
+	uint8_t bControl;

CHECK:CAMELCASE: Avoid CamelCase: <bStatus>
#2796: FILE: drivers/staging/et131x/et1310_eeprom.c:165:
+	uint8_t bStatus = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2796: FILE: drivers/staging/et131x/et1310_eeprom.c:165:
+	uint8_t bStatus = 0;

CHECK:CAMELCASE: Avoid CamelCase: <unDword1>
#2797: FILE: drivers/staging/et131x/et1310_eeprom.c:166:
+	uint32_t unDword1 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2797: FILE: drivers/staging/et131x/et1310_eeprom.c:166:
+	uint32_t unDword1 = 0;

CHECK:CAMELCASE: Avoid CamelCase: <unData>
#2798: FILE: drivers/staging/et131x/et1310_eeprom.c:167:
+	uint32_t unData = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2798: FILE: drivers/staging/et131x/et1310_eeprom.c:167:
+	uint32_t unData = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2861: FILE: drivers/staging/et131x/et1310_eeprom.c:230:
+^I^I    ^I/* bits 1:0 are equal to 1 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2861: FILE: drivers/staging/et131x/et1310_eeprom.c:230:
+^I^I    ^I/* bits 1:0 are equal to 1 */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nIndex >= MAX_NUM_REGISTER_POLLS'
#2866: FILE: drivers/staging/et131x/et1310_eeprom.c:235:
+	if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2866: FILE: drivers/staging/et131x/et1310_eeprom.c:235:
+	if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {
+		return FAILURE;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2874: FILE: drivers/staging/et131x/et1310_eeprom.c:243:
+	if (unAddressingMode == DUAL_BYTE) {
+		bControl |= LBCIF_CONTROL_TWO_BYTE_ADDR;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#2916: FILE: drivers/staging/et131x/et1310_eeprom.c:285:
+^I^I^I    ^I/* I2C write complete */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2916: FILE: drivers/staging/et131x/et1310_eeprom.c:285:
+^I^I^I    ^I/* I2C write complete */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nIndex >= MAX_NUM_REGISTER_POLLS'
#2921: FILE: drivers/staging/et131x/et1310_eeprom.c:290:
+		if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2921: FILE: drivers/staging/et131x/et1310_eeprom.c:290:
+		if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {
+			break;
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#2928: FILE: drivers/staging/et131x/et1310_eeprom.c:297:
+^I         */$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2930: FILE: drivers/staging/et131x/et1310_eeprom.c:299:
+		if (bStatus & LBCIF_STATUS_GENERAL_ERROR
+		    && pAdapter->RevisionID == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <RevisionID>
#2930: FILE: drivers/staging/et131x/et1310_eeprom.c:299:
+		    && pAdapter->RevisionID == 0) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2942: FILE: drivers/staging/et131x/et1310_eeprom.c:311:
+			udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2951: FILE: drivers/staging/et131x/et1310_eeprom.c:320:
+	udelay(10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2970: FILE: drivers/staging/et131x/et1310_eeprom.c:339:
+				pci_read_config_dword(pdev,
+					LBCIF_DATA_REGISTER_OFFSET, &unData);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2976: FILE: drivers/staging/et131x/et1310_eeprom.c:345:
+		if (bControl != 0xC0 || nIndex == 10000) {
+			break;
+		}

CHECK:CAMELCASE: Avoid CamelCase: <EepromReadByte>
#2996: FILE: drivers/staging/et131x/et1310_eeprom.c:365:
+int32_t EepromReadByte(struct et131x_adapter *pAdapter, uint32_t unAddress,

CHECK:CAMELCASE: Avoid CamelCase: <pbData>
#2997: FILE: drivers/staging/et131x/et1310_eeprom.c:366:
+		       uint8_t *pbData, uint32_t unEepromId,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2997: FILE: drivers/staging/et131x/et1310_eeprom.c:366:
+		       uint8_t *pbData, uint32_t unEepromId,

ERROR:CODE_INDENT: code indent should use tabs where possible
#3000: FILE: drivers/staging/et131x/et1310_eeprom.c:369:
+        struct pci_dev *pdev = pAdapter->pdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3000: FILE: drivers/staging/et131x/et1310_eeprom.c:369:
+        struct pci_dev *pdev = pAdapter->pdev;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#3001: FILE: drivers/staging/et131x/et1310_eeprom.c:370:
+	int32_t nIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#3002: FILE: drivers/staging/et131x/et1310_eeprom.c:371:
+	int32_t nError = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#3003: FILE: drivers/staging/et131x/et1310_eeprom.c:372:
+	uint8_t bControl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#3004: FILE: drivers/staging/et131x/et1310_eeprom.c:373:
+	uint8_t bStatus = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3005: FILE: drivers/staging/et131x/et1310_eeprom.c:374:
+	uint32_t unDword1 = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nIndex >= MAX_NUM_REGISTER_POLLS'
#3059: FILE: drivers/staging/et131x/et1310_eeprom.c:428:
+	if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3059: FILE: drivers/staging/et131x/et1310_eeprom.c:428:
+	if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {
+		return FAILURE;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3067: FILE: drivers/staging/et131x/et1310_eeprom.c:436:
+	if (unAddressingMode == DUAL_BYTE) {
+		bControl |= LBCIF_CONTROL_TWO_BYTE_ADDR;
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3097: FILE: drivers/staging/et131x/et1310_eeprom.c:466:
+		if (bStatus & LBCIF_STATUS_PHY_QUEUE_AVAIL
+		    && bStatus & LBCIF_STATUS_I2C_IDLE) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nIndex >= MAX_NUM_REGISTER_POLLS'
#3103: FILE: drivers/staging/et131x/et1310_eeprom.c:472:
+	if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3103: FILE: drivers/staging/et131x/et1310_eeprom.c:472:
+	if (nError || (nIndex >= MAX_NUM_REGISTER_POLLS)) {
+		return FAILURE;
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3118: FILE: drivers/staging/et131x/et1310_eeprom.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3122: FILE: drivers/staging/et131x/et1310_eeprom.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3140: FILE: drivers/staging/et131x/et1310_eeprom.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3161: FILE: drivers/staging/et131x/et1310_eeprom.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3213: FILE: drivers/staging/et131x/et1310_jagcore.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3217: FILE: drivers/staging/et131x/et1310_jagcore.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3234: FILE: drivers/staging/et131x/et1310_jagcore.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3255: FILE: drivers/staging/et131x/et1310_jagcore.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#3288: FILE: drivers/staging/et131x/et1310_jagcore.c:76:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#3290: FILE: drivers/staging/et131x/et1310_jagcore.c:78:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <ConfigGlobalRegs>
#3314: FILE: drivers/staging/et131x/et1310_jagcore.c:102:
+void ConfigGlobalRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pGbl>
#3316: FILE: drivers/staging/et131x/et1310_jagcore.c:104:
+	struct _GLOBAL_t __iomem *pGbl = &pAdapter->CSRAddress->global;

CHECK:CAMELCASE: Avoid CamelCase: <CSRAddress>
#3316: FILE: drivers/staging/et131x/et1310_jagcore.c:104:
+	struct _GLOBAL_t __iomem *pGbl = &pAdapter->CSRAddress->global;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryPhyLoopbk>
#3320: FILE: drivers/staging/et131x/et1310_jagcore.c:108:
+	if (pAdapter->RegistryPhyLoopbk == false) {

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#3320: FILE: drivers/staging/et131x/et1310_jagcore.c:108:
+	if (pAdapter->RegistryPhyLoopbk == false) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:CAMELCASE: Avoid CamelCase: <RegistryJumboPacket>
#3321: FILE: drivers/staging/et131x/et1310_jagcore.c:109:
+		if (pAdapter->RegistryJumboPacket < 2048) {

CHECK:CAMELCASE: Avoid CamelCase: <RegistryRxMemEnd>
#3328: FILE: drivers/staging/et131x/et1310_jagcore.c:116:
+			writel(pAdapter->RegistryRxMemEnd,

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMMCRegs>
#3388: FILE: drivers/staging/et131x/et1310_jagcore.c:176:
+void ConfigMMCRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <MaskValue>
#3410: FILE: drivers/staging/et131x/et1310_jagcore.c:198:
+	uint32_t MaskValue;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3410: FILE: drivers/staging/et131x/et1310_jagcore.c:198:
+	uint32_t MaskValue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->FlowControl == TxOnly'
#3413: FILE: drivers/staging/et131x/et1310_jagcore.c:201:
+	if ((adapter->FlowControl == TxOnly) || (adapter->FlowControl == Both)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->FlowControl == Both'
#3413: FILE: drivers/staging/et131x/et1310_jagcore.c:201:
+	if ((adapter->FlowControl == TxOnly) || (adapter->FlowControl == Both)) {

CHECK:CAMELCASE: Avoid CamelCase: <FlowControl>
#3413: FILE: drivers/staging/et131x/et1310_jagcore.c:201:
+	if ((adapter->FlowControl == TxOnly) || (adapter->FlowControl == Both)) {

CHECK:CAMELCASE: Avoid CamelCase: <TxOnly>
#3413: FILE: drivers/staging/et131x/et1310_jagcore.c:201:
+	if ((adapter->FlowControl == TxOnly) || (adapter->FlowControl == Both)) {

CHECK:CAMELCASE: Avoid CamelCase: <Both>
#3413: FILE: drivers/staging/et131x/et1310_jagcore.c:201:
+	if ((adapter->FlowControl == TxOnly) || (adapter->FlowControl == Both)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3413: FILE: drivers/staging/et131x/et1310_jagcore.c:201:
+	if ((adapter->FlowControl == TxOnly) || (adapter->FlowControl == Both)) {
[...]
+	} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <DriverNoPhyAccess>
#3419: FILE: drivers/staging/et131x/et1310_jagcore.c:207:
+	if (adapter->DriverNoPhyAccess) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3419: FILE: drivers/staging/et131x/et1310_jagcore.c:207:
+	if (adapter->DriverNoPhyAccess) {
+		MaskValue |= 0x10000;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <CachedMaskValue>
#3423: FILE: drivers/staging/et131x/et1310_jagcore.c:211:
+	adapter->CachedMaskValue.value = MaskValue;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3427: FILE: drivers/staging/et131x/et1310_jagcore.c:215:
+void et131x_disable_interrupts(struct et131x_adapter * adapter)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3439: FILE: drivers/staging/et131x/et1310_jagcore.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3443: FILE: drivers/staging/et131x/et1310_jagcore.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3461: FILE: drivers/staging/et131x/et1310_jagcore.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3482: FILE: drivers/staging/et131x/et1310_jagcore.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3502: FILE: drivers/staging/et131x/et1310_jagcore.h:64:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3527: FILE: drivers/staging/et131x/et1310_jagcore.h:89:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <bReadWrite>
#3528: FILE: drivers/staging/et131x/et1310_jagcore.h:90:
+	u8 bReadWrite;

CHECK:CAMELCASE: Avoid CamelCase: <nRegCount>
#3529: FILE: drivers/staging/et131x/et1310_jagcore.h:91:
+	u32 nRegCount;

CHECK:CAMELCASE: Avoid CamelCase: <nData>
#3530: FILE: drivers/staging/et131x/et1310_jagcore.h:92:
+	u32 nData[REGS_MAX_ARRAY];

CHECK:CAMELCASE: Avoid CamelCase: <nOffsets>
#3531: FILE: drivers/staging/et131x/et1310_jagcore.h:93:
+	u32 nOffsets[REGS_MAX_ARRAY];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3534: FILE: drivers/staging/et131x/et1310_jagcore.h:96:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <nDataWidth>
#3536: FILE: drivers/staging/et131x/et1310_jagcore.h:98:
+	u32 nDataWidth;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3557: FILE: drivers/staging/et131x/et1310_mac.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3561: FILE: drivers/staging/et131x/et1310_mac.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3578: FILE: drivers/staging/et131x/et1310_mac.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#3599: FILE: drivers/staging/et131x/et1310_mac.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#3632: FILE: drivers/staging/et131x/et1310_mac.c:76:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#3634: FILE: drivers/staging/et131x/et1310_mac.c:78:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMACRegs1>
#3660: FILE: drivers/staging/et131x/et1310_mac.c:104:
+void ConfigMACRegs1(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pMac>
#3662: FILE: drivers/staging/et131x/et1310_mac.c:106:
+	struct _MAC_t __iomem *pMac = &pAdapter->CSRAddress->mac;

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#3696: FILE: drivers/staging/et131x/et1310_mac.c:140:
+	/* Let's move on to setting up the mii managment configuration */
 	                                       ^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <CurrentAddress>
#3710: FILE: drivers/staging/et131x/et1310_mac.c:154:
+	station2.bits.Octet1 = pAdapter->CurrentAddress[0];

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMACRegs2>
#3738: FILE: drivers/staging/et131x/et1310_mac.c:182:
+void ConfigMACRegs2(struct et131x_adapter *pAdapter)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#3740: FILE: drivers/staging/et131x/et1310_mac.c:184:
+	int32_t delay = 0;

CHECK:CAMELCASE: Avoid CamelCase: <uiLinkSpeed>
#3754: FILE: drivers/staging/et131x/et1310_mac.c:198:
+	if (pAdapter->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->FlowControl == RxOnly'
#3769: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((pAdapter->FlowControl == RxOnly) ||
+	    (pAdapter->FlowControl == Both)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->FlowControl == Both'
#3769: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((pAdapter->FlowControl == RxOnly) ||
+	    (pAdapter->FlowControl == Both)) {

CHECK:CAMELCASE: Avoid CamelCase: <RxOnly>
#3769: FILE: drivers/staging/et131x/et1310_mac.c:213:
+	if ((pAdapter->FlowControl == RxOnly) ||

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#3791: FILE: drivers/staging/et131x/et1310_mac.c:235:
+	if (pAdapter->RegistryPhyLoopbk == false) {

CHECK:CAMELCASE: Avoid CamelCase: <uiDuplexMode>
#3800: FILE: drivers/staging/et131x/et1310_mac.c:244:
+	cfg2.bits.full_duplex = pAdapter->uiDuplexMode;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#3807: FILE: drivers/staging/et131x/et1310_mac.c:251:
+		udelay(10);

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_LOWER_POWER>
#3832: FILE: drivers/staging/et131x/et1310_mac.c:276:
+	if (!MP_TEST_FLAG(pAdapter, fMP_ADAPTER_LOWER_POWER)) {

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRxMacRegs>
#3843: FILE: drivers/staging/et131x/et1310_mac.c:287:
+void ConfigRxMacRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pRxMac>
#3845: FILE: drivers/staging/et131x/et1310_mac.c:289:
+	struct _RXMAC_t __iomem *pRxMac = &pAdapter->CSRAddress->rxmac;

CHECK:CAMELCASE: Avoid CamelCase: <PacketFilter>
#3904: FILE: drivers/staging/et131x/et1310_mac.c:348:
+	if (pAdapter->PacketFilter & ET131X_PACKET_TYPE_DIRECTED) {

CHECK:CAMELCASE: Avoid CamelCase: <SetupDeviceForUnicast>
#3905: FILE: drivers/staging/et131x/et1310_mac.c:349:
+		SetupDeviceForUnicast(pAdapter);

CHECK:CAMELCASE: Avoid CamelCase: <SetupDeviceForMulticast>
#3918: FILE: drivers/staging/et131x/et1310_mac.c:362:
+		SetupDeviceForMulticast(pAdapter);

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#3955: FILE: drivers/staging/et131x/et1310_mac.c:399:
+	/* Initialize the the mif_ctrl register

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3968: FILE: drivers/staging/et131x/et1310_mac.c:412:
+	if (pAdapter->uiLinkSpeed == TRUEPHY_SPEED_100MBPS) {
[...]
+	} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <ConfigTxMacRegs>
#3986: FILE: drivers/staging/et131x/et1310_mac.c:430:
+void ConfigTxMacRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pTxMac>
#3988: FILE: drivers/staging/et131x/et1310_mac.c:432:
+	struct _TXMAC_t __iomem *pTxMac = &pAdapter->CSRAddress->txmac;

CHECK:CAMELCASE: Avoid CamelCase: <Local>
#3989: FILE: drivers/staging/et131x/et1310_mac.c:433:
+	TXMAC_CF_PARAM_t Local;

CHECK:CAMELCASE: Avoid CamelCase: <None>
#3997: FILE: drivers/staging/et131x/et1310_mac.c:441:
+	if (pAdapter->FlowControl == None) {

CHECK:CAMELCASE: Avoid CamelCase: <ConfigMacStatRegs>
#4008: FILE: drivers/staging/et131x/et1310_mac.c:452:
+void ConfigMacStatRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pDevMacStat>
#4010: FILE: drivers/staging/et131x/et1310_mac.c:454:
+	struct _MAC_STAT_t __iomem *pDevMacStat =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4099: FILE: drivers/staging/et131x/et1310_mac.c:543:
+void ConfigFlowControl(struct et131x_adapter * pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <ConfigFlowControl>
#4099: FILE: drivers/staging/et131x/et1310_mac.c:543:
+void ConfigFlowControl(struct et131x_adapter * pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <RemotePause>
#4104: FILE: drivers/staging/et131x/et1310_mac.c:548:
+		char RemotePause, RemoteAsyncPause;

CHECK:CAMELCASE: Avoid CamelCase: <RemoteAsyncPause>
#4104: FILE: drivers/staging/et131x/et1310_mac.c:548:
+		char RemotePause, RemoteAsyncPause;

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAccessMiBit>
#4106: FILE: drivers/staging/et131x/et1310_mac.c:550:
+		ET1310_PhyAccessMiBit(pAdapter,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'RemotePause == TRUEPHY_BIT_SET'
#4112: FILE: drivers/staging/et131x/et1310_mac.c:556:
+		if ((RemotePause == TRUEPHY_BIT_SET) &&
+		    (RemoteAsyncPause == TRUEPHY_BIT_SET)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'RemoteAsyncPause == TRUEPHY_BIT_SET'
#4112: FILE: drivers/staging/et131x/et1310_mac.c:556:
+		if ((RemotePause == TRUEPHY_BIT_SET) &&
+		    (RemoteAsyncPause == TRUEPHY_BIT_SET)) {

CHECK:CAMELCASE: Avoid CamelCase: <RegistryFlowControl>
#4114: FILE: drivers/staging/et131x/et1310_mac.c:558:
+			pAdapter->FlowControl = pAdapter->RegistryFlowControl;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4117: FILE: drivers/staging/et131x/et1310_mac.c:561:
+			if (pAdapter->RegistryFlowControl == Both) {
[...]
+			} else {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4126: FILE: drivers/staging/et131x/et1310_mac.c:570:
+		} else {/* if (RemotePause == TRUEPHY_CLEAR_BIT &&
+			       RemoteAsyncPause == TRUEPHY_SET_BIT) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4126: FILE: drivers/staging/et131x/et1310_mac.c:570:
+			       RemoteAsyncPause == TRUEPHY_SET_BIT) */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4127: FILE: drivers/staging/et131x/et1310_mac.c:571:
+			if (pAdapter->RegistryFlowControl == Both) {
[...]
+			} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <UpdateMacStatHostCounters>
#4140: FILE: drivers/staging/et131x/et1310_mac.c:584:
+void UpdateMacStatHostCounters(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <Stats>
#4142: FILE: drivers/staging/et131x/et1310_mac.c:586:
+	struct _ce_stats_t *stats = &pAdapter->Stats;

CHECK:CAMELCASE: Avoid CamelCase: <HandleMacStatInterrupt>
#4172: FILE: drivers/staging/et131x/et1310_mac.c:616:
+void HandleMacStatInterrupt(struct et131x_adapter *pAdapter)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4194: FILE: drivers/staging/et131x/et1310_mac.c:638:
+	if (Carry1.bits.rfcs) {
+		pAdapter->Stats.code_violations += COUNTER_WRAP_16_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4197: FILE: drivers/staging/et131x/et1310_mac.c:641:
+	if (Carry1.bits.raln) {
+		pAdapter->Stats.alignment_err += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4200: FILE: drivers/staging/et131x/et1310_mac.c:644:
+	if (Carry1.bits.rflr) {
+		pAdapter->Stats.length_err += COUNTER_WRAP_16_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4203: FILE: drivers/staging/et131x/et1310_mac.c:647:
+	if (Carry1.bits.rfrg) {
+		pAdapter->Stats.other_errors += COUNTER_WRAP_16_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4206: FILE: drivers/staging/et131x/et1310_mac.c:650:
+	if (Carry1.bits.rcde) {
+		pAdapter->Stats.crc_err += COUNTER_WRAP_16_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4209: FILE: drivers/staging/et131x/et1310_mac.c:653:
+	if (Carry1.bits.rovr) {
+		pAdapter->Stats.rx_ov_flow += COUNTER_WRAP_16_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4212: FILE: drivers/staging/et131x/et1310_mac.c:656:
+	if (Carry1.bits.rdrp) {
+		pAdapter->Stats.norcvbuf += COUNTER_WRAP_16_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4215: FILE: drivers/staging/et131x/et1310_mac.c:659:
+	if (Carry2.bits.tovr) {
+		pAdapter->Stats.max_pkt_error += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4218: FILE: drivers/staging/et131x/et1310_mac.c:662:
+	if (Carry2.bits.tund) {
+		pAdapter->Stats.tx_uflo += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4221: FILE: drivers/staging/et131x/et1310_mac.c:665:
+	if (Carry2.bits.tscl) {
+		pAdapter->Stats.first_collision += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4224: FILE: drivers/staging/et131x/et1310_mac.c:668:
+	if (Carry2.bits.tdfr) {
+		pAdapter->Stats.tx_deferred += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4227: FILE: drivers/staging/et131x/et1310_mac.c:671:
+	if (Carry2.bits.tmcl) {
+		pAdapter->Stats.excessive_collisions += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4230: FILE: drivers/staging/et131x/et1310_mac.c:674:
+	if (Carry2.bits.tlcl) {
+		pAdapter->Stats.late_collisions += COUNTER_WRAP_12_BIT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4233: FILE: drivers/staging/et131x/et1310_mac.c:677:
+	if (Carry2.bits.tncl) {
+		pAdapter->Stats.collisions += COUNTER_WRAP_12_BIT;
+	}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4243: FILE: drivers/staging/et131x/et1310_mac.c:687:
+	uint32_t nIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4244: FILE: drivers/staging/et131x/et1310_mac.c:688:
+	uint32_t result;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4245: FILE: drivers/staging/et131x/et1310_mac.c:689:
+	uint32_t hash1 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4246: FILE: drivers/staging/et131x/et1310_mac.c:690:
+	uint32_t hash2 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4247: FILE: drivers/staging/et131x/et1310_mac.c:691:
+	uint32_t hash3 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4248: FILE: drivers/staging/et131x/et1310_mac.c:692:
+	uint32_t hash4 = 0;

CHECK:CAMELCASE: Avoid CamelCase: <MCAddressCount>
#4261: FILE: drivers/staging/et131x/et1310_mac.c:705:
+			    pAdapter->MCAddressCount);

CHECK:CAMELCASE: Avoid CamelCase: <MCList>
#4268: FILE: drivers/staging/et131x/et1310_mac.c:712:
+				    pAdapter->MCList[nIndex][0],

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4281: FILE: drivers/staging/et131x/et1310_mac.c:725:
+			} else if ((31 < result) && (result < 64)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4284: FILE: drivers/staging/et131x/et1310_mac.c:728:
+			} else if ((63 < result) && (result < 96)) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4355: FILE: drivers/staging/et131x/et1310_mac.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#4359: FILE: drivers/staging/et131x/et1310_mac.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#4377: FILE: drivers/staging/et131x/et1310_mac.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#4398: FILE: drivers/staging/et131x/et1310_mac.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4416: FILE: drivers/staging/et131x/et1310_mac.h:62:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4419: FILE: drivers/staging/et131x/et1310_mac.h:65:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <HostCnt>
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \

CHECK:CAMELCASE: Avoid CamelCase: <DevCnt>
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \
+    HostCnt = HostCnt + DevCnt;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'HostCnt' - possible side-effects?
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \
+    HostCnt = HostCnt + DevCnt;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'DevCnt' may be better as '(DevCnt)' to avoid precedence issues
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \
+    HostCnt = HostCnt + DevCnt;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4430: FILE: drivers/staging/et131x/et1310_mac.h:76:
+#define UPDATE_COUNTER(HostCnt,DevCnt) \
+    HostCnt = HostCnt + DevCnt;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4431: FILE: drivers/staging/et131x/et1310_mac.h:77:
+    HostCnt = HostCnt + DevCnt;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4454: FILE: drivers/staging/et131x/et1310_phy.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#4458: FILE: drivers/staging/et131x/et1310_phy.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#4475: FILE: drivers/staging/et131x/et1310_phy.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#4496: FILE: drivers/staging/et131x/et1310_phy.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#4530: FILE: drivers/staging/et131x/et1310_phy.c:77:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#4532: FILE: drivers/staging/et131x/et1310_phy.c:79:
+#include <asm/bitops.h>

WARNING:TYPO_SPELLING: 'transciever' may be misspelled - perhaps 'transceiver'?
#4567: FILE: drivers/staging/et131x/et1310_phy.c:114:
+ * @xcvrAddr: the address of the transciever
                                  ^^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <PhyMiRead>
#4573: FILE: drivers/staging/et131x/et1310_phy.c:120:
+int PhyMiRead(struct et131x_adapter *adapter, uint8_t xcvrAddr,

CHECK:CAMELCASE: Avoid CamelCase: <xcvrAddr>
#4573: FILE: drivers/staging/et131x/et1310_phy.c:120:
+int PhyMiRead(struct et131x_adapter *adapter, uint8_t xcvrAddr,

CHECK:CAMELCASE: Avoid CamelCase: <xcvrReg>
#4574: FILE: drivers/staging/et131x/et1310_phy.c:121:
+	      uint8_t xcvrReg, uint16_t *value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#4574: FILE: drivers/staging/et131x/et1310_phy.c:121:
+	      uint8_t xcvrReg, uint16_t *value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4578: FILE: drivers/staging/et131x/et1310_phy.c:125:
+	uint32_t delay;

CHECK:CAMELCASE: Avoid CamelCase: <miiAddr>
#4579: FILE: drivers/staging/et131x/et1310_phy.c:126:
+	MII_MGMT_ADDR_t miiAddr;

CHECK:CAMELCASE: Avoid CamelCase: <miiCmd>
#4580: FILE: drivers/staging/et131x/et1310_phy.c:127:
+	MII_MGMT_CMD_t miiCmd;

CHECK:CAMELCASE: Avoid CamelCase: <miiIndicator>
#4581: FILE: drivers/staging/et131x/et1310_phy.c:128:
+	MII_MGMT_INDICATOR_t miiIndicator;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#4607: FILE: drivers/staging/et131x/et1310_phy.c:154:
+		udelay(50);

CHECK:SPACING: No space is necessary after a cast
#4631: FILE: drivers/staging/et131x/et1310_phy.c:178:
+		*value = (uint16_t) mii_mgmt_stat.bits.phy_stat;

WARNING:SPLIT_STRING: quoted string split across lines
#4638: FILE: drivers/staging/et131x/et1310_phy.c:185:
+	DBG_VERBOSE(et131x_dbginfo, "  xcvr_addr = 0x%02x, "
+		    "xcvr_reg  = 0x%02x, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#4639: FILE: drivers/staging/et131x/et1310_phy.c:186:
+		    "xcvr_reg  = 0x%02x, "
+		    "value     = 0x%04x.\n", xcvrAddr, xcvrReg, *value);

CHECK:CAMELCASE: Avoid CamelCase: <MiWrite>
#4658: FILE: drivers/staging/et131x/et1310_phy.c:205:
+int MiWrite(struct et131x_adapter *adapter, uint8_t xcvrReg, uint16_t value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#4662: FILE: drivers/staging/et131x/et1310_phy.c:209:
+	uint8_t xcvrAddr = adapter->Stats.xcvr_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4663: FILE: drivers/staging/et131x/et1310_phy.c:210:
+	uint32_t delay;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#4691: FILE: drivers/staging/et131x/et1310_phy.c:238:
+		udelay(50);

CHECK:CAMELCASE: Avoid CamelCase: <TempValue>
#4698: FILE: drivers/staging/et131x/et1310_phy.c:245:
+		uint16_t TempValue;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#4698: FILE: drivers/staging/et131x/et1310_phy.c:245:
+		uint16_t TempValue;

CHECK:CAMELCASE: Avoid CamelCase: <MiRead>
#4707: FILE: drivers/staging/et131x/et1310_phy.c:254:
+		MiRead(adapter, xcvrReg, &TempValue);

ERROR:CODE_INDENT: code indent should use tabs where possible
#4716: FILE: drivers/staging/et131x/et1310_phy.c:263:
+         * this function$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4717: FILE: drivers/staging/et131x/et1310_phy.c:264:
+         */$

WARNING:SPLIT_STRING: quoted string split across lines
#4722: FILE: drivers/staging/et131x/et1310_phy.c:269:
+	DBG_VERBOSE(et131x_dbginfo, " xcvr_addr = 0x%02x, "
+		    "xcvr_reg  = 0x%02x, "

WARNING:SPLIT_STRING: quoted string split across lines
#4723: FILE: drivers/staging/et131x/et1310_phy.c:270:
+		    "xcvr_reg  = 0x%02x, "
+		    "value     = 0x%04x.\n", xcvrAddr, xcvrReg, value);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#4737: FILE: drivers/staging/et131x/et1310_phy.c:284:
+	uint8_t xcvr_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4740: FILE: drivers/staging/et131x/et1310_phy.c:287:
+	uint32_t xcvr_id;

CHECK:SPACING: No space is necessary after a cast
#4748: FILE: drivers/staging/et131x/et1310_phy.c:295:
+			  (uint8_t) offsetof(MI_REGS_t, idr1),

CHECK:SPACING: No space is necessary after a cast
#4751: FILE: drivers/staging/et131x/et1310_phy.c:298:
+			  (uint8_t) offsetof(MI_REGS_t, idr2),

CHECK:SPACING: No space is necessary after a cast
#4754: FILE: drivers/staging/et131x/et1310_phy.c:301:
+		xcvr_id = (uint32_t) ((idr1.value << 16) | idr2.value);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idr1.value != 0'
#4756: FILE: drivers/staging/et131x/et1310_phy.c:303:
+		if ((idr1.value != 0) && (idr1.value != 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idr1.value != 0xffff'
#4756: FILE: drivers/staging/et131x/et1310_phy.c:303:
+		if ((idr1.value != 0) && (idr1.value != 0xffff)) {

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyPowerDown>
#4788: FILE: drivers/staging/et131x/et1310_phy.c:335:
+	ET1310_PhyPowerDown(adapter, 0);

CHECK:CAMELCASE: Avoid CamelCase: <Bmsr>
#4811: FILE: drivers/staging/et131x/et1310_phy.c:358:
+	adapter->Bmsr.value = 0;

CHECK:SPACING: No space is necessary after a cast
#4813: FILE: drivers/staging/et131x/et1310_phy.c:360:
+	MiRead(adapter, (uint8_t) offsetof(MI_REGS_t, isr), &isr.value);

CHECK:SPACING: No space is necessary after a cast
#4815: FILE: drivers/staging/et131x/et1310_phy.c:362:
+	MiRead(adapter, (uint8_t) offsetof(MI_REGS_t, imr), &imr.value);

CHECK:SPACING: No space is necessary after a cast
#4824: FILE: drivers/staging/et131x/et1310_phy.c:371:
+	MiWrite(adapter, (uint8_t) offsetof(MI_REGS_t, imr), imr.value);

CHECK:CAMELCASE: Avoid CamelCase: <eepromData>
#4834: FILE: drivers/staging/et131x/et1310_phy.c:381:
+	if ((adapter->eepromData[1] & 0x4) == 0) {

CHECK:SPACING: No space is necessary after a cast
#4835: FILE: drivers/staging/et131x/et1310_phy.c:382:
+		MiRead(adapter, (uint8_t) offsetof(MI_REGS_t, lcr2),

CHECK:SPACING: No space is necessary after a cast
#4842: FILE: drivers/staging/et131x/et1310_phy.c:389:
+		MiWrite(adapter, (uint8_t) offsetof(MI_REGS_t, lcr2),

CHECK:CAMELCASE: Avoid CamelCase: <AiForceSpeed>
#4847: FILE: drivers/staging/et131x/et1310_phy.c:394:
+	if (adapter->AiForceSpeed == 0 && adapter->AiForceDpx == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <AiForceDpx>
#4847: FILE: drivers/staging/et131x/et1310_phy.c:394:
+	if (adapter->AiForceSpeed == 0 && adapter->AiForceDpx == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->RegistryFlowControl == TxOnly'
#4848: FILE: drivers/staging/et131x/et1310_phy.c:395:
+		if ((adapter->RegistryFlowControl == TxOnly) ||
+		    (adapter->RegistryFlowControl == Both)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->RegistryFlowControl == Both'
#4848: FILE: drivers/staging/et131x/et1310_phy.c:395:
+		if ((adapter->RegistryFlowControl == TxOnly) ||
+		    (adapter->RegistryFlowControl == Both)) {

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAutoNeg>
#4866: FILE: drivers/staging/et131x/et1310_phy.c:413:
+		ET1310_PhyAutoNeg(adapter, true);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4873: FILE: drivers/staging/et131x/et1310_phy.c:420:
+		return status;
+	} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->RegistryFlowControl == TxOnly'
#4878: FILE: drivers/staging/et131x/et1310_phy.c:425:
+			if ((adapter->RegistryFlowControl == TxOnly) ||
+			    (adapter->RegistryFlowControl == Both)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->RegistryFlowControl == Both'
#4878: FILE: drivers/staging/et131x/et1310_phy.c:425:
+			if ((adapter->RegistryFlowControl == TxOnly) ||
+			    (adapter->RegistryFlowControl == Both)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4907: FILE: drivers/staging/et131x/et1310_phy.c:454:
+			if (adapter->AiForceDpx == 1) {
[...]
+			} else if (adapter->AiForceDpx == 2) {
[...]
+			} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4916: FILE: drivers/staging/et131x/et1310_phy.c:463:
+			if (adapter->AiForceDpx == 1) {
[...]
+			} else if (adapter->AiForceDpx == 2) {
[...]
+			} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <et131x_Mii_check>
#4934: FILE: drivers/staging/et131x/et1310_phy.c:481:
+void et131x_Mii_check(struct et131x_adapter *pAdapter,

CHECK:CAMELCASE: Avoid CamelCase: <ucLinkStatus>
#4937: FILE: drivers/staging/et131x/et1310_phy.c:484:
+	uint8_t ucLinkStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#4937: FILE: drivers/staging/et131x/et1310_phy.c:484:
+	uint8_t ucLinkStatus;

CHECK:CAMELCASE: Avoid CamelCase: <uiAutoNegStatus>
#4938: FILE: drivers/staging/et131x/et1310_phy.c:485:
+	uint32_t uiAutoNegStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4938: FILE: drivers/staging/et131x/et1310_phy.c:485:
+	uint32_t uiAutoNegStatus;

CHECK:CAMELCASE: Avoid CamelCase: <uiSpeed>
#4939: FILE: drivers/staging/et131x/et1310_phy.c:486:
+	uint32_t uiSpeed;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4939: FILE: drivers/staging/et131x/et1310_phy.c:486:
+	uint32_t uiSpeed;

CHECK:CAMELCASE: Avoid CamelCase: <uiDuplex>
#4940: FILE: drivers/staging/et131x/et1310_phy.c:487:
+	uint32_t uiDuplex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4940: FILE: drivers/staging/et131x/et1310_phy.c:487:
+	uint32_t uiDuplex;

CHECK:CAMELCASE: Avoid CamelCase: <uiMdiMdix>
#4941: FILE: drivers/staging/et131x/et1310_phy.c:488:
+	uint32_t uiMdiMdix;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4941: FILE: drivers/staging/et131x/et1310_phy.c:488:
+	uint32_t uiMdiMdix;

CHECK:CAMELCASE: Avoid CamelCase: <uiMasterSlave>
#4942: FILE: drivers/staging/et131x/et1310_phy.c:489:
+	uint32_t uiMasterSlave;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4942: FILE: drivers/staging/et131x/et1310_phy.c:489:
+	uint32_t uiMasterSlave;

CHECK:CAMELCASE: Avoid CamelCase: <uiPolarity>
#4943: FILE: drivers/staging/et131x/et1310_phy.c:490:
+	uint32_t uiPolarity;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4943: FILE: drivers/staging/et131x/et1310_phy.c:490:
+	uint32_t uiPolarity;

CHECK:CAMELCASE: Avoid CamelCase: <PoMgmt>
#4950: FILE: drivers/staging/et131x/et1310_phy.c:497:
+			pAdapter->PoMgmt.TransPhyComaModeOnBoot = 20;

CHECK:CAMELCASE: Avoid CamelCase: <TransPhyComaModeOnBoot>
#4950: FILE: drivers/staging/et131x/et1310_phy.c:497:
+			pAdapter->PoMgmt.TransPhyComaModeOnBoot = 20;

CHECK:CAMELCASE: Avoid CamelCase: <Lock>
#4955: FILE: drivers/staging/et131x/et1310_phy.c:502:
+			spin_lock_irqsave(&pAdapter->Lock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <MediaState>
#4957: FILE: drivers/staging/et131x/et1310_phy.c:504:
+			pAdapter->MediaState = NETIF_STATUS_MEDIA_CONNECT;

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_LINK_DETECTION>
#4958: FILE: drivers/staging/et131x/et1310_phy.c:505:
+			MP_CLEAR_FLAG(pAdapter, fMP_ADAPTER_LINK_DETECTION);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4963: FILE: drivers/staging/et131x/et1310_phy.c:510:
+			if (pAdapter->RegistryPhyLoopbk == false) {
+				netif_carrier_on(pAdapter->netdev);
+			}

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#4963: FILE: drivers/staging/et131x/et1310_phy.c:510:
+			if (pAdapter->RegistryPhyLoopbk == false) {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#4972: FILE: drivers/staging/et131x/et1310_phy.c:519:
+				// && TRU_QueryCoreType(pAdapter->hTruePhy, 0) == EMI_TRUEPHY_A13O) {

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <Register18>
#4973: FILE: drivers/staging/et131x/et1310_phy.c:520:
+				uint16_t Register18;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#4973: FILE: drivers/staging/et131x/et1310_phy.c:520:
+				uint16_t Register18;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->MediaState ==
 				NETIF_STATUS_MEDIA_DISCONNECT'
#4988: FILE: drivers/staging/et131x/et1310_phy.c:535:
+			if ((MP_IS_FLAG_CLEAR
+			     (pAdapter, fMP_ADAPTER_LINK_DETECTION))
+			    || (pAdapter->MediaState ==
+				NETIF_STATUS_MEDIA_DISCONNECT)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4990: FILE: drivers/staging/et131x/et1310_phy.c:537:
+			     (pAdapter, fMP_ADAPTER_LINK_DETECTION))
+			    || (pAdapter->MediaState ==

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5001: FILE: drivers/staging/et131x/et1310_phy.c:548:
+				if (pAdapter->RegistryPhyLoopbk == false) {
+					netif_carrier_off(pAdapter->netdev);
+				}

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#5001: FILE: drivers/staging/et131x/et1310_phy.c:548:
+				if (pAdapter->RegistryPhyLoopbk == false) {

CHECK:CAMELCASE: Avoid CamelCase: <RegistryPhyComa>
#5032: FILE: drivers/staging/et131x/et1310_phy.c:579:
+			if (pAdapter->RegistryPhyComa == 1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5032: FILE: drivers/staging/et131x/et1310_phy.c:579:
+			if (pAdapter->RegistryPhyComa == 1) {
+				EnablePhyComa(pAdapter);
+			}

CHECK:CAMELCASE: Avoid CamelCase: <EnablePhyComa>
#5033: FILE: drivers/staging/et131x/et1310_phy.c:580:
+				EnablePhyComa(pAdapter);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->AiForceDpx == 3'
#5038: FILE: drivers/staging/et131x/et1310_phy.c:585:
+	if (bmsr_ints.bits.auto_neg_complete ||
+	    ((pAdapter->AiForceDpx == 3) && (bmsr_ints.bits.link_status))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bmsr_ints.bits.link_status'
#5038: FILE: drivers/staging/et131x/et1310_phy.c:585:
+	if (bmsr_ints.bits.auto_neg_complete ||
+	    ((pAdapter->AiForceDpx == 3) && (bmsr_ints.bits.link_status))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->AiForceDpx == 3'
#5040: FILE: drivers/staging/et131x/et1310_phy.c:587:
+		if (bmsr.bits.auto_neg_complete || (pAdapter->AiForceDpx == 3)) {

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyLinkStatus>
#5041: FILE: drivers/staging/et131x/et1310_phy.c:588:
+			ET1310_PhyLinkStatus(pAdapter,

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#5058: FILE: drivers/staging/et131x/et1310_phy.c:605:
+				// && TRU_QueryCoreType(pAdapter->hTruePhy, 0) == EMI_TRUEPHY_A13O) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5059: FILE: drivers/staging/et131x/et1310_phy.c:606:
+				uint16_t Register18;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5070: FILE: drivers/staging/et131x/et1310_phy.c:617:
+			if ((pAdapter->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS) &&
+			    (pAdapter->RegistryJumboPacket > 2048))
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS'
#5070: FILE: drivers/staging/et131x/et1310_phy.c:617:
+			if ((pAdapter->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS) &&
+			    (pAdapter->RegistryJumboPacket > 2048))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->RegistryJumboPacket > 2048'
#5070: FILE: drivers/staging/et131x/et1310_phy.c:617:
+			if ((pAdapter->uiLinkSpeed == TRUEPHY_SPEED_1000MBPS) &&
+			    (pAdapter->RegistryJumboPacket > 2048))

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAndOrReg>
#5073: FILE: drivers/staging/et131x/et1310_phy.c:620:
+				ET1310_PhyAndOrReg(pAdapter, 0x16, 0xcfff,

CHECK:CAMELCASE: Avoid CamelCase: <SetRxDmaTimer>
#5077: FILE: drivers/staging/et131x/et1310_phy.c:624:
+			SetRxDmaTimer(pAdapter);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAdvertise1000BaseT>
#5099: FILE: drivers/staging/et131x/et1310_phy.c:646:
+	ET1310_PhyAdvertise1000BaseT(pAdapter, TRUEPHY_ADV_DUPLEX_NONE);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAdvertise100BaseT>
#5101: FILE: drivers/staging/et131x/et1310_phy.c:648:
+	ET1310_PhyAdvertise100BaseT(pAdapter, TRUEPHY_ADV_DUPLEX_NONE);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyAdvertise10BaseT>
#5104: FILE: drivers/staging/et131x/et1310_phy.c:651:
+	ET1310_PhyAdvertise10BaseT(pAdapter, TRUEPHY_ADV_DUPLEX_HALF);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhySpeedSelect>
#5159: FILE: drivers/staging/et131x/et1310_phy.c:706:
+	ET1310_PhySpeedSelect(pAdapter, TRUEPHY_SPEED_10MBPS);

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyDuplexMode>
#5162: FILE: drivers/staging/et131x/et1310_phy.c:709:
+	ET1310_PhyDuplexMode(pAdapter, TRUEPHY_DUPLEX_FULL);

CHECK:CAMELCASE: Avoid CamelCase: <DeviceID>
#5301: FILE: drivers/staging/et131x/et1310_phy.c:848:
+	if (pAdapter->DeviceID != ET131X_PCI_DEVICE_ID_FAST) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#5301: FILE: drivers/staging/et131x/et1310_phy.c:848:
+	if (pAdapter->DeviceID != ET131X_PCI_DEVICE_ID_FAST) {
[...]
+	} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5316: FILE: drivers/staging/et131x/et1310_phy.c:863:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <ConfigPhy>
#5323: FILE: drivers/staging/et131x/et1310_phy.c:870:
+static const uint16_t ConfigPhy[25][2] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5323: FILE: drivers/staging/et131x/et1310_phy.c:870:
+static const uint16_t ConfigPhy[25][2] = {

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyInit>
#5364: FILE: drivers/staging/et131x/et1310_phy.c:911:
+void ET1310_PhyInit(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <usData>
#5366: FILE: drivers/staging/et131x/et1310_phy.c:913:
+	uint16_t usData, usIndex;

CHECK:CAMELCASE: Avoid CamelCase: <usIndex>
#5366: FILE: drivers/staging/et131x/et1310_phy.c:913:
+	uint16_t usData, usIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5366: FILE: drivers/staging/et131x/et1310_phy.c:913:
+	uint16_t usData, usIndex;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5368: FILE: drivers/staging/et131x/et1310_phy.c:915:
+	if (pAdapter == NULL) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pAdapter"
#5368: FILE: drivers/staging/et131x/et1310_phy.c:915:
+	if (pAdapter == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <ET1310_PhyReset>
#5430: FILE: drivers/staging/et131x/et1310_phy.c:977:
+void ET1310_PhyReset(struct et131x_adapter *pAdapter)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5437: FILE: drivers/staging/et131x/et1310_phy.c:984:
+	uint16_t usData;

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#5441: FILE: drivers/staging/et131x/et1310_phy.c:988:
+	if (down == false) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5454: FILE: drivers/staging/et131x/et1310_phy.c:1001:
+	uint16_t usData;

CHECK:BOOL_COMPARISON: Using comparison to true is error prone
#5458: FILE: drivers/staging/et131x/et1310_phy.c:1005:
+	if (enable == true) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5471: FILE: drivers/staging/et131x/et1310_phy.c:1018:
+	uint16_t usData;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5488: FILE: drivers/staging/et131x/et1310_phy.c:1035:
+	uint16_t usData;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5520: FILE: drivers/staging/et131x/et1310_phy.c:1067:
+	uint16_t usData;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5556: FILE: drivers/staging/et131x/et1310_phy.c:1103:
+	uint16_t usData;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5593: FILE: drivers/staging/et131x/et1310_phy.c:1140:
+	uint16_t usData;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5628: FILE: drivers/staging/et131x/et1310_phy.c:1175:
+			  uint8_t *ucLinkStatus,

CHECK:CAMELCASE: Avoid CamelCase: <uiAutoNeg>
#5629: FILE: drivers/staging/et131x/et1310_phy.c:1176:
+			  uint32_t *uiAutoNeg,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5629: FILE: drivers/staging/et131x/et1310_phy.c:1176:
+			  uint32_t *uiAutoNeg,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5630: FILE: drivers/staging/et131x/et1310_phy.c:1177:
+			  uint32_t *uiLinkSpeed,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5631: FILE: drivers/staging/et131x/et1310_phy.c:1178:
+			  uint32_t *uiDuplexMode,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5632: FILE: drivers/staging/et131x/et1310_phy.c:1179:
+			  uint32_t *uiMdiMdix,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5633: FILE: drivers/staging/et131x/et1310_phy.c:1180:
+			  uint32_t *uiMasterSlave, uint32_t *uiPolarity)

CHECK:CAMELCASE: Avoid CamelCase: <usMiStatus>
#5635: FILE: drivers/staging/et131x/et1310_phy.c:1182:
+	uint16_t usMiStatus = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5635: FILE: drivers/staging/et131x/et1310_phy.c:1182:
+	uint16_t usMiStatus = 0;

CHECK:CAMELCASE: Avoid CamelCase: <us1000BaseT>
#5636: FILE: drivers/staging/et131x/et1310_phy.c:1183:
+	uint16_t us1000BaseT = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5636: FILE: drivers/staging/et131x/et1310_phy.c:1183:
+	uint16_t us1000BaseT = 0;

CHECK:CAMELCASE: Avoid CamelCase: <usVmiPhyStatus>
#5637: FILE: drivers/staging/et131x/et1310_phy.c:1184:
+	uint16_t usVmiPhyStatus = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5637: FILE: drivers/staging/et131x/et1310_phy.c:1184:
+	uint16_t usVmiPhyStatus = 0;

CHECK:CAMELCASE: Avoid CamelCase: <usControl>
#5638: FILE: drivers/staging/et131x/et1310_phy.c:1185:
+	uint16_t usControl = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5638: FILE: drivers/staging/et131x/et1310_phy.c:1185:
+	uint16_t usControl = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5658: FILE: drivers/staging/et131x/et1310_phy.c:1205:
+	if (uiLinkSpeed) {
+		*uiLinkSpeed = (usVmiPhyStatus & 0x0300) >> 8;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5662: FILE: drivers/staging/et131x/et1310_phy.c:1209:
+	if (uiDuplexMode) {
+		*uiDuplexMode = (usVmiPhyStatus & 0x0080) >> 7;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <andMask>
#5685: FILE: drivers/staging/et131x/et1310_phy.c:1232:
+			uint16_t regnum, uint16_t andMask, uint16_t orMask)

CHECK:CAMELCASE: Avoid CamelCase: <orMask>
#5685: FILE: drivers/staging/et131x/et1310_phy.c:1232:
+			uint16_t regnum, uint16_t andMask, uint16_t orMask)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5685: FILE: drivers/staging/et131x/et1310_phy.c:1232:
+			uint16_t regnum, uint16_t andMask, uint16_t orMask)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5687: FILE: drivers/staging/et131x/et1310_phy.c:1234:
+	uint16_t reg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5703: FILE: drivers/staging/et131x/et1310_phy.c:1250:
+			   uint16_t regnum, uint16_t bitnum, uint8_t *value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5705: FILE: drivers/staging/et131x/et1310_phy.c:1252:
+	uint16_t reg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5706: FILE: drivers/staging/et131x/et1310_phy.c:1253:
+	uint16_t mask = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5716: FILE: drivers/staging/et131x/et1310_phy.c:1263:
+		if (value != NULL) {
+			*value = (reg & mask) >> bitnum;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "value"
#5716: FILE: drivers/staging/et131x/et1310_phy.c:1263:
+		if (value != NULL) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5741: FILE: drivers/staging/et131x/et1310_phy.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#5745: FILE: drivers/staging/et131x/et1310_phy.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#5763: FILE: drivers/staging/et131x/et1310_phy.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#5784: FILE: drivers/staging/et131x/et1310_phy.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5806: FILE: drivers/staging/et131x/et1310_phy.h:66:
+typedef void *TRUEPHY_HANDLE;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5807: FILE: drivers/staging/et131x/et1310_phy.h:67:
+typedef void *TRUEPHY_PLATFORM_HANDLE;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5808: FILE: drivers/staging/et131x/et1310_phy.h:68:
+typedef void *TRUEPHY_OSAL_HANDLE;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5847: FILE: drivers/staging/et131x/et1310_phy.h:107:
+typedef struct _MI_REGS_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5876: FILE: drivers/staging/et131x/et1310_phy.h:136:
+typedef union _MI_BMCR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5908: FILE: drivers/staging/et131x/et1310_phy.h:168:
+typedef union _MI_BMSR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5950: FILE: drivers/staging/et131x/et1310_phy.h:210:
+typedef union _MI_IDR1_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5958: FILE: drivers/staging/et131x/et1310_phy.h:218:
+typedef union _MI_IDR2_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5974: FILE: drivers/staging/et131x/et1310_phy.h:234:
+typedef union _MI_ANAR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6008: FILE: drivers/staging/et131x/et1310_phy.h:268:
+typedef struct _MI_ANLPAR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6042: FILE: drivers/staging/et131x/et1310_phy.h:302:
+typedef union _MI_ANER_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6064: FILE: drivers/staging/et131x/et1310_phy.h:324:
+typedef union _MI_ANNPTR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6086: FILE: drivers/staging/et131x/et1310_phy.h:346:
+typedef union _MI_LPNPR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6108: FILE: drivers/staging/et131x/et1310_phy.h:368:
+typedef union _MI_GCR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6132: FILE: drivers/staging/et131x/et1310_phy.h:392:
+typedef union _MI_GSR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6158: FILE: drivers/staging/et131x/et1310_phy.h:418:
+typedef union _MI_RES_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6200: FILE: drivers/staging/et131x/et1310_phy.h:460:
+typedef union _MI_ESR_t {

CHECK:CAMELCASE: Avoid CamelCase: <link_1000Xfdx>
#6204: FILE: drivers/staging/et131x/et1310_phy.h:464:
+		u16 link_1000Xfdx:1;	// bit 15

CHECK:CAMELCASE: Avoid CamelCase: <link_1000Xhdx>
#6205: FILE: drivers/staging/et131x/et1310_phy.h:465:
+		u16 link_1000Xhdx:1;	// bit 14

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6222: FILE: drivers/staging/et131x/et1310_phy.h:482:
+typedef union _MI_LCR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6248: FILE: drivers/staging/et131x/et1310_phy.h:508:
+typedef union _MI_MICR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6270: FILE: drivers/staging/et131x/et1310_phy.h:530:
+typedef union _MI_PHY_CONFIG_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6304: FILE: drivers/staging/et131x/et1310_phy.h:564:
+typedef union _MI_PHY_CONTROL_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6336: FILE: drivers/staging/et131x/et1310_phy.h:596:
+typedef union _MI_IMR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6368: FILE: drivers/staging/et131x/et1310_phy.h:628:
+typedef union _MI_ISR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6400: FILE: drivers/staging/et131x/et1310_phy.h:660:
+typedef union _MI_PSR_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6438: FILE: drivers/staging/et131x/et1310_phy.h:698:
+typedef union _MI_LCR1_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6466: FILE: drivers/staging/et131x/et1310_phy.h:726:
+typedef union _MI_LCR2_t {

CHECK:CAMELCASE: Avoid CamelCase: <led_100BaseTX>
#6472: FILE: drivers/staging/et131x/et1310_phy.h:732:
+		u16 led_100BaseTX:4;	// bits 4-7

CHECK:CAMELCASE: Avoid CamelCase: <led_1000BaseT>
#6473: FILE: drivers/staging/et131x/et1310_phy.h:733:
+		u16 led_1000BaseT:4;	// bits 0-3

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6486: FILE: drivers/staging/et131x/et1310_phy.h:746:
+typedef struct _TRUEPHY_ACCESS_MI_REGS_ {

CHECK:CAMELCASE: Avoid CamelCase: <hTruePhy>
#6487: FILE: drivers/staging/et131x/et1310_phy.h:747:
+	TRUEPHY_HANDLE hTruePhy;

CHECK:CAMELCASE: Avoid CamelCase: <nPhyId>
#6488: FILE: drivers/staging/et131x/et1310_phy.h:748:
+	int32_t nPhyId;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#6488: FILE: drivers/staging/et131x/et1310_phy.h:748:
+	int32_t nPhyId;

CHECK:CAMELCASE: Avoid CamelCase: <pbyRegs>
#6490: FILE: drivers/staging/et131x/et1310_phy.h:750:
+	u8 *pbyRegs;

CHECK:CAMELCASE: Avoid CamelCase: <pwData>
#6491: FILE: drivers/staging/et131x/et1310_phy.h:751:
+	u8 *pwData;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#6492: FILE: drivers/staging/et131x/et1310_phy.h:752:
+	int32_t nRegCount;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6496: FILE: drivers/staging/et131x/et1310_phy.h:756:
+typedef struct _TAG_TPAL_ACCESS_MI_REGS_ {

CHECK:CAMELCASE: Avoid CamelCase: <Data>
#6500: FILE: drivers/staging/et131x/et1310_phy.h:760:
+	u16 Data[4096];

CHECK:CAMELCASE: Avoid CamelCase: <Regs>
#6501: FILE: drivers/staging/et131x/et1310_phy.h:761:
+	u8 Regs[4096];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6504: FILE: drivers/staging/et131x/et1310_phy.h:764:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6505: FILE: drivers/staging/et131x/et1310_phy.h:765:
+typedef TRUEPHY_HANDLE TPAL_HANDLE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6524: FILE: drivers/staging/et131x/et1310_phy.h:784:
+int32_t PhyMiRead(struct et131x_adapter *adapter,
+	       u8 xcvrAddr, u8 xcvrReg, u16 *value);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adapter' - possible side-effects?
#6529: FILE: drivers/staging/et131x/et1310_phy.h:789:
+#define MiRead(adapter, xcvrReg, value) \
+	PhyMiRead((adapter), (adapter)->Stats.xcvr_addr, (xcvrReg), (value))

CHECK:CAMELCASE: Avoid CamelCase: <xcvReg>
#6533: FILE: drivers/staging/et131x/et1310_phy.h:793:
+		u8 xcvReg, u16 value);

CHECK:CAMELCASE: Avoid CamelCase: <SetPhy_10BaseTHalfDuplex>
#6541: FILE: drivers/staging/et131x/et1310_phy.h:801:
+void SetPhy_10BaseTHalfDuplex(struct et131x_adapter *adapter);

WARNING:TYPO_SPELLING: 'advertisment' may be misspelled - perhaps 'advertisement'?
#6584: FILE: drivers/staging/et131x/et1310_phy.h:844:
+/* Define duplex advertisment flags */
                  ^^^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6589: FILE: drivers/staging/et131x/et1310_phy.h:849:
+    (TRUEPHY_ADV_DUPLEX_FULL | TRUEPHY_ADV_DUPLEX_HALF)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6657: FILE: drivers/staging/et131x/et1310_pm.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#6661: FILE: drivers/staging/et131x/et1310_pm.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#6678: FILE: drivers/staging/et131x/et1310_pm.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#6699: FILE: drivers/staging/et131x/et1310_pm.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#6732: FILE: drivers/staging/et131x/et1310_pm.c:76:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#6734: FILE: drivers/staging/et131x/et1310_pm.c:78:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <GlobalPmCSR>
#6779: FILE: drivers/staging/et131x/et1310_pm.c:123:
+	PM_CSR_t GlobalPmCSR;

CHECK:CAMELCASE: Avoid CamelCase: <LoopCounter>
#6780: FILE: drivers/staging/et131x/et1310_pm.c:124:
+	int32_t LoopCounter = 10;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#6780: FILE: drivers/staging/et131x/et1310_pm.c:124:
+	int32_t LoopCounter = 10;

CHECK:CAMELCASE: Avoid CamelCase: <PowerDownSpeed>
#6789: FILE: drivers/staging/et131x/et1310_pm.c:133:
+	pAdapter->PoMgmt.PowerDownSpeed = pAdapter->AiForceSpeed;

CHECK:CAMELCASE: Avoid CamelCase: <PowerDownDuplex>
#6790: FILE: drivers/staging/et131x/et1310_pm.c:134:
+	pAdapter->PoMgmt.PowerDownDuplex = pAdapter->AiForceDpx;

CHECK:CAMELCASE: Avoid CamelCase: <SendHWLock>
#6793: FILE: drivers/staging/et131x/et1310_pm.c:137:
+	spin_lock_irqsave(&pAdapter->SendHWLock, lockflags);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#6798: FILE: drivers/staging/et131x/et1310_pm.c:142:
+	while ((MP_GET_RCV_REF(pAdapter) != 0) && (LoopCounter-- > 0)) {
+		mdelay(2);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <DisablePhyComa>
#6819: FILE: drivers/staging/et131x/et1310_pm.c:163:
+void DisablePhyComa(struct et131x_adapter *pAdapter)

ERROR:CODE_INDENT: code indent should use tabs where possible
#6847: FILE: drivers/staging/et131x/et1310_pm.c:191:
+         * autonegotiation being complete.  This way, when we get the auto-neg$

ERROR:CODE_INDENT: code indent should use tabs where possible
#6848: FILE: drivers/staging/et131x/et1310_pm.c:192:
+         * complete interrupt, we can complete init by calling ConfigMacREGS2.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#6849: FILE: drivers/staging/et131x/et1310_pm.c:193:
+         */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6870: FILE: drivers/staging/et131x/et1310_pm.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#6874: FILE: drivers/staging/et131x/et1310_pm.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#6892: FILE: drivers/staging/et131x/et1310_pm.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#6913: FILE: drivers/staging/et131x/et1310_pm.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#6934: FILE: drivers/staging/et131x/et1310_pm.h:65:
+#define MAX_WOL_MASK_SIZE      ( MAX_WOL_PACKET_SIZE / 8 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6934: FILE: drivers/staging/et131x/et1310_pm.h:65:
+#define MAX_WOL_MASK_SIZE      ( MAX_WOL_PACKET_SIZE / 8 )

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6939: FILE: drivers/staging/et131x/et1310_pm.h:70:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <NdisDeviceStateUnspecified>
#6940: FILE: drivers/staging/et131x/et1310_pm.h:71:
+	NdisDeviceStateUnspecified = 0,

CHECK:CAMELCASE: Avoid CamelCase: <NdisDeviceStateD0>
#6941: FILE: drivers/staging/et131x/et1310_pm.h:72:
+	NdisDeviceStateD0,

CHECK:CAMELCASE: Avoid CamelCase: <NdisDeviceStateD1>
#6942: FILE: drivers/staging/et131x/et1310_pm.h:73:
+	NdisDeviceStateD1,

CHECK:CAMELCASE: Avoid CamelCase: <NdisDeviceStateD2>
#6943: FILE: drivers/staging/et131x/et1310_pm.h:74:
+	NdisDeviceStateD2,

CHECK:CAMELCASE: Avoid CamelCase: <NdisDeviceStateD3>
#6944: FILE: drivers/staging/et131x/et1310_pm.h:75:
+	NdisDeviceStateD3

WARNING:NEW_TYPEDEFS: do not add new typedefs
#6947: FILE: drivers/staging/et131x/et1310_pm.h:78:
+typedef struct _MP_POWER_MGMT {

CHECK:CAMELCASE: Avoid CamelCase: <localWolAndCrc0>
#6957: FILE: drivers/staging/et131x/et1310_pm.h:88:
+	u32 localWolAndCrc0;

CHECK:CAMELCASE: Avoid CamelCase: <WOLPatternList>
#6958: FILE: drivers/staging/et131x/et1310_pm.h:89:
+	u16 WOLPatternList[NUM_WOL_PATTERNS];

CHECK:CAMELCASE: Avoid CamelCase: <WOLMaskList>
#6959: FILE: drivers/staging/et131x/et1310_pm.h:90:
+	u8 WOLMaskList[NUM_WOL_PATTERNS][MAX_WOL_MASK_SIZE];

CHECK:CAMELCASE: Avoid CamelCase: <WOLMaskSize>
#6960: FILE: drivers/staging/et131x/et1310_pm.h:91:
+	u32 WOLMaskSize[NUM_WOL_PATTERNS];

CHECK:CAMELCASE: Avoid CamelCase: <IPAddress>
#6966: FILE: drivers/staging/et131x/et1310_pm.h:97:
+	} IPAddress;

CHECK:CAMELCASE: Avoid CamelCase: <PowerState>
#6969: FILE: drivers/staging/et131x/et1310_pm.h:100:
+	NDIS_DEVICE_POWER_STATE PowerState;

CHECK:CAMELCASE: Avoid CamelCase: <WOLState>
#6970: FILE: drivers/staging/et131x/et1310_pm.h:101:
+	bool WOLState;

CHECK:CAMELCASE: Avoid CamelCase: <WOLEnabled>
#6971: FILE: drivers/staging/et131x/et1310_pm.h:102:
+	bool WOLEnabled;

CHECK:CAMELCASE: Avoid CamelCase: <Failed10Half>
#6972: FILE: drivers/staging/et131x/et1310_pm.h:103:
+	bool Failed10Half;

CHECK:CAMELCASE: Avoid CamelCase: <bFailedStateTransition>
#6973: FILE: drivers/staging/et131x/et1310_pm.h:104:
+	bool bFailedStateTransition;

CHECK:CAMELCASE: Avoid CamelCase: <CalculateCCITCRC16>
#6990: FILE: drivers/staging/et131x/et1310_pm.h:121:
+u16 CalculateCCITCRC16(u8 *Pattern, u8 *Mask, u32 MaskSize);

CHECK:CAMELCASE: Avoid CamelCase: <Pattern>
#6990: FILE: drivers/staging/et131x/et1310_pm.h:121:
+u16 CalculateCCITCRC16(u8 *Pattern, u8 *Mask, u32 MaskSize);

CHECK:CAMELCASE: Avoid CamelCase: <Mask>
#6990: FILE: drivers/staging/et131x/et1310_pm.h:121:
+u16 CalculateCCITCRC16(u8 *Pattern, u8 *Mask, u32 MaskSize);

CHECK:CAMELCASE: Avoid CamelCase: <MaskSize>
#6990: FILE: drivers/staging/et131x/et1310_pm.h:121:
+u16 CalculateCCITCRC16(u8 *Pattern, u8 *Mask, u32 MaskSize);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7001: FILE: drivers/staging/et131x/et1310_rx.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#7005: FILE: drivers/staging/et131x/et1310_rx.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#7022: FILE: drivers/staging/et131x/et1310_rx.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#7043: FILE: drivers/staging/et131x/et1310_rx.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#7077: FILE: drivers/staging/et131x/et1310_rx.c:77:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#7079: FILE: drivers/staging/et131x/et1310_rx.c:79:
+#include <asm/bitops.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7101: FILE: drivers/staging/et131x/et1310_rx.c:101:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <pMpRfd>
#7102: FILE: drivers/staging/et131x/et1310_rx.c:102:
+void nic_return_rfd(struct et131x_adapter *pAdapter, PMP_RFD pMpRfd);

CHECK:CAMELCASE: Avoid CamelCase: <OuterLoop>
#7115: FILE: drivers/staging/et131x/et1310_rx.c:115:
+	uint32_t OuterLoop, InnerLoop;

CHECK:CAMELCASE: Avoid CamelCase: <InnerLoop>
#7115: FILE: drivers/staging/et131x/et1310_rx.c:115:
+	uint32_t OuterLoop, InnerLoop;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7115: FILE: drivers/staging/et131x/et1310_rx.c:115:
+	uint32_t OuterLoop, InnerLoop;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7116: FILE: drivers/staging/et131x/et1310_rx.c:116:
+	uint32_t bufsize;

CHECK:CAMELCASE: Avoid CamelCase: <pktStatRingSize>
#7117: FILE: drivers/staging/et131x/et1310_rx.c:117:
+	uint32_t pktStatRingSize, FBRChunkSize;

CHECK:CAMELCASE: Avoid CamelCase: <FBRChunkSize>
#7117: FILE: drivers/staging/et131x/et1310_rx.c:117:
+	uint32_t pktStatRingSize, FBRChunkSize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7117: FILE: drivers/staging/et131x/et1310_rx.c:117:
+	uint32_t pktStatRingSize, FBRChunkSize;

CHECK:SPACING: No space is necessary after a cast
#7123: FILE: drivers/staging/et131x/et1310_rx.c:123:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#7123: FILE: drivers/staging/et131x/et1310_rx.c:123:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;
 	                        ^

CHECK:CAMELCASE: Avoid CamelCase: <RxRing>
#7123: FILE: drivers/staging/et131x/et1310_rx.c:123:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr>
#7127: FILE: drivers/staging/et131x/et1310_rx.c:127:
+	rx_ring->Fbr[0] = kmalloc(sizeof(FBRLOOKUPTABLE), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#7139: FILE: drivers/staging/et131x/et1310_rx.c:139:
+	 * entries are huge in order to accomodate a "jumbo" frame, then it
 	                                ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0BufferSize>
#7152: FILE: drivers/staging/et131x/et1310_rx.c:152:
+		rx_ring->Fbr0BufferSize = 256;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0NumEntries>
#7153: FILE: drivers/staging/et131x/et1310_rx.c:153:
+		rx_ring->Fbr0NumEntries = 512;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1BufferSize>
#7155: FILE: drivers/staging/et131x/et1310_rx.c:155:
+		rx_ring->Fbr1BufferSize = 2048;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1NumEntries>
#7156: FILE: drivers/staging/et131x/et1310_rx.c:156:
+		rx_ring->Fbr1NumEntries = 512;

CHECK:CAMELCASE: Avoid CamelCase: <PsrNumEntries>
#7174: FILE: drivers/staging/et131x/et1310_rx.c:174:
+	adapter->RxRing.PsrNumEntries = adapter->RxRing.Fbr0NumEntries +

CHECK:CAMELCASE: Avoid CamelCase: <pFbr1RingVa>
#7182: FILE: drivers/staging/et131x/et1310_rx.c:182:
+	rx_ring->pFbr1RingVa = pci_alloc_consistent(adapter->pdev,

CHECK:CAMELCASE: Avoid CamelCase: <pFbr1RingPa>
#7184: FILE: drivers/staging/et131x/et1310_rx.c:184:
+						    &rx_ring->pFbr1RingPa);

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1Realpa>
#7199: FILE: drivers/staging/et131x/et1310_rx.c:199:
+	rx_ring->Fbr1Realpa = rx_ring->pFbr1RingPa;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1offset>
#7204: FILE: drivers/staging/et131x/et1310_rx.c:204:
+				      &rx_ring->Fbr1offset, 0x0FFF);

CHECK:SPACING: No space is necessary after a cast
#7206: FILE: drivers/staging/et131x/et1310_rx.c:206:
+	rx_ring->pFbr1RingVa = (void *)((uint8_t *) rx_ring->pFbr1RingVa +

CHECK:CAMELCASE: Avoid CamelCase: <pFbr0RingVa>
#7212: FILE: drivers/staging/et131x/et1310_rx.c:212:
+	rx_ring->pFbr0RingVa = pci_alloc_consistent(adapter->pdev,

CHECK:CAMELCASE: Avoid CamelCase: <pFbr0RingPa>
#7214: FILE: drivers/staging/et131x/et1310_rx.c:214:
+						    &rx_ring->pFbr0RingPa);

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0Realpa>
#7229: FILE: drivers/staging/et131x/et1310_rx.c:229:
+	rx_ring->Fbr0Realpa = rx_ring->pFbr0RingPa;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0offset>
#7234: FILE: drivers/staging/et131x/et1310_rx.c:234:
+				      &rx_ring->Fbr0offset, 0x0FFF);

CHECK:SPACING: No space is necessary after a cast
#7236: FILE: drivers/staging/et131x/et1310_rx.c:236:
+	rx_ring->pFbr0RingVa = (void *)((uint8_t *) rx_ring->pFbr0RingVa +

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1Offset>
#7242: FILE: drivers/staging/et131x/et1310_rx.c:242:
+		uint64_t Fbr1Offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#7242: FILE: drivers/staging/et131x/et1310_rx.c:242:
+		uint64_t Fbr1Offset;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1TempPa>
#7243: FILE: drivers/staging/et131x/et1310_rx.c:243:
+		uint64_t Fbr1TempPa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#7243: FILE: drivers/staging/et131x/et1310_rx.c:243:
+		uint64_t Fbr1TempPa;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1Align>
#7244: FILE: drivers/staging/et131x/et1310_rx.c:244:
+		uint32_t Fbr1Align;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7244: FILE: drivers/staging/et131x/et1310_rx.c:244:
+		uint32_t Fbr1Align;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#7253: FILE: drivers/staging/et131x/et1310_rx.c:253:
+		if (rx_ring->Fbr1BufferSize > 4096) {
[...]
+		} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1MemVa>
#7261: FILE: drivers/staging/et131x/et1310_rx.c:261:
+		rx_ring->Fbr1MemVa[OuterLoop] =

CHECK:CAMELCASE: Avoid CamelCase: <Fbr1MemPa>
#7263: FILE: drivers/staging/et131x/et1310_rx.c:263:
+					 &rx_ring->Fbr1MemPa[OuterLoop]);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7279: FILE: drivers/staging/et131x/et1310_rx.c:279:
+			uint32_t index = (OuterLoop * FBR_CHUNKS) + InnerLoop;

CHECK:CAMELCASE: Avoid CamelCase: <Va>
#7284: FILE: drivers/staging/et131x/et1310_rx.c:284:
+			rx_ring->Fbr[1]->Va[index] =

CHECK:SPACING: No space is necessary after a cast
#7285: FILE: drivers/staging/et131x/et1310_rx.c:285:
+			    (uint8_t *) rx_ring->Fbr1MemVa[OuterLoop] +

CHECK:CAMELCASE: Avoid CamelCase: <PAHigh>
#7291: FILE: drivers/staging/et131x/et1310_rx.c:291:
+			rx_ring->Fbr[1]->PAHigh[index] =

CHECK:SPACING: No space is necessary after a cast
#7292: FILE: drivers/staging/et131x/et1310_rx.c:292:
+			    (uint32_t) (Fbr1TempPa >> 32);

CHECK:SPACING: No space is necessary after a cast
#7293: FILE: drivers/staging/et131x/et1310_rx.c:293:
+			rx_ring->Fbr[1]->PALow[index] = (uint32_t) Fbr1TempPa;

CHECK:CAMELCASE: Avoid CamelCase: <PALow>
#7293: FILE: drivers/staging/et131x/et1310_rx.c:293:
+			rx_ring->Fbr[1]->PALow[index] = (uint32_t) Fbr1TempPa;

CHECK:CAMELCASE: Avoid CamelCase: <Buffer1>
#7297: FILE: drivers/staging/et131x/et1310_rx.c:297:
+			rx_ring->Fbr[1]->Buffer1[index] =

CHECK:CAMELCASE: Avoid CamelCase: <Buffer2>
#7299: FILE: drivers/staging/et131x/et1310_rx.c:299:
+			rx_ring->Fbr[1]->Buffer2[index] =

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0Offset>
#7308: FILE: drivers/staging/et131x/et1310_rx.c:308:
+		uint64_t Fbr0Offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#7308: FILE: drivers/staging/et131x/et1310_rx.c:308:
+		uint64_t Fbr0Offset;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0TempPa>
#7309: FILE: drivers/staging/et131x/et1310_rx.c:309:
+		uint64_t Fbr0TempPa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#7309: FILE: drivers/staging/et131x/et1310_rx.c:309:
+		uint64_t Fbr0TempPa;

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0MemVa>
#7312: FILE: drivers/staging/et131x/et1310_rx.c:312:
+		rx_ring->Fbr0MemVa[OuterLoop] =

CHECK:CAMELCASE: Avoid CamelCase: <Fbr0MemPa>
#7314: FILE: drivers/staging/et131x/et1310_rx.c:314:
+					 &rx_ring->Fbr0MemPa[OuterLoop]);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7331: FILE: drivers/staging/et131x/et1310_rx.c:331:
+			uint32_t index = (OuterLoop * FBR_CHUNKS) + InnerLoop;

CHECK:SPACING: No space is necessary after a cast
#7334: FILE: drivers/staging/et131x/et1310_rx.c:334:
+			    (uint8_t *) rx_ring->Fbr0MemVa[OuterLoop] +

CHECK:SPACING: No space is necessary after a cast
#7338: FILE: drivers/staging/et131x/et1310_rx.c:338:
+			    (uint32_t) (Fbr0TempPa >> 32);

CHECK:SPACING: No space is necessary after a cast
#7339: FILE: drivers/staging/et131x/et1310_rx.c:339:
+			rx_ring->Fbr[0]->PALow[index] = (uint32_t) Fbr0TempPa;

CHECK:CAMELCASE: Avoid CamelCase: <pPSRingVa>
#7355: FILE: drivers/staging/et131x/et1310_rx.c:355:
+	rx_ring->pPSRingVa = pci_alloc_consistent(adapter->pdev,

CHECK:CAMELCASE: Avoid CamelCase: <pPSRingPa>
#7357: FILE: drivers/staging/et131x/et1310_rx.c:357:
+						  &rx_ring->pPSRingPa);

CHECK:CAMELCASE: Avoid CamelCase: <pPSRingRealPa>
#7373: FILE: drivers/staging/et131x/et1310_rx.c:373:
+	rx_ring->pPSRingRealPa = rx_ring->pPSRingPa;

CHECK:CAMELCASE: Avoid CamelCase: <pPSRingOffset>
#7378: FILE: drivers/staging/et131x/et1310_rx.c:378:
+				      &rx_ring->pPSRingOffset, 0x0FFF);

CHECK:SPACING: No space is necessary after a cast
#7380: FILE: drivers/staging/et131x/et1310_rx.c:380:
+	rx_ring->pPSRingVa = (void *)((uint8_t *) rx_ring->pPSRingVa +

CHECK:CAMELCASE: Avoid CamelCase: <pRxStatusVa>
#7384: FILE: drivers/staging/et131x/et1310_rx.c:384:
+	rx_ring->pRxStatusVa = pci_alloc_consistent(adapter->pdev,

CHECK:CAMELCASE: Avoid CamelCase: <pRxStatusPa>
#7386: FILE: drivers/staging/et131x/et1310_rx.c:386:
+						    0x7, &rx_ring->pRxStatusPa);

CHECK:CAMELCASE: Avoid CamelCase: <RxStatusRealPA>
#7395: FILE: drivers/staging/et131x/et1310_rx.c:395:
+	rx_ring->RxStatusRealPA = rx_ring->pRxStatusPa;

CHECK:CAMELCASE: Avoid CamelCase: <RxStatusOffset>
#7400: FILE: drivers/staging/et131x/et1310_rx.c:400:
+				      &rx_ring->RxStatusOffset, 0x07);

CHECK:SPACING: No space is necessary after a cast
#7402: FILE: drivers/staging/et131x/et1310_rx.c:402:
+	rx_ring->pRxStatusVa = (void *)((uint8_t *) rx_ring->pRxStatusVa +

CHECK:CAMELCASE: Avoid CamelCase: <NumRfd>
#7404: FILE: drivers/staging/et131x/et1310_rx.c:404:
+	rx_ring->NumRfd = NIC_DEFAULT_NUM_RFD;

CHECK:CAMELCASE: Avoid CamelCase: <RecvLookaside>
#7412: FILE: drivers/staging/et131x/et1310_rx.c:412:
+	rx_ring->RecvLookaside = kmem_cache_create(adapter->netdev->name,

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_RECV_LOOKASIDE>
#7419: FILE: drivers/staging/et131x/et1310_rx.c:419:
+	MP_SET_FLAG(adapter, fMP_ADAPTER_RECV_LOOKASIDE);

CHECK:CAMELCASE: Avoid CamelCase: <RecvList>
#7424: FILE: drivers/staging/et131x/et1310_rx.c:424:
+	INIT_LIST_HEAD(&rx_ring->RecvList);

CHECK:CAMELCASE: Avoid CamelCase: <RecvPendingList>
#7425: FILE: drivers/staging/et131x/et1310_rx.c:425:
+	INIT_LIST_HEAD(&rx_ring->RecvPendingList);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7437: FILE: drivers/staging/et131x/et1310_rx.c:437:
+	uint32_t index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7438: FILE: drivers/staging/et131x/et1310_rx.c:438:
+	uint32_t bufsize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7439: FILE: drivers/staging/et131x/et1310_rx.c:439:
+	uint32_t pktStatRingSize;

CHECK:SPACING: No space is necessary after a cast
#7446: FILE: drivers/staging/et131x/et1310_rx.c:446:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#7446: FILE: drivers/staging/et131x/et1310_rx.c:446:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;
 	                        ^

CHECK:CAMELCASE: Avoid CamelCase: <nReadyRecv>
#7449: FILE: drivers/staging/et131x/et1310_rx.c:449:
+	DBG_ASSERT(rx_ring->nReadyRecv == rx_ring->NumRfd);

CHECK:SPACING: No space is necessary after a cast
#7460: FILE: drivers/staging/et131x/et1310_rx.c:460:
+		pMpRfd = (MP_RFD *) list_entry(rx_ring->RecvPendingList.next,

WARNING:REPEATED_WORD: Possible repeated word: 'Free'
#7466: FILE: drivers/staging/et131x/et1310_rx.c:466:
+	/* Free Free Buffer Ring 1 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7472: FILE: drivers/staging/et131x/et1310_rx.c:472:
+				uint32_t Fbr1Align;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#7474: FILE: drivers/staging/et131x/et1310_rx.c:474:
+				if (rx_ring->Fbr1BufferSize > 4096) {
[...]
+				} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#7494: FILE: drivers/staging/et131x/et1310_rx.c:494:
+		rx_ring->pFbr1RingVa = (void *)((uint8_t *) rx_ring->pFbr1RingVa -

CHECK:SPACING: No space is necessary after a cast
#7528: FILE: drivers/staging/et131x/et1310_rx.c:528:
+		rx_ring->pFbr0RingVa = (void *)((uint8_t *) rx_ring->pFbr0RingVa -

CHECK:SPACING: No space is necessary after a cast
#7544: FILE: drivers/staging/et131x/et1310_rx.c:544:
+		rx_ring->pPSRingVa = (void *)((uint8_t *) rx_ring->pPSRingVa -

CHECK:SPACING: No space is necessary after a cast
#7559: FILE: drivers/staging/et131x/et1310_rx.c:559:
+		rx_ring->pRxStatusVa = (void *)((uint8_t *) rx_ring->pRxStatusVa -

CHECK:CAMELCASE: Avoid CamelCase: <RfdCount>
#7602: FILE: drivers/staging/et131x/et1310_rx.c:602:
+	uint32_t RfdCount;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7602: FILE: drivers/staging/et131x/et1310_rx.c:602:
+	uint32_t RfdCount;

CHECK:CAMELCASE: Avoid CamelCase: <TotalNumRfd>
#7603: FILE: drivers/staging/et131x/et1310_rx.c:603:
+	uint32_t TotalNumRfd = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7603: FILE: drivers/staging/et131x/et1310_rx.c:603:
+	uint32_t TotalNumRfd = 0;

CHECK:SPACING: No space is necessary after a cast
#7609: FILE: drivers/staging/et131x/et1310_rx.c:609:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#7609: FILE: drivers/staging/et131x/et1310_rx.c:609:
+	rx_ring = (RX_RING_t *) & adapter->RxRing;
 	                        ^

CHECK:SPACING: No space is necessary after a cast
#7613: FILE: drivers/staging/et131x/et1310_rx.c:613:
+		pMpRfd = (MP_RFD *) kmem_cache_alloc(rx_ring->RecvLookaside,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7639: FILE: drivers/staging/et131x/et1310_rx.c:639:
+	if (TotalNumRfd > NIC_MIN_NUM_RFD) {
+		status = 0;
+	}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'et131x_init_recv', this function's name, in a string
#7648: FILE: drivers/staging/et131x/et1310_rx.c:648:
+			  "Allocation problems in et131x_init_recv\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#7664: FILE: drivers/staging/et131x/et1310_rx.c:664:
+	pMpRfd->Packet = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRxDmaRegs>
#7684: FILE: drivers/staging/et131x/et1310_rx.c:684:
+void ConfigRxDmaRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pRxDma>
#7686: FILE: drivers/staging/et131x/et1310_rx.c:686:
+	struct _RXDMA_t __iomem *pRxDma = &pAdapter->CSRAddress->rxdma;

CHECK:CAMELCASE: Avoid CamelCase: <pRxLocal>
#7687: FILE: drivers/staging/et131x/et1310_rx.c:687:
+	struct _rx_ring_t *pRxLocal = &pAdapter->RxRing;

CHECK:CAMELCASE: Avoid CamelCase: <pFbrEntry>
#7688: FILE: drivers/staging/et131x/et1310_rx.c:688:
+	PFBR_DESC_t pFbrEntry;

CHECK:CAMELCASE: Avoid CamelCase: <iEntry>
#7689: FILE: drivers/staging/et131x/et1310_rx.c:689:
+	uint32_t iEntry;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7689: FILE: drivers/staging/et131x/et1310_rx.c:689:
+	uint32_t iEntry;

CHECK:SPACING: No space is necessary after a cast
#7705: FILE: drivers/staging/et131x/et1310_rx.c:705:
+	writel((uint32_t) (pRxLocal->RxStatusRealPA >> 32),

CHECK:SPACING: No space is necessary after a cast
#7707: FILE: drivers/staging/et131x/et1310_rx.c:707:
+	writel((uint32_t) pRxLocal->RxStatusRealPA, &pRxDma->dma_wb_base_lo);

CHECK:SPACING: No space is necessary after a cast
#7714: FILE: drivers/staging/et131x/et1310_rx.c:714:
+	writel((uint32_t) (pRxLocal->pPSRingRealPa >> 32),

CHECK:SPACING: No space is necessary after a cast
#7716: FILE: drivers/staging/et131x/et1310_rx.c:716:
+	writel((uint32_t) pRxLocal->pPSRingRealPa, &pRxDma->psr_base_lo);

CHECK:CAMELCASE: Avoid CamelCase: <RcvLock>
#7724: FILE: drivers/staging/et131x/et1310_rx.c:724:
+	spin_lock_irqsave(&pAdapter->RcvLock, lockflags);

CHECK:SPACING: No space is necessary after a cast
#7731: FILE: drivers/staging/et131x/et1310_rx.c:731:
+	pFbrEntry = (PFBR_DESC_t) pRxLocal->pFbr1RingVa;

CHECK:SPACING: No space is necessary after a cast
#7742: FILE: drivers/staging/et131x/et1310_rx.c:742:
+	writel((uint32_t) (pRxLocal->Fbr1Realpa >> 32), &pRxDma->fbr1_base_hi);

CHECK:SPACING: No space is necessary after a cast
#7743: FILE: drivers/staging/et131x/et1310_rx.c:743:
+	writel((uint32_t) pRxLocal->Fbr1Realpa, &pRxDma->fbr1_base_lo);

CHECK:CAMELCASE: Avoid CamelCase: <local_Fbr1_full>
#7757: FILE: drivers/staging/et131x/et1310_rx.c:757:
+	pRxLocal->local_Fbr1_full.bits.val = 0;

CHECK:SPACING: No space is necessary after a cast
#7764: FILE: drivers/staging/et131x/et1310_rx.c:764:
+	pFbrEntry = (PFBR_DESC_t) pRxLocal->pFbr0RingVa;

CHECK:SPACING: No space is necessary after a cast
#7772: FILE: drivers/staging/et131x/et1310_rx.c:772:
+	writel((uint32_t) (pRxLocal->Fbr0Realpa >> 32), &pRxDma->fbr0_base_hi);

CHECK:SPACING: No space is necessary after a cast
#7773: FILE: drivers/staging/et131x/et1310_rx.c:773:
+	writel((uint32_t) pRxLocal->Fbr0Realpa, &pRxDma->fbr0_base_lo);

CHECK:CAMELCASE: Avoid CamelCase: <local_Fbr0_full>
#7787: FILE: drivers/staging/et131x/et1310_rx.c:787:
+	pRxLocal->local_Fbr0_full.bits.val = 0;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryRxNumBuffers>
#7798: FILE: drivers/staging/et131x/et1310_rx.c:798:
+	writel(pAdapter->RegistryRxNumBuffers, &pRxDma->num_pkt_done.value);

CHECK:CAMELCASE: Avoid CamelCase: <RegistryRxTimeInterval>
#7805: FILE: drivers/staging/et131x/et1310_rx.c:805:
+	writel(pAdapter->RegistryRxTimeInterval, &pRxDma->max_pkt_time.value);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->uiLinkSpeed == TRUEPHY_SPEED_100MBPS'
#7821: FILE: drivers/staging/et131x/et1310_rx.c:821:
+	if ((pAdapter->uiLinkSpeed == TRUEPHY_SPEED_100MBPS) ||
+	    (pAdapter->uiLinkSpeed == TRUEPHY_SPEED_10MBPS)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->uiLinkSpeed == TRUEPHY_SPEED_10MBPS'
#7821: FILE: drivers/staging/et131x/et1310_rx.c:821:
+	if ((pAdapter->uiLinkSpeed == TRUEPHY_SPEED_100MBPS) ||
+	    (pAdapter->uiLinkSpeed == TRUEPHY_SPEED_10MBPS)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#7870: FILE: drivers/staging/et131x/et1310_rx.c:870:
+		if (pAdapter->RxRing.Fbr1BufferSize == 4096) {
[...]
+		} else if (pAdapter->RxRing.Fbr1BufferSize == 8192) {
[...]
+		} else if (pAdapter->RxRing.Fbr1BufferSize == 16384) {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#7879: FILE: drivers/staging/et131x/et1310_rx.c:879:
+		if (pAdapter->RxRing.Fbr0BufferSize == 256) {
[...]
+		} else if (pAdapter->RxRing.Fbr0BufferSize == 512) {
[...]
+		} else if (pAdapter->RxRing.Fbr0BufferSize == 1024) {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <pRxStatusBlock>
#7918: FILE: drivers/staging/et131x/et1310_rx.c:918:
+	PRX_STATUS_BLOCK_t pRxStatusBlock;

CHECK:CAMELCASE: Avoid CamelCase: <pPSREntry>
#7919: FILE: drivers/staging/et131x/et1310_rx.c:919:
+	PPKT_STAT_DESC_t pPSREntry;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7921: FILE: drivers/staging/et131x/et1310_rx.c:921:
+	uint32_t nIndex;

CHECK:CAMELCASE: Avoid CamelCase: <pBufVa>
#7922: FILE: drivers/staging/et131x/et1310_rx.c:922:
+	uint8_t *pBufVa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#7922: FILE: drivers/staging/et131x/et1310_rx.c:922:
+	uint8_t *pBufVa;

CHECK:CAMELCASE: Avoid CamelCase: <ringIndex>
#7925: FILE: drivers/staging/et131x/et1310_rx.c:925:
+	uint8_t ringIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#7925: FILE: drivers/staging/et131x/et1310_rx.c:925:
+	uint8_t ringIndex;

CHECK:CAMELCASE: Avoid CamelCase: <bufferIndex>
#7926: FILE: drivers/staging/et131x/et1310_rx.c:926:
+	uint16_t bufferIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#7926: FILE: drivers/staging/et131x/et1310_rx.c:926:
+	uint16_t bufferIndex;

CHECK:CAMELCASE: Avoid CamelCase: <localLen>
#7927: FILE: drivers/staging/et131x/et1310_rx.c:927:
+	uint32_t localLen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7927: FILE: drivers/staging/et131x/et1310_rx.c:927:
+	uint32_t localLen;

CHECK:CAMELCASE: Avoid CamelCase: <Word0>
#7928: FILE: drivers/staging/et131x/et1310_rx.c:928:
+	PKT_STAT_DESC_WORD0_t Word0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7930: FILE: drivers/staging/et131x/et1310_rx.c:930:
+
+

CHECK:SPACING: No space is necessary after a cast
#7937: FILE: drivers/staging/et131x/et1310_rx.c:937:
+	pRxStatusBlock = (PRX_STATUS_BLOCK_t) pRxLocal->pRxStatusVa;

CHECK:CAMELCASE: Avoid CamelCase: <Word1>
#7939: FILE: drivers/staging/et131x/et1310_rx.c:939:
+	if (pRxStatusBlock->Word1.bits.PSRoffset ==

CHECK:CAMELCASE: Avoid CamelCase: <PSRoffset>
#7939: FILE: drivers/staging/et131x/et1310_rx.c:939:
+	if (pRxStatusBlock->Word1.bits.PSRoffset ==

CHECK:CAMELCASE: Avoid CamelCase: <PSRwrap>
#7941: FILE: drivers/staging/et131x/et1310_rx.c:941:
+	    pRxStatusBlock->Word1.bits.PSRwrap ==

ERROR:CODE_INDENT: code indent should use tabs where possible
#7942: FILE: drivers/staging/et131x/et1310_rx.c:942:
+^I    ^I^IpRxLocal->local_psr_full.bits.psr_full_wrap) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7942: FILE: drivers/staging/et131x/et1310_rx.c:942:
+^I    ^I^IpRxLocal->local_psr_full.bits.psr_full_wrap) {$

CHECK:SPACING: No space is necessary after a cast
#7950: FILE: drivers/staging/et131x/et1310_rx.c:950:
+	pPSREntry = (PPKT_STAT_DESC_t) (pRxLocal->pPSRingVa) +

CHECK:SPACING: No space is necessary after a cast
#7958: FILE: drivers/staging/et131x/et1310_rx.c:958:
+	ringIndex = (uint8_t) pPSREntry->word1.bits.ri;

CHECK:SPACING: No space is necessary after a cast
#7959: FILE: drivers/staging/et131x/et1310_rx.c:959:
+	bufferIndex = (uint16_t) pPSREntry->word1.bits.bi;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7968: FILE: drivers/staging/et131x/et1310_rx.c:968:
+#if 0

WARNING:SPLIT_STRING: quoted string split across lines
#7975: FILE: drivers/staging/et131x/et1310_rx.c:975:
+			  "NICRxPkts >> Alcatel Status Word error."
+			  "Value 0x%08x\n", pPSREntry->word0.value);

WARNING:SPLIT_STRING: quoted string split across lines
#7993: FILE: drivers/staging/et131x/et1310_rx.c:993:
+			  "NICRxPkts PSR Entry %d indicates "
+			  "Buffer Ring 0 in use\n",

WARNING:SPLIT_STRING: quoted string split across lines
#8014: FILE: drivers/staging/et131x/et1310_rx.c:1014:
+			  "NICRxPkts PSR Entry %d indicates "
+			  "length of %d and/or bad bi(%d)\n",

CHECK:SPACING: No space is necessary after a cast
#8026: FILE: drivers/staging/et131x/et1310_rx.c:1026:
+	pMpRfd = (PMP_RFD) list_entry(element, MP_RFD, list_node);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpRfd"
#8028: FILE: drivers/staging/et131x/et1310_rx.c:1028:
+	if (pMpRfd == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <iBufferIndex>
#8041: FILE: drivers/staging/et131x/et1310_rx.c:1041:
+	pMpRfd->iBufferIndex = bufferIndex;

CHECK:CAMELCASE: Avoid CamelCase: <iRingIndex>
#8042: FILE: drivers/staging/et131x/et1310_rx.c:1042:
+	pMpRfd->iRingIndex = ringIndex;

CHECK:CAMELCASE: Avoid CamelCase: <ReplicaPhyLoopbk>
#8055: FILE: drivers/staging/et131x/et1310_rx.c:1055:
+		if (pAdapter->ReplicaPhyLoopbk == 1) {

CHECK:CAMELCASE: Avoid CamelCase: <ReplicaPhyLoopbkPF>
#8062: FILE: drivers/staging/et131x/et1310_rx.c:1062:
+					pAdapter->ReplicaPhyLoopbkPF = 1;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8091: FILE: drivers/staging/et131x/et1310_rx.c:1091:
+			if ((pAdapter->PacketFilter & ET131X_PACKET_TYPE_MULTICAST)
+			    && !(pAdapter->PacketFilter & ET131X_PACKET_TYPE_PROMISCUOUS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8092: FILE: drivers/staging/et131x/et1310_rx.c:1092:
+			    && !(pAdapter->PacketFilter & ET131X_PACKET_TYPE_PROMISCUOUS)
+			    && !(pAdapter->PacketFilter & ET131X_PACKET_TYPE_ALL_MULTICAST)) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pRxLocal->Fbr[ringIndex]->Va[bufferIndex]'
#8094: FILE: drivers/staging/et131x/et1310_rx.c:1094:
+				pBufVa = pRxLocal->Fbr[ringIndex]->
+						Va[bufferIndex];

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8105: FILE: drivers/staging/et131x/et1310_rx.c:1105:
+					    pAdapter->MCList[nIndex][0]
+					    && pBufVa[1] ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8107: FILE: drivers/staging/et131x/et1310_rx.c:1107:
+					    pAdapter->MCList[nIndex][1]
+					    && pBufVa[2] ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8109: FILE: drivers/staging/et131x/et1310_rx.c:1109:
+					    pAdapter->MCList[nIndex][2]
+					    && pBufVa[3] ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8111: FILE: drivers/staging/et131x/et1310_rx.c:1111:
+					    pAdapter->MCList[nIndex][3]
+					    && pBufVa[4] ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8113: FILE: drivers/staging/et131x/et1310_rx.c:1113:
+					    pAdapter->MCList[nIndex][4]
+					    && pBufVa[5] ==

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8127: FILE: drivers/staging/et131x/et1310_rx.c:1127:
+				if (nIndex == pAdapter->MCAddressCount) {
+					localLen = 0;
+				}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8132: FILE: drivers/staging/et131x/et1310_rx.c:1132:
+			if (localLen > 0) {
+				pAdapter->Stats.multircv++;
+			}

CHECK:CAMELCASE: Avoid CamelCase: <PacketSize>
#8151: FILE: drivers/staging/et131x/et1310_rx.c:1151:
+		pMpRfd->PacketSize = localLen;

CHECK:SPACING: No space is necessary after a cast
#8204: FILE: drivers/staging/et131x/et1310_rx.c:1204:
+		pMpRfd = (PMP_RFD) list_entry(element, MP_RFD, list_node);

CHECK:CAMELCASE: Avoid CamelCase: <PacketArray>
#8222: FILE: drivers/staging/et131x/et1310_rx.c:1222:
+	struct sk_buff *PacketArray[NUM_PACKETS_HANDLED];

CHECK:CAMELCASE: Avoid CamelCase: <RFDFreeArray>
#8223: FILE: drivers/staging/et131x/et1310_rx.c:1223:
+	PMP_RFD RFDFreeArray[NUM_PACKETS_HANDLED];

CHECK:CAMELCASE: Avoid CamelCase: <PacketArrayCount>
#8224: FILE: drivers/staging/et131x/et1310_rx.c:1224:
+	uint32_t PacketArrayCount = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8224: FILE: drivers/staging/et131x/et1310_rx.c:1224:
+	uint32_t PacketArrayCount = 0;

CHECK:CAMELCASE: Avoid CamelCase: <PacketsToHandle>
#8225: FILE: drivers/staging/et131x/et1310_rx.c:1225:
+	uint32_t PacketsToHandle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8225: FILE: drivers/staging/et131x/et1310_rx.c:1225:
+	uint32_t PacketsToHandle;

CHECK:CAMELCASE: Avoid CamelCase: <PacketFreeCount>
#8226: FILE: drivers/staging/et131x/et1310_rx.c:1226:
+	uint32_t PacketFreeCount = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8226: FILE: drivers/staging/et131x/et1310_rx.c:1226:
+	uint32_t PacketFreeCount = 0;

CHECK:CAMELCASE: Avoid CamelCase: <TempUnfinishedRec>
#8227: FILE: drivers/staging/et131x/et1310_rx.c:1227:
+	bool TempUnfinishedRec = false;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8244: FILE: drivers/staging/et131x/et1310_rx.c:1244:
+		if (pMpRfd == NULL) {
+			break;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpRfd"
#8244: FILE: drivers/staging/et131x/et1310_rx.c:1244:
+		if (pMpRfd == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!pAdapter->PacketFilter'
#8254: FILE: drivers/staging/et131x/et1310_rx.c:1254:
+		if ((!pAdapter->PacketFilter) ||
+		    (pAdapter->PoMgmt.PowerState != NdisDeviceStateD0) ||
+		    (!MP_LINK_DETECTED(pAdapter)) ||
+		    (pMpRfd->PacketSize == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->PoMgmt.PowerState != NdisDeviceStateD0'
#8254: FILE: drivers/staging/et131x/et1310_rx.c:1254:
+		if ((!pAdapter->PacketFilter) ||
+		    (pAdapter->PoMgmt.PowerState != NdisDeviceStateD0) ||
+		    (!MP_LINK_DETECTED(pAdapter)) ||
+		    (pMpRfd->PacketSize == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pMpRfd->PacketSize == 0'
#8254: FILE: drivers/staging/et131x/et1310_rx.c:1254:
+		if ((!pAdapter->PacketFilter) ||
+		    (pAdapter->PoMgmt.PowerState != NdisDeviceStateD0) ||
+		    (!MP_LINK_DETECTED(pAdapter)) ||
+		    (pMpRfd->PacketSize == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'PacketArrayCount == NUM_PACKETS_HANDLED'
#8292: FILE: drivers/staging/et131x/et1310_rx.c:1292:
+	if ((PacketArrayCount == NUM_PACKETS_HANDLED) || TempUnfinishedRec) {

CHECK:CAMELCASE: Avoid CamelCase: <UnfinishedReceives>
#8293: FILE: drivers/staging/et131x/et1310_rx.c:1293:
+		pAdapter->RxRing.UnfinishedReceives = true;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryTxTimeInterval>
#8294: FILE: drivers/staging/et131x/et1310_rx.c:1294:
+		writel(pAdapter->RegistryTxTimeInterval * NANO_IN_A_MICRO,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#8313: FILE: drivers/staging/et131x/et1310_rx.c:1313:
+	uint16_t bi = pMpRfd->iBufferIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#8314: FILE: drivers/staging/et131x/et1310_rx.c:1314:
+	uint8_t ri = pMpRfd->iRingIndex;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8322: FILE: drivers/staging/et131x/et1310_rx.c:1322:
+	if (

CHECK:CAMELCASE: Avoid CamelCase: <FbrLock>
#8327: FILE: drivers/staging/et131x/et1310_rx.c:1327:
+		spin_lock_irqsave(&pAdapter->FbrLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <pNextDesc>
#8330: FILE: drivers/staging/et131x/et1310_rx.c:1330:
+			PFBR_DESC_t pNextDesc =

CHECK:SPACING: No space is necessary after a cast
#8331: FILE: drivers/staging/et131x/et1310_rx.c:1331:
+			    (PFBR_DESC_t) (pRxLocal->pFbr1RingVa) +

CHECK:BRACES: Unbalanced braces around else statement
#8352: FILE: drivers/staging/et131x/et1310_rx.c:1352:
+		else {

CHECK:SPACING: No space is necessary after a cast
#8354: FILE: drivers/staging/et131x/et1310_rx.c:1354:
+			    (PFBR_DESC_t) pRxLocal->pFbr0RingVa +

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8398: FILE: drivers/staging/et131x/et1310_rx.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#8402: FILE: drivers/staging/et131x/et1310_rx.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#8420: FILE: drivers/staging/et131x/et1310_rx.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#8441: FILE: drivers/staging/et131x/et1310_rx.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8491: FILE: drivers/staging/et131x/et1310_rx.h:94:
+typedef union _FBR_WORD2_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8504: FILE: drivers/staging/et131x/et1310_rx.h:107:
+typedef struct _FBR_DESC_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8511: FILE: drivers/staging/et131x/et1310_rx.h:114:
+typedef union _PKT_STAT_DESC_WORD0_t {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#8517: FILE: drivers/staging/et131x/et1310_rx.h:120:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#8577: FILE: drivers/staging/et131x/et1310_rx.h:180:
+#if 0

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8584: FILE: drivers/staging/et131x/et1310_rx.h:187:
+typedef union _PKT_STAT_DESC_WORD1_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8601: FILE: drivers/staging/et131x/et1310_rx.h:204:
+typedef struct _PKT_STAT_DESC_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8613: FILE: drivers/staging/et131x/et1310_rx.h:216:
+typedef union _rxstat_word0_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8639: FILE: drivers/staging/et131x/et1310_rx.h:242:
+typedef union _rxstat_word1_t {

CHECK:CAMELCASE: Avoid CamelCase: <PSRunused>
#8643: FILE: drivers/staging/et131x/et1310_rx.h:246:
+		u32 PSRunused:3;	// bits 29-31

WARNING:TYPO_SPELLING: 'sructure' may be misspelled - perhaps 'structure'?
#8657: FILE: drivers/staging/et131x/et1310_rx.h:260:
+ * RX_STATUS_BLOCK_t is sructure representing the status of the Rx DMA engine
                         ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8660: FILE: drivers/staging/et131x/et1310_rx.h:263:
+typedef struct _rx_status_block_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8668: FILE: drivers/staging/et131x/et1310_rx.h:271:
+typedef struct _FbrLookupTable {

CHECK:CAMELCASE: Avoid CamelCase: <_FbrLookupTable>
#8668: FILE: drivers/staging/et131x/et1310_rx.h:271:
+typedef struct _FbrLookupTable {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8676: FILE: drivers/staging/et131x/et1310_rx.h:279:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <eRX_INTERRUPT_STATE_t>
#8679: FILE: drivers/staging/et131x/et1310_rx.h:282:
+} eRX_INTERRUPT_STATE_t, *PeRX_INTERRUPT_STATE_t;

CHECK:CAMELCASE: Avoid CamelCase: <PeRX_INTERRUPT_STATE_t>
#8679: FILE: drivers/staging/et131x/et1310_rx.h:282:
+} eRX_INTERRUPT_STATE_t, *PeRX_INTERRUPT_STATE_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8684: FILE: drivers/staging/et131x/et1310_rx.h:287:
+typedef struct rx_skb_list_elem {

WARNING:TYPO_SPELLING: 'sructure' may be misspelled - perhaps 'structure'?
#8691: FILE: drivers/staging/et131x/et1310_rx.h:294:
+ * RX_RING_t is sructure representing the adaptor's local reference(s) to the
                 ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8694: FILE: drivers/staging/et131x/et1310_rx.h:297:
+typedef struct _rx_ring_t {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8700: FILE: drivers/staging/et131x/et1310_rx.h:303:
+	uint64_t Fbr0Realpa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8701: FILE: drivers/staging/et131x/et1310_rx.h:304:
+	uint64_t Fbr0offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8710: FILE: drivers/staging/et131x/et1310_rx.h:313:
+	uint64_t Fbr1Realpa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8711: FILE: drivers/staging/et131x/et1310_rx.h:314:
+	uint64_t Fbr1offset;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#8712: FILE: drivers/staging/et131x/et1310_rx.h:315:
+	FBRLOOKUPTABLE *Fbr[2];
 	               ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8719: FILE: drivers/staging/et131x/et1310_rx.h:322:
+	uint64_t pPSRingRealPa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8720: FILE: drivers/staging/et131x/et1310_rx.h:323:
+	uint64_t pPSRingOffset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8726: FILE: drivers/staging/et131x/et1310_rx.h:329:
+	uint64_t RxStatusRealPA;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8727: FILE: drivers/staging/et131x/et1310_rx.h:330:
+	uint64_t RxStatusOffset;

CHECK:CAMELCASE: Avoid CamelCase: <RecvBufferPool>
#8729: FILE: drivers/staging/et131x/et1310_rx.h:332:
+	struct list_head RecvBufferPool;

CHECK:CAMELCASE: Avoid CamelCase: <RecvPacketPool>
#8740: FILE: drivers/staging/et131x/et1310_rx.h:343:
+	struct list_head RecvPacketPool;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8777: FILE: drivers/staging/et131x/et1310_tx.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#8781: FILE: drivers/staging/et131x/et1310_tx.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#8798: FILE: drivers/staging/et131x/et1310_tx.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#8819: FILE: drivers/staging/et131x/et1310_tx.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#8853: FILE: drivers/staging/et131x/et1310_tx.c:77:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#8855: FILE: drivers/staging/et131x/et1310_tx.c:79:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <pMpTcb>
#8881: FILE: drivers/staging/et131x/et1310_tx.c:105:
+					   PMP_TCB pMpTcb);

CHECK:CAMELCASE: Avoid CamelCase: <TxRing>
#8901: FILE: drivers/staging/et131x/et1310_tx.c:125:
+	TX_RING_t *tx_ring = &adapter->TxRing;

CHECK:CAMELCASE: Avoid CamelCase: <MpTcbMem>
#8906: FILE: drivers/staging/et131x/et1310_tx.c:130:
+	adapter->TxRing.MpTcbMem = (MP_TCB *) kcalloc(NUM_TCB, sizeof(MP_TCB),

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#8906: FILE: drivers/staging/et131x/et1310_tx.c:130:
+	adapter->TxRing.MpTcbMem = (MP_TCB *) kcalloc(NUM_TCB, sizeof(MP_TCB),

CHECK:CAMELCASE: Avoid CamelCase: <pTxDescRingVa>
#8918: FILE: drivers/staging/et131x/et1310_tx.c:142:
+	tx_ring->pTxDescRingVa =

CHECK:SPACING: No space is necessary after a cast
#8919: FILE: drivers/staging/et131x/et1310_tx.c:143:
+	    (PTX_DESC_ENTRY_t) pci_alloc_consistent(adapter->pdev, desc_size,

CHECK:CAMELCASE: Avoid CamelCase: <pTxDescRingPa>
#8920: FILE: drivers/staging/et131x/et1310_tx.c:144:
+						    &tx_ring->pTxDescRingPa);

CHECK:CAMELCASE: Avoid CamelCase: <pTxDescRingAdjustedPa>
#8934: FILE: drivers/staging/et131x/et1310_tx.c:158:
+	tx_ring->pTxDescRingAdjustedPa = tx_ring->pTxDescRingPa;

CHECK:CAMELCASE: Avoid CamelCase: <TxDescOffset>
#8939: FILE: drivers/staging/et131x/et1310_tx.c:163:
+				      &tx_ring->TxDescOffset, 0x0FFF);

CHECK:CAMELCASE: Avoid CamelCase: <pTxStatusVa>
#8944: FILE: drivers/staging/et131x/et1310_tx.c:168:
+	tx_ring->pTxStatusVa = pci_alloc_consistent(adapter->pdev,

CHECK:CAMELCASE: Avoid CamelCase: <pTxStatusPa>
#8946: FILE: drivers/staging/et131x/et1310_tx.c:170:
+						    &tx_ring->pTxStatusPa);

CHECK:CAMELCASE: Avoid CamelCase: <pTxDummyBlkVa>
#8955: FILE: drivers/staging/et131x/et1310_tx.c:179:
+	tx_ring->pTxDummyBlkVa = pci_alloc_consistent(adapter->pdev,

CHECK:CAMELCASE: Avoid CamelCase: <pTxDummyBlkPa>
#8957: FILE: drivers/staging/et131x/et1310_tx.c:181:
+						      &tx_ring->pTxDummyBlkPa);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#9018: FILE: drivers/staging/et131x/et1310_tx.c:242:
+	if (adapter->TxRing.MpTcbMem) {
+		kfree(adapter->TxRing.MpTcbMem);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigTxDmaRegs>
#9029: FILE: drivers/staging/et131x/et1310_tx.c:253:
+void ConfigTxDmaRegs(struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <pTxDma>
#9031: FILE: drivers/staging/et131x/et1310_tx.c:255:
+	struct _TXDMA_t __iomem *pTxDma = &pAdapter->CSRAddress->txdma;

CHECK:SPACING: No space is necessary after a cast
#9036: FILE: drivers/staging/et131x/et1310_tx.c:260:
+	writel((uint32_t) (pAdapter->TxRing.pTxDescRingAdjustedPa >> 32),

CHECK:SPACING: No space is necessary after a cast
#9038: FILE: drivers/staging/et131x/et1310_tx.c:262:
+	writel((uint32_t) pAdapter->TxRing.pTxDescRingAdjustedPa,

CHECK:CAMELCASE: Avoid CamelCase: <txDmaReadyToSend>
#9057: FILE: drivers/staging/et131x/et1310_tx.c:281:
+	pAdapter->TxRing.txDmaReadyToSend.value = 0;

WARNING:TYPO_SPELLING: 'tramsmit' may be misspelled - perhaps 'transmit'?
#9070: FILE: drivers/staging/et131x/et1310_tx.c:294:
+	/* Setup the tramsmit dma configuration register */
 	             ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <RegistryDMACache>
#9097: FILE: drivers/staging/et131x/et1310_tx.c:321:
+		csr.bits.cache_thrshld = pAdapter->RegistryDMACache;

CHECK:CAMELCASE: Avoid CamelCase: <TcbCount>
#9111: FILE: drivers/staging/et131x/et1310_tx.c:335:
+	uint32_t TcbCount;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9111: FILE: drivers/staging/et131x/et1310_tx.c:335:
+	uint32_t TcbCount;

CHECK:CAMELCASE: Avoid CamelCase: <TCBReadyQueueHead>
#9120: FILE: drivers/staging/et131x/et1310_tx.c:344:
+	tx_ring->TCBReadyQueueHead = pMpTcb;

CHECK:CAMELCASE: Avoid CamelCase: <Next>
#9131: FILE: drivers/staging/et131x/et1310_tx.c:355:
+			pMpTcb->Next = pMpTcb + 1;

CHECK:CAMELCASE: Avoid CamelCase: <TCBReadyQueueTail>
#9133: FILE: drivers/staging/et131x/et1310_tx.c:357:
+			tx_ring->TCBReadyQueueTail = pMpTcb;

CHECK:SPACING: No space is necessary after a cast
#9134: FILE: drivers/staging/et131x/et1310_tx.c:358:
+			pMpTcb->Next = (PMP_TCB) NULL;

CHECK:SPACING: No space is necessary after a cast
#9141: FILE: drivers/staging/et131x/et1310_tx.c:365:
+	tx_ring->CurrSendHead = (PMP_TCB) NULL;

CHECK:CAMELCASE: Avoid CamelCase: <CurrSendHead>
#9141: FILE: drivers/staging/et131x/et1310_tx.c:365:
+	tx_ring->CurrSendHead = (PMP_TCB) NULL;

CHECK:SPACING: No space is necessary after a cast
#9142: FILE: drivers/staging/et131x/et1310_tx.c:366:
+	tx_ring->CurrSendTail = (PMP_TCB) NULL;

CHECK:CAMELCASE: Avoid CamelCase: <CurrSendTail>
#9142: FILE: drivers/staging/et131x/et1310_tx.c:366:
+	tx_ring->CurrSendTail = (PMP_TCB) NULL;

CHECK:CAMELCASE: Avoid CamelCase: <SendWaitQueue>
#9144: FILE: drivers/staging/et131x/et1310_tx.c:368:
+	INIT_LIST_HEAD(&adapter->TxRing.SendWaitQueue);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#9186: FILE: drivers/staging/et131x/et1310_tx.c:410:
+		if (MP_SHOULD_FAIL_SEND(pAdapter) || pAdapter->DriverNoPhyAccess
+		    || !netif_carrier_ok(netdev)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#9198: FILE: drivers/staging/et131x/et1310_tx.c:422:
+			if (status == -ENOMEM) {
+

CHECK:CAMELCASE: Avoid CamelCase: <pShBufVa>
#9239: FILE: drivers/staging/et131x/et1310_tx.c:463:
+	uint16_t *pShBufVa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#9239: FILE: drivers/staging/et131x/et1310_tx.c:463:
+	uint16_t *pShBufVa;

CHECK:CAMELCASE: Avoid CamelCase: <TCBReadyQLock>
#9261: FILE: drivers/staging/et131x/et1310_tx.c:485:
+	spin_lock_irqsave(&pAdapter->TCBReadyQLock, lockflags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpTcb"
#9265: FILE: drivers/staging/et131x/et1310_tx.c:489:
+	if (pMpTcb == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#9275: FILE: drivers/staging/et131x/et1310_tx.c:499:
+	if (pAdapter->TxRing.TCBReadyQueueHead == NULL) {
+		pAdapter->TxRing.TCBReadyQueueTail = NULL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pAdapter->TxRing.TCBReadyQueueHead"
#9275: FILE: drivers/staging/et131x/et1310_tx.c:499:
+	if (pAdapter->TxRing.TCBReadyQueueHead == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <PacketLength>
#9281: FILE: drivers/staging/et131x/et1310_tx.c:505:
+	pMpTcb->PacketLength = skb->len;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->data != NULL'
#9284: FILE: drivers/staging/et131x/et1310_tx.c:508:
+	if ((skb->data != NULL) && ((skb->len - skb->data_len) >= 6)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb->data"
#9284: FILE: drivers/staging/et131x/et1310_tx.c:508:
+	if ((skb->data != NULL) && ((skb->len - skb->data_len) >= 6)) {

CHECK:SPACING: No space is necessary after a cast
#9285: FILE: drivers/staging/et131x/et1310_tx.c:509:
+		pShBufVa = (uint16_t *) skb->data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pShBufVa[0] == 0xffff'
#9287: FILE: drivers/staging/et131x/et1310_tx.c:511:
+		if ((pShBufVa[0] == 0xffff) &&
+		    (pShBufVa[1] == 0xffff) && (pShBufVa[2] == 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pShBufVa[1] == 0xffff'
#9287: FILE: drivers/staging/et131x/et1310_tx.c:511:
+		if ((pShBufVa[0] == 0xffff) &&
+		    (pShBufVa[1] == 0xffff) && (pShBufVa[2] == 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pShBufVa[2] == 0xffff'
#9287: FILE: drivers/staging/et131x/et1310_tx.c:511:
+		if ((pShBufVa[0] == 0xffff) &&
+		    (pShBufVa[1] == 0xffff) && (pShBufVa[2] == 0xffff)) {

CHECK:CAMELCASE: Avoid CamelCase: <fMP_DEST_BROAD>
#9289: FILE: drivers/staging/et131x/et1310_tx.c:513:
+			MP_SET_FLAG(pMpTcb, fMP_DEST_BROAD);

CHECK:CAMELCASE: Avoid CamelCase: <fMP_DEST_MULTI>
#9291: FILE: drivers/staging/et131x/et1310_tx.c:515:
+			MP_SET_FLAG(pMpTcb, fMP_DEST_MULTI);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#9298: FILE: drivers/staging/et131x/et1310_tx.c:522:
+	if (status == 0) {
+		status = nic_send_packet(pAdapter, pMpTcb);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <nBusySend>
#9320: FILE: drivers/staging/et131x/et1310_tx.c:544:
+	DBG_ASSERT(pAdapter->TxRing.nBusySend <= NUM_TCB);

CHECK:CAMELCASE: Avoid CamelCase: <loopIndex>
#9335: FILE: drivers/staging/et131x/et1310_tx.c:559:
+	uint32_t loopIndex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9335: FILE: drivers/staging/et131x/et1310_tx.c:559:
+	uint32_t loopIndex;

CHECK:CAMELCASE: Avoid CamelCase: <CurDesc>
#9336: FILE: drivers/staging/et131x/et1310_tx.c:560:
+	TX_DESC_ENTRY_t CurDesc[24];

CHECK:CAMELCASE: Avoid CamelCase: <FragmentNumber>
#9337: FILE: drivers/staging/et131x/et1310_tx.c:561:
+	uint32_t FragmentNumber = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9337: FILE: drivers/staging/et131x/et1310_tx.c:561:
+	uint32_t FragmentNumber = 0;

CHECK:CAMELCASE: Avoid CamelCase: <iThisCopy>
#9338: FILE: drivers/staging/et131x/et1310_tx.c:562:
+	uint32_t iThisCopy, iRemainder;

CHECK:CAMELCASE: Avoid CamelCase: <iRemainder>
#9338: FILE: drivers/staging/et131x/et1310_tx.c:562:
+	uint32_t iThisCopy, iRemainder;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9338: FILE: drivers/staging/et131x/et1310_tx.c:562:
+	uint32_t iThisCopy, iRemainder;

CHECK:CAMELCASE: Avoid CamelCase: <pPacket>
#9339: FILE: drivers/staging/et131x/et1310_tx.c:563:
+	struct sk_buff *pPacket = pMpTcb->Packet;

CHECK:CAMELCASE: Avoid CamelCase: <FragListCount>
#9340: FILE: drivers/staging/et131x/et1310_tx.c:564:
+	uint32_t FragListCount = skb_shinfo(pPacket)->nr_frags + 1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9340: FILE: drivers/staging/et131x/et1310_tx.c:564:
+	uint32_t FragListCount = skb_shinfo(pPacket)->nr_frags + 1;

CHECK:CAMELCASE: Avoid CamelCase: <pFragList>
#9341: FILE: drivers/staging/et131x/et1310_tx.c:565:
+	struct skb_frag_struct *pFragList = &skb_shinfo(pPacket)->frags[0];

WARNING:SPLIT_STRING: quoted string split across lines
#9378: FILE: drivers/staging/et131x/et1310_tx.c:602:
+				       "Got packet of length %d, "
+				       "filling desc entry %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#9379: FILE: drivers/staging/et131x/et1310_tx.c:603:
+				       "filling desc entry %d, "
+				       "TCB: 0x%p\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.txDmaReadyToSend.bits.val'
#9382: FILE: drivers/staging/et131x/et1310_tx.c:606:
+				       pAdapter->TxRing.txDmaReadyToSend.bits.
+				       val, pMpTcb);

CHECK:CAMELCASE: Avoid CamelCase: <DataBufferPtrHigh>
#9384: FILE: drivers/staging/et131x/et1310_tx.c:608:
+				CurDesc[FragmentNumber].DataBufferPtrHigh = 0;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc[FragmentNumber].word2.bits.length_in_bytes'
#9387: FILE: drivers/staging/et131x/et1310_tx.c:611:
+				CurDesc[FragmentNumber].word2.bits.
+				    length_in_bytes =

CHECK:CAMELCASE: Avoid CamelCase: <DataBufferPtrLow>
#9398: FILE: drivers/staging/et131x/et1310_tx.c:622:
+				CurDesc[FragmentNumber++].DataBufferPtrLow =

WARNING:SPLIT_STRING: quoted string split across lines
#9407: FILE: drivers/staging/et131x/et1310_tx.c:631:
+				       "Got packet of length %d, "
+				       "filling desc entry %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#9408: FILE: drivers/staging/et131x/et1310_tx.c:632:
+				       "filling desc entry %d, "
+				       "TCB: 0x%p\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.txDmaReadyToSend.bits.val'
#9411: FILE: drivers/staging/et131x/et1310_tx.c:635:
+				       pAdapter->TxRing.txDmaReadyToSend.bits.
+				       val, pMpTcb);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc[FragmentNumber].word2.bits.length_in_bytes'
#9416: FILE: drivers/staging/et131x/et1310_tx.c:640:
+				CurDesc[FragmentNumber].word2.bits.
+				    length_in_bytes =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc[FragmentNumber].word2.bits.length_in_bytes'
#9436: FILE: drivers/staging/et131x/et1310_tx.c:660:
+				CurDesc[FragmentNumber].word2.bits.
+				    length_in_bytes =

WARNING:SPLIT_STRING: quoted string split across lines
#9459: FILE: drivers/staging/et131x/et1310_tx.c:683:
+			       "Got packet of length %d,"
+			       "filling desc entry %d\n"

CHECK:CAMELCASE: Avoid CamelCase: <TxPacketsSinceLastinterrupt>
#9491: FILE: drivers/staging/et131x/et1310_tx.c:715:
+		if (++pAdapter->TxRing.TxPacketsSinceLastinterrupt ==

CHECK:CAMELCASE: Avoid CamelCase: <RegistryTxNumBuffers>
#9492: FILE: drivers/staging/et131x/et1310_tx.c:716:
+		    pAdapter->RegistryTxNumBuffers) {

CHECK:CAMELCASE: Avoid CamelCase: <WrIndexStart>
#9504: FILE: drivers/staging/et131x/et1310_tx.c:728:
+	pMpTcb->WrIndexStart = pAdapter->TxRing.txDmaReadyToSend;

CHECK:CAMELCASE: Avoid CamelCase: <PacketStaleCount>
#9505: FILE: drivers/staging/et131x/et1310_tx.c:729:
+	pMpTcb->PacketStaleCount = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->TxRing.txDmaReadyToSend.bits.val == 0'
#9525: FILE: drivers/staging/et131x/et1310_tx.c:749:
+	if ((pAdapter->TxRing.txDmaReadyToSend.bits.val == 0) ||
+	    (pAdapter->TxRing.txDmaReadyToSend.bits.val ==
+	     NUM_DESC_PER_RING_TX)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->TxRing.txDmaReadyToSend.bits.val ==
 	     NUM_DESC_PER_RING_TX'
#9525: FILE: drivers/staging/et131x/et1310_tx.c:749:
+	if ((pAdapter->TxRing.txDmaReadyToSend.bits.val == 0) ||
+	    (pAdapter->TxRing.txDmaReadyToSend.bits.val ==
+	     NUM_DESC_PER_RING_TX)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#9528: FILE: drivers/staging/et131x/et1310_tx.c:752:
+		if (pAdapter->TxRing.txDmaReadyToSend.bits.wrap) {
[...]
+		} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <WrIndex>
#9545: FILE: drivers/staging/et131x/et1310_tx.c:769:
+			pMpTcb->WrIndex.value = NUM_DESC_PER_RING_TX - 1;

CHECK:CAMELCASE: Avoid CamelCase: <TCBSendQLock>
#9555: FILE: drivers/staging/et131x/et1310_tx.c:779:
+	spin_lock_irqsave(&pAdapter->TCBSendQLock, lockflags2);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#9557: FILE: drivers/staging/et131x/et1310_tx.c:781:
+	if (pAdapter->TxRing.CurrSendTail) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpTcb->Next"
#9565: FILE: drivers/staging/et131x/et1310_tx.c:789:
+	DBG_ASSERT(pMpTcb->Next == NULL);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#9593: FILE: drivers/staging/et131x/et1310_tx.c:817:
+#if 0

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#9600: FILE: drivers/staging/et131x/et1310_tx.c:824:
+ * Returns 0 on succes, errno on failure.
                 ^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <fragIndex>
#9607: FILE: drivers/staging/et131x/et1310_tx.c:831:
+	uint32_t loopIndex, fragIndex, loopEnd;

CHECK:CAMELCASE: Avoid CamelCase: <loopEnd>
#9607: FILE: drivers/staging/et131x/et1310_tx.c:831:
+	uint32_t loopIndex, fragIndex, loopEnd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9607: FILE: drivers/staging/et131x/et1310_tx.c:831:
+	uint32_t loopIndex, fragIndex, loopEnd;

CHECK:CAMELCASE: Avoid CamelCase: <iSplitFirstElement>
#9608: FILE: drivers/staging/et131x/et1310_tx.c:832:
+	uint32_t iSplitFirstElement = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9608: FILE: drivers/staging/et131x/et1310_tx.c:832:
+	uint32_t iSplitFirstElement = 0;

CHECK:CAMELCASE: Avoid CamelCase: <SegmentSize>
#9609: FILE: drivers/staging/et131x/et1310_tx.c:833:
+	uint32_t SegmentSize = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9609: FILE: drivers/staging/et131x/et1310_tx.c:833:
+	uint32_t SegmentSize = 0;

CHECK:CAMELCASE: Avoid CamelCase: <CurDescPostCopy>
#9611: FILE: drivers/staging/et131x/et1310_tx.c:835:
+	TX_DESC_ENTRY_t *CurDescPostCopy = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <SlotsAvailable>
#9612: FILE: drivers/staging/et131x/et1310_tx.c:836:
+	uint32_t SlotsAvailable;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9612: FILE: drivers/staging/et131x/et1310_tx.c:836:
+	uint32_t SlotsAvailable;

CHECK:CAMELCASE: Avoid CamelCase: <ServiceComplete>
#9613: FILE: drivers/staging/et131x/et1310_tx.c:837:
+	DMA10W_t ServiceComplete;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9616: FILE: drivers/staging/et131x/et1310_tx.c:840:
+	uint32_t FragListCount = skb_shinfo(pPacket)->nr_frags + 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->uiDuplexMode == 0'
#9641: FILE: drivers/staging/et131x/et1310_tx.c:865:
+	if ((pAdapter->uiDuplexMode == 0)
+	    && (pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE'
#9641: FILE: drivers/staging/et131x/et1310_tx.c:865:
+	if ((pAdapter->uiDuplexMode == 0)
+	    && (pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#9642: FILE: drivers/staging/et131x/et1310_tx.c:866:
+	if ((pAdapter->uiDuplexMode == 0)
+	    && (pMpTcb->PacketLength < NIC_MIN_PACKET_SIZE)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#9697: FILE: drivers/staging/et131x/et1310_tx.c:921:
+		if (loopIndex > iSplitFirstElement) {
+			fragIndex++;
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#9710: FILE: drivers/staging/et131x/et1310_tx.c:934:
+		       "Packet Length %d,"
+		       "filling desc entry %d\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc.word2.bits.length_in_bytes'
#9741: FILE: drivers/staging/et131x/et1310_tx.c:965:
+						CurDesc.word2.bits.
+						    length_in_bytes =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->pdev'
#9745: FILE: drivers/staging/et131x/et1310_tx.c:969:
+						    pci_map_single(pAdapter->
+								   pdev,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pPacket->data'
#9747: FILE: drivers/staging/et131x/et1310_tx.c:971:
+								   pPacket->
+								   data,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc.DataBufferPtrLow'
#9753: FILE: drivers/staging/et131x/et1310_tx.c:977:
+						       CurDesc.
+						       DataBufferPtrLow);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc.word2.bits.length_in_bytes'
#9767: FILE: drivers/staging/et131x/et1310_tx.c:991:
+						CurDesc.word2.bits.
+						    length_in_bytes =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->pdev'
#9773: FILE: drivers/staging/et131x/et1310_tx.c:997:
+						    pci_map_single(pAdapter->
+								   pdev,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pPacket->data'
#9775: FILE: drivers/staging/et131x/et1310_tx.c:999:
+								   (pPacket->
+								    data +

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pPacket->len'
#9778: FILE: drivers/staging/et131x/et1310_tx.c:1002:
+								   (pPacket->
+								    len -

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pPacket->data_len'
#9780: FILE: drivers/staging/et131x/et1310_tx.c:1004:
+								    pPacket->
+								    data_len -

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'CurDesc.DataBufferPtrLow'
#9786: FILE: drivers/staging/et131x/et1310_tx.c:1010:
+						       CurDesc.
+						       DataBufferPtrLow);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#9806: FILE: drivers/staging/et131x/et1310_tx.c:1030:
+			} else {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pMpTcb->PacketLength >= NIC_MIN_PACKET_SIZE'
#9835: FILE: drivers/staging/et131x/et1310_tx.c:1059:
+			if ((loopIndex == (loopEnd - 1)) &&
+			    (pAdapter->uiDuplexMode ||
+			     (pMpTcb->PacketLength >= NIC_MIN_PACKET_SIZE))) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.TxPacketsSinceLastinterrupt'
#9845: FILE: drivers/staging/et131x/et1310_tx.c:1069:
+					if (++pAdapter->TxRing.
+					    TxPacketsSinceLastinterrupt >=

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.TxPacketsSinceLastinterrupt'
#9849: FILE: drivers/staging/et131x/et1310_tx.c:1073:
+						pAdapter->TxRing.
+						    TxPacketsSinceLastinterrupt

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#9850: FILE: drivers/staging/et131x/et1310_tx.c:1074:
+						    TxPacketsSinceLastinterrupt
+						    = 0;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.txDmaReadyToSend.bits.serv_req_wrap'
#9894: FILE: drivers/staging/et131x/et1310_tx.c:1118:
+				if (pAdapter->TxRing.txDmaReadyToSend.bits.
+				    serv_req_wrap) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.txDmaReadyToSend.value'
#9896: FILE: drivers/staging/et131x/et1310_tx.c:1120:
+					pAdapter->TxRing.txDmaReadyToSend.
+					    value = 0;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.txDmaReadyToSend.value'
#9899: FILE: drivers/staging/et131x/et1310_tx.c:1123:
+					pAdapter->TxRing.txDmaReadyToSend.
+					    value = 0x400;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.txDmaReadyToSend.bits.serv_req_wrap'
#9954: FILE: drivers/staging/et131x/et1310_tx.c:1178:
+			if (pAdapter->TxRing.txDmaReadyToSend.bits.
+			    serv_req_wrap) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#9969: FILE: drivers/staging/et131x/et1310_tx.c:1193:
+	if (pAdapter->TxRing.CurrSendTail) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpTcb->Next"
#9977: FILE: drivers/staging/et131x/et1310_tx.c:1201:
+	DBG_ASSERT(pMpTcb->Next == NULL);

CHECK:CAMELCASE: Avoid CamelCase: <DumpDeviceBlock>
#9988: FILE: drivers/staging/et131x/et1310_tx.c:1212:
+	DumpDeviceBlock(DBG_TX_ON, pAdapter, 1);

WARNING:INLINE: plain inline is preferred over __inline
#10014: FILE: drivers/staging/et131x/et1310_tx.c:1238:
+__inline void et131x_free_send_packet(struct et131x_adapter *pAdapter, PMP_TCB pMpTcb)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#10020: FILE: drivers/staging/et131x/et1310_tx.c:1244:
+	if (MP_TEST_FLAG(pMpTcb, fMP_DEST_BROAD)) {
[...]
+	} else if (MP_TEST_FLAG(pMpTcb, fMP_DEST_MULTI)) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#10054: FILE: drivers/staging/et131x/et1310_tx.c:1278:
+			    (TX_DESC_ENTRY_t *) (pAdapter->TxRing.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pAdapter->TxRing.pTxDescRingVa'
#10055: FILE: drivers/staging/et131x/et1310_tx.c:1279:
+			    (TX_DESC_ENTRY_t *) (pAdapter->TxRing.
+						 pTxDescRingVa +

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#10077: FILE: drivers/staging/et131x/et1310_tx.c:1301:
+				if (pMpTcb->WrIndexStart.bits.wrap) {
[...]
+				} else {
[...]

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#10084: FILE: drivers/staging/et131x/et1310_tx.c:1308:
+		}
+		while (desc != (pAdapter->TxRing.pTxDescRingVa +

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <pEntry>
#10123: FILE: drivers/staging/et131x/et1310_tx.c:1347:
+	struct list_head *pEntry;

CHECK:CAMELCASE: Avoid CamelCase: <FreeCounter>
#10126: FILE: drivers/staging/et131x/et1310_tx.c:1350:
+	uint32_t FreeCounter = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#10126: FILE: drivers/staging/et131x/et1310_tx.c:1350:
+	uint32_t FreeCounter = 0;

CHECK:CAMELCASE: Avoid CamelCase: <SendWaitLock>
#10131: FILE: drivers/staging/et131x/et1310_tx.c:1355:
+		spin_lock_irqsave(&pAdapter->SendWaitLock, lockflags);

CHECK:CAMELCASE: Avoid CamelCase: <nWaitSend>
#10133: FILE: drivers/staging/et131x/et1310_tx.c:1357:
+		pAdapter->TxRing.nWaitSend--;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pMpTcb"
#10148: FILE: drivers/staging/et131x/et1310_tx.c:1372:
+	while ((pMpTcb != NULL) && (FreeCounter < NUM_TCB)) {

CHECK:CAMELCASE: Avoid CamelCase: <pNext>
#10149: FILE: drivers/staging/et131x/et1310_tx.c:1373:
+		PMP_TCB pNext = pMpTcb->Next;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#10153: FILE: drivers/staging/et131x/et1310_tx.c:1377:
+		if (pNext == NULL) {
+			pAdapter->TxRing.CurrSendTail = NULL;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pNext"
#10153: FILE: drivers/staging/et131x/et1310_tx.c:1377:
+		if (pNext == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#10174: FILE: drivers/staging/et131x/et1310_tx.c:1398:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#10236: FILE: drivers/staging/et131x/et1310_tx.c:1460:
+		if (pMpTcb->Next == NULL) {
+			pAdapter->TxRing.CurrSendTail = NULL;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpTcb->Next"
#10236: FILE: drivers/staging/et131x/et1310_tx.c:1460:
+		if (pMpTcb->Next == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#10252: FILE: drivers/staging/et131x/et1310_tx.c:1476:
+		if (pMpTcb->Next == NULL) {
+			pAdapter->TxRing.CurrSendTail = NULL;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpTcb->Next"
#10252: FILE: drivers/staging/et131x/et1310_tx.c:1476:
+		if (pMpTcb->Next == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#10265: FILE: drivers/staging/et131x/et1310_tx.c:1489:
+	if (pAdapter->TxRing.nBusySend <= (NUM_TCB / 3)) {
+		netif_wake_queue(pAdapter->netdev);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10308: FILE: drivers/staging/et131x/et1310_tx.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10312: FILE: drivers/staging/et131x/et1310_tx.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10330: FILE: drivers/staging/et131x/et1310_tx.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10351: FILE: drivers/staging/et131x/et1310_tx.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10369: FILE: drivers/staging/et131x/et1310_tx.h:62:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10376: FILE: drivers/staging/et131x/et1310_tx.h:69:
+typedef union _txdesc_word2_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10397: FILE: drivers/staging/et131x/et1310_tx.h:90:
+typedef union _txdesc_word3_t {

WARNING:TYPO_SPELLING: 'sructure' may be misspelled - perhaps 'structure'?
#10438: FILE: drivers/staging/et131x/et1310_tx.h:131:
+/* TX_DESC_ENTRY_t is sructure representing each descriptor on the ring */
                       ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10439: FILE: drivers/staging/et131x/et1310_tx.h:132:
+typedef struct _tx_desc_entry_t {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10446: FILE: drivers/staging/et131x/et1310_tx.h:139:
+
+

WARNING:TYPO_SPELLING: 'sructure' may be misspelled - perhaps 'structure'?
#10450: FILE: drivers/staging/et131x/et1310_tx.h:143:
+ * TX_STATUS_BLOCK_t is sructure representing the status of the Tx DMA engine
                         ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10453: FILE: drivers/staging/et131x/et1310_tx.h:146:
+typedef union _tx_status_block_t {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10469: FILE: drivers/staging/et131x/et1310_tx.h:162:
+typedef struct _MP_TCB {

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#10471: FILE: drivers/staging/et131x/et1310_tx.h:164:
+	u32 Flags;

CHECK:CAMELCASE: Avoid CamelCase: <Count>
#10472: FILE: drivers/staging/et131x/et1310_tx.h:165:
+	u32 Count;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10481: FILE: drivers/staging/et131x/et1310_tx.h:174:
+typedef struct tx_skb_list_elem {

WARNING:TYPO_SPELLING: 'sructure' may be misspelled - perhaps 'structure'?
#10486: FILE: drivers/staging/et131x/et1310_tx.h:179:
+/* TX_RING_t is sructure representing our local reference(s) to the ring */
                 ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10487: FILE: drivers/staging/et131x/et1310_tx.h:180:
+typedef struct _tx_ring_t {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#10503: FILE: drivers/staging/et131x/et1310_tx.h:196:
+	int32_t nBusySend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#10507: FILE: drivers/staging/et131x/et1310_tx.h:200:
+	int32_t nWaitSend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#10512: FILE: drivers/staging/et131x/et1310_tx.h:205:
+	uint64_t pTxDescRingAdjustedPa;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#10513: FILE: drivers/staging/et131x/et1310_tx.h:206:
+	uint64_t TxDescOffset;

CHECK:CAMELCASE: Avoid CamelCase: <TxMacErr>
#10526: FILE: drivers/staging/et131x/et1310_tx.h:219:
+	TXMAC_ERR_t TxMacErr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#10529: FILE: drivers/staging/et131x/et1310_tx.h:222:
+	int32_t TxPacketsSinceLastinterrupt;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10533: FILE: drivers/staging/et131x/et1310_tx.h:226:
+typedef struct _MP_FRAG_LIST MP_FRAG_LIST, *PMP_FRAG_LIST;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10556: FILE: drivers/staging/et131x/et131x_adapter.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10560: FILE: drivers/staging/et131x/et131x_adapter.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10578: FILE: drivers/staging/et131x/et131x_adapter.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10599: FILE: drivers/staging/et131x/et131x_adapter.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_F' - possible side-effects?
#10663: FILE: drivers/staging/et131x/et131x_adapter.h:108:
+#define MP_TEST_FLAGS(_M, _F)       (((_M)->Flags & (_F)) == (_F))

CHECK:CAMELCASE: Avoid CamelCase: <RcvRefCount>
#10666: FILE: drivers/staging/et131x/et131x_adapter.h:111:
+#define MP_INC_RCV_REF(_A)          atomic_inc(&(_A)->RcvRefCount)

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_FAIL_SEND_MASK>
#10674: FILE: drivers/staging/et131x/et131x_adapter.h:119:
+#define MP_SHOULD_FAIL_SEND(_M)   ((_M)->Flags & fMP_ADAPTER_FAIL_SEND_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_NOT_READY_MASK>
#10675: FILE: drivers/staging/et131x/et131x_adapter.h:120:
+#define MP_IS_NOT_READY(_M)       ((_M)->Flags & fMP_ADAPTER_NOT_READY_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_NO_CABLE>
#10678: FILE: drivers/staging/et131x/et131x_adapter.h:123:
+#define MP_HAS_CABLE(_M)           !((_M)->Flags & fMP_ADAPTER_NO_CABLE)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10682: FILE: drivers/staging/et131x/et131x_adapter.h:127:
+typedef struct _MP_ERR_COUNTERS {

CHECK:CAMELCASE: Avoid CamelCase: <PktCountTxPackets>
#10683: FILE: drivers/staging/et131x/et131x_adapter.h:128:
+	u32 PktCountTxPackets;

CHECK:CAMELCASE: Avoid CamelCase: <PktCountTxErrors>
#10684: FILE: drivers/staging/et131x/et131x_adapter.h:129:
+	u32 PktCountTxErrors;

CHECK:CAMELCASE: Avoid CamelCase: <TimerBasedTxErrors>
#10685: FILE: drivers/staging/et131x/et131x_adapter.h:130:
+	u32 TimerBasedTxErrors;

CHECK:CAMELCASE: Avoid CamelCase: <PktCountLastError>
#10686: FILE: drivers/staging/et131x/et131x_adapter.h:131:
+	u32 PktCountLastError;

CHECK:CAMELCASE: Avoid CamelCase: <ErredConsecPackets>
#10687: FILE: drivers/staging/et131x/et131x_adapter.h:132:
+	u32 ErredConsecPackets;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10691: FILE: drivers/staging/et131x/et131x_adapter.h:136:
+typedef struct _MP_RFD {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10700: FILE: drivers/staging/et131x/et131x_adapter.h:145:
+typedef enum _eflow_control_t {

CHECK:CAMELCASE: Avoid CamelCase: <eFLOW_CONTROL_t>
#10705: FILE: drivers/staging/et131x/et131x_adapter.h:150:
+} eFLOW_CONTROL_t, *PeFLOW_CONTROL_t;

CHECK:CAMELCASE: Avoid CamelCase: <PeFLOW_CONTROL_t>
#10705: FILE: drivers/staging/et131x/et131x_adapter.h:150:
+} eFLOW_CONTROL_t, *PeFLOW_CONTROL_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#10708: FILE: drivers/staging/et131x/et131x_adapter.h:153:
+typedef struct _ce_stats_t {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#10710: FILE: drivers/staging/et131x/et131x_adapter.h:155:
+	uint64_t ipackets;	// # of in packets

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#10711: FILE: drivers/staging/et131x/et131x_adapter.h:156:
+	uint64_t opackets;	// # of out packets

WARNING:TYPO_SPELLING: 'Transciever' may be misspelled - perhaps 'Transceiver'?
#10728: FILE: drivers/staging/et131x/et131x_adapter.h:173:
+	/* Transciever state informations. */
 	   ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#10728: FILE: drivers/staging/et131x/et131x_adapter.h:173:
+	/* Transciever state informations. */
 	                     ^^^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <UnhandledInterruptsPerSec>
#10752: FILE: drivers/staging/et131x/et131x_adapter.h:197:
+	u32 UnhandledInterruptsPerSec;

CHECK:CAMELCASE: Avoid CamelCase: <RxDmaInterruptsPerSec>
#10753: FILE: drivers/staging/et131x/et131x_adapter.h:198:
+	u32 RxDmaInterruptsPerSec;

CHECK:CAMELCASE: Avoid CamelCase: <TxDmaInterruptsPerSec>
#10754: FILE: drivers/staging/et131x/et131x_adapter.h:199:
+	u32 TxDmaInterruptsPerSec;

CHECK:CAMELCASE: Avoid CamelCase: <WatchDogInterruptsPerSec>
#10755: FILE: drivers/staging/et131x/et131x_adapter.h:200:
+	u32 WatchDogInterruptsPerSec;

CHECK:CAMELCASE: Avoid CamelCase: <SynchrounousIterations>
#10758: FILE: drivers/staging/et131x/et131x_adapter.h:203:
+	u32 SynchrounousIterations;

CHECK:CAMELCASE: Avoid CamelCase: <InterruptStatus>
#10759: FILE: drivers/staging/et131x/et131x_adapter.h:204:
+	INTERRUPT_t InterruptStatus;

CHECK:CAMELCASE: Avoid CamelCase: <HwErrCount>
#10771: FILE: drivers/staging/et131x/et131x_adapter.h:216:
+	u32 HwErrCount;

CHECK:CAMELCASE: Avoid CamelCase: <PermanentAddress>
#10774: FILE: drivers/staging/et131x/et131x_adapter.h:219:
+	u8 PermanentAddress[ETH_ALEN];

CHECK:CAMELCASE: Avoid CamelCase: <bOverrideAddress>
#10776: FILE: drivers/staging/et131x/et131x_adapter.h:221:
+	bool bOverrideAddress;

CHECK:CAMELCASE: Avoid CamelCase: <bEepromPresent>
#10777: FILE: drivers/staging/et131x/et131x_adapter.h:222:
+	bool bEepromPresent;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10783: FILE: drivers/staging/et131x/et131x_adapter.h:228:
+	spinlock_t TCBSendQLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10784: FILE: drivers/staging/et131x/et131x_adapter.h:229:
+	spinlock_t TCBReadyQLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10785: FILE: drivers/staging/et131x/et131x_adapter.h:230:
+	spinlock_t SendHWLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10786: FILE: drivers/staging/et131x/et131x_adapter.h:231:
+	spinlock_t SendWaitLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10788: FILE: drivers/staging/et131x/et131x_adapter.h:233:
+	spinlock_t RcvLock;

CHECK:CAMELCASE: Avoid CamelCase: <RcvPendLock>
#10789: FILE: drivers/staging/et131x/et131x_adapter.h:234:
+	spinlock_t RcvPendLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10789: FILE: drivers/staging/et131x/et131x_adapter.h:234:
+	spinlock_t RcvPendLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10790: FILE: drivers/staging/et131x/et131x_adapter.h:235:
+	spinlock_t FbrLock;

CHECK:CAMELCASE: Avoid CamelCase: <PHYLock>
#10792: FILE: drivers/staging/et131x/et131x_adapter.h:237:
+	spinlock_t PHYLock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#10792: FILE: drivers/staging/et131x/et131x_adapter.h:237:
+	spinlock_t PHYLock;

CHECK:CAMELCASE: Avoid CamelCase: <ulLookAhead>
#10796: FILE: drivers/staging/et131x/et131x_adapter.h:241:
+	u32 ulLookAhead;

CHECK:CAMELCASE: Avoid CamelCase: <TxMacTest>
#10807: FILE: drivers/staging/et131x/et131x_adapter.h:252:
+	TXMAC_TXTEST_t TxMacTest;

CHECK:CAMELCASE: Avoid CamelCase: <VendorID>
#10814: FILE: drivers/staging/et131x/et131x_adapter.h:259:
+	u16 VendorID;

CHECK:CAMELCASE: Avoid CamelCase: <SubVendorID>
#10816: FILE: drivers/staging/et131x/et131x_adapter.h:261:
+	u16 SubVendorID;

CHECK:CAMELCASE: Avoid CamelCase: <SubSystemID>
#10817: FILE: drivers/staging/et131x/et131x_adapter.h:262:
+	u16 SubSystemID;

CHECK:CAMELCASE: Avoid CamelCase: <CacheFillSize>
#10818: FILE: drivers/staging/et131x/et131x_adapter.h:263:
+	u32 CacheFillSize;

CHECK:CAMELCASE: Avoid CamelCase: <PciXDevCtl>
#10819: FILE: drivers/staging/et131x/et131x_adapter.h:264:
+	u16 PciXDevCtl;

CHECK:CAMELCASE: Avoid CamelCase: <SpeedDuplex>
#10826: FILE: drivers/staging/et131x/et131x_adapter.h:271:
+	u8 SpeedDuplex;		// speed/duplex

CHECK:CAMELCASE: Avoid CamelCase: <RegistryWOLMatch>
#10828: FILE: drivers/staging/et131x/et131x_adapter.h:273:
+	u8 RegistryWOLMatch;	// Enable WOL pattern-matching

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#10829: FILE: drivers/staging/et131x/et131x_adapter.h:274:
+	u8 RegistryWOLLink;	// Link state change is independant
 	                   	                        ^^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <RegistryWOLLink>
#10829: FILE: drivers/staging/et131x/et131x_adapter.h:274:
+	u8 RegistryWOLLink;	// Link state change is independant

CHECK:CAMELCASE: Avoid CamelCase: <RegistryMACStat>
#10833: FILE: drivers/staging/et131x/et131x_adapter.h:278:
+	u8 RegistryMACStat;	// If set, read MACSTAT, else don't

CHECK:CAMELCASE: Avoid CamelCase: <RegistryVlanTag>
#10834: FILE: drivers/staging/et131x/et131x_adapter.h:279:
+	u32 RegistryVlanTag;	// 802.1q Vlan TAG

CHECK:CAMELCASE: Avoid CamelCase: <RegistryPMWOL>
#10844: FILE: drivers/staging/et131x/et131x_adapter.h:289:
+	u8 RegistryPMWOL;

CHECK:CAMELCASE: Avoid CamelCase: <RegistryNMIDisable>
#10845: FILE: drivers/staging/et131x/et131x_adapter.h:290:
+	u8 RegistryNMIDisable;

CHECK:CAMELCASE: Avoid CamelCase: <RegistrySCGain>
#10847: FILE: drivers/staging/et131x/et131x_adapter.h:292:
+	u32 RegistrySCGain;

CHECK:CAMELCASE: Avoid CamelCase: <bQueryPending>
#10863: FILE: drivers/staging/et131x/et131x_adapter.h:308:
+	bool bQueryPending;

CHECK:CAMELCASE: Avoid CamelCase: <bSetPending>
#10864: FILE: drivers/staging/et131x/et131x_adapter.h:309:
+	bool bSetPending;

CHECK:CAMELCASE: Avoid CamelCase: <bResetPending>
#10865: FILE: drivers/staging/et131x/et131x_adapter.h:310:
+	bool bResetPending;

CHECK:CAMELCASE: Avoid CamelCase: <ErrorTimer>
#10866: FILE: drivers/staging/et131x/et131x_adapter.h:311:
+	struct timer_list ErrorTimer;

CHECK:CAMELCASE: Avoid CamelCase: <bLinkTimerActive>
#10867: FILE: drivers/staging/et131x/et131x_adapter.h:312:
+	bool bLinkTimerActive;

CHECK:CAMELCASE: Avoid CamelCase: <JagCoreRegs>
#10883: FILE: drivers/staging/et131x/et131x_adapter.h:328:
+	JAGCORE_ACCESS_REGS JagCoreRegs;

CHECK:CAMELCASE: Avoid CamelCase: <PciCfgRegs>
#10884: FILE: drivers/staging/et131x/et131x_adapter.h:329:
+	PCI_CFG_SPACE_REGS PciCfgRegs;

CHECK:CAMELCASE: Avoid CamelCase: <MPSendPacketsHandler>
#10897: FILE: drivers/staging/et131x/et131x_adapter.h:342:
+#define MPSendPacketsHandler  MPSendPackets

CHECK:CAMELCASE: Avoid CamelCase: <MPSendPackets>
#10897: FILE: drivers/staging/et131x/et131x_adapter.h:342:
+#define MPSendPacketsHandler  MPSendPackets

CHECK:CAMELCASE: Avoid CamelCase: <Adapter>
#10898: FILE: drivers/staging/et131x/et131x_adapter.h:343:
+#define MP_FREE_SEND_PACKET_FUN(Adapter, pMpTcb) \

CHECK:CAMELCASE: Avoid CamelCase: <MpSendPacketFun>
#10900: FILE: drivers/staging/et131x/et131x_adapter.h:345:
+#define MpSendPacketFun(Adapter, Packet) MpSendPacket(Adapter, Packet)

CHECK:CAMELCASE: Avoid CamelCase: <MpSendPacket>
#10900: FILE: drivers/staging/et131x/et131x_adapter.h:345:
+#define MpSendPacketFun(Adapter, Packet) MpSendPacket(Adapter, Packet)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10909: FILE: drivers/staging/et131x/et131x_config.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10913: FILE: drivers/staging/et131x/et131x_config.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10931: FILE: drivers/staging/et131x/et131x_config.c:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#10952: FILE: drivers/staging/et131x/et131x_config.c:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#10985: FILE: drivers/staging/et131x/et131x_config.c:77:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#10987: FILE: drivers/staging/et131x/et131x_config.c:79:
+#include <asm/bitops.h>

WARNING:TYPO_SPELLING: 'vaules' may be misspelled - perhaps 'values'?
#11010: FILE: drivers/staging/et131x/et131x_config.c:102:
+/* Defines for Parameter Default/Min/Max vaules */
                                          ^^^^^^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#11109: FILE: drivers/staging/et131x/et131x_config.c:201:
+		 "Set Link speed and dublex manually (0-5)  [0] \n  1 : 10Mb   Half-Duplex \n  2 : 10Mb   Full-Duplex \n  3 : 100Mb  Half-Duplex \n  4 : 100Mb  Full-Duplex \n  5 : 1000Mb Full-Duplex \n 0 : Auto Speed Auto Dublex");

CHECK:CAMELCASE: Avoid CamelCase: <macAddrDef>
#11120: FILE: drivers/staging/et131x/et131x_config.c:212:
+	uint8_t macAddrDef[] = PARM_MAC_ADDRESS_DEF;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#11120: FILE: drivers/staging/et131x/et131x_config.c:212:
+	uint8_t macAddrDef[] = PARM_MAC_ADDRESS_DEF;

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#11134: FILE: drivers/staging/et131x/et131x_config.c:226:
+	 * However, this implementation does not allow for seperate
 	                                                   ^^^^^^^^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#11146: FILE: drivers/staging/et131x/et131x_config.c:238:
+		DBG_VERBOSE(et131x_dbginfo, "Speed set manually to : %d \n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#11170: FILE: drivers/staging/et131x/et131x_config.c:262:
+	if (et131x_nmi_disable != PARM_NMI_DISABLE_DEF) {
[...]
+	} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->DeviceID == ET131X_PCI_DEVICE_ID_FAST'
#11200: FILE: drivers/staging/et131x/et131x_config.c:292:
+	if ((pAdapter->DeviceID == ET131X_PCI_DEVICE_ID_FAST) &&
+	    (pAdapter->SpeedDuplex == 5)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pAdapter->SpeedDuplex == 5'
#11200: FILE: drivers/staging/et131x/et131x_config.c:292:
+	if ((pAdapter->DeviceID == ET131X_PCI_DEVICE_ID_FAST) &&
+	    (pAdapter->SpeedDuplex == 5)) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11240: FILE: drivers/staging/et131x/et131x_config.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11244: FILE: drivers/staging/et131x/et131x_config.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11262: FILE: drivers/staging/et131x/et131x_config.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11283: FILE: drivers/staging/et131x/et131x_config.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11313: FILE: drivers/staging/et131x/et131x_debug.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11317: FILE: drivers/staging/et131x/et131x_debug.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11334: FILE: drivers/staging/et131x/et131x_debug.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11355: FILE: drivers/staging/et131x/et131x_debug.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#11391: FILE: drivers/staging/et131x/et131x_debug.c:79:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#11393: FILE: drivers/staging/et131x/et131x_debug.c:81:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <DumpTxQueueContents>
#11424: FILE: drivers/staging/et131x/et131x_debug.c:112:
+void DumpTxQueueContents(int dbgLvl, struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <dbgLvl>
#11424: FILE: drivers/staging/et131x/et131x_debug.c:112:
+void DumpTxQueueContents(int dbgLvl, struct et131x_adapter *pAdapter)

CHECK:CAMELCASE: Avoid CamelCase: <TxQueueAddr>
#11427: FILE: drivers/staging/et131x/et131x_debug.c:115:
+	uint32_t TxQueueAddr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11427: FILE: drivers/staging/et131x/et131x_debug.c:115:
+	uint32_t TxQueueAddr;

WARNING:SPLIT_STRING: quoted string split across lines
#11440: FILE: drivers/staging/et131x/et131x_debug.c:128:
+				  "Value 1 0x%08x, Value 2 0x%08x, "
+				  "Value 3 0x%08x, Value 4 0x%08x, \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#11440: FILE: drivers/staging/et131x/et131x_debug.c:128:
+				  "Value 3 0x%08x, Value 4 0x%08x, \n",

CHECK:CAMELCASE: Avoid CamelCase: <Block>
#11463: FILE: drivers/staging/et131x/et131x_debug.c:151:
+		     uint32_t Block)

CHECK:CAMELCASE: Avoid CamelCase: <Address1>
#11465: FILE: drivers/staging/et131x/et131x_debug.c:153:
+	uint32_t Address1, Address2;

CHECK:CAMELCASE: Avoid CamelCase: <Address2>
#11465: FILE: drivers/staging/et131x/et131x_debug.c:153:
+	uint32_t Address1, Address2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11465: FILE: drivers/staging/et131x/et131x_debug.c:153:
+	uint32_t Address1, Address2;

CHECK:CAMELCASE: Avoid CamelCase: <BigDevicePointer>
#11466: FILE: drivers/staging/et131x/et131x_debug.c:154:
+	uint32_t __iomem *BigDevicePointer =

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11466: FILE: drivers/staging/et131x/et131x_debug.c:154:
+	uint32_t __iomem *BigDevicePointer =

CHECK:SPACING: No space is necessary after a cast
#11467: FILE: drivers/staging/et131x/et131x_debug.c:155:
+		(uint32_t __iomem *) pAdapter->CSRAddress;

CHECK:CAMELCASE: Avoid CamelCase: <BlockNames>
#11468: FILE: drivers/staging/et131x/et131x_debug.c:156:
+	const char *BlockNames[NUM_BLOCKS] = {

CHECK:CAMELCASE: Avoid CamelCase: <DumpDeviceReg>
#11500: FILE: drivers/staging/et131x/et131x_debug.c:188:
+void DumpDeviceReg(int dbgLvl, struct et131x_adapter *pAdapter)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11502: FILE: drivers/staging/et131x/et131x_debug.c:190:
+	uint32_t Address1, Address2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11503: FILE: drivers/staging/et131x/et131x_debug.c:191:
+	uint32_t Block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11504: FILE: drivers/staging/et131x/et131x_debug.c:192:
+	uint32_t __iomem *BigDevicePointer =

CHECK:SPACING: No space is necessary after a cast
#11505: FILE: drivers/staging/et131x/et131x_debug.c:193:
+		(uint32_t __iomem *) pAdapter->CSRAddress;

CHECK:CAMELCASE: Avoid CamelCase: <Pointer>
#11506: FILE: drivers/staging/et131x/et131x_debug.c:194:
+	uint32_t __iomem *Pointer;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#11506: FILE: drivers/staging/et131x/et131x_debug.c:194:
+	uint32_t __iomem *Pointer;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11537: FILE: drivers/staging/et131x/et131x_debug.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11541: FILE: drivers/staging/et131x/et131x_debug.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11560: FILE: drivers/staging/et131x/et131x_debug.h:24:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11581: FILE: drivers/staging/et131x/et131x_debug.h:45:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#11621: FILE: drivers/staging/et131x/et131x_debug.h:85:
+#define DBG_DEFAULTS		(DBG_ERROR_ON | DBG_WARNING_ON | DBG_BREAK_ON )

CHECK:CAMELCASE: Avoid CamelCase: <dbgFlags>
#11623: FILE: drivers/staging/et131x/et131x_debug.h:87:
+#define DBG_FLAGS(A)		(A)->dbgFlags

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#11623: FILE: drivers/staging/et131x/et131x_debug.h:87:
+#define DBG_FLAGS(A)		(A)->dbgFlags

CHECK:CAMELCASE: Avoid CamelCase: <dbgName>
#11624: FILE: drivers/staging/et131x/et131x_debug.h:88:
+#define DBG_NAME(A)		(A)->dbgName

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#11624: FILE: drivers/staging/et131x/et131x_debug.h:88:
+#define DBG_NAME(A)		(A)->dbgName

CHECK:CAMELCASE: Avoid CamelCase: <dbgLevel>
#11625: FILE: drivers/staging/et131x/et131x_debug.h:89:
+#define DBG_LEVEL(A)		(A)->dbgLevel

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#11625: FILE: drivers/staging/et131x/et131x_debug.h:89:
+#define DBG_LEVEL(A)		(A)->dbgLevel

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#11628: FILE: drivers/staging/et131x/et131x_debug.h:92:
+#define DBG_PRINT(S...)		printk(KERN_DEBUG S)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#11632: FILE: drivers/staging/et131x/et131x_debug.h:96:
+#define DBG_PRINTC(S...)	printk(S)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#11642: FILE: drivers/staging/et131x/et131x_debug.h:106:
+#define _DBG_ENTER(A)	printk(KERN_DEBUG "%s:%.*s:%s\n", DBG_NAME(A),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11642: FILE: drivers/staging/et131x/et131x_debug.h:106:
+#define _DBG_ENTER(A)	printk(KERN_DEBUG "%s:%.*s:%s\n", DBG_NAME(A),	\
+				++DBG_LEVEL(A), _ENTER_STR, __func__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#11644: FILE: drivers/staging/et131x/et131x_debug.h:108:
+#define _DBG_LEAVE(A)	printk(KERN_DEBUG "%s:%.*s:%s\n", DBG_NAME(A),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11644: FILE: drivers/staging/et131x/et131x_debug.h:108:
+#define _DBG_LEAVE(A)	printk(KERN_DEBUG "%s:%.*s:%s\n", DBG_NAME(A),	\
+				DBG_LEVEL(A)--, _LEAVE_STR, __func__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11647: FILE: drivers/staging/et131x/et131x_debug.h:111:
+#define DBG_ENTER(A)        {if (DBG_FLAGS(A) & DBG_TRACE_ON) \
+                                _DBG_ENTER(A);}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11648: FILE: drivers/staging/et131x/et131x_debug.h:112:
+                                _DBG_ENTER(A);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11648: FILE: drivers/staging/et131x/et131x_debug.h:112:
+                                _DBG_ENTER(A);}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11648: FILE: drivers/staging/et131x/et131x_debug.h:112:
+                                _DBG_ENTER(A);}
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11650: FILE: drivers/staging/et131x/et131x_debug.h:114:
+#define DBG_LEAVE(A)        {if (DBG_FLAGS(A) & DBG_TRACE_ON) \
+                                _DBG_LEAVE(A);}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11651: FILE: drivers/staging/et131x/et131x_debug.h:115:
+                                _DBG_LEAVE(A);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11651: FILE: drivers/staging/et131x/et131x_debug.h:115:
+                                _DBG_LEAVE(A);}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11651: FILE: drivers/staging/et131x/et131x_debug.h:115:
+                                _DBG_LEAVE(A);}
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11653: FILE: drivers/staging/et131x/et131x_debug.h:117:
+#define DBG_PARAM(A,N,F,S...)   {if (DBG_FLAGS(A) & DBG_PARAM_ON) \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11653: FILE: drivers/staging/et131x/et131x_debug.h:117:
+#define DBG_PARAM(A,N,F,S...)   {if (DBG_FLAGS(A) & DBG_PARAM_ON) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11653: FILE: drivers/staging/et131x/et131x_debug.h:117:
+#define DBG_PARAM(A,N,F,S...)   {if (DBG_FLAGS(A) & DBG_PARAM_ON) \
                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#11654: FILE: drivers/staging/et131x/et131x_debug.h:118:
+                                    DBG_PRINT("  %s -- "F"\n",N,S);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11654: FILE: drivers/staging/et131x/et131x_debug.h:118:
+                                    DBG_PRINT("  %s -- "F"\n",N,S);}$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11654: FILE: drivers/staging/et131x/et131x_debug.h:118:
+                                    DBG_PRINT("  %s -- "F"\n",N,S);}
                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11654: FILE: drivers/staging/et131x/et131x_debug.h:118:
+                                    DBG_PRINT("  %s -- "F"\n",N,S);}
                                                                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11654: FILE: drivers/staging/et131x/et131x_debug.h:118:
+                                    DBG_PRINT("  %s -- "F"\n",N,S);}
                                                                   ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#11654: FILE: drivers/staging/et131x/et131x_debug.h:118:
+                                    DBG_PRINT("  %s -- "F"\n",N,S);}

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11656: FILE: drivers/staging/et131x/et131x_debug.h:120:
+#define DBG_ERROR(A,S...)	\
                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#11656: FILE: drivers/staging/et131x/et131x_debug.h:120:
+#define DBG_ERROR(A,S...)	\
+	if (DBG_FLAGS(A) & DBG_ERROR_ON) {				\
+		DBG_PRINT("%s:ERROR:%s ",DBG_NAME(A), __func__);	\
+		DBG_PRINTC(S);						\
+		DBG_TRAP;						\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11656: FILE: drivers/staging/et131x/et131x_debug.h:120:
+#define DBG_ERROR(A,S...)	\
+	if (DBG_FLAGS(A) & DBG_ERROR_ON) {				\
+		DBG_PRINT("%s:ERROR:%s ",DBG_NAME(A), __func__);	\
+		DBG_PRINTC(S);						\
+		DBG_TRAP;						\
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11658: FILE: drivers/staging/et131x/et131x_debug.h:122:
+		DBG_PRINT("%s:ERROR:%s ",DBG_NAME(A), __func__);	\
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11663: FILE: drivers/staging/et131x/et131x_debug.h:127:
+#define DBG_WARNING(A,S...) {if (DBG_FLAGS(A) & DBG_WARNING_ON) \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11663: FILE: drivers/staging/et131x/et131x_debug.h:127:
+#define DBG_WARNING(A,S...) {if (DBG_FLAGS(A) & DBG_WARNING_ON) \
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11664: FILE: drivers/staging/et131x/et131x_debug.h:128:
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11664: FILE: drivers/staging/et131x/et131x_debug.h:128:
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11664: FILE: drivers/staging/et131x/et131x_debug.h:128:
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11664: FILE: drivers/staging/et131x/et131x_debug.h:128:
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11664: FILE: drivers/staging/et131x/et131x_debug.h:128:
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11664: FILE: drivers/staging/et131x/et131x_debug.h:128:
+                                {DBG_PRINT("%s:WARNING:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11666: FILE: drivers/staging/et131x/et131x_debug.h:130:
+#define DBG_NOTICE(A,S...)  {if (DBG_FLAGS(A) & DBG_NOTICE_ON) \
                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11666: FILE: drivers/staging/et131x/et131x_debug.h:130:
+#define DBG_NOTICE(A,S...)  {if (DBG_FLAGS(A) & DBG_NOTICE_ON) \
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11667: FILE: drivers/staging/et131x/et131x_debug.h:131:
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11667: FILE: drivers/staging/et131x/et131x_debug.h:131:
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11667: FILE: drivers/staging/et131x/et131x_debug.h:131:
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11667: FILE: drivers/staging/et131x/et131x_debug.h:131:
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11667: FILE: drivers/staging/et131x/et131x_debug.h:131:
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                                                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11667: FILE: drivers/staging/et131x/et131x_debug.h:131:
+                                {DBG_PRINT("%s:NOTICE:%s ",DBG_NAME(A),__func__);DBG_PRINTC(S);}}
                                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11669: FILE: drivers/staging/et131x/et131x_debug.h:133:
+#define DBG_TRACE(A,S...)   {if (DBG_FLAGS(A) & DBG_TRACE_ON) \
                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11669: FILE: drivers/staging/et131x/et131x_debug.h:133:
+#define DBG_TRACE(A,S...)   {if (DBG_FLAGS(A) & DBG_TRACE_ON) \
+                                {DBG_PRINT("%s:TRACE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11670: FILE: drivers/staging/et131x/et131x_debug.h:134:
+                                {DBG_PRINT("%s:TRACE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11670: FILE: drivers/staging/et131x/et131x_debug.h:134:
+                                {DBG_PRINT("%s:TRACE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11670: FILE: drivers/staging/et131x/et131x_debug.h:134:
+                                {DBG_PRINT("%s:TRACE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}
                                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11670: FILE: drivers/staging/et131x/et131x_debug.h:134:
+                                {DBG_PRINT("%s:TRACE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}
                                                                                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11670: FILE: drivers/staging/et131x/et131x_debug.h:134:
+                                {DBG_PRINT("%s:TRACE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}
                                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11672: FILE: drivers/staging/et131x/et131x_debug.h:136:
+#define DBG_VERBOSE(A,S...) {if (DBG_FLAGS(A) & DBG_VERBOSE_ON) \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11672: FILE: drivers/staging/et131x/et131x_debug.h:136:
+#define DBG_VERBOSE(A,S...) {if (DBG_FLAGS(A) & DBG_VERBOSE_ON) \
+                                {DBG_PRINT("%s:VERBOSE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11673: FILE: drivers/staging/et131x/et131x_debug.h:137:
+                                {DBG_PRINT("%s:VERBOSE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11673: FILE: drivers/staging/et131x/et131x_debug.h:137:
+                                {DBG_PRINT("%s:VERBOSE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11673: FILE: drivers/staging/et131x/et131x_debug.h:137:
+                                {DBG_PRINT("%s:VERBOSE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}
                                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11673: FILE: drivers/staging/et131x/et131x_debug.h:137:
+                                {DBG_PRINT("%s:VERBOSE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}
                                                                                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11673: FILE: drivers/staging/et131x/et131x_debug.h:137:
+                                {DBG_PRINT("%s:VERBOSE:%s ",DBG_NAME(A), __func__);DBG_PRINTC(S);}}
                                                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11675: FILE: drivers/staging/et131x/et131x_debug.h:139:
+#define DBG_RX(A,S...)      {if (DBG_FLAGS(A) & DBG_RX_ON) \
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#11676: FILE: drivers/staging/et131x/et131x_debug.h:140:
+                                {DBG_PRINT(S);}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11676: FILE: drivers/staging/et131x/et131x_debug.h:140:
+                                {DBG_PRINT(S);}}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11676: FILE: drivers/staging/et131x/et131x_debug.h:140:
+                                {DBG_PRINT(S);}}
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11678: FILE: drivers/staging/et131x/et131x_debug.h:142:
+#define DBG_RX_ENTER(A)     {if (DBG_FLAGS(A) & DBG_RX_ON) \
+                                _DBG_ENTER(A);}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11679: FILE: drivers/staging/et131x/et131x_debug.h:143:
+                                _DBG_ENTER(A);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11679: FILE: drivers/staging/et131x/et131x_debug.h:143:
+                                _DBG_ENTER(A);}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11679: FILE: drivers/staging/et131x/et131x_debug.h:143:
+                                _DBG_ENTER(A);}
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11681: FILE: drivers/staging/et131x/et131x_debug.h:145:
+#define DBG_RX_LEAVE(A)     {if (DBG_FLAGS(A) & DBG_RX_ON) \
+                                _DBG_LEAVE(A);}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11682: FILE: drivers/staging/et131x/et131x_debug.h:146:
+                                _DBG_LEAVE(A);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11682: FILE: drivers/staging/et131x/et131x_debug.h:146:
+                                _DBG_LEAVE(A);}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11682: FILE: drivers/staging/et131x/et131x_debug.h:146:
+                                _DBG_LEAVE(A);}
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11684: FILE: drivers/staging/et131x/et131x_debug.h:148:
+#define DBG_TX(A,S...)      {if (DBG_FLAGS(A) & DBG_TX_ON) \
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#11685: FILE: drivers/staging/et131x/et131x_debug.h:149:
+                                {DBG_PRINT(S);}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11685: FILE: drivers/staging/et131x/et131x_debug.h:149:
+                                {DBG_PRINT(S);}}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11685: FILE: drivers/staging/et131x/et131x_debug.h:149:
+                                {DBG_PRINT(S);}}
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11687: FILE: drivers/staging/et131x/et131x_debug.h:151:
+#define DBG_TX_ENTER(A)     {if (DBG_FLAGS(A) & DBG_TX_ON) \
+                                _DBG_ENTER(A);}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11688: FILE: drivers/staging/et131x/et131x_debug.h:152:
+                                _DBG_ENTER(A);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11688: FILE: drivers/staging/et131x/et131x_debug.h:152:
+                                _DBG_ENTER(A);}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11688: FILE: drivers/staging/et131x/et131x_debug.h:152:
+                                _DBG_ENTER(A);}
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#11690: FILE: drivers/staging/et131x/et131x_debug.h:154:
+#define DBG_TX_LEAVE(A)     {if (DBG_FLAGS(A) & DBG_TX_ON) \
+                                _DBG_LEAVE(A);}

ERROR:CODE_INDENT: code indent should use tabs where possible
#11691: FILE: drivers/staging/et131x/et131x_debug.h:155:
+                                _DBG_LEAVE(A);}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11691: FILE: drivers/staging/et131x/et131x_debug.h:155:
+                                _DBG_LEAVE(A);}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11691: FILE: drivers/staging/et131x/et131x_debug.h:155:
+                                _DBG_LEAVE(A);}
                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#11694: FILE: drivers/staging/et131x/et131x_debug.h:158:
+                                {DBG_PRINT("ASSERT(%s) -- %s#%d (%s)\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11694: FILE: drivers/staging/et131x/et131x_debug.h:158:
+                                {DBG_PRINT("ASSERT(%s) -- %s#%d (%s)\n", \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#11695: FILE: drivers/staging/et131x/et131x_debug.h:159:
+                                    #C,__FILE__,__LINE__,__func__); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11695: FILE: drivers/staging/et131x/et131x_debug.h:159:
+                                    #C,__FILE__,__LINE__,__func__); \
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11695: FILE: drivers/staging/et131x/et131x_debug.h:159:
+                                    #C,__FILE__,__LINE__,__func__); \
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11695: FILE: drivers/staging/et131x/et131x_debug.h:159:
+                                    #C,__FILE__,__LINE__,__func__); \
                                                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#11696: FILE: drivers/staging/et131x/et131x_debug.h:160:
+                                DBG_TRAP;}}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11696: FILE: drivers/staging/et131x/et131x_debug.h:160:
+                                DBG_TRAP;}}$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#11696: FILE: drivers/staging/et131x/et131x_debug.h:160:
+                                DBG_TRAP;}}
                                         ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#11699: FILE: drivers/staging/et131x/et131x_debug.h:163:
+typedef struct {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11712: FILE: drivers/staging/et131x/et131x_debug.h:176:
+#define DBG_PARAM(A,N,F,S...)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11712: FILE: drivers/staging/et131x/et131x_debug.h:176:
+#define DBG_PARAM(A,N,F,S...)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11712: FILE: drivers/staging/et131x/et131x_debug.h:176:
+#define DBG_PARAM(A,N,F,S...)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11713: FILE: drivers/staging/et131x/et131x_debug.h:177:
+#define DBG_ERROR(A,S...)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11714: FILE: drivers/staging/et131x/et131x_debug.h:178:
+#define DBG_WARNING(A,S...)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11715: FILE: drivers/staging/et131x/et131x_debug.h:179:
+#define DBG_NOTICE(A,S...)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11716: FILE: drivers/staging/et131x/et131x_debug.h:180:
+#define DBG_TRACE(A,S...)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11717: FILE: drivers/staging/et131x/et131x_debug.h:181:
+#define DBG_VERBOSE(A,S...)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11718: FILE: drivers/staging/et131x/et131x_debug.h:182:
+#define DBG_RX(A,S...)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#11721: FILE: drivers/staging/et131x/et131x_debug.h:185:
+#define DBG_TX(A,S...)
                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11744: FILE: drivers/staging/et131x/et131x_defs.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11748: FILE: drivers/staging/et131x/et131x_defs.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11766: FILE: drivers/staging/et131x/et131x_defs.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11787: FILE: drivers/staging/et131x/et131x_defs.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_INTERRUPT_IN_USE>
#11829: FILE: drivers/staging/et131x/et131x_defs.h:86:
+#define fMP_ADAPTER_INTERRUPT_IN_USE	0x00000008

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_SECONDARY>
#11830: FILE: drivers/staging/et131x/et131x_defs.h:87:
+#define fMP_ADAPTER_SECONDARY		0x00000010

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_SHUTDOWN>
#11833: FILE: drivers/staging/et131x/et131x_defs.h:90:
+#define fMP_ADAPTER_SHUTDOWN		0x00100000

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_NON_RECOVER_ERROR>
#11836: FILE: drivers/staging/et131x/et131x_defs.h:93:
+#define fMP_ADAPTER_NON_RECOVER_ERROR	0x00800000

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_RESET_IN_PROGRESS>
#11837: FILE: drivers/staging/et131x/et131x_defs.h:94:
+#define fMP_ADAPTER_RESET_IN_PROGRESS	0x01000000

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_HARDWARE_ERROR>
#11839: FILE: drivers/staging/et131x/et131x_defs.h:96:
+#define fMP_ADAPTER_HARDWARE_ERROR	0x04000000

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_REMOVE_IN_PROGRESS>
#11840: FILE: drivers/staging/et131x/et131x_defs.h:97:
+#define fMP_ADAPTER_REMOVE_IN_PROGRESS	0x08000000

CHECK:CAMELCASE: Avoid CamelCase: <fMP_ADAPTER_HALT_IN_PROGRESS>
#11841: FILE: drivers/staging/et131x/et131x_defs.h:98:
+#define fMP_ADAPTER_HALT_IN_PROGRESS	0x10000000

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11878: FILE: drivers/staging/et131x/et131x_initpci.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11882: FILE: drivers/staging/et131x/et131x_initpci.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11901: FILE: drivers/staging/et131x/et131x_initpci.c:24:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#11922: FILE: drivers/staging/et131x/et131x_initpci.c:45:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#11956: FILE: drivers/staging/et131x/et131x_initpci.c:79:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#11958: FILE: drivers/staging/et131x/et131x_initpci.c:81:
+#include <asm/bitops.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11983: FILE: drivers/staging/et131x/et131x_initpci.c:106:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#11984: FILE: drivers/staging/et131x/et131x_initpci.c:107:
+int __devinit et131x_pci_setup(struct pci_dev *pdev,

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#11986: FILE: drivers/staging/et131x/et131x_initpci.c:109:
+void __devexit et131x_pci_remove(struct pci_dev *pdev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#11986: FILE: drivers/staging/et131x/et131x_initpci.c:109:
+void __devexit et131x_pci_remove(struct pci_dev *pdev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11988: FILE: drivers/staging/et131x/et131x_initpci.c:111:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#12000: FILE: drivers/staging/et131x/et131x_initpci.c:123:
+/*
+et131x_debug_level :

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#12021: FILE: drivers/staging/et131x/et131x_initpci.c:144:
+static struct pci_device_id et131x_pci_table[] __devinitdata = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#12032: FILE: drivers/staging/et131x/et131x_initpci.c:155:
+      .name^I= DRIVER_NAME,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#12033: FILE: drivers/staging/et131x/et131x_initpci.c:156:
+      .id_table^I= et131x_pci_table,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#12034: FILE: drivers/staging/et131x/et131x_initpci.c:157:
+      .probe^I= et131x_pci_setup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#12035: FILE: drivers/staging/et131x/et131x_initpci.c:158:
+      .remove^I= __devexit_p(et131x_pci_remove),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#12036: FILE: drivers/staging/et131x/et131x_initpci.c:159:
+      .suspend^I= NULL,^I^I//et131x_pci_suspend,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#12037: FILE: drivers/staging/et131x/et131x_initpci.c:160:
+      .resume^I= NULL,^I^I//et131x_pci_resume,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#12040: FILE: drivers/staging/et131x/et131x_initpci.c:163:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#12108: FILE: drivers/staging/et131x/et131x_initpci.c:231:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <eepromStat>
#12118: FILE: drivers/staging/et131x/et131x_initpci.c:241:
+	uint8_t eepromStat;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#12118: FILE: drivers/staging/et131x/et131x_initpci.c:241:
+	uint8_t eepromStat;

CHECK:CAMELCASE: Avoid CamelCase: <maxPayload>
#12119: FILE: drivers/staging/et131x/et131x_initpci.c:242:
+	uint8_t maxPayload = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#12119: FILE: drivers/staging/et131x/et131x_initpci.c:242:
+	uint8_t maxPayload = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#12120: FILE: drivers/staging/et131x/et131x_initpci.c:243:
+	uint8_t read_size_reg;

CHECK:CAMELCASE: Avoid CamelCase: <RegisterVal>
#12128: FILE: drivers/staging/et131x/et131x_initpci.c:251:
+		uint8_t RegisterVal;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#12128: FILE: drivers/staging/et131x/et131x_initpci.c:251:
+		uint8_t RegisterVal;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#12133: FILE: drivers/staging/et131x/et131x_initpci.c:256:
+		if (adapter->RegistryNMIDisable == 2) {
+			RegisterVal |= 0xc;
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#12147: FILE: drivers/staging/et131x/et131x_initpci.c:270:
+ ^I * I need to call this function twice to get my card in a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#12147: FILE: drivers/staging/et131x/et131x_initpci.c:270:
+ ^I * I need to call this function twice to get my card in a$

WARNING:TYPO_SPELLING: 'thougth' may be misspelled - perhaps 'thought'?
#12149: FILE: drivers/staging/et131x/et131x_initpci.c:272:
+	 * function, because I thougth there could be some time condidions
 	                       ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#12156: FILE: drivers/staging/et131x/et131x_initpci.c:279:
+		DBG_ERROR(et131x_dbginfo, "Could not read PCI config space for "
+			  "EEPROM Status\n");

WARNING:SPLIT_STRING: quoted string split across lines
#12170: FILE: drivers/staging/et131x/et131x_initpci.c:293:
+				  "Could not read PCI config space for "
+				  "Revision ID\n");

CHECK:CAMELCASE: Avoid CamelCase: <nLoop>
#12174: FILE: drivers/staging/et131x/et131x_initpci.c:297:
+			int32_t nLoop;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#12174: FILE: drivers/staging/et131x/et131x_initpci.c:297:
+			int32_t nLoop;

CHECK:CAMELCASE: Avoid CamelCase: <ucTemp>
#12175: FILE: drivers/staging/et131x/et131x_initpci.c:298:
+			uint8_t ucTemp[4] = { 0xFE, 0x13, 0x10, 0xFF };

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#12175: FILE: drivers/staging/et131x/et131x_initpci.c:298:
+			uint8_t ucTemp[4] = { 0xFE, 0x13, 0x10, 0xFF };

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#12200: FILE: drivers/staging/et131x/et131x_initpci.c:323:
+		return -EIO;
+	} else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#12212: FILE: drivers/staging/et131x/et131x_initpci.c:335:
+	if (adapter->eepromData[0] != 0xcd) {
+		adapter->eepromData[1] = 0x00;	// Disable all optional features
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#12222: FILE: drivers/staging/et131x/et131x_initpci.c:345:
+		DBG_ERROR(et131x_dbginfo, "Could not read PCI config space for "
+			  "Max Payload Size\n");

CHECK:CAMELCASE: Avoid CamelCase: <AckNak>
#12231: FILE: drivers/staging/et131x/et131x_initpci.c:354:
+		const uint16_t AckNak[2] = { 0x76, 0xD0 };

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#12231: FILE: drivers/staging/et131x/et131x_initpci.c:354:
+		const uint16_t AckNak[2] = { 0x76, 0xD0 };

CHECK:CAMELCASE: Avoid CamelCase: <Replay>
#12232: FILE: drivers/staging/et131x/et131x_initpci.c:355:
+		const uint16_t Replay[2] = { 0x1E0, 0x2ED };

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#12232: FILE: drivers/staging/et131x/et131x_initpci.c:355:
+		const uint16_t Replay[2] = { 0x1E0, 0x2ED };

WARNING:SPLIT_STRING: quoted string split across lines
#12239: FILE: drivers/staging/et131x/et131x_initpci.c:362:
+				  "Could not write PCI config space "
+				  "for ACK/NAK\n");

WARNING:SPLIT_STRING: quoted string split across lines
#12249: FILE: drivers/staging/et131x/et131x_initpci.c:372:
+				  "Could not write PCI config space "
+				  "for Replay Timer\n");

WARNING:SPLIT_STRING: quoted string split across lines
#12262: FILE: drivers/staging/et131x/et131x_initpci.c:385:
+			  "Could not write PCI config space for "
+			  "Latency Timers\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#12304: FILE: drivers/staging/et131x/et131x_initpci.c:427:
+			result = pci_read_config_byte(

CHECK:SPACING: No space is necessary after a cast
#12329: FILE: drivers/staging/et131x/et131x_initpci.c:452:
+	struct et131x_adapter *pAdapter = (struct et131x_adapter *) data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#12335: FILE: drivers/staging/et131x/et131x_initpci.c:458:
+		if (pAdapter->RegistryMACStat) {
+			UpdateMacStatHostCounters(pAdapter);
+		}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#12352: FILE: drivers/staging/et131x/et131x_initpci.c:475:
+		if (!pAdapter->Bmsr.bits.link_status
+		    && pAdapter->RegistryPhyComa) {

CHECK:SPACING: No space is necessary after a cast
#12374: FILE: drivers/staging/et131x/et131x_initpci.c:497:
+	struct et131x_adapter *pAdapter = (struct et131x_adapter *) data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#12423: FILE: drivers/staging/et131x/et131x_initpci.c:546:
+	if (status != 0) {
+		DBG_WARNING(et131x_dbginfo, "Could not find the xcvr\n");
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#12440: FILE: drivers/staging/et131x/et131x_initpci.c:563:
+	if (pAdapter->DeviceID != ET131X_PCI_DEVICE_ID_FAST) {
[...]
+	} else {
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#12528: FILE: drivers/staging/et131x/et131x_initpci.c:651:
+				   uint64_t *phys_addr,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#12529: FILE: drivers/staging/et131x/et131x_initpci.c:652:
+				   uint64_t *offset, uint64_t mask)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#12531: FILE: drivers/staging/et131x/et131x_initpci.c:654:
+	uint64_t new_addr;

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#12620: FILE: drivers/staging/et131x/et131x_initpci.c:743:
+void __devexit et131x_pci_remove(struct pci_dev *pdev)

CHECK:SPACING: No space is necessary after a cast
#12630: FILE: drivers/staging/et131x/et131x_initpci.c:753:
+	netdev = (struct net_device *) pci_get_drvdata(pdev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#12656: FILE: drivers/staging/et131x/et131x_initpci.c:779:
+int __devinit et131x_pci_setup(struct pci_dev *pdev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!netdev"
#12733: FILE: drivers/staging/et131x/et131x_initpci.c:856:
+	if (netdev == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#12742: FILE: drivers/staging/et131x/et131x_initpci.c:865:
+	if (pci_using_dac) {
+		//netdev->features |= NETIF_F_HIGHDMA;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!adapter->CSRAddress"
#12811: FILE: drivers/staging/et131x/et131x_initpci.c:934:
+	if (adapter->CSRAddress == NULL) {

WARNING:TYPO_SPELLING: 'adapater' may be misspelled - perhaps 'adapter'?
#12842: FILE: drivers/staging/et131x/et131x_initpci.c:965:
+			  "Could not alloc adapater memory (DMA)\n");
 			                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'Intialize' may be misspelled - perhaps 'Initialize'?
#12883: FILE: drivers/staging/et131x/et131x_initpci.c:1006:
+	/* Intialize variable for counting how long we do not have link status */
 	   ^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#12895: FILE: drivers/staging/et131x/et131x_initpci.c:1018:
+	if ((result = register_netdev(netdev)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12930: FILE: drivers/staging/et131x/et131x_initpci.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#12934: FILE: drivers/staging/et131x/et131x_initpci.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#12952: FILE: drivers/staging/et131x/et131x_initpci.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#12973: FILE: drivers/staging/et131x/et131x_initpci.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13009: FILE: drivers/staging/et131x/et131x_isr.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13013: FILE: drivers/staging/et131x/et131x_isr.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13031: FILE: drivers/staging/et131x/et131x_isr.c:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13052: FILE: drivers/staging/et131x/et131x_isr.c:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#13085: FILE: drivers/staging/et131x/et131x_isr.c:77:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#13087: FILE: drivers/staging/et131x/et131x_isr.c:79:
+#include <asm/bitops.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!netdev"
#13121: FILE: drivers/staging/et131x/et131x_isr.c:113:
+	if (netdev == NULL || !netif_device_present(netdev)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#13162: FILE: drivers/staging/et131x/et131x_isr.c:154:
+	if (status.bits.rxdma_xfr_done) {
+		adapter->Stats.RxDmaInterruptsPerSec++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#13166: FILE: drivers/staging/et131x/et131x_isr.c:158:
+	if (status.bits.txdma_isr) {
+		adapter->Stats.TxDmaInterruptsPerSec++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#13175: FILE: drivers/staging/et131x/et131x_isr.c:167:
+			if (++pMpTcb->PacketStaleCount > 1) {
+				status.bits.txdma_isr = 1;
+			}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#13180: FILE: drivers/staging/et131x/et131x_isr.c:172:
+		if (adapter->RxRing.UnfinishedReceives) {
[...]
+		} else if (pMpTcb == NULL) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pMpTcb"
#13182: FILE: drivers/staging/et131x/et131x_isr.c:174:
+		} else if (pMpTcb == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <GlobStatus>
#13229: FILE: drivers/staging/et131x/et131x_isr.c:221:
+	INTERRUPT_t GlobStatus = pAdapter->Stats.InterruptStatus;

CHECK:CAMELCASE: Avoid CamelCase: <TxDmaErr>
#13254: FILE: drivers/staging/et131x/et131x_isr.c:246:
+			TXDMA_ERROR_t TxDmaErr;

WARNING:SPLIT_STRING: quoted string split across lines
#13283: FILE: drivers/staging/et131x/et131x_isr.c:275:
+				    "RXDMA_FB_RING0_LOW or "
+				    "RXDMA_FB_RING1_LOW interrupt\n");

WARNING:TYPO_SPELLING: 'resoures' may be misspelled - perhaps 'resources'?
#13316: FILE: drivers/staging/et131x/et131x_isr.c:308:
+			 * resource.  These resoures are passed to the OS.
 			                    ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <BmsrInts>
#13367: FILE: drivers/staging/et131x/et131x_isr.c:359:
+			MI_BMSR_t BmsrInts, BmsrData;

CHECK:CAMELCASE: Avoid CamelCase: <BmsrData>
#13367: FILE: drivers/staging/et131x/et131x_isr.c:359:
+			MI_BMSR_t BmsrInts, BmsrData;

CHECK:CAMELCASE: Avoid CamelCase: <myIsr>
#13368: FILE: drivers/staging/et131x/et131x_isr.c:360:
+			MI_ISR_t myIsr;

WARNING:SPLIT_STRING: quoted string split across lines
#13384: FILE: drivers/staging/et131x/et131x_isr.c:376:
+					    "Device is in COMA mode, "
+					    "need to wake up\n");

CHECK:SPACING: No space is necessary after a cast
#13391: FILE: drivers/staging/et131x/et131x_isr.c:383:
+			MiRead(pAdapter, (uint8_t) offsetof(MI_REGS_t, isr),

CHECK:SPACING: No space is necessary after a cast
#13396: FILE: drivers/staging/et131x/et131x_isr.c:388:
+				       (uint8_t) offsetof(MI_REGS_t, bmsr),

WARNING:SPLIT_STRING: quoted string split across lines
#13405: FILE: drivers/staging/et131x/et131x_isr.c:397:
+					    "Bmsr.value = 0x%04x,"
+					    "Bmsr_ints.value = 0x%04x\n",

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#13481: FILE: drivers/staging/et131x/et131x_isr.c:473:
+			 * This means a timeout has occured on a read or
 			                            ^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#13493: FILE: drivers/staging/et131x/et131x_isr.c:485:
+	if (pAdapter->PoMgmt.PowerState == NdisDeviceStateD0) {
+		et131x_enable_interrupts(pAdapter);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13503: FILE: drivers/staging/et131x/et131x_isr.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13507: FILE: drivers/staging/et131x/et131x_isr.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13525: FILE: drivers/staging/et131x/et131x_isr.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13546: FILE: drivers/staging/et131x/et131x_isr.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13574: FILE: drivers/staging/et131x/et131x_netdev.c:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13578: FILE: drivers/staging/et131x/et131x_netdev.c:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13595: FILE: drivers/staging/et131x/et131x_netdev.c:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#13616: FILE: drivers/staging/et131x/et131x_netdev.c:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#13649: FILE: drivers/staging/et131x/et131x_netdev.c:76:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#13651: FILE: drivers/staging/et131x/et131x_netdev.c:78:
+#include <asm/bitops.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13676: FILE: drivers/staging/et131x/et131x_netdev.c:103:
+int et131x_open(struct net_device *netdev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13677: FILE: drivers/staging/et131x/et131x_netdev.c:104:
+int et131x_close(struct net_device *netdev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13678: FILE: drivers/staging/et131x/et131x_netdev.c:105:
+int et131x_ioctl(struct net_device *netdev, struct ifreq *reqbuf, int cmd);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13679: FILE: drivers/staging/et131x/et131x_netdev.c:106:
+void et131x_multicast(struct net_device *netdev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13680: FILE: drivers/staging/et131x/et131x_netdev.c:107:
+int et131x_tx(struct sk_buff *skb, struct net_device *netdev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13681: FILE: drivers/staging/et131x/et131x_netdev.c:108:
+void et131x_tx_timeout(struct net_device *netdev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13682: FILE: drivers/staging/et131x/et131x_netdev.c:109:
+int et131x_change_mtu(struct net_device *netdev, int new_mtu);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13683: FILE: drivers/staging/et131x/et131x_netdev.c:110:
+int et131x_set_mac_addr(struct net_device *netdev, void *new_mac);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13684: FILE: drivers/staging/et131x/et131x_netdev.c:111:
+void et131x_vlan_rx_register(struct net_device *netdev, struct vlan_group *grp);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13685: FILE: drivers/staging/et131x/et131x_netdev.c:112:
+void et131x_vlan_rx_add_vid(struct net_device *netdev, uint16_t vid);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13686: FILE: drivers/staging/et131x/et131x_netdev.c:113:
+void et131x_vlan_rx_kill_vid(struct net_device *netdev, uint16_t vid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!netdev"
#13706: FILE: drivers/staging/et131x/et131x_netdev.c:133:
+	if (netdev == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#13956: FILE: drivers/staging/et131x/et131x_netdev.c:383:
+	uint32_t filter = adapter->PacketFilter;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#14033: FILE: drivers/staging/et131x/et131x_netdev.c:460:
+	uint32_t PacketFilter = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#14034: FILE: drivers/staging/et131x/et131x_netdev.c:461:
+	uint32_t count;

WARNING:TYPO_SPELLING: 'becuase' may be misspelled - perhaps 'because'?
#14048: FILE: drivers/staging/et131x/et131x_netdev.c:475:
+	/* Clear the 'multicast' flag locally; becuase we only have a single
 	                                       ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#14077: FILE: drivers/staging/et131x/et131x_netdev.c:504:
+			    "ACCEPT ALL MULTICAST for now, as there's more Multicast "
+			    "addresses than the HW supports\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pMpTcb"
#14209: FILE: drivers/staging/et131x/et131x_netdev.c:636:
+	if (pMpTcb != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <txDmaComplete>
#14214: FILE: drivers/staging/et131x/et131x_netdev.c:641:
+			TX_STATUS_BLOCK_t txDmaComplete =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pAdapter->TxRing.pTxStatusVa
#14215: FILE: drivers/staging/et131x/et131x_netdev.c:642:
+			    *(pAdapter->TxRing.pTxStatusVa);

CHECK:CAMELCASE: Avoid CamelCase: <pDesc>
#14216: FILE: drivers/staging/et131x/et131x_netdev.c:643:
+			PTX_DESC_ENTRY_t pDesc =

CHECK:CAMELCASE: Avoid CamelCase: <StuckDescriptors>
#14220: FILE: drivers/staging/et131x/et131x_netdev.c:647:
+			TX_DESC_ENTRY_t StuckDescriptors[10];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#14321: FILE: drivers/staging/et131x/et131x_netdev.c:748:
+	if (MP_TEST_FLAG(adapter, fMP_ADAPTER_INTERRUPT_IN_USE)) {
+		et131x_enable_interrupts(adapter);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!adapter"
#14355: FILE: drivers/staging/et131x/et131x_netdev.c:782:
+	if (adapter == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#14384: FILE: drivers/staging/et131x/et131x_netdev.c:811:
+	printk("%s: Setting MAC address to %02x:%02x:%02x:%02x:%02x:%02x\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#14416: FILE: drivers/staging/et131x/et131x_netdev.c:843:
+	if (MP_TEST_FLAG(adapter, fMP_ADAPTER_INTERRUPT_IN_USE)) {
+		et131x_enable_interrupts(adapter);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14436: FILE: drivers/staging/et131x/et131x_netdev.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#14440: FILE: drivers/staging/et131x/et131x_netdev.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#14458: FILE: drivers/staging/et131x/et131x_netdev.h:23:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#14479: FILE: drivers/staging/et131x/et131x_netdev.h:44:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#14506: FILE: drivers/staging/et131x/et131x_version.h:1:
+/*

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#14510: FILE: drivers/staging/et131x/et131x_version.h:5:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#14527: FILE: drivers/staging/et131x/et131x_version.h:22:
+ * Copyright © 2005 Agere Systems Inc.
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#14548: FILE: drivers/staging/et131x/et131x_version.h:43:
+ * THIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
                              ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218395.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 98 errors, 413 warnings, 898 checks, 14268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218395.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
