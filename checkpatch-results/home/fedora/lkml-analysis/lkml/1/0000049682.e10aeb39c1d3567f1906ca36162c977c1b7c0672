WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: security/apparmor/include/policy_unpack.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: security/apparmor/policy_unpack.c:1:
+/*

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#122: FILE: security/apparmor/policy_unpack.c:37:
+ * backwards compatability.
              ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#194: FILE: security/apparmor/policy_unpack.c:109:
+	size = le16_to_cpu(get_unaligned((u16 *) e->pos));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#207: FILE: security/apparmor/policy_unpack.c:122:
+	if (*(u8 *) e->pos != code)

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#225: FILE: security/apparmor/policy_unpack.c:140:
+ * returns %0 if either match failes, the read head does not move
                               ^^^^^^

CHECK:SPACING: No space is necessary after a cast
#264: FILE: security/apparmor/policy_unpack.c:179:
+			*data = le16_to_cpu(get_unaligned((u16 *) e->pos));

CHECK:SPACING: No space is necessary after a cast
#277: FILE: security/apparmor/policy_unpack.c:192:
+			*data = le32_to_cpu(get_unaligned((u32 *) e->pos));

CHECK:SPACING: No space is necessary after a cast
#290: FILE: security/apparmor/policy_unpack.c:205:
+			*data = le64_to_cpu(get_unaligned((u64 *) e->pos));

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: security/apparmor/policy_unpack.c:216:
+		int size;
+		if (!aa_inbounds(e, sizeof(u16)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#303: FILE: security/apparmor/policy_unpack.c:218:
+		size = (int)le16_to_cpu(get_unaligned((u16 *) e->pos));

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: security/apparmor/policy_unpack.c:229:
+		u32 size;
+		if (!aa_inbounds(e, sizeof(u32)))

CHECK:SPACING: No space is necessary after a cast
#316: FILE: security/apparmor/policy_unpack.c:231:
+		size = le32_to_cpu(get_unaligned((u32 *) e->pos));

CHECK:SPACING: No space is necessary after a cast
#318: FILE: security/apparmor/policy_unpack.c:233:
+		if (aa_inbounds(e, (size_t) size)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: security/apparmor/policy_unpack.c:305:
+			size_t pad = ALIGN(sz, 8) - sz;
+			error = unpack_dfa(dfa, blob + pad, size - pad);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#418: FILE: security/apparmor/policy_unpack.c:333:
+		profile->file.trans.table = kzalloc(sizeof(char *) * size,
+						    GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: security/apparmor/policy_unpack.c:341:
+			char *tmp;
+			if (!unpack_dynstring(e, &tmp, NULL))

WARNING:TYPO_SPELLING: 'seperating' may be misspelled - perhaps 'separating'?
#430: FILE: security/apparmor/policy_unpack.c:345:
+			 * \0 seperating the profile ns name from the profile
 			      ^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: security/apparmor/policy_unpack.c:360:
+		int i;
+		for (i = 0; i < profile->file.trans.size; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: security/apparmor/policy_unpack.c:375:
+		u32 tmp = 0;
+		if (!unpack_u32(e, &tmp, NULL))

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: security/apparmor/policy_unpack.c:384:
+			u64 tmp = 0;
+			if (!unpack_u64(e, &tmp, NULL))

CHECK:SPACING: No space is necessary after a cast
#544: FILE: security/apparmor/policy_unpack.c:459:
+		if (((u64) profile->mmap_min_addr) == tmp64) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.allowed.cap[0]
#552: FILE: security/apparmor/policy_unpack.c:467:
+	if (!unpack_u32(e, &(profile->caps.allowed.cap[0]), NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.audit.cap[0]
#554: FILE: security/apparmor/policy_unpack.c:469:
+	if (!unpack_u32(e, &(profile->caps.audit.cap[0]), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.quiet.cap[0]
#556: FILE: security/apparmor/policy_unpack.c:471:
+	if (!unpack_u32(e, &(profile->caps.quiet.cap[0]), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.set.cap[0]
#558: FILE: security/apparmor/policy_unpack.c:473:
+	if (!unpack_u32(e, &(profile->caps.set.cap[0]), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.allowed.cap[1]
#563: FILE: security/apparmor/policy_unpack.c:478:
+		if (!unpack_u32(e, &(profile->caps.allowed.cap[1]), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.audit.cap[1]
#565: FILE: security/apparmor/policy_unpack.c:480:
+		if (!unpack_u32(e, &(profile->caps.audit.cap[1]), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.quiet.cap[1]
#567: FILE: security/apparmor/policy_unpack.c:482:
+		if (!unpack_u32(e, &(profile->caps.quiet.cap[1]), NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->caps.set.cap[1]
#569: FILE: security/apparmor/policy_unpack.c:484:
+		if (!unpack_u32(e, &(profile->caps.set.cap[1]), NULL))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000049682.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 17 checks, 632 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000049682.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
