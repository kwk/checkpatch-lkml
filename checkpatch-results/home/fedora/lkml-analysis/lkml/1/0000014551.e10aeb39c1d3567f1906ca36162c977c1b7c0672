WARNING:SPACING: Unnecessary space before function pointer arguments
#69: FILE: include/linux/perf_event.h:524:
+	void (*init)			(struct perf_event *event);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#70: FILE: include/linux/perf_event.h:525:
+	unsigned int (*poll)            (struct perf_event *event, struct file* file, poll_table *wait);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#70: FILE: include/linux/perf_event.h:525:
+	unsigned int (*poll)            (struct perf_event *event, struct file* file, poll_table *wait);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#70: FILE: include/linux/perf_event.h:525:
+	unsigned int (*poll)            (struct perf_event *event, struct file* file, poll_table *wait);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#79: FILE: include/linux/perf_event.h:833:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/perf_event.h:834:
+extern void __perf_sw_event(u32, s64, int, struct pt_regs *, u64, 
+			struct task_struct* task, int cpu);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#80: FILE: include/linux/perf_event.h:834:
+			struct task_struct* task, int cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/perf_event.h:837:
+perf_sw_event_target(u32 event_id, s64 nr, int nmi, struct pt_regs *regs,
+		u64 addr, struct task_struct* task, int cpu)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#83: FILE: include/linux/perf_event.h:837:
+		u64 addr, struct task_struct* task, int cpu)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/sched.h:141:
+extern unsigned long nr_running_cpu(int cpu);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#118: FILE: kernel/perf_event.c:746:
+static void __perf_event_init_event(struct perf_event* event)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#122: FILE: kernel/perf_event.c:750:
+static void perf_event_init_event(struct perf_event* event)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#162: FILE: kernel/perf_event.c:1953:
+	/*if (events)
+		printk("Events: POLLIN=%u\n", events&POLLIN);*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#162: FILE: kernel/perf_event.c:1953:
+		printk("Events: POLLIN=%u\n", events&POLLIN);*/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#168: FILE: kernel/perf_event.c:1958:
+		if (count <= event->attr.max_threshold)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#174: FILE: kernel/perf_event.c:1963:
+		else //if (count > event->attr.max_threshold)
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#174: FILE: kernel/perf_event.c:1963:
+		}
+		else //if (count > event->attr.max_threshold)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#192: FILE: kernel/perf_event.c:1980:
+static unsigned int perf_poll(struct file* file, poll_table *wait)

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: kernel/perf_event.c:1983:
+	struct perf_event *event = file->private_data;
+	if (event->pmu->poll)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#210: FILE: kernel/perf_event.c:2607:
 	else
+	{

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#260: FILE: kernel/perf_event.c:3916:
+	BUG_ON(perf_event_read(event) == (u64)-1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#263: FILE: kernel/perf_event.c:3919:
+		if (event->ctx->task)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#266: FILE: kernel/perf_event.c:3922:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#266: FILE: kernel/perf_event.c:3922:
+		}
+		else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#268: FILE: kernel/perf_event.c:3924:
+			if (atomic64_read(&event->count) != nr_running_cpu(event->cpu))
+			{

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#270: FILE: kernel/perf_event.c:3926:
+				printk("count = %lu <-> nr_running_cpu = %lu", atomic64_read(&event->count), nr_running_cpu(event->cpu));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#270: FILE: kernel/perf_event.c:3926:
+				printk("count = %lu <-> nr_running_cpu = %lu", atomic64_read(&event->count), nr_running_cpu(event->cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: kernel/perf_event.c:3927:
+				BUG();

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#284: FILE: kernel/perf_event.c:4000:
+	if (event->cpu != -1 && event->cpu != smp_processor_id() && event_id != PERF_COUNT_SW_RUNNABLE_TASKS)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#294: FILE: kernel/perf_event.c:4075:
+				    struct task_struct* task,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#320: FILE: kernel/perf_event.c:4094:
+			    struct task_struct* task, int cpu)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#348: FILE: kernel/perf_event.c:4138:
+static int perf_rt_enable(struct perf_event* event)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#353: FILE: kernel/perf_event.c:4143:
+static void perf_rt_init_event(struct perf_event* event)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#355: FILE: kernel/perf_event.c:4145:
+	if (event->ctx->task)
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#359: FILE: kernel/perf_event.c:4149:
+	}
+	else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#363: FILE: kernel/perf_event.c:4153:
+static void perf_rt_disable(struct perf_event* event)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#368: FILE: kernel/perf_event.c:4158:
+static void perf_rt_unthrottle(struct perf_event* event)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#373: FILE: kernel/perf_event.c:4163:
+static void perf_rt_update(struct perf_event* event)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: kernel/perf_event.c:4165:
+^I/* Nothing to do */^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#378: FILE: kernel/perf_event.c:4168:
+static u64 perf_event_read_parent(struct perf_event* event)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#417: FILE: kernel/perf_event.c:4525:
+	BUG_ON(event->parent && __perf_event_read(event) != (u64)0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: kernel/perf_event.c:4529:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#444: FILE: kernel/perf_event.c:4876:
+	if (attr.threshold && (attr.freq || attr.watermark || attr.min_threshold > attr.max_threshold))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#473: FILE: kernel/sched.c:1983:
+	perf_sw_event_target(PERF_COUNT_SW_RUNNABLE_TASKS, -1, 1, task_pt_regs(p), 0, p, cpu_of(rq));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000014551.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 19 warnings, 5 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000014551.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
