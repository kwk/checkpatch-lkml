WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
update-coredump-path-in-kernel-to-not-check-coredump-rlim-if-core_pattern-is-a-pipe.patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: arch/mips/kernel/irixelf.c:47:
+                          struct file *file, int limit);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: arch/mips/kernel/irixelf.c:47:
+                          struct file *file, int limit);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#71: FILE: arch/mips/kernel/irixelf.c:1091:
+static int irix_core_dump(long signr, struct pt_regs * regs, struct file *file, int limit)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#102: FILE: arch/sparc64/kernel/binfmt_aout32.c:105:
+	if ((dump.u_dsize+dump.u_ssize) > limit)
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dump.u_ssize'
#108: FILE: arch/sparc64/kernel/binfmt_aout32.c:109:
+	if ((dump.u_ssize) > limit)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: arch/x86_64/ia32/ia32_aout.c:43:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, u32 limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: arch/x86_64/ia32/ia32_aout.c:151:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, u32 limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#140: FILE: arch/x86_64/ia32/ia32_aout.c:171:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#140: FILE: arch/x86_64/ia32/ia32_aout.c:171:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: arch/x86_64/ia32/ia32_aout.c:175:
+	if ((dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#159: FILE: fs/binfmt_aout.c:34:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, u32 limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: fs/binfmt_aout.c:91:
+static int aout_core_dump(long signr, struct pt_regs * regs, struct file *file, u32 limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: fs/binfmt_aout.c:126:
+	if ((dump.u_dsize+dump.u_ssize) > limit)
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: fs/binfmt_aout.c:129:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: fs/binfmt_aout.c:129:
+	if ((dump.u_dsize+dump.u_ssize+1) * PAGE_SIZE > limit)
 	                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dump.u_ssize'
#191: FILE: fs/binfmt_aout.c:135:
+	if ((dump.u_ssize) > limit)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: fs/binfmt_aout.c:138:
+	if ((dump.u_ssize+1) * PAGE_SIZE > limit)
 	                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/binfmt_flat.c:78:
+static int flat_core_dump(long signr, struct pt_regs * regs, struct file *file, u32 limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: fs/binfmt_flat.c:93:
+static int flat_core_dump(long signr, struct pt_regs * regs, struct file *file, u32 limit)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: fs/binfmt_som.c:47:
+static int som_core_dump(long signr, struct pt_regs * regs, u32 limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: include/linux/binfmts.h:70:
+	int (*core_dump)(long signr, struct pt_regs * regs, struct file * file, u32 limit);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: include/linux/binfmts.h:70:
+	int (*core_dump)(long signr, struct pt_regs * regs, struct file * file, u32 limit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000402248.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 2 warnings, 10 checks, 225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000402248.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
