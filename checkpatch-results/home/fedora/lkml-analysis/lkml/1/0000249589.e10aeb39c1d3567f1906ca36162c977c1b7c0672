WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#41: 
equivalent CPU table, which comes seperately, as opposed
                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'provice' may be misspelled - perhaps 'provide'?
#44: 
Kconfig and Makefile have been changed provice config
                                       ^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: arch/x86/Kconfig:817:
+config MICROCODE_AMD
+       tristate "AMD microcode patch loading support"
+       depends on MICROCODE
+       select FW_LOADER
+       --help---
+         If you select this option, microcode patch loading support for AMD
+	 processors will be enabled.
+
+	 This driver is only available as a module: the module
+	 will be called microcode_intel.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#107: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: arch/x86/kernel/microcode_amd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'unter' may be misspelled - perhaps 'under'?
#124: FILE: arch/x86/kernel/microcode_amd.c:13:
+ *  Licensed unter the terms of the GNU General Public
              ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#126: FILE: arch/x86/kernel/microcode_amd.c:15:
+ *  License version 2. See file COPYING for details.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#148: FILE: arch/x86/kernel/microcode_amd.c:37:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#149: FILE: arch/x86/kernel/microcode_amd.c:38:
+#include <asm/processor.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#170: FILE: arch/x86/kernel/microcode_amd.c:59:
+extern int microcode_init(void *opaque, struct module *module);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#171: FILE: arch/x86/kernel/microcode_amd.c:60:
+extern void microcode_exit(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#177: FILE: arch/x86/kernel/microcode_amd.c:66:
+extern struct mutex (microcode_mutex);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#181: FILE: arch/x86/kernel/microcode_amd.c:70:
+extern struct ucode_cpu_info ucode_cpu_info[NR_CPUS];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: arch/x86/kernel/microcode_amd.c:78:
+	BUG_ON(raw_smp_processor_id() != cpu);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#196: FILE: arch/x86/kernel/microcode_amd.c:85:
+		printk(KERN_ERR "microcode: CPU%d not a capable AMD processor\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#206: FILE: arch/x86/kernel/microcode_amd.c:95:
+	printk(KERN_INFO "microcode: collect_cpu_info_amd : patch_id=0x%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'collect_cpu_info_amd', this function's name, in a string
#206: FILE: arch/x86/kernel/microcode_amd.c:95:
+	printk(KERN_INFO "microcode: collect_cpu_info_amd : patch_id=0x%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: arch/x86/kernel/microcode_amd.c:111:
+	BUG_ON(cpu != raw_smp_processor_id());

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#227: FILE: arch/x86/kernel/microcode_amd.c:116:
+        /* cases. This is done by checking if there alread is a equivalent */
                                                     ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: arch/x86/kernel/microcode_amd.c:116:
+        /* cases. This is done by checking if there alread is a equivalent */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: arch/x86/kernel/microcode_amd.c:119:
+        /* Since we ignore all checks. The error case in which going through */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: arch/x86/kernel/microcode_amd.c:120:
+        /* firmware loading and that table is not loaded has already been */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!equiv_cpu_table"
#233: FILE: arch/x86/kernel/microcode_amd.c:122:
+	if (equiv_cpu_table == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#234: FILE: arch/x86/kernel/microcode_amd.c:123:
+		printk(KERN_INFO "microcode: CPU%d microcode update with "

WARNING:SPLIT_STRING: quoted string split across lines
#235: FILE: arch/x86/kernel/microcode_amd.c:124:
+		printk(KERN_INFO "microcode: CPU%d microcode update with "
+		       "version 0x%x (current=0x%x)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#251: FILE: arch/x86/kernel/microcode_amd.c:140:
+		printk(KERN_ERR "microcode: CPU%d cpu_id "

WARNING:SPLIT_STRING: quoted string split across lines
#252: FILE: arch/x86/kernel/microcode_amd.c:141:
+		printk(KERN_ERR "microcode: CPU%d cpu_id "
+		       "not found in equivalent cpu table \n", cpu);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#252: FILE: arch/x86/kernel/microcode_amd.c:141:
+		       "not found in equivalent cpu table \n", cpu);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->processor_rev_id[0]'
#256: FILE: arch/x86/kernel/microcode_amd.c:145:
+	if ((mc_header->processor_rev_id[0]) != (equiv_cpu_id & 0xff)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: arch/x86/kernel/microcode_amd.c:146:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#259: FILE: arch/x86/kernel/microcode_amd.c:148:
+			"microcode: CPU%d patch does not match "
+			"(patch is %x, cpu extended is %x) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#259: FILE: arch/x86/kernel/microcode_amd.c:148:
+			"(patch is %x, cpu extended is %x) \n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->processor_rev_id[1]'
#265: FILE: arch/x86/kernel/microcode_amd.c:154:
+	if ((mc_header->processor_rev_id[1]) != ((equiv_cpu_id >> 16) & 0xff)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#266: FILE: arch/x86/kernel/microcode_amd.c:155:
+		printk(KERN_ERR "microcode: CPU%d patch does not match "

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: arch/x86/kernel/microcode_amd.c:156:
+		printk(KERN_ERR "microcode: CPU%d patch does not match "
+			"(patch is %x, cpu base id is %x) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#267: FILE: arch/x86/kernel/microcode_amd.c:156:
+			"(patch is %x, cpu base id is %x) \n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!nb_pci_dev'
#279: FILE: arch/x86/kernel/microcode_amd.c:168:
+		if ((!nb_pci_dev) ||
+		    (mc_header->nb_rev_id != nb_pci_dev->revision)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->nb_rev_id != nb_pci_dev->revision'
#279: FILE: arch/x86/kernel/microcode_amd.c:168:
+		if ((!nb_pci_dev) ||
+		    (mc_header->nb_rev_id != nb_pci_dev->revision)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#281: FILE: arch/x86/kernel/microcode_amd.c:170:
+			printk(KERN_ERR "microcode: CPU%d NB mismatch \n", cpu);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#281: FILE: arch/x86/kernel/microcode_amd.c:170:
+			printk(KERN_ERR "microcode: CPU%d NB mismatch \n", cpu);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sb_pci_dev'
#293: FILE: arch/x86/kernel/microcode_amd.c:182:
+		if ((!sb_pci_dev) ||
+		    (mc_header->sb_rev_id != sb_pci_dev->revision)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->sb_rev_id != sb_pci_dev->revision'
#293: FILE: arch/x86/kernel/microcode_amd.c:182:
+		if ((!sb_pci_dev) ||
+		    (mc_header->sb_rev_id != sb_pci_dev->revision)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#295: FILE: arch/x86/kernel/microcode_amd.c:184:
+			printk(KERN_ERR "microcode: CPU%d SB mismatch \n", cpu);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#295: FILE: arch/x86/kernel/microcode_amd.c:184:
+			printk(KERN_ERR "microcode: CPU%d SB mismatch \n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#305: FILE: arch/x86/kernel/microcode_amd.c:194:
+	printk(KERN_INFO "microcode: CPU%d found a matching microcode "

WARNING:SPLIT_STRING: quoted string split across lines
#306: FILE: arch/x86/kernel/microcode_amd.c:195:
+	printk(KERN_INFO "microcode: CPU%d found a matching microcode "
+	       "update with version 0x%x (current=0x%x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#314: FILE: arch/x86/kernel/microcode_amd.c:203:
+		printk(KERN_ERR "microcode: error, can't allocate memory\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: arch/x86/kernel/microcode_amd.c:225:
+	BUG_ON(cpu_num != cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uci->mc.mc_amd"
#338: FILE: arch/x86/kernel/microcode_amd.c:227:
+	if (uci->mc.mc_amd == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uci->mc.mc_amd->hdr.data_code
#344: FILE: arch/x86/kernel/microcode_amd.c:233:
+			      &(uci->mc.mc_amd->hdr.data_code)) >> 32);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uci->mc.mc_amd->hdr.data_code
#346: FILE: arch/x86/kernel/microcode_amd.c:235:
+			      &(uci->mc.mc_amd->hdr.data_code)) & 0xffffffffL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#360: FILE: arch/x86/kernel/microcode_amd.c:249:
+		printk(KERN_ERR "microcode: CPU%d update from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#361: FILE: arch/x86/kernel/microcode_amd.c:250:
+		printk(KERN_ERR "microcode: CPU%d update from revision "
+		       "0x%x to 0x%x failed\n", cpu_num,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#366: FILE: arch/x86/kernel/microcode_amd.c:255:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#367: FILE: arch/x86/kernel/microcode_amd.c:256:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "
+	       "0x%x to 0x%x \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#367: FILE: arch/x86/kernel/microcode_amd.c:256:
+	       "0x%x to 0x%x \n",

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#375: FILE: arch/x86/kernel/microcode_amd.c:264:
+extern unsigned int user_buffer_size;   /* it's size */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#386: FILE: arch/x86/kernel/microcode_amd.c:275:
+		printk(KERN_ERR "microcode: error! Can not read user data\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#391: FILE: arch/x86/kernel/microcode_amd.c:280:
+		printk(KERN_ERR "microcode: error! Bad total size in microcode "

WARNING:SPLIT_STRING: quoted string split across lines
#392: FILE: arch/x86/kernel/microcode_amd.c:281:
+		printk(KERN_ERR "microcode: error! Bad total size in microcode "
+		       "data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#401: FILE: arch/x86/kernel/microcode_amd.c:290:
+		printk(KERN_ERR "microcode: error! Can not read user data\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: arch/x86/kernel/microcode_amd.c:301:
+static long get_next_ucode_from_buffer_amd(void **mc, void *buf,
+				       unsigned long size, long offset)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#423: FILE: arch/x86/kernel/microcode_amd.c:312:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#424: FILE: arch/x86/kernel/microcode_amd.c:313:
+		printk(KERN_ERR "microcode: error! "
+		       "Wrong microcode payload type field\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#428: FILE: arch/x86/kernel/microcode_amd.c:317:
+	mc_header = (struct microcode_header_amd *)(&buf_pos[offset+8]);
 	                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#430: FILE: arch/x86/kernel/microcode_amd.c:319:
+	total_size = (unsigned long) (buf_pos[offset+4] +

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#430: FILE: arch/x86/kernel/microcode_amd.c:319:
+	total_size = (unsigned long) (buf_pos[offset+4] +
 	                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: arch/x86/kernel/microcode_amd.c:320:
+				      (buf_pos[offset+5] << 8));
 				                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#433: FILE: arch/x86/kernel/microcode_amd.c:322:
+	printk(KERN_ERR "microcode: size %lu, total_size %lu, offset %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: arch/x86/kernel/microcode_amd.c:323:
+	printk(KERN_ERR "microcode: size %lu, total_size %lu, offset %ld\n",
+		size, total_size, offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#437: FILE: arch/x86/kernel/microcode_amd.c:326:
+		printk(KERN_ERR "microcode: error! Bad data in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#445: FILE: arch/x86/kernel/microcode_amd.c:334:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#446: FILE: arch/x86/kernel/microcode_amd.c:335:
+		printk(KERN_ERR "microcode: error! "
+		       "Can not allocate memory for microcode patch\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#463: FILE: arch/x86/kernel/microcode_amd.c:352:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#464: FILE: arch/x86/kernel/microcode_amd.c:353:
+		printk(KERN_ERR "microcode: error! "
+		       "Wrong microcode equivalnet cpu table type field\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#469: FILE: arch/x86/kernel/microcode_amd.c:358:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#470: FILE: arch/x86/kernel/microcode_amd.c:359:
+		printk(KERN_ERR "microcode: error! "
+		       "Wrong microcode equivalnet cpu table length\n");

CHECK:SPACING: No space is necessary after a cast
#474: FILE: arch/x86/kernel/microcode_amd.c:363:
+	equiv_cpu_table = (struct equiv_cpu_entry *) vmalloc(size);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#474: FILE: arch/x86/kernel/microcode_amd.c:363:
+	equiv_cpu_table = (struct equiv_cpu_entry *) vmalloc(size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: arch/x86/kernel/microcode_amd.c:386:
+	BUG_ON(cpu != raw_smp_processor_id());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#502: FILE: arch/x86/kernel/microcode_amd.c:391:
+		printk(KERN_ERR "microcode: ucode data file %s load failed\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#507: FILE: arch/x86/kernel/microcode_amd.c:396:
+	buf_pos = buf = firmware->data;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#511: FILE: arch/x86/kernel/microcode_amd.c:400:
+		printk(KERN_ERR "microcode: error! Wrong microcode patch file magic\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#518: FILE: arch/x86/kernel/microcode_amd.c:407:
+		printk(KERN_ERR "microcode: installing equivalent cpu table failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: arch/x86/kernel/microcode_amd.c:469:
+		printk(KERN_ERR "microcode: Could not apply microcode to CPU%d:"

WARNING:SPLIT_STRING: quoted string split across lines
#581: FILE: arch/x86/kernel/microcode_amd.c:470:
+		printk(KERN_ERR "microcode: Could not apply microcode to CPU%d:"
+		       " rev=0x%x\n",

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#599: FILE: arch/x86/kernel/microcode_amd.c:488:
+static struct microcode_ops microcode_amd_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 64 warnings, 20 checks, 556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
