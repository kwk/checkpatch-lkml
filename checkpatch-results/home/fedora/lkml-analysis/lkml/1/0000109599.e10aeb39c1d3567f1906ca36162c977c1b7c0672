WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#54: 
> - In bdi_writeback_all(), in the race occurence of a work allocation
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#138: 
Content-Type: text/x-patch; name=writeback-v10_port.patch; charset=ISO-8859-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: fs/btrfs/disk-io.c:1365:
+	err = bdi_register(bdi, NULL, "btrfs-%d",
+				atomic_inc_return(&btrfs_bdi_num));

CHECK:SPACING: No space is necessary after a cast
#347: FILE: fs/fs-writeback.c:61:
+	return (struct super_block *) (work->sb_data & ~1UL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#361: FILE: fs/fs-writeback.c:74:
+	work->sb_data = (unsigned long) sb;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: fs/fs-writeback.c:167:
+		BUG_ON(!work->seen);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: fs/fs-writeback.c:169:
+		BUG_ON(!bdi->wb_cnt);

CHECK:BRACES: braces {} should be used on all arms of this statement
#476: FILE: fs/fs-writeback.c:184:
+	if (!bdi_wblist_needs_lock(bdi))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#478: FILE: fs/fs-writeback.c:186:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#510: FILE: fs/fs-writeback.c:218:
+	if (unlikely(list_empty_careful(&bdi->wb_list))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#514: FILE: fs/fs-writeback.c:222:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#774: FILE: fs/fs-writeback.c:482:
+		if (pages_written)
[...]
+		else if (wait_jiffies != -1UL) {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#902: FILE: fs/fs-writeback.c:694:
+				printk("bdi-%s not registered\n", bdi->name);

CHECK:BRACES: Unbalanced braces around else statement
#1153: FILE: fs/fs-writeback.c:1056:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: fs/fs-writeback.c:1089:
+void generic_sync_sb_inodes(struct super_block *sb,
+				struct writeback_control *wbc)

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1370: FILE: fs/ubifs/super.c:1926:
+	c->bdi.name = "ubifs",
 	c->bdi.capabilities = BDI_CAP_MAP_COPY;

WARNING:SPACING: Unnecessary space before function pointer arguments
#1547: FILE: include/linux/fs.h:1560:
+	struct bdi_writeback *(*inode_get_wb) (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1547: FILE: include/linux/fs.h:1560:
+	struct bdi_writeback *(*inode_get_wb) (struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1555: FILE: include/linux/fs.h:2069:
+extern void generic_sync_bdi_inodes(struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#1555: FILE: include/linux/fs.h:2069:
+extern void generic_sync_bdi_inodes(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1556: FILE: include/linux/fs.h:2070:
+extern void generic_sync_bdi_inodes(struct super_block *sb,
+				struct writeback_control *);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1680: FILE: mm/backing-dev.c:65:
+	nr_wb = nr_dirty = nr_io = nr_more_io = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1727: FILE: mm/backing-dev.c:233:
+	BUG_ON(!sync_supers_tsk);

WARNING:TYPO_SPELLING: 'receipient' may be misspelled - perhaps 'recipient'?
#1767: FILE: mm/backing-dev.c:274:
+	 * least one receipient.
 	             ^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1769: FILE: mm/backing-dev.c:276:
+	if (wb == &bdi->wb)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1771: FILE: mm/backing-dev.c:278:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1799: FILE: mm/backing-dev.c:306:
+	if (!test_and_set_bit(BDI_wb_alloc, &bdi->state))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1801: FILE: mm/backing-dev.c:308:
+	else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wb)...) over kmalloc(sizeof(struct bdi_writeback)...)
#1802: FILE: mm/backing-dev.c:309:
+		wb = kmalloc(sizeof(struct bdi_writeback), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#1889: FILE: mm/backing-dev.c:396:
+	if (!bdi_wblist_needs_lock(bdi))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1891: FILE: mm/backing-dev.c:398:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2016: FILE: mm/backing-dev.c:523:
+		wb->task = kthread_run(bdi_start_fn, wb, "flush-%s",
+					dev_name(bdi->dev));

WARNING:SPACING: missing space after return type
#2047: FILE: mm/backing-dev.c:554:
+				     int(*func)(struct backing_dev_info *))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2053: FILE: mm/backing-dev.c:560:
+		printk("bdi %p/%s is not registered!\n", bdi, bdi->name);

WARNING:TYPO_SPELLING: 'simultanous' may be misspelled - perhaps 'simultaneous'?
#2059: FILE: mm/backing-dev.c:566:
+	 * abort if we two or more simultanous calls to
 	                           ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#2060: FILE: mm/backing-dev.c:567:
+	 * bdi_add_default_flusher_task() occured, further additions will block
 	                                  ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2078: FILE: mm/backing-dev.c:585:
+	wait_on_bit_lock(&bdi->state, BDI_pending, bdi_sched_wait,
+				TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2142: FILE: mm/backing-dev.c:659:
+		wb->task = kthread_run(bdi_forker_task, wb, "bdi-%s",
+						dev_name(dev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2177: FILE: mm/backing-dev.c:698:
+	wait_on_bit(&bdi->state, BDI_pending, bdi_sched_wait,
+			TASK_UNINTERRUPTIBLE);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109599.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 24 checks, 2265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109599.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
