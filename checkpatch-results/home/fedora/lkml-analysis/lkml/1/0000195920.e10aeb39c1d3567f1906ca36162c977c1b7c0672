CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: arch/x86/include/asm/hw_irq.h:33:
+extern void perf_counter_interrupt(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: arch/x86/include/asm/intel_arch_perfmon.h:34:
+extern void init_hw_perf_counters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: arch/x86/include/asm/intel_arch_perfmon.h:35:
+extern void perf_counters_lapic_init(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: arch/x86/include/asm/pda.h:33:
+	unsigned apic_perf_irqs;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: arch/x86/kernel/cpu/perf_counter.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#324: FILE: arch/x86/kernel/cpu/perf_counter.c:35:
+#define COUNTER_OVERFLOW	(1ULL << 40)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#332: FILE: arch/x86/kernel/cpu/perf_counter.c:43:
+const int intel_perfmon_event_map[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: arch/x86/kernel/cpu/perf_counter.c:44:
+  [PERF_COUNT_CYCLES]^I^I^I= 0x003c,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: arch/x86/kernel/cpu/perf_counter.c:45:
+  [PERF_COUNT_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: arch/x86/kernel/cpu/perf_counter.c:46:
+  [PERF_COUNT_CACHE_REFERENCES]^I^I= 0x4f2e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: arch/x86/kernel/cpu/perf_counter.c:47:
+  [PERF_COUNT_CACHE_MISSES]^I^I= 0x412e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: arch/x86/kernel/cpu/perf_counter.c:48:
+  [PERF_COUNT_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: arch/x86/kernel/cpu/perf_counter.c:49:
+  [PERF_COUNT_BRANCH_MISSES]^I^I= 0x00c5,$

CHECK:SPACING: No space is necessary after a cast
#377: FILE: arch/x86/kernel/cpu/perf_counter.c:88:
+	hwc->next_count = -((s32) hwc->irq_period);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#521: FILE: arch/x86/kernel/cpu/perf_counter.c:232:
+	val32 = (s32) val;

CHECK:SPACING: No space is necessary after a cast
#552: FILE: arch/x86/kernel/cpu/perf_counter.c:263:
+	for_each_bit(bit, (unsigned long *) &status, nr_perf_counters) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#574: FILE: arch/x86/kernel/cpu/perf_counter.c:285:
+		if (irqdata->len > PERF_DATA_BUFLEN - sizeof(u64))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#576: FILE: arch/x86/kernel/cpu/perf_counter.c:287:
+		else {

CHECK:SPACING: No space is necessary after a cast
#577: FILE: arch/x86/kernel/cpu/perf_counter.c:288:
+			p = (u64 *) &irqdata->data[irqdata->len];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#618: FILE: arch/x86/kernel/cpu/perf_counter.c:329:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around eax.full
#632: FILE: arch/x86/kernel/cpu/perf_counter.c:343:
+	cpuid(10, &(eax.full), &ebx, &unused, &unused);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#636: FILE: arch/x86/kernel/cpu/perf_counter.c:347:
+	printk(KERN_INFO "Intel Performance Monitoring support detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#638: FILE: arch/x86/kernel/cpu/perf_counter.c:349:
+	printk(KERN_INFO "... version:      %d\n", eax.split.version_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#639: FILE: arch/x86/kernel/cpu/perf_counter.c:350:
+	printk(KERN_INFO "... num_counters: %d\n", eax.split.num_counters);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#643: FILE: arch/x86/kernel/cpu/perf_counter.c:354:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: arch/x86/kernel/cpu/perf_counter.c:355:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",
+			nr_perf_counters, MAX_COUNTERS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#646: FILE: arch/x86/kernel/cpu/perf_counter.c:357:
+	printk(KERN_INFO "... bit_width:    %d\n", eax.split.bit_width);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#647: FILE: arch/x86/kernel/cpu/perf_counter.c:358:
+	printk(KERN_INFO "... mask_length:  %d\n", eax.split.mask_length);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#678: FILE: arch/x86/kernel/irq.c:59:
+	seq_printf(p, "CNT: ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#681: FILE: arch/x86/kernel/irq.c:62:
+	seq_printf(p, "  Performance counter interrupts\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000195920.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 16 warnings, 13 checks, 567 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000195920.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
