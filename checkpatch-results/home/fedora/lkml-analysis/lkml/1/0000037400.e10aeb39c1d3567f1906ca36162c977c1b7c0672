ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: arch/arm/mach-msm/Makefile:9:
+obj-$(CONFIG_MACH_TROUT) += board-dream.o board-dream-gpio.o generic_gpio.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: arch/arm/mach-msm/board-dream-gpio.c:1:
+/* arch/arm/mach-msm/board-dream-gpio.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#82: FILE: arch/arm/mach-msm/board-dream-gpio.c:1:
+/* arch/arm/mach-msm/board-dream-gpio.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#104: FILE: arch/arm/mach-msm/board-dream-gpio.c:23:
+#include <asm/gpio.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#116: FILE: arch/arm/mach-msm/board-dream-gpio.c:35:
+static uint8_t dream_cpld_shadow[4] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#127: FILE: arch/arm/mach-msm/board-dream-gpio.c:46:
+};
+static uint8_t dream_int_mask[2] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#127: FILE: arch/arm/mach-msm/board-dream-gpio.c:46:
+static uint8_t dream_int_mask[2] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: arch/arm/mach-msm/board-dream-gpio.c:50:
+};
+static uint8_t dream_sleep_int_mask[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#131: FILE: arch/arm/mach-msm/board-dream-gpio.c:50:
+static uint8_t dream_sleep_int_mask[] = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#135: FILE: arch/arm/mach-msm/board-dream-gpio.c:54:
+};
+static int dream_suspended;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: arch/arm/mach-msm/board-dream-gpio.c:56:
+static int dream_gpio_read(struct gpio_chip *chip, unsigned n)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#139: FILE: arch/arm/mach-msm/board-dream-gpio.c:58:
+	uint8_t b;

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: arch/arm/mach-msm/board-dream-gpio.c:60:
+	int reg;
+	if (n >= DREAM_GPIO_VIRTUAL_BASE)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: arch/arm/mach-msm/board-dream-gpio.c:67:
+static uint8_t dream_gpio_write_shadow(unsigned n, unsigned on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: arch/arm/mach-msm/board-dream-gpio.c:67:
+static uint8_t dream_gpio_write_shadow(unsigned n, unsigned on)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#150: FILE: arch/arm/mach-msm/board-dream-gpio.c:69:
+	uint8_t b = 1U << (n & 7);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: arch/arm/mach-msm/board-dream-gpio.c:78:
+static int dream_gpio_write(struct gpio_chip *chip, unsigned n, unsigned on)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: arch/arm/mach-msm/board-dream-gpio.c:78:
+static int dream_gpio_write(struct gpio_chip *chip, unsigned n, unsigned on)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#163: FILE: arch/arm/mach-msm/board-dream-gpio.c:82:
+	uint8_t reg_val;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#166: FILE: arch/arm/mach-msm/board-dream-gpio.c:85:
+		printk(KERN_ERR "dream_gpio_write called on input %d\n", n);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dream_gpio_write', this function's name, in a string
#166: FILE: arch/arm/mach-msm/board-dream-gpio.c:85:
+		printk(KERN_ERR "dream_gpio_write called on input %d\n", n);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#167: FILE: arch/arm/mach-msm/board-dream-gpio.c:86:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#184: FILE: arch/arm/mach-msm/board-dream-gpio.c:103:
+static int dream_gpio_get_irq_num(struct gpio_chip *chip, unsigned int gpio, unsigned int *irqp, unsigned long *irqnumflagsp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#200: FILE: arch/arm/mach-msm/board-dream-gpio.c:119:
+	uint8_t mask = DREAM_INT_TO_MASK(irq);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#209: FILE: arch/arm/mach-msm/board-dream-gpio.c:128:
+	uint8_t reg_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#211: FILE: arch/arm/mach-msm/board-dream-gpio.c:130:
+	uint8_t mask = DREAM_INT_TO_MASK(irq);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#225: FILE: arch/arm/mach-msm/board-dream-gpio.c:144:
+	uint8_t reg_val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#227: FILE: arch/arm/mach-msm/board-dream-gpio.c:146:
+	uint8_t mask = DREAM_INT_TO_MASK(irq);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#242: FILE: arch/arm/mach-msm/board-dream-gpio.c:161:
+	uint8_t mask = DREAM_INT_TO_MASK(irq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#256: FILE: arch/arm/mach-msm/board-dream-gpio.c:175:
+	unsigned v;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#260: FILE: arch/arm/mach-msm/board-dream-gpio.c:179:
+	uint8_t int_mask;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#269: FILE: arch/arm/mach-msm/board-dream-gpio.c:188:
+			printk(KERN_ERR "dream_gpio_irq_handler: got masked "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dream_gpio_irq_handler', this function's name, in a string
#269: FILE: arch/arm/mach-msm/board-dream-gpio.c:188:
+			printk(KERN_ERR "dream_gpio_irq_handler: got masked "

WARNING:SPLIT_STRING: quoted string split across lines
#270: FILE: arch/arm/mach-msm/board-dream-gpio.c:189:
+			printk(KERN_ERR "dream_gpio_irq_handler: got masked "
+			       "interrupt: %d:%02x\n", bank, v & int_mask);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dream_init_gpio', this function's name, in a string
#342: FILE: arch/arm/mach-msm/board-dream-gpio.c:261:
+	pr_info("dream_init_gpio: cpld_usb_hw2_sw = %d\n", cpld_usb_h2w_sw);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#381: FILE: arch/arm/mach-msm/board-dream.c:27:
+#include <asm/gpio.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#563: FILE: arch/arm/mach-msm/board-dream.h:144:
+#define DREAM_GPIO_TO_INT(n) (((n) <= DREAM_GPIO_BANK0_LAST_INT_SOURCE) ? \
+	(DREAM_INT_START - DREAM_GPIO_BANK0_FIRST_INT_SOURCE + (n)) : \
+	(DREAM_INT_BANK1_START - DREAM_GPIO_BANK1_FIRST_INT_SOURCE + (n)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#567: FILE: arch/arm/mach-msm/board-dream.h:148:
+#define DREAM_INT_TO_BANK(n) ((n - DREAM_INT_START) / DREAM_INT_BANK0_COUNT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#568: FILE: arch/arm/mach-msm/board-dream.h:149:
+#define DREAM_INT_TO_MASK(n) (1U << ((n - DREAM_INT_START) & 7))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#579: FILE: arch/arm/mach-msm/generic_gpio.c:1:
+/* arch/arm/mach-msm/generic_gpio.c

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#579: FILE: arch/arm/mach-msm/generic_gpio.c:1:
+/* arch/arm/mach-msm/generic_gpio.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/gpio.h> instead of <asm/gpio.h>
#599: FILE: arch/arm/mach-msm/generic_gpio.c:21:
+#include <asm/gpio.h>

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#602: FILE: arch/arm/mach-msm/generic_gpio.c:24:
+#define GPIO_NUM_TO_CHIP_INDEX(gpio) ((gpio)>>5)
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_gpio_chip->state"
#626: FILE: arch/arm/mach-msm/generic_gpio.c:48:
+	if (new_gpio_chip->state == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#627: FILE: arch/arm/mach-msm/generic_gpio.c:49:
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_gpio_chip', this function's name, in a string
#627: FILE: arch/arm/mach-msm/generic_gpio.c:49:
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#627: FILE: arch/arm/mach-msm/generic_gpio.c:49:
+	if (new_gpio_chip->state == NULL) {
+		printk(KERN_ERR "register_gpio_chip: failed to allocate state\n");

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#641: FILE: arch/arm/mach-msm/generic_gpio.c:63:
+		new_array = kmalloc(array_size * sizeof(new_array[0]), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#643: FILE: arch/arm/mach-msm/generic_gpio.c:65:
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_gpio_chip', this function's name, in a string
#643: FILE: arch/arm/mach-msm/generic_gpio.c:65:
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#643: FILE: arch/arm/mach-msm/generic_gpio.c:65:
+		if (!new_array) {
+			printk(KERN_ERR "register_gpio_chip: failed to allocate array\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#661: FILE: arch/arm/mach-msm/generic_gpio.c:83:
+			printk(KERN_ERR "register_gpio_source %u-%u overlaps with %u-%u\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!gpio_chip_array[i]'
#672: FILE: arch/arm/mach-msm/generic_gpio.c:94:
+		if ((!gpio_chip_array[i]) || gpio_chip_array[i]->start > new_gpio_chip->start)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#691: FILE: arch/arm/mach-msm/generic_gpio.c:113:
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#711: FILE: arch/arm/mach-msm/generic_gpio.c:133:
+	if (chip == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#716: FILE: arch/arm/mach-msm/generic_gpio.c:138:
+	if (chip->state[chip_index].refcount == 0) {
[...]
+	} else if ((flags & IRQF_SHARED) && (chip->state[chip_index].flags & IRQF_SHARED))
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#729: FILE: arch/arm/mach-msm/generic_gpio.c:151:
+int gpio_request(unsigned gpio, const char *label)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#735: FILE: arch/arm/mach-msm/generic_gpio.c:157:
+void gpio_free(unsigned gpio)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#753: FILE: arch/arm/mach-msm/generic_gpio.c:175:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#765: FILE: arch/arm/mach-msm/generic_gpio.c:187:
+int gpio_to_irq(unsigned gpio)

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: arch/arm/mach-msm/generic_gpio.c:190:
+	int ret, irq;
+	ret = gpio_get_irq_num(gpio, &irq, NULL);

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#777: FILE: arch/arm/mach-msm/generic_gpio.c:199:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#790: FILE: arch/arm/mach-msm/generic_gpio.c:212:
+int gpio_direction_input(unsigned gpio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#796: FILE: arch/arm/mach-msm/generic_gpio.c:218:
+int gpio_direction_output(unsigned gpio, int value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#803: FILE: arch/arm/mach-msm/generic_gpio.c:225:
+int gpio_get_value(unsigned gpio)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#805: FILE: arch/arm/mach-msm/generic_gpio.c:227:
+	int ret = -ENOTSUPP;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#818: FILE: arch/arm/mach-msm/generic_gpio.c:240:
+void gpio_set_value(unsigned gpio, int on)

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#820: FILE: arch/arm/mach-msm/generic_gpio.c:242:
+	int ret = -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#834: FILE: arch/arm/mach-msm/generic_gpio.c:256:
+	int ret = -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#849: FILE: arch/arm/mach-msm/generic_gpio.c:271:
+	int ret = -ENOTSUPP;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#867: FILE: arch/arm/mach-msm/gpio_chip.h:1:
+/* arch/arm/mach-msm/gpio_chip.h

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#867: FILE: arch/arm/mach-msm/gpio_chip.h:1:
+/* arch/arm/mach-msm/gpio_chip.h

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#895: FILE: arch/arm/mach-msm/gpio_chip.h:29:
+	int (*get_irq_num)(struct gpio_chip *chip, unsigned int gpio, unsigned int *irqp, unsigned long *irqnumflagsp);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#897: FILE: arch/arm/mach-msm/gpio_chip.h:31:
+	int (*write)(struct gpio_chip *chip, unsigned int gpio, unsigned on);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#907: FILE: arch/arm/mach-msm/gpio_chip.h:41:
+#define GPIOF_IRQF_TRIGGER_NONE 0x00010000 /* IRQF_TRIGGER_NONE is 0 which also means "as already configured" */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#915: FILE: arch/arm/mach-msm/gpio_chip.h:49:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#923: FILE: arch/arm/mach-msm/include/mach/gpio.h:1:
+/* linux/include/asm-arm/arch-msm/gpio.h

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#944: FILE: arch/arm/mach-msm/include/mach/gpio.h:22:
+int gpio_request(unsigned gpio, const char *label);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#945: FILE: arch/arm/mach-msm/include/mach/gpio.h:23:
+void gpio_free(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#946: FILE: arch/arm/mach-msm/include/mach/gpio.h:24:
+int gpio_direction_input(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#947: FILE: arch/arm/mach-msm/include/mach/gpio.h:25:
+int gpio_direction_output(unsigned gpio, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#948: FILE: arch/arm/mach-msm/include/mach/gpio.h:26:
+int gpio_get_value(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#949: FILE: arch/arm/mach-msm/include/mach/gpio.h:27:
+void gpio_set_value(unsigned gpio, int value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#950: FILE: arch/arm/mach-msm/include/mach/gpio.h:28:
+int gpio_to_irq(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: arch/arm/mach-msm/include/mach/gpio.h:32:
+extern int gpio_configure(unsigned int gpio, unsigned long flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: arch/arm/mach-msm/include/mach/gpio.h:33:
+extern int gpio_read_detect_status(unsigned int gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: arch/arm/mach-msm/include/mach/gpio.h:34:
+extern int gpio_clear_detect_status(unsigned int gpio);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037400.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 55 warnings, 32 checks, 860 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037400.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
