WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: drivers/staging/vme/Kconfig:5:
+menuconfig VME
+	tristate "VME bridge support"
+	depends on PCI
+	---help---
+	  If you say Y here you get support for the VME bridge Framework.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#99: FILE: drivers/staging/vme/vme_bridge.h:1:
+#ifndef _VME_BRIDGE_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#102: FILE: drivers/staging/vme/vme_bridge.h:4:
+#define VME_CRCSR_BUF_SIZE (508*1024)
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#174: FILE: drivers/staging/vme/vme_bridge.h:76:
+	void (*func)(int, int, void*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#174: FILE: drivers/staging/vme/vme_bridge.h:76:
+	void (*func)(int, int, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#174: FILE: drivers/staging/vme/vme_bridge.h:76:
+	void (*func)(int, int, void*);

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: drivers/staging/vme/vme_bridge.h:95:
+        char name[VMENAMSIZ];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: drivers/staging/vme/vme_bridge.h:95:
+        char name[VMENAMSIZ];$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: drivers/staging/vme/vme_bridge.h:105:
+	void * base;		/* Base Address of device registers */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_slave_resource *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t *' should also have an identifier name
#213: FILE: drivers/staging/vme/vme_bridge.h:115:
+	int (*slave_get) (struct vme_slave_resource *, int *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: drivers/staging/vme/vme_bridge.h:116:
+	int (*slave_get) (struct vme_slave_resource *, int *,
+		unsigned long long *, unsigned long long *, dma_addr_t *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_slave_resource *' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#216: FILE: drivers/staging/vme/vme_bridge.h:118:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: drivers/staging/vme/vme_bridge.h:119:
+	int (*slave_set) (struct vme_slave_resource *, int, unsigned long long,
+		unsigned long long, dma_addr_t, vme_address_t, vme_cycle_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_master_resource *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_width_t *' should also have an identifier name
#220: FILE: drivers/staging/vme/vme_bridge.h:122:
+	int (*master_get) (struct vme_master_resource *, int *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/staging/vme/vme_bridge.h:123:
+	int (*master_get) (struct vme_master_resource *, int *,
+		unsigned long long *, unsigned long long *, vme_address_t *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_master_resource *' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_width_t' should also have an identifier name
#223: FILE: drivers/staging/vme/vme_bridge.h:125:
+	int (*master_set) (struct vme_master_resource *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/staging/vme/vme_bridge.h:126:
+	int (*master_set) (struct vme_master_resource *, int,
+		unsigned long long, unsigned long long,  vme_address_t,

WARNING:SPACING: Unnecessary space before function pointer arguments
#226: FILE: drivers/staging/vme/vme_bridge.h:128:
+	ssize_t (*master_read) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_master_resource *' should also have an identifier name
#226: FILE: drivers/staging/vme/vme_bridge.h:128:
+	ssize_t (*master_read) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#226: FILE: drivers/staging/vme/vme_bridge.h:128:
+	ssize_t (*master_read) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#226: FILE: drivers/staging/vme/vme_bridge.h:128:
+	ssize_t (*master_read) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#226: FILE: drivers/staging/vme/vme_bridge.h:128:
+	ssize_t (*master_read) (struct vme_master_resource *, void *, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/staging/vme/vme_bridge.h:129:
+	ssize_t (*master_read) (struct vme_master_resource *, void *, size_t,
+		loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#228: FILE: drivers/staging/vme/vme_bridge.h:130:
+	ssize_t (*master_write) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_master_resource *' should also have an identifier name
#228: FILE: drivers/staging/vme/vme_bridge.h:130:
+	ssize_t (*master_write) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#228: FILE: drivers/staging/vme/vme_bridge.h:130:
+	ssize_t (*master_write) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#228: FILE: drivers/staging/vme/vme_bridge.h:130:
+	ssize_t (*master_write) (struct vme_master_resource *, void *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#228: FILE: drivers/staging/vme/vme_bridge.h:130:
+	ssize_t (*master_write) (struct vme_master_resource *, void *, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: drivers/staging/vme/vme_bridge.h:131:
+	ssize_t (*master_write) (struct vme_master_resource *, void *, size_t,
+		loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#230: FILE: drivers/staging/vme/vme_bridge.h:132:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_master_resource *' should also have an identifier name
#230: FILE: drivers/staging/vme/vme_bridge.h:132:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#230: FILE: drivers/staging/vme/vme_bridge.h:132:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#230: FILE: drivers/staging/vme/vme_bridge.h:132:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#230: FILE: drivers/staging/vme/vme_bridge.h:132:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#230: FILE: drivers/staging/vme/vme_bridge.h:132:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: drivers/staging/vme/vme_bridge.h:133:
+	unsigned int (*master_rmw) (struct vme_master_resource *, unsigned int,
+		unsigned int, unsigned int, loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#234: FILE: drivers/staging/vme/vme_bridge.h:136:
+	int (*dma_list_add) (struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_list *' should also have an identifier name
#234: FILE: drivers/staging/vme/vme_bridge.h:136:
+	int (*dma_list_add) (struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_attr *' should also have an identifier name
#234: FILE: drivers/staging/vme/vme_bridge.h:136:
+	int (*dma_list_add) (struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_attr *' should also have an identifier name
#234: FILE: drivers/staging/vme/vme_bridge.h:136:
+	int (*dma_list_add) (struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#234: FILE: drivers/staging/vme/vme_bridge.h:136:
+	int (*dma_list_add) (struct vme_dma_list *, struct vme_dma_attr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: drivers/staging/vme/vme_bridge.h:137:
+	int (*dma_list_add) (struct vme_dma_list *, struct vme_dma_attr *,
+		struct vme_dma_attr *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#236: FILE: drivers/staging/vme/vme_bridge.h:138:
+	int (*dma_list_exec) (struct vme_dma_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_list *' should also have an identifier name
#236: FILE: drivers/staging/vme/vme_bridge.h:138:
+	int (*dma_list_exec) (struct vme_dma_list *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#237: FILE: drivers/staging/vme/vme_bridge.h:139:
+	int (*dma_list_empty) (struct vme_dma_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_list *' should also have an identifier name
#237: FILE: drivers/staging/vme/vme_bridge.h:139:
+	int (*dma_list_empty) (struct vme_dma_list *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#240: FILE: drivers/staging/vme/vme_bridge.h:142:
+	int (*request_irq) (int, int, void (*cback)(int, int, void*), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#240: FILE: drivers/staging/vme/vme_bridge.h:142:
+	int (*request_irq) (int, int, void (*cback)(int, int, void*), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#240: FILE: drivers/staging/vme/vme_bridge.h:142:
+	int (*request_irq) (int, int, void (*cback)(int, int, void*), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#240: FILE: drivers/staging/vme/vme_bridge.h:142:
+	int (*request_irq) (int, int, void (*cback)(int, int, void*), void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#241: FILE: drivers/staging/vme/vme_bridge.h:143:
+	void (*free_irq) (int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#241: FILE: drivers/staging/vme/vme_bridge.h:143:
+	void (*free_irq) (int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#241: FILE: drivers/staging/vme/vme_bridge.h:143:
+	void (*free_irq) (int, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#242: FILE: drivers/staging/vme/vme_bridge.h:144:
+	int (*generate_irq) (int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#242: FILE: drivers/staging/vme/vme_bridge.h:144:
+	int (*generate_irq) (int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#242: FILE: drivers/staging/vme/vme_bridge.h:144:
+	int (*generate_irq) (int, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#245: FILE: drivers/staging/vme/vme_bridge.h:147:
+	int (*lm_set) (unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#245: FILE: drivers/staging/vme/vme_bridge.h:147:
+	int (*lm_set) (unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#245: FILE: drivers/staging/vme/vme_bridge.h:147:
+	int (*lm_set) (unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#245: FILE: drivers/staging/vme/vme_bridge.h:147:
+	int (*lm_set) (unsigned long long, vme_address_t, vme_cycle_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#246: FILE: drivers/staging/vme/vme_bridge.h:148:
+	int (*lm_get) (unsigned long long *, vme_address_t *, vme_cycle_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#246: FILE: drivers/staging/vme/vme_bridge.h:148:
+	int (*lm_get) (unsigned long long *, vme_address_t *, vme_cycle_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t *' should also have an identifier name
#246: FILE: drivers/staging/vme/vme_bridge.h:148:
+	int (*lm_get) (unsigned long long *, vme_address_t *, vme_cycle_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t *' should also have an identifier name
#246: FILE: drivers/staging/vme/vme_bridge.h:148:
+	int (*lm_get) (unsigned long long *, vme_address_t *, vme_cycle_t *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#247: FILE: drivers/staging/vme/vme_bridge.h:149:
+	int (*lm_attach) (int, void (*callback)(int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#247: FILE: drivers/staging/vme/vme_bridge.h:149:
+	int (*lm_attach) (int, void (*callback)(int));

WARNING:SPACING: Unnecessary space before function pointer arguments
#248: FILE: drivers/staging/vme/vme_bridge.h:150:
+	int (*lm_detach) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#248: FILE: drivers/staging/vme/vme_bridge.h:150:
+	int (*lm_detach) (int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#251: FILE: drivers/staging/vme/vme_bridge.h:153:
+	int (*slot_get) (void);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#254: FILE: drivers/staging/vme/vme_bridge.h:156:
+#if 0

WARNING:SPACING: Unnecessary space before function pointer arguments
#255: FILE: drivers/staging/vme/vme_bridge.h:157:
+	int (*set_prefetch) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#256: FILE: drivers/staging/vme/vme_bridge.h:158:
+	int (*get_prefetch) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#257: FILE: drivers/staging/vme/vme_bridge.h:159:
+	int (*set_arbiter) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#258: FILE: drivers/staging/vme/vme_bridge.h:160:
+	int (*get_arbiter) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#259: FILE: drivers/staging/vme/vme_bridge.h:161:
+	int (*set_requestor) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#260: FILE: drivers/staging/vme/vme_bridge.h:162:
+	int (*get_requestor) (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#264: FILE: drivers/staging/vme/vme_bridge.h:166:
+int vme_register_bridge (struct vme_bridge *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_bridge *' should also have an identifier name
#264: FILE: drivers/staging/vme/vme_bridge.h:166:
+int vme_register_bridge (struct vme_bridge *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#265: FILE: drivers/staging/vme/vme_bridge.h:167:
+void vme_unregister_bridge (struct vme_bridge *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_bridge *' should also have an identifier name
#265: FILE: drivers/staging/vme/vme_bridge.h:167:
+void vme_unregister_bridge (struct vme_bridge *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#269: FILE: drivers/staging/vme/vme_bridge.h:171:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <vmeInfoCfg>
#273: FILE: drivers/staging/vme/vme_bridge.h:175:
+struct vmeInfoCfg {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <vmeSlotNum>
#274: FILE: drivers/staging/vme/vme_bridge.h:176:
+	int vmeSlotNum;		/*  VME slot number of interest */

CHECK:CAMELCASE: Avoid CamelCase: <boardResponded>
#275: FILE: drivers/staging/vme/vme_bridge.h:177:
+	int boardResponded;	/* Board responded */

CHECK:CAMELCASE: Avoid CamelCase: <sysConFlag>
#276: FILE: drivers/staging/vme/vme_bridge.h:178:
+	char sysConFlag;	/*  System controller flag */

CHECK:CAMELCASE: Avoid CamelCase: <vmeControllerID>
#277: FILE: drivers/staging/vme/vme_bridge.h:179:
+	int vmeControllerID;	/*  Vendor/device ID of VME bridge */

CHECK:CAMELCASE: Avoid CamelCase: <vmeControllerRev>
#278: FILE: drivers/staging/vme/vme_bridge.h:180:
+	int vmeControllerRev;	/*  Revision of VME bridge */

CHECK:CAMELCASE: Avoid CamelCase: <osName>
#279: FILE: drivers/staging/vme/vme_bridge.h:181:
+	char osName[8];		/*  Name of OS e.g. "Linux" */

CHECK:CAMELCASE: Avoid CamelCase: <vmeSharedDataValid>
#280: FILE: drivers/staging/vme/vme_bridge.h:182:
+	int vmeSharedDataValid;	/*  Validity of data struct */

CHECK:CAMELCASE: Avoid CamelCase: <vmeDriverRev>
#281: FILE: drivers/staging/vme/vme_bridge.h:183:
+	int vmeDriverRev;	/*  Revision of VME driver */

CHECK:CAMELCASE: Avoid CamelCase: <vmeAddrHi>
#282: FILE: drivers/staging/vme/vme_bridge.h:184:
+	unsigned int vmeAddrHi[8];	/* Address on VME bus */

CHECK:CAMELCASE: Avoid CamelCase: <vmeAddrLo>
#283: FILE: drivers/staging/vme/vme_bridge.h:185:
+	unsigned int vmeAddrLo[8];	/* Address on VME bus */

CHECK:CAMELCASE: Avoid CamelCase: <vmeSize>
#284: FILE: drivers/staging/vme/vme_bridge.h:186:
+	unsigned int vmeSize[8];	/* Size on VME bus */

CHECK:CAMELCASE: Avoid CamelCase: <vmeAm>
#285: FILE: drivers/staging/vme/vme_bridge.h:187:
+	unsigned int vmeAm[8];	/* Address modifier on VME bus */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#288: FILE: drivers/staging/vme/vme_bridge.h:190:
+};
+typedef struct vmeInfoCfg vmeInfoCfg_t;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#288: FILE: drivers/staging/vme/vme_bridge.h:190:
+typedef struct vmeInfoCfg vmeInfoCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeInfoCfg_t>
#288: FILE: drivers/staging/vme/vme_bridge.h:190:
+typedef struct vmeInfoCfg vmeInfoCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeRequesterCfg>
#293: FILE: drivers/staging/vme/vme_bridge.h:195:
+struct vmeRequesterCfg {

CHECK:CAMELCASE: Avoid CamelCase: <requestLevel>
#294: FILE: drivers/staging/vme/vme_bridge.h:196:
+	int requestLevel;	/*  Requester Bus Request Level */

CHECK:CAMELCASE: Avoid CamelCase: <fairMode>
#295: FILE: drivers/staging/vme/vme_bridge.h:197:
+	char fairMode;		/*  Requester Fairness Mode Indicator */

CHECK:CAMELCASE: Avoid CamelCase: <releaseMode>
#296: FILE: drivers/staging/vme/vme_bridge.h:198:
+	int releaseMode;	/*  Requester Bus Release Mode */

CHECK:CAMELCASE: Avoid CamelCase: <timeonTimeoutTimer>
#297: FILE: drivers/staging/vme/vme_bridge.h:199:
+	int timeonTimeoutTimer;	/*  Master Time-on Time-out Timer */

CHECK:CAMELCASE: Avoid CamelCase: <timeoffTimeoutTimer>
#298: FILE: drivers/staging/vme/vme_bridge.h:200:
+	int timeoffTimeoutTimer;	/*  Master Time-off Time-out Timer */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#301: FILE: drivers/staging/vme/vme_bridge.h:203:
+};
+typedef struct vmeRequesterCfg vmeRequesterCfg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#301: FILE: drivers/staging/vme/vme_bridge.h:203:
+typedef struct vmeRequesterCfg vmeRequesterCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeRequesterCfg_t>
#301: FILE: drivers/staging/vme/vme_bridge.h:203:
+typedef struct vmeRequesterCfg vmeRequesterCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeArbiterCfg>
#306: FILE: drivers/staging/vme/vme_bridge.h:208:
+struct vmeArbiterCfg {

CHECK:CAMELCASE: Avoid CamelCase: <arbiterMode>
#307: FILE: drivers/staging/vme/vme_bridge.h:209:
+	vme_arbitration_t arbiterMode;	/*  Arbitration Scheduling Algorithm */

CHECK:CAMELCASE: Avoid CamelCase: <arbiterTimeoutFlag>
#308: FILE: drivers/staging/vme/vme_bridge.h:210:
+	char arbiterTimeoutFlag;	/*  Arbiter Time-out Timer Indicator */

CHECK:CAMELCASE: Avoid CamelCase: <globalTimeoutTimer>
#309: FILE: drivers/staging/vme/vme_bridge.h:211:
+	int globalTimeoutTimer;	/*  VMEbus Global Time-out Timer */

CHECK:CAMELCASE: Avoid CamelCase: <noEarlyReleaseFlag>
#310: FILE: drivers/staging/vme/vme_bridge.h:212:
+	char noEarlyReleaseFlag;	/*  No Early Release on BBUSY */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#313: FILE: drivers/staging/vme/vme_bridge.h:215:
+};
+typedef struct vmeArbiterCfg vmeArbiterCfg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#313: FILE: drivers/staging/vme/vme_bridge.h:215:
+typedef struct vmeArbiterCfg vmeArbiterCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeArbiterCfg_t>
#313: FILE: drivers/staging/vme/vme_bridge.h:215:
+typedef struct vmeArbiterCfg vmeArbiterCfg_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#315: FILE: drivers/staging/vme/vme_bridge.h:217:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <vmeRmwCfg>
#319: FILE: drivers/staging/vme/vme_bridge.h:221:
+struct vmeRmwCfg {

CHECK:CAMELCASE: Avoid CamelCase: <targetAddrU>
#320: FILE: drivers/staging/vme/vme_bridge.h:222:
+	unsigned int targetAddrU;	/*  VME Address (Upper) to trigger RMW cycle */

CHECK:CAMELCASE: Avoid CamelCase: <targetAddr>
#321: FILE: drivers/staging/vme/vme_bridge.h:223:
+	unsigned int targetAddr;	/*  VME Address (Lower) to trigger RMW cycle */

CHECK:CAMELCASE: Avoid CamelCase: <addrSpace>
#322: FILE: drivers/staging/vme/vme_bridge.h:224:
+	vme_address_t addrSpace;	/*  VME Address Space */

CHECK:CAMELCASE: Avoid CamelCase: <enableMask>
#323: FILE: drivers/staging/vme/vme_bridge.h:225:
+	int enableMask;		/*  Bit mask defining the bits of interest */

CHECK:CAMELCASE: Avoid CamelCase: <compareData>
#324: FILE: drivers/staging/vme/vme_bridge.h:226:
+	int compareData;	/*  Data to be compared with the data read */

CHECK:CAMELCASE: Avoid CamelCase: <swapData>
#325: FILE: drivers/staging/vme/vme_bridge.h:227:
+	int swapData;		/*  Data written to the VMEbus on success */

CHECK:CAMELCASE: Avoid CamelCase: <maxAttempts>
#326: FILE: drivers/staging/vme/vme_bridge.h:228:
+	int maxAttempts;	/*  Maximum times to try */

CHECK:CAMELCASE: Avoid CamelCase: <numAttempts>
#327: FILE: drivers/staging/vme/vme_bridge.h:229:
+	int numAttempts;	/*  Number of attempts before success */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#331: FILE: drivers/staging/vme/vme_bridge.h:233:
+};
+typedef struct vmeRmwCfg vmeRmwCfg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#331: FILE: drivers/staging/vme/vme_bridge.h:233:
+typedef struct vmeRmwCfg vmeRmwCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeRmwCfg_t>
#331: FILE: drivers/staging/vme/vme_bridge.h:233:
+typedef struct vmeRmwCfg vmeRmwCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeLmCfg>
#336: FILE: drivers/staging/vme/vme_bridge.h:238:
+struct vmeLmCfg {

CHECK:CAMELCASE: Avoid CamelCase: <userAccessType>
#340: FILE: drivers/staging/vme/vme_bridge.h:242:
+	int userAccessType;	/*  User/Supervisor Access Type */

CHECK:CAMELCASE: Avoid CamelCase: <dataAccessType>
#341: FILE: drivers/staging/vme/vme_bridge.h:243:
+	int dataAccessType;	/*  Data/Program Access Type */

CHECK:CAMELCASE: Avoid CamelCase: <lmWait>
#342: FILE: drivers/staging/vme/vme_bridge.h:244:
+	int lmWait;		/* Time to wait for access */

CHECK:CAMELCASE: Avoid CamelCase: <lmEvents>
#343: FILE: drivers/staging/vme/vme_bridge.h:245:
+	int lmEvents;		/* Lm event mask */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#346: FILE: drivers/staging/vme/vme_bridge.h:248:
+};
+typedef struct vmeLmCfg vmeLmCfg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#346: FILE: drivers/staging/vme/vme_bridge.h:248:
+typedef struct vmeLmCfg vmeLmCfg_t;

CHECK:CAMELCASE: Avoid CamelCase: <vmeLmCfg_t>
#346: FILE: drivers/staging/vme/vme_bridge.h:248:
+typedef struct vmeLmCfg vmeLmCfg_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#351: FILE: drivers/staging/vme/vme.c:1:
+/*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#391: FILE: drivers/staging/vme/vme.c:41:
+static void __exit vme_exit (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#392: FILE: drivers/staging/vme/vme.c:42:
+static int __init vme_init (void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#394: FILE: drivers/staging/vme/vme.c:44:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#423: FILE: drivers/staging/vme/vme.c:73:
+		printk(KERN_ERR "Unknown resource type\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#425: FILE: drivers/staging/vme/vme.c:75:
+		return NULL;
+		break;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: drivers/staging/vme/vme.c:86:
+void * vme_alloc_consistent(struct vme_resource *resource, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: drivers/staging/vme/vme.c:87:
+void * vme_alloc_consistent(struct vme_resource *resource, size_t size,
+	dma_addr_t *dma)

ERROR:SPACING: space required before the open parenthesis '('
#442: FILE: drivers/staging/vme/vme.c:92:
+	if(resource == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resource"
#442: FILE: drivers/staging/vme/vme.c:92:
+	if(resource == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#443: FILE: drivers/staging/vme/vme.c:93:
+		printk("No resource\n");

ERROR:SPACING: space required before the open parenthesis '('
#448: FILE: drivers/staging/vme/vme.c:98:
+	if(bridge == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#448: FILE: drivers/staging/vme/vme.c:98:
+	if(bridge == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#449: FILE: drivers/staging/vme/vme.c:99:
+		printk("Can't find bridge\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->parent"
#454: FILE: drivers/staging/vme/vme.c:104:
+	if (bridge->parent == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: drivers/staging/vme/vme.c:105:
+		printk("Dev entry NULL\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: drivers/staging/vme/vme.c:121:
+void vme_free_consistent(struct vme_resource *resource, size_t size,
+	void *vaddr, dma_addr_t dma)

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: drivers/staging/vme/vme.c:126:
+	if(resource == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resource"
#476: FILE: drivers/staging/vme/vme.c:126:
+	if(resource == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#477: FILE: drivers/staging/vme/vme.c:127:
+		printk("No resource\n");

ERROR:SPACING: space required before the open parenthesis '('
#482: FILE: drivers/staging/vme/vme.c:132:
+	if(bridge == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#482: FILE: drivers/staging/vme/vme.c:132:
+	if(bridge == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#483: FILE: drivers/staging/vme/vme.c:133:
+		printk("Can't find bridge\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/staging/vme/vme.c:156:
+		retval = vme_master_get(resource, &enabled, &base, &size,
+			&aspace, &cycle, &dwidth);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#509: FILE: drivers/staging/vme/vme.c:159:
+		return size;
+		break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/staging/vme/vme.c:162:
+		retval = vme_slave_get(resource, &enabled, &base, &size,
+			&buf_base, &aspace, &cycle);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#515: FILE: drivers/staging/vme/vme.c:165:
+		return size;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#518: FILE: drivers/staging/vme/vme.c:168:
+		return 0;
+		break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: drivers/staging/vme/vme.c:170:
+		printk(KERN_ERR "Unknown resource type\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#522: FILE: drivers/staging/vme/vme.c:172:
+		return 0;
+		break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: drivers/staging/vme/vme.c:178:
+static int vme_check_window(vme_address_t aspace, unsigned long long vme_base,
+	unsigned long long size)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vme_base > VME_A16_MAX'
#534: FILE: drivers/staging/vme/vme.c:184:
+		if (((vme_base + size) > VME_A16_MAX) ||
+				(vme_base > VME_A16_MAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: drivers/staging/vme/vme.c:185:
+		if (((vme_base + size) > VME_A16_MAX) ||
+				(vme_base > VME_A16_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vme_base > VME_A24_MAX'
#539: FILE: drivers/staging/vme/vme.c:189:
+		if (((vme_base + size) > VME_A24_MAX) ||
+				(vme_base > VME_A24_MAX))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/staging/vme/vme.c:190:
+		if (((vme_base + size) > VME_A24_MAX) ||
+				(vme_base > VME_A24_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vme_base > VME_A32_MAX'
#544: FILE: drivers/staging/vme/vme.c:194:
+		if (((vme_base + size) > VME_A32_MAX) ||
+				(vme_base > VME_A32_MAX))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/staging/vme/vme.c:195:
+		if (((vme_base + size) > VME_A32_MAX) ||
+				(vme_base > VME_A32_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vme_base > VME_CRCSR_MAX'
#555: FILE: drivers/staging/vme/vme.c:205:
+		if (((vme_base + size) > VME_CRCSR_MAX) ||
+				(vme_base > VME_CRCSR_MAX))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: drivers/staging/vme/vme.c:206:
+		if (((vme_base + size) > VME_CRCSR_MAX) ||
+				(vme_base > VME_CRCSR_MAX))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#566: FILE: drivers/staging/vme/vme.c:216:
+		printk("Invalid address space\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: drivers/staging/vme/vme.c:228:
+struct vme_resource * vme_slave_request(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: drivers/staging/vme/vme.c:229:
+struct vme_resource * vme_slave_request(struct device *dev,
+	vme_address_t address, vme_cycle_t cycle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#588: FILE: drivers/staging/vme/vme.c:238:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#589: FILE: drivers/staging/vme/vme.c:239:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->slave_resources
#594: FILE: drivers/staging/vme/vme.c:244:
+	list_for_each(slave_pos, &(bridge->slave_resources)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/staging/vme/vme.c:246:
+		slave_image = list_entry(slave_pos,
+			struct vme_slave_resource, list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slave_image"
#598: FILE: drivers/staging/vme/vme.c:248:
+		if (slave_image == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#599: FILE: drivers/staging/vme/vme.c:249:
+			printk("Registered NULL Slave resource\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#604: FILE: drivers/staging/vme/vme.c:254:
+		down(&(slave_image->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slave_image->locked == 0'
#605: FILE: drivers/staging/vme/vme.c:255:
+		if(((slave_image->address_attr & address) == address) &&
+			((slave_image->cycle_attr & cycle) == cycle) &&
+			(slave_image->locked == 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: drivers/staging/vme/vme.c:255:
+		if(((slave_image->address_attr & address) == address) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/staging/vme/vme.c:256:
+		if(((slave_image->address_attr & address) == address) &&
+			((slave_image->cycle_attr & cycle) == cycle) &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#608: FILE: drivers/staging/vme/vme.c:258:
+			(slave_image->locked == 0)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#610: FILE: drivers/staging/vme/vme.c:260:
+			up(&(slave_image->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#614: FILE: drivers/staging/vme/vme.c:264:
+		up(&(slave_image->sem));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!allocated_image"
#618: FILE: drivers/staging/vme/vme.c:268:
+	if (allocated_image == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*resource)...) over kmalloc(sizeof(struct vme_resource)...)
#621: FILE: drivers/staging/vme/vme.c:271:
+	resource = kmalloc(sizeof(struct vme_resource), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resource"
#622: FILE: drivers/staging/vme/vme.c:272:
+	if (resource == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#623: FILE: drivers/staging/vme/vme.c:273:
+		printk(KERN_WARNING "Unable to allocate resource structure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#623: FILE: drivers/staging/vme/vme.c:273:
+	if (resource == NULL) {
+		printk(KERN_WARNING "Unable to allocate resource structure\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around allocated_image->list
#627: FILE: drivers/staging/vme/vme.c:277:
+	resource->entry = &(allocated_image->list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#633: FILE: drivers/staging/vme/vme.c:283:
+	down(&(slave_image->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#635: FILE: drivers/staging/vme/vme.c:285:
+	up(&(slave_image->sem));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#642: FILE: drivers/staging/vme/vme.c:292:
+int vme_slave_set (struct vme_resource *resource, int enabled,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: drivers/staging/vme/vme.c:293:
+int vme_slave_set (struct vme_resource *resource, int enabled,
+	unsigned long long vme_base, unsigned long long size,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#651: FILE: drivers/staging/vme/vme.c:301:
+		printk("Not a slave resource\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->slave_set"
#657: FILE: drivers/staging/vme/vme.c:307:
+	if (bridge->slave_set == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#658: FILE: drivers/staging/vme/vme.c:308:
+		printk("Function not supported\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#659: FILE: drivers/staging/vme/vme.c:309:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SPACING: space required before the open parenthesis '('
#662: FILE: drivers/staging/vme/vme.c:312:
+	if(!(((image->address_attr & aspace) == aspace) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: drivers/staging/vme/vme.c:313:
+	if(!(((image->address_attr & aspace) == aspace) &&
+		((image->cycle_attr & cycle) == cycle))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#664: FILE: drivers/staging/vme/vme.c:314:
+		printk("Invalid attributes\n");

ERROR:SPACING: space required before the open parenthesis '('
#669: FILE: drivers/staging/vme/vme.c:319:
+	if(retval)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#677: FILE: drivers/staging/vme/vme.c:327:
+int vme_slave_get (struct vme_resource *resource, int *enabled,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/staging/vme/vme.c:328:
+int vme_slave_get (struct vme_resource *resource, int *enabled,
+	unsigned long long *vme_base, unsigned long long *size,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#685: FILE: drivers/staging/vme/vme.c:335:
+		printk("Not a slave resource\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->slave_set"
#691: FILE: drivers/staging/vme/vme.c:341:
+	if (bridge->slave_set == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#692: FILE: drivers/staging/vme/vme.c:342:
+		printk("vme_slave_get not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_slave_get', this function's name, in a string
#692: FILE: drivers/staging/vme/vme.c:342:
+		printk("vme_slave_get not supported\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#706: FILE: drivers/staging/vme/vme.c:356:
+		printk("Not a slave resource\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: drivers/staging/vme/vme.c:361:
+	slave_image = list_entry(resource->entry, struct vme_slave_resource,
+		list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slave_image"
#712: FILE: drivers/staging/vme/vme.c:362:
+	if (slave_image == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#713: FILE: drivers/staging/vme/vme.c:363:
+		printk("Can't find slave resource\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#718: FILE: drivers/staging/vme/vme.c:368:
+	down(&(slave_image->sem));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#720: FILE: drivers/staging/vme/vme.c:370:
+		printk(KERN_ERR "Image is already free\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around slave_image->sem
#723: FILE: drivers/staging/vme/vme.c:373:
+	up(&(slave_image->sem));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#734: FILE: drivers/staging/vme/vme.c:384:
+struct vme_resource * vme_master_request(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: drivers/staging/vme/vme.c:385:
+struct vme_resource * vme_master_request(struct device *dev,
+	vme_address_t address, vme_cycle_t cycle, vme_width_t dwidth)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#744: FILE: drivers/staging/vme/vme.c:394:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#745: FILE: drivers/staging/vme/vme.c:395:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->master_resources
#750: FILE: drivers/staging/vme/vme.c:400:
+	list_for_each(master_pos, &(bridge->master_resources)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: drivers/staging/vme/vme.c:402:
+		master_image = list_entry(master_pos,
+			struct vme_master_resource, list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!master_image"
#754: FILE: drivers/staging/vme/vme.c:404:
+		if (master_image == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#755: FILE: drivers/staging/vme/vme.c:405:
+			printk(KERN_WARNING "Registered NULL master resource\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#760: FILE: drivers/staging/vme/vme.c:410:
+		spin_lock(&(master_image->lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'master_image->locked == 0'
#761: FILE: drivers/staging/vme/vme.c:411:
+		if(((master_image->address_attr & address) == address) &&
+			((master_image->cycle_attr & cycle) == cycle) &&
+			((master_image->width_attr & dwidth) == dwidth) &&
+			(master_image->locked == 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#761: FILE: drivers/staging/vme/vme.c:411:
+		if(((master_image->address_attr & address) == address) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: drivers/staging/vme/vme.c:412:
+		if(((master_image->address_attr & address) == address) &&
+			((master_image->cycle_attr & cycle) == cycle) &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#765: FILE: drivers/staging/vme/vme.c:415:
+			(master_image->locked == 0)) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#767: FILE: drivers/staging/vme/vme.c:417:
+			spin_unlock(&(master_image->lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#771: FILE: drivers/staging/vme/vme.c:421:
+		spin_unlock(&(master_image->lock));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!allocated_image"
#775: FILE: drivers/staging/vme/vme.c:425:
+	if (allocated_image == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#776: FILE: drivers/staging/vme/vme.c:426:
+		printk(KERN_ERR "Can't find a suitable resource\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*resource)...) over kmalloc(sizeof(struct vme_resource)...)
#780: FILE: drivers/staging/vme/vme.c:430:
+	resource = kmalloc(sizeof(struct vme_resource), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resource"
#781: FILE: drivers/staging/vme/vme.c:431:
+	if (resource == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#782: FILE: drivers/staging/vme/vme.c:432:
+		printk(KERN_ERR "Unable to allocate resource structure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#782: FILE: drivers/staging/vme/vme.c:432:
+	if (resource == NULL) {
+		printk(KERN_ERR "Unable to allocate resource structure\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around allocated_image->list
#786: FILE: drivers/staging/vme/vme.c:436:
+	resource->entry = &(allocated_image->list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#793: FILE: drivers/staging/vme/vme.c:443:
+	spin_lock(&(master_image->lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#795: FILE: drivers/staging/vme/vme.c:445:
+	spin_unlock(&(master_image->lock));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#802: FILE: drivers/staging/vme/vme.c:452:
+int vme_master_set (struct vme_resource *resource, int enabled,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/staging/vme/vme.c:453:
+int vme_master_set (struct vme_resource *resource, int enabled,
+	unsigned long long vme_base, unsigned long long size,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#811: FILE: drivers/staging/vme/vme.c:461:
+		printk("Not a master resource\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->master_set"
#817: FILE: drivers/staging/vme/vme.c:467:
+	if (bridge->master_set == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#818: FILE: drivers/staging/vme/vme.c:468:
+		printk("vme_master_set not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_master_set', this function's name, in a string
#818: FILE: drivers/staging/vme/vme.c:468:
+		printk("vme_master_set not supported\n");

ERROR:SPACING: space required before the open parenthesis '('
#822: FILE: drivers/staging/vme/vme.c:472:
+	if(!(((image->address_attr & aspace) == aspace) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: drivers/staging/vme/vme.c:473:
+	if(!(((image->address_attr & aspace) == aspace) &&
+		((image->cycle_attr & cycle) == cycle) &&

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#825: FILE: drivers/staging/vme/vme.c:475:
+		printk("Invalid attributes\n");

ERROR:SPACING: space required before the open parenthesis '('
#830: FILE: drivers/staging/vme/vme.c:480:
+	if(retval)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#838: FILE: drivers/staging/vme/vme.c:488:
+int vme_master_get (struct vme_resource *resource, int *enabled,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: drivers/staging/vme/vme.c:489:
+int vme_master_get (struct vme_resource *resource, int *enabled,
+	unsigned long long *vme_base, unsigned long long *size,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#846: FILE: drivers/staging/vme/vme.c:496:
+		printk("Not a master resource\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->master_set"
#852: FILE: drivers/staging/vme/vme.c:502:
+	if (bridge->master_set == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#853: FILE: drivers/staging/vme/vme.c:503:
+		printk("vme_master_set not supported\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#865: FILE: drivers/staging/vme/vme.c:515:
+ssize_t vme_master_read (struct vme_resource *resource, void *buf, size_t count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/staging/vme/vme.c:516:
+ssize_t vme_master_read (struct vme_resource *resource, void *buf, size_t count,
+	loff_t offset)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->master_read"
#872: FILE: drivers/staging/vme/vme.c:522:
+	if (bridge->master_read == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#873: FILE: drivers/staging/vme/vme.c:523:
+		printk("Reading from resource not supported\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#878: FILE: drivers/staging/vme/vme.c:528:
+		printk("Not a master resource\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#887: FILE: drivers/staging/vme/vme.c:537:
+		printk("Invalid Offset\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#896: FILE: drivers/staging/vme/vme.c:546:
+
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: drivers/staging/vme/vme.c:552:
+ssize_t vme_master_write (struct vme_resource *resource, void *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: drivers/staging/vme/vme.c:553:
+ssize_t vme_master_write (struct vme_resource *resource, void *buf,
+	size_t count, loff_t offset)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->master_write"
#909: FILE: drivers/staging/vme/vme.c:559:
+	if (bridge->master_write == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#910: FILE: drivers/staging/vme/vme.c:560:
+		printk("Writing to resource not supported\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#915: FILE: drivers/staging/vme/vme.c:565:
+		printk("Not a master resource\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#924: FILE: drivers/staging/vme/vme.c:574:
+		printk("Invalid Offset\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#938: FILE: drivers/staging/vme/vme.c:588:
+unsigned int vme_master_rmw (struct vme_resource *resource, unsigned int mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/staging/vme/vme.c:589:
+unsigned int vme_master_rmw (struct vme_resource *resource, unsigned int mask,
+	unsigned int compare, unsigned int swap, loff_t offset)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->master_rmw"
#944: FILE: drivers/staging/vme/vme.c:594:
+	if (bridge->master_rmw == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#945: FILE: drivers/staging/vme/vme.c:595:
+		printk("Writing to resource not supported\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#950: FILE: drivers/staging/vme/vme.c:600:
+		printk("Not a master resource\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#965: FILE: drivers/staging/vme/vme.c:615:
+		printk("Not a master resource\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/staging/vme/vme.c:620:
+	master_image = list_entry(resource->entry, struct vme_master_resource,
+		list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!master_image"
#971: FILE: drivers/staging/vme/vme.c:621:
+	if (master_image == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#972: FILE: drivers/staging/vme/vme.c:622:
+		printk("Can't find master resource\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#977: FILE: drivers/staging/vme/vme.c:627:
+	spin_lock(&(master_image->lock));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#979: FILE: drivers/staging/vme/vme.c:629:
+		printk(KERN_ERR "Image is already free\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around master_image->lock
#982: FILE: drivers/staging/vme/vme.c:632:
+	spin_unlock(&(master_image->lock));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1002: FILE: drivers/staging/vme/vme.c:652:
+	printk(KERN_ERR "No VME resource Attribute tests done\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1005: FILE: drivers/staging/vme/vme.c:655:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1006: FILE: drivers/staging/vme/vme.c:656:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->dma_resources
#1011: FILE: drivers/staging/vme/vme.c:661:
+	list_for_each(dma_pos, &(bridge->dma_resources)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: drivers/staging/vme/vme.c:663:
+		dma_ctrlr = list_entry(dma_pos,
+			struct vme_dma_resource, list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dma_ctrlr"
#1015: FILE: drivers/staging/vme/vme.c:665:
+		if (dma_ctrlr == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1016: FILE: drivers/staging/vme/vme.c:666:
+			printk("Registered NULL DMA resource\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_ctrlr->sem
#1021: FILE: drivers/staging/vme/vme.c:671:
+		down(&(dma_ctrlr->sem));

ERROR:SPACING: space required before the open parenthesis '('
#1022: FILE: drivers/staging/vme/vme.c:672:
+		if(dma_ctrlr->locked == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_ctrlr->sem
#1024: FILE: drivers/staging/vme/vme.c:674:
+			up(&(dma_ctrlr->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_ctrlr->sem
#1028: FILE: drivers/staging/vme/vme.c:678:
+		up(&(dma_ctrlr->sem));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!allocated_ctrlr"
#1032: FILE: drivers/staging/vme/vme.c:682:
+	if (allocated_ctrlr == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*resource)...) over kmalloc(sizeof(struct vme_resource)...)
#1035: FILE: drivers/staging/vme/vme.c:685:
+	resource = kmalloc(sizeof(struct vme_resource), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resource"
#1036: FILE: drivers/staging/vme/vme.c:686:
+	if (resource == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1037: FILE: drivers/staging/vme/vme.c:687:
+		printk(KERN_WARNING "Unable to allocate resource structure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1037: FILE: drivers/staging/vme/vme.c:687:
+	if (resource == NULL) {
+		printk(KERN_WARNING "Unable to allocate resource structure\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around allocated_ctrlr->list
#1041: FILE: drivers/staging/vme/vme.c:691:
+	resource->entry = &(allocated_ctrlr->list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_ctrlr->sem
#1047: FILE: drivers/staging/vme/vme.c:697:
+	down(&(dma_ctrlr->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_ctrlr->sem
#1049: FILE: drivers/staging/vme/vme.c:699:
+	up(&(dma_ctrlr->sem));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1065: FILE: drivers/staging/vme/vme.c:715:
+		printk("Not a DMA resource\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1071: FILE: drivers/staging/vme/vme.c:721:
+	dma_list = (struct vme_dma_list *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1071: FILE: drivers/staging/vme/vme.c:721:
+	dma_list = (struct vme_dma_list *)kmalloc(

ERROR:SPACING: space required before the open parenthesis '('
#1073: FILE: drivers/staging/vme/vme.c:723:
+	if(dma_list == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dma_list"
#1073: FILE: drivers/staging/vme/vme.c:723:
+	if(dma_list == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1074: FILE: drivers/staging/vme/vme.c:724:
+		printk("Unable to allocate memory for new dma list\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1074: FILE: drivers/staging/vme/vme.c:724:
+	if(dma_list == NULL) {
+		printk("Unable to allocate memory for new dma list\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_list->entries
#1077: FILE: drivers/staging/vme/vme.c:727:
+	INIT_LIST_HEAD(&(dma_list->entries));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dma_list->sem
#1079: FILE: drivers/staging/vme/vme.c:729:
+	init_MUTEX(&(dma_list->sem));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1089: FILE: drivers/staging/vme/vme.c:739:
+struct vme_dma_attr *vme_dma_pattern_attribute(u32 pattern,
+	vme_pattern_t type)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1094: FILE: drivers/staging/vme/vme.c:744:
+	attributes = (struct vme_dma_attr *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1094: FILE: drivers/staging/vme/vme.c:744:
+	attributes = (struct vme_dma_attr *)kmalloc(

ERROR:SPACING: space required before the open parenthesis '('
#1096: FILE: drivers/staging/vme/vme.c:746:
+	if(attributes == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attributes"
#1096: FILE: drivers/staging/vme/vme.c:746:
+	if(attributes == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1097: FILE: drivers/staging/vme/vme.c:747:
+		printk("Unable to allocate memory for attributes structure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1097: FILE: drivers/staging/vme/vme.c:747:
+	if(attributes == NULL) {
+		printk("Unable to allocate memory for attributes structure\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1101: FILE: drivers/staging/vme/vme.c:751:
+	pattern_attr = (struct vme_dma_pattern *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1101: FILE: drivers/staging/vme/vme.c:751:
+	pattern_attr = (struct vme_dma_pattern *)kmalloc(

ERROR:SPACING: space required before the open parenthesis '('
#1103: FILE: drivers/staging/vme/vme.c:753:
+	if(pattern_attr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pattern_attr"
#1103: FILE: drivers/staging/vme/vme.c:753:
+	if(pattern_attr == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1104: FILE: drivers/staging/vme/vme.c:754:
+		printk("Unable to allocate memory for pattern attributes\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1104: FILE: drivers/staging/vme/vme.c:754:
+	if(pattern_attr == NULL) {
+		printk("Unable to allocate memory for pattern attributes\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1134: FILE: drivers/staging/vme/vme.c:784:
+	attributes = (struct vme_dma_attr *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1134: FILE: drivers/staging/vme/vme.c:784:
+	attributes = (struct vme_dma_attr *)kmalloc(

ERROR:SPACING: space required before the open parenthesis '('
#1136: FILE: drivers/staging/vme/vme.c:786:
+	if(attributes == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attributes"
#1136: FILE: drivers/staging/vme/vme.c:786:
+	if(attributes == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1137: FILE: drivers/staging/vme/vme.c:787:
+		printk("Unable to allocate memory for attributes structure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1137: FILE: drivers/staging/vme/vme.c:787:
+	if(attributes == NULL) {
+		printk("Unable to allocate memory for attributes structure\n");

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1141: FILE: drivers/staging/vme/vme.c:791:
+	pci_attr = (struct vme_dma_pci *)kmalloc(sizeof(struct vme_dma_pci),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pci_attr)...) over kmalloc(sizeof(struct vme_dma_pci)...)
#1141: FILE: drivers/staging/vme/vme.c:791:
+	pci_attr = (struct vme_dma_pci *)kmalloc(sizeof(struct vme_dma_pci),

ERROR:SPACING: space required before the open parenthesis '('
#1143: FILE: drivers/staging/vme/vme.c:793:
+	if(pci_attr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pci_attr"
#1143: FILE: drivers/staging/vme/vme.c:793:
+	if(pci_attr == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1144: FILE: drivers/staging/vme/vme.c:794:
+		printk("Unable to allocate memory for pci attributes\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1144: FILE: drivers/staging/vme/vme.c:794:
+	if(pci_attr == NULL) {
+		printk("Unable to allocate memory for pci attributes\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1148: FILE: drivers/staging/vme/vme.c:798:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/staging/vme/vme.c:819:
+struct vme_dma_attr *vme_dma_vme_attribute(unsigned long long address,
+	vme_address_t aspace, vme_cycle_t cycle, vme_width_t dwidth)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1176: FILE: drivers/staging/vme/vme.c:826:
+	attributes = (struct vme_dma_attr *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1176: FILE: drivers/staging/vme/vme.c:826:
+	attributes = (struct vme_dma_attr *)kmalloc(

ERROR:SPACING: space required before the open parenthesis '('
#1178: FILE: drivers/staging/vme/vme.c:828:
+	if(attributes == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attributes"
#1178: FILE: drivers/staging/vme/vme.c:828:
+	if(attributes == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1179: FILE: drivers/staging/vme/vme.c:829:
+		printk("Unable to allocate memory for attributes structure\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1179: FILE: drivers/staging/vme/vme.c:829:
+	if(attributes == NULL) {
+		printk("Unable to allocate memory for attributes structure\n");

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1183: FILE: drivers/staging/vme/vme.c:833:
+	vme_attr = (struct vme_dma_vme *)kmalloc(sizeof(struct vme_dma_vme),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vme_attr)...) over kmalloc(sizeof(struct vme_dma_vme)...)
#1183: FILE: drivers/staging/vme/vme.c:833:
+	vme_attr = (struct vme_dma_vme *)kmalloc(sizeof(struct vme_dma_vme),

ERROR:SPACING: space required before the open parenthesis '('
#1185: FILE: drivers/staging/vme/vme.c:835:
+	if(vme_attr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vme_attr"
#1185: FILE: drivers/staging/vme/vme.c:835:
+	if(vme_attr == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1186: FILE: drivers/staging/vme/vme.c:836:
+		printk("Unable to allocate memory for vme attributes\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1186: FILE: drivers/staging/vme/vme.c:836:
+	if(vme_attr == NULL) {
+		printk("Unable to allocate memory for vme attributes\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: drivers/staging/vme/vme.c:869:
+int vme_dma_list_add(struct vme_dma_list *list, struct vme_dma_attr *src,
+	struct vme_dma_attr *dest, size_t count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->dma_list_add"
#1224: FILE: drivers/staging/vme/vme.c:874:
+	if (bridge->dma_list_add == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1225: FILE: drivers/staging/vme/vme.c:875:
+		printk("Link List DMA generation not supported\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1229: FILE: drivers/staging/vme/vme.c:879:
+	if (down_trylock(&(list->sem))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1230: FILE: drivers/staging/vme/vme.c:880:
+		printk("Link List already submitted\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1236: FILE: drivers/staging/vme/vme.c:886:
+	up(&(list->sem));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->dma_list_exec"
#1247: FILE: drivers/staging/vme/vme.c:897:
+	if (bridge->dma_list_exec == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1248: FILE: drivers/staging/vme/vme.c:898:
+		printk("Link List DMA execution not supported\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1252: FILE: drivers/staging/vme/vme.c:902:
+	down(&(list->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1256: FILE: drivers/staging/vme/vme.c:906:
+	up(&(list->sem));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->dma_list_empty"
#1267: FILE: drivers/staging/vme/vme.c:917:
+	if (bridge->dma_list_empty == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1268: FILE: drivers/staging/vme/vme.c:918:
+		printk("Emptying of Link Lists not supported\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1272: FILE: drivers/staging/vme/vme.c:922:
+	if (down_trylock(&(list->sem))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1273: FILE: drivers/staging/vme/vme.c:923:
+		printk("Link List in use\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1283: FILE: drivers/staging/vme/vme.c:933:
+		printk("Unable to empty link-list entries\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1284: FILE: drivers/staging/vme/vme.c:934:
+		up(&(list->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around list->sem
#1287: FILE: drivers/staging/vme/vme.c:937:
+	up(&(list->sem));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1299: FILE: drivers/staging/vme/vme.c:949:
+		printk("Not a DMA resource\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctrlr->sem
#1305: FILE: drivers/staging/vme/vme.c:955:
+	if (down_trylock(&(ctrlr->sem))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1306: FILE: drivers/staging/vme/vme.c:956:
+		printk("Resource busy, can't free\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctrlr->pending
#1310: FILE: drivers/staging/vme/vme.c:960:
+	if (!(list_empty(&(ctrlr->pending)) && list_empty(&(ctrlr->running)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctrlr->running
#1310: FILE: drivers/staging/vme/vme.c:960:
+	if (!(list_empty(&(ctrlr->pending)) && list_empty(&(ctrlr->running)))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1311: FILE: drivers/staging/vme/vme.c:961:
+		printk("Resource still processing transfers\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctrlr->sem
#1312: FILE: drivers/staging/vme/vme.c:962:
+		up(&(ctrlr->sem));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctrlr->sem
#1318: FILE: drivers/staging/vme/vme.c:968:
+	up(&(ctrlr->sem));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: drivers/staging/vme/vme.c:975:
+int vme_request_irq(struct device *dev, int level, int statid,
+	void (*callback)(int level, int vector, void *priv_data),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1331: FILE: drivers/staging/vme/vme.c:981:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1332: FILE: drivers/staging/vme/vme.c:982:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level < 1'
#1336: FILE: drivers/staging/vme/vme.c:986:
+	if((level < 1) || (level > 7)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level > 7'
#1336: FILE: drivers/staging/vme/vme.c:986:
+	if((level < 1) || (level > 7)) {

ERROR:SPACING: space required before the open parenthesis '('
#1336: FILE: drivers/staging/vme/vme.c:986:
+	if((level < 1) || (level > 7)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1337: FILE: drivers/staging/vme/vme.c:987:
+		printk(KERN_WARNING "Invalid interrupt level\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->request_irq"
#1341: FILE: drivers/staging/vme/vme.c:991:
+	if (bridge->request_irq == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1342: FILE: drivers/staging/vme/vme.c:992:
+		printk("Registering interrupts not supported\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1355: FILE: drivers/staging/vme/vme.c:1005:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1356: FILE: drivers/staging/vme/vme.c:1006:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level < 1'
#1360: FILE: drivers/staging/vme/vme.c:1010:
+	if((level < 1) || (level > 7)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level > 7'
#1360: FILE: drivers/staging/vme/vme.c:1010:
+	if((level < 1) || (level > 7)) {

ERROR:SPACING: space required before the open parenthesis '('
#1360: FILE: drivers/staging/vme/vme.c:1010:
+	if((level < 1) || (level > 7)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1361: FILE: drivers/staging/vme/vme.c:1011:
+		printk(KERN_WARNING "Invalid interrupt level\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->free_irq"
#1365: FILE: drivers/staging/vme/vme.c:1015:
+	if (bridge->free_irq == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1366: FILE: drivers/staging/vme/vme.c:1016:
+		printk("Freeing interrupts not supported\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1379: FILE: drivers/staging/vme/vme.c:1029:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1380: FILE: drivers/staging/vme/vme.c:1030:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level < 1'
#1384: FILE: drivers/staging/vme/vme.c:1034:
+	if((level < 1) || (level > 7)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level > 7'
#1384: FILE: drivers/staging/vme/vme.c:1034:
+	if((level < 1) || (level > 7)) {

ERROR:SPACING: space required before the open parenthesis '('
#1384: FILE: drivers/staging/vme/vme.c:1034:
+	if((level < 1) || (level > 7)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1385: FILE: drivers/staging/vme/vme.c:1035:
+		printk(KERN_WARNING "Invalid interrupt level\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->generate_irq"
#1389: FILE: drivers/staging/vme/vme.c:1039:
+	if (bridge->generate_irq == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1390: FILE: drivers/staging/vme/vme.c:1040:
+		printk("Interrupt generation not supported\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: drivers/staging/vme/vme.c:1049:
+int vme_lm_set(struct device *dev, unsigned long long lm_base, vme_address_t aspace,
+	vme_cycle_t cycle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1404: FILE: drivers/staging/vme/vme.c:1054:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1405: FILE: drivers/staging/vme/vme.c:1055:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->lm_set"
#1409: FILE: drivers/staging/vme/vme.c:1059:
+	if (bridge->lm_set == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1410: FILE: drivers/staging/vme/vme.c:1060:
+		printk("vme_lm_set not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_lm_set', this function's name, in a string
#1410: FILE: drivers/staging/vme/vme.c:1060:
+		printk("vme_lm_set not supported\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1419: FILE: drivers/staging/vme/vme.c:1069:
+int vme_lm_get(struct device *dev, unsigned long long *lm_base, vme_address_t *aspace,
+	vme_cycle_t *cycle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1424: FILE: drivers/staging/vme/vme.c:1074:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1425: FILE: drivers/staging/vme/vme.c:1075:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->lm_get"
#1429: FILE: drivers/staging/vme/vme.c:1079:
+	if (bridge->lm_get == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1430: FILE: drivers/staging/vme/vme.c:1080:
+		printk("vme_lm_get not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_lm_get', this function's name, in a string
#1430: FILE: drivers/staging/vme/vme.c:1080:
+		printk("vme_lm_get not supported\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1443: FILE: drivers/staging/vme/vme.c:1093:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1444: FILE: drivers/staging/vme/vme.c:1094:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->lm_attach"
#1448: FILE: drivers/staging/vme/vme.c:1098:
+	if (bridge->lm_attach == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1449: FILE: drivers/staging/vme/vme.c:1099:
+		printk("vme_lm_attach not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_lm_attach', this function's name, in a string
#1449: FILE: drivers/staging/vme/vme.c:1099:
+		printk("vme_lm_attach not supported\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1462: FILE: drivers/staging/vme/vme.c:1112:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1463: FILE: drivers/staging/vme/vme.c:1113:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->lm_detach"
#1467: FILE: drivers/staging/vme/vme.c:1117:
+	if (bridge->lm_detach == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1468: FILE: drivers/staging/vme/vme.c:1118:
+		printk("vme_lm_detach not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_lm_detach', this function's name, in a string
#1468: FILE: drivers/staging/vme/vme.c:1118:
+		printk("vme_lm_detach not supported\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#1481: FILE: drivers/staging/vme/vme.c:1131:
+	if (bridge == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1482: FILE: drivers/staging/vme/vme.c:1132:
+		printk(KERN_ERR "Can't find VME bus\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge->slot_get"
#1486: FILE: drivers/staging/vme/vme.c:1136:
+	if (bridge->slot_get == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1487: FILE: drivers/staging/vme/vme.c:1137:
+		printk("vme_slot_get not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vme_slot_get', this function's name, in a string
#1487: FILE: drivers/staging/vme/vme.c:1137:
+		printk("vme_slot_get not supported\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1495: FILE: drivers/staging/vme/vme.c:1145:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1521: FILE: drivers/staging/vme/vme.c:1171:
+int vme_register_bridge (struct vme_bridge *bridge)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->dev[i]
#1534: FILE: drivers/staging/vme/vme.c:1184:
+		dev = &(bridge->dev[i]);

ERROR:SPACING: space required before the open parenthesis '('
#1548: FILE: drivers/staging/vme/vme.c:1198:
+		if(retval)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->dev[i]
#1557: FILE: drivers/staging/vme/vme.c:1207:
+		dev = &(bridge->dev[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1565: FILE: drivers/staging/vme/vme.c:1215:
+void vme_unregister_bridge (struct vme_bridge *bridge)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1570: FILE: drivers/staging/vme/vme.c:1220:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->dev[i]
#1572: FILE: drivers/staging/vme/vme.c:1222:
+		dev = &(bridge->dev[i]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1579: FILE: drivers/staging/vme/vme.c:1229:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1582: FILE: drivers/staging/vme/vme.c:1232:
+int vme_register_driver (struct vme_driver *drv)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1591: FILE: drivers/staging/vme/vme.c:1241:
+void vme_unregister_driver (struct vme_driver *drv)

ERROR:SPACING: space required before the open parenthesis '('
#1608: FILE: drivers/staging/vme/vme.c:1258:
+	while(num < VME_SLOTS_MAX) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bridge->dev[num]
#1609: FILE: drivers/staging/vme/vme.c:1259:
+		if(&(bridge->dev[num]) == dev) {

ERROR:SPACING: space required before the open parenthesis '('
#1609: FILE: drivers/staging/vme/vme.c:1259:
+		if(&(bridge->dev[num]) == dev) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1609: FILE: drivers/staging/vme/vme.c:1259:
+		if(&(bridge->dev[num]) == dev) {
+			break;
+		}

ERROR:SPACING: space required before the open parenthesis '('
#1627: FILE: drivers/staging/vme/vme.c:1277:
+	if(dev->driver == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->driver"
#1627: FILE: drivers/staging/vme/vme.c:1277:
+	if(dev->driver == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1628: FILE: drivers/staging/vme/vme.c:1278:
+		printk("Bugger dev->driver is NULL\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->bind_table"
#1646: FILE: drivers/staging/vme/vme.c:1296:
+	if (driver->bind_table == NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#1652: FILE: drivers/staging/vme/vme.c:1302:
+	while((driver->bind_table[i].bus != 0) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1653: FILE: drivers/staging/vme/vme.c:1303:
+	while((driver->bind_table[i].bus != 0) ||
+		(driver->bind_table[i].slot != 0)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1654: FILE: drivers/staging/vme/vme.c:1304:
+		(driver->bind_table[i].slot != 0)) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bridge->num == driver->bind_table[i].bus'
#1655: FILE: drivers/staging/vme/vme.c:1305:
+		if ((bridge->num == driver->bind_table[i].bus) &&
+			(num == driver->bind_table[i].slot))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num == driver->bind_table[i].slot'
#1655: FILE: drivers/staging/vme/vme.c:1305:
+		if ((bridge->num == driver->bind_table[i].bus) &&
+			(num == driver->bind_table[i].slot))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1656: FILE: drivers/staging/vme/vme.c:1306:
+		if ((bridge->num == driver->bind_table[i].bus) &&
+			(num == driver->bind_table[i].slot))

ERROR:SPACING: space required before the open parenthesis '('
#1675: FILE: drivers/staging/vme/vme.c:1325:
+	if(driver->probe != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1675: FILE: drivers/staging/vme/vme.c:1325:
+	if(driver->probe != NULL) {
+		retval = driver->probe(dev, bridge->num, vme_calc_slot(dev));
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "driver->probe"
#1675: FILE: drivers/staging/vme/vme.c:1325:
+	if(driver->probe != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#1691: FILE: drivers/staging/vme/vme.c:1341:
+	if(driver->remove != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1691: FILE: drivers/staging/vme/vme.c:1341:
+	if(driver->remove != NULL) {
+		retval = driver->remove(dev, bridge->num, vme_calc_slot(dev));
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "driver->remove"
#1691: FILE: drivers/staging/vme/vme.c:1341:
+	if(driver->remove != NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1706: FILE: drivers/staging/vme/vme.c:1356:
+static int __init vme_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1711: FILE: drivers/staging/vme/vme.c:1361:
+static void __exit vme_exit (void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1725: FILE: drivers/staging/vme/vme.h:1:
+#ifndef _VME_H_

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1753: FILE: drivers/staging/vme/vme.h:29:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <VME_2eVME>
#1759: FILE: drivers/staging/vme/vme.h:35:
+#define VME_2eVME	0x8

CHECK:CAMELCASE: Avoid CamelCase: <VME_2eSST>
#1760: FILE: drivers/staging/vme/vme.h:36:
+#define VME_2eSST	0x10

CHECK:CAMELCASE: Avoid CamelCase: <VME_2eSSTB>
#1761: FILE: drivers/staging/vme/vme.h:37:
+#define VME_2eSSTB	0x20

CHECK:CAMELCASE: Avoid CamelCase: <VME_2eSST160>
#1763: FILE: drivers/staging/vme/vme.h:39:
+#define VME_2eSST160	0x100

CHECK:CAMELCASE: Avoid CamelCase: <VME_2eSST267>
#1764: FILE: drivers/staging/vme/vme.h:40:
+#define VME_2eSST267	0x200

CHECK:CAMELCASE: Avoid CamelCase: <VME_2eSST320>
#1765: FILE: drivers/staging/vme/vme.h:41:
+#define VME_2eSST320	0x400

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1785: FILE: drivers/staging/vme/vme.h:61:
+#define VME_DMA_PATTERN			(1<<0)
                        			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1785: FILE: drivers/staging/vme/vme.h:61:
+#define VME_DMA_PATTERN			(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1786: FILE: drivers/staging/vme/vme.h:62:
+#define VME_DMA_PCI			(1<<1)
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1786: FILE: drivers/staging/vme/vme.h:62:
+#define VME_DMA_PCI			(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1787: FILE: drivers/staging/vme/vme.h:63:
+#define VME_DMA_VME			(1<<2)
                    			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1787: FILE: drivers/staging/vme/vme.h:63:
+#define VME_DMA_VME			(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1790: FILE: drivers/staging/vme/vme.h:66:
+#define VME_DMA_PATTERN_BYTE		(1<<0)
                             		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1790: FILE: drivers/staging/vme/vme.h:66:
+#define VME_DMA_PATTERN_BYTE		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1791: FILE: drivers/staging/vme/vme.h:67:
+#define VME_DMA_PATTERN_WORD		(1<<1)
                             		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1791: FILE: drivers/staging/vme/vme.h:67:
+#define VME_DMA_PATTERN_WORD		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1792: FILE: drivers/staging/vme/vme.h:68:
+#define VME_DMA_PATTERN_INCREMENT	(1<<2)
                                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1792: FILE: drivers/staging/vme/vme.h:68:
+#define VME_DMA_PATTERN_INCREMENT	(1<<2)

WARNING:SPACING: Unnecessary space before function pointer arguments
#1815: FILE: drivers/staging/vme/vme.h:91:
+	int (*probe)  (struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1815: FILE: drivers/staging/vme/vme.h:91:
+	int (*probe)  (struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1815: FILE: drivers/staging/vme/vme.h:91:
+	int (*probe)  (struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1815: FILE: drivers/staging/vme/vme.h:91:
+	int (*probe)  (struct device *, int, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1816: FILE: drivers/staging/vme/vme.h:92:
+	int (*remove) (struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1816: FILE: drivers/staging/vme/vme.h:92:
+	int (*remove) (struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1816: FILE: drivers/staging/vme/vme.h:92:
+	int (*remove) (struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1816: FILE: drivers/staging/vme/vme.h:92:
+	int (*remove) (struct device *, int, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1817: FILE: drivers/staging/vme/vme.h:93:
+	void (*shutdown) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1821: FILE: drivers/staging/vme/vme.h:97:
+void * vme_alloc_consistent(struct vme_resource *, size_t, dma_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1821: FILE: drivers/staging/vme/vme.h:97:
+void * vme_alloc_consistent(struct vme_resource *, size_t, dma_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1821: FILE: drivers/staging/vme/vme.h:97:
+void * vme_alloc_consistent(struct vme_resource *, size_t, dma_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t *' should also have an identifier name
#1821: FILE: drivers/staging/vme/vme.h:97:
+void * vme_alloc_consistent(struct vme_resource *, size_t, dma_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1822: FILE: drivers/staging/vme/vme.h:98:
+void vme_free_consistent(struct vme_resource *, size_t,  void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1822: FILE: drivers/staging/vme/vme.h:98:
+void vme_free_consistent(struct vme_resource *, size_t,  void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1822: FILE: drivers/staging/vme/vme.h:98:
+void vme_free_consistent(struct vme_resource *, size_t,  void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#1822: FILE: drivers/staging/vme/vme.h:98:
+void vme_free_consistent(struct vme_resource *, size_t,  void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1823: FILE: drivers/staging/vme/vme.h:99:
+void vme_free_consistent(struct vme_resource *, size_t,  void *,
+	dma_addr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1825: FILE: drivers/staging/vme/vme.h:101:
+size_t vme_get_size(struct vme_resource *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1827: FILE: drivers/staging/vme/vme.h:103:
+struct vme_resource * vme_slave_request(struct device *, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1827: FILE: drivers/staging/vme/vme.h:103:
+struct vme_resource * vme_slave_request(struct device *, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#1827: FILE: drivers/staging/vme/vme.h:103:
+struct vme_resource * vme_slave_request(struct device *, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#1827: FILE: drivers/staging/vme/vme.h:103:
+struct vme_resource * vme_slave_request(struct device *, vme_address_t, vme_cycle_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#1828: FILE: drivers/staging/vme/vme.h:104:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1829: FILE: drivers/staging/vme/vme.h:105:
+int vme_slave_set (struct vme_resource *, int, unsigned long long,
+	unsigned long long, dma_addr_t, vme_address_t, vme_cycle_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t *' should also have an identifier name
#1830: FILE: drivers/staging/vme/vme.h:106:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1831: FILE: drivers/staging/vme/vme.h:107:
+int vme_slave_get (struct vme_resource *, int *, unsigned long long *,
+	unsigned long long *, dma_addr_t *, vme_address_t *, vme_cycle_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1832: FILE: drivers/staging/vme/vme.h:108:
+void vme_slave_free(struct vme_resource *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1834: FILE: drivers/staging/vme/vme.h:110:
+struct vme_resource * vme_master_request(struct device *, vme_address_t, vme_cycle_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1834: FILE: drivers/staging/vme/vme.h:110:
+struct vme_resource * vme_master_request(struct device *, vme_address_t, vme_cycle_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#1834: FILE: drivers/staging/vme/vme.h:110:
+struct vme_resource * vme_master_request(struct device *, vme_address_t, vme_cycle_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#1834: FILE: drivers/staging/vme/vme.h:110:
+struct vme_resource * vme_master_request(struct device *, vme_address_t, vme_cycle_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_width_t' should also have an identifier name
#1834: FILE: drivers/staging/vme/vme.h:110:
+struct vme_resource * vme_master_request(struct device *, vme_address_t, vme_cycle_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1835: FILE: drivers/staging/vme/vme.h:111:
+struct vme_resource * vme_master_request(struct device *, vme_address_t, vme_cycle_t,
+	vme_width_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_width_t' should also have an identifier name
#1836: FILE: drivers/staging/vme/vme.h:112:
+int vme_master_set (struct vme_resource *, int, unsigned long long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1837: FILE: drivers/staging/vme/vme.h:113:
+int vme_master_set (struct vme_resource *, int, unsigned long long,
+	unsigned long long, vme_address_t, vme_cycle_t, vme_width_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_width_t *' should also have an identifier name
#1838: FILE: drivers/staging/vme/vme.h:114:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1839: FILE: drivers/staging/vme/vme.h:115:
+int vme_master_get (struct vme_resource *, int *, unsigned long long *,
+	unsigned long long *, vme_address_t *, vme_cycle_t *, vme_width_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1840: FILE: drivers/staging/vme/vme.h:116:
+ssize_t vme_master_read(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1840: FILE: drivers/staging/vme/vme.h:116:
+ssize_t vme_master_read(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1840: FILE: drivers/staging/vme/vme.h:116:
+ssize_t vme_master_read(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1840: FILE: drivers/staging/vme/vme.h:116:
+ssize_t vme_master_read(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1841: FILE: drivers/staging/vme/vme.h:117:
+ssize_t vme_master_write(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1841: FILE: drivers/staging/vme/vme.h:117:
+ssize_t vme_master_write(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1841: FILE: drivers/staging/vme/vme.h:117:
+ssize_t vme_master_write(struct vme_resource *, void *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1841: FILE: drivers/staging/vme/vme.h:117:
+ssize_t vme_master_write(struct vme_resource *, void *, size_t, loff_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1842: FILE: drivers/staging/vme/vme.h:118:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1842: FILE: drivers/staging/vme/vme.h:118:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1842: FILE: drivers/staging/vme/vme.h:118:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1842: FILE: drivers/staging/vme/vme.h:118:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1842: FILE: drivers/staging/vme/vme.h:118:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1842: FILE: drivers/staging/vme/vme.h:118:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1843: FILE: drivers/staging/vme/vme.h:119:
+unsigned int vme_master_rmw (struct vme_resource *, unsigned int, unsigned int,
+	unsigned int, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1844: FILE: drivers/staging/vme/vme.h:120:
+void vme_master_free(struct vme_resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1846: FILE: drivers/staging/vme/vme.h:122:
+struct vme_resource *vme_request_dma(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1847: FILE: drivers/staging/vme/vme.h:123:
+struct vme_dma_list *vme_new_dma_list(struct vme_resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1848: FILE: drivers/staging/vme/vme.h:124:
+struct vme_dma_attr *vme_dma_pattern_attribute(u32, vme_pattern_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_pattern_t' should also have an identifier name
#1848: FILE: drivers/staging/vme/vme.h:124:
+struct vme_dma_attr *vme_dma_pattern_attribute(u32, vme_pattern_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#1849: FILE: drivers/staging/vme/vme.h:125:
+struct vme_dma_attr *vme_dma_pci_attribute(dma_addr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1850: FILE: drivers/staging/vme/vme.h:126:
+struct vme_dma_attr *vme_dma_vme_attribute(unsigned long long, vme_address_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#1850: FILE: drivers/staging/vme/vme.h:126:
+struct vme_dma_attr *vme_dma_vme_attribute(unsigned long long, vme_address_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#1850: FILE: drivers/staging/vme/vme.h:126:
+struct vme_dma_attr *vme_dma_vme_attribute(unsigned long long, vme_address_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_width_t' should also have an identifier name
#1850: FILE: drivers/staging/vme/vme.h:126:
+struct vme_dma_attr *vme_dma_vme_attribute(unsigned long long, vme_address_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1851: FILE: drivers/staging/vme/vme.h:127:
+struct vme_dma_attr *vme_dma_vme_attribute(unsigned long long, vme_address_t,
+	vme_cycle_t, vme_width_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_attr *' should also have an identifier name
#1852: FILE: drivers/staging/vme/vme.h:128:
+void vme_dma_free_attribute(struct vme_dma_attr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_list *' should also have an identifier name
#1853: FILE: drivers/staging/vme/vme.h:129:
+int vme_dma_list_add(struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_attr *' should also have an identifier name
#1853: FILE: drivers/staging/vme/vme.h:129:
+int vme_dma_list_add(struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_attr *' should also have an identifier name
#1853: FILE: drivers/staging/vme/vme.h:129:
+int vme_dma_list_add(struct vme_dma_list *, struct vme_dma_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1853: FILE: drivers/staging/vme/vme.h:129:
+int vme_dma_list_add(struct vme_dma_list *, struct vme_dma_attr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1854: FILE: drivers/staging/vme/vme.h:130:
+int vme_dma_list_add(struct vme_dma_list *, struct vme_dma_attr *,
+	struct vme_dma_attr *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_list *' should also have an identifier name
#1855: FILE: drivers/staging/vme/vme.h:131:
+int vme_dma_list_exec(struct vme_dma_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_dma_list *' should also have an identifier name
#1856: FILE: drivers/staging/vme/vme.h:132:
+int vme_dma_list_free(struct vme_dma_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_resource *' should also have an identifier name
#1857: FILE: drivers/staging/vme/vme.h:133:
+int vme_dma_free(struct vme_resource *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1859: FILE: drivers/staging/vme/vme.h:135:
+int vme_request_irq(struct device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1859: FILE: drivers/staging/vme/vme.h:135:
+int vme_request_irq(struct device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1859: FILE: drivers/staging/vme/vme.h:135:
+int vme_request_irq(struct device *, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1859: FILE: drivers/staging/vme/vme.h:135:
+int vme_request_irq(struct device *, int, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1860: FILE: drivers/staging/vme/vme.h:136:
+int vme_request_irq(struct device *, int, int,
+	void (*callback)(int, int, void *), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1861: FILE: drivers/staging/vme/vme.h:137:
+void vme_free_irq(struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1861: FILE: drivers/staging/vme/vme.h:137:
+void vme_free_irq(struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1861: FILE: drivers/staging/vme/vme.h:137:
+void vme_free_irq(struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1862: FILE: drivers/staging/vme/vme.h:138:
+int vme_generate_irq(struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1862: FILE: drivers/staging/vme/vme.h:138:
+int vme_generate_irq(struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1862: FILE: drivers/staging/vme/vme.h:138:
+int vme_generate_irq(struct device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1864: FILE: drivers/staging/vme/vme.h:140:
+int vme_lm_set(struct device *, unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1864: FILE: drivers/staging/vme/vme.h:140:
+int vme_lm_set(struct device *, unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t' should also have an identifier name
#1864: FILE: drivers/staging/vme/vme.h:140:
+int vme_lm_set(struct device *, unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t' should also have an identifier name
#1864: FILE: drivers/staging/vme/vme.h:140:
+int vme_lm_set(struct device *, unsigned long long, vme_address_t, vme_cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1865: FILE: drivers/staging/vme/vme.h:141:
+int vme_lm_get(struct device *, unsigned long long *, vme_address_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#1865: FILE: drivers/staging/vme/vme.h:141:
+int vme_lm_get(struct device *, unsigned long long *, vme_address_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_address_t *' should also have an identifier name
#1865: FILE: drivers/staging/vme/vme.h:141:
+int vme_lm_get(struct device *, unsigned long long *, vme_address_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vme_cycle_t *' should also have an identifier name
#1865: FILE: drivers/staging/vme/vme.h:141:
+int vme_lm_get(struct device *, unsigned long long *, vme_address_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1866: FILE: drivers/staging/vme/vme.h:142:
+int vme_lm_get(struct device *, unsigned long long *, vme_address_t *,
+	vme_cycle_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1867: FILE: drivers/staging/vme/vme.h:143:
+int vme_lm_attach(struct device *, int, void (*callback)(int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1867: FILE: drivers/staging/vme/vme.h:143:
+int vme_lm_attach(struct device *, int, void (*callback)(int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1868: FILE: drivers/staging/vme/vme.h:144:
+int vme_lm_detach(struct device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1868: FILE: drivers/staging/vme/vme.h:144:
+int vme_lm_detach(struct device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1870: FILE: drivers/staging/vme/vme.h:146:
+int vme_slot_get(struct device *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1872: FILE: drivers/staging/vme/vme.h:148:
+int vme_register_driver (struct vme_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_driver *' should also have an identifier name
#1872: FILE: drivers/staging/vme/vme.h:148:
+int vme_register_driver (struct vme_driver *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1873: FILE: drivers/staging/vme/vme.h:149:
+void vme_unregister_driver (struct vme_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vme_driver *' should also have an identifier name
#1873: FILE: drivers/staging/vme/vme.h:149:
+void vme_unregister_driver (struct vme_driver *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1875: FILE: drivers/staging/vme/vme.h:151:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089195.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 36 errors, 349 warnings, 256 checks, 1808 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089195.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
