WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Add support for the create, link, symlink, unlink, mkdir, rmdir and rename VFS

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#45: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "server"
#193: FILE: fs/afs/callback.c:270:
+	ASSERT(server != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "server->cb_promises.rb_node"
#197: FILE: fs/afs/callback.c:274:
+		ASSERT(server->cb_promises.rb_node != NULL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#220: FILE: fs/afs/dir.c:22:
+				 struct nameidata *nd);
 				                   ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: fs/afs/dir.c:29:
+static int afs_lookup_filldir(void *_cookie, const char *name, int nlen,
 				  loff_t fpos, u64 ino, unsigned dtype);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#231: FILE: fs/afs/dir.c:31:
+		      struct nameidata *nd);
 		                        ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#314: FILE: fs/afs/dir.c:417:
+			      loff_t fpos, u64 ino, unsigned dtype)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#351: FILE: fs/afs/dir.c:486:
+				 struct nameidata *nd)
 				                   ^^

CHECK:SPACING: No space is necessary after a cast
#398: FILE: fs/afs/dir.c:535:
+	dentry->d_fsdata = (void *)(unsigned long) vnode->status.data_version;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#515: FILE: fs/afs/dir.c:600:
+	dir_version = (void *) (unsigned long) dir->status.data_version;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: fs/afs/dir.c:614:
+			printk("kAFS: afs_d_revalidate: %s/%s has bad inode\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#549: FILE: fs/afs/dir.c:630:
+		 * been reused */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#680: FILE: fs/afs/dir.c:758:
+		 * directory on the server */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#830: FILE: fs/afs/dir.c:908:
+		      struct nameidata *nd)
 		                        ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#865: FILE: fs/afs/dir.c:943:
+		 * directory on the server */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#985: FILE: fs/afs/dir.c:1063:
+		 * directory on the server */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1079: FILE: fs/afs/file.c:62:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <xdr_decode_AFSFid>
#1098: FILE: fs/afs/fsclient.c:21:
+static void xdr_decode_AFSFid(const __be32 **_bp, struct afs_fid *fid)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#1163: FILE: fs/afs/fsclient.c:69:
+	size |= (u64) ntohl(*bp++) << 32;

CHECK:CAMELCASE: Avoid CamelCase: <xdr_decode_AFSCallBack_raw>
#1235: FILE: fs/afs/fsclient.c:129:
+static void xdr_decode_AFSCallBack_raw(const __be32 **_bp,

CHECK:CAMELCASE: Avoid CamelCase: <xdr_decode_AFSFetchStatus>
#1263: FILE: fs/afs/fsclient.c:177:
+	xdr_decode_AFSFetchStatus(&bp, &vnode->status, vnode);

CHECK:CAMELCASE: Avoid CamelCase: <xdr_decode_AFSCallBack>
#1264: FILE: fs/afs/fsclient.c:178:
+	xdr_decode_AFSCallBack(&bp, vnode);

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSFetchStatus>
#1277: FILE: fs/afs/fsclient.c:211:
+	call = afs_alloc_flat_call(&afs_RXFSFetchStatus, 16, (21 + 3 + 6) * 4);

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSFetchData>
#1323: FILE: fs/afs/fsclient.c:348:
+	call = afs_alloc_flat_call(&afs_RXFSFetchData, 24, (21 + 3 + 6) * 4);

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSCreateXXXX>
#1372: FILE: fs/afs/fsclient.c:489:
+static const struct afs_call_type afs_RXFSCreateXXXX = {

CHECK:SPACING: No space is necessary after a cast
#1423: FILE: fs/afs/fsclient.c:540:
+	bp = (void *) bp + namesz;

CHECK:SPACING: No space is necessary after a cast
#1426: FILE: fs/afs/fsclient.c:543:
+		bp = (void *) bp + padsz;

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSRemoveXXXX>
#1468: FILE: fs/afs/fsclient.c:585:
+static const struct afs_call_type afs_RXFSRemoveXXXX = {

CHECK:SPACING: No space is necessary after a cast
#1512: FILE: fs/afs/fsclient.c:629:
+	bp = (void *) bp + namesz;

CHECK:SPACING: No space is necessary after a cast
#1515: FILE: fs/afs/fsclient.c:632:
+		bp = (void *) bp + padsz;

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSLink>
#1552: FILE: fs/afs/fsclient.c:669:
+static const struct afs_call_type afs_RXFSLink = {

CHECK:SPACING: No space is necessary after a cast
#1597: FILE: fs/afs/fsclient.c:714:
+	bp = (void *) bp + namesz;

CHECK:SPACING: No space is necessary after a cast
#1600: FILE: fs/afs/fsclient.c:717:
+		bp = (void *) bp + padsz;

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSSymlink>
#1641: FILE: fs/afs/fsclient.c:758:
+static const struct afs_call_type afs_RXFSSymlink = {

CHECK:SPACING: No space is necessary after a cast
#1694: FILE: fs/afs/fsclient.c:811:
+	bp = (void *) bp + namesz;

CHECK:SPACING: No space is necessary after a cast
#1697: FILE: fs/afs/fsclient.c:814:
+		bp = (void *) bp + padsz;

CHECK:SPACING: No space is necessary after a cast
#1701: FILE: fs/afs/fsclient.c:818:
+	bp = (void *) bp + c_namesz;

CHECK:SPACING: No space is necessary after a cast
#1704: FILE: fs/afs/fsclient.c:821:
+		bp = (void *) bp + c_padsz;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1710: FILE: fs/afs/fsclient.c:827:
+	*bp++ = htonl(S_IRWXUGO); /* unix mode */

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1720: FILE: fs/afs/fsclient.c:837:
+static int afs_deliver_fs_rename(struct afs_call *call,
+				  struct sk_buff *skb, bool last)

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSRename>
#1748: FILE: fs/afs/fsclient.c:865:
+static const struct afs_call_type afs_RXFSRename = {

CHECK:SPACING: No space is necessary after a cast
#1801: FILE: fs/afs/fsclient.c:918:
+	bp = (void *) bp + o_namesz;

CHECK:SPACING: No space is necessary after a cast
#1804: FILE: fs/afs/fsclient.c:921:
+		bp = (void *) bp + o_padsz;

CHECK:SPACING: No space is necessary after a cast
#1812: FILE: fs/afs/fsclient.c:929:
+	bp = (void *) bp + n_namesz;

CHECK:SPACING: No space is necessary after a cast
#1815: FILE: fs/afs/fsclient.c:932:
+		bp = (void *) bp + n_padsz;

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1829: FILE: fs/afs/inode.c:36:
+	_debug("FS: ft=%d lk=%d sz=%llu ver=%Lu mod=%hu",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1866: FILE: fs/afs/inode.c:172:
+			 * didn't give us a callback) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1928: FILE: fs/afs/inode.c:243:
+	 * access */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1945: FILE: fs/afs/inode.c:260:
+	 * different */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2027: FILE: fs/afs/internal.h:390:
+extern void afs_discard_callback_on_delete(struct afs_vnode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2027: FILE: fs/afs/internal.h:390:
+extern void afs_discard_callback_on_delete(struct afs_vnode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'umode_t' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_fid *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_file_status *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_callback *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#2037: FILE: fs/afs/internal.h:452:
+extern int afs_fs_create(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#2042: FILE: fs/afs/internal.h:457:
+extern int afs_fs_remove(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#2045: FILE: fs/afs/internal.h:460:
+extern int afs_fs_link(struct afs_server *, struct key *, struct afs_vnode *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_fid *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_file_status *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#2048: FILE: fs/afs/internal.h:463:
+extern int afs_fs_symlink(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#2052: FILE: fs/afs/internal.h:467:
+extern int afs_fs_rename(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2064: FILE: fs/afs/internal.h:478:
+extern int afs_validate(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2064: FILE: fs/afs/internal.h:478:
+extern int afs_validate(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2064: FILE: fs/afs/internal.h:478:
+extern int afs_validate(struct afs_vnode *, struct key *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'S' - possible side-effects?
#2073: FILE: fs/afs/internal.h:545:
+#define afs_get_server(S)					\
+do {								\
+	_debug("GET SERVER %d", atomic_read(&(S)->usage));	\
+	atomic_inc(&(S)->usage);				\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2077: FILE: fs/afs/internal.h:549:
+} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2085: FILE: fs/afs/internal.h:615:
+extern void afs_vnode_finalise_status_update(struct afs_vnode *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'umode_t' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_fid *' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_file_status *' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_callback *' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server **' should also have an identifier name
#2091: FILE: fs/afs/internal.h:621:
+extern int afs_vnode_create(struct afs_vnode *, struct key *, const char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2094: FILE: fs/afs/internal.h:624:
+extern int afs_vnode_remove(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2094: FILE: fs/afs/internal.h:624:
+extern int afs_vnode_remove(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2094: FILE: fs/afs/internal.h:624:
+extern int afs_vnode_remove(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2094: FILE: fs/afs/internal.h:624:
+extern int afs_vnode_remove(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#2094: FILE: fs/afs/internal.h:624:
+extern int afs_vnode_remove(struct afs_vnode *, struct key *, const char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2096: FILE: fs/afs/internal.h:626:
+extern int afs_vnode_link(struct afs_vnode *, struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2096: FILE: fs/afs/internal.h:626:
+extern int afs_vnode_link(struct afs_vnode *, struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2096: FILE: fs/afs/internal.h:626:
+extern int afs_vnode_link(struct afs_vnode *, struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2096: FILE: fs/afs/internal.h:626:
+extern int afs_vnode_link(struct afs_vnode *, struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2096: FILE: fs/afs/internal.h:626:
+extern int afs_vnode_link(struct afs_vnode *, struct afs_vnode *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_fid *' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_file_status *' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server **' should also have an identifier name
#2098: FILE: fs/afs/internal.h:628:
+extern int afs_vnode_symlink(struct afs_vnode *, struct key *, const char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2101: FILE: fs/afs/internal.h:631:
+extern int afs_vnode_rename(struct afs_vnode *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2101: FILE: fs/afs/internal.h:631:
+extern int afs_vnode_rename(struct afs_vnode *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#2101: FILE: fs/afs/internal.h:631:
+extern int afs_vnode_rename(struct afs_vnode *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#2101: FILE: fs/afs/internal.h:631:
+extern int afs_vnode_rename(struct afs_vnode *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2101: FILE: fs/afs/internal.h:631:
+extern int afs_vnode_rename(struct afs_vnode *, struct afs_vnode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2101: FILE: fs/afs/internal.h:631:
+extern int afs_vnode_rename(struct afs_vnode *, struct afs_vnode *,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2720: FILE: fs/afs/vnode.c:704:
+	 * with */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 85 warnings, 46 checks, 2627 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
