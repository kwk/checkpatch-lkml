WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: arch/microblaze/include/asm/unistd.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: arch/microblaze/include/asm/unistd.h:273:
+#define __NR_timer_settime	(__NR_timer_create+1) /* 260 */ /* ok */
                           	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#366: FILE: arch/microblaze/include/asm/unistd.h:274:
+#define __NR_timer_gettime	(__NR_timer_create+2) /* 261 */ /* ok */
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#367: FILE: arch/microblaze/include/asm/unistd.h:275:
+#define __NR_timer_getoverrun	(__NR_timer_create+3) /* 262 */ /* ok */
                              	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#368: FILE: arch/microblaze/include/asm/unistd.h:276:
+#define __NR_timer_delete	(__NR_timer_create+4) /* 263 */ /* ok */
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#369: FILE: arch/microblaze/include/asm/unistd.h:277:
+#define __NR_clock_settime	(__NR_timer_create+5) /* 264 */ /* ok */
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#370: FILE: arch/microblaze/include/asm/unistd.h:278:
+#define __NR_clock_gettime	(__NR_timer_create+6) /* 265 */ /* ok */
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#371: FILE: arch/microblaze/include/asm/unistd.h:279:
+#define __NR_clock_getres	(__NR_timer_create+7) /* 266 */ /* ok */
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#372: FILE: arch/microblaze/include/asm/unistd.h:280:
+#define __NR_clock_nanosleep	(__NR_timer_create+8) /* 267 */ /* ok */
                             	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#383: FILE: arch/microblaze/include/asm/unistd.h:291:
+#define __NR_mq_unlink		(__NR_mq_open+1) /* 278 */ /* ok */
                       		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: arch/microblaze/include/asm/unistd.h:292:
+#define __NR_mq_timedsend	(__NR_mq_open+2) /* 279 */ /* ok */
                          	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: arch/microblaze/include/asm/unistd.h:293:
+#define __NR_mq_timedreceive	(__NR_mq_open+3) /* 280 */ /* ok */
                             	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#386: FILE: arch/microblaze/include/asm/unistd.h:294:
+#define __NR_mq_notify		(__NR_mq_open+4) /* 281 */ /* ok */
                       		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: arch/microblaze/include/asm/unistd.h:295:
+#define __NR_mq_getsetattr	(__NR_mq_open+5) /* 282 */ /* ok */
                           	             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: arch/microblaze/include/asm/unistd.h:354:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#504: FILE: arch/microblaze/include/asm/unistd.h:412:
+ * What we want is __attribute__((weak,alias("sys_ni_syscall"))),

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("sys_ni_syscall") over __attribute__((alias("sys_ni_syscall")))
#504: FILE: arch/microblaze/include/asm/unistd.h:412:
+ * What we want is __attribute__((weak,alias("sys_ni_syscall"))),

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#507: FILE: arch/microblaze/include/asm/unistd.h:415:
+#define cond_syscall(x) asm(".weak\t" #x "\n\t.set\t" #x ",sys_ni_syscall");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152804.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 14 checks, 419 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152804.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
