CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#72: FILE: kernel/timer.c:1245:
+#define LOAD_FREQ	(5*HZ)		/* 5 sec intervals */
                  	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
+	load *= exp; \
+	load += n*(FIXED_1-exp); \
+	load >>= FSHIFT;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'load' - possible side-effects?
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
+	load *= exp; \
+	load += n*(FIXED_1-exp); \
+	load >>= FSHIFT;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'load' may be better as '(load)' to avoid precedence issues
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
+	load *= exp; \
+	load += n*(FIXED_1-exp); \
+	load >>= FSHIFT;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'exp' - possible side-effects?
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
+	load *= exp; \
+	load += n*(FIXED_1-exp); \
+	load >>= FSHIFT;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
+	load *= exp; \
+	load += n*(FIXED_1-exp); \
+	load >>= FSHIFT;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#76: FILE: kernel/timer.c:1249:
+#define CALC_LOAD(load,exp,n) \
+	load *= exp; \
+	load += n*(FIXED_1-exp); \
+	load >>= FSHIFT;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#78: FILE: kernel/timer.c:1251:
+	load += n*(FIXED_1-exp); \
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#78: FILE: kernel/timer.c:1251:
+	load += n*(FIXED_1-exp); \
 	                  ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438679.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 1 warnings, 7 checks, 30 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438679.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
