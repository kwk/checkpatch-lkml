WARNING:TYPO_SPELLING: 'arguements' may be misspelled - perhaps 'arguments'?
#44: 
> 3. Change poll callback arguements and semantics
                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: drivers/net/8139cp.c:519:
+static int cp_rx_poll (struct napi_struct *napi, int budget)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <IntrStatus>
#207: FILE: drivers/net/8139too.c:2123:
+	if (likely(RTL_R16(IntrStatus) & RxAckBits))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <RxAckBits>
#207: FILE: drivers/net/8139too.c:2123:
+	if (likely(RTL_R16(IntrStatus) & RxAckBits))

CHECK:CAMELCASE: Avoid CamelCase: <respQ>
#462: FILE: drivers/net/chelsio/sge.c:1634:
+		writel(adapter->sge->respQ.cidx,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#478: FILE: drivers/net/chelsio/sge.h:80:
+int t1_poll(struct napi_struct *, int );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct napi_struct *' should also have an identifier name
#478: FILE: drivers/net/chelsio/sge.h:80:
+int t1_poll(struct napi_struct *, int );

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#478: FILE: drivers/net/chelsio/sge.h:80:
+int t1_poll(struct napi_struct *, int );

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#619: FILE: drivers/net/cxgb3/sge.c:1881:
+		/*
+		 * Because we don't atomically flush the following

ERROR:CODE_INDENT: code indent should use tabs where possible
#762: FILE: drivers/net/e1000/e1000_main.c:3946:
+^I                  &work_done, budget);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done < budget'
#766: FILE: drivers/net/e1000/e1000_main.c:3949:
+	if ((tx_cleaned && (work_done < budget)) ||
 	   !netif_running(poll_dev)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: drivers/net/e1000/e1000_main.c:3950:
+	if ((tx_cleaned && (work_done < budget)) ||
 	   !netif_running(poll_dev)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done < budget'
#833: FILE: drivers/net/epic100.c:1280:
+	if (netif_running(dev) && (work_done < budget)) {

CHECK:SPACING: No space is necessary after a cast
#1128: FILE: drivers/net/netxen/netxen_nic_hw.c:231:
+	       (unsigned long long) adapter->ctx_desc_phys_addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1137: FILE: drivers/net/netxen/netxen_nic_hw.c:249:
+	printk("cmd_desc_phys_addr: 0x%llx\n",

CHECK:SPACING: No space is necessary after a cast
#1138: FILE: drivers/net/netxen/netxen_nic_hw.c:250:
+	       (unsigned long long) hw->cmd_desc_phys_addr);

CHECK:SPACING: No space is necessary after a cast
#1445: FILE: drivers/net/r8169.c:2692:
+	work_done = rtl8169_rx_interrupt(dev, tp, ioaddr, (u32) budget);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1584: FILE: drivers/net/skge.c:3021:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1635: FILE: drivers/net/sky2.c:2360:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1681: FILE: drivers/net/sky2.c:2420:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1790: FILE: drivers/net/starfire.c:1560:
+		printk(KERN_DEBUG "  exiting netdev_poll(): %d.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'netdev_poll', this function's name, in a string
#1790: FILE: drivers/net/starfire.c:1560:
+		printk(KERN_DEBUG "  exiting netdev_poll(): %d.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1965: FILE: drivers/net/tulip/interrupt.c:125:
+        if (budget >=RX_RING_SIZE) budget--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1965: FILE: drivers/net/tulip/interrupt.c:125:
+        if (budget >=RX_RING_SIZE) budget--;$

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1965: FILE: drivers/net/tulip/interrupt.c:125:
+        if (budget >=RX_RING_SIZE) budget--;
                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1965: FILE: drivers/net/tulip/interrupt.c:125:
+        if (budget >=RX_RING_SIZE) budget--;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#1981: FILE: drivers/net/tulip/interrupt.c:151:
+		       if (work_done++ >= budget)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#1981: FILE: drivers/net/tulip/interrupt.c:151:
+		       if (work_done++ >= budget)
                                goto not_done;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2004: FILE: drivers/net/tulip/interrupt.c:299:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2004: FILE: drivers/net/tulip/interrupt.c:299:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#2004: FILE: drivers/net/tulip/interrupt.c:299:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)
+		 goto oom;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb"
#2004: FILE: drivers/net/tulip/interrupt.c:299:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TABSTOP: Statements should start on a tabstop
#2005: FILE: drivers/net/tulip/interrupt.c:300:
+		 goto oom;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2014: FILE: drivers/net/tulip/interrupt.c:318:
+         return work_done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2014: FILE: drivers/net/tulip/interrupt.c:318:
+         return work_done;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2031: FILE: drivers/net/tulip/interrupt.c:325:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2031: FILE: drivers/net/tulip/interrupt.c:325:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#2031: FILE: drivers/net/tulip/interrupt.c:325:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)
+		 goto oom;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb"
#2031: FILE: drivers/net/tulip/interrupt.c:325:
+         if (tp->rx_buffers[tp->dirty_rx % RX_RING_SIZE].skb == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#2032: FILE: drivers/net/tulip/interrupt.c:326:
+		 goto oom;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2034: FILE: drivers/net/tulip/interrupt.c:328:
+         return work_done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2034: FILE: drivers/net/tulip/interrupt.c:328:
+         return work_done;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2047: FILE: drivers/net/tulip/interrupt.c:342:
+         return work_done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2047: FILE: drivers/net/tulip/interrupt.c:342:
+         return work_done;$

CHECK:CAMELCASE: Avoid CamelCase: <rxHiRing>
#2112: FILE: drivers/net/typhoon.c:1790:
+		work_done += typhoon_rx(tp, &tp->rxHiRing, &indexes->rxHiReady,

CHECK:CAMELCASE: Avoid CamelCase: <rxHiReady>
#2112: FILE: drivers/net/typhoon.c:1790:
+		work_done += typhoon_rx(tp, &tp->rxHiRing, &indexes->rxHiReady,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2128: FILE: drivers/net/typhoon.c:1796:
+^I^I^I   ^I^I&indexes->rxLoCleared, budget - work_done);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2128: FILE: drivers/net/typhoon.c:1796:
+^I^I^I   ^I^I&indexes->rxLoCleared, budget - work_done);$

CHECK:CAMELCASE: Avoid CamelCase: <rxLoCleared>
#2128: FILE: drivers/net/typhoon.c:1796:
+			   		&indexes->rxLoCleared, budget - work_done);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct napi_struct *' should also have an identifier name
#2241: FILE: include/linux/netdevice.h:272:
+	int			(*poll)(struct napi_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2241: FILE: include/linux/netdevice.h:272:
+	int			(*poll)(struct napi_struct *, int);

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#2245: FILE: include/linux/netdevice.h:276:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2267: FILE: include/linux/netdevice.h:298:
+extern void FASTCALL(__napi_schedule(struct napi_struct *n));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2282: FILE: include/linux/netdevice.h:313:
+	BUG_ON(!test_bit(NAPI_STATE_SCHED, &n->state));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2295: FILE: include/linux/netdevice.h:326:
+	BUG_ON(!test_bit(NAPI_STATE_SCHED, &n->state));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2353: FILE: include/linux/netdevice.h:741:
+extern void dev_kfree_skb_irq(struct sk_buff *skb);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2361: FILE: include/linux/netdevice.h:887:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2606: FILE: net/core/dev.c:1572:
+#else $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2626: FILE: net/core/dev.c:1664:
 
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "clist"
#2644: FILE: net/core/dev.c:1682:
+		while (clist != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2646: FILE: net/core/dev.c:1684:
+			struct sk_buff *skb = clist;
+			clist = clist->next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2699: FILE: net/core/dev.c:1927:
+^I$

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#2705: FILE: net/core/dev.c:1933:
+	} while (++work < quota && jiffies == start_time);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#2771: FILE: net/core/dev.c:1975:
+		if (unlikely(budget <= 0 || jiffies != start_time)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2802: FILE: net/core/dev.c:2002:
+^I^I} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2930: FILE: net/core/netpoll.c:156:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465003.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 28 warnings, 20 checks, 2619 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465003.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
