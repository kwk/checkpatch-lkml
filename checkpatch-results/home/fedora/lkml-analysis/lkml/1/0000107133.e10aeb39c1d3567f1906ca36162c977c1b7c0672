CHECK:MACRO_ARG_REUSE: Macro argument reuse 'preg' - possible side-effects?
#146: FILE: arch/blackfin/include/asm/mem_map.h:41:
+# define GET_PDA_SAFE(preg) \
+	preg.l = _cpu_pda; \
+	preg.h = _cpu_pda;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#146: FILE: arch/blackfin/include/asm/mem_map.h:41:
+# define GET_PDA_SAFE(preg) \
+	preg.l = _cpu_pda; \
+	preg.h = _cpu_pda;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#160: FILE: arch/blackfin/include/asm/mem_map.h:52:
 }
+static inline unsigned long get_l1_code_start_cpu(int cpu)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#165: FILE: arch/blackfin/include/asm/mem_map.h:56:
 }
+static inline unsigned long get_l1_data_a_start_cpu(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#170: FILE: arch/blackfin/include/asm/mem_map.h:60:
 }
+static inline unsigned long get_l1_data_b_start_cpu(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: arch/blackfin/include/asm/mem_map.h:64:
 }
+static inline unsigned long get_l1_scratch_start(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#180: FILE: arch/blackfin/include/asm/mem_map.h:68:
 }
+static inline unsigned long get_l1_code_start(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#185: FILE: arch/blackfin/include/asm/mem_map.h:72:
 }
+static inline unsigned long get_l1_data_a_start(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#190: FILE: arch/blackfin/include/asm/mem_map.h:76:
 }
+static inline unsigned long get_l1_data_b_start(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#769: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:162:
+}
+static inline unsigned long get_l1_code_start_cpu(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#773: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:166:
+}
+static inline unsigned long get_l1_data_a_start_cpu(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#777: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:170:
+}
+static inline unsigned long get_l1_data_b_start_cpu(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#786: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:179:
+}
+static inline unsigned long get_l1_code_start(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#790: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:183:
+}
+static inline unsigned long get_l1_data_a_start(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#794: FILE: arch/blackfin/mach-bf561/include/mach/mem_map.h:187:
+}
+static inline unsigned long get_l1_data_b_start(void)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107133.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 14 checks, 667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107133.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
