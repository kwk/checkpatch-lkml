WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
    This patch uses SECTION_SIZE as size of chunk if 64bit/SPARSEMEM is enabled.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: mm/page_cgroup.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: mm/page_cgroup.c:24:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#102: FILE: mm/page_cgroup.c:26:
+	spinlock_t		lock;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to false
#116: FILE: mm/page_cgroup.c:40:
+const bool chunk_vmalloc = false;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: mm/page_cgroup.c:58:
+#define PCG_HASHSIZE		(1 << pcg_hashshift)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: mm/page_cgroup.c:101:
+		int ent_size = sizeof(*ent) + mapsize;
+		ent = kmalloc_node(ent_size, GFP_KERNEL, node);

WARNING:RETURN_VOID: void function return statements are not generally useful
#201: FILE: mm/page_cgroup.c:125:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: mm/page_cgroup.c:127:
+
+

WARNING:TYPO_SPELLING: 'initilization' may be misspelled - perhaps 'initialization'?
#204: FILE: mm/page_cgroup.c:128:
+/* Called From mem_cgroup's initilization */
                             ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#213: FILE: mm/page_cgroup.c:137:
+	default_pcg_hash_size = (max_pfn/ENTS_PER_CHUNK);
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'calclation' may be misspelled - perhaps 'calculation'?
#215: FILE: mm/page_cgroup.c:139:
+	/* if too big, use automatic calclation */
 	                             ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: mm/page_cgroup.c:144:
+	pcg_hashtable = alloc_large_system_hash("PageCgroup Hash",
+				sizeof(struct pcg_hash_head),

WARNING:RETURN_VOID: void function return statements are not generally useful
#254: FILE: mm/page_cgroup.c:178:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#287: FILE: include/linux/page_cgroup.h:1:
+#ifndef __LINUX_PAGE_CGROUP_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: include/linux/page_cgroup.h:24:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageCgroup##uname>
#334: FILE: include/linux/page_cgroup.h:48:
+static inline void __SetPageCgroup##uname(struct page_cgroup *pc)\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageCgroup##uname>
#338: FILE: include/linux/page_cgroup.h:52:
+static inline void __ClearPageCgroup##uname(struct page_cgroup *pc)	\

CHECK:CAMELCASE: Avoid CamelCase: <Cache>
#342: FILE: include/linux/page_cgroup.h:56:
+TESTPCGFLAG(Cache, CACHE)

CHECK:CAMELCASE: Avoid CamelCase: <File>
#346: FILE: include/linux/page_cgroup.h:60:
+TESTPCGFLAG(File, FILE)

CHECK:CAMELCASE: Avoid CamelCase: <Active>
#351: FILE: include/linux/page_cgroup.h:65:
+TESTPCGFLAG(Active, ACTIVE)

CHECK:CAMELCASE: Avoid CamelCase: <Unevictable>
#356: FILE: include/linux/page_cgroup.h:70:
+TESTPCGFLAG(Unevictable, UNEVICTABLE)

CHECK:CAMELCASE: Avoid CamelCase: <PcgDefaultAnonFlag>
#360: FILE: include/linux/page_cgroup.h:74:
+#define PcgDefaultAnonFlag	((1 << PCG_ACTIVE))

CHECK:CAMELCASE: Avoid CamelCase: <PcgDefaultFileFlag>
#361: FILE: include/linux/page_cgroup.h:75:
+#define PcgDefaultFileFlag	((1 << PCG_CACHE) | (1 << PCG_FILE))

CHECK:CAMELCASE: Avoid CamelCase: <PcgDefaultShmemFlag>
#362: FILE: include/linux/page_cgroup.h:76:
+#define PcgDefaultShmemFlag	((1 << PCG_CACHE) | (1 << PCG_ACTIVE))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#631: FILE: mm/memcontrol.c:677:
 
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED'
#655: FILE: mm/memcontrol.c:711:
+	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED) && page_mapped(page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED'
#676: FILE: mm/memcontrol.c:721:
+	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED) && PageCgroupCache(pc))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#714: FILE: mm/memcontrol.c:772:
 
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000229066.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 8 warnings, 20 checks, 658 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000229066.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
