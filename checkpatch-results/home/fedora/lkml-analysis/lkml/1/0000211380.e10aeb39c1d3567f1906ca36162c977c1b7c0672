WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
On Tue, 28 Oct 2008 00:12:48 -0400 (EDT) Steven Rostedt <rostedt@goodmis.org> wrote:

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/compiler.h:66:
+extern int do_check_likely(struct likeliness *likeliness, unsigned int exp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is_likely' may be better as '(is_likely)' to avoid precedence issues
#128: FILE: include/linux/compiler.h:72:
+#define __check_likely(exp, is_likely)					\
+	({								\
+		static struct likeliness likeliness = {			\
+			.file = __FILE__,				\
+			.label = __LINE__ << LP_LINE_SHIFT |		\
+						LP_UNSEEN | is_likely,	\
+		};							\
+		do_check_likely(&likeliness, !!(exp));			\
+	})

WARNING:TYPO_SPELLING: 'evalution' may be misspelled - perhaps 'evaluation'?
#141: FILE: include/linux/compiler.h:85:
+ * bug in gcc 3.x which blows up during constant evalution when
                                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#144: FILE: include/linux/compiler.h:88:
+#define likely(x)	(__builtin_constant_p(x) ? (!!(x)) : __check_likely((x), 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#145: FILE: include/linux/compiler.h:89:
+#define unlikely(x)	(__builtin_constant_p(x) ? (!!(x)) : __check_likely((x), 0))

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#165: FILE: lib/Kconfig.debug:571:
+config	PROFILE_LIKELY
+	bool "Record return values from likely/unlikely macros"
+	default n
+	help
+	  Adds profiling on likely/unlikly macros . To see the
+	  results of the profiling you can view the following,
+		/proc/likely_prof
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#202: FILE: lib/likely_prof.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#221: FILE: lib/likely_prof.c:20:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#222: FILE: lib/likely_prof.c:21:
+#include <asm/atomic.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: lib/likely_prof.c:55:
+static void * lp_seq_start(struct seq_file *out, loff_t *pos)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#258: FILE: lib/likely_prof.c:57:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#260: FILE: lib/likely_prof.c:59:
+	if (!*pos) {
+

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#261: FILE: lib/likely_prof.c:60:
+		seq_printf(out, "Likely Profiling Results\n");

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: lib/likely_prof.c:62:
+		seq_printf(out, " --------------------------------------------"
+				"------------------------\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: lib/likely_prof.c:64:
+		seq_printf(out, "[+- ]Type | # True  | # False | Function@"
+				"Filename:Line\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#277: FILE: lib/likely_prof.c:76:
+	if (entry->next) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#280: FILE: lib/likely_prof.c:79:
+	} else

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#298: FILE: lib/likely_prof.c:97:
+			seq_printf(out, "+");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#300: FILE: lib/likely_prof.c:99:
+			seq_printf(out, " ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#302: FILE: lib/likely_prof.c:101:
+		seq_printf(out, "unlikely ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#305: FILE: lib/likely_prof.c:104:
+			seq_printf(out, "-");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#307: FILE: lib/likely_prof.c:106:
+			seq_printf(out, " ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#309: FILE: lib/likely_prof.c:108:
+		seq_printf(out, "likely   ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: lib/likely_prof.c:113:
+	seq_printf(out, "|%9u|%9u|\t%s@%s:%u\n", pos, neg, function,
+			entry->file, entry->label >> LP_LINE_SHIFT);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#323: FILE: lib/likely_prof.c:122:
+static struct seq_operations likely_profiling_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#335: FILE: lib/likely_prof.c:134:
+static struct file_operations proc_likely_operations  = {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#351: FILE: lib/likely_prof.c:150:
+__initcall(init_likely);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000211380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 9 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000211380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
