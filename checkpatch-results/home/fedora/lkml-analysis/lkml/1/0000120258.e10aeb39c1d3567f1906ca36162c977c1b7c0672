WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Here's a new version of the patch, against current Linus' git tree. The most

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#63: FILE: drivers/md/Kconfig:261:
+config DM_CSUM
+	tristate "Checksumming target (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	select CRC_CCITT
+	---help---
+	  A target that stores checksums on writes, and verifies
+	  them on reads.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: drivers/md/dm-csum.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#205: FILE: drivers/md/dm-csum.c:112:
+#include <asm/atomic.h>

WARNING:IF_1: Consider removing the #if 1 and its #endif
#211: FILE: drivers/md/dm-csum.c:118:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#212: FILE: drivers/md/dm-csum.c:119:
+  #define dprint(...) printk(KERN_DEBUG __VA_ARGS__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#217: FILE: drivers/md/dm-csum.c:124:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: drivers/md/dm-csum.c:144:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#241: FILE: drivers/md/dm-csum.c:148:
+ * In the future, fine grained locking will be implemented. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: drivers/md/dm-csum.c:151:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#250: FILE: drivers/md/dm-csum.c:157:
+ * identification and device metadata */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#254: FILE: drivers/md/dm-csum.c:161:
+ * the beginning for identification and device metadata */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: drivers/md/dm-csum.c:165:
+ * a rationale on the value. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#261: FILE: drivers/md/dm-csum.c:168:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#263: FILE: drivers/md/dm-csum.c:170:
+ * given amount of data sectors */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#273: FILE: drivers/md/dm-csum.c:180:
+ * structure.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#279: FILE: drivers/md/dm-csum.c:186:
+	 * given offset */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#293: FILE: drivers/md/dm-csum.c:200:
+	 * offset. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#299: FILE: drivers/md/dm-csum.c:206:
+ * brother imd sector will be the result + 1, as they're always adjacent. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: drivers/md/dm-csum.c:221:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#324: FILE: drivers/md/dm-csum.c:231:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#333: FILE: drivers/md/dm-csum.c:240:
+} __attribute__ ((packed));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: drivers/md/dm-csum.c:244:
+static struct imd_sector_header *older_imd(struct imd_sector_header *m1,
+		struct imd_sector_header *m2)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#347: FILE: drivers/md/dm-csum.c:254:
+		if (l1 == 0) {
[...]
+		} else if (l2 == 0) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#355: FILE: drivers/md/dm-csum.c:262:
+		if (l1 > l2) {
[...]
+		} else if (l1 < l2) {
[...]
+		} else {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#367: FILE: drivers/md/dm-csum.c:274:
+ * The returned bio will have a single page allocated, that must be freed. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/md/dm-csum.c:276:
+static struct bio *prepare_imd_read(struct block_device *bdev, sector_t sector,
+		bio_end_io_t *cb, void *private)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#375: FILE: drivers/md/dm-csum.c:282:
+	if (page == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#379: FILE: drivers/md/dm-csum.c:286:
+	if (bio == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#406: FILE: drivers/md/dm-csum.c:313:
+ * bio_sectors(bio) 16 bit integers). */

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: drivers/md/dm-csum.c:336:
+		unsigned char *data = bvec_kmap_irq(bvec, &flags);
+		left_in_bvec = bvec->bv_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#453: FILE: drivers/md/dm-csum.c:360:
+			 * have crcs to calculate, use it for the next one */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: drivers/md/dm-csum.c:369:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: drivers/md/dm-csum.c:383:
+	/* dprint("imd_gen(): s:%llu ss:%u ds:%u\n",
+			(unsigned long long) bix->sector, bix->sector_size,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#477: FILE: drivers/md/dm-csum.c:384:
+			bix->data_size); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#498: FILE: drivers/md/dm-csum.c:405:
+	/* dprint("imd_vfy(): s:%llu ss:%u ds:%u\n", (unsigned long long) sector,
+			bix->sector_size, bix->data_size); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#498: FILE: drivers/md/dm-csum.c:405:
+			bix->sector_size, bix->data_size); */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#503: FILE: drivers/md/dm-csum.c:410:
+			printk(KERN_ERR "%s: checksum error on sector %llu"

WARNING:SPLIT_STRING: quoted string split across lines
#504: FILE: drivers/md/dm-csum.c:411:
+			printk(KERN_ERR "%s: checksum error on sector %llu"
+					" - disk:%04x imd:%04x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#506: FILE: drivers/md/dm-csum.c:413:
+					(unsigned long long) sector, crc,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: drivers/md/dm-csum.c:416:
+			dprint("verify: d:%p p:%p imd:%p\n", bix->data_buf,
+					bix->prot_buf, imd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/md/dm-csum.c:488:
+static void copy_to_bip(struct bio_integrity_payload *bip,
+		const unsigned char *buf, unsigned int size)

CHECK:SPACING: No space is necessary after a cast
#615: FILE: drivers/md/dm-csum.c:522:
+	t = (struct imd_tuple *) (imd_buf + sizeof(struct imd_sector_header));

CHECK:SPACING: No space is necessary after a cast
#618: FILE: drivers/md/dm-csum.c:525:
+	copy_to_bip(bip, (unsigned char *) t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: drivers/md/dm-csum.c:526:
+	copy_to_bip(bip, (unsigned char *) t,
+			bio_sectors(bio) * sizeof(struct imd_tuple));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#625: FILE: drivers/md/dm-csum.c:532:
+ * the given imd tuple */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/md/dm-csum.c:534:
+static void update_bi_info(struct bio *bio, unsigned int pos,
+		struct imd_tuple *tuple)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#633: FILE: drivers/md/dm-csum.c:540:
+	BUG_ON(bio_integrity(bio) == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: drivers/md/dm-csum.c:544:
+	BUG_ON(bip_buf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip_buf"
#637: FILE: drivers/md/dm-csum.c:544:
+	BUG_ON(bip_buf == NULL);

CHECK:SPACING: No space is necessary after a cast
#639: FILE: drivers/md/dm-csum.c:546:
+	t = (struct imd_tuple *) bip_buf;

WARNING:RETURN_VOID: void function return statements are not generally useful
#657: FILE: drivers/md/dm-csum.c:564:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#662: FILE: drivers/md/dm-csum.c:569:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: drivers/md/dm-csum.c:572:
+static void update_bi_info(struct bio *bio, unsigned int pos,
+		struct imd_tuple *tuple)

WARNING:RETURN_VOID: void function return statements are not generally useful
#668: FILE: drivers/md/dm-csum.c:575:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#671: FILE: drivers/md/dm-csum.c:578:
+
+

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#697: FILE: drivers/md/dm-csum.c:604:
+	crc = kmalloc(sizeof(u16) * bio_sectors(data_bio), GFP_NOIO);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!crc"
#698: FILE: drivers/md/dm-csum.c:605:
+	if (crc == NULL)

CHECK:SPACING: No space is necessary after a cast
#705: FILE: drivers/md/dm-csum.c:612:
+	m1 = (struct imd_sector_header *) imd_buf;

CHECK:SPACING: No space is necessary after a cast
#706: FILE: drivers/md/dm-csum.c:613:
+	m2 = (struct imd_sector_header *) (imd_buf + 512);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!older"
#709: FILE: drivers/md/dm-csum.c:616:
+	if (older == NULL) {

CHECK:SPACING: No space is necessary after a cast
#715: FILE: drivers/md/dm-csum.c:622:
+	t = (struct imd_tuple *) (older + 1);

CHECK:SPACING: No space is necessary after a cast
#724: FILE: drivers/md/dm-csum.c:631:
+	older->crc = crc_ccitt(0, (unsigned char *) (older + 1),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: drivers/md/dm-csum.c:632:
+	older->crc = crc_ccitt(0, (unsigned char *) (older + 1),
+			512 - sizeof(struct imd_sector_header));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#743: FILE: drivers/md/dm-csum.c:650:
+ * there is any) */

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#752: FILE: drivers/md/dm-csum.c:659:
+	struct imd_tuple *nt, *ot;
 	                       ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#754: FILE: drivers/md/dm-csum.c:661:
+	crc = kmalloc(sizeof(u16) * bio_sectors(data_bio), GFP_NOIO);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!crc"
#755: FILE: drivers/md/dm-csum.c:662:
+	if (crc == NULL)

CHECK:SPACING: No space is necessary after a cast
#762: FILE: drivers/md/dm-csum.c:669:
+	m1 = (struct imd_sector_header *) imd_buf;

CHECK:SPACING: No space is necessary after a cast
#763: FILE: drivers/md/dm-csum.c:670:
+	m2 = (struct imd_sector_header *) (imd_buf + 512);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!older"
#766: FILE: drivers/md/dm-csum.c:673:
+	if (older == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#767: FILE: drivers/md/dm-csum.c:674:
+		printk(KERN_WARNING "dm-csum: couldn't find older\n");

CHECK:SPACING: No space is necessary after a cast
#776: FILE: drivers/md/dm-csum.c:683:
+	nt = (struct imd_tuple *) (newer + 1);

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#778: FILE: drivers/md/dm-csum.c:685:
+	ot = (struct imd_tuple *) (older + 1);
 	^^

CHECK:SPACING: No space is necessary after a cast
#778: FILE: drivers/md/dm-csum.c:685:
+	ot = (struct imd_tuple *) (older + 1);

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#779: FILE: drivers/md/dm-csum.c:686:
+	ot += data_bio->bi_sector % SECTORS_PER_IMD;
 	^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: drivers/md/dm-csum.c:690:
+	BUG_ON(bio_sectors(data_bio) > SECTORS_PER_IMD);

ERROR:SPACING: space required before the open brace '{'
#788: FILE: drivers/md/dm-csum.c:695:
+		} else if (ot->crc == *(crc + i)){

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#789: FILE: drivers/md/dm-csum.c:696:
+			update_bi_info(data_bio, i, ot);
 			                            ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#792: FILE: drivers/md/dm-csum.c:699:
+			/* dprint("no match from new\n");
+			dprint(" new: %d %04x\n", newer->last_updated,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#796: FILE: drivers/md/dm-csum.c:703:
+			dprint(" real: %04x\n", *(crc + i)); */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#798: FILE: drivers/md/dm-csum.c:705:
+			printk(KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/md/dm-csum.c:710:
+			dprint("CRC: %llu o:%x n:%x r:%x\n",
+					(unsigned long long)

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#810: FILE: drivers/md/dm-csum.c:717:
+		ot++;
 		^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#823: FILE: drivers/md/dm-csum.c:730:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#825: FILE: drivers/md/dm-csum.c:732:
+ * TODO: Unify with the submission workqueue once we have decent locking. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: drivers/md/dm-csum.c:762:
+static struct bio *prepare_data_read(struct bio *orig_bio,
+		struct block_device *bdev, sector_t sector, bio_end_io_t *cb,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pr"
#867: FILE: drivers/md/dm-csum.c:774:
+	if (pr == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: drivers/md/dm-csum.c:783:
+	pr->data_bio = prepare_data_read(pr->orig_bio, cc->data_dev->bdev,
+			cc->map_data_sector(ti, pr->orig_bio->bi_sector),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pr->data_bio"
#878: FILE: drivers/md/dm-csum.c:785:
+	if (pr->data_bio == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: drivers/md/dm-csum.c:789:
+	pr->imd_bio = prepare_imd_read(cc->imd_dev->bdev,
+			cc->get_imd_sector(ti, pr->orig_bio->bi_sector),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pr->imd_bio"
#884: FILE: drivers/md/dm-csum.c:791:
+	if (pr->imd_bio == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#896: FILE: drivers/md/dm-csum.c:803:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: drivers/md/dm-csum.c:807:
+static struct bio *prepare_data_read(struct bio *orig_bio,
+		struct block_device *bdev, sector_t sector, bio_end_io_t *cb,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: drivers/md/dm-csum.c:813:
+	 * bi_end_io */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#908: FILE: drivers/md/dm-csum.c:815:
+	if (bio == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pr->work
#930: FILE: drivers/md/dm-csum.c:837:
+	INIT_WORK(&(pr->work), read_complete);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pr->work
#931: FILE: drivers/md/dm-csum.c:838:
+	queue_work(io_wq, &(pr->work));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#947: FILE: drivers/md/dm-csum.c:854:
+	 * CRC errors */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#958: FILE: drivers/md/dm-csum.c:865:
+	 * important? I think not, but confirmation wouldn't hurt */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: drivers/md/dm-csum.c:874:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#993: FILE: drivers/md/dm-csum.c:900:
+ * the stage functions run through a workqueue. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pw"
#1007: FILE: drivers/md/dm-csum.c:914:
+	if (pw == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1020: FILE: drivers/md/dm-csum.c:927:
+	pw->imd_bio = prepare_imd_read(cc->imd_dev->bdev,
+			cc->get_imd_sector(ti, pw->orig_bio->bi_sector),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pw->imd_bio"
#1022: FILE: drivers/md/dm-csum.c:929:
+	if (pw->imd_bio == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pw->work1
#1038: FILE: drivers/md/dm-csum.c:945:
+	INIT_WORK(&(pw->work1), write_stage1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pw->work1
#1039: FILE: drivers/md/dm-csum.c:946:
+	queue_work(io_wq, &(pw->work1));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1061: FILE: drivers/md/dm-csum.c:968:
+		printk(KERN_WARNING "dm-csum: consistency error updating"

WARNING:SPLIT_STRING: quoted string split across lines
#1062: FILE: drivers/md/dm-csum.c:969:
+		printk(KERN_WARNING "dm-csum: consistency error updating"
+				" imd sector\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data_bio"
#1072: FILE: drivers/md/dm-csum.c:979:
+	if (data_bio == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1084: FILE: drivers/md/dm-csum.c:991:
+	 * completed before it hits the disk */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1087: FILE: drivers/md/dm-csum.c:994:
+	 * is no longer useful */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1093: FILE: drivers/md/dm-csum.c:1000:
+	 * the order is very important because of the barrier */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1105: FILE: drivers/md/dm-csum.c:1012:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pw->work2
#1117: FILE: drivers/md/dm-csum.c:1024:
+	INIT_WORK(&(pw->work2), write_stage2);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pw->work2
#1118: FILE: drivers/md/dm-csum.c:1025:
+	queue_work(io_wq, &(pw->work2));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1138: FILE: drivers/md/dm-csum.c:1045:
+	 * bio_put(pw->data_bio) important? */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1146: FILE: drivers/md/dm-csum.c:1053:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1180: FILE: drivers/md/dm-csum.c:1087:
+	 * read/write code, when the bio has been processed */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1192: FILE: drivers/md/dm-csum.c:1099:
+		BUG();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pending)...) over kmalloc(sizeof(struct pending_work)...)
#1203: FILE: drivers/md/dm-csum.c:1110:
+	pending = kmalloc(sizeof(struct pending_work), GFP_NOIO);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pending"
#1204: FILE: drivers/md/dm-csum.c:1111:
+	if (pending == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pending->w
#1210: FILE: drivers/md/dm-csum.c:1117:
+	INIT_WORK(&(pending->w), process_nice_bio);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pending->w
#1212: FILE: drivers/md/dm-csum.c:1119:
+	queue_work(submit_wq, &(pending->w));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1217: FILE: drivers/md/dm-csum.c:1124:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1234: FILE: drivers/md/dm-csum.c:1141:
+	 * larger than the bio sector count */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: drivers/md/dm-csum.c:1144:
+	mapped_last = map_data_sector_same(ti,
+			bio->bi_sector + bio_sectors(bio) - 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1242: FILE: drivers/md/dm-csum.c:1149:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: drivers/md/dm-csum.c:1167:
+static struct bio *prepare_nice_bio(struct pending_evil_bio *peb,
+		struct bio *bio, sector_t begin, sector_t size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1273: FILE: drivers/md/dm-csum.c:1180:
+	/*
+	dprint("evil bio! s:%lu n:%lu l:%lu d:%d \ti:%lu o:%lu\t\tp:%p\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!peb"
#1281: FILE: drivers/md/dm-csum.c:1188:
+	if (peb == NULL)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1308: FILE: drivers/md/dm-csum.c:1215:
+	nmiddle = ( (last - postlude) - (first + prelude) ) / SECTORS_PER_IMD;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1308: FILE: drivers/md/dm-csum.c:1215:
+	nmiddle = ( (last - postlude) - (first + prelude) ) / SECTORS_PER_IMD;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1314: FILE: drivers/md/dm-csum.c:1221:
+	/*
+	dprint("  first:%lu last:%lu pre:%lu nm:%lu post:%lu pending:%lu\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1322: FILE: drivers/md/dm-csum.c:1229:
+	 * evil_bio_complete() */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#1327: FILE: drivers/md/dm-csum.c:1234:
+		if (new == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1342: FILE: drivers/md/dm-csum.c:1249:
+		new = prepare_nice_bio(peb, bio,
+				first + prelude + i * SECTORS_PER_IMD,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#1344: FILE: drivers/md/dm-csum.c:1251:
+		if (new == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1356: FILE: drivers/md/dm-csum.c:1263:
+	if (new == NULL) {
+		goto prepare_error;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#1356: FILE: drivers/md/dm-csum.c:1263:
+	if (new == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1371: FILE: drivers/md/dm-csum.c:1278:
+	 * number of bios, and check if we're already done */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: drivers/md/dm-csum.c:1292:
+static struct bio *prepare_nice_bio(struct pending_evil_bio *peb,
+		struct bio *bio, sector_t begin, sector_t size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#1392: FILE: drivers/md/dm-csum.c:1299:
+	if (new == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1402: FILE: drivers/md/dm-csum.c:1309:
+	 * over and over */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1408: FILE: drivers/md/dm-csum.c:1315:
+		if (sofar + bvec->bv_len > advance) {
+			break;
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1424: FILE: drivers/md/dm-csum.c:1331:
+	 * bio) points to the right offset */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1444: FILE: drivers/md/dm-csum.c:1351:
+	 * about it */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1448: FILE: drivers/md/dm-csum.c:1355:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1454: FILE: drivers/md/dm-csum.c:1361:
+ * ^I[ <integrity dev path> <integrity dev offset> ] */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1454: FILE: drivers/md/dm-csum.c:1361:
+ * 	[ <integrity dev path> <integrity dev offset> ] */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cc"
#1469: FILE: drivers/md/dm-csum.c:1376:
+	if (cc == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1473: FILE: drivers/md/dm-csum.c:1380:
+	cc->data_dev = cc->imd_dev = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1474: FILE: drivers/md/dm-csum.c:1381:
+	cc->data_start = cc->imd_start = cc->imd_len = 0;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1478: FILE: drivers/md/dm-csum.c:1385:
+	if (sscanf(argv[1], "%llu", &data_offset) != 1) {
+		ti->error = "Invalid data dev offset";
+		goto error;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1486: FILE: drivers/md/dm-csum.c:1393:
+	 * total, to account for the space dedicated to the metadata */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1487: FILE: drivers/md/dm-csum.c:1394:
+	if (argc == 2) {
[...]
+	} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1495: FILE: drivers/md/dm-csum.c:1402:
+	if (dm_get_device(ti, argv[0], cc->data_start, data_dev_len, mode,
+			&(cc->data_dev))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cc->data_dev
#1495: FILE: drivers/md/dm-csum.c:1402:
+			&(cc->data_dev))) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1505: FILE: drivers/md/dm-csum.c:1412:
+		if (sscanf(argv[3], "%llu", &imd_offset) != 1) {
+			ti->error = "Invalid integrity dev offset";
+			goto error;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: drivers/md/dm-csum.c:1420:
+		if (dm_get_device(ti, argv[2], cc->imd_start,
+				cc->imd_len, mode, &(cc->imd_dev))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cc->imd_dev
#1513: FILE: drivers/md/dm-csum.c:1420:
+				cc->imd_len, mode, &(cc->imd_dev))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: drivers/md/dm-csum.c:1470:
+static int csum_map(struct dm_target *ti, struct bio *bio,
+		      union map_info *map_context)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1578: FILE: drivers/md/dm-csum.c:1485:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!submit_wq"
#1597: FILE: drivers/md/dm-csum.c:1504:
+	if (submit_wq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!io_wq"
#1601: FILE: drivers/md/dm-csum.c:1508:
+	if (io_wq == NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120258.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 80 warnings, 83 checks, 1560 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120258.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
