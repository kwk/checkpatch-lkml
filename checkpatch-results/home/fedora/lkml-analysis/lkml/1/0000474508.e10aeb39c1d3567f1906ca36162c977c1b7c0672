CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/mm.h:977:
+extern int cmdline_parse_kernelcore(char *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: mm/page_alloc.c:139:
+  unsigned long __initdata required_kernelcore;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: mm/page_alloc.c:140:
+  unsigned long __initdata zone_movable_pfn[MAX_NUMNODES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: mm/page_alloc.c:143:
+  int movable_zone;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: mm/page_alloc.c:2589:
+	int zone_index;
+	for (zone_index = MAX_NR_ZONES - 1; zone_index >= 0; zone_index--) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#215: FILE: mm/page_alloc.c:2604:
+ * because it is sized independant of architecture. Unlike the other zones,
                        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/page_alloc.c:2613:
+void __init adjust_zone_range_for_zone_movable(int nid,
+					unsigned long zone_type,

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: mm/page_alloc.c:2622:
+		if (zone_type == ZONE_MOVABLE) {
[...]
+		} else if (*zone_start_pfn < zone_movable_pfn[nid] &&
[...]
+		} else if (*zone_start_pfn >= zone_movable_pfn[nid])
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: mm/page_alloc.c:2625:
+			*zone_end_pfn = min(node_end_pfn,
+				arch_zone_highest_possible_pfn[movable_zone]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: mm/page_alloc.c:2654:
+	adjust_zone_range_for_zone_movable(nid, zone_type,
+				node_start_pfn, node_end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: mm/page_alloc.c:2747:
+	adjust_zone_range_for_zone_movable(nid, zone_type,
+			node_start_pfn, node_end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: mm/page_alloc.c:3158:
+			start_pfn = max(early_node_map[i].start_pfn,
+						zone_movable_pfn[nid]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: mm/page_alloc.c:3166:
+				unsigned long kernel_pages;
+				kernel_pages = min(end_pfn, usable_startpfn)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#341: FILE: mm/page_alloc.c:3176:
+				if (end_pfn <= usable_startpfn) {
+

WARNING:TYPO_SPELLING: 'satisified' may be misspelled - perhaps 'satisfied'?
#367: FILE: mm/page_alloc.c:3202:
+			 * satisified
 			   ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'satisified' may be misspelled - perhaps 'satisfied'?
#381: FILE: mm/page_alloc.c:3216:
+	 * satisified
 	   ^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: mm/page_alloc.c:3283:
+	printk("Movable zone start PFN for each node\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#430: FILE: mm/page_alloc.c:3286:
+			printk("  Node %d: %lu\n", i, zone_movable_pfn[i]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: mm/page_alloc.c:3311:
+	unsigned long long coremem;
+	if (!p)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474508.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 8 checks, 383 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474508.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
