WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#60: FILE: fs/hfs/brec.c:50:
+				printk(KERN_ERR "hfs: keylen %d too large\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: fs/hfs/brec.c:51:
+				printk(KERN_ERR "hfs: keylen %d too large\n",
+					retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#67: FILE: fs/hfs/brec.c:57:
+				printk(KERN_ERR "hfs: keylen %d too large\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: fs/hfs/brec.c:58:
+				printk(KERN_ERR "hfs: keylen %d too large\n",
+					retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#84: FILE: fs/hfs/bfind.c:56:
+			printk(KERN_ERR "hfs: keylen %d too long\n", keylen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#96: FILE: fs/hfs/bfind.c:76:
+			printk(KERN_ERR "hfs: keylen %d too long\n", keylen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#108: FILE: fs/hfs/bfind.c:212:
+		printk(KERN_ERR "hfs: keylen %d too long\n", keylen);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == HFS_EXT_CNID'
#146: FILE: fs/hfs/btree.c:84:
+	if ((id == HFS_EXT_CNID) && (tree->max_key_len != HFS_MAX_EXT_KEYLEN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tree->max_key_len != HFS_MAX_EXT_KEYLEN'
#146: FILE: fs/hfs/btree.c:84:
+	if ((id == HFS_EXT_CNID) && (tree->max_key_len != HFS_MAX_EXT_KEYLEN)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#147: FILE: fs/hfs/btree.c:85:
+		printk(KERN_ERR "hfs: invalid extent max_key_len %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: fs/hfs/btree.c:86:
+		printk(KERN_ERR "hfs: invalid extent max_key_len %d\n",
+			tree->max_key_len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id == HFS_CAT_CNID'
#151: FILE: fs/hfs/btree.c:89:
+	if ((id == HFS_CAT_CNID) && (tree->max_key_len != HFS_MAX_CAT_KEYLEN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tree->max_key_len != HFS_MAX_CAT_KEYLEN'
#151: FILE: fs/hfs/btree.c:89:
+	if ((id == HFS_CAT_CNID) && (tree->max_key_len != HFS_MAX_CAT_KEYLEN)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#152: FILE: fs/hfs/btree.c:90:
+		printk(KERN_ERR "hfs: invalid catalog max_key_len %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/hfs/btree.c:91:
+		printk(KERN_ERR "hfs: invalid catalog max_key_len %d\n",
+			tree->max_key_len);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345123.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 8 checks, 100 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345123.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
