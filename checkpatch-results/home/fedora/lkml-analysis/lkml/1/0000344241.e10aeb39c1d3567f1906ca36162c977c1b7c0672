WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
> So raw_local_save_flags() and raw_local_irq_save() have different semantics.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'c0a698b744', maybe rebased or not pulled?
#71: 
The bug in commit c0a698b744 could have been avoided if

WARNING:TYPO_SPELLING: 'wasnt' may be misspelled - perhaps 'wasn't'?
#72: 
local_save_flags and local_irq_save wasnt so similarly
                                    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: arch/cris/arch-v32/kernel/time.c:339:
+          local_read_flags(flags);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/cris/arch-v32/kernel/time.c:339:
+          local_read_flags(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: drivers/scsi/arm/acornscsi.c:319:
+    local_read_flags(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: drivers/scsi/sun3_NCR5380.c:1066:
+    local_read_flags(flags);$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#435: FILE: include/asm-avr32/irqflags.h:18:
+#define raw_local_read_flags(x)					\
+	do { (x) = __raw_local_read_flags(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#466: FILE: include/asm-blackfin/system.h:95:
+#define local_read_flags(x) \
 	__asm__ __volatile__( \
 		"cli %0;" \
 		"sti %0;" \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#488: FILE: include/asm-cris/arch-v10/system.h:48:
+#define local_read_flags(x)	__asm__ __volatile__ ("move $ccr,%0" : "=rm" (x) : : "memory");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#488: FILE: include/asm-cris/arch-v10/system.h:48:
+#define local_read_flags(x)	__asm__ __volatile__ ("move $ccr,%0" : "=rm" (x) : : "memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#510: FILE: include/asm-cris/arch-v32/system.h:48:
+#define local_read_flags(x) \
 	__asm__ __volatile__ ("move $ccs, %0" : "=rm" (x) : : "memory");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#510: FILE: include/asm-cris/arch-v32/system.h:48:
+#define local_read_flags(x) \
 	__asm__ __volatile__ ("move $ccs, %0" : "=rm" (x) : : "memory");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#610: FILE: include/asm-m32r/system.h:87:
+#define local_read_flags(x) \
 	__asm__ __volatile__("mvfc %0,psw" : "=r"(x) : /* no input */)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#632: FILE: include/asm-m68k/system.h:76:
+#define local_read_flags(x) asm volatile ("movew %%sr,%0":"=d" (x) : : "memory")
                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#632: FILE: include/asm-m68k/system.h:76:
+#define local_read_flags(x) asm volatile ("movew %%sr,%0":"=d" (x) : : "memory")

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#658: FILE: include/asm-m68knommu/system.h:82:
+#define local_read_flags(x) asm volatile ("movew %%sr,%0":"=d" (x) : : "memory")
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#658: FILE: include/asm-m68knommu/system.h:82:
+#define local_read_flags(x) asm volatile ("movew %%sr,%0":"=d" (x) : : "memory")

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#684: FILE: include/asm-mips/irqflags.h:100:
+	"	.macro	raw_local_read_flags flags			\n"

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#693: FILE: include/asm-mips/irqflags.h:111:
+#define raw_local_read_flags(x)						\
 __asm__ __volatile__(							\
+	"raw_local_read_flags %0"					\
 	: "=r" (x))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#709: FILE: include/asm-parisc/system.h:52:
+#define local_read_flags(x)	__asm__ __volatile__("ssm 0, %0" : "=r" (x) : : "memory")

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#802: FILE: include/asm-sh/irqflags.h:80:
+#define raw_local_read_flags(flags) \
+		do { (flags) = __raw_local_read_flags(); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#825: FILE: include/asm-sh64/system.h:99:
+#define local_read_flags(x) ^I^I^I^I^I^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#870: FILE: include/asm-sparc64/irqflags.h:27:
+#define raw_local_read_flags(flags) \
+		do { (flags) = __raw_local_read_flags(); } while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#926: FILE: include/asm-um/system-generic.h:40:
+        local_read_flags(flags);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: include/asm-um/system-generic.h:40:
+        local_read_flags(flags);        \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#939: FILE: include/asm-v850/system.h:40:
+#define local_read_flags(flags) \
   __asm__ __volatile__ ("stsr %1, %0" : "=r" (flags) : "i" (SR_PSW))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: include/asm-v850/system.h:47:
+  do { local_read_flags (flags); local_irq_disable (); } while (0) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: include/asm-v850/system.h:47:
+  do { local_read_flags (flags); local_irq_disable (); } while (0) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#947: FILE: include/asm-v850/system.h:47:
+  do { local_read_flags (flags); local_irq_disable (); } while (0) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#947: FILE: include/asm-v850/system.h:47:
+  do { local_read_flags (flags); local_irq_disable (); } while (0) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#956: FILE: include/asm-v850/system.h:55:
+	local_read_flags (flags);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#988: FILE: include/asm-x86/irqflags.h:134:
+#define raw_local_read_flags(flags) \
+		do { (flags) = __raw_local_read_flags(); } while (0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1042: FILE: include/asm-xtensa/system.h:20:
+#define local_read_flags(x)						\
 	__asm__ __volatile__ ("rsr %0,"__stringify(PS) : "=a" (x));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1042: FILE: include/asm-xtensa/system.h:20:
+#define local_read_flags(x)						\
 	__asm__ __volatile__ ("rsr %0,"__stringify(PS) : "=a" (x));

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1064: FILE: include/linux/ide.h:1397:
+#define local_irq_set(flags)	do { local_read_flags((flags)); local_irq_enable_in_hardirq(); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344241.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 21 warnings, 2 checks, 702 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344241.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
