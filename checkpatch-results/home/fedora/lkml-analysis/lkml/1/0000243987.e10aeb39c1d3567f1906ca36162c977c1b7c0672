WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#66: 
so don't all get_irq_desc at begining to allocate all.
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cfg' - possible side-effects?
#92: FILE: arch/x86/kernel/io_apic_64.c:132:
+#define for_each_irq_cfg(cfg)		\
+	for(cfg = irq_cfgx; cfg && cfg->irq != -1U; cfg = cfg->next)

ERROR:SPACING: space required before the open parenthesis '('
#93: FILE: arch/x86/kernel/io_apic_64.c:133:
+	for(cfg = irq_cfgx; cfg && cfg->irq != -1U; cfg = cfg->next)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#141: FILE: arch/x86/kernel/io_apic_64.c:1389:
+		printk(KERN_DEBUG "IRQ%d ", cfg->irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: arch/x86/kernel/irqinit_64.c:156:
+		set_irq_chip_and_handler_name(i, &i8259A_chip,
 						      handle_level_irq, "XT");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/irq.h:196:
+extern struct irq_desc *get_irq_desc_without_new(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#283: FILE: include/linux/irq.h:207:
+#define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc = &irq_desc[irq])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#283: FILE: include/linux/irq.h:207:
+#define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc = &irq_desc[irq])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#289: FILE: include/linux/irq.h:213:
+#define for_each_irq_desc(irqX, desc)		\
+	for (desc = irq_descX, irqX = desc->irq; desc && irqX != -1U; desc = desc->next, irqX = desc ? desc->irq: -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#289: FILE: include/linux/irq.h:213:
+#define for_each_irq_desc(irqX, desc)		\
+	for (desc = irq_descX, irqX = desc->irq; desc && irqX != -1U; desc = desc->next, irqX = desc ? desc->irq: -1U)

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#290: FILE: include/linux/irq.h:214:
+	for (desc = irq_descX, irqX = desc->irq; desc && irqX != -1U; desc = desc->next, irqX = desc ? desc->irq: -1U)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#290: FILE: include/linux/irq.h:214:
+	for (desc = irq_descX, irqX = desc->irq; desc && irqX != -1U; desc = desc->next, irqX = desc ? desc->irq: -1U)
 	                                                                                                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: kernel/irq/handle.c:157:
+	BUG_ON(irq == -1U);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <irq_descX>
#324: FILE: kernel/irq/handle.c:159:
+	desc = &irq_descX[0];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#344: FILE: kernel/irq/handle.c:181:
+	desc_pri = desc = &irq_descX[0];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#361: FILE: kernel/irq/handle.c:258:
 }
+struct irq_desc *get_irq_desc_without_new(unsigned int irq)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: kernel/irq/internals.h:14:
+extern void register_irq_proc(unsigned int irq, struct irq_desc *desc);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#421: FILE: kernel/irq/proc.c:228:
+	unsigned irq;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 11 checks, 294 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
