WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: arch/x86/kernel/efi_64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#95: FILE: arch/x86/kernel/efi_64.c:34:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#97: FILE: arch/x86/kernel/efi_64.c:36:
+#include <asm/cacheflush.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#111: FILE: arch/x86/kernel/efi_64.c:50:
+}
+early_param("noefi", setup_noefi);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: arch/x86/kernel/efi_64.c:60:
+		BUG_ON(!kpte);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#125: FILE: arch/x86/kernel/efi_64.c:64:
+			set_pte(kpte, __pte((pte_val(*kpte) | _PAGE_NX) & \

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: arch/x86/kernel/efi_64.c:83:
+			unsigned long end;
+			end = md->phys_addr + (md->num_pages << PAGE_SHIFT);

CHECK:SPACING: No space is necessary after a cast
#150: FILE: arch/x86/kernel/efi_64.c:89:
+void __init efi_call_phys_prelog(void) __acquires(efi_lock)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#167: FILE: arch/x86/kernel/efi_64.c:106:
+void __init efi_call_phys_epilog(void) __releases(efi_lock)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: arch/x86/kernel/efi_64.c:152:
+	static unsigned pages_mapped;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: arch/x86/kernel/efi_64.c:154:
+	unsigned i, pages;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#230: FILE: arch/x86/kernel/efi_64.c:169:
+	return (void __iomem *)__fix_to_virt(FIX_EFI_IO_MAP_FIRST_PAGE - \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#236: FILE: arch/x86/kernel/efi_stub_64.S:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#373: FILE: include/asm-x86/fixmap_64.h:46:
+	FIX_EFI_IO_MAP_FIRST_PAGE = FIX_EFI_IO_MAP_LAST_PAGE+MAX_EFI_IO_PAGES-1,
 	                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#373: FILE: include/asm-x86/fixmap_64.h:46:
+	FIX_EFI_IO_MAP_FIRST_PAGE = FIX_EFI_IO_MAP_LAST_PAGE+MAX_EFI_IO_PAGES-1,
 	                                                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#409: FILE: arch/x86/kernel/efi.c:1:
+/*

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#533: FILE: arch/x86/kernel/efi.c:125:
+static efi_status_t virt_efi_set_virtual_address_map(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#544: FILE: arch/x86/kernel/efi.c:136:
+static efi_status_t __init phys_efi_set_virtual_address_map(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: arch/x86/kernel/efi.c:166:
+^Iefi_status_t ^Istatus;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#575: FILE: arch/x86/kernel/efi.c:167:
+^Iefi_time_t ^Ieft;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#576: FILE: arch/x86/kernel/efi.c:168:
+^Iefi_time_cap_t ^Icap;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: arch/x86/kernel/efi.c:172:
+		printk(KERN_ERR "Oops: efitime: can't read time!\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#586: FILE: arch/x86/kernel/efi.c:178:
+	if (((abs(real_minutes - eft.minute) + 15)/30) & 1)
 	                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#594: FILE: arch/x86/kernel/efi.c:186:
+		printk(KERN_ERR "Oops: efitime: can't write time!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#608: FILE: arch/x86/kernel/efi.c:200:
+		printk(KERN_ERR "Oops: efitime: can't read time!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#625: FILE: arch/x86/kernel/efi.c:217:
+		printk(KERN_INFO "mem%02u: type=%u, attr=0x%llx, "

WARNING:SPLIT_STRING: quoted string split across lines
#626: FILE: arch/x86/kernel/efi.c:218:
+		printk(KERN_INFO "mem%02u: type=%u, attr=0x%llx, "
+			"range=[0x%016llx-0x%016llx) (%lluMB)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#652: FILE: arch/x86/kernel/efi.c:244:
+		 ((__u64)boot_params.efi_info.efi_systab_hi<<32));
 		                                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#655: FILE: arch/x86/kernel/efi.c:247:
+		 ((__u64)boot_params.efi_info.efi_memmap_hi<<32));
 		                                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!efi.systab"
#664: FILE: arch/x86/kernel/efi.c:256:
+	if (efi.systab == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#665: FILE: arch/x86/kernel/efi.c:257:
+		printk(KERN_ERR "Woah! Couldn't map the EFI systema table.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#674: FILE: arch/x86/kernel/efi.c:266:
+		printk(KERN_ERR "Woah! EFI system table "

WARNING:SPLIT_STRING: quoted string split across lines
#675: FILE: arch/x86/kernel/efi.c:267:
+		printk(KERN_ERR "Woah! EFI system table "
+		       "signature incorrect\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#677: FILE: arch/x86/kernel/efi.c:269:
+		printk(KERN_ERR "Warning: EFI system table version "

WARNING:SPLIT_STRING: quoted string split across lines
#678: FILE: arch/x86/kernel/efi.c:270:
+		printk(KERN_ERR "Warning: EFI system table version "
+		       "%d.%02d, expected 1.00 or greater\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#685: FILE: arch/x86/kernel/efi.c:277:
+	c16 = tmp = efi_early_ioremap(efi.systab->fw_vendor, 2);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#686: FILE: arch/x86/kernel/efi.c:278:
+	if (c16) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#690: FILE: arch/x86/kernel/efi.c:282:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#691: FILE: arch/x86/kernel/efi.c:283:
+		printk(KERN_ERR "Could not map the firmware vendor!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#694: FILE: arch/x86/kernel/efi.c:286:
+	printk(KERN_INFO "EFI v%u.%.02u by %s \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#694: FILE: arch/x86/kernel/efi.c:286:
+	printk(KERN_INFO "EFI v%u.%.02u by %s \n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#701: FILE: arch/x86/kernel/efi.c:293:
+	config_tables = efi_early_ioremap(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!config_tables"
#704: FILE: arch/x86/kernel/efi.c:296:
+	if (config_tables == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#705: FILE: arch/x86/kernel/efi.c:297:
+		printk(KERN_ERR "Could not map EFI Configuration Table!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#707: FILE: arch/x86/kernel/efi.c:299:
+	printk(KERN_INFO);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#711: FILE: arch/x86/kernel/efi.c:303:
+			printk(" MPS=0x%lx ", config_tables[i].table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: arch/x86/kernel/efi.c:307:
+			printk(" ACPI 2.0=0x%lx ", config_tables[i].table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#719: FILE: arch/x86/kernel/efi.c:311:
+			printk(" ACPI=0x%lx ", config_tables[i].table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: arch/x86/kernel/efi.c:315:
+			printk(" SMBIOS=0x%lx ", config_tables[i].table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#727: FILE: arch/x86/kernel/efi.c:319:
+			printk(" HCDP=0x%lx ", config_tables[i].table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#731: FILE: arch/x86/kernel/efi.c:323:
+			printk(" UGA=0x%lx ", config_tables[i].table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#734: FILE: arch/x86/kernel/efi.c:326:
+	printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "runtime"
#746: FILE: arch/x86/kernel/efi.c:338:
+	if (runtime != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#761: FILE: arch/x86/kernel/efi.c:353:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#762: FILE: arch/x86/kernel/efi.c:354:
+		printk(KERN_ERR "Could not map the EFI runtime service "

WARNING:SPLIT_STRING: quoted string split across lines
#763: FILE: arch/x86/kernel/efi.c:355:
+		printk(KERN_ERR "Could not map the EFI runtime service "
+		       "table!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memmap.map"
#769: FILE: arch/x86/kernel/efi.c:361:
+	if (memmap.map == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#770: FILE: arch/x86/kernel/efi.c:362:
+		printk(KERN_ERR "Could not map the EFI memory map!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#773: FILE: arch/x86/kernel/efi.c:365:
+		printk(KERN_WARNING "Kernel-defined memdesc"

WARNING:SPLIT_STRING: quoted string split across lines
#774: FILE: arch/x86/kernel/efi.c:366:
+		printk(KERN_WARNING "Kernel-defined memdesc"
+		       "doesn't match the one from EFI!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#774: FILE: arch/x86/kernel/efi.c:366:
+		printk(KERN_WARNING "Kernel-defined memdesc"
+		       "doesn't match the one from EFI!\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#807: FILE: arch/x86/kernel/efi.c:399:
+		    (((md->phys_addr + (md->num_pages<<EFI_PAGE_SHIFT)) >>
 		                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#815: FILE: arch/x86/kernel/efi.c:407:
+			printk(KERN_ERR "ioremap of 0x%llX failed!\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'md->phys_addr <= (unsigned long)efi_phys.systab'
#818: FILE: arch/x86/kernel/efi.c:410:
+		if ((md->phys_addr <= (unsigned long)efi_phys.systab) &&
+		    ((unsigned long)efi_phys.systab < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#825: FILE: arch/x86/kernel/efi.c:417:
+	BUG_ON(!efi.systab);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#827: FILE: arch/x86/kernel/efi.c:419:
+	status = phys_efi_set_virtual_address_map(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#834: FILE: arch/x86/kernel/efi.c:426:
+		printk(KERN_ALERT "You are screwed! "

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: arch/x86/kernel/efi.c:427:
+		printk(KERN_ALERT "You are screwed! "
+		       "Unable to switch EFI into virtual mode "

WARNING:SPLIT_STRING: quoted string split across lines
#836: FILE: arch/x86/kernel/efi.c:428:
+		       "Unable to switch EFI into virtual mode "
+		       "(status=%lx)\n", status);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'md->phys_addr <= phys_addr'
#871: FILE: arch/x86/kernel/efi.c:463:
+		if ((md->phys_addr <= phys_addr) &&
+		    (phys_addr < (md->phys_addr +
+				  (md->num_pages << EFI_PAGE_SHIFT))))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'md->phys_addr <= phys_addr'
#886: FILE: arch/x86/kernel/efi.c:478:
+		if ((md->phys_addr <= phys_addr) &&
+		    (phys_addr < (md->phys_addr +
+				  (md->num_pages << EFI_PAGE_SHIFT))))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#896: FILE: include/asm-x86/efi.h:1:
+#ifndef _ASM_X86_EFI_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#904: FILE: include/asm-x86/efi.h:9:
+extern u64 efi_call0(void *fp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/asm-x86/efi.h:10:
+extern u64 efi_call1(void *fp, u64 arg1);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#906: FILE: include/asm-x86/efi.h:11:
+extern u64 efi_call2(void *fp, u64 arg1, u64 arg2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: include/asm-x86/efi.h:12:
+extern u64 efi_call3(void *fp, u64 arg1, u64 arg2, u64 arg3);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: include/asm-x86/efi.h:13:
+extern u64 efi_call4(void *fp, u64 arg1, u64 arg2, u64 arg3, u64 arg4);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: include/asm-x86/efi.h:14:
+extern u64 efi_call5(void *fp, u64 arg1, u64 arg2, u64 arg3,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#911: FILE: include/asm-x86/efi.h:16:
+extern u64 efi_call6(void *fp, u64 arg1, u64 arg2, u64 arg3,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#932: FILE: include/asm-x86/efi.h:37:
+#define efi_call_virt0(f)				\
+	efi_call0((void *)(efi.systab->runtime->f))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#934: FILE: include/asm-x86/efi.h:39:
+#define efi_call_virt1(f, a1)					\
+	efi_call1((void *)(efi.systab->runtime->f), (u64)(a1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#936: FILE: include/asm-x86/efi.h:41:
+#define efi_call_virt2(f, a1, a2)					\
+	efi_call2((void *)(efi.systab->runtime->f), (u64)(a1), (u64)(a2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#938: FILE: include/asm-x86/efi.h:43:
+#define efi_call_virt3(f, a1, a2, a3)					\
+	efi_call3((void *)(efi.systab->runtime->f), (u64)(a1), (u64)(a2), \
+		  (u64)(a3))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#941: FILE: include/asm-x86/efi.h:46:
+#define efi_call_virt4(f, a1, a2, a3, a4)				\
+	efi_call4((void *)(efi.systab->runtime->f), (u64)(a1), (u64)(a2), \
+		  (u64)(a3), (u64)(a4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#944: FILE: include/asm-x86/efi.h:49:
+#define efi_call_virt5(f, a1, a2, a3, a4, a5)				\
+	efi_call5((void *)(efi.systab->runtime->f), (u64)(a1), (u64)(a2), \
+		  (u64)(a3), (u64)(a4), (u64)(a5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#947: FILE: include/asm-x86/efi.h:52:
+#define efi_call_virt6(f, a1, a2, a3, a4, a5, a6)			\
+	efi_call6((void *)(efi.systab->runtime->f), (u64)(a1), (u64)(a2), \
+		  (u64)(a3), (u64)(a4), (u64)(a5), (u64)(a6))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: include/asm-x86/efi.h:59:
+extern void *efi_ioremap(unsigned long offset, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: include/asm-x86/efi.h:65:
+extern void efi_reserve_bootmem(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#961: FILE: include/asm-x86/efi.h:66:
+extern void efi_call_phys_prelog(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#962: FILE: include/asm-x86/efi.h:67:
+extern void efi_call_phys_epilog(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#963: FILE: include/asm-x86/efi.h:68:
+extern void runtime_code_page_mkexec(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000354115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 46 warnings, 45 checks, 886 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000354115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
