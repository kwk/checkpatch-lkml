WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#123: FILE: kernel/gcov/Kconfig:3:
+config GCOV_PROFILE
+	bool "Activate gcov-based profiling"
+	depends on DEBUG_FS
+	---help---
+	This option enables gcov-based code profiling (e.g. for code coverage
+	measurements).
+
+	If unsure, say N.
+
+	Additionally specify CONFIG_GCOV_PROFILE_ALL=y to get profiling data
+	for the entire kernel. To enable profiling for specific files or
+	directories, add a line similar to the following to the respective
+	Makefile:
+
+	For a single file (e.g. main.o):
+	        GCOV_main.o := y
+
+	For all files in one directory:
+	        GCOV := y
+
+	To exclude files from being profiled even when CONFIG_GCOV_PROFILE_ALL
+	is specified, use:
+
+	        GCOV_main.o := n
+	and:
+	        GCOV := n
+
+	Note that the debugfs filesystem has to be mounted to access
+	profiling data.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#153: FILE: kernel/gcov/Kconfig:33:
+config GCOV_PROFILE_ALL
+	bool "Profile entire Kernel"
+	depends on GCOV_PROFILE
+	---help---
+	This options activates profiling for the entire kernel.
+
+	If unsure, say Y.
+
+	Note that a kernel compiled with profiling flags will be larger and
+	slower. Also be sure to exclude files from profiling which are not
+	linked to the kernel image to prevent linker errors.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: kernel/gcov/base.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#219: FILE: kernel/gcov/base.c:49:
+		printk(KERN_INFO TAG "gcc version %x\n", gcov_version);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#221: FILE: kernel/gcov/base.c:51:
+		printk(KERN_WARNING TAG "version mismatch in %s\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#232: FILE: kernel/gcov/base.c:62:
+ * for kernel profiling. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: kernel/gcov/base.c:118:
+        return (addr >= start && (void *) addr < start + size);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#288: FILE: kernel/gcov/base.c:118:
+        return (addr >= start && (void *) addr < start + size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: kernel/gcov/base.c:118:
+        return (addr >= start && (void *) addr < start + size);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#304: FILE: kernel/gcov/base.c:134:
+		if (within(info, mod->module_core, mod->core_size)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#311: FILE: kernel/gcov/base.c:141:
+		} else

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#327: FILE: kernel/gcov/base.c:157:
+__initcall(gcov_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#333: FILE: kernel/gcov/gcov.h:1:
+/*

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#348: FILE: kernel/gcov/gcov.h:16:
+#define GCC_VERSION_LOWER(major, minor) ((__GNUC__ < major) || \

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'major' - possible side-effects?
#348: FILE: kernel/gcov/gcov.h:16:
+#define GCC_VERSION_LOWER(major, minor) ((__GNUC__ < major) || \
+					 (__GNUC__ == major) && \
+					 (__GNUC_MINOR__ < minor))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'major' may be better as '(major)' to avoid precedence issues
#348: FILE: kernel/gcov/gcov.h:16:
+#define GCC_VERSION_LOWER(major, minor) ((__GNUC__ < major) || \
+					 (__GNUC__ == major) && \
+					 (__GNUC_MINOR__ < minor))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'minor' may be better as '(minor)' to avoid precedence issues
#348: FILE: kernel/gcov/gcov.h:16:
+#define GCC_VERSION_LOWER(major, minor) ((__GNUC__ < major) || \
+					 (__GNUC__ == major) && \
+					 (__GNUC_MINOR__ < minor))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#349: FILE: kernel/gcov/gcov.h:17:
+					 (__GNUC__ == major) && \

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#350: FILE: kernel/gcov/gcov.h:18:
+					 (__GNUC_MINOR__ < minor))

CHECK:SPACING: No space is necessary after a cast
#359: FILE: kernel/gcov/gcov.h:27:
+#define GCOV_DATA_MAGIC		((unsigned int) 0x67636461)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int) 0x67636461' could be '0x67636461U'
#359: FILE: kernel/gcov/gcov.h:27:
+#define GCOV_DATA_MAGIC		((unsigned int) 0x67636461)

CHECK:SPACING: No space is necessary after a cast
#360: FILE: kernel/gcov/gcov.h:28:
+#define GCOV_TAG_FUNCTION	((unsigned int) 0x01000000)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int) 0x01000000' could be '0x01000000U'
#360: FILE: kernel/gcov/gcov.h:28:
+#define GCOV_TAG_FUNCTION	((unsigned int) 0x01000000)

CHECK:SPACING: No space is necessary after a cast
#361: FILE: kernel/gcov/gcov.h:29:
+#define GCOV_TAG_COUNTER_BASE	((unsigned int) 0x01a10000)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int) 0x01a10000' could be '0x01a10000U'
#361: FILE: kernel/gcov/gcov.h:29:
+#define GCOV_TAG_COUNTER_BASE	((unsigned int) 0x01a10000)

CHECK:SPACING: No space is necessary after a cast
#363: FILE: kernel/gcov/gcov.h:31:
+	(GCOV_TAG_COUNTER_BASE + ((unsigned int) (count) << 17))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#366: FILE: kernel/gcov/gcov.h:34:
+typedef long gcov_type;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#368: FILE: kernel/gcov/gcov.h:36:
+typedef long long gcov_type;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gcov_type *' should also have an identifier name
#380: FILE: kernel/gcov/gcov.h:48:
+	void (*merge)(gcov_type *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#380: FILE: kernel/gcov/gcov.h:48:
+	void (*merge)(gcov_type *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gcov_callback_t' should also have an identifier name
#406: FILE: kernel/gcov/gcov.h:74:
+int gcov_register_callback(gcov_callback_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#411: FILE: kernel/gcov/gcov.h:79:
+void *gcov_iter_new(struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#412: FILE: kernel/gcov/gcov.h:80:
+void gcov_iter_start(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#413: FILE: kernel/gcov/gcov.h:81:
+int gcov_iter_next(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#414: FILE: kernel/gcov/gcov.h:82:
+int gcov_iter_write(void *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#414: FILE: kernel/gcov/gcov.h:82:
+int gcov_iter_write(void *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#415: FILE: kernel/gcov/gcov.h:83:
+struct gcov_info *gcov_iter_get_info(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#418: FILE: kernel/gcov/gcov.h:86:
+void gcov_info_reset(struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#419: FILE: kernel/gcov/gcov.h:87:
+int gcov_info_is_compatible(struct gcov_info *, struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#419: FILE: kernel/gcov/gcov.h:87:
+int gcov_info_is_compatible(struct gcov_info *, struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#420: FILE: kernel/gcov/gcov.h:88:
+void gcov_info_add(struct gcov_info *, struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#420: FILE: kernel/gcov/gcov.h:88:
+void gcov_info_add(struct gcov_info *, struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#421: FILE: kernel/gcov/gcov.h:89:
+struct gcov_info *gcov_info_dup(struct gcov_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gcov_info *' should also have an identifier name
#422: FILE: kernel/gcov/gcov.h:90:
+void gcov_info_free(struct gcov_info *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#431: FILE: kernel/gcov/gcov.h:99:
+};
+extern const struct gcov_link_t gcov_link[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#462: FILE: kernel/gcov/Makefile:1:
+EXTRA_CFLAGS := -DSRCTREE='"$(srctree)"' -DOBJTREE='"$(objtree)"'

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#478: FILE: kernel/gcov/fs.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#533: FILE: kernel/gcov/fs.c:56:
+		printk(KERN_WARNING TAG "invalid gcov_persist parameter '%s'\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#537: FILE: kernel/gcov/fs.c:60:
+	printk(KERN_INFO TAG "setting gcov_persist to %d\n", val);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#542: FILE: kernel/gcov/fs.c:65:
+__setup("gcov_persist=", gcov_persist_setup);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#579: FILE: kernel/gcov/fs.c:102:
+static struct seq_operations seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#604: FILE: kernel/gcov/fs.c:127:
+	 * complexity and concurrent access. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 30)
#736: FILE: kernel/gcov/fs.c:259:
+	for (num = 0; gcov_link[num].ext; num++)
+		/* Nothing. */;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#766: FILE: kernel/gcov/fs.c:289:
+static struct file_operations data_fops = {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*node)...) over kzalloc(sizeof(struct node_t)...)
#790: FILE: kernel/gcov/fs.c:313:
+	node = kzalloc(sizeof(struct node_t) + strlen(name) + 1, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#792: FILE: kernel/gcov/fs.c:315:
+		printk(KERN_WARNING TAG "out of memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#792: FILE: kernel/gcov/fs.c:315:
+	if (!node) {
+		printk(KERN_WARNING TAG "out of memory\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#796: FILE: kernel/gcov/fs.c:319:
+	if (info) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: kernel/gcov/fs.c:321:
+		node->dentry = debugfs_create_file(node->name, 0600,
+					parent->dentry, node, &data_fops);

CHECK:BRACES: Unbalanced braces around else statement
#799: FILE: kernel/gcov/fs.c:322:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#802: FILE: kernel/gcov/fs.c:325:
+		printk(KERN_WARNING TAG "could not create file\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#884: FILE: kernel/gcov/fs.c:407:
+static struct file_operations reset_fops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#928: FILE: kernel/gcov/fs.c:451:
+		printk(KERN_WARNING TAG "could not save data for '%s' (out of "

WARNING:SPLIT_STRING: quoted string split across lines
#929: FILE: kernel/gcov/fs.c:452:
+		printk(KERN_WARNING TAG "could not save data for '%s' (out of "
+		       "memory)\n", node->info->filename);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#939: FILE: kernel/gcov/fs.c:462:
+	if (gcov_info_is_compatible(node->ghost, info))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#941: FILE: kernel/gcov/fs.c:464:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#942: FILE: kernel/gcov/fs.c:465:
+		printk(KERN_WARNING TAG "could not add data for '%s' "

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: kernel/gcov/fs.c:466:
+		printk(KERN_WARNING TAG "could not add data for '%s' "
+		       "(incompatible data)\n", info->filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#965: FILE: kernel/gcov/fs.c:488:
+			printk(KERN_WARNING TAG "could not add '%s' "

WARNING:SPLIT_STRING: quoted string split across lines
#966: FILE: kernel/gcov/fs.c:489:
+			printk(KERN_WARNING TAG "could not add '%s' "
+			       "(already exists)\n", info->filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#970: FILE: kernel/gcov/fs.c:493:
+			printk(KERN_WARNING TAG "could not remove '%s' (not "

WARNING:SPLIT_STRING: quoted string split across lines
#971: FILE: kernel/gcov/fs.c:494:
+			printk(KERN_WARNING TAG "could not remove '%s' (not "
+			       "found)\n", info->filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#992: FILE: kernel/gcov/fs.c:515:
+		printk(KERN_WARNING TAG "could not create root dir\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#999: FILE: kernel/gcov/fs.c:522:
+		printk(KERN_WARNING TAG "could not create reset file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1005: FILE: kernel/gcov/fs.c:528:
+		printk(KERN_WARNING TAG "could not register callback (rc=%d)\n",

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1013: FILE: kernel/gcov/fs.c:536:
+	if (reset_dentry)
+		debugfs_remove(reset_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1015: FILE: kernel/gcov/fs.c:538:
+	if (root_node.dentry)
+		debugfs_remove(root_node.dentry);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1019: FILE: kernel/gcov/fs.c:542:
+__initcall(gcov_fs_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1025: FILE: kernel/gcov/gcc_3_4.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#1127: FILE: kernel/gcov/gcc_3_4.c:103:
+		((char *) info->functions + fn * get_fn_size(info));

CHECK:SPACING: No space is necessary after a cast
#1167: FILE: kernel/gcov/gcc_3_4.c:143:
+	values = (gcov_type *) &result->counts[active];

CHECK:SPACING: No space is necessary after a cast
#1178: FILE: kernel/gcov/gcc_3_4.c:154:
+	name = (char *) values;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*iter)...) over kzalloc(sizeof(struct iterator_t)...)
#1234: FILE: kernel/gcov/gcc_3_4.c:210:
+	iter = kzalloc(sizeof(struct iterator_t) +

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1299: FILE: kernel/gcov/gcc_3_4.c:275:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1309: FILE: kernel/gcov/gcc_3_4.c:285:
+		/* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1318: FILE: kernel/gcov/gcc_3_4.c:294:
+		/* fall through */

CHECK:SPACING: No space is necessary after a cast
#1339: FILE: kernel/gcov/gcc_3_4.c:315:
+		data[1] = (u32) (v >> 32);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1340: FILE: kernel/gcov/gcc_3_4.c:316:
+		/* fall through */

CHECK:SPACING: No space is necessary after a cast
#1342: FILE: kernel/gcov/gcc_3_4.c:318:
+		data[0] = (u32) (v & 0xffffffffUL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: kernel/gcov/gcc_3_4.c:361:
+		rc = seq_write_gcov_int(seq, 4,
+			GCOV_TAG_FOR_COUNTER(get_type(iter)->num));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: kernel/gcov/gcc_3_4.c:365:
+		rc = seq_write_gcov_int(seq, 4,
+				get_func(iter)->n_ctrs[iter->type] * 2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1393: FILE: kernel/gcov/gcc_3_4.c:369:
+		rc = seq_write_gcov_int(seq, 8,
+			iter->info->counts[iter->type].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'iter->info->counts[iter->type].values[iter->count+get_type(iter)->offset]'
#1394: FILE: kernel/gcov/gcc_3_4.c:370:
+			iter->info->counts[iter->type].
+				values[iter->count + get_type(iter)->offset]);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 65 warnings, 27 checks, 1296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
