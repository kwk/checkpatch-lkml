WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
/proc/mounts in its current state fail to disambiguate bind mounts, especially 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: fs/dcache.c:1839:
+static inline int prepend(char **buffer, int *buflen, const char *str,
+					int namelen)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#109: FILE: fs/dcache.c:1841:
+	if ((*buflen -= namelen) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: fs/dcache.c:1853:
+char * dentry_path(struct dentry *dentry, char *buf, int buflen)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: fs/dcache.c:1855:
+	char * end = buf+buflen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#123: FILE: fs/dcache.c:1855:
+	char * end = buf+buflen;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: fs/dcache.c:1856:
+	char * retval;

CHECK:CAMELCASE: Avoid CamelCase: <Elong>
#130: FILE: fs/dcache.c:1862:
+			goto Elong;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#133: FILE: fs/dcache.c:1865:
+	retval = end-1;
 	            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: fs/dcache.c:1869:
+		struct dentry * parent;

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: fs/dcache.c:1870:
+		struct dentry * parent;
+		if (IS_ROOT(dentry))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: fs/dcache.c:1877:
+		if (prepend(&end, &buflen, dentry->d_name.name,
+				dentry->d_name.len) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: fs/dcache.c:1878:
+^I            prepend(&end, &buflen, "/", 1))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: fs/namespace.c:56:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/namespace.c:401:
+		seq_printf(m, "shared:%lu",
+				get_peer_same_ns(mnt)->mnt_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: fs/namespace.c:404:
+			seq_printf(m, ",slave:%lu ",
+				get_master_same_ns(mnt)->mnt_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: fs/namespace.c:410:
+		seq_printf(m, "slave:%lu ",
+			get_master_same_ns(mnt)->mnt_id);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#216: FILE: fs/namespace.c:412:
+		seq_printf(m, "unbindable ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#218: FILE: fs/namespace.c:414:
+		seq_printf(m, "private ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: fs/namespace.c:417:
+	seq_printf(m, "%lu %u:%u ", mnt->mnt_id,
+				MAJOR(mnt->mnt_sb->s_dev),

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#225: FILE: fs/namespace.c:421:
+	seq_printf(m, "%lu \n", mnt->mnt_parent->mnt_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: fs/seq_file.c:345:
+		char c = *p++;
+		if (!c) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#258: FILE: fs/seq_file.c:351:
+			break;
+		} else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: fs/seq_file.c:365:
+ ^I     char *esc)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: fs/seq_file.c:365:
+ ^I     char *esc)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: fs/seq_file.c:365:
+int seq_path(struct seq_file *m, struct vfsmount *mnt, struct dentry *dentry,
+ 	     char *esc)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: fs/seq_file.c:365:
+ ^I     char *esc)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: fs/seq_file.c:392:
+	char *p = NULL;
+	if (m->count < m->size) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: fs/seq_file.c:394:
+		char *s = m->buf + m->count;
+		p = dentry_path(dentry, s, m->size - m->count);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#333: FILE: fs/seq_file.c:408:
+EXPORT_SYMBOL(seq_dentry);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#346: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#346: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#346: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#359: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#359: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#359: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: fs/pnode.c:34:
+	struct vfsmount *m = mnt;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: fs/pnode.c:45:
+	struct vfsmount *tmp = m;
+	if (!m) return m;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#386: FILE: fs/pnode.c:45:
+	if (!m) return m;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#404: FILE: fs/pnode.h:37:
+struct vfsmount *get_master_same_ns(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#405: FILE: fs/pnode.h:38:
+struct vfsmount *get_peer_same_ns(struct vfsmount *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000405474.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 22 warnings, 12 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000405474.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
