WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#73: FILE: drivers/block/floppy.c:289:
+#define TOMINOR(x)	((x & 3) | ((x & 4) << 5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#73: FILE: drivers/block/floppy.c:289:
+#define TOMINOR(x)	((x & 3) | ((x & 4) << 5))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: drivers/block/floppy.c:312:
+	printk(DEVICE_NAME "%d: " format, current_drive, ##args)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'head' may be better as '(head)' to avoid precedence issues
#116: FILE: drivers/block/floppy.c:314:
+#define PH_HEAD(floppy, head) (((((floppy)->stretch & 2) >> 1) ^ head) << 2)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#119: FILE: drivers/block/floppy.c:317:
+#define CLEARSTRUCT(x)	memset((x), 0, sizeof(*(x)))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#209: FILE: drivers/block/floppy.c:521:
+#define CALL(x)		if ((x) == -EINTR) return -EINTR

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#209: FILE: drivers/block/floppy.c:521:
+#define CALL(x)		if ((x) == -EINTR) return -EINTR

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#210: FILE: drivers/block/floppy.c:522:
+#define ECALL(x)	if ((ret = (x))) return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#210: FILE: drivers/block/floppy.c:522:
+#define ECALL(x)	if ((ret = (x))) return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#210: FILE: drivers/block/floppy.c:522:
+#define ECALL(x)	if ((ret = (x))) return ret;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: drivers/block/floppy.c:523:
+#define _WAIT(x,i)	CALL(ret=wait_til_done((x),i))
                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#211: FILE: drivers/block/floppy.c:523:
+#define _WAIT(x,i)	CALL(ret=wait_til_done((x),i))
                   	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: drivers/block/floppy.c:523:
+#define _WAIT(x,i)	CALL(ret=wait_til_done((x),i))
                   	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: drivers/block/floppy.c:524:
+#define WAIT(x)		_WAIT((x),interruptible)
                		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: drivers/block/floppy.c:525:
+#define IWAIT(x)	_WAIT((x),1)
                 	         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: drivers/block/floppy.c:553:
+				 * main command */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#247: FILE: drivers/block/floppy.c:654:
+static void (*do_floppy)(void) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#264: FILE: drivers/block/floppy.c:706:
+#define INFBOUND(a, b) (a) = max_t(int, a, b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#264: FILE: drivers/block/floppy.c:706:
+#define INFBOUND(a, b) (a) = max_t(int, a, b)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#265: FILE: drivers/block/floppy.c:707:
+#define SUPBOUND(a, b) (a) = min_t(int, a, b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#265: FILE: drivers/block/floppy.c:707:
+#define SUPBOUND(a, b) (a) = min_t(int, a, b)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#279: FILE: drivers/block/floppy.c:919:
+#define LOCK_FDC(drive, interruptible)	    \
+	if (lock_fdc(drive, interruptible)) \
+		return -EINTR;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#279: FILE: drivers/block/floppy.c:919:
+#define LOCK_FDC(drive, interruptible)	    \
+	if (lock_fdc(drive, interruptible)) \
+		return -EINTR;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#279: FILE: drivers/block/floppy.c:919:
+#define LOCK_FDC(drive, interruptible)	    \
+	if (lock_fdc(drive, interruptible)) \
+		return -EINTR;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: drivers/block/floppy.c:2612:
+					 * points to end of transfer */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#359: FILE: drivers/block/floppy.c:4163:
+DEVICE_ATTR(cmos, S_IRUGO, floppy_cmos_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000021214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 10 warnings, 6 checks, 327 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000021214.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
