WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
track how many channels they need and dmaengine will learn if the client cares about

CHECK:BRACES: braces {} should be used on all arms of this statement
#100: FILE: drivers/dma/dmaengine.c:109:
+	if (unlikely(chan->slow_ref) && atomic_read(&chan->refcount.refcount) > 1)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#102: FILE: drivers/dma/dmaengine.c:111:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: drivers/dma/dmaengine.c:113:
+		if (local_read(&(per_cpu_ptr(chan->local,
+			get_cpu())->refcount)) > 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: drivers/dma/dmaengine.c:175:
+^I                                       chan,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: drivers/dma/dmaengine.c:176:
+^I                                       DMA_RESOURCE_AVAILABLE);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: drivers/dma/dmaengine.c:181:
+				if (ack == DMA_ACK) {
[...]
+				} else if (ack == DMA_NAK)
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: drivers/dma/dmaengine.c:266:
+                                DMA_RESOURCE_REMOVED);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/dma/dmaengine.c:266:
+                                DMA_RESOURCE_REMOVED);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/dma/dmaengine.c:274:
+			kref_put(&chan->device->refcount,
+				dma_async_device_cleanup);

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: drivers/dma/dmaengine.c:313:
+^I                                DMA_RESOURCE_REMOVED);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: drivers/dma/dmaengine.c:318:
+				kref_put(&chan->device->refcount,
+					dma_async_device_cleanup);

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#449: FILE: include/linux/dmaengine.h:32:
+ * enum dma_state - resource PNP/power managment state
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#540: FILE: include/linux/dmaengine.h:145:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#621: FILE: net/core/dev.c:156:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: net/core/dev.c:163:
+netdev_dma_event(struct dma_client *client, struct dma_chan *chan,
+	enum dma_state state);

WARNING:LINE_SPACING: Missing a blank line after declarations
#650: FILE: net/core/dev.c:2032:
+		int chan_idx;
+		for_each_cpu_mask(chan_idx, net_dma.channel_mask) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#652: FILE: net/core/dev.c:2034:
+			struct dma_chan *chan = net_dma.channels[chan_idx];
+			if (chan)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: net/core/dev.c:3592:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: net/core/dev.c:3616:
+netdev_dma_event(struct dma_client *client, struct dma_chan *chan,
+	enum dma_state state)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#724: FILE: net/core/dev.c:3626:
+		for (i = 0; i < NR_CPUS; i++)

CHECK:BRACES: braces {} should be used on all arms of this statement
#725: FILE: net/core/dev.c:3627:
+			if (net_dma->channels[i] == chan) {
[...]
+			} else if (net_dma->channels[i] == NULL && pos < 0)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!net_dma->channels[i]"
#728: FILE: net/core/dev.c:3630:
+			} else if (net_dma->channels[i] == NULL && pos < 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#741: FILE: net/core/dev.c:3641:
+		for (i = 0; i < NR_CPUS; i++)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 7 warnings, 12 checks, 676 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
