WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/8035e4288078cb806e7dd6bafe4d3e54d44cab3f

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#50: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: Documentation/perf_counter/builtin-annotate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#151: FILE: Documentation/perf_counter/builtin-annotate.c:28:
+static char		const *input_name = "perf.data";

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#152: FILE: Documentation/perf_counter/builtin-annotate.c:29:
+static char		*vmlinux = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#154: FILE: Documentation/perf_counter/builtin-annotate.c:31:
+static char		default_sort_order[] = "comm,dso";

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#160: FILE: Documentation/perf_counter/builtin-annotate.c:37:
+static int		dump_trace = 0;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#202: FILE: Documentation/perf_counter/builtin-annotate.c:79:
+typedef union event_union {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: Documentation/perf_counter/builtin-annotate.c:127:
+		fprintf(stderr,
+		"No symbols found in: %s, maybe install a debug package?\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#285: FILE: Documentation/perf_counter/builtin-annotate.c:162:
+	if (err) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#288: FILE: Documentation/perf_counter/builtin-annotate.c:165:
+	} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#318: FILE: Documentation/perf_counter/builtin-annotate.c:195:
+	uint64_t	 start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#319: FILE: Documentation/perf_counter/builtin-annotate.c:196:
+	uint64_t	 end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#320: FILE: Documentation/perf_counter/builtin-annotate.c:197:
+	uint64_t	 pgoff;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct map *' should also have an identifier name
#321: FILE: Documentation/perf_counter/builtin-annotate.c:198:
+	uint64_t	 (*map_ip)(struct map *, uint64_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint64_t' should also have an identifier name
#321: FILE: Documentation/perf_counter/builtin-annotate.c:198:
+	uint64_t	 (*map_ip)(struct map *, uint64_t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#339: FILE: Documentation/perf_counter/builtin-annotate.c:216:
+	if (self != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->dso"
#358: FILE: Documentation/perf_counter/builtin-annotate.c:235:
+		if (self->dso == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: Documentation/perf_counter/builtin-annotate.c:265:
+		struct map *t = l;
+		l = r;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <PRIx64>
#400: FILE: Documentation/perf_counter/builtin-annotate.c:277:
+	return fprintf(fp, " %"PRIx64"-%"PRIx64" %"PRIx64" %s\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#400: FILE: Documentation/perf_counter/builtin-annotate.c:277:
+	return fprintf(fp, " %"PRIx64"-%"PRIx64" %"PRIx64" %s\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: Documentation/perf_counter/builtin-annotate.c:281:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#416: FILE: Documentation/perf_counter/builtin-annotate.c:293:
+	if (self != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: Documentation/perf_counter/builtin-annotate.c:323:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#464: FILE: Documentation/perf_counter/builtin-annotate.c:341:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "th"
#480: FILE: Documentation/perf_counter/builtin-annotate.c:357:
+	if (th != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#516: FILE: Documentation/perf_counter/builtin-annotate.c:393:
+		struct map *new = map__clone(map);
+		if (!new)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#528: FILE: Documentation/perf_counter/builtin-annotate.c:405:
+	if (self == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#541: FILE: Documentation/perf_counter/builtin-annotate.c:418:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#543: FILE: Documentation/perf_counter/builtin-annotate.c:420:
+	for (nd = rb_first(&threads); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#543: FILE: Documentation/perf_counter/builtin-annotate.c:420:
+	for (nd = rb_first(&threads); nd; nd = rb_next(nd)) {
 	                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#543: FILE: Documentation/perf_counter/builtin-annotate.c:420:
+	for (nd = rb_first(&threads); nd; nd = rb_next(nd)) {
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#543: FILE: Documentation/perf_counter/builtin-annotate.c:420:
+	for (nd = rb_first(&threads); nd; nd = rb_next(nd)) {
 	                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#544: FILE: Documentation/perf_counter/builtin-annotate.c:421:
+		struct thread *pos = rb_entry(nd, struct thread, rb_node);
 		                              ^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#565: FILE: Documentation/perf_counter/builtin-annotate.c:442:
+	uint64_t	 ip;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#568: FILE: Documentation/perf_counter/builtin-annotate.c:445:
+	uint32_t	 count;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#580: FILE: Documentation/perf_counter/builtin-annotate.c:457:
+	int64_t (*cmp)(struct hist_entry *, struct hist_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#580: FILE: Documentation/perf_counter/builtin-annotate.c:457:
+	int64_t (*cmp)(struct hist_entry *, struct hist_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#581: FILE: Documentation/perf_counter/builtin-annotate.c:458:
+	int64_t (*collapse)(struct hist_entry *, struct hist_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#581: FILE: Documentation/perf_counter/builtin-annotate.c:458:
+	int64_t (*collapse)(struct hist_entry *, struct hist_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#582: FILE: Documentation/perf_counter/builtin-annotate.c:459:
+	size_t	(*print)(FILE *fp, struct hist_entry *);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#684: FILE: Documentation/perf_counter/builtin-annotate.c:561:
+	uint64_t ip_l, ip_r;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#719: FILE: Documentation/perf_counter/builtin-annotate.c:596:
+static int sort__need_collapse = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#765: FILE: Documentation/perf_counter/builtin-annotate.c:642:
+	int64_t cmp = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#780: FILE: Documentation/perf_counter/builtin-annotate.c:657:
+	int64_t cmp = 0;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#783: FILE: Documentation/perf_counter/builtin-annotate.c:660:
+		int64_t (*f)(struct hist_entry *, struct hist_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hist_entry *' should also have an identifier name
#783: FILE: Documentation/perf_counter/builtin-annotate.c:660:
+		int64_t (*f)(struct hist_entry *, struct hist_entry *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#801: FILE: Documentation/perf_counter/builtin-annotate.c:678:
+	if (total_samples) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: Documentation/perf_counter/builtin-annotate.c:692:
+		ret = color_fprintf(fp, color, "   %6.2f%%",
+				(self->count * 100.0) / total_samples);

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: Documentation/perf_counter/builtin-annotate.c:693:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#851: FILE: Documentation/perf_counter/builtin-annotate.c:728:
+	while (*p != NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#894: FILE: Documentation/perf_counter/builtin-annotate.c:771:
+	int64_t cmp;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#896: FILE: Documentation/perf_counter/builtin-annotate.c:773:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#948: FILE: Documentation/perf_counter/builtin-annotate.c:825:
+	while (*p != NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#986: FILE: Documentation/perf_counter/builtin-annotate.c:863:
+	struct rb_node *nd;
 	                ^^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#991: FILE: Documentation/perf_counter/builtin-annotate.c:868:
+	fprintf(fp, "# (%Ld samples)\n", (__u64)total_samples);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1011: FILE: Documentation/perf_counter/builtin-annotate.c:888:
+	for (nd = rb_first(&output_hists); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1011: FILE: Documentation/perf_counter/builtin-annotate.c:888:
+	for (nd = rb_first(&output_hists); nd; nd = rb_next(nd)) {
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1011: FILE: Documentation/perf_counter/builtin-annotate.c:888:
+	for (nd = rb_first(&output_hists); nd; nd = rb_next(nd)) {
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1011: FILE: Documentation/perf_counter/builtin-annotate.c:888:
+	for (nd = rb_first(&output_hists); nd; nd = rb_next(nd)) {
 	                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1012: FILE: Documentation/perf_counter/builtin-annotate.c:889:
+		pos = rb_entry(nd, struct hist_entry, rb_node);
 		               ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#1030: FILE: Documentation/perf_counter/builtin-annotate.c:907:
+	if (thread == NULL ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: Documentation/perf_counter/builtin-annotate.c:908:
+	if (thread == NULL ||
+			thread__set_comm(thread, "[idle]")) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1050: FILE: Documentation/perf_counter/builtin-annotate.c:927:
+	uint64_t ip = event->ip.ip;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#1062: FILE: Documentation/perf_counter/builtin-annotate.c:939:
+	if (thread == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1077: FILE: Documentation/perf_counter/builtin-annotate.c:954:
+	} else if (event->header.misc & PERF_EVENT_MISC_USER) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map"
#1082: FILE: Documentation/perf_counter/builtin-annotate.c:959:
+		if (map != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: Documentation/perf_counter/builtin-annotate.c:988:
+			fprintf(stderr,
+		"problem incrementing symbol count, skipping event\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#1135: FILE: Documentation/perf_counter/builtin-annotate.c:1012:
+	if (thread == NULL || map == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map"
#1135: FILE: Documentation/perf_counter/builtin-annotate.c:1012:
+	if (thread == NULL || map == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#1156: FILE: Documentation/perf_counter/builtin-annotate.c:1033:
+	if (thread == NULL ||

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1189: FILE: Documentation/perf_counter/builtin-annotate.c:1066:
+	dprintf("%p [%p]: PERF_EVENT_PERIOD: time:%Ld, id:%Ld: period:%Ld\n",

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1239: FILE: Documentation/perf_counter/builtin-annotate.c:1116:
+	uint32_t size;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!getcwd"
#1267: FILE: Documentation/perf_counter/builtin-annotate.c:1144:
+		if (getcwd(__cwd, sizeof(__cwd)) == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1306: FILE: Documentation/perf_counter/builtin-annotate.c:1183:
+	dprintf("%p [%p]: event: %d\n",
+			(void *)(offset + head),

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1311: FILE: Documentation/perf_counter/builtin-annotate.c:1188:
+	if (!size || process_event(event, offset, head) < 0) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1367: FILE: Documentation/perf_counter/builtin-annotate.c:1244:
+	OPT_STRING('i', "input", &input_name, "file",
+		    "input file name"),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1423: FILE: Documentation/perf_counter/builtin.h:17:
+extern int cmd_annotate(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000114594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 32 warnings, 44 checks, 1365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000114594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
