WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#31: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: include/linux/btree-128.h:1:
+extern struct btree_geo btree_geo128;

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#59: FILE: include/linux/btree-128.h:24:
+	u64 key[2] = {k1, k2};
+	return btree_lookup(&head->h, &btree_geo128, (unsigned long *)&key);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#79: FILE: include/linux/btree-128.h:44:
+	u64 key[2] = {k1, k2};
+	return btree_insert(&head->h, &btree_geo128,

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: include/linux/btree-128.h:52:
+	u64 key[2] = {k1, k2};
+	return btree_update(&head->h, &btree_geo128,

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: include/linux/btree-128.h:59:
+	u64 key[2] = {k1, k2};
+	return btree_remove(&head->h, &btree_geo128, (unsigned long *)&key);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#140: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k1' - possible side-effects?
#140: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k1' may be better as '(k1)' to avoid precedence issues
#140: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k2' - possible side-effects?
#140: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k2' may be better as '(k2)' to avoid precedence issues
#140: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#140: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: include/linux/btree-type.h:1:
+#define __BTREE_TP(pfx, type, sfx)	pfx ## type ## sfx

ERROR:SPACING: space required after that ',' (ctx:VxB)
#153: FILE: include/linux/btree-type.h:3:
+#define BTREE_TP(pfx)			_BTREE_TP(pfx, BTREE_TYPE_SUFFIX,)
                      			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: include/linux/btree-type.h:40:
+	unsigned long _key = key;
+	return btree_lookup(&head->h, BTREE_TYPE_GEO, &_key);

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: include/linux/btree-type.h:47:
+	unsigned long _key = key;
+	return btree_insert(&head->h, BTREE_TYPE_GEO, &_key, val, gfp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: include/linux/btree-type.h:51:
+static inline int BTREE_FN(update)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,
+		void *val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: include/linux/btree-type.h:54:
+	unsigned long _key = key;
+	return btree_update(&head->h, BTREE_TYPE_GEO, &_key, val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#210: FILE: include/linux/btree-type.h:60:
+	unsigned long _key = key;
+	return btree_remove(&head->h, BTREE_TYPE_GEO, &_key);

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: include/linux/btree-type.h:67:
+	void *val = btree_last(&head->h, BTREE_TYPE_GEO, &_key);
+	if (val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#226: FILE: include/linux/btree-type.h:76:
+	void *val = btree_get_prev(&head->h, BTREE_TYPE_GEO, &_key);
+	if (val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: include/linux/btree-type.h:87:
+static inline int BTREE_FN(insert)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,
+			   void *val, gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: include/linux/btree-type.h:94:
+static inline int BTREE_FN(update)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,
+		void *val)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: include/linux/btree.h:1:
+#ifndef BTREE_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#491: FILE: include/linux/btree.h:188:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#508: FILE: include/linux/btree.h:205:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#514: FILE: include/linux/btree.h:211:
+#define BTREE_TYPE_GEO &btree_geo32

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#518: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#518: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#518: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#518: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#525: FILE: include/linux/btree.h:222:
+#define BTREE_TYPE_GEO &btree_geo32

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#529: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#529: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#529: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#529: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#537: FILE: include/linux/btree.h:234:
+#define BTREE_TYPE_GEO &btree_geo64

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#541: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#541: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#541: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#541: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045261.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 15 warnings, 23 checks, 499 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045261.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
