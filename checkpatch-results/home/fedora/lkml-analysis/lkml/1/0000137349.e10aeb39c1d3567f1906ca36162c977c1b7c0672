WARNING:TYPO_SPELLING: 'overwritting' may be misspelled - perhaps 'overwriting'?
#100: 
instead of overwritting the whole ring buffer allocation.
           ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#128: FILE: include/trace/ftrace.h:31:
+#define __string(item, src)		int	__str_loc_##item;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: include/trace/ftrace.h:47:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'beggining' may be misspelled - perhaps 'beginning'?
#156: FILE: include/trace/ftrace.h:60:
+ * keep the offset of each string from the beggining of the event
                                            ^^^^^^^^^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#168: FILE: include/trace/ftrace.h:72:
+#define __field(type, item);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#168: FILE: include/trace/ftrace.h:72:
+#define __field(type, item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#171: FILE: include/trace/ftrace.h:75:
+#define __string(item, src)	int item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#174: FILE: include/trace/ftrace.h:78:
+#define TRACE_EVENT(call, proto, args, tstruct, assign, print)		\
+	struct ftrace_str_offsets_##call {				\
+		tstruct;						\
+	};

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#192: FILE: include/trace/ftrace.h:126:
+#define __get_str(field)	(char *)__entry + __entry->__str_loc_##field

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#202: FILE: include/trace/ftrace.h:195:
+#define __string(item, src)						       \
+	ret = trace_seq_printf(s, "\tfield: __str_loc " #item ";\t"	       \
+			       "offset:%u;tsize:%u;\n",			       \
+			       (unsigned int)offsetof(typeof(field),	       \
+					__str_loc_##item),		       \
+			       (unsigned int)sizeof(field.__str_loc_##item));  \
+	if (!ret)							       \
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#202: FILE: include/trace/ftrace.h:195:
+#define __string(item, src)						       \
+	ret = trace_seq_printf(s, "\tfield: __str_loc " #item ";\t"	       \
+			       "offset:%u;tsize:%u;\n",			       \
+			       (unsigned int)offsetof(typeof(field),	       \
+					__str_loc_##item),		       \
+			       (unsigned int)sizeof(field.__str_loc_##item));  \
+	if (!ret)							       \
+		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#219: FILE: include/trace/ftrace.h:248:
+#define __string(item, src)						       \
+	ret = trace_define_field(event_call, "__str_loc", #item,	       \
+				offsetof(typeof(field), __str_loc_##item),     \
+				sizeof(field.__str_loc_##item));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#219: FILE: include/trace/ftrace.h:248:
+#define __string(item, src)						       \
+	ret = trace_define_field(event_call, "__str_loc", #item,	       \
+				offsetof(typeof(field), __str_loc_##item),     \
+				sizeof(field.__str_loc_##item));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#247: FILE: include/trace/ftrace.h:480:
+#define __string(item, src)						       \
+	__str_offsets.item = __str_size +				       \
+			     offsetof(typeof(*entry), __str_data);	       \
+	__str_size += strlen(src) + 1;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#253: FILE: include/trace/ftrace.h:486:
+#define __assign_str(dst, src)						\
+	__entry->__str_loc_##dst = __str_offsets.dst;			\
+	strcpy(__get_str(dst), src);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#253: FILE: include/trace/ftrace.h:486:
+#define __assign_str(dst, src)						\
+	__entry->__str_loc_##dst = __str_offsets.dst;			\
+	strcpy(__get_str(dst), src);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#253: FILE: include/trace/ftrace.h:486:
+#define __assign_str(dst, src)						\
+	__entry->__str_loc_##dst = __str_offsets.dst;			\
+	strcpy(__get_str(dst), src);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000137349.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 10 warnings, 2 checks, 154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000137349.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
