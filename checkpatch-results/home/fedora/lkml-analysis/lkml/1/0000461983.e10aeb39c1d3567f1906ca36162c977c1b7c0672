WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/cpu_acct.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/cpu_acct.h:9:
+extern void cpuacct_charge(struct task_struct *, cputime_t cputime);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#61: FILE: include/linux/cpu_acct.h:11:
+static void inline cpuacct_charge(struct task_struct *p, cputime_t cputime) {}

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#72: FILE: init/Kconfig:294:
+config RC_CPUACCT
+	bool "Simple CPU accounting container subsystem"
+	select RCFS
+	help
+	  Provides a simple Resource Controller for monitoring the
+	  total CPU consumed by the tasks in a container
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: kernel/cpu_acct.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#87: FILE: kernel/cpu_acct.c:2:
+ * kernel/cpu_acct.c - CPU accounting container subsystem

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#108: FILE: kernel/cpu_acct.c:23:
+	spinlock_t lock;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#139: FILE: kernel/cpu_acct.c:54:
+static inline u64 next_interval_boundary(u64 now) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#141: FILE: kernel/cpu_acct.c:56:
+	 * current time */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: kernel/cpu_acct.c:62:
+static int cpuacct_create(struct rc_subsys *ss, struct nsproxy *ns,
+					struct nsproxy *parent)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent != &init_nsproxy'
#151: FILE: kernel/cpu_acct.c:66:
+	if (parent && (parent != &init_nsproxy))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: kernel/cpu_acct.c:94:
+		 * been zero load */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#184: FILE: kernel/cpu_acct.c:99:
+		 * then we just ignore it */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#185: FILE: kernel/cpu_acct.c:100:
+		if ((s64)ca->current_interval_time > 0) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#214: FILE: kernel/cpu_acct.c:129:
+	s += sprintf(s, "%llu", (unsigned long long) time);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#237: FILE: kernel/cpu_acct.c:152:
+	 * previous period */

CHECK:SPACING: No space is necessary after a cast
#241: FILE: kernel/cpu_acct.c:156:
+	s += sprintf(s, "%llu", (unsigned long long) time);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#261: FILE: kernel/cpu_acct.c:176:
+	if ((err = rcfs_add_file(d, &cft_usage)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#263: FILE: kernel/cpu_acct.c:178:
+	if ((err = rcfs_add_file(d, &cft_load)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#269: FILE: kernel/cpu_acct.c:184:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#272: FILE: kernel/cpu_acct.c:187:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#299: FILE: kernel/cpu_acct.c:214:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: kernel/cpu_acct.c:218:
+	int id = rc_register_subsys(&cpuacct_subsys);
+	return id < 0 ? id : 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 9 checks, 298 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
