WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#27: FILE: fs/logfs/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#28: FILE: fs/logfs/file.c:2:
+ * fs/logfs/file.c	- prepare_write, commit_write and friends

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#39: FILE: fs/logfs/file.c:13:
+static int logfs_prepare_write(struct file *file, struct page *page,
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#39: FILE: fs/logfs/file.c:13:
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#39: FILE: fs/logfs/file.c:13:
+		unsigned start, unsigned end)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start == 0'
#44: FILE: fs/logfs/file.c:18:
+	if ((start == 0) && (end == PAGE_CACHE_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == PAGE_CACHE_SIZE'
#44: FILE: fs/logfs/file.c:18:
+	if ((start == 0) && (end == PAGE_CACHE_SIZE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#51: FILE: fs/logfs/file.c:25:
+static int logfs_commit_write(struct file *file, struct page *page,
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#51: FILE: fs/logfs/file.c:25:
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#51: FILE: fs/logfs/file.c:25:
+		unsigned start, unsigned end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#57: FILE: fs/logfs/file.c:31:
+	BUG_ON(PAGE_CACHE_SIZE != inode->i_sb->s_blocksize);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#57: FILE: fs/logfs/file.c:31:
+	BUG_ON(PAGE_CACHE_SIZE != inode->i_sb->s_blocksize);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#58: FILE: fs/logfs/file.c:32:
+	BUG_ON(page->index > I3_BLOCKS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#89: FILE: fs/logfs/file.c:63:
+	BUG_ON(PagePrivate(page) || page->private);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: fs/logfs/file.c:88:
+	unsigned offset;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'logfs_writepage', this function's name, in a string
#118: FILE: fs/logfs/file.c:92:
+	pr_debug("logfs_writepage(%lx, %lx, %p)\n", inode->i_ino, page->index,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: fs/logfs/file.c:93:
+	pr_debug("logfs_writepage(%lx, %lx, %p)\n", inode->i_ino, page->index,
+			page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: fs/logfs/file.c:111:
+	offset = i_size & (PAGE_CACHE_SIZE-1);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#145: FILE: fs/logfs/file.c:119:
+	 * writepage invokation because it may be mmapped.  "A file is mapped
 	             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: fs/logfs/file.c:135:
+	BUG_ON(level == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: fs/logfs/file.c:136:
+	BUG_ON(PageZero(page));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: fs/logfs/file.c:145:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->fsuid != inode->i_uid'
#187: FILE: fs/logfs/file.c:161:
+		if ((current->fsuid != inode->i_uid) && !capable(CAP_FOWNER))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 8 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
