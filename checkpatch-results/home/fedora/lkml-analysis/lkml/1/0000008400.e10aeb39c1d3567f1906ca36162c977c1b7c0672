CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/sched.h:2520:
+extern int sched_group_set_rt_runtime(struct task_group *tg, int task_data,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/sched.h:2522:
+extern long sched_group_rt_runtime(struct task_group *tg, int task_data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/sched.h:2523:
+extern int sched_group_set_rt_period(struct task_group *tg, int task_data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#86: FILE: include/linux/sched.h:2524:
+extern int sched_group_set_rt_period(struct task_group *tg, int task_data,
 				      long rt_period_us);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/sched.h:2525:
+extern long sched_group_rt_period(struct task_group *tg, int task_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: kernel/sched.c:7666:
+	init_rt_bandwidth(&init_task_group.rt_task_bandwidth,
+			global_rt_period(), global_rt_runtime());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: kernel/sched.c:8060:
+	init_rt_bandwidth(&tg->rt_task_bandwidth,
+			ktime_to_ns(def_rt_bandwidth.rt_period), 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#540: FILE: kernel/sched.c:8363:
+	if (d && tg == d->tg && d->rt_task_data) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#543: FILE: kernel/sched.c:8366:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#551: FILE: kernel/sched.c:8374:
+		if (d && child == d->tg && !d->rt_task_data) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#554: FILE: kernel/sched.c:8377:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#569: FILE: kernel/sched.c:8392:
+	if (tg == d->tg && !d->rt_task_data) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#572: FILE: kernel/sched.c:8395:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: kernel/sched.c:8443:
+static int tg_set_bandwidth(struct task_group *tg, int task_data,
 		u64 rt_period, u64 rt_runtime)

WARNING:LINE_SPACING: Missing a blank line after declarations
#855: FILE: kernel/sched_rt.c:33:
+	struct rt_root_rq *rt = container_of(rt_rq, struct rt_root_rq, rt_rq);
+	return container_of(rt, struct rq, rt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1190: FILE: kernel/sched_rt.c:574:
+	if (rt_rq->rt_time) {
[...]
+			/* The deadline changed, (re-)queue rt_rq. */
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prio <= rt->highest_prio.next'
#1379: FILE: kernel/sched_rt.c:788:
+	if (rt->rt_nr_total && (prio <= rt->highest_prio.next))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#1417: FILE: kernel/sched_rt.c:824:
+	if (rq->rt.rt_nr_total) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1430: FILE: kernel/sched_rt.c:837:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1547: FILE: kernel/sched_rt.c:947:
+	BUG_ON(rt_rq_on_rq(rt_rq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#1552: FILE: kernel/sched_rt.c:952:
+		if (rt_rq_before(rt_rq, entry))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1554: FILE: kernel/sched_rt.c:954:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1572: FILE: kernel/sched_rt.c:972:
+	BUG_ON(!rt_rq_on_rq(rt_rq));

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#1594: FILE: kernel/sched_rt.c:994:
+	 *   group would exceed ist allocated bandwidth.
 	                        ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1642: FILE: kernel/sched_rt.c:1042:
+	BUG_ON(!rt_rq->rt_nr_running);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1643: FILE: kernel/sched_rt.c:1043:
+	BUG_ON(on_rq && rt_rq_throttled(rt_rq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1680: FILE: kernel/sched_rt.c:1080:
+	BUG_ON(on_rq && rt_rq_throttled(rt_rq));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1683: FILE: kernel/sched_rt.c:1083:
+	if (on_rq && (!rt_rq->rt_nr_running ||
+	    old_boosted != rt_rq_boosted(rt_rq))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1723: FILE: kernel/sched_rt.c:1122:
+	BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008400.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 21 checks, 1831 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008400.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
