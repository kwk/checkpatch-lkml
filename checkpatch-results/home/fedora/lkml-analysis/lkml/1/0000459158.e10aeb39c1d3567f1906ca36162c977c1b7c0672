WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
> > But calls to read()/write() (not send()/recv()) still need to go through

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#73: 
I didnt found a way to crash (yet) my patched machine :)
  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#140: FILE: include/linux/dcache.h:136:
+	char * (*d_dname)(struct dentry *, char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#140: FILE: include/linux/dcache.h:136:
+	char * (*d_dname)(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#140: FILE: include/linux/dcache.h:136:
+	char * (*d_dname)(struct dentry *, char *, int);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (dentry->d_op->d_dname)
#151: FILE: fs/dcache.c:1827:
+		return (dentry->d_op->d_dname)(dentry, buf, buflen);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: fs/pipe.c:844:
+static char * pipefs_dname(struct dentry *dentry, char *buffer, int buflen)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#200: FILE: net/socket.c:318:
+static char * sockfs_dname(struct dentry *dentry, char *buffer, int buflen)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459158.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 1 checks, 76 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459158.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
