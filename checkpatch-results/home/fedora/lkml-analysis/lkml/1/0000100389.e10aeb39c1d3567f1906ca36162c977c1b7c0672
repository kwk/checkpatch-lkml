WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#73: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: arch/arm/mach-bcmring/include/csp/cache.h:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#79: FILE: arch/arm/mach-bcmring/include/csp/cache.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#102: FILE: arch/arm/mach-bcmring/include/csp/cache.h:25:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: arch/arm/mach-bcmring/include/csp/delay.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#120: FILE: arch/arm/mach-bcmring/include/csp/delay.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: arch/arm/mach-bcmring/include/csp/delay.h:15:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: arch/arm/mach-bcmring/include/csp/errno.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#162: FILE: arch/arm/mach-bcmring/include/csp/errno.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#199: FILE: arch/arm/mach-bcmring/include/csp/module.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#200: FILE: arch/arm/mach-bcmring/include/csp/module.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: arch/arm/mach-bcmring/include/csp/module.h:15:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#229: FILE: arch/arm/mach-bcmring/include/csp/module.h:31:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#237: FILE: arch/arm/mach-bcmring/include/csp/reg.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#238: FILE: arch/arm/mach-bcmring/include/csp/reg.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#253: FILE: arch/arm/mach-bcmring/include/csp/reg.h:17:
+/**
+*  @file    reg.h

WARNING:TYPO_SPELLING: 'defintions' may be misspelled - perhaps 'definitions'?
#255: FILE: arch/arm/mach-bcmring/include/csp/reg.h:19:
+*  @brief   Generic register defintions used in CSP
                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#268: FILE: arch/arm/mach-bcmring/include/csp/reg.h:32:
+#define __REG32(x)      (*((volatile uint32_t *)(x)))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#269: FILE: arch/arm/mach-bcmring/include/csp/reg.h:33:
+#define __REG16(x)      (*((volatile uint16_t *)(x)))

CHECK:SPACING: No space is necessary after a cast
#270: FILE: arch/arm/mach-bcmring/include/csp/reg.h:34:
+#define __REG8(x)       (*((volatile uint8_t *) (x)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#270: FILE: arch/arm/mach-bcmring/include/csp/reg.h:34:
+#define __REG8(x)       (*((volatile uint8_t *) (x)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#287: FILE: arch/arm/mach-bcmring/include/csp/reg.h:51:
+#define REG8_RSVD(start, end)   uint8_t rsvd_##start[(end - start) / sizeof(uint8_t)]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#287: FILE: arch/arm/mach-bcmring/include/csp/reg.h:51:
+#define REG8_RSVD(start, end)   uint8_t rsvd_##start[(end - start) / sizeof(uint8_t)]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#287: FILE: arch/arm/mach-bcmring/include/csp/reg.h:51:
+#define REG8_RSVD(start, end)   uint8_t rsvd_##start[(end - start) / sizeof(uint8_t)]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#288: FILE: arch/arm/mach-bcmring/include/csp/reg.h:52:
+#define REG16_RSVD(start, end)  uint16_t rsvd_##start[(end - start) / sizeof(uint16_t)]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#288: FILE: arch/arm/mach-bcmring/include/csp/reg.h:52:
+#define REG16_RSVD(start, end)  uint16_t rsvd_##start[(end - start) / sizeof(uint16_t)]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#288: FILE: arch/arm/mach-bcmring/include/csp/reg.h:52:
+#define REG16_RSVD(start, end)  uint16_t rsvd_##start[(end - start) / sizeof(uint16_t)]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#289: FILE: arch/arm/mach-bcmring/include/csp/reg.h:53:
+#define REG32_RSVD(start, end)  uint32_t rsvd_##start[(end - start) / sizeof(uint32_t)]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#289: FILE: arch/arm/mach-bcmring/include/csp/reg.h:53:
+#define REG32_RSVD(start, end)  uint32_t rsvd_##start[(end - start) / sizeof(uint32_t)]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#289: FILE: arch/arm/mach-bcmring/include/csp/reg.h:53:
+#define REG32_RSVD(start, end)  uint32_t rsvd_##start[(end - start) / sizeof(uint32_t)]

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#320: FILE: arch/arm/mach-bcmring/include/csp/reg.h:84:
+static inline void reg32_modify_and(volatile uint32_t *reg, uint32_t value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#320: FILE: arch/arm/mach-bcmring/include/csp/reg.h:84:
+static inline void reg32_modify_and(volatile uint32_t *reg, uint32_t value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: arch/arm/mach-bcmring/include/csp/reg.h:86:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: arch/arm/mach-bcmring/include/csp/reg.h:87:
+       *reg &= value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: arch/arm/mach-bcmring/include/csp/reg.h:88:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#327: FILE: arch/arm/mach-bcmring/include/csp/reg.h:91:
+static inline void reg32_modify_or(volatile uint32_t *reg, uint32_t value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#327: FILE: arch/arm/mach-bcmring/include/csp/reg.h:91:
+static inline void reg32_modify_or(volatile uint32_t *reg, uint32_t value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: arch/arm/mach-bcmring/include/csp/reg.h:93:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: arch/arm/mach-bcmring/include/csp/reg.h:94:
+       *reg |= value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: arch/arm/mach-bcmring/include/csp/reg.h:95:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#334: FILE: arch/arm/mach-bcmring/include/csp/reg.h:98:
+static inline void reg32_modify_mask(volatile uint32_t *reg, uint32_t mask,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#334: FILE: arch/arm/mach-bcmring/include/csp/reg.h:98:
+static inline void reg32_modify_mask(volatile uint32_t *reg, uint32_t mask,

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: arch/arm/mach-bcmring/include/csp/reg.h:99:
+                                    uint32_t value)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: arch/arm/mach-bcmring/include/csp/reg.h:99:
+static inline void reg32_modify_mask(volatile uint32_t *reg, uint32_t mask,
+                                    uint32_t value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: arch/arm/mach-bcmring/include/csp/reg.h:99:
+                                    uint32_t value)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: arch/arm/mach-bcmring/include/csp/reg.h:101:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: arch/arm/mach-bcmring/include/csp/reg.h:102:
+       *reg = (*reg & mask) | value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: arch/arm/mach-bcmring/include/csp/reg.h:103:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#342: FILE: arch/arm/mach-bcmring/include/csp/reg.h:106:
+static inline void reg32_write(volatile uint32_t *reg, uint32_t value)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#342: FILE: arch/arm/mach-bcmring/include/csp/reg.h:106:
+static inline void reg32_write(volatile uint32_t *reg, uint32_t value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: arch/arm/mach-bcmring/include/csp/reg.h:108:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: arch/arm/mach-bcmring/include/csp/reg.h:109:
+       *reg = value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/arm/mach-bcmring/include/csp/reg.h:110:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#356: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#357: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:2:
+/*****************************************************************************
+* Copyright 2004 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#372: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:17:
+/**
+*  @file    secHw.h

CHECK:CAMELCASE: Avoid CamelCase: <secHw_FUNC_t>
#381: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:26:
+typedef void (*secHw_FUNC_t) (void);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#383: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:28:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:29:
+       secHw_MODE_SECURE = 0x0,        /* Switches processor into secure mode */$

CHECK:CAMELCASE: Avoid CamelCase: <secHw_MODE_SECURE>
#384: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:29:
+       secHw_MODE_SECURE = 0x0,        /* Switches processor into secure mode */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:30:
+       secHw_MODE_NONSECURE = 0x1      /* Switches processor into non-secure mode */$

CHECK:CAMELCASE: Avoid CamelCase: <secHw_MODE_NONSECURE>
#385: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:30:
+       secHw_MODE_NONSECURE = 0x1      /* Switches processor into non-secure mode */

CHECK:CAMELCASE: Avoid CamelCase: <secHw_MODE>
#386: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:31:
+} secHw_MODE;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#390: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:35:
+/**
+*  @brief   Requesting to execute the function in secure mode

CHECK:CAMELCASE: Avoid CamelCase: <secHw_RunSecure>
#396: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:41:
+void secHw_RunSecure(secHw_FUNC_t      /* Function to run in secure mode */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'secHw_FUNC_t' should also have an identifier name
#396: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:41:
+void secHw_RunSecure(secHw_FUNC_t      /* Function to run in secure mode */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:42:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#401: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:46:
+/**
+*  @brief   Sets the  mode

CHECK:CAMELCASE: Avoid CamelCase: <secHw_SetMode>
#407: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:52:
+void secHw_SetMode(secHw_MODE  /* Processor mode */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:53:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#412: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:57:
+/**
+*  @brief   Get the current mode

WARNING:TYPO_SPELLING: 'retieves' may be misspelled - perhaps 'retrieves'?
#414: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:59:
+*  This function retieves the processor mode (secure/non-secure)
                  ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <secHw_GetMode>
#418: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:63:
+void secHw_GetMode(secHw_MODE *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'secHw_MODE *' should also have an identifier name
#418: FILE: arch/arm/mach-bcmring/include/csp/secHw.h:63:
+void secHw_GetMode(secHw_MODE *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#427: FILE: arch/arm/mach-bcmring/include/csp/stdint.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#428: FILE: arch/arm/mach-bcmring/include/csp/stdint.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#463: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#464: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:2:
+/*****************************************************************************
+* Copyright 2004 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#479: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:17:
+/**
+*  @file    tmrHw.h

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_ID_t>
#490: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:28:
+typedef uint32_t tmrHw_ID_t;   /* Timer ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#490: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:28:
+typedef uint32_t tmrHw_ID_t;   /* Timer ID */

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_COUNT_t>
#491: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:29:
+typedef uint32_t tmrHw_COUNT_t;        /* Timer count */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#491: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:29:
+typedef uint32_t tmrHw_COUNT_t;        /* Timer count */

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_INTERVAL_t>
#492: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:30:
+typedef uint32_t tmrHw_INTERVAL_t;     /* Timer interval */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#492: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:30:
+typedef uint32_t tmrHw_INTERVAL_t;     /* Timer interval */

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_RATE_t>
#493: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:31:
+typedef uint32_t tmrHw_RATE_t; /* Timer event (count/interrupt) rate */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#493: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:31:
+typedef uint32_t tmrHw_RATE_t; /* Timer event (count/interrupt) rate */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#495: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:33:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:34:
+       tmrHw_INTERRUPT_STATUS_SET,     /* Interrupted  */$

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_INTERRUPT_STATUS_SET>
#496: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:34:
+       tmrHw_INTERRUPT_STATUS_SET,     /* Interrupted  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:35:
+       tmrHw_INTERRUPT_STATUS_UNSET    /* No Interrupt */$

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_INTERRUPT_STATUS_UNSET>
#497: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:35:
+       tmrHw_INTERRUPT_STATUS_UNSET    /* No Interrupt */

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_INTERRUPT_STATUS_e>
#498: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:36:
+} tmrHw_INTERRUPT_STATUS_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#500: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:38:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:39:
+       tmrHw_CAPABILITY_CLOCK, /* Clock speed in HHz */$

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_CAPABILITY_CLOCK>
#501: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:39:
+       tmrHw_CAPABILITY_CLOCK, /* Clock speed in HHz */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:40:
+       tmrHw_CAPABILITY_RESOLUTION     /* Timer resolution in bits */$

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_CAPABILITY_RESOLUTION>
#502: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:40:
+       tmrHw_CAPABILITY_RESOLUTION     /* Timer resolution in bits */

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_CAPABILITY_e>
#503: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:41:
+} tmrHw_CAPABILITY_e;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#507: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:45:
+/**
+*  @brief   Get timer capability

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_getTimerCapability>
#515: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:53:
+uint32_t tmrHw_getTimerCapability(tmrHw_ID_t timerId,  /*  [ IN ] Timer Id */

CHECK:CAMELCASE: Avoid CamelCase: <timerId>
#515: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:53:
+uint32_t tmrHw_getTimerCapability(tmrHw_ID_t timerId,  /*  [ IN ] Timer Id */

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:54:
+                                 tmrHw_CAPABILITY_e capability /*  [ IN ] Timer capability */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:54:
+                                 tmrHw_CAPABILITY_e capability /*  [ IN ] Timer capability */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#521: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:59:
+/**
+*  @brief   Configures a periodic timer in terms of timer interrupt rate

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_setPeriodicTimerRate>
#531: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:69:
+tmrHw_RATE_t tmrHw_setPeriodicTimerRate(tmrHw_ID_t timerId,    /*  [ IN ] Timer Id */

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#532: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:70:
+                                       tmrHw_RATE_t rate       /*  [ IN ] Number of timer interrupt per second */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:70:
+                                       tmrHw_RATE_t rate       /*  [ IN ] Number of timer interrupt per second */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:70:
+                                       tmrHw_RATE_t rate       /*  [ IN ] Number of timer interrupt per second */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#537: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:75:
+/**
+*  @brief   Configures a periodic timer to generate timer interrupt after

WARNING:TYPO_SPELLING: 'milisecond' may be misspelled - perhaps 'millisecond'?
#541: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:79:
+*  after every time interval in milisecond
                                 ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_setPeriodicTimerInterval>
#548: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:86:
+tmrHw_INTERVAL_t tmrHw_setPeriodicTimerInterval(tmrHw_ID_t timerId,    /*  [ IN ] Timer Id */

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#549: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:87:
+                                               tmrHw_INTERVAL_t msec   /*  [ IN ] Interval in mili-second */

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:87:
+                                               tmrHw_INTERVAL_t msec   /*  [ IN ] Interval in mili-second */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:87:
+                                               tmrHw_INTERVAL_t msec   /*  [ IN ] Interval in mili-second */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#554: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:92:
+/**
+*  @brief   Configures a periodic timer to generate timer interrupt just once

WARNING:TYPO_SPELLING: 'milisecond' may be misspelled - perhaps 'millisecond'?
#558: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:96:
+*  certain time interval in milisecond
                             ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_setOneshotTimerInterval>
#565: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:103:
+tmrHw_INTERVAL_t tmrHw_setOneshotTimerInterval(tmrHw_ID_t timerId,     /*  [ IN ] Timer Id */

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#566: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:104:
+                                              tmrHw_INTERVAL_t msec    /*  [ IN ] Interval in mili-second */

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:104:
+                                              tmrHw_INTERVAL_t msec    /*  [ IN ] Interval in mili-second */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:104:
+                                              tmrHw_INTERVAL_t msec    /*  [ IN ] Interval in mili-second */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#571: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:109:
+/**
+*  @brief   Configures a timer to run as a free running timer

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_setFreeRunningTimer>
#579: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:117:
+tmrHw_RATE_t tmrHw_setFreeRunningTimer(tmrHw_ID_t timerId,     /*  [ IN ] Timer Id */

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:118:
+                                      uint32_t divider /*  [ IN ] Dividing the clock frequency */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:118:
+                                      uint32_t divider /*  [ IN ] Dividing the clock frequency */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#581: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:119:
+) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#585: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:123:
+/**
+*  @brief   Starts a timer

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_startTimer>
#593: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:131:
+int tmrHw_startTimer(tmrHw_ID_t timerId        /*  [ IN ] Timer id */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#594: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:132:
+) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#598: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:136:
+/**
+*  @brief   Stops a timer

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_stopTimer>
#606: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:144:
+int tmrHw_stopTimer(tmrHw_ID_t timerId /*  [ IN ] Timer id */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#611: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:149:
+/**
+*  @brief   Gets current timer count

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_GetCurrentCount>
#619: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:157:
+tmrHw_COUNT_t tmrHw_GetCurrentCount(tmrHw_ID_t timerId /*  [ IN ] Timer id */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#620: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:158:
+) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#624: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:162:
+/**
+*  @brief   Gets timer count rate

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_getCountRate>
#632: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:170:
+tmrHw_RATE_t tmrHw_getCountRate(tmrHw_ID_t timerId     /*  [ IN ] Timer id */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#633: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:171:
+) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#637: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:175:
+/**
+*  @brief   Enables timer interrupt

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_enableInterrupt>
#645: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:183:
+void tmrHw_enableInterrupt(tmrHw_ID_t timerId  /*  [ IN ] Timer id */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#650: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:188:
+/**
+*  @brief   Disables timer interrupt

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_disableInterrupt>
#657: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:195:
+void tmrHw_disableInterrupt(tmrHw_ID_t timerId /*  [ IN ] Timer id */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#662: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:200:
+/**
+*  @brief   Clears the interrupt

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_clearInterrupt>
#672: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:210:
+void tmrHw_clearInterrupt(tmrHw_ID_t timerId   /*  [ IN ] Timer id */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#677: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:215:
+/**
+*  @brief   Gets the interrupt status

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_getInterruptStatus>
#684: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:222:
+tmrHw_INTERRUPT_STATUS_e tmrHw_getInterruptStatus(tmrHw_ID_t timerId   /*  [ IN ] Timer id */

WARNING:TYPO_SPELLING: 'Indentifies' may be misspelled - perhaps 'Identifies'?
#689: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:227:
+*  @brief   Indentifies a timer causing interrupt
             ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#689: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:227:
+/**
+*  @brief   Indentifies a timer causing interrupt

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_getInterruptSource>
#699: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:237:
+tmrHw_ID_t tmrHw_getInterruptSource(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#703: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:241:
+/**
+*  @brief   Displays specific timer registers

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_printDebugInfo>
#710: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:248:
+void tmrHw_printDebugInfo(tmrHw_ID_t timerId,  /*  [ IN ] Timer id */

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:249:
+                         int (*fpPrint) (const char *, ...)    /*  [ IN ] Print callback function */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:249:
+                         int (*fpPrint) (const char *, ...)    /*  [ IN ] Print callback function */$

WARNING:SPACING: Unnecessary space before function pointer arguments
#711: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:249:
+                         int (*fpPrint) (const char *, ...)    /*  [ IN ] Print callback function */

CHECK:CAMELCASE: Avoid CamelCase: <fpPrint>
#711: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:249:
+                         int (*fpPrint) (const char *, ...)    /*  [ IN ] Print callback function */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#716: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:254:
+/**
+*  @brief   Use a timer to perform a busy wait delay for a number of usecs.

CHECK:CAMELCASE: Avoid CamelCase: <tmrHw_udelay>
#721: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:259:
+void tmrHw_udelay(tmrHw_ID_t timerId,  /*  [ IN ] Timer id */

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:260:
+                 unsigned long usecs   /*  [ IN ] usec to delay */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:260:
+                 unsigned long usecs   /*  [ IN ] usec to delay */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#723: FILE: arch/arm/mach-bcmring/include/csp/tmrHw.h:261:
+) __attribute__ ((section(".aramtext")));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#732: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#733: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#748: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:17:
+/**
+*  @file    uart.h

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_STATE_INACTIVE>
#769: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:38:
+#define uartHw_STATE_INACTIVE       0

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_STATE_ACTIVE>
#770: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:39:
+#define uartHw_STATE_ACTIVE         1

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#777: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:46:
+/**
+*  @brief   Initializes specified UART at a desired baud rate

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:56:
+       long uartHw_Init(unsigned uartNum,      /* [IN]  uart number (0 .. max) */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#787: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:56:
+       long uartHw_Init(unsigned uartNum,      /* [IN]  uart number (0 .. max) */

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_Init>
#787: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:56:
+       long uartHw_Init(unsigned uartNum,      /* [IN]  uart number (0 .. max) */

CHECK:CAMELCASE: Avoid CamelCase: <uartNum>
#787: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:56:
+       long uartHw_Init(unsigned uartNum,      /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:57:
+                        unsigned long baudRate /* [IN]  baud rate (9600, 115200, ...) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:57:
+                        unsigned long baudRate /* [IN]  baud rate (9600, 115200, ...) */$

CHECK:CAMELCASE: Avoid CamelCase: <baudRate>
#788: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:57:
+                        unsigned long baudRate /* [IN]  baud rate (9600, 115200, ...) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:58:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:58:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#793: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:62:
+/**
+*  @brief   Enable / Disable UART loopback mode

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#797: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:66:
+       static inline void uartHw_LoopbackDisable(unsigned uartNum      /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:66:
+       static inline void uartHw_LoopbackDisable(unsigned uartNum      /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_LoopbackDisable>
#797: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:66:
+       static inline void uartHw_LoopbackDisable(unsigned uartNum      /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:67:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:67:
+           );$

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#800: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:69:
+       static inline void uartHw_LoopbackEnable(unsigned uartNum       /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:69:
+       static inline void uartHw_LoopbackEnable(unsigned uartNum       /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_LoopbackEnable>
#800: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:69:
+       static inline void uartHw_LoopbackEnable(unsigned uartNum       /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#801: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:70:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:70:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#805: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:74:
+/**
+*  @brief   UART control signal operations (RTS/CTS, DTR/DSR, RI, DCD)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:88:
+       static inline void uartHw_CtsFlowCtrlDisable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#819: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:88:
+       static inline void uartHw_CtsFlowCtrlDisable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_CtsFlowCtrlDisable>
#819: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:88:
+       static inline void uartHw_CtsFlowCtrlDisable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:89:
+       static inline void uartHw_CtsFlowCtrlEnable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#820: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:89:
+       static inline void uartHw_CtsFlowCtrlEnable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_CtsFlowCtrlEnable>
#820: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:89:
+       static inline void uartHw_CtsFlowCtrlEnable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:90:
+       static inline int uartHw_CtsStateGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#821: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:90:
+       static inline int uartHw_CtsStateGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_CtsStateGet>
#821: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:90:
+       static inline int uartHw_CtsStateGet(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:92:
+       static inline int uartHw_DcdStateGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#823: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:92:
+       static inline int uartHw_DcdStateGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DcdStateGet>
#823: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:92:
+       static inline int uartHw_DcdStateGet(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:94:
+       static inline int uartHw_DsrStateGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#825: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:94:
+       static inline int uartHw_DsrStateGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DsrStateGet>
#825: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:94:
+       static inline int uartHw_DsrStateGet(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:96:
+       static inline int uartHw_DtrStateGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#827: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:96:
+       static inline int uartHw_DtrStateGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DtrStateGet>
#827: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:96:
+       static inline int uartHw_DtrStateGet(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:97:
+       static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#828: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:97:
+       static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#828: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:97:
+       static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DtrStateSet>
#828: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:97:
+       static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:99:
+       static inline int uartHw_RiStateGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#830: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:99:
+       static inline int uartHw_RiStateGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RiStateGet>
#830: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:99:
+       static inline int uartHw_RiStateGet(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:101:
+       static inline void uartHw_RtsFlowCtrlDisable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#832: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:101:
+       static inline void uartHw_RtsFlowCtrlDisable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsFlowCtrlDisable>
#832: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:101:
+       static inline void uartHw_RtsFlowCtrlDisable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:102:
+       static inline void uartHw_RtsFlowCtrlEnable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#833: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:102:
+       static inline void uartHw_RtsFlowCtrlEnable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsFlowCtrlEnable>
#833: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:102:
+       static inline void uartHw_RtsFlowCtrlEnable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:103:
+       static inline int uartHw_RtsStateGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#834: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:103:
+       static inline int uartHw_RtsStateGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsStateGet>
#834: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:103:
+       static inline int uartHw_RtsStateGet(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:104:
+       static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#835: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:104:
+       static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#835: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:104:
+       static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsStateSet>
#835: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:104:
+       static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#839: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:108:
+/**
+*  @brief   UART Rx FIFO DMA operations

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:117:
+       static inline void uartHw_RxFifoDmaDisable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#848: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:117:
+       static inline void uartHw_RxFifoDmaDisable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoDmaDisable>
#848: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:117:
+       static inline void uartHw_RxFifoDmaDisable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:118:
+       static inline void uartHw_RxFifoDmaEnable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#849: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:118:
+       static inline void uartHw_RxFifoDmaEnable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoDmaEnable>
#849: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:118:
+       static inline void uartHw_RxFifoDmaEnable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:119:
+       static inline uint32_t uartHw_RxFifoDmaAddrGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#850: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:119:
+       static inline uint32_t uartHw_RxFifoDmaAddrGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoDmaAddrGet>
#850: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:119:
+       static inline uint32_t uartHw_RxFifoDmaAddrGet(unsigned uartNum);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#854: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:123:
+/**
+*  @brief   Indicates if specified UART has no Rx data available

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:131:
+       int uartHw_RxFifoEmpty(unsigned uartNum /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoEmpty>
#862: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:131:
+       int uartHw_RxFifoEmpty(unsigned uartNum /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#863: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:132:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:132:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#867: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:136:
+/**
+*  @brief   Indicates if specified UART Rx FIFO is full

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:144:
+       static inline int uartHw_RxFifoFull(unsigned uartNum    /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoFull>
#875: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:144:
+       static inline int uartHw_RxFifoFull(unsigned uartNum    /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#876: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:145:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:145:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#880: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:149:
+/**
+*  @brief   Flushes (discards) all available Rx data from specified UART

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:157:
+       int uartHw_RxFifoFlush(unsigned uartNum /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoFlush>
#888: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:157:
+       int uartHw_RxFifoFlush(unsigned uartNum /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:158:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:158:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#893: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:162:
+/**
+*  @brief   Read Rx data from specified UART

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:172:
+       static inline int uartHw_RxFifoGet(unsigned uartNum     /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoGet>
#903: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:172:
+       static inline int uartHw_RxFifoGet(unsigned uartNum     /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#904: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:173:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:173:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#908: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:177:
+/**
+*  @brief   Test if byte available to read from Fifo

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:187:
+       static inline int uartHw_RxFifoReady(unsigned uartNum   /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoReady>
#918: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:187:
+       static inline int uartHw_RxFifoReady(unsigned uartNum   /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:188:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:188:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#923: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:192:
+/**
+*  @brief   Sets UART Rx FIFO threshold level. Used for flow control, DMA, etc.

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#931: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:200:
+       static inline void uartHw_RxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:200:
+       static inline void uartHw_RxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#931: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:200:
+       static inline void uartHw_RxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoThresholdSet>
#931: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:200:
+       static inline void uartHw_RxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#932: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:201:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */

ERROR:CODE_INDENT: code indent should use tabs where possible
#932: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:201:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:201:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */$

CHECK:CAMELCASE: Avoid CamelCase: <byteCnt>
#932: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:201:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:202:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:202:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#937: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:206:
+/**
+*  @brief   UART Tx FIFO DMA operations

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#946: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:215:
+       static inline void uartHw_TxFifoDmaDisable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#946: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:215:
+       static inline void uartHw_TxFifoDmaDisable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoDmaDisable>
#946: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:215:
+       static inline void uartHw_TxFifoDmaDisable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:216:
+       static inline void uartHw_TxFifoDmaEnable(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#947: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:216:
+       static inline void uartHw_TxFifoDmaEnable(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoDmaEnable>
#947: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:216:
+       static inline void uartHw_TxFifoDmaEnable(unsigned uartNum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:217:
+       static inline uint32_t uartHw_TxFifoDmaAddrGet(unsigned uartNum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#948: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:217:
+       static inline uint32_t uartHw_TxFifoDmaAddrGet(unsigned uartNum);

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoDmaAddrGet>
#948: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:217:
+       static inline uint32_t uartHw_TxFifoDmaAddrGet(unsigned uartNum);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#952: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:221:
+/**
+*  @brief   Indicates if specified UART Tx FIFO is empty

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:229:
+       static inline int uartHw_TxFifoEmpty(unsigned uartNum   /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoEmpty>
#960: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:229:
+       static inline int uartHw_TxFifoEmpty(unsigned uartNum   /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#961: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:230:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:230:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#965: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:234:
+/**
+*  @brief   Indicates if specified UART has no Tx space available

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:242:
+       int uartHw_TxFifoFull(unsigned uartNum  /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoFull>
#973: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:242:
+       int uartHw_TxFifoFull(unsigned uartNum  /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#974: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:243:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:243:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#978: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:247:
+/**
+*  @brief   Sets UART Tx FIFO threshold level. Used for flow control, DMA, etc.

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#986: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:255:
+       static inline void uartHw_TxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:255:
+       static inline void uartHw_TxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#986: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:255:
+       static inline void uartHw_TxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoThresholdSet>
#986: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:255:
+       static inline void uartHw_TxFifoThresholdSet(unsigned uartNum,  /* [IN]  uart number (0 .. max) */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#987: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:256:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */

ERROR:CODE_INDENT: code indent should use tabs where possible
#987: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:256:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:256:
+                                                    unsigned byteCnt   /* [IN]  threshold level in bytes */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#988: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:257:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:257:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#992: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:261:
+/**
+*  @brief   Write Tx data to specified UART

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:271:
+       static inline int uartHw_TxFifoPut(unsigned uartNum,    /* [IN]  uart number (0 .. max) */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1002: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:271:
+       static inline int uartHw_TxFifoPut(unsigned uartNum,    /* [IN]  uart number (0 .. max) */

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoPut>
#1002: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:271:
+       static inline int uartHw_TxFifoPut(unsigned uartNum,    /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:272:
+                                          unsigned value       /* [IN]  output value */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:272:
+                                          unsigned value       /* [IN]  output value */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1004: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:273:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:273:
+           );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1008: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:277:
+/**
+*  @brief   Wait util specified UART has finished Tx

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:287:
+       static inline int uartHw_TxWaitIdle(unsigned uartNum    /* [IN]  uart number (0 .. max) */$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxWaitIdle>
#1018: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:287:
+       static inline int uartHw_TxWaitIdle(unsigned uartNum    /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:288:
+           );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: arch/arm/mach-bcmring/include/csp/uartHw.h:288:
+           );$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 192 warnings, 95 checks, 902 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
