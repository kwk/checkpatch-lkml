WARNING:TYPO_SPELLING: 'comming' may be misspelled - perhaps 'coming'?
#34: 
spec is in works and comming very soon. I will send a note to the list
                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
when new updated spec is available. For the most part existing spec should be 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: arch/x86_64/kernel/io_apic.c:2058:
+	set_irq_chip_and_handler_name(irq, &dmar_msi_type, handle_edge_irq,
+		"edge");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#191: FILE: drivers/pci/Kconfig:64:
+config IOVA_GUARD_PAGE
+	bool "Enables gaurd page when allocating IO Virtual Address for IOMMU"
+	depends on DMAR
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'gaurd' may be misspelled - perhaps 'guard'?
#192: FILE: drivers/pci/Kconfig:65:
+	bool "Enables gaurd page when allocating IO Virtual Address for IOMMU"
 	              ^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#195: FILE: drivers/pci/Kconfig:68:
+config IOVA_NEXT_CONTIG
+	bool "Keeps IOVA allocations consequent between allocations"
+	depends on DMAR && EXPERIMENTAL

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#217: FILE: drivers/pci/intel-iommu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#230: FILE: drivers/pci/intel-iommu.c:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#250: FILE: drivers/pci/intel-iommu.c:34:
+#include <asm/cacheflush.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#262: FILE: drivers/pci/intel-iommu.c:46:
+#define DMAR_OPERATION_TIMEOUT (HZ*60) /* 1m */
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#265: FILE: drivers/pci/intel-iommu.c:49:
+static char *fault_reason_strings[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: drivers/pci/intel-iommu.c:66:
+#define MAX_FAULT_REASON_IDX ^I(12)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: drivers/pci/intel-iommu.c:73:
+^Iunsigned long ^I*domain_ids; /* bitmap of domains */$

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#292: FILE: drivers/pci/intel-iommu.c:76:
+	u32		gcmd; /* Holds TE, EAFL. Don't need SRTP, SFL, WBF */
 	   		               ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#320: FILE: drivers/pci/intel-iommu.c:104:
+			printk(KERN_INFO"Intel-IOMMU: disabled\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#320: FILE: drivers/pci/intel-iommu.c:104:
+			printk(KERN_INFO"Intel-IOMMU: disabled\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#328: FILE: drivers/pci/intel-iommu.c:112:
+__setup("intel_iommu=", intel_iommu_setup);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: drivers/pci/intel-iommu.c:140:
+static struct context_entry * device_to_context_entry(struct iommu *iommu,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: drivers/pci/intel-iommu.c:141:
+static struct context_entry * device_to_context_entry(struct iommu *iommu,
+		u8 bus, u8 devfn)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#454: FILE: drivers/pci/intel-iommu.c:238:
+#define agaw_to_width(val) (30 + val * LEVEL_STRIDE)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#455: FILE: drivers/pci/intel-iommu.c:239:
+#define width_to_agaw(w)  ((w - 30)/LEVEL_STRIDE)
                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#455: FILE: drivers/pci/intel-iommu.c:239:
+#define width_to_agaw(w)  ((w - 30)/LEVEL_STRIDE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#456: FILE: drivers/pci/intel-iommu.c:240:
+#define level_to_offset_bits(l) (12 + (l - 1) * LEVEL_STRIDE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#457: FILE: drivers/pci/intel-iommu.c:241:
+#define address_level_offset(addr, level) \
+	((addr >> level_to_offset_bits(level)) & LEVEL_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#461: FILE: drivers/pci/intel-iommu.c:245:
+#define align_to_level(addr, l) ((addr + level_size(l) - 1) & level_mask(l))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#461: FILE: drivers/pci/intel-iommu.c:245:
+#define align_to_level(addr, l) ((addr + level_size(l) - 1) & level_mask(l))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#462: FILE: drivers/pci/intel-iommu.c:246:
+static struct dma_pte * addr_to_dma_pte(struct domain *domain, u64 addr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: drivers/pci/intel-iommu.c:254:
+	BUG_ON(!domain->pgd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: drivers/pci/intel-iommu.c:295:
+static struct dma_pte *dma_addr_level_pte(struct domain *domain, u64 addr,
+		int level)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#586: FILE: drivers/pci/intel-iommu.c:370:
+				free_pgtable_page(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: drivers/pci/intel-iommu.c:392:
+	BUG_ON(iommu->root_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: drivers/pci/intel-iommu.c:463:
+static int __iommu_flush_context(struct iommu *iommu,
+	u16 did, u16 source_id, u8 function_mask, u64 type,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#695: FILE: drivers/pci/intel-iommu.c:479:
+			return 1;
+		else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#699: FILE: drivers/pci/intel-iommu.c:483:
+	switch (type)
+	{

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#705: FILE: drivers/pci/intel-iommu.c:489:
+		val = DMA_CCMD_DOMAIN_INVL|DMA_CCMD_DID(did);
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#708: FILE: drivers/pci/intel-iommu.c:492:
+		val = DMA_CCMD_DEVICE_INVL|DMA_CCMD_DID(did)
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#709: FILE: drivers/pci/intel-iommu.c:493:
+			|DMA_CCMD_SID(source_id)|DMA_CCMD_FM(function_mask);
 			^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: drivers/pci/intel-iommu.c:493:
+			|DMA_CCMD_SID(source_id)|DMA_CCMD_FM(function_mask);
 			                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#712: FILE: drivers/pci/intel-iommu.c:496:
+		BUG();

WARNING:TYPO_SPELLING: 'implictly' may be misspelled - perhaps 'implicitly'?
#731: FILE: drivers/pci/intel-iommu.c:515:
+	/* flush context entry will implictly flush write buffer */
 	                            ^^^^^^^^^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#735: FILE: drivers/pci/intel-iommu.c:519:
+static int inline iommu_flush_context_global(struct iommu *iommu,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: drivers/pci/intel-iommu.c:520:
+static int inline iommu_flush_context_global(struct iommu *iommu,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#742: FILE: drivers/pci/intel-iommu.c:526:
+static int inline iommu_flush_context_domain(struct iommu *iommu, u16 did,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: drivers/pci/intel-iommu.c:527:
+static int inline iommu_flush_context_domain(struct iommu *iommu, u16 did,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#749: FILE: drivers/pci/intel-iommu.c:533:
+static int inline iommu_flush_context_device(struct iommu *iommu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: drivers/pci/intel-iommu.c:534:
+static int inline iommu_flush_context_device(struct iommu *iommu,
+	u16 did, u16 source_id, u8 function_mask, int non_present_entry_flush)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: drivers/pci/intel-iommu.c:542:
+static int __iommu_flush_iotlb(struct iommu *iommu, u16 did,
+	u64 addr, unsigned int size_order, u64 type,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#775: FILE: drivers/pci/intel-iommu.c:559:
+			return 1;
+		else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#782: FILE: drivers/pci/intel-iommu.c:566:
+		val = DMA_TLB_GLOBAL_FLUSH|DMA_TLB_IVT;
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#785: FILE: drivers/pci/intel-iommu.c:569:
+		val = DMA_TLB_DSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#785: FILE: drivers/pci/intel-iommu.c:569:
+		val = DMA_TLB_DSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#788: FILE: drivers/pci/intel-iommu.c:572:
+		val = DMA_TLB_PSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#788: FILE: drivers/pci/intel-iommu.c:572:
+		val = DMA_TLB_PSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#793: FILE: drivers/pci/intel-iommu.c:577:
+		BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#796: FILE: drivers/pci/intel-iommu.c:580:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#827: FILE: drivers/pci/intel-iommu.c:611:
+		printk(KERN_ERR"IOMMU: flush IOTLB failed\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#827: FILE: drivers/pci/intel-iommu.c:611:
+		printk(KERN_ERR"IOMMU: flush IOTLB failed\n");

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#829: FILE: drivers/pci/intel-iommu.c:613:
+		pr_debug("IOMMU: tlb flush request %Lx, actual %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: drivers/pci/intel-iommu.c:614:
+		pr_debug("IOMMU: tlb flush request %Lx, actual %Lx\n",
+			DMA_TLB_IIRG(type), DMA_TLB_IAIG(val));

WARNING:TYPO_SPELLING: 'implictly' may be misspelled - perhaps 'implicitly'?
#831: FILE: drivers/pci/intel-iommu.c:615:
+	/* flush context entry will implictly flush write buffer */
 	                            ^^^^^^^^^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#835: FILE: drivers/pci/intel-iommu.c:619:
+static int inline iommu_flush_iotlb_global(struct iommu *iommu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/pci/intel-iommu.c:620:
+static int inline iommu_flush_iotlb_global(struct iommu *iommu,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#842: FILE: drivers/pci/intel-iommu.c:626:
+static int inline iommu_flush_iotlb_dsi(struct iommu *iommu, u16 did,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: drivers/pci/intel-iommu.c:627:
+static int inline iommu_flush_iotlb_dsi(struct iommu *iommu, u16 did,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#849: FILE: drivers/pci/intel-iommu.c:633:
+static int inline get_alignment(u64 base, unsigned int size)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#863: FILE: drivers/pci/intel-iommu.c:647:
+static int inline iommu_flush_iotlb_psi(struct iommu *iommu, u16 did,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: drivers/pci/intel-iommu.c:648:
+static int inline iommu_flush_iotlb_psi(struct iommu *iommu, u16 did,
+	u64 addr, unsigned int pages, int non_present_entry_flush)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#868: FILE: drivers/pci/intel-iommu.c:652:
+	BUG_ON(addr & (~PAGE_MASK_4K));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#869: FILE: drivers/pci/intel-iommu.c:653:
+	BUG_ON(pages == 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#900: FILE: drivers/pci/intel-iommu.c:684:
+	dmar_writel(iommu->reg, DMAR_GCMD_REG, iommu->gcmd|DMA_GCMD_TE);
 	                                                  ^

ERROR:SPACING: space prohibited after that '~' (ctx:WxW)
#924: FILE: drivers/pci/intel-iommu.c:708:
+	iommu->gcmd &= ~ DMA_GCMD_TE;
 	               ^

ERROR:SPACING: space required before the open parenthesis '('
#929: FILE: drivers/pci/intel-iommu.c:713:
+	while(1) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: drivers/pci/intel-iommu.c:727:
+static int iommu_page_fault_do_one(struct iommu *iommu, int type,
+		u8 fault_reason, u16 source_id, u64 addr)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#949: FILE: drivers/pci/intel-iommu.c:733:
+	printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#951: FILE: drivers/pci/intel-iommu.c:735:
+		"DMAR:[%s] Request device [%02x:%02x.%d] "
+		"fault addr %llx \n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#951: FILE: drivers/pci/intel-iommu.c:735:
+		"fault addr %llx \n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: drivers/pci/intel-iommu.c:790:
+		iommu_page_fault_do_one(iommu, type, fault_reason,
+				source_id, guest_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1079: FILE: drivers/pci/intel-iommu.c:863:
+		printk(KERN_ERR "IOMMU: no free vectors\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1098: FILE: drivers/pci/intel-iommu.c:882:
+		printk(KERN_ERR "IOMMU: can't request irq\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1114: FILE: drivers/pci/intel-iommu.c:898:
+	if (!iommu->domain_ids) {
+		pr_debug("Allocating domain id array failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1119: FILE: drivers/pci/intel-iommu.c:903:
+	if (!iommu->domains) {
+		pr_debug("Allocating domain array failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1145: FILE: drivers/pci/intel-iommu.c:929:
+		printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: drivers/pci/intel-iommu.c:937:
+	map_size = max_t(int, ecap_max_iotlb_offset(iommu->ecap),
+		cap_max_fault_reg_offset(iommu->cap));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1159: FILE: drivers/pci/intel-iommu.c:943:
+			printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: drivers/pci/intel-iommu.c:950:
+	pr_debug("IOMMU %llx: ver %d:%d cap %llx ecap %llx\n", drhd->address,
+		VER_MAJOR(ver), VER_MINOR(ver),

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iommu' - possible side-effects?
#1184: FILE: drivers/pci/intel-iommu.c:968:
+#define iommu_for_each_domain_id(iommu, i) \
+for (i = find_first_bit(iommu->domain_ids, cap_ndoms(iommu->cap)); \
+	i < cap_ndoms(iommu->cap); \
+	i = find_next_bit(iommu->domain_ids, cap_ndoms(iommu->cap), i+1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iommu' may be better as '(iommu)' to avoid precedence issues
#1184: FILE: drivers/pci/intel-iommu.c:968:
+#define iommu_for_each_domain_id(iommu, i) \
+for (i = find_first_bit(iommu->domain_ids, cap_ndoms(iommu->cap)); \
+	i < cap_ndoms(iommu->cap); \
+	i = find_next_bit(iommu->domain_ids, cap_ndoms(iommu->cap), i+1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1184: FILE: drivers/pci/intel-iommu.c:968:
+#define iommu_for_each_domain_id(iommu, i) \
+for (i = find_first_bit(iommu->domain_ids, cap_ndoms(iommu->cap)); \
+	i < cap_ndoms(iommu->cap); \
+	i = find_next_bit(iommu->domain_ids, cap_ndoms(iommu->cap), i+1))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1187: FILE: drivers/pci/intel-iommu.c:971:
+	i = find_next_bit(iommu->domain_ids, cap_ndoms(iommu->cap), i+1))
 	                                                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1224: FILE: drivers/pci/intel-iommu.c:1008:
+static struct domain * iommu_alloc_domain(struct iommu *iommu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1242: FILE: drivers/pci/intel-iommu.c:1026:
+		printk(KERN_ERR "IOMMU: no free domain ids\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: drivers/pci/intel-iommu.c:1054:
+		pr_debug("Start %p, size %lx\n",
+			(void *)head->addr, head->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: drivers/pci/intel-iommu.c:1074:
+	iova = reserve_iova(&fake, IOAPIC_RANGE_START,
+		IOAPIC_RANGE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1292: FILE: drivers/pci/intel-iommu.c:1076:
+		printk(KERN_ERR "Reserve IOAPIC range failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1308: FILE: drivers/pci/intel-iommu.c:1092:
+				printk(KERN_ERR "Reserve iova failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1326: FILE: drivers/pci/intel-iommu.c:1110:
+			printk(KERN_ERR "Reserve iova range %lx@%llx failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1327: FILE: drivers/pci/intel-iommu.c:1111:
+			printk(KERN_ERR "Reserve iova range %lx@%llx failed\n",
+				tmp->size, tmp->addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1409: FILE: drivers/pci/intel-iommu.c:1193:
+	BUG_ON(!domain->pgd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1429: FILE: drivers/pci/intel-iommu.c:1213:
+	if (iommu_flush_context_device(iommu, domain->id,
+			(((u16)bus) << 8) | devfn, DMA_CCMD_MASK_NOBIT, 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1442: FILE: drivers/pci/intel-iommu.c:1226:
+	ret = domain_context_mapping_one(domain, pdev->bus->number,
+		pdev->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1454: FILE: drivers/pci/intel-iommu.c:1238:
+		ret = domain_context_mapping_one(domain, parent->bus->number,
+			parent->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: drivers/pci/intel-iommu.c:1267:
+		ret = device_context_mapped(domain->iommu, parent->bus->number,
+			parent->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: drivers/pci/intel-iommu.c:1282:
+domain_page_mapping(struct domain *domain, dma_addr_t iova,
+			u64 hpa, size_t size, int prot)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1504: FILE: drivers/pci/intel-iommu.c:1288:
+	if ((prot & (DMA_PTE_READ|DMA_PTE_WRITE)) == 0)
 	                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1515: FILE: drivers/pci/intel-iommu.c:1299:
+		BUG_ON(dma_pte_addr(*pte));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1534: FILE: drivers/pci/intel-iommu.c:1318:
+};
+static DEFINE_SPINLOCK(device_domain_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1552: FILE: drivers/pci/intel-iommu.c:1336:
+		info = list_entry(domain->devices.next,
+			struct device_domain_info, link);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1625: FILE: drivers/pci/intel-iommu.c:1409:
+		printk(KERN_ERR "IOMMU: can't find DMAR for device %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1626: FILE: drivers/pci/intel-iommu.c:1410:
+		printk(KERN_ERR "IOMMU: can't find DMAR for device %s\n",
+			pci_name(pdev));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1684: FILE: drivers/pci/intel-iommu.c:1468:
+	if ((found = find_domain(pdev)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1710: FILE: drivers/pci/intel-iommu.c:1494:
+	printk(KERN_INFO

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1711: FILE: drivers/pci/intel-iommu.c:1495:
+		"IOMMU: Setting identity map for device %s [0x%Lx - 0x%Lx]\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1723: FILE: drivers/pci/intel-iommu.c:1507:
+		printk(KERN_ERR "IOMMU: reserve iova failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: drivers/pci/intel-iommu.c:1513:
+	pr_debug("Mapping reserved region %lx@%llx for %s\n",
+		size, base, pci_name(pdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1737: FILE: drivers/pci/intel-iommu.c:1521:
+	ret = domain_page_mapping(domain, base, base, size,
+		DMA_PTE_READ|DMA_PTE_WRITE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1737: FILE: drivers/pci/intel-iommu.c:1521:
+		DMA_PTE_READ|DMA_PTE_WRITE);
 		            ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1749: FILE: drivers/pci/intel-iommu.c:1533:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1752: FILE: drivers/pci/intel-iommu.c:1536:
+static inline int iommu_prepare_rmrr_dev(struct dmar_rmrr_unit *rmrr,
+	struct pci_dev *pdev)

WARNING:TYPO_SPELLING: 'amoung' may be misspelled - perhaps 'among'?
#1782: FILE: drivers/pci/intel-iommu.c:1566:
+		 * amoung all IOMMU's. Need to Split it later.
 		   ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1786: FILE: drivers/pci/intel-iommu.c:1570:
+			printk(KERN_ERR "IOMMU: allocate root entry failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1808: FILE: drivers/pci/intel-iommu.c:1592:
+			printk(KERN_ERR "IOMMU: mapping reserved region failed\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1809: FILE: drivers/pci/intel-iommu.c:1593:
+	end_for_each_rmrr_device(rmrr, pdev)
[...]
+	for_each_drhd_unit(drhd) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1820: FILE: drivers/pci/intel-iommu.c:1604:
+		sprintf (iommu->name, "dmar%d", unit++);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1856: FILE: drivers/pci/intel-iommu.c:1640:
+	}
+	else if (max_vaddr <= DMA_31BIT_MASK) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1860: FILE: drivers/pci/intel-iommu.c:1644:
+	}
+	else if (max_vaddr <= DMA_32BIT_MASK) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1866: FILE: drivers/pci/intel-iommu.c:1650:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1871: FILE: drivers/pci/intel-iommu.c:1655:
+static dma_addr_t __intel_map_single(struct device *dev, void *addr,
+	size_t size, int dir, u64 *flush_addr, unsigned int *flush_size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1879: FILE: drivers/pci/intel-iommu.c:1663:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1885: FILE: drivers/pci/intel-iommu.c:1669:
+		domain = set_domain_for_dev(pdev,
+			DEFAULT_DOMAIN_ADDRESS_WIDTH);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1887: FILE: drivers/pci/intel-iommu.c:1671:
+		printk(KERN_ERR"Allocating domain for %s failed", pci_name(pdev));

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1887: FILE: drivers/pci/intel-iommu.c:1671:
+		printk(KERN_ERR"Allocating domain for %s failed", pci_name(pdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1897: FILE: drivers/pci/intel-iommu.c:1681:
+	if ((domain->flags & DOMAIN_FLAG_MULTIPLE_DEVICES) &&
+			pdev->dma_mask > DMA_32BIT_MASK)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1899: FILE: drivers/pci/intel-iommu.c:1683:
+		iova = alloc_iova(domain, addr, size,
+				DMA_32BIT_MASK + 1, pdev->dma_mask);

CHECK:BRACES: Unbalanced braces around else statement
#1900: FILE: drivers/pci/intel-iommu.c:1684:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1903: FILE: drivers/pci/intel-iommu.c:1687:
+		iova = alloc_iova(domain, addr, size,
+				IOVA_START_ADDR, pdev->dma_mask);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1905: FILE: drivers/pci/intel-iommu.c:1689:
+^I^Iu64  ^Ilast_addr;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1912: FILE: drivers/pci/intel-iommu.c:1696:
+		last_addr = get_last_addr_max(domain->max_addr_used,
+						domain->prev_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1914: FILE: drivers/pci/intel-iommu.c:1698:
+		iova = alloc_iova(domain, addr, size, last_addr,
+					pdev->dma_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1922: FILE: drivers/pci/intel-iommu.c:1706:
+			iova = alloc_iova(domain, addr, size,
+				IOVA_START_ADDR, pdev->dma_mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1928: FILE: drivers/pci/intel-iommu.c:1712:
+		printk(KERN_ERR"Allocating iova for %s failed", pci_name(pdev));

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1928: FILE: drivers/pci/intel-iommu.c:1712:
+		printk(KERN_ERR"Allocating iova for %s failed", pci_name(pdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1950: FILE: drivers/pci/intel-iommu.c:1734:
+	ret = domain_page_mapping(domain, iova->addr, (u64)iova->host_addr,
+		iova->size, prot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1954: FILE: drivers/pci/intel-iommu.c:1738:
+	pr_debug("Device %s request: %lx@%llx mapping: %lx@%llx, dir %d\n",
+		pci_name(pdev), size, (u64)addr, iova->size, iova->addr, dir);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1960: FILE: drivers/pci/intel-iommu.c:1744:
+	printk(KERN_ERR"Device %s request: %lx@%llx dir %d --- failed\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1960: FILE: drivers/pci/intel-iommu.c:1744:
+	printk(KERN_ERR"Device %s request: %lx@%llx dir %d --- failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1961: FILE: drivers/pci/intel-iommu.c:1745:
+	printk(KERN_ERR"Device %s request: %lx@%llx dir %d --- failed\n",
+		pci_name(pdev), size, (u64)addr, dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1966: FILE: drivers/pci/intel-iommu.c:1750:
+static dma_addr_t intel_map_single(struct device *dev, void *addr,
+	size_t size, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1979: FILE: drivers/pci/intel-iommu.c:1763:
+		if (iommu_flush_iotlb_psi(domain->iommu, domain->id,
+				flush_addr, flush_size >> PAGE_SHIFT_4K, 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1986: FILE: drivers/pci/intel-iommu.c:1770:
+static void __intel_unmap_single(struct device *dev, dma_addr_t dev_addr,
+	size_t size, int dir, u64 *flush_addr, unsigned int *flush_size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1993: FILE: drivers/pci/intel-iommu.c:1777:
+	BUG_ON(!domain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2001: FILE: drivers/pci/intel-iommu.c:1785:
+	pr_debug("Device %s unmapping: %lx@%llx\n",
+		pci_name(pdev), iova->size, iova->addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2014: FILE: drivers/pci/intel-iommu.c:1798:
+static void intel_unmap_single(struct device *dev, dma_addr_t dev_addr,
+	size_t size, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2026: FILE: drivers/pci/intel-iommu.c:1810:
+	if (iommu_flush_iotlb_psi(domain->iommu, domain->id, flush_addr,
+			flush_size >> PAGE_SHIFT_4K, 0))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2030: FILE: drivers/pci/intel-iommu.c:1814:
+static void * intel_alloc_coherent(struct device *hwdev, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2031: FILE: drivers/pci/intel-iommu.c:1815:
+static void * intel_alloc_coherent(struct device *hwdev, size_t size,
+		       dma_addr_t *dma_handle, gfp_t flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2052: FILE: drivers/pci/intel-iommu.c:1836:
+static void intel_free_coherent(struct device *hwdev, size_t size,
+	void *vaddr, dma_addr_t dma_handle)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2064: FILE: drivers/pci/intel-iommu.c:1848:
+static void intel_unmap_sg(struct device *hwdev, struct scatterlist *sg,
+	int nelems, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2075: FILE: drivers/pci/intel-iommu.c:1859:
+		__intel_unmap_single(hwdev, sg->dma_address,
+			sg->dma_length, dir, &flush_addr, &flush_size);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#2081: FILE: drivers/pci/intel-iommu.c:1865:
+#define SG_ENT_VIRT_ADDRESS(sg)	(page_address((sg)->page) + (sg)->offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2083: FILE: drivers/pci/intel-iommu.c:1867:
+static int intel_map_sg(struct device *hwdev, struct scatterlist *sg,
+	int nelems, int dir)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2093: FILE: drivers/pci/intel-iommu.c:1877:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2098: FILE: drivers/pci/intel-iommu.c:1882:
+		dma_handle = __intel_map_single(hwdev, addr,
+				sg->length, dir, &flush_addr, &flush_size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2125: FILE: drivers/pci/intel-iommu.c:1909:
+static void * pgtable_alloc_fn(gfp_t gfp, void *pool_data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2144: FILE: drivers/pci/intel-iommu.c:1928:
+	pgtable_mempool = mempool_create(MIN_PGTABLE_PAGES, pgtable_alloc_fn,
+		pgtable_free_fn, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2148: FILE: drivers/pci/intel-iommu.c:1932:
+	domain_mempool = mempool_create(MIN_DOMAIN_REQ, mempool_kzalloc,
+		mempool_kfree, (void *)sizeof(struct domain));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2152: FILE: drivers/pci/intel-iommu.c:1936:
+	devinfo_mempool = mempool_create(MIN_DEVINFO_REQ, mempool_kzalloc,
+		mempool_kfree, (void *)sizeof(struct device_domain_info));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2177: FILE: drivers/pci/intel-iommu.c:1961:
+	if (early_dmar_detect()) {
+		iommu_detected = 1;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2190: FILE: drivers/pci/intel-iommu.c:1974:
+^I^Ireturn ^I-ENODEV;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2200: FILE: drivers/pci/intel-iommu.c:1984:
+		printk(KERN_ERR "IOMMU: dmar init failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2205: FILE: drivers/pci/intel-iommu.c:1989:
+	printk(KERN_INFO

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2216: FILE: drivers/pci/intel-iommu.c:2000:
+static int iommu_shutdown(struct sys_device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2238: FILE: drivers/pci/intel-iommu.c:2022:
+static int iommu_resume(struct sys_device * dev)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2292: FILE: drivers/pci/iova.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2305: FILE: drivers/pci/iova.c:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2323: FILE: drivers/pci/iova.c:32:
+	iova_cachep = kmem_cache_create("iova", sizeof(struct iova), 0,
+		SLAB_HWCACHE_ALIGN, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2327: FILE: drivers/pci/iova.c:36:
+	iova_mempool = mempool_create(IOVA_MIN_REQ, mempool_alloc_slab,
+		mempool_free_slab, iova_cachep);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2344: FILE: drivers/pci/iova.c:53:
+	struct iova *iova;
+	iova = mempool_alloc(iova_mempool, GFP_ATOMIC);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host_addr' may be better as '(host_addr)' to avoid precedence issues
#2353: FILE: drivers/pci/iova.c:62:
+#define aligned_size(host_addr, size) \
+	PAGE_ALIGN_4K((host_addr & (~PAGE_MASK_4K)) + size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#2353: FILE: drivers/pci/iova.c:62:
+#define aligned_size(host_addr, size) \
+	PAGE_ALIGN_4K((host_addr & (~PAGE_MASK_4K)) + size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gaw' may be better as '(gaw)' to avoid precedence issues
#2355: FILE: drivers/pci/iova.c:64:
+#define DOMAIN_MAX_ADDR(gaw) (((u64)1) << gaw)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2358: FILE: drivers/pci/iova.c:67:
+alloc_iova(struct domain *domain, void *host_addr, size_t size,
+		u64 start, u64 end)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start > DOMAIN_MAX_ADDR(domain->gaw)'
#2365: FILE: drivers/pci/iova.c:74:
+	if ((start > DOMAIN_MAX_ADDR(domain->gaw)) || end < start)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#2398: FILE: drivers/pci/iova.c:107:
+^I^I    ^Ibreak;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2398: FILE: drivers/pci/iova.c:107:
+^I^I    ^Ibreak;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2416: FILE: drivers/pci/iova.c:125:
+	if (domain->max_addr_used < (addr+size-1))
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2416: FILE: drivers/pci/iova.c:125:
+	if (domain->max_addr_used < (addr+size-1))
 	                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2460: FILE: drivers/pci/iova.c:169:
+		printk ("Attempt to add unaligned addr as reserved 0x%p\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2460: FILE: drivers/pci/iova.c:169:
+		printk ("Attempt to add unaligned addr as reserved 0x%p\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2476: FILE: drivers/pci/iova.c:185:
+	if (first && first->addr + first->size == addr
+		&& first->flags != IOVA_RESERVED) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last"
#2481: FILE: drivers/pci/iova.c:190:
+		for (last = first; last != NULL; last = last->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2487: FILE: drivers/pci/iova.c:196:
+		if (last && last->addr == addr + size
+			&& last->flags == IOVA_RESERVED)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2514: FILE: drivers/pci/iova.c:223:
+		area->size = max_t(dma_addr_t, first->addr + first->size,
+			addr + size) - area->addr;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2571: FILE: drivers/pci/iova.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2584: FILE: drivers/pci/iova.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2590: FILE: drivers/pci/iova.h:20:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2606: FILE: drivers/pci/iova.h:36:
+^Istruct iova ^I*next;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2609: FILE: drivers/pci/iova.h:39:
+extern int iova_create_mempool(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2610: FILE: drivers/pci/iova.h:40:
+extern void iova_destroy_mempool(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2619: FILE: drivers/pci/iova.h:49:
+struct iova * reserve_iova(struct domain *domain, u64 addr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2624: FILE: drivers/pci/iova.h:54:
+extern void destroy_iovas(struct domain *domain);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2625: FILE: drivers/pci/iova.h:55:
+extern void destroy_iova_list(struct iova *iova);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2644: FILE: include/linux/intel-iommu.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2657: FILE: include/linux/intel-iommu.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dmar' may be better as '(dmar)' to avoid precedence issues
#2693: FILE: include/linux/intel-iommu.h:50:
+#define dmar_readl(dmar, reg) readl(dmar + reg)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#2693: FILE: include/linux/intel-iommu.h:50:
+#define dmar_readl(dmar, reg) readl(dmar + reg)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dmar' may be better as '(dmar)' to avoid precedence issues
#2694: FILE: include/linux/intel-iommu.h:51:
+#define dmar_writel(dmar, reg, val) writel((val), dmar + reg)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#2694: FILE: include/linux/intel-iommu.h:51:
+#define dmar_writel(dmar, reg, val) writel((val), dmar + reg)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dmar' - possible side-effects?
#2695: FILE: include/linux/intel-iommu.h:52:
+#define dmar_readq(dmar, reg) ({ \
+		u32 lo, hi; \
+		lo = dmar_readl(dmar, reg); \
+		hi = dmar_readl(dmar, reg + 4); \
+		(((u64) hi) << 32) + lo; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#2695: FILE: include/linux/intel-iommu.h:52:
+#define dmar_readq(dmar, reg) ({ \
+		u32 lo, hi; \
+		lo = dmar_readl(dmar, reg); \
+		hi = dmar_readl(dmar, reg + 4); \
+		(((u64) hi) << 32) + lo; })

CHECK:SPACING: No space is necessary after a cast
#2699: FILE: include/linux/intel-iommu.h:56:
+		(((u64) hi) << 32) + lo; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dmar' - possible side-effects?
#2700: FILE: include/linux/intel-iommu.h:57:
+#define dmar_writeq(dmar, reg, val) do {\
+		dmar_writel(dmar, reg, (u32)(val)); \
+		dmar_writel(dmar, reg + 4, (u32)((val) >> 32)); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#2700: FILE: include/linux/intel-iommu.h:57:
+#define dmar_writeq(dmar, reg, val) do {\
+		dmar_writel(dmar, reg, (u32)(val)); \
+		dmar_writel(dmar, reg + 4, (u32)((val) >> 32)); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#2700: FILE: include/linux/intel-iommu.h:57:
+#define dmar_writeq(dmar, reg, val) do {\
+		dmar_writel(dmar, reg, (u32)(val)); \
+		dmar_writel(dmar, reg + 4, (u32)((val) >> 32)); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2722: FILE: include/linux/intel-iommu.h:79:
+#define cap_max_fault_reg_offset(c) \
+	(cap_fault_reg_offset(c) + cap_num_fault_regs(c) * 16)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#2733: FILE: include/linux/intel-iommu.h:90:
+#define cap_ndoms(c)		(((unsigned long)1) << (4 + 2 * ((c) & 0x7)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2739: FILE: include/linux/intel-iommu.h:96:
+#define ecap_iotlb_offset(e) ^I((((e) >> 8) & 0x3ff) * 16)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#2740: FILE: include/linux/intel-iommu.h:97:
+#define ecap_max_iotlb_offset(e) \
+	(ecap_iotlb_offset(e) + ecap_niotlb_iunits(e) * 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2745: FILE: include/linux/intel-iommu.h:102:
+#define PAGE_SIZE_4K		(1UL << PAGE_SHIFT_4K)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#2799: FILE: include/linux/intel-iommu.h:156:
+#define dma_frcd_type(d) ((d >> 30) & 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#2800: FILE: include/linux/intel-iommu.h:157:
+#define dma_frcd_fault_reason(c) (c & 0xff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#2801: FILE: include/linux/intel-iommu.h:158:
+#define dma_frcd_source_id(c) (c & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#2802: FILE: include/linux/intel-iommu.h:159:
+#define dma_frcd_page_addr(d) (d & (((u64)-1) << 12)) /* low 64 bit */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2814: FILE: include/linux/intel-iommu.h:171:
+};
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2814: FILE: include/linux/intel-iommu.h:171:
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))
                                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2816: FILE: include/linux/intel-iommu.h:173:
+#define set_root_present(root) do {(root).val |= 1;} while(0)
                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#2816: FILE: include/linux/intel-iommu.h:173:
+#define set_root_present(root) do {(root).val |= 1;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2816: FILE: include/linux/intel-iommu.h:173:
+#define set_root_present(root) do {(root).val |= 1;} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2818: FILE: include/linux/intel-iommu.h:175:
+#define set_root_value(root, value) \
+	do {(root).val |= ((value) & PAGE_MASK_4K);} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2819: FILE: include/linux/intel-iommu.h:176:
+	do {(root).val |= ((value) & PAGE_MASK_4K);} while(0)
 	                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#2819: FILE: include/linux/intel-iommu.h:176:
+	do {(root).val |= ((value) & PAGE_MASK_4K);} while(0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2836: FILE: include/linux/intel-iommu.h:193:
+};
+#define context_present(c) ((c).lo & 1)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2843: FILE: include/linux/intel-iommu.h:200:
+#define context_set_present(c) do {(c).lo |= 1;} while(0)
                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#2843: FILE: include/linux/intel-iommu.h:200:
+#define context_set_present(c) do {(c).lo |= 1;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2843: FILE: include/linux/intel-iommu.h:200:
+#define context_set_present(c) do {(c).lo |= 1;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2844: FILE: include/linux/intel-iommu.h:201:
+#define context_set_fault_enable(c) \
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2845: FILE: include/linux/intel-iommu.h:202:
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while(0)
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#2845: FILE: include/linux/intel-iommu.h:202:
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2846: FILE: include/linux/intel-iommu.h:203:
+#define context_set_translation_type(c, val) do { \
+		(c).lo &= (((u64)-1) << 4) | 3; \
+		(c).lo |= ((val) & 3) << 2; \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2849: FILE: include/linux/intel-iommu.h:206:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2851: FILE: include/linux/intel-iommu.h:208:
+#define context_set_address_root(c, val) \
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2852: FILE: include/linux/intel-iommu.h:209:
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while(0)
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#2852: FILE: include/linux/intel-iommu.h:209:
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2853: FILE: include/linux/intel-iommu.h:210:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while(0)
                                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#2853: FILE: include/linux/intel-iommu.h:210:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2853: FILE: include/linux/intel-iommu.h:210:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2854: FILE: include/linux/intel-iommu.h:211:
+#define context_set_domain_id(c, val) \
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2855: FILE: include/linux/intel-iommu.h:212:
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while(0)
 	                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2855: FILE: include/linux/intel-iommu.h:212:
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2856: FILE: include/linux/intel-iommu.h:213:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while(0)
                                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#2856: FILE: include/linux/intel-iommu.h:213:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2856: FILE: include/linux/intel-iommu.h:213:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while(0)

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#2864: FILE: include/linux/intel-iommu.h:221:
+ * 12-63: Host physcial address
                ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2869: FILE: include/linux/intel-iommu.h:226:
+};
+#define dma_clear_pte(p)	do {(p).val = 0;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2869: FILE: include/linux/intel-iommu.h:226:
+#define dma_clear_pte(p)	do {(p).val = 0;} while(0)
                         	               ^

ERROR:SPACING: space required before the open parenthesis '('
#2869: FILE: include/linux/intel-iommu.h:226:
+#define dma_clear_pte(p)	do {(p).val = 0;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2869: FILE: include/linux/intel-iommu.h:226:
+#define dma_clear_pte(p)	do {(p).val = 0;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2874: FILE: include/linux/intel-iommu.h:231:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while(0)
                                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2874: FILE: include/linux/intel-iommu.h:231:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2874: FILE: include/linux/intel-iommu.h:231:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2875: FILE: include/linux/intel-iommu.h:232:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while(0)
                                                             ^

ERROR:SPACING: space required before the open parenthesis '('
#2875: FILE: include/linux/intel-iommu.h:232:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2875: FILE: include/linux/intel-iommu.h:232:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#2876: FILE: include/linux/intel-iommu.h:233:
+#define dma_set_pte_prot(p, prot) do {\
+	(p).val = ((p).val & ~3) | ((prot) & 3); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2876: FILE: include/linux/intel-iommu.h:233:
+#define dma_set_pte_prot(p, prot) do {\
+	(p).val = ((p).val & ~3) | ((prot) & 3); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2877: FILE: include/linux/intel-iommu.h:234:
+	(p).val = ((p).val & ~3) | ((prot) & 3); } while(0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2877: FILE: include/linux/intel-iommu.h:234:
+	(p).val = ((p).val & ~3) | ((prot) & 3); } while(0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2879: FILE: include/linux/intel-iommu.h:236:
+#define dma_set_pte_addr(p, addr) do {\
+		(p).val |= ((addr) & PAGE_MASK_4K); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2880: FILE: include/linux/intel-iommu.h:237:
+		(p).val |= ((addr) & PAGE_MASK_4K); } while(0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2880: FILE: include/linux/intel-iommu.h:237:
+		(p).val |= ((addr) & PAGE_MASK_4K); } while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2902: FILE: include/linux/intel-iommu.h:259:
+extern void dmar_msi_unmask(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2903: FILE: include/linux/intel-iommu.h:260:
+extern void dmar_msi_mask(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2904: FILE: include/linux/intel-iommu.h:261:
+extern void dmar_msi_read(int irq, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2905: FILE: include/linux/intel-iommu.h:262:
+extern void dmar_msi_write(int irq, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2906: FILE: include/linux/intel-iommu.h:263:
+extern int arch_setup_dmar_msi(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2908: FILE: include/linux/intel-iommu.h:265:
+extern int init_dmars(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2909: FILE: include/linux/intel-iommu.h:266:
+extern void detect_intel_iommu(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2910: FILE: include/linux/intel-iommu.h:267:
+extern int early_dmar_detect(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2911: FILE: include/linux/intel-iommu.h:268:
+extern int intel_iommu_init(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 54 errors, 82 warnings, 142 checks, 2815 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
