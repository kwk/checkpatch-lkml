WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This finally does something useful with the notion of being able to schedule

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#56: 
--- a/arch/i386/kernel/syscall_table.S	Mon Jan 29 15:46:47 2007 -0800

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#97: FILE: include/linux/sched.h:1024:
+	 * XXX This is just a dummy that should be in a seperately managed
 	                                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: include/linux/asys.h:1:
+#ifndef _LINUX_ASYS_H $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#162: FILE: include/linux/asys.h:1:
+#ifndef _LINUX_ASYS_H 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: include/linux/asys.h:2:
+#define _LINUX_ASYS_H $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: kernel/asys.c:1:
+#include <linux/sched.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#179: FILE: kernel/asys.c:7:
+#include <asm/processor.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: kernel/asys.c:13:
+^Iint ^I^Isyscall_nr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: kernel/asys.c:24:
+^Ilong ^I^Ireturn_code;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: kernel/asys.c:60:
+^I/* $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: kernel/asys.c:66:
+		BUG_ON(!list_empty(&tsk->fibril->run_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#278: FILE: kernel/asys.c:106:
+	BUG_ON(!list_empty(&fibril->run_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: kernel/asys.c:109:
+^I/* $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: kernel/asys.c:114:
+	BUG_ON(list_empty(&current->runnable_fibrils));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#289: FILE: kernel/asys.c:117:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: kernel/asys.c:131:
+	res = list_entry(current->asys_completed.next, struct asys_result,
+			  item);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: kernel/asys.c:157:
+static int asys_init_fibril(struct fibril *fibril, struct thread_info *ti, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: kernel/asys.c:171:
+^I/* $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->fibril"
#368: FILE: kernel/asys.c:196:
+	if (current->fibril == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*current->fibril)...) over kzalloc(sizeof(struct fibril)...)
#369: FILE: kernel/asys.c:197:
+		current->fibril = kzalloc(sizeof(struct fibril), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->fibril"
#370: FILE: kernel/asys.c:198:
+		if (current->fibril == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#379: FILE: kernel/asys.c:207:
+	for (i = 0; i < nr_inp; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct asys_result)...)
#385: FILE: kernel/asys.c:213:
+		res = kmalloc(sizeof(struct asys_result), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#386: FILE: kernel/asys.c:214:
+		if (res == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*call)...) over kzalloc(sizeof(struct asys_call)...)
#392: FILE: kernel/asys.c:220:
+		call = kzalloc(sizeof(struct asys_call), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!call"
#393: FILE: kernel/asys.c:221:
+		if (call == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ti"
#400: FILE: kernel/asys.c:228:
+		if (ti == NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472975.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 11 warnings, 10 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472975.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
