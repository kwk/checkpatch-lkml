WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
The patch adds the core generic target engine functionality including processing of

WARNING:TYPO_SPELLING: 'capabilties' may be misspelled - perhaps 'capabilities'?
#57: 
in se_subsystem_api_t.  It provides processing capabilties and emulation for SCSI logic and CDBs in
                                               ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#64: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: drivers/target/target_core_transport.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#92: FILE: drivers/target/target_core_transport.c:24:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: drivers/target/target_core_transport.c:25:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: drivers/target/target_core_transport.c:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#137: FILE: drivers/target/target_core_transport.c:69:
+#define DEBUG_CDB_H(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#144: FILE: drivers/target/target_core_transport.c:76:
+#define DEBUG_CMD_M(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#151: FILE: drivers/target/target_core_transport.c:83:
+#define DEBUG_MEM(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#158: FILE: drivers/target/target_core_transport.c:90:
+#define DEBUG_MEM2(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#165: FILE: drivers/target/target_core_transport.c:97:
+#define DEBUG_SC(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#172: FILE: drivers/target/target_core_transport.c:104:
+#define DEBUG_SO(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#179: FILE: drivers/target/target_core_transport.c:111:
+#define DEBUG_VOL(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#186: FILE: drivers/target/target_core_transport.c:118:
+#define DEBUG_CS(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#193: FILE: drivers/target/target_core_transport.c:125:
+#define DEBUG_PT(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#200: FILE: drivers/target/target_core_transport.c:132:
+#define DEBUG_TS(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#207: FILE: drivers/target/target_core_transport.c:139:
+#define DEBUG_TRANSPORT_S(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#214: FILE: drivers/target/target_core_transport.c:146:
+#define DEBUG_TF(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#221: FILE: drivers/target/target_core_transport.c:153:
+#define DEBUG_DO(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#228: FILE: drivers/target/target_core_transport.c:160:
+#define DEBUG_TSTATE(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#235: FILE: drivers/target/target_core_transport.c:167:
+#define DEBUG_ST(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#242: FILE: drivers/target/target_core_transport.c:174:
+#define DEBUG_TT(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#249: FILE: drivers/target/target_core_transport.c:181:
+#define DEBUG_GRF(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#256: FILE: drivers/target/target_core_transport.c:188:
+#define DEBUG_STA(x...) printk(KERN_INFO x)

WARNING:RETURN_VOID: void function return statements are not generally useful
#297: FILE: drivers/target/target_core_transport.c:229:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#299: FILE: drivers/target/target_core_transport.c:231:
+static u16 transport_passthrough_set_fabric_sense_len(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#326: FILE: drivers/target/target_core_transport.c:258:
+		printk(KERN_ERR "Unable to allocate memory for se_global_t\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: drivers/target/target_core_transport.c:273:
+	se_cmd_cache = kmem_cache_create("se_cmd_cache",
+			sizeof(se_cmd_t), __alignof__(se_cmd_t), 0, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#343: FILE: drivers/target/target_core_transport.c:275:
+		printk(KERN_ERR "kmem_cache_create for se_cmd_t failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/target/target_core_transport.c:279:
+	se_task_cache = kmem_cache_create("se_task_cache",
+			sizeof(se_task_t), __alignof__(se_task_t), 0, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#349: FILE: drivers/target/target_core_transport.c:281:
+		printk(KERN_ERR "kmem_cache_create for se_task_t failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/target/target_core_transport.c:285:
+	se_tmr_req_cache = kmem_cache_create("se_tmr_cache",
+			sizeof(se_tmr_req_t), __alignof__(se_tmr_req_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#356: FILE: drivers/target/target_core_transport.c:288:
+		printk(KERN_ERR "kmem_cache_create() for se_tmr_req_t"

WARNING:SPLIT_STRING: quoted string split across lines
#357: FILE: drivers/target/target_core_transport.c:289:
+		printk(KERN_ERR "kmem_cache_create() for se_tmr_req_t"
+				" failed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: drivers/target/target_core_transport.c:293:
+	se_sess_cache = kmem_cache_create("se_sess_cache",
+			sizeof(se_session_t), __alignof__(se_session_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#364: FILE: drivers/target/target_core_transport.c:296:
+		printk(KERN_ERR "kmem_cache_create() for se_session_t"

WARNING:SPLIT_STRING: quoted string split across lines
#365: FILE: drivers/target/target_core_transport.c:297:
+		printk(KERN_ERR "kmem_cache_create() for se_session_t"
+				" failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/target/target_core_transport.c:301:
+	se_hba_cache = kmem_cache_create("se_hba_cache",
+			sizeof(se_hba_t), __alignof__(se_hba_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#372: FILE: drivers/target/target_core_transport.c:304:
+		printk(KERN_ERR "kmem_cache_create() for se_hba_t"

WARNING:SPLIT_STRING: quoted string split across lines
#373: FILE: drivers/target/target_core_transport.c:305:
+		printk(KERN_ERR "kmem_cache_create() for se_hba_t"
+				" failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: drivers/target/target_core_transport.c:309:
+	se_ua_cache = kmem_cache_create("se_ua_cache",
+			sizeof(se_ua_t), __alignof__(se_ua_t), 0, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: drivers/target/target_core_transport.c:311:
+		printk(KERN_ERR "kmem_cache_create() for se_ua_t failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: drivers/target/target_core_transport.c:315:
+	t10_pr_reg_cache = kmem_cache_create("t10_pr_reg_cache",
+			sizeof(t10_pr_registration_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#386: FILE: drivers/target/target_core_transport.c:318:
+		printk(KERN_ERR "kmem_cache_create() for t10_pr_registration_t"

WARNING:SPLIT_STRING: quoted string split across lines
#387: FILE: drivers/target/target_core_transport.c:319:
+		printk(KERN_ERR "kmem_cache_create() for t10_pr_registration_t"
+				" failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: drivers/target/target_core_transport.c:323:
+	t10_alua_lu_gp_cache = kmem_cache_create("t10_alua_lu_gp_cache",
+			sizeof(t10_alua_lu_gp_t), __alignof__(t10_alua_lu_gp_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#394: FILE: drivers/target/target_core_transport.c:326:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_lu_gp_cache"

WARNING:SPLIT_STRING: quoted string split across lines
#395: FILE: drivers/target/target_core_transport.c:327:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_lu_gp_cache"
+				" failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: drivers/target/target_core_transport.c:331:
+	t10_alua_lu_gp_mem_cache = kmem_cache_create("t10_alua_lu_gp_mem_cache",
+			sizeof(t10_alua_lu_gp_member_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#402: FILE: drivers/target/target_core_transport.c:334:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_lu_gp_mem_"

WARNING:SPLIT_STRING: quoted string split across lines
#403: FILE: drivers/target/target_core_transport.c:335:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_lu_gp_mem_"
+				"cache failed\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#403: FILE: drivers/target/target_core_transport.c:335:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_lu_gp_mem_"
+				"cache failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: drivers/target/target_core_transport.c:339:
+	t10_alua_tg_pt_gp_cache = kmem_cache_create("t10_alua_tg_pt_gp_cache",
+			sizeof(t10_alua_tg_pt_gp_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#410: FILE: drivers/target/target_core_transport.c:342:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_"

WARNING:SPLIT_STRING: quoted string split across lines
#411: FILE: drivers/target/target_core_transport.c:343:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_"
+				"cache failed\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#411: FILE: drivers/target/target_core_transport.c:343:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_"
+				"cache failed\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#414: FILE: drivers/target/target_core_transport.c:346:
+	t10_alua_tg_pt_gp_mem_cache = kmem_cache_create(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#420: FILE: drivers/target/target_core_transport.c:352:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_"

WARNING:SPLIT_STRING: quoted string split across lines
#421: FILE: drivers/target/target_core_transport.c:353:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_"
+				"mem_t failed\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#421: FILE: drivers/target/target_core_transport.c:353:
+		printk(KERN_ERR "kmem_cache_create() for t10_alua_tg_pt_gp_"
+				"mem_t failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#428: FILE: drivers/target/target_core_transport.c:360:
+		printk(KERN_ERR "Unable to allocate global->"

WARNING:SPLIT_STRING: quoted string split across lines
#429: FILE: drivers/target/target_core_transport.c:361:
+		printk(KERN_ERR "Unable to allocate global->"
+			"plugin_class_list\n");

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#439: FILE: drivers/target/target_core_transport.c:371:
+	if (se_cmd_cache)
+		kmem_cache_destroy(se_cmd_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#441: FILE: drivers/target/target_core_transport.c:373:
+	if (se_task_cache)
+		kmem_cache_destroy(se_task_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#443: FILE: drivers/target/target_core_transport.c:375:
+	if (se_tmr_req_cache)
+		kmem_cache_destroy(se_tmr_req_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#445: FILE: drivers/target/target_core_transport.c:377:
+	if (se_sess_cache)
+		kmem_cache_destroy(se_sess_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#447: FILE: drivers/target/target_core_transport.c:379:
+	if (se_hba_cache)
+		kmem_cache_destroy(se_hba_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#449: FILE: drivers/target/target_core_transport.c:381:
+	if (se_ua_cache)
+		kmem_cache_destroy(se_ua_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#451: FILE: drivers/target/target_core_transport.c:383:
+	if (t10_pr_reg_cache)
+		kmem_cache_destroy(t10_pr_reg_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#453: FILE: drivers/target/target_core_transport.c:385:
+	if (t10_alua_lu_gp_cache)
+		kmem_cache_destroy(t10_alua_lu_gp_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#455: FILE: drivers/target/target_core_transport.c:387:
+	if (t10_alua_lu_gp_mem_cache)
+		kmem_cache_destroy(t10_alua_lu_gp_mem_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#457: FILE: drivers/target/target_core_transport.c:389:
+	if (t10_alua_tg_pt_gp_cache)
+		kmem_cache_destroy(t10_alua_tg_pt_gp_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#459: FILE: drivers/target/target_core_transport.c:391:
+	if (t10_alua_tg_pt_gp_mem_cache)
+		kmem_cache_destroy(t10_alua_tg_pt_gp_mem_cache);

CHECK:SPACING: No space is necessary after a cast
#503: FILE: drivers/target/target_core_transport.c:435:
+		sd = (struct scsi_device *) dev->dev_ptr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#505: FILE: drivers/target/target_core_transport.c:437:
+			printk(KERN_INFO "HBA[%u] - Failing PSCSI Task for"

WARNING:SPLIT_STRING: quoted string split across lines
#506: FILE: drivers/target/target_core_transport.c:438:
+			printk(KERN_INFO "HBA[%u] - Failing PSCSI Task for"
+				" %d/%d/%d\n", dev->se_hba->hba_id,

CHECK:SPACING: No space is necessary after a cast
#512: FILE: drivers/target/target_core_transport.c:444:
+		ib_dev = (iblock_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#514: FILE: drivers/target/target_core_transport.c:446:
+			printk(KERN_INFO "HBA[%u] - Failing IBLOCK Task for"

WARNING:SPLIT_STRING: quoted string split across lines
#515: FILE: drivers/target/target_core_transport.c:447:
+			printk(KERN_INFO "HBA[%u] - Failing IBLOCK Task for"
+				" %u/%u\n", dev->se_hba->hba_id,

CHECK:SPACING: No space is necessary after a cast
#521: FILE: drivers/target/target_core_transport.c:453:
+		fd_dev = (fd_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#523: FILE: drivers/target/target_core_transport.c:455:
+			printk(KERN_INFO "HBA[%u] - Failing FILEIO Task for"

WARNING:SPLIT_STRING: quoted string split across lines
#524: FILE: drivers/target/target_core_transport.c:456:
+			printk(KERN_INFO "HBA[%u] - Failing FILEIO Task for"
+				" %u\n", dev->se_hba->hba_id,

CHECK:SPACING: No space is necessary after a cast
#531: FILE: drivers/target/target_core_transport.c:463:
+		rd_dev = (rd_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#533: FILE: drivers/target/target_core_transport.c:465:
+			printk(KERN_INFO "HBA[%u] - Failing RAMDISK Task for"

WARNING:SPLIT_STRING: quoted string split across lines
#534: FILE: drivers/target/target_core_transport.c:466:
+			printk(KERN_INFO "HBA[%u] - Failing RAMDISK Task for"
+				" %u\n", dev->se_hba->hba_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#541: FILE: drivers/target/target_core_transport.c:473:
+			printk(KERN_INFO "HBA[%u] - Failing unknown Task\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: drivers/target/target_core_transport.c:474:
+			printk(KERN_INFO "HBA[%u] - Failing unknown Task\n",
+				dev->se_hba->hba_id);

CHECK:BRACES: braces {} should be used on all arms of this statement
#639: FILE: drivers/target/target_core_transport.c:571:
+		if ((ptr2)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#642: FILE: drivers/target/target_core_transport.c:574:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#653: FILE: drivers/target/target_core_transport.c:585:
+		printk(KERN_ERR "Unable to allocate se_session_t from"

WARNING:SPLIT_STRING: quoted string split across lines
#654: FILE: drivers/target/target_core_transport.c:586:
+		printk(KERN_ERR "Unable to allocate se_session_t from"
+				" se_sess_cache\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#666: FILE: drivers/target/target_core_transport.c:598:
+void __transport_register_session(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#687: FILE: drivers/target/target_core_transport.c:619:
+	printk(KERN_INFO "TARGET_CORE[%s]: Registered fabric_sess_ptr: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: drivers/target/target_core_transport.c:620:
+	printk(KERN_INFO "TARGET_CORE[%s]: Registered fabric_sess_ptr: %p\n",
+		TPG_TFO(se_tpg)->get_fabric_name(), se_sess->fabric_sess_ptr);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#692: FILE: drivers/target/target_core_transport.c:624:
+void transport_register_session(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#750: FILE: drivers/target/target_core_transport.c:682:
+			if (!(TPG_TFO(se_tpg)->tpg_check_demo_mode_cache(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: drivers/target/target_core_transport.c:689:
+				TPG_TFO(se_tpg)->tpg_release_fabric_acl(se_tpg,
+						se_nacl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#767: FILE: drivers/target/target_core_transport.c:699:
+	printk(KERN_INFO "TARGET_CORE[%s]: Deregistered fabric_sess\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: drivers/target/target_core_transport.c:700:
+	printk(KERN_INFO "TARGET_CORE[%s]: Deregistered fabric_sess\n",
+		TPG_TFO(se_tpg)->get_fabric_name());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: drivers/target/target_core_transport.c:730:
+		DEBUG_TSTATE("Removed ITT: 0x%08x dev: %p task[%p]\n",
+			CMD_TFO(cmd)->tfo_get_task_tag(cmd), dev, task);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#819: FILE: drivers/target/target_core_transport.c:751:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#820: FILE: drivers/target/target_core_transport.c:752:
+		printk(KERN_ERR "Skipping Removal of state for ITT: 0x%08x"

WARNING:SPLIT_STRING: quoted string split across lines
#821: FILE: drivers/target/target_core_transport.c:753:
+		printk(KERN_ERR "Skipping Removal of state for ITT: 0x%08x"
+			" dev: %p task[%p]\n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#822: FILE: drivers/target/target_core_transport.c:754:
+			CMD_TFO(task->task_se_cmd)->tfo_get_task_tag(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: drivers/target/target_core_transport.c:764:
+		DEBUG_TSTATE("Removed ITT: 0x%08x dev: %p task[%p]\n",
+			CMD_TFO(task->task_se_cmd)->tfo_get_task_tag(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#832: FILE: drivers/target/target_core_transport.c:764:
+			CMD_TFO(task->task_se_cmd)->tfo_get_task_tag(

CHECK:BRACES: braces {} should be used on all arms of this statement
#847: FILE: drivers/target/target_core_transport.c:779:
+		if (cmd->callback) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#850: FILE: drivers/target/target_core_transport.c:782:
+		} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#867: FILE: drivers/target/target_core_transport.c:799:
+static int transport_cmd_check_stop(

WARNING:SPLIT_STRING: quoted string split across lines
#881: FILE: drivers/target/target_core_transport.c:813:
+		DEBUG_CS("%s:%d atomic_read(&T_TASK(cmd)->transport_lun_stop)"
+			" == TRUE for ITT: 0x%08x\n", __func__, __LINE__,

WARNING:SPLIT_STRING: quoted string split across lines
#900: FILE: drivers/target/target_core_transport.c:832:
+		DEBUG_CS("%s:%d atomic_read(&T_TASK(cmd)->t_transport_stop) =="
+			" TRUE for ITT: 0x%08x\n", __func__, __LINE__,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'transport_off == 2'
#912: FILE: drivers/target/target_core_transport.c:844:
+		if ((transport_off == 2) && !(cmd->se_cmd_flags &
+						SCF_CMD_PASSTHROUGH))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#920: FILE: drivers/target/target_core_transport.c:852:
+	if (transport_off) {
[...]
+	} else if (t_state)
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'transport_off == 2'
#929: FILE: drivers/target/target_core_transport.c:861:
+		if ((transport_off == 2) && !(cmd->se_cmd_flags &
+						SCF_CMD_PASSTHROUGH))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#959: FILE: drivers/target/target_core_transport.c:891:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#960: FILE: drivers/target/target_core_transport.c:892:
+		printk(KERN_INFO "Removed ITT: 0x%08x from LUN LIST[%d]\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/target/target_core_transport.c:902:
+	transport_remove_cmd_from_queue(cmd,
+		CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#970: FILE: drivers/target/target_core_transport.c:902:
+		CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: drivers/target/target_core_transport.c:918:
+	transport_remove_cmd_from_queue(cmd,
+			CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#986: FILE: drivers/target/target_core_transport.c:918:
+			CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#996: FILE: drivers/target/target_core_transport.c:928:
+int transport_add_cmd_to_queue(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1006: FILE: drivers/target/target_core_transport.c:938:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#1007: FILE: drivers/target/target_core_transport.c:939:
+		printk(KERN_ERR "Unable to allocate memory for"
+				" se_queue_req_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1114: FILE: drivers/target/target_core_transport.c:1046:
+		printk(KERN_ERR "ITT: 0x%08x t_transport_queue_active: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: drivers/target/target_core_transport.c:1047:
+		printk(KERN_ERR "ITT: 0x%08x t_transport_queue_active: %d\n",
+			CMD_TFO(cmd)->get_task_tag(cmd),

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1149: FILE: drivers/target/target_core_transport.c:1081:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1150: FILE: drivers/target/target_core_transport.c:1082:
+	printk(KERN_INFO "task: %p CDB: 0x%02x obj_ptr: %p\n", task,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: drivers/target/target_core_transport.c:1083:
+	printk(KERN_INFO "task: %p CDB: 0x%02x obj_ptr: %p\n", task,
+			T_TASK(cmd)->t_task_cdb[0], dev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1202: FILE: drivers/target/target_core_transport.c:1134:
+		if (!(atomic_dec_and_test(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1205: FILE: drivers/target/target_core_transport.c:1137:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+				flags);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1264: FILE: drivers/target/target_core_transport.c:1196:
+static inline int transport_add_task_check_sam_attr(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: drivers/target/target_core_transport.c:1217:
+		list_add(&task->t_execute_list,
+				(task_prev != NULL) ?

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task_prev"
#1285: FILE: drivers/target/target_core_transport.c:1217:
+				(task_prev != NULL) ?

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#1290: FILE: drivers/target/target_core_transport.c:1222:
+		DEBUG_STA("Set HEAD_OF_QUEUE for task CDB: 0x%02x"
+				" in execution queue\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1307: FILE: drivers/target/target_core_transport.c:1239:
+static void __transport_add_task_to_execute_queue(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: drivers/target/target_core_transport.c:1266:
+	DEBUG_TSTATE("Added ITT: 0x%08x task[%p] to dev: %p\n",
+		CMD_TFO(task->task_se_cmd)->get_task_tag(task->task_se_cmd),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1356: FILE: drivers/target/target_core_transport.c:1288:
+		DEBUG_TSTATE("Added ITT: 0x%08x task[%p] to dev: %p\n",
+			CMD_TFO(task->task_se_cmd)->get_task_tag(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1356: FILE: drivers/target/target_core_transport.c:1288:
+			CMD_TFO(task->task_se_cmd)->get_task_tag(

WARNING:RETURN_VOID: void function return statements are not generally useful
#1389: FILE: drivers/target/target_core_transport.c:1321:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1415: FILE: drivers/target/target_core_transport.c:1347:
+static void transport_remove_task_from_execute_queue(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1431: FILE: drivers/target/target_core_transport.c:1363:
+int transport_check_device_tcq(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1437: FILE: drivers/target/target_core_transport.c:1369:
+		printk(KERN_ERR "Attempting to set storage device queue depth"

WARNING:SPLIT_STRING: quoted string split across lines
#1438: FILE: drivers/target/target_core_transport.c:1370:
+		printk(KERN_ERR "Attempting to set storage device queue depth"
+			" to %d while transport maximum is %d on LUN: %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#1439: FILE: drivers/target/target_core_transport.c:1371:
+			" to %d while transport maximum is %d on LUN: %u,"
+			" ignoring request\n", device_tcq, dev->queue_depth,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1443: FILE: drivers/target/target_core_transport.c:1375:
+		printk(KERN_ERR "Attempting to set storage device queue depth"

WARNING:SPLIT_STRING: quoted string split across lines
#1444: FILE: drivers/target/target_core_transport.c:1376:
+		printk(KERN_ERR "Attempting to set storage device queue depth"
+			" to 0 on LUN: %u, ignoring request\n", unpacked_lun);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1450: FILE: drivers/target/target_core_transport.c:1382:
+	printk(KERN_INFO "Reset Device Queue Depth to %u for Logical Unit"

WARNING:SPLIT_STRING: quoted string split across lines
#1451: FILE: drivers/target/target_core_transport.c:1383:
+	printk(KERN_INFO "Reset Device Queue Depth to %u for Logical Unit"
+		" Number: %u\n", dev->queue_depth, unpacked_lun);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1475: FILE: drivers/target/target_core_transport.c:1407:
+void transport_dump_dev_state(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1508: FILE: drivers/target/target_core_transport.c:1440:
+void transport_dump_dev_info(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1513: FILE: drivers/target/target_core_transport.c:1445:
+	char *b,        /* Pointer to info buffer */
+	int *bl)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != 0'
#1520: FILE: drivers/target/target_core_transport.c:1452:
+	if (!t || (ret != 0))

WARNING:SPLIT_STRING: quoted string split across lines
#1552: FILE: drivers/target/target_core_transport.c:1484:
+			*bl += sprintf(b + *bl, "  Active Cmds: %d  Total Bytes"
+				": %llu\n", atomic_read(&dev->active_cmds),

WARNING:SPLIT_STRING: quoted string split across lines
#1561: FILE: drivers/target/target_core_transport.c:1493:
+			*bl += sprintf(b + *bl, "        Core Host ID: %u"
+				"  Active Cmds: %d  Total Bytes: %llu\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1566: FILE: drivers/target/target_core_transport.c:1498:
+			*bl += sprintf(b + *bl, "        CoreI Host ID: %u"
+				"  Active Cmds: %d\n", dev->se_hba->hba_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: drivers/target/target_core_transport.c:1517:
+	list_for_each_entry_safe(qr, qr_p, &dev->dev_queue_obj->qobj_list,
+				qr_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1586: FILE: drivers/target/target_core_transport.c:1518:
+				qr_list) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: drivers/target/target_core_transport.c:1524:
+		spin_unlock_irqrestore(&dev->dev_queue_obj->cmd_queue_lock,
+				flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1594: FILE: drivers/target/target_core_transport.c:1526:
+		printk(KERN_ERR "Releasing %s ITT: 0x%08x, i_state: %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#1595: FILE: drivers/target/target_core_transport.c:1527:
+		printk(KERN_ERR "Releasing %s ITT: 0x%08x, i_state: %u,"
+			" t_state: %u directly\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1607: FILE: drivers/target/target_core_transport.c:1539:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1609: FILE: drivers/target/target_core_transport.c:1541:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1622: FILE: drivers/target/target_core_transport.c:1554:
+static int transport_get_inquiry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1638: FILE: drivers/target/target_core_transport.c:1570:
+	cmd = transport_allocate_passthrough(&cdb[0],  SE_DIRECTION_READ,
+			0, NULL, 0, INQUIRY_LEN, obj_api, obj_ptr);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#1650: FILE: drivers/target/target_core_transport.c:1582:
+	 * We will obtain the VPD in a seperate passthrough operation.
 	                               ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1653: FILE: drivers/target/target_core_transport.c:1585:
+	memcpy((void *)&wwn->vendor[0], (void *)&buf[8],
+			sizeof(wwn->vendor));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1655: FILE: drivers/target/target_core_transport.c:1587:
+	memcpy((void *)&wwn->model[0], (void *)&buf[16],
+			sizeof(wwn->model));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1657: FILE: drivers/target/target_core_transport.c:1589:
+	memcpy((void *)&wwn->revision[0], (void *)&buf[32],
+			sizeof(wwn->revision));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1659: FILE: drivers/target/target_core_transport.c:1591:
+	printk("  Vendor: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1662: FILE: drivers/target/target_core_transport.c:1594:
+			printk("%c", buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1664: FILE: drivers/target/target_core_transport.c:1596:
+			printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1666: FILE: drivers/target/target_core_transport.c:1598:
+	printk("  Model: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1669: FILE: drivers/target/target_core_transport.c:1601:
+			printk("%c", buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1671: FILE: drivers/target/target_core_transport.c:1603:
+			printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1673: FILE: drivers/target/target_core_transport.c:1605:
+	printk("  Revision: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1676: FILE: drivers/target/target_core_transport.c:1608:
+			printk("%c", buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1678: FILE: drivers/target/target_core_transport.c:1610:
+			printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1680: FILE: drivers/target/target_core_transport.c:1612:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1684: FILE: drivers/target/target_core_transport.c:1616:
+	printk("  Type:   %s ", scsi_device_type(i));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1685: FILE: drivers/target/target_core_transport.c:1617:
+	printk("                 ANSI SCSI revision: %02x",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1686: FILE: drivers/target/target_core_transport.c:1618:
+	printk("                 ANSI SCSI revision: %02x",
+				buf[2] & 0x07);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1688: FILE: drivers/target/target_core_transport.c:1620:
+		printk(" CCS\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1690: FILE: drivers/target/target_core_transport.c:1622:
+		printk("\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1696: FILE: drivers/target/target_core_transport.c:1628:
+static int transport_get_inquiry_vpd_serial(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1713: FILE: drivers/target/target_core_transport.c:1645:
+	cmd = transport_allocate_passthrough(&cdb[0], SE_DIRECTION_READ,
+			0, NULL, 0, INQUIRY_VPD_SERIAL_LEN, obj_api, obj_ptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1724: FILE: drivers/target/target_core_transport.c:1656:
+	printk(KERN_INFO "T10 VPD Unit Serial Number: %s\n", &buf[4]);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1733: FILE: drivers/target/target_core_transport.c:1665:
+void transport_dump_vpd_proto_id(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1746: FILE: drivers/target/target_core_transport.c:1678:
+		sprintf(buf+len, "Fibre Channel\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1749: FILE: drivers/target/target_core_transport.c:1681:
+		sprintf(buf+len, "Parallel SCSI\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1752: FILE: drivers/target/target_core_transport.c:1684:
+		sprintf(buf+len, "SSA\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1755: FILE: drivers/target/target_core_transport.c:1687:
+		sprintf(buf+len, "IEEE 1394\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1758: FILE: drivers/target/target_core_transport.c:1690:
+		sprintf(buf+len, "SCSI Remote Direct Memory Access"
 		           ^

WARNING:SPLIT_STRING: quoted string split across lines
#1759: FILE: drivers/target/target_core_transport.c:1691:
+		sprintf(buf+len, "SCSI Remote Direct Memory Access"
+				" Protocol\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1762: FILE: drivers/target/target_core_transport.c:1694:
+		sprintf(buf+len, "Internet SCSI (iSCSI)\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1765: FILE: drivers/target/target_core_transport.c:1697:
+		sprintf(buf+len, "SAS Serial SCSI Protocol\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1768: FILE: drivers/target/target_core_transport.c:1700:
+		sprintf(buf+len, "Automation/Drive Interface Transport"
 		           ^

WARNING:SPLIT_STRING: quoted string split across lines
#1769: FILE: drivers/target/target_core_transport.c:1701:
+		sprintf(buf+len, "Automation/Drive Interface Transport"
+				" Protocol\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1772: FILE: drivers/target/target_core_transport.c:1704:
+		sprintf(buf+len, "AT Attachment Interface ATA/ATAPI\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1775: FILE: drivers/target/target_core_transport.c:1707:
+		sprintf(buf+len, "Unknown 0x%02x\n",
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: drivers/target/target_core_transport.c:1708:
+		sprintf(buf+len, "Unknown 0x%02x\n",
+				vpd->protocol_identifier);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1783: FILE: drivers/target/target_core_transport.c:1715:
+		printk(KERN_INFO "%s", buf);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1800: FILE: drivers/target/target_core_transport.c:1732:
+int transport_dump_vpd_assoc(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1813: FILE: drivers/target/target_core_transport.c:1745:
+		sprintf(buf+len, "addressed logical unit\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1816: FILE: drivers/target/target_core_transport.c:1748:
+		sprintf(buf+len, "target port\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1819: FILE: drivers/target/target_core_transport.c:1751:
+		sprintf(buf+len, "SCSI target device\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1822: FILE: drivers/target/target_core_transport.c:1754:
+		sprintf(buf+len, "Unknown 0x%02x\n", vpd->association);
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1830: FILE: drivers/target/target_core_transport.c:1762:
+		printk("%s", buf);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1846: FILE: drivers/target/target_core_transport.c:1778:
+int transport_dump_vpd_ident_type(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1859: FILE: drivers/target/target_core_transport.c:1791:
+		sprintf(buf+len, "Vendor specific\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1862: FILE: drivers/target/target_core_transport.c:1794:
+		sprintf(buf+len, "T10 Vendor ID based\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1865: FILE: drivers/target/target_core_transport.c:1797:
+		sprintf(buf+len, "EUI-64 based\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1868: FILE: drivers/target/target_core_transport.c:1800:
+		sprintf(buf+len, "NAA\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1871: FILE: drivers/target/target_core_transport.c:1803:
+		sprintf(buf+len, "Relative target port identifier\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1874: FILE: drivers/target/target_core_transport.c:1806:
+		sprintf(buf+len, "SCSI name string\n");
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1877: FILE: drivers/target/target_core_transport.c:1809:
+		sprintf(buf+len, "Unsupported: 0x%02x\n",
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: drivers/target/target_core_transport.c:1810:
+		sprintf(buf+len, "Unsupported: 0x%02x\n",
+				vpd->device_identifier_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1886: FILE: drivers/target/target_core_transport.c:1818:
+		printk("%s", buf);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1902: FILE: drivers/target/target_core_transport.c:1834:
+int transport_dump_vpd_ident(

WARNING:SPLIT_STRING: quoted string split across lines
#1927: FILE: drivers/target/target_core_transport.c:1859:
+		sprintf(buf, "T10 VPD Device Identifier encoding unsupported:"
+			" 0x%02x", vpd->device_identifier_code_set);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1935: FILE: drivers/target/target_core_transport.c:1867:
+		printk("%s", buf);

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#1942: FILE: drivers/target/target_core_transport.c:1874:
+	int j = 0, i = 4; /* offset to start of the identifer */
 	                                            ^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1975: FILE: drivers/target/target_core_transport.c:1907:
+static int transport_get_inquiry_vpd_device_ident(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1994: FILE: drivers/target/target_core_transport.c:1926:
+	cmd = transport_allocate_passthrough(&cdb[0], SE_DIRECTION_READ,
+			0, NULL, 0, INQUIRY_VPD_DEVICE_IDENTIFIER_LEN,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2006: FILE: drivers/target/target_core_transport.c:1938:
+	printk("T10 VPD Page Length: %d\n", page_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2013: FILE: drivers/target/target_core_transport.c:1945:
+			printk(KERN_ERR "page_83[3]: identifier"

WARNING:SPLIT_STRING: quoted string split across lines
#2014: FILE: drivers/target/target_core_transport.c:1946:
+			printk(KERN_ERR "page_83[3]: identifier"
+					" length zero!\n");

WARNING:TYPO_SPELLING: 'Identifer' may be misspelled - perhaps 'Identifier'?
#2017: FILE: drivers/target/target_core_transport.c:1949:
+		printk(KERN_INFO "T10 VPD Identifer Length: %d\n", ident_len);
 		                          ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2017: FILE: drivers/target/target_core_transport.c:1949:
+		printk(KERN_INFO "T10 VPD Identifer Length: %d\n", ident_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2021: FILE: drivers/target/target_core_transport.c:1953:
+			printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#2022: FILE: drivers/target/target_core_transport.c:1954:
+			printk(KERN_ERR "Unable to allocate memory for"
+					" t10_vpd_t\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2053: FILE: drivers/target/target_core_transport.c:1985:
+int transport_rescan_evpd_device_ident(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2058: FILE: drivers/target/target_core_transport.c:1990:
+	transport_get_inquiry_vpd_device_ident(DEV_OBJ_API(dev),
+			DEV_T10_WWN(dev), (void *)dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2073: FILE: drivers/target/target_core_transport.c:2005:
+	cmd = transport_allocate_passthrough(&cdb[0], SE_DIRECTION_READ,
+			0, NULL, 0, READ_CAP_LEN, DEV_OBJ_API(dev),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2094: FILE: drivers/target/target_core_transport.c:2026:
+	printk(KERN_INFO "READ_CAPACITY returned 0xFFFFFFFF, issuing"

WARNING:SPLIT_STRING: quoted string split across lines
#2095: FILE: drivers/target/target_core_transport.c:2027:
+	printk(KERN_INFO "READ_CAPACITY returned 0xFFFFFFFF, issuing"
+			" SAI_READ_CAPACITY_16\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2103: FILE: drivers/target/target_core_transport.c:2035:
+	cmd = transport_allocate_passthrough(&cdb[0], SE_DIRECTION_READ,
+			0, NULL, 0, 12, DEV_OBJ_API(dev), (void *)dev);

WARNING:TYPO_SPELLING: 'upsream' may be misspelled - perhaps 'upstream'?
#2131: FILE: drivers/target/target_core_transport.c:2063:
+	 * This is currently not available in upsream Linux/SCSI Target
 	                                      ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2141: FILE: drivers/target/target_core_transport.c:2073:
+	DEBUG_STA("%s: Using SAM_TASK_ATTR_EMULATED for SPC: 0x%02x"
+		" device\n", TRANSPORT(dev)->name,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2152: FILE: drivers/target/target_core_transport.c:2084:
+se_device_t *transport_add_device_to_core_hba(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2164: FILE: drivers/target/target_core_transport.c:2096:
+		printk(KERN_ERR "Unable to allocate memory for se_dev_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2169: FILE: drivers/target/target_core_transport.c:2101:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#2170: FILE: drivers/target/target_core_transport.c:2102:
+		printk(KERN_ERR "Unable to allocate memory for"
+				" dev->dev_queue_obj\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2177: FILE: drivers/target/target_core_transport.c:2109:
+	dev->dev_status_queue_obj = kzalloc(sizeof(se_queue_obj_t),
+					GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2179: FILE: drivers/target/target_core_transport.c:2111:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#2180: FILE: drivers/target/target_core_transport.c:2112:
+		printk(KERN_ERR "Unable to allocate memory for"
+				" dev->dev_status_queue_obj\n");

CHECK:SPACING: No space is necessary after a cast
#2190: FILE: drivers/target/target_core_transport.c:2122:
+	dev->dev_ptr		= (void *) transport_dev;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2269: FILE: drivers/target/target_core_transport.c:2201:
+	ret = transport_get_inquiry(DEV_OBJ_API(dev),
+			DEV_T10_WWN(dev), (void *)dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2277: FILE: drivers/target/target_core_transport.c:2209:
+	if (!(transport_get_inquiry_vpd_serial(DEV_OBJ_API(dev),
+			DEV_T10_WWN(dev), (void *)dev))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2283: FILE: drivers/target/target_core_transport.c:2215:
+		transport_get_inquiry_vpd_device_ident(DEV_OBJ_API(dev),
+			DEV_T10_WWN(dev), (void *)dev);

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#2303: FILE: drivers/target/target_core_transport.c:2235:
+	 * Release claim to OS dependant block_device that may have been
 	                       ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2342: FILE: drivers/target/target_core_transport.c:2274:
+	dev->process_thread = kthread_run(transport_processing_thread,
+			(void *)dev, name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2344: FILE: drivers/target/target_core_transport.c:2276:
+		printk(KERN_ERR "Unable to create kthread: %s\n", name);

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#2369: FILE: drivers/target/target_core_transport.c:2301:
+ *	Obtain exclusive access to OS dependant block-device via
   	                              ^^^^^^^^^

WARNING:TYPO_SPELLING: 'Successfuly' may be misspelled - perhaps 'Successfully'?
#2377: FILE: drivers/target/target_core_transport.c:2309:
+ *	Returns 1 - Successfuly claimed
   	            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#2387: FILE: drivers/target/target_core_transport.c:2319:
+	 * control to a OS dependant block subsystem.
 	                   ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2400: FILE: drivers/target/target_core_transport.c:2332:
+		printk(KERN_ERR "se_device_t->se_hba is NULL!\n");

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#2416: FILE: drivers/target/target_core_transport.c:2348:
+ *	Release exclusive access from OS dependant block-device via
   	                                 ^^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#2429: FILE: drivers/target/target_core_transport.c:2361:
+		if (check_pscsi &&
[...]
+				return;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2430: FILE: drivers/target/target_core_transport.c:2362:
+		if (check_pscsi &&
+		   (TRANSPORT(dev)->transport_type !=

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2442: FILE: drivers/target/target_core_transport.c:2374:
+		printk(KERN_ERR "se_device_t->dev_ptr is NULL!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2443: FILE: drivers/target/target_core_transport.c:2375:
+		BUG();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2477: FILE: drivers/target/target_core_transport.c:2409:
+int transport_allocate_iovecs_for_cmd(

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2481: FILE: drivers/target/target_core_transport.c:2413:
+	cmd->iov_data = kzalloc(iov_count * sizeof(struct iovec), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2483: FILE: drivers/target/target_core_transport.c:2415:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#2484: FILE: drivers/target/target_core_transport.c:2416:
+		printk(KERN_ERR "Unable to allocate memory for"
+			" iscsi_cmd_t->iov_data.\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2497: FILE: drivers/target/target_core_transport.c:2429:
+static int transport_generic_allocate_iovecs(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2505: FILE: drivers/target/target_core_transport.c:2437:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2506: FILE: drivers/target/target_core_transport.c:2438:
+	printk(KERN_INFO "Allocated %d iovecs for ITT: 0x%08x t_task_se_num:"

WARNING:SPLIT_STRING: quoted string split across lines
#2507: FILE: drivers/target/target_core_transport.c:2439:
+	printk(KERN_INFO "Allocated %d iovecs for ITT: 0x%08x t_task_se_num:"
+		" %u\n", iov_count, CMD_TFO(cmd)->get_task_tag(cmd),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2526: FILE: drivers/target/target_core_transport.c:2458:
+static inline void transport_generic_prepare_cdb(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2551: FILE: drivers/target/target_core_transport.c:2483:
+static inline int transport_check_device_cdb_sector_count(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2560: FILE: drivers/target/target_core_transport.c:2492:
+		printk(KERN_ERR "TRANSPORT->get_max_sectors returned zero!\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2574: FILE: drivers/target/target_core_transport.c:2506:
+static se_task_t *transport_generic_get_task(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2585: FILE: drivers/target/target_core_transport.c:2517:
+		printk(KERN_ERR "Unable to allocate se_task_t\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2614: FILE: drivers/target/target_core_transport.c:2546:
+int transport_generic_obj_start(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2627: FILE: drivers/target/target_core_transport.c:2559:
+static int transport_process_data_sg_transform(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2641: FILE: drivers/target/target_core_transport.c:2573:
+static int transport_process_control_sg_transform(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2655: FILE: drivers/target/target_core_transport.c:2587:
+		printk(KERN_ERR "se_mem is NULL!\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2664: FILE: drivers/target/target_core_transport.c:2596:
+	task->transport_map_task = ti->se_obj_api->get_map_SG(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2684: FILE: drivers/target/target_core_transport.c:2616:
+	DEBUG_CDB_H("task_no[%u]: SCF_SCSI_CONTROL_SG_IO_CDB task_size: %d\n",
+			task->task_no, task->task_size);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2692: FILE: drivers/target/target_core_transport.c:2624:
+static int transport_process_control_nonsg_transform(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2704: FILE: drivers/target/target_core_transport.c:2636:
+	task->transport_map_task = ti->se_obj_api->get_map_non_SG(

WARNING:SPLIT_STRING: quoted string split across lines
#2718: FILE: drivers/target/target_core_transport.c:2650:
+	DEBUG_CDB_H("task_no[%u]: SCF_SCSI_CONTROL_NONSG_IO_CDB task_size:"
+			" %d\n", task->task_no, task->task_size);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2726: FILE: drivers/target/target_core_transport.c:2658:
+static int transport_process_non_data_transform(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2751: FILE: drivers/target/target_core_transport.c:2683:
+	DEBUG_CDB_H("task_no[%u]: SCF_SCSI_NON_DATA_CDB task_size: %d\n",
+			task->task_no, task->task_size);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2763: FILE: drivers/target/target_core_transport.c:2695:
+se_cmd_t *__transport_alloc_se_cmd(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2774: FILE: drivers/target/target_core_transport.c:2706:
+		printk(KERN_ERR "SCSI BiDirectional mode not supported yet\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2775: FILE: drivers/target/target_core_transport.c:2707:
+		return ERR_PTR(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2780: FILE: drivers/target/target_core_transport.c:2712:
+		printk(KERN_ERR "kmem_cache_alloc() failed for se_cmd_cache\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2789: FILE: drivers/target/target_core_transport.c:2721:
+		printk(KERN_ERR "Unable to allocate cmd->t_task\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2794: FILE: drivers/target/target_core_transport.c:2726:
+	cmd->sense_buffer = kzalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2798: FILE: drivers/target/target_core_transport.c:2730:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#2799: FILE: drivers/target/target_core_transport.c:2731:
+		printk(KERN_ERR "Unable to allocate memory for"
+			" cmd->sense_buffer\n");

WARNING:SPLIT_STRING: quoted string split across lines
#2833: FILE: drivers/target/target_core_transport.c:2765:
+		DEBUG_STA("SAM Task Attribute ACA"
+			" emulation is not supported\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2843: FILE: drivers/target/target_core_transport.c:2775:
+	DEBUG_STA("Allocated se_ordered_id: %u for Task Attr: 0x%02x on %s\n",
+			cmd->se_ordered_id, cmd->sam_task_attr,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2848: FILE: drivers/target/target_core_transport.c:2780:
+se_cmd_t *transport_alloc_se_cmd(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2861: FILE: drivers/target/target_core_transport.c:2793:
+void transport_free_se_cmd(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2880: FILE: drivers/target/target_core_transport.c:2812:
+int transport_generic_allocate_tasks(

WARNING:SPLIT_STRING: quoted string split across lines
#2923: FILE: drivers/target/target_core_transport.c:2855:
+		DEBUG_CDB_H("Set cdb[0]: 0x%02x to "
+				"SCF_SCSI_DATA_SG_IO_CDB\n", cdb[0]);

WARNING:SPLIT_STRING: quoted string split across lines
#2937: FILE: drivers/target/target_core_transport.c:2869:
+		DEBUG_CDB_H("Set cdb[0]: 0x%02x to"
+				" SCF_SCSI_CONTROL_SG_IO_CDB\n", cdb[0]);

WARNING:SPLIT_STRING: quoted string split across lines
#2944: FILE: drivers/target/target_core_transport.c:2876:
+		DEBUG_CDB_H("Set cdb[0]: 0x%02x to "
+				"SCF_SCSI_CONTROL_NONSG_IO_CDB\n", cdb[0]);

WARNING:SPLIT_STRING: quoted string split across lines
#2951: FILE: drivers/target/target_core_transport.c:2883:
+		DEBUG_CDB_H("Set cdb[0]: 0x%02x to "
+				"SCF_SCSI_NON_DATA_CDB\n", cdb[0]);

WARNING:SPLIT_STRING: quoted string split across lines
#2958: FILE: drivers/target/target_core_transport.c:2890:
+		DEBUG_CDB_H("Set cdb[0]: 0x%02x to"
+				" SCF_SCSI_UNSUPPORTED_CDB\n", cdb[0]);

WARNING:SPLIT_STRING: quoted string split across lines
#2964: FILE: drivers/target/target_core_transport.c:2896:
+		DEBUG_CDB_H("Set cdb[0]: 0x%02x to"
+				" SCF_SCSI_RESERVATION_CONFLICT\n", cdb[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2978: FILE: drivers/target/target_core_transport.c:2910:
+			core_scsi3_ua_allocate(SE_SESS(cmd)->se_node_acl,
+				cmd->orig_fe_lun, 0x2C,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3011: FILE: drivers/target/target_core_transport.c:2943:
+int transport_generic_handle_cdb(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3015: FILE: drivers/target/target_core_transport.c:2947:
+		printk(KERN_ERR "SE_LUN(cmd) is NULL\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3028: FILE: drivers/target/target_core_transport.c:2960:
+int transport_generic_handle_data(

WARNING:TYPO_SPELLING: 'aleady' may be misspelled - perhaps 'already'?
#3045: FILE: drivers/target/target_core_transport.c:2977:
+	 * If the received CDB has aleady been ABORTED by the generic
 	                           ^^^^^^

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#3048: FILE: drivers/target/target_core_transport.c:2980:
+	 * fabric module as we are expecting no futher incoming DATA OUT
 	                                        ^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3063: FILE: drivers/target/target_core_transport.c:2995:
+int transport_generic_handle_tmr(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3087: FILE: drivers/target/target_core_transport.c:3019:
+	DEBUG_TS("ITT[0x%08x] - Stopping tasks\n",
+		CMD_TFO(cmd)->get_task_tag(cmd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3094: FILE: drivers/target/target_core_transport.c:3026:
+	list_for_each_entry_safe(task, task_tmp,
+				&T_TASK(cmd)->t_task_list, t_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3096: FILE: drivers/target/target_core_transport.c:3028:
+		DEBUG_TS("task_no[%d] - Processing task %p\n",
+				task->task_no, task);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3104: FILE: drivers/target/target_core_transport.c:3036:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+					flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3106: FILE: drivers/target/target_core_transport.c:3038:
+			transport_remove_task_from_execute_queue(task,
+					task->se_dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3109: FILE: drivers/target/target_core_transport.c:3041:
+			DEBUG_TS("task_no[%d] - Removed from execute queue\n",
+				task->task_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3121: FILE: drivers/target/target_core_transport.c:3053:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+					flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3124: FILE: drivers/target/target_core_transport.c:3056:
+			DEBUG_TS("task_no[%d] - Waiting to complete\n",
+				task->task_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3127: FILE: drivers/target/target_core_transport.c:3059:
+			DEBUG_TS("task_no[%d] - Stopped successfully\n",
+				task->task_no);

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#3147: FILE: drivers/target/target_core_transport.c:3079:
+	spin_lock_irqsave(&SE_HBA(dev)->hba_queue_lock, flags);;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3157: FILE: drivers/target/target_core_transport.c:3089:
+void transport_generic_request_failure(

WARNING:SPLIT_STRING: quoted string split across lines
#3164: FILE: drivers/target/target_core_transport.c:3096:
+	DEBUG_GRF("-----[ Storage Engine Exception for cmd: %p ITT: 0x%08x"
+		" CDB: 0x%02x\n", cmd, CMD_TFO(cmd)->get_task_tag(cmd),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3167: FILE: drivers/target/target_core_transport.c:3099:
+	DEBUG_GRF("-----[ se_obj_api: %p se_obj_ptr: %p\n", cmd->se_obj_api,
+		cmd->se_obj_ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3169: FILE: drivers/target/target_core_transport.c:3101:
+	DEBUG_GRF("-----[ se_orig_obj_api: %p se_orig_obj_ptr: %p\n",
+		cmd->se_orig_obj_api, cmd->se_orig_obj_ptr);

WARNING:SPLIT_STRING: quoted string split across lines
#3171: FILE: drivers/target/target_core_transport.c:3103:
+	DEBUG_GRF("-----[ i_state: %d t_state/def_t_state:"
+		" %d/%d transport_error_status: %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3176: FILE: drivers/target/target_core_transport.c:3108:
+	DEBUG_GRF("-----[ t_task_cdbs: %d t_task_cdbs_left: %d"
+		" t_task_cdbs_sent: %d t_task_cdbs_ex_left: %d --"

WARNING:SPLIT_STRING: quoted string split across lines
#3177: FILE: drivers/target/target_core_transport.c:3109:
+		" t_task_cdbs_sent: %d t_task_cdbs_ex_left: %d --"
+		" t_transport_active: %d t_transport_stop: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#3178: FILE: drivers/target/target_core_transport.c:3110:
+		" t_transport_active: %d t_transport_stop: %d"
+		" t_transport_sent: %d\n", T_TASK(cmd)->t_task_cdbs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3259: FILE: drivers/target/target_core_transport.c:3191:
+			core_scsi3_ua_allocate(SE_SESS(cmd)->se_node_acl,
+				cmd->orig_fe_lun, 0x2C,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3267: FILE: drivers/target/target_core_transport.c:3199:
+		printk(KERN_ERR "Unknown transport error for CDB 0x%02x: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3268: FILE: drivers/target/target_core_transport.c:3200:
+		printk(KERN_ERR "Unknown transport error for CDB 0x%02x: %d\n",
+			T_TASK(cmd)->t_task_cdb[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3278: FILE: drivers/target/target_core_transport.c:3210:
+		transport_send_check_condition_and_sense(cmd,
+			cmd->scsi_sense_reason, 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3334: FILE: drivers/target/target_core_transport.c:3266:
+static inline void transport_calculate_map_segment(

WARNING:SPLIT_STRING: quoted string split across lines
#3342: FILE: drivers/target/target_core_transport.c:3274:
+	DEBUG_MAP_SEGMENTS(" START Mapping se_mem: %p, Length: %d"
+		"  Remaining iSCSI Data: %u\n", se_mem, se_mem->se_len,

WARNING:SPLIT_STRING: quoted string split across lines
#3352: FILE: drivers/target/target_core_transport.c:3284:
+			DEBUG_MAP_SEGMENTS("LINUX_MAP: Reset lm->iovec_length"
+				" to %d\n", *data_length);

WARNING:SPLIT_STRING: quoted string split across lines
#3359: FILE: drivers/target/target_core_transport.c:3291:
+		DEBUG_MAP_SEGMENTS("LINUX_MAP: Set lm->iovec_base to %p from"
+			" lm->sg_page: %p\n", lm->iovec_base, lm->sg_page);

WARNING:SPLIT_STRING: quoted string split across lines
#3377: FILE: drivers/target/target_core_transport.c:3309:
+	DEBUG_MAP_SEGMENTS("LINUX_MAP1[%p]: Starting to se_mem->se_len: %u,"
+		" se_mem->se_off: %u, se_mem->se_page: %p\n", se_mem,

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#3378: FILE: drivers/target/target_core_transport.c:3310:
+		se_mem->se_len, se_mem->se_off, se_mem->se_page);;

WARNING:SPLIT_STRING: quoted string split across lines
#3387: FILE: drivers/target/target_core_transport.c:3319:
+	DEBUG_MAP_SEGMENTS("LINUX_MAP: lm->iovec_length: %u, lm->sg_length: %u,"
+		" sg_offset: %u\n", lm->iovec_length, lm->sg_length, sg_offset);

WARNING:SPLIT_STRING: quoted string split across lines
#3396: FILE: drivers/target/target_core_transport.c:3328:
+			DEBUG_MAP_SEGMENTS("LINUX_MAP1[%p]: Reset"
+				" lm->iovec_length to %d\n", se_mem,

WARNING:SPLIT_STRING: quoted string split across lines
#3402: FILE: drivers/target/target_core_transport.c:3334:
+		DEBUG_MAP_SEGMENTS("LINUX_MAP2[%p]: No current_offset,"
+			" set iovec_base to %p and set Current Page to %p\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3414: FILE: drivers/target/target_core_transport.c:3346:
+		DEBUG_MAP_SEGMENTS("LINUX_MAP3[%p]: Next Page:"
+			" lm->current_offset: %u, iovec_length: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#3415: FILE: drivers/target/target_core_transport.c:3347:
+			" lm->current_offset: %u, iovec_length: %u"
+			" sg_offset: %u\n", se_mem, lm->current_offset,

WARNING:SPLIT_STRING: quoted string split across lines
#3424: FILE: drivers/target/target_core_transport.c:3356:
+		DEBUG_MAP_SEGMENTS("LINUX_MAP3[%p]: ** Skipping to Next Page,"
+			" updated values: lm->current_offset: %u\n", se_mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3437: FILE: drivers/target/target_core_transport.c:3369:
+	DEBUG_MAP_SEGMENTS("LINUX_MAP4[%p]: Set lm->iovec_base to %p\n", se_mem,
+			lm->iovec_base);

WARNING:SPLIT_STRING: quoted string split across lines
#3442: FILE: drivers/target/target_core_transport.c:3374:
+	DEBUG_MAP_SEGMENTS("****** the OLD lm->iovec_length: %u lm->sg_length:"
+		" %u\n", lm->iovec_length, lm->sg_length);

WARNING:SPLIT_STRING: quoted string split across lines
#3457: FILE: drivers/target/target_core_transport.c:3389:
+	DEBUG_MAP_SEGMENTS("****** the NEW lm->iovec_length %u lm->sg_length:"
+		" %u\n", lm->iovec_length, lm->sg_length);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3471: FILE: drivers/target/target_core_transport.c:3403:
+static int transport_get_iscsi_offset(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3484: FILE: drivers/target/target_core_transport.c:3416:
+		printk(KERN_ERR "Unable to locate se_mem from"

WARNING:SPLIT_STRING: quoted string split across lines
#3485: FILE: drivers/target/target_core_transport.c:3417:
+		printk(KERN_ERR "Unable to locate se_mem from"
+				" T_TASK(cmd)->t_mem_list\n");

WARNING:SPLIT_STRING: quoted string split across lines
#3504: FILE: drivers/target/target_core_transport.c:3436:
+		DEBUG_GET_ISCSI_OFFSET("ISCSI_OFFSET: current_length: %u,"
+			" total_offset: %u, sg->length: %u\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3509: FILE: drivers/target/target_core_transport.c:3441:
+			lmap->orig_offset = lmap->current_offset =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#3512: FILE: drivers/target/target_core_transport.c:3444:
+			DEBUG_GET_ISCSI_OFFSET("ISCSI_OFFSET: Within Current"
+				" se_mem_t: %p, current_length incremented to"

WARNING:SPLIT_STRING: quoted string split across lines
#3513: FILE: drivers/target/target_core_transport.c:3445:
+				" se_mem_t: %p, current_length incremented to"
+				" %u\n", se_mem, current_length);

WARNING:SPLIT_STRING: quoted string split across lines
#3519: FILE: drivers/target/target_core_transport.c:3451:
+			DEBUG_GET_ISCSI_OFFSET("ISCSI_OFFSET: Outside of"
+				" Current se_mem: %p, current_length"

WARNING:SPLIT_STRING: quoted string split across lines
#3520: FILE: drivers/target/target_core_transport.c:3452:
+				" Current se_mem: %p, current_length"
+				" incremented to %u and current_iscsi_offset"

WARNING:SPLIT_STRING: quoted string split across lines
#3521: FILE: drivers/target/target_core_transport.c:3453:
+				" incremented to %u and current_iscsi_offset"
+				" decremented to %u\n", se_mem, current_length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3525: FILE: drivers/target/target_core_transport.c:3457:
+			list_for_each_entry_continue(se_mem,
+					T_TASK(cmd)->t_mem_list, se_list)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3529: FILE: drivers/target/target_core_transport.c:3461:
+				printk(KERN_ERR "Unable to locate se_mem_t\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3544: FILE: drivers/target/target_core_transport.c:3476:
+static void iscsi_check_iovec_map(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3561: FILE: drivers/target/target_core_transport.c:3493:
+	printk(KERN_INFO "Calculated iovec_map_length: %u does not match passed"

WARNING:SPLIT_STRING: quoted string split across lines
#3562: FILE: drivers/target/target_core_transport.c:3494:
+	printk(KERN_INFO "Calculated iovec_map_length: %u does not match passed"
+		" map_length: %u\n", iovec_map_length, map_length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3563: FILE: drivers/target/target_core_transport.c:3495:
+	printk(KERN_INFO "ITT: 0x%08x data_length: %u data_direction %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3564: FILE: drivers/target/target_core_transport.c:3496:
+	printk(KERN_INFO "ITT: 0x%08x data_length: %u data_direction %d\n",
+		CMD_TFO(cmd)->get_task_tag(cmd), cmd->data_length,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3570: FILE: drivers/target/target_core_transport.c:3502:
+		printk(KERN_INFO "iov[%d].iov_[base,len]: %p / %u bytes------"

WARNING:SPLIT_STRING: quoted string split across lines
#3571: FILE: drivers/target/target_core_transport.c:3503:
+		printk(KERN_INFO "iov[%d].iov_[base,len]: %p / %u bytes------"
+			"-->\n", i, iov[i].iov_base, iov[i].iov_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3573: FILE: drivers/target/target_core_transport.c:3505:
+		printk(KERN_INFO "iovec_map_length from %u to %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3574: FILE: drivers/target/target_core_transport.c:3506:
+		printk(KERN_INFO "iovec_map_length from %u to %u\n",
+			iovec_map_length, iovec_map_length + iov[i].iov_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3577: FILE: drivers/target/target_core_transport.c:3509:
+		printk(KERN_INFO "XXXX_map_length from %u to %u\n", map_length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3578: FILE: drivers/target/target_core_transport.c:3510:
+		printk(KERN_INFO "XXXX_map_length from %u to %u\n", map_length,
+				(map_length - iov[i].iov_len));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3583: FILE: drivers/target/target_core_transport.c:3515:
+		printk(KERN_INFO "se_mem[%p]: offset: %u length: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3584: FILE: drivers/target/target_core_transport.c:3516:
+		printk(KERN_INFO "se_mem[%p]: offset: %u length: %u\n",
+			se_mem, se_mem->se_off, se_mem->se_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3587: FILE: drivers/target/target_core_transport.c:3519:
+	BUG();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3599: FILE: drivers/target/target_core_transport.c:3531:
+static int transport_generic_set_iovec_ptrs(

WARNING:SPLIT_STRING: quoted string split across lines
#3616: FILE: drivers/target/target_core_transport.c:3548:
+		DEBUG_IOVEC_SCATTERLISTS("ITT: 0x%08x No se_mem_t elements"
+			" present\n", CMD_TFO(cmd)->get_task_tag(cmd));

CHECK:SPACING: No space is necessary after a cast
#3617: FILE: drivers/target/target_core_transport.c:3549:
+		iov[0].iov_base = (unsigned char *) T_TASK(cmd)->t_task_buf +

WARNING:SPLIT_STRING: quoted string split across lines
#3631: FILE: drivers/target/target_core_transport.c:3563:
+	DEBUG_IOVEC_SCATTERLISTS("[-------------------] ITT: 0x%08x OS"
+		" Independent Network POSIX defined iovectors to SE Memory"

WARNING:SPLIT_STRING: quoted string split across lines
#3632: FILE: drivers/target/target_core_transport.c:3564:
+		" Independent Network POSIX defined iovectors to SE Memory"
+		" [-------------------]\n\n", CMD_TFO(cmd)->get_task_tag(cmd));

WARNING:SPLIT_STRING: quoted string split across lines
#3649: FILE: drivers/target/target_core_transport.c:3581:
+	DEBUG_IOVEC_SCATTERLISTS("OS_IOVEC: Total map_sg->data_length: %d,"
+		" lmap->iscsi_offset: %d, cmd->orig_iov_data_count: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3679: FILE: drivers/target/target_core_transport.c:3611:
+		DEBUG_IOVEC_SCATTERLISTS("OS_IOVEC: iov[%u].iov_len: %u\n",
+				i, iov[i].iov_len);

WARNING:SPLIT_STRING: quoted string split across lines
#3681: FILE: drivers/target/target_core_transport.c:3613:
+		DEBUG_IOVEC_SCATTERLISTS("OS_IOVEC: lmap->sg_length: from %u"
+			" to %u\n", lmap->sg_length + iov[i].iov_len,

WARNING:SPLIT_STRING: quoted string split across lines
#3684: FILE: drivers/target/target_core_transport.c:3616:
+		DEBUG_IOVEC_SCATTERLISTS("OS_IOVEC: Changed total"
+			" map_sg->data_length from %u to %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3689: FILE: drivers/target/target_core_transport.c:3621:
+			printk(KERN_ERR "Current iovec count %u is greater than"

WARNING:SPLIT_STRING: quoted string split across lines
#3690: FILE: drivers/target/target_core_transport.c:3622:
+			printk(KERN_ERR "Current iovec count %u is greater than"
+				" se_cmd_t->orig_data_iov_count %u, cannot"

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3691: FILE: drivers/target/target_core_transport.c:3623:
+				" continue.\n", i+1, cmd->orig_iov_data_count);
 				                 ^

WARNING:SPLIT_STRING: quoted string split across lines
#3691: FILE: drivers/target/target_core_transport.c:3623:
+				" se_cmd_t->orig_data_iov_count %u, cannot"
+				" continue.\n", i+1, cmd->orig_iov_data_count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3699: FILE: drivers/target/target_core_transport.c:3631:
+		if (!lmap->sg_length || !map_sg->data_length) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3701: FILE: drivers/target/target_core_transport.c:3633:
+			list_for_each_entry(lmap->map_se_mem,
+					&lmap->map_se_mem->se_list, se_list)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3705: FILE: drivers/target/target_core_transport.c:3637:
+				printk(KERN_ERR "Unable to locate next"

WARNING:SPLIT_STRING: quoted string split across lines
#3706: FILE: drivers/target/target_core_transport.c:3638:
+				printk(KERN_ERR "Unable to locate next"
+					" lmap->map_se_mem_t entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#3715: FILE: drivers/target/target_core_transport.c:3647:
+			DEBUG_IOVEC_SCATTERLISTS("OS_IOVEC: Done with current"
+				" scatterlist, incremented Generic scatterlist"

WARNING:SPLIT_STRING: quoted string split across lines
#3716: FILE: drivers/target/target_core_transport.c:3648:
+				" scatterlist, incremented Generic scatterlist"
+				" Counter to %d and reset = 1\n", j);

CHECK:BRACES: Unbalanced braces around else statement
#3717: FILE: drivers/target/target_core_transport.c:3649:
+		} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3732: FILE: drivers/target/target_core_transport.c:3664:
+int transport_generic_allocate_buf(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3741: FILE: drivers/target/target_core_transport.c:3673:
+		printk(KERN_ERR "Unable to allocate memory for buffer\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3755: FILE: drivers/target/target_core_transport.c:3687:
+static int transport_generic_allocate_none(

WARNING:RETURN_VOID: void function return statements are not generally useful
#3805: FILE: drivers/target/target_core_transport.c:3737:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#3863: FILE: drivers/target/target_core_transport.c:3795:
+		DEBUG_TT("transport task: %p cmd: %p timeout task_active"
+				" == 0\n", task, cmd);

WARNING:SPLIT_STRING: quoted string split across lines
#3878: FILE: drivers/target/target_core_transport.c:3810:
+		DEBUG_TT("transport task: %p cmd: %p timeout task_stop"
+				" == 1\n", task, cmd);

WARNING:SPLIT_STRING: quoted string split across lines
#3886: FILE: drivers/target/target_core_transport.c:3818:
+		DEBUG_TT("transport task: %p cmd: %p timeout non zero"
+				" t_task_cdbs_left\n", task, cmd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3891: FILE: drivers/target/target_core_transport.c:3823:
+	DEBUG_TT("transport task: %p cmd: %p timeout ZERO t_task_cdbs_left\n",
+			task, cmd);

CHECK:SPACING: No space is necessary after a cast
#3932: FILE: drivers/target/target_core_transport.c:3864:
+	task->task_timer.data = (unsigned long) task;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3937: FILE: drivers/target/target_core_transport.c:3869:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3938: FILE: drivers/target/target_core_transport.c:3870:
+	printk(KERN_INFO "Starting task timer for cmd: %p task: %p seconds:"

WARNING:SPLIT_STRING: quoted string split across lines
#3939: FILE: drivers/target/target_core_transport.c:3871:
+	printk(KERN_INFO "Starting task timer for cmd: %p task: %p seconds:"
+		" %d\n", task->task_se_cmd, task, timeout);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3967: FILE: drivers/target/target_core_transport.c:3899:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3968: FILE: drivers/target/target_core_transport.c:3900:
+	printk(KERN_INFO "Stopping task timer for cmd: %p task: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3969: FILE: drivers/target/target_core_transport.c:3901:
+	printk(KERN_INFO "Stopping task timer for cmd: %p task: %p\n",
+			cmd, task);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3994: FILE: drivers/target/target_core_transport.c:3926:
+	list_for_each_entry_safe(task, task_tmp,
+				&T_TASK(cmd)->t_task_list, t_list)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4001: FILE: drivers/target/target_core_transport.c:3933:
+	if (dev->dev_tcq_window_closed++ <
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4004: FILE: drivers/target/target_core_transport.c:3936:
+	} else

WARNING:TYPO_SPELLING: 'determins' may be misspelled - perhaps 'determines'?
#4014: FILE: drivers/target/target_core_transport.c:3946:
+ * The return of this function determins if the tasks from se_cmd_t
                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'existance' may be misspelled - perhaps 'existence'?
#4023: FILE: drivers/target/target_core_transport.c:3955:
+	 * Check for the existance of HEAD_OF_QUEUE, and if true return 1
 	                 ^^^^^^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#4026: FILE: drivers/target/target_core_transport.c:3958:
+	 if (cmd->sam_task_attr == TASK_ATTR_HOQ) {

WARNING:SPLIT_STRING: quoted string split across lines
#4030: FILE: drivers/target/target_core_transport.c:3962:
+		DEBUG_STA("Added HEAD_OF_QUEUE for CDB:"
+			" 0x%02x, se_ordered_id: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4037: FILE: drivers/target/target_core_transport.c:3969:
+		list_add_tail(&cmd->se_ordered_list,
+				&SE_DEV(cmd)->ordered_cmd_list);

WARNING:SPLIT_STRING: quoted string split across lines
#4044: FILE: drivers/target/target_core_transport.c:3976:
+		DEBUG_STA("Added ORDERED for CDB: 0x%02x to ordered"
+				" list, se_ordered_id: %u\n",

WARNING:TYPO_SPELLING: 'competion' may be misspelled - perhaps 'competition'?
#4069: FILE: drivers/target/target_core_transport.c:4001:
+		 * will be drained upon competion of HEAD_OF_QUEUE task.
 		                        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4074: FILE: drivers/target/target_core_transport.c:4006:
+		list_add_tail(&cmd->se_delayed_list,
+				&SE_DEV(cmd)->delayed_cmd_list);

WARNING:SPLIT_STRING: quoted string split across lines
#4078: FILE: drivers/target/target_core_transport.c:4010:
+		DEBUG_STA("Added CDB: 0x%02x Task Attr: 0x%02x to"
+			" delayed CMD list, se_ordered_id: %u\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4102: FILE: drivers/target/target_core_transport.c:4034:
+		if (CMD_ORIG_OBJ_API(cmd)->check_online(

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#4112: FILE: drivers/target/target_core_transport.c:4044:
+	 * has occured that prevents execution.
 	       ^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4251: FILE: drivers/target/target_core_transport.c:4183:
+static inline u32 transport_get_sectors_6(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4279: FILE: drivers/target/target_core_transport.c:4211:
+static inline u32 transport_get_sectors_10(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4309: FILE: drivers/target/target_core_transport.c:4241:
+static inline u32 transport_get_sectors_12(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4339: FILE: drivers/target/target_core_transport.c:4271:
+static inline u32 transport_get_sectors_16(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4364: FILE: drivers/target/target_core_transport.c:4296:
+static inline u32 transport_get_size(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4406: FILE: drivers/target/target_core_transport.c:4338:
+extern int transport_generic_emulate_inquiry(

CHECK:SPACING: No space is necessary after a cast
#4420: FILE: drivers/target/target_core_transport.c:4352:
+	unsigned char *buf = (unsigned char *) T_TASK(cmd)->t_task_buf;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4433: FILE: drivers/target/target_core_transport.c:4365:
+		printk(KERN_ERR "SCSI Inquiry payload length: %u too small\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4434: FILE: drivers/target/target_core_transport.c:4366:
+		printk(KERN_ERR "SCSI Inquiry payload length: %u too small\n",
+				cmd->data_length);

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#4454: FILE: drivers/target/target_core_transport.c:4386:
+			 * Set TPGS field for explict and/or implict ALUA
 			                      ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#4454: FILE: drivers/target/target_core_transport.c:4386:
+			 * Set TPGS field for explict and/or implict ALUA
 			                                     ^^^^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#4516: FILE: drivers/target/target_core_transport.c:4448:
+		 } else {

WARNING:TYPO_SPELLING: 'ASSOICATION' may be misspelled - perhaps 'ASSOCIATION'?
#4556: FILE: drivers/target/target_core_transport.c:4488:
+		/* Set ASSOICATION == addressed logical unit: 0)b */
 		       ^^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4578: FILE: drivers/target/target_core_transport.c:4510:
+		binary = asciihex_to_binaryhex(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4582: FILE: drivers/target/target_core_transport.c:4514:
+			binary_new = asciihex_to_binaryhex(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4583: FILE: drivers/target/target_core_transport.c:4515:
+				&DEV_T10_WWN(dev)->unit_serial[i+2]);
 				                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4612: FILE: drivers/target/target_core_transport.c:4544:
+			id_len += sprintf((unsigned char *)&buf[off+12],
 			                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4628: FILE: drivers/target/target_core_transport.c:4560:
+			id_len += sprintf((unsigned char *)&buf[off+12],
 			                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4632: FILE: drivers/target/target_core_transport.c:4564:
+		buf[off+1] = 0x1; /* T10 Vendor ID */
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4633: FILE: drivers/target/target_core_transport.c:4565:
+		buf[off+2] = 0x0;
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4634: FILE: drivers/target/target_core_transport.c:4566:
+		memcpy((unsigned char *)&buf[off+4], "LIO-ORG", 8);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4638: FILE: drivers/target/target_core_transport.c:4570:
+		buf[off+3] = id_len;
 		       ^

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#4656: FILE: drivers/target/target_core_transport.c:4588:
+			 * Relative target port identifer, see spc4r17
 			                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'ASSOICATION' may be misspelled - perhaps 'ASSOCIATION'?
#4670: FILE: drivers/target/target_core_transport.c:4602:
+			/* Set ASSOICATION == target port: 01b */
 			       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#4672: FILE: drivers/target/target_core_transport.c:4604:
+			/* DESIGNATOR TYPE == Relative target port identifer */
 			                                           ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4677: FILE: drivers/target/target_core_transport.c:4609:
+			 * in Table 472 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'ASSOICATION' may be misspelled - perhaps 'ASSOCIATION'?
#4715: FILE: drivers/target/target_core_transport.c:4647:
+			/* Set ASSOICATION == target port: 01b */
 			       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'ASSOICATION' may be misspelled - perhaps 'ASSOCIATION'?
#4781: FILE: drivers/target/target_core_transport.c:4713:
+			/* Set ASSOICATION == target port: 01b */
 			       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#4787: FILE: drivers/target/target_core_transport.c:4719:
+			 * SCSI name string identifer containing, $FABRIC_MOD
 			                    ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4794: FILE: drivers/target/target_core_transport.c:4726:
+			scsi_name_len = sprintf(&buf[off], "%s,t,0x%04x",
+					TPG_TFO(tpg)->tpg_get_wwn(tpg), tpgt);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4807: FILE: drivers/target/target_core_transport.c:4739:
+			buf[off-1] = scsi_name_len;
 			       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4817: FILE: drivers/target/target_core_transport.c:4749:
+		printk(KERN_ERR "Unknown VPD Code: 0x%02x\n", cdb[2]);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4824: FILE: drivers/target/target_core_transport.c:4756:
+int transport_generic_emulate_readcapacity(

CHECK:SPACING: No space is necessary after a cast
#4829: FILE: drivers/target/target_core_transport.c:4761:
+	unsigned char *buf = (unsigned char *) T_TASK(cmd)->t_task_buf;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4843: FILE: drivers/target/target_core_transport.c:4775:
+int transport_generic_emulate_readcapacity_16(

CHECK:SPACING: No space is necessary after a cast
#4848: FILE: drivers/target/target_core_transport.c:4780:
+	unsigned char *buf = (unsigned char *) T_TASK(cmd)->t_task_buf;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4934: FILE: drivers/target/target_core_transport.c:4866:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4942: FILE: drivers/target/target_core_transport.c:4874:
+#if 0

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4952: FILE: drivers/target/target_core_transport.c:4884:
+static void transport_modesense_write_protect(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4969: FILE: drivers/target/target_core_transport.c:4901:
+int transport_generic_emulate_modesense(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4993: FILE: drivers/target/target_core_transport.c:4925:
+#if 0

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5000: FILE: drivers/target/target_core_transport.c:4932:
+		length += transport_modesense_caching(&buf[offset+length]);
 		                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5001: FILE: drivers/target/target_core_transport.c:4933:
+		length += transport_modesense_control(dev, &buf[offset+length]);
 		                                                      ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5002: FILE: drivers/target/target_core_transport.c:4934:
+#if 0

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5003: FILE: drivers/target/target_core_transport.c:4935:
+		length += transport_modesense_devicecaps(&buf[offset+length]);
 		                                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5007: FILE: drivers/target/target_core_transport.c:4939:
+		printk(KERN_ERR "Got Unknown Mode Page: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5008: FILE: drivers/target/target_core_transport.c:4940:
+		printk(KERN_ERR "Got Unknown Mode Page: 0x%02x\n",
+				cdb[2] & 0x3f);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5043: FILE: drivers/target/target_core_transport.c:4975:
+int transport_generic_emulate_request_sense(

CHECK:SPACING: No space is necessary after a cast
#5047: FILE: drivers/target/target_core_transport.c:4979:
+	unsigned char *buf = (unsigned char *) T_TASK(cmd)->t_task_buf;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5051: FILE: drivers/target/target_core_transport.c:4983:
+		printk(KERN_ERR "REQUEST_SENSE description emulation not"

WARNING:SPLIT_STRING: quoted string split across lines
#5052: FILE: drivers/target/target_core_transport.c:4984:
+		printk(KERN_ERR "REQUEST_SENSE description emulation not"
+			" supported\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5111: FILE: drivers/target/target_core_transport.c:5043:
+		printk(KERN_ERR "SE_LUN(cmd) is NULL\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5121: FILE: drivers/target/target_core_transport.c:5053:
+	list_for_each_entry_safe(task, task_tmp,
+				&T_TASK(cmd)->t_task_list, t_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5122: FILE: drivers/target/target_core_transport.c:5054:
+				&T_TASK(cmd)->t_task_list, t_list) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5131: FILE: drivers/target/target_core_transport.c:5063:
+			printk(KERN_ERR "TRANSPORT(dev)->get_sense_buffer"

WARNING:SPLIT_STRING: quoted string split across lines
#5132: FILE: drivers/target/target_core_transport.c:5064:
+			printk(KERN_ERR "TRANSPORT(dev)->get_sense_buffer"
+					" is NULL\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5138: FILE: drivers/target/target_core_transport.c:5070:
+			printk(KERN_ERR "ITT[0x%08x]_TASK[%d]: Unable to locate"

WARNING:SPLIT_STRING: quoted string split across lines
#5139: FILE: drivers/target/target_core_transport.c:5071:
+			printk(KERN_ERR "ITT[0x%08x]_TASK[%d]: Unable to locate"
+				" sense buffer for task with sense\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5146: FILE: drivers/target/target_core_transport.c:5078:
+		offset = CMD_TFO(cmd)->set_fabric_sense_len(cmd,
+				TRANSPORT_SENSE_BUFFER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5149: FILE: drivers/target/target_core_transport.c:5081:
+		memcpy((void *)&buffer[offset], (void *)sense_buffer,
+				TRANSPORT_SENSE_BUFFER);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5155: FILE: drivers/target/target_core_transport.c:5087:
+		printk(KERN_INFO "HBA_[%u]_PLUG[%s]: Set SAM STATUS: 0x%02x"

WARNING:SPLIT_STRING: quoted string split across lines
#5156: FILE: drivers/target/target_core_transport.c:5088:
+		printk(KERN_INFO "HBA_[%u]_PLUG[%s]: Set SAM STATUS: 0x%02x"
+				" and sense\n",

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmd' - possible side-effects?
#5169: FILE: drivers/target/target_core_transport.c:5101:
+#define SET_GENERIC_TRANSPORT_FUNCTIONS(cmd)				\
+do {									\
+	cmd->transport_allocate_iovecs =				\
+			&transport_generic_allocate_iovecs;		\
+	cmd->transport_get_task = &transport_generic_get_task;		\
+	cmd->transport_map_buffers_to_tasks =				\
+			&transport_generic_map_buffers_to_tasks;	\
+	cmd->transport_set_iovec_ptrs =					\
+			&transport_generic_set_iovec_ptrs;		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cmd' may be better as '(cmd)' to avoid precedence issues
#5169: FILE: drivers/target/target_core_transport.c:5101:
+#define SET_GENERIC_TRANSPORT_FUNCTIONS(cmd)				\
+do {									\
+	cmd->transport_allocate_iovecs =				\
+			&transport_generic_allocate_iovecs;		\
+	cmd->transport_get_task = &transport_generic_get_task;		\
+	cmd->transport_map_buffers_to_tasks =				\
+			&transport_generic_map_buffers_to_tasks;	\
+	cmd->transport_set_iovec_ptrs =					\
+			&transport_generic_set_iovec_ptrs;		\
+} while (0)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5190: FILE: drivers/target/target_core_transport.c:5122:
+static int transport_generic_cmd_sequencer(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5221: FILE: drivers/target/target_core_transport.c:5153:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5222: FILE: drivers/target/target_core_transport.c:5154:
+			printk(KERN_INFO "[%s]: ALUA TG Port not available,"

WARNING:SPLIT_STRING: quoted string split across lines
#5223: FILE: drivers/target/target_core_transport.c:5155:
+			printk(KERN_INFO "[%s]: ALUA TG Port not available,"
+				" SenseKey: NOT_READY, ASC/ASCQ: 0x04/0x%02x\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5235: FILE: drivers/target/target_core_transport.c:5167:
+		if (T10_RES(su_dev)->t10_seq_non_holder(

WARNING:TYPO_SPELLING: 'CONFLIT' may be misspelled - perhaps 'CONFLICT'?
#5240: FILE: drivers/target/target_core_transport.c:5172:
+			return 5; /* RESERVATION CONFLIT */
 			                         ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#5469: FILE: drivers/target/target_core_transport.c:5401:
+		 * Do implict HEAD_OF_QUEUE processing for INQUIRY.
 		      ^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5529: FILE: drivers/target/target_core_transport.c:5461:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5597: FILE: drivers/target/target_core_transport.c:5529:
+		 * Assume the passthrough or $FABRIC_MOD will tell us about it.
+		*/

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#5640: FILE: drivers/target/target_core_transport.c:5572:
+		 * Do implict HEAD_OF_QUEUE processing for REPORT_LUNS
 		      ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5648: FILE: drivers/target/target_core_transport.c:5580:
+		printk(KERN_WARNING "TARGET_CORE[%s]: Unsupported SCSI Opcode"

WARNING:SPLIT_STRING: quoted string split across lines
#5649: FILE: drivers/target/target_core_transport.c:5581:
+		printk(KERN_WARNING "TARGET_CORE[%s]: Unsupported SCSI Opcode"
+			" 0x%02x, sending CHECK_CONDITION.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5657: FILE: drivers/target/target_core_transport.c:5589:
+		printk(KERN_WARNING "TARGET_CORE[%s]: Expected Transfer Length:"

WARNING:SPLIT_STRING: quoted string split across lines
#5658: FILE: drivers/target/target_core_transport.c:5590:
+		printk(KERN_WARNING "TARGET_CORE[%s]: Expected Transfer Length:"
+			" %u does not match SCSI CDB Length: %u for SAM Opcode:"

WARNING:SPLIT_STRING: quoted string split across lines
#5659: FILE: drivers/target/target_core_transport.c:5591:
+			" %u does not match SCSI CDB Length: %u for SAM Opcode:"
+			" 0x%02x\n", CMD_TFO(cmd)->get_fabric_name(),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5665: FILE: drivers/target/target_core_transport.c:5597:
+			printk(KERN_ERR "Rejecting underflow/overflow"

WARNING:SPLIT_STRING: quoted string split across lines
#5666: FILE: drivers/target/target_core_transport.c:5598:
+			printk(KERN_ERR "Rejecting underflow/overflow"
+					" WRITE data\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5674: FILE: drivers/target/target_core_transport.c:5606:
+			printk(KERN_ERR "Failing OVERFLOW/UNDERFLOW for LBA op"

WARNING:SPLIT_STRING: quoted string split across lines
#5675: FILE: drivers/target/target_core_transport.c:5607:
+			printk(KERN_ERR "Failing OVERFLOW/UNDERFLOW for LBA op"
+				" CDB on non 512-byte sector setup subsystem"

WARNING:SPLIT_STRING: quoted string split across lines
#5676: FILE: drivers/target/target_core_transport.c:5608:
+				" CDB on non 512-byte sector setup subsystem"
+				" plugin: %s\n", TRANSPORT(dev)->name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5695: FILE: drivers/target/target_core_transport.c:5627:
+static inline se_cmd_t *transport_alloc_passthrough_cmd(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5703: FILE: drivers/target/target_core_transport.c:5635:
+se_cmd_t *transport_allocate_passthrough(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5725: FILE: drivers/target/target_core_transport.c:5657:
+		printk(KERN_ERR "Unable to allocate cmd->se_lun\n");

CHECK:SPACING: No space is necessary after a cast
#5737: FILE: drivers/target/target_core_transport.c:5669:
+	SE_LUN(cmd)->se_dev = (se_device_t *) type_ptr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5767: FILE: drivers/target/target_core_transport.c:5699:
+		if (cmd->transport_allocate_resources(cmd, cmd->data_length,
+					PAGE_SIZE) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5784: FILE: drivers/target/target_core_transport.c:5716:
+		DEBUG_PT("Preallocated se_mem_list: %p se_mem_num: %d\n",
+				mem, se_mem_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5787: FILE: drivers/target/target_core_transport.c:5719:
+		list_for_each_entry_safe(se_mem, se_mem_tmp,
+				T_TASK(cmd)->t_mem_list, se_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5790: FILE: drivers/target/target_core_transport.c:5722:
+			DEBUG_PT("se_mem: %p se_mem->se_page: %p %d:%d\n",
+				se_mem, se_mem->se_page, se_mem->se_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5794: FILE: drivers/target/target_core_transport.c:5726:
+		DEBUG_PT("Total calculated total_se_length: %u\n",
+				total_se_length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5797: FILE: drivers/target/target_core_transport.c:5729:
+			printk(KERN_ERR "Passed length: %u does not equal"

WARNING:SPLIT_STRING: quoted string split across lines
#5798: FILE: drivers/target/target_core_transport.c:5730:
+			printk(KERN_ERR "Passed length: %u does not equal"
+				" total_se_length: %u\n", length,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5800: FILE: drivers/target/target_core_transport.c:5732:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5810: FILE: drivers/target/target_core_transport.c:5742:
+	if (transport_new_cmd_obj(cmd, &ti, SE_LUN(cmd)->lun_obj_api,
+			type_ptr, 0) < 0)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5825: FILE: drivers/target/target_core_transport.c:5757:
+void transport_passthrough_release(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5829: FILE: drivers/target/target_core_transport.c:5761:
+		printk(KERN_ERR "transport_passthrough_release passed"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'transport_passthrough_release', this function's name, in a string
#5829: FILE: drivers/target/target_core_transport.c:5761:
+		printk(KERN_ERR "transport_passthrough_release passed"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#5830: FILE: drivers/target/target_core_transport.c:5762:
+		printk(KERN_ERR "transport_passthrough_release passed"
+			" NULL se_cmd_t\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5840: FILE: drivers/target/target_core_transport.c:5772:
+int transport_passthrough_complete(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5866: FILE: drivers/target/target_core_transport.c:5798:
+int transport_generic_passthrough_async(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5869: FILE: drivers/target/target_core_transport.c:5801:
+	void (*callback)(se_cmd_t *cmd,
+		void *callback_arg, int complete_status),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmd->transport_passthrough_done"
#5874: FILE: drivers/target/target_core_transport.c:5806:
+	int pt_done = (cmd->transport_passthrough_done != NULL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5885: FILE: drivers/target/target_core_transport.c:5817:
+		if (wait_for_completion_interruptible(

WARNING:SPLIT_STRING: quoted string split across lines
#5921: FILE: drivers/target/target_core_transport.c:5853:
+		DEBUG_STA("Incremented dev->dev_cur_ordered_id: %u for"
+			" SIMPLE: %u\n", dev->dev_cur_ordered_id,

WARNING:SPLIT_STRING: quoted string split across lines
#5928: FILE: drivers/target/target_core_transport.c:5860:
+		DEBUG_STA("Incremented dev_cur_ordered_id: %u for"
+			" HEAD_OF_QUEUE: %u\n", dev->dev_cur_ordered_id,

WARNING:SPLIT_STRING: quoted string split across lines
#5939: FILE: drivers/target/target_core_transport.c:5871:
+		DEBUG_STA("Incremented dev_cur_ordered_id: %u for ORDERED:"
+			" %u\n", dev->dev_cur_ordered_id, cmd->se_ordered_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5948: FILE: drivers/target/target_core_transport.c:5880:
+	list_for_each_entry_safe(cmd_p, cmd_tmp,
+			&dev->delayed_cmd_list, se_delayed_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5949: FILE: drivers/target/target_core_transport.c:5881:
+			&dev->delayed_cmd_list, se_delayed_list) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#5954: FILE: drivers/target/target_core_transport.c:5886:
+		DEBUG_STA("Calling add_tasks() for"
+			" cmd_p: 0x%02x Task Attr: 0x%02x"

WARNING:SPLIT_STRING: quoted string split across lines
#5955: FILE: drivers/target/target_core_transport.c:5887:
+			" cmd_p: 0x%02x Task Attr: 0x%02x"
+			" Dormant -> Active, se_ordered_id: %u\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5959: FILE: drivers/target/target_core_transport.c:5891:
+		CMD_ORIG_OBJ_API(cmd_p)->add_tasks(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6008: FILE: drivers/target/target_core_transport.c:5940:
+			transport_send_check_condition_and_sense(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#6037: FILE: drivers/target/target_core_transport.c:5969:
+		/* Fall through for SE_DIRECTION_WRITE */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6056: FILE: drivers/target/target_core_transport.c:5988:
+	list_for_each_entry_safe(task, task_tmp,
+				&T_TASK(cmd)->t_task_list, t_list) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6069: FILE: drivers/target/target_core_transport.c:6001:
+			printk(KERN_ERR "task[%u] - task->se_dev is NULL\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6070: FILE: drivers/target/target_core_transport.c:6002:
+			printk(KERN_ERR "task[%u] - task->se_dev is NULL\n",
+				task->task_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6103: FILE: drivers/target/target_core_transport.c:6035:
+	list_for_each_entry_safe(se_mem, se_mem_tmp,
+			T_TASK(cmd)->t_mem_list, se_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6128: FILE: drivers/target/target_core_transport.c:6060:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+					flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6136: FILE: drivers/target/target_core_transport.c:6068:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+					flags);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6170: FILE: drivers/target/target_core_transport.c:6102:
+int transport_generic_remove(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6185: FILE: drivers/target/target_core_transport.c:6117:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+					flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6198: FILE: drivers/target/target_core_transport.c:6130:
+	if (release_to_pool && !(cmd->se_cmd_flags & SCF_CMD_PASSTHROUGH))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6200: FILE: drivers/target/target_core_transport.c:6132:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#6223: FILE: drivers/target/target_core_transport.c:6155:
+	if (cmd->se_cmd_flags & SCF_SCSI_NON_DATA_CDB)
[...]
+	else if (cmd->se_cmd_flags & SCF_SCSI_CONTROL_NONSG_IO_CDB) {
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#6235: FILE: drivers/target/target_core_transport.c:6167:
+			DEBUG_CMD_M("Mapping SCF_SCSI_CONTROL_NONSG_IO_CDB"
+				" task_size: %u\n", task->task_size);

WARNING:SPLIT_STRING: quoted string split across lines
#6254: FILE: drivers/target/target_core_transport.c:6186:
+		DEBUG_CMD_M("Mapping task[%d]_se_obj_ptr[%p] %s_IO task_lba:"
+			" %llu task_size: %u task_sg_num: %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#6273: FILE: drivers/target/target_core_transport.c:6205:
+		DEBUG_CMD_M("Mapping SCF_SCSI_NON_DATA_CDB task_size: %u"
+			" task->task_sg_num: %d\n", task->task_size,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6292: FILE: drivers/target/target_core_transport.c:6224:
+int transport_get_sectors(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6310: FILE: drivers/target/target_core_transport.c:6242:
+		printk(KERN_ERR "LBA: %llu Sectors: %u exceeds"

WARNING:SPLIT_STRING: quoted string split across lines
#6311: FILE: drivers/target/target_core_transport.c:6243:
+		printk(KERN_ERR "LBA: %llu Sectors: %u exceeds"
+			" obj_api->total_sectors(): %llu\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6322: FILE: drivers/target/target_core_transport.c:6254:
+int transport_new_cmd_obj(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#6352: FILE: drivers/target/target_core_transport.c:6284:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#6353: FILE: drivers/target/target_core_transport.c:6285:
+		printk(KERN_INFO "[%s]: api: %p ptr: %p data_length: %u, LBA:"

WARNING:SPLIT_STRING: quoted string split across lines
#6354: FILE: drivers/target/target_core_transport.c:6286:
+		printk(KERN_INFO "[%s]: api: %p ptr: %p data_length: %u, LBA:"
+			" %llu t_task_sectors: %u, t_task_cdbs: %u\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*se_mem_list)...) over kzalloc(sizeof(struct list_head)...)
#6384: FILE: drivers/target/target_core_transport.c:6316:
+	se_mem_list = kzalloc(sizeof(struct list_head), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6386: FILE: drivers/target/target_core_transport.c:6318:
+		printk(KERN_ERR "Unable to allocate memory for se_mem_list\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6420: FILE: drivers/target/target_core_transport.c:6352:
+			printk(KERN_ERR "Unable to allocate se_mem_t\n");

WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#6426: FILE: drivers/target/target_core_transport.c:6358:
+/* #warning FIXME Allocate contigous pages for se_mem_t elements */
                            ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#6427: FILE: drivers/target/target_core_transport.c:6359:
+		se_mem->se_page = (struct page *) alloc_pages(GFP_KERNEL, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6429: FILE: drivers/target/target_core_transport.c:6361:
+			printk(KERN_ERR "alloc_pages() failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6435: FILE: drivers/target/target_core_transport.c:6367:
+			printk(KERN_ERR "kmap_atomic() failed\n");

WARNING:SPLIT_STRING: quoted string split across lines
#6445: FILE: drivers/target/target_core_transport.c:6377:
+		DEBUG_MEM("Allocated se_mem_t page(%p) Length(%u)"
+			" Offset(%u)\n", se_mem->se_page, se_mem->se_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6452: FILE: drivers/target/target_core_transport.c:6384:
+	DEBUG_MEM("Allocated total se_mem_t elements(%u)\n",
+			T_TASK(cmd)->t_task_se_num);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6459: FILE: drivers/target/target_core_transport.c:6391:
+extern u32 transport_calc_sg_num(

WARNING:SPLIT_STRING: quoted string split across lines
#6470: FILE: drivers/target/target_core_transport.c:6402:
+		DEBUG_SC("se_mem->se_page(%p) se_mem->se_len(%u)"
+			" se_mem->se_off(%u) task_offset(%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6481: FILE: drivers/target/target_core_transport.c:6413:
+			DEBUG_SC("sg_length(%u) task_size(%u)\n",
+					sg_length, task_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6494: FILE: drivers/target/target_core_transport.c:6426:
+			DEBUG_SC("sg_length(%u) task_size(%u)\n",
+					sg_length, task_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6502: FILE: drivers/target/target_core_transport.c:6434:
+		DEBUG_SC("task[%u] - Reducing task_size to(%u)\n",
+			task->task_no, task_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6507: FILE: drivers/target/target_core_transport.c:6439:
+		list_for_each_entry_continue(se_mem,
+				task->task_se_cmd->t_task->t_mem_list, se_list)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6517: FILE: drivers/target/target_core_transport.c:6449:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#6518: FILE: drivers/target/target_core_transport.c:6450:
+		printk(KERN_ERR "Unable to allocate memory for"
+				" task->task_sg\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6525: FILE: drivers/target/target_core_transport.c:6457:
+	DEBUG_SC("Successfully allocated task->task_sg_num(%u)\n",
+			task->task_sg_num);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6530: FILE: drivers/target/target_core_transport.c:6462:
+static inline int transport_set_task_sectors_disk(

CHECK:BRACES: braces {} should be used on all arms of this statement
#6546: FILE: drivers/target/target_core_transport.c:6478:
+		if (sectors > obj_api->max_sectors(obj_ptr)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6549: FILE: drivers/target/target_core_transport.c:6481:
+		} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6556: FILE: drivers/target/target_core_transport.c:6488:
+static inline int transport_set_task_sectors_non_disk(

CHECK:BRACES: braces {} should be used on all arms of this statement
#6564: FILE: drivers/target/target_core_transport.c:6496:
+	if (sectors > obj_api->max_sectors(obj_ptr)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6567: FILE: drivers/target/target_core_transport.c:6499:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6573: FILE: drivers/target/target_core_transport.c:6505:
+static inline int transport_set_task_sectors(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6583: FILE: drivers/target/target_core_transport.c:6515:
+		transport_set_task_sectors_disk(task, obj_api, obj_ptr,
+				lba, sectors, max_sectors_set) :

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6585: FILE: drivers/target/target_core_transport.c:6517:
+		transport_set_task_sectors_non_disk(task, obj_api, obj_ptr,
+				lba, sectors, max_sectors_set);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6588: FILE: drivers/target/target_core_transport.c:6520:
+int transport_map_sg_to_mem(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6602: FILE: drivers/target/target_core_transport.c:6534:
+		printk(KERN_ERR "No source scatterlist\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6610: FILE: drivers/target/target_core_transport.c:6542:
+			printk(KERN_ERR "Unable to allocate se_mem_t\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#6619: FILE: drivers/target/target_core_transport.c:6551:
+			if (task_size >= sg_s[j].length)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6621: FILE: drivers/target/target_core_transport.c:6553:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#6646: FILE: drivers/target/target_core_transport.c:6578:
+			} else

WARNING:SPLIT_STRING: quoted string split across lines
#6660: FILE: drivers/target/target_core_transport.c:6592:
+	DEBUG_MEM("task[%u] - Mapped(%u) struct scatterlist segments to(%u)"
+		" se_mem_t\n", task->task_no, j, *se_mem_cnt);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6665: FILE: drivers/target/target_core_transport.c:6597:
+int transport_map_mem_to_mem(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6678: FILE: drivers/target/target_core_transport.c:6610:
+		printk(KERN_ERR "Invalid se_mem_t pointer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6685: FILE: drivers/target/target_core_transport.c:6617:
+			printk(KERN_ERR "Unable to allocate se_mem_t\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6698: FILE: drivers/target/target_core_transport.c:6630:
+				se_mem = list_entry(se_mem->se_list.next,
+							se_mem_t, se_list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6700: FILE: drivers/target/target_core_transport.c:6632:
+					printk(KERN_ERR "Unable to locate next"

WARNING:SPLIT_STRING: quoted string split across lines
#6701: FILE: drivers/target/target_core_transport.c:6633:
+					printk(KERN_ERR "Unable to locate next"
+							" se_mem_t\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6734: FILE: drivers/target/target_core_transport.c:6666:
+				se_mem = list_entry(se_mem->se_list.next,
+							se_mem_t, se_list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6736: FILE: drivers/target/target_core_transport.c:6668:
+					printk(KERN_ERR "Unable to locate next"

WARNING:SPLIT_STRING: quoted string split across lines
#6737: FILE: drivers/target/target_core_transport.c:6669:
+					printk(KERN_ERR "Unable to locate next"
+							" se_mem_t\n");

WARNING:SPLIT_STRING: quoted string split across lines
#6751: FILE: drivers/target/target_core_transport.c:6683:
+		DEBUG_MEM2("task[%u] - se_mem_cnt(%u) se_page(%p) se_off(%u)"
+			" se_len(%u)\n", task->task_no, *se_mem_cnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6755: FILE: drivers/target/target_core_transport.c:6687:
+		DEBUG_MEM2("task[%u] - Reducing task_size to(%u)\n",
+			task->task_no, task_size);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6766: FILE: drivers/target/target_core_transport.c:6698:
+int transport_map_mem_to_sg(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6781: FILE: drivers/target/target_core_transport.c:6713:
+		printk(KERN_ERR "Unable to locate valid struct"

WARNING:SPLIT_STRING: quoted string split across lines
#6782: FILE: drivers/target/target_core_transport.c:6714:
+		printk(KERN_ERR "Unable to locate valid struct"
+				" scatterlist pointer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6795: FILE: drivers/target/target_core_transport.c:6727:
+				se_mem = list_entry(se_mem->se_list.next,
+							se_mem_t, se_list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6797: FILE: drivers/target/target_core_transport.c:6729:
+					printk(KERN_ERR "Unable to locate"

WARNING:SPLIT_STRING: quoted string split across lines
#6798: FILE: drivers/target/target_core_transport.c:6730:
+					printk(KERN_ERR "Unable to locate"
+						" next se_mem_t\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6838: FILE: drivers/target/target_core_transport.c:6770:
+				se_mem = list_entry(se_mem->se_list.next,
+						se_mem_t, se_list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6840: FILE: drivers/target/target_core_transport.c:6772:
+					printk(KERN_ERR "Unable to locate"

WARNING:SPLIT_STRING: quoted string split across lines
#6841: FILE: drivers/target/target_core_transport.c:6773:
+					printk(KERN_ERR "Unable to locate"
+						" next se_mem_t\n");

WARNING:SPLIT_STRING: quoted string split across lines
#6853: FILE: drivers/target/target_core_transport.c:6785:
+		DEBUG_MEM("task[%u] - sg[%u](%p)(%u)(%u) - Reducing task_size"
+			" to(%u)\n", task->task_no, sg_no,

WARNING:SPLIT_STRING: quoted string split across lines
#6863: FILE: drivers/target/target_core_transport.c:6795:
+	DEBUG_MEM("task[%u] - Mapped(%u) se_mem_t segments to total(%u) SGs"
+		" saved task_offset(%u)\n", task->task_no, *se_mem_cnt,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6869: FILE: drivers/target/target_core_transport.c:6801:
+u32 transport_generic_get_cdb_count(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6894: FILE: drivers/target/target_core_transport.c:6826:
+			printk(KERN_ERR "se_mem_in is NULL\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6917: FILE: drivers/target/target_core_transport.c:6849:
+	DEBUG_VOL("Starting Physical LBA(%llu) for head_obj_api->(%p)\n",
+			lba, head_obj_api);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6922: FILE: drivers/target/target_core_transport.c:6854:
+			printk(KERN_ERR "obj_api is NULL LBA(%llu)->Sectors"

WARNING:SPLIT_STRING: quoted string split across lines
#6923: FILE: drivers/target/target_core_transport.c:6855:
+			printk(KERN_ERR "obj_api is NULL LBA(%llu)->Sectors"
+				"(%u)\n", lba, sectors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6928: FILE: drivers/target/target_core_transport.c:6860:
+		DEBUG_VOL("ITT[0x%08x] LBA(%llu) SectorsLeft(%u) EOBJ(%llu)\n",
+			CMD_TFO(cmd)->get_task_tag(cmd), lba, sectors,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6938: FILE: drivers/target/target_core_transport.c:6870:
+		transport_set_task_sectors(task, obj_api, obj_ptr, lba,
+				sectors, &max_sectors_set);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6972: FILE: drivers/target/target_core_transport.c:6904:
+		DEBUG_VOL("Incremented task_cdbs(%u) task->task_sg_num(%u)\n",
+				task_cdbs, task->task_sg_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6996: FILE: drivers/target/target_core_transport.c:6928:
+	DEBUG_VOL("ITT[0x%08x] total cdbs(%u)\n",
+		CMD_TFO(cmd)->get_task_tag(cmd), task_cdbs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7029: FILE: drivers/target/target_core_transport.c:6961:
+		ret = transport_get_sectors(cmd, SE_LUN(cmd)->lun_obj_api,
+					SE_LUN(cmd)->lun_type_ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7034: FILE: drivers/target/target_core_transport.c:6966:
+		ret = transport_new_cmd_obj(cmd, &ti, SE_LUN(cmd)->lun_obj_api,
+					SE_LUN(cmd)->lun_type_ptr, 0);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7093: FILE: drivers/target/target_core_transport.c:7025:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7105: FILE: drivers/target/target_core_transport.c:7037:
+				printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#7106: FILE: drivers/target/target_core_transport.c:7038:
+				printk(KERN_ERR "Unable to allocate memory for"
+						" WRITE underflow\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7108: FILE: drivers/target/target_core_transport.c:7040:
+				transport_generic_request_failure(cmd, NULL,
+					PYX_TRANSPORT_REQ_TOO_MANY_SECTORS, 1);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*orig_sg)...) over kzalloc(sizeof(struct scatterlist)...)
#7120: FILE: drivers/target/target_core_transport.c:7052:
+			orig_sg = kzalloc(sizeof(struct scatterlist) *

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7124: FILE: drivers/target/target_core_transport.c:7056:
+				printk(KERN_ERR "Unable to allocate memory"

WARNING:SPLIT_STRING: quoted string split across lines
#7125: FILE: drivers/target/target_core_transport.c:7057:
+				printk(KERN_ERR "Unable to allocate memory"
+						" for WRITE underflow\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7127: FILE: drivers/target/target_core_transport.c:7059:
+				transport_generic_request_failure(cmd, NULL,
+					PYX_TRANSPORT_REQ_TOO_MANY_SECTORS, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7132: FILE: drivers/target/target_core_transport.c:7064:
+			memcpy(orig_sg, T_TASK(cmd)->t_task_buf,
+					sizeof(struct scatterlist) *

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7142: FILE: drivers/target/target_core_transport.c:7074:
+				transport_generic_request_failure(cmd, NULL,
+					PYX_TRANSPORT_REQ_TOO_MANY_SECTORS, 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7213: FILE: drivers/target/target_core_transport.c:7145:
+void transport_generic_free_cmd(

CHECK:BRACES: braces {} should be used on all arms of this statement
#7219: FILE: drivers/target/target_core_transport.c:7151:
+	if (!(cmd->se_cmd_flags & SCF_SE_LUN_CMD) || !T_TASK(cmd))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7221: FILE: drivers/target/target_core_transport.c:7153:
+	else {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7225: FILE: drivers/target/target_core_transport.c:7157:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7226: FILE: drivers/target/target_core_transport.c:7158:
+			printk(KERN_INFO "cmd: %p ITT: 0x%08x contains"

WARNING:SPLIT_STRING: quoted string split across lines
#7227: FILE: drivers/target/target_core_transport.c:7159:
+			printk(KERN_INFO "cmd: %p ITT: 0x%08x contains"
+				" SE_LUN(cmd)\n", cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7237: FILE: drivers/target/target_core_transport.c:7169:
+		transport_generic_remove(cmd, release_to_pool,
+				session_reinstatement);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7242: FILE: drivers/target/target_core_transport.c:7174:
+static void transport_nop_wait_for_tasks(

WARNING:RETURN_VOID: void function return statements are not generally useful
#7248: FILE: drivers/target/target_core_transport.c:7180:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#7266: FILE: drivers/target/target_core_transport.c:7198:
+		DEBUG_TRANSPORT_S("ConfigFS ITT[0x%08x] - t_transport_stop =="
+			" TRUE, skipping\n", CMD_TFO(cmd)->get_task_tag(cmd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7275: FILE: drivers/target/target_core_transport.c:7207:
+	DEBUG_TRANSPORT_S("ConfigFS: ITT[0x%08x] - stopping cmd....\n",
+		CMD_TFO(cmd)->get_task_tag(cmd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7278: FILE: drivers/target/target_core_transport.c:7210:
+	DEBUG_TRANSPORT_S("ConfigFS: ITT[0x%08x] - stopped cmd....\n",
+		CMD_TFO(cmd)->get_task_tag(cmd));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7290: FILE: drivers/target/target_core_transport.c:7222:
+#define DEBUG_CLEAR_L(x...) printk(KERN_INFO x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7306: FILE: drivers/target/target_core_transport.c:7238:
+			printk(KERN_ERR "ITT: 0x%08x, T_TASK(cmd) = NULL"

WARNING:SPLIT_STRING: quoted string split across lines
#7307: FILE: drivers/target/target_core_transport.c:7239:
+			printk(KERN_ERR "ITT: 0x%08x, T_TASK(cmd) = NULL"
+				"[i,t]_state: %u/%u\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7310: FILE: drivers/target/target_core_transport.c:7242:
+			BUG();

WARNING:SPLIT_STRING: quoted string split across lines
#7321: FILE: drivers/target/target_core_transport.c:7253:
+		DEBUG_CLEAR_L("SE_LUN[%d] - Setting T_TASK(cmd)->transport"
+			"_lun_stop for  ITT: 0x%08x\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#7321: FILE: drivers/target/target_core_transport.c:7253:
+		DEBUG_CLEAR_L("SE_LUN[%d] - Setting T_TASK(cmd)->transport"
+			"_lun_stop for  ITT: 0x%08x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7330: FILE: drivers/target/target_core_transport.c:7262:
+			printk(KERN_ERR "ITT: 0x%08x, [i,t]_state: %u/%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7331: FILE: drivers/target/target_core_transport.c:7263:
+			printk(KERN_ERR "ITT: 0x%08x, [i,t]_state: %u/%u\n",
+				CMD_TFO(cmd)->get_task_tag(cmd),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7333: FILE: drivers/target/target_core_transport.c:7265:
+			BUG();

WARNING:SPLIT_STRING: quoted string split across lines
#7340: FILE: drivers/target/target_core_transport.c:7272:
+		DEBUG_CLEAR_L("SE_LUN[%d] - ITT: 0x%08x before transport"
+			"_lun_wait_for_tasks()\n", SE_LUN(cmd)->unpacked_lun,

WARNING:MISSING_SPACE: break quoted strings at a space character
#7340: FILE: drivers/target/target_core_transport.c:7272:
+		DEBUG_CLEAR_L("SE_LUN[%d] - ITT: 0x%08x before transport"
+			"_lun_wait_for_tasks()\n", SE_LUN(cmd)->unpacked_lun,

WARNING:SPLIT_STRING: quoted string split across lines
#7349: FILE: drivers/target/target_core_transport.c:7281:
+		DEBUG_CLEAR_L("SE_LUN[%d] - ITT: 0x%08x after transport_lun"
+			"_wait_for_tasks(): SUCCESS\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#7349: FILE: drivers/target/target_core_transport.c:7281:
+		DEBUG_CLEAR_L("SE_LUN[%d] - ITT: 0x%08x after transport_lun"
+			"_wait_for_tasks(): SUCCESS\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7359: FILE: drivers/target/target_core_transport.c:7291:
+		transport_send_check_condition_and_sense(cmd,
+				NON_EXISTENT_LUN, 0);

WARNING:SPLIT_STRING: quoted string split across lines
#7368: FILE: drivers/target/target_core_transport.c:7300:
+			DEBUG_CLEAR_L("SE_LUN[%d] - Detected FE stop for"
+				" se_cmd_t: %p ITT: 0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7373: FILE: drivers/target/target_core_transport.c:7305:
+			spin_unlock_irqrestore(&T_TASK(cmd)->t_state_lock,
+					flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7381: FILE: drivers/target/target_core_transport.c:7313:
+		DEBUG_CLEAR_L("SE_LUN[%d] - ITT: 0x%08x finished processing\n",
+			lun->unpacked_lun, CMD_TFO(cmd)->get_task_tag(cmd));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7395: FILE: drivers/target/target_core_transport.c:7327:
+static void transport_generic_wait_for_tasks(

WARNING:SPLIT_STRING: quoted string split across lines
#7417: FILE: drivers/target/target_core_transport.c:7349:
+		DEBUG_TRANSPORT_S("wait_for_tasks: Stopping"
+			" wait_for_completion(&T_TASK(cmd)transport_lun_fe"

WARNING:SPLIT_STRING: quoted string split across lines
#7418: FILE: drivers/target/target_core_transport.c:7350:
+			" wait_for_completion(&T_TASK(cmd)transport_lun_fe"
+			"_stop_comp); for ITT: 0x%08x\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#7418: FILE: drivers/target/target_core_transport.c:7350:
+			" wait_for_completion(&T_TASK(cmd)transport_lun_fe"
+			"_stop_comp); for ITT: 0x%08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#7437: FILE: drivers/target/target_core_transport.c:7369:
+		DEBUG_TRANSPORT_S("wait_for_tasks: Stopped"
+			" wait_for_completion(&T_TASK(cmd)transport_lun_fe_"

WARNING:SPLIT_STRING: quoted string split across lines
#7438: FILE: drivers/target/target_core_transport.c:7370:
+			" wait_for_completion(&T_TASK(cmd)transport_lun_fe_"
+			"stop_comp); for ITT: 0x%08x\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#7438: FILE: drivers/target/target_core_transport.c:7370:
+			" wait_for_completion(&T_TASK(cmd)transport_lun_fe_"
+			"stop_comp); for ITT: 0x%08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#7450: FILE: drivers/target/target_core_transport.c:7382:
+	DEBUG_TRANSPORT_S("wait_for_tasks: Stopping %p ITT: 0x%08x"
+		" i_state: %d, t_state/def_t_state: %d/%d, t_transport_stop"

WARNING:SPLIT_STRING: quoted string split across lines
#7451: FILE: drivers/target/target_core_transport.c:7383:
+		" i_state: %d, t_state/def_t_state: %d/%d, t_transport_stop"
+		" = TRUE\n", cmd, CMD_TFO(cmd)->get_task_tag(cmd),

WARNING:SPLIT_STRING: quoted string split across lines
#7466: FILE: drivers/target/target_core_transport.c:7398:
+	DEBUG_TRANSPORT_S("wait_for_tasks: Stopped wait_for_compltion("
+		"&T_TASK(cmd)->t_transport_stop_comp) for ITT: 0x%08x\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7476: FILE: drivers/target/target_core_transport.c:7408:
+int transport_get_sense_codes(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7487: FILE: drivers/target/target_core_transport.c:7419:
+int transport_set_sense_codes(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7498: FILE: drivers/target/target_core_transport.c:7430:
+int transport_send_check_condition_and_sense(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7528: FILE: drivers/target/target_core_transport.c:7460:
+	offset = CMD_TFO(cmd)->set_fabric_sense_len(cmd,
+				TRANSPORT_SENSE_BUFFER);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7540: FILE: drivers/target/target_core_transport.c:7472:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ILLEGAL_REQUEST;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7542: FILE: drivers/target/target_core_transport.c:7474:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x20;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7548: FILE: drivers/target/target_core_transport.c:7480:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ILLEGAL_REQUEST;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7550: FILE: drivers/target/target_core_transport.c:7482:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x24;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7556: FILE: drivers/target/target_core_transport.c:7488:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7558: FILE: drivers/target/target_core_transport.c:7490:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x29;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7559: FILE: drivers/target/target_core_transport.c:7491:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = 0x03;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7565: FILE: drivers/target/target_core_transport.c:7497:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7567: FILE: drivers/target/target_core_transport.c:7499:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x0c;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7569: FILE: drivers/target/target_core_transport.c:7501:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = 0x0d;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7575: FILE: drivers/target/target_core_transport.c:7507:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7577: FILE: drivers/target/target_core_transport.c:7509:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x24;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7583: FILE: drivers/target/target_core_transport.c:7515:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7585: FILE: drivers/target/target_core_transport.c:7517:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x26;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7591: FILE: drivers/target/target_core_transport.c:7523:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7593: FILE: drivers/target/target_core_transport.c:7525:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x0c;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7595: FILE: drivers/target/target_core_transport.c:7527:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = 0x0c;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7601: FILE: drivers/target/target_core_transport.c:7533:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7603: FILE: drivers/target/target_core_transport.c:7535:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x47;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7605: FILE: drivers/target/target_core_transport.c:7537:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = 0x05;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7611: FILE: drivers/target/target_core_transport.c:7543:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ABORTED_COMMAND;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7613: FILE: drivers/target/target_core_transport.c:7545:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x11;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7615: FILE: drivers/target/target_core_transport.c:7547:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = 0x13;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7621: FILE: drivers/target/target_core_transport.c:7553:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = DATA_PROTECT;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7623: FILE: drivers/target/target_core_transport.c:7555:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x27;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7629: FILE: drivers/target/target_core_transport.c:7561:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = UNIT_ATTENTION;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7631: FILE: drivers/target/target_core_transport.c:7563:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = asc;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7632: FILE: drivers/target/target_core_transport.c:7564:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = ascq;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7638: FILE: drivers/target/target_core_transport.c:7570:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = NOT_READY;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7640: FILE: drivers/target/target_core_transport.c:7572:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = asc;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7641: FILE: drivers/target/target_core_transport.c:7573:
+		buffer[offset+SPC_ASCQ_KEY_OFFSET] = ascq;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7648: FILE: drivers/target/target_core_transport.c:7580:
+		buffer[offset+SPC_SENSE_KEY_OFFSET] = ILLEGAL_REQUEST;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7650: FILE: drivers/target/target_core_transport.c:7582:
+		buffer[offset+SPC_ASC_KEY_OFFSET] = 0x80;
 		             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7680: FILE: drivers/target/target_core_transport.c:7612:
+		if (!(send_status) ||
+		     (cmd->se_cmd_flags & SCF_SENT_DELAYED_TAS))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7682: FILE: drivers/target/target_core_transport.c:7614:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7683: FILE: drivers/target/target_core_transport.c:7615:
+		printk(KERN_INFO "Sending delayed SAM_STAT_TASK_ABORTED"

WARNING:SPLIT_STRING: quoted string split across lines
#7684: FILE: drivers/target/target_core_transport.c:7616:
+		printk(KERN_INFO "Sending delayed SAM_STAT_TASK_ABORTED"
+			" status for CDB: 0x%02x ITT: 0x%08x\n",

WARNING:REPEATED_WORD: Possible repeated word: 'until'
#7702: FILE: drivers/target/target_core_transport.c:7634:
+	 * until until they have completed before sending a TASK_ABORTED

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->data_direction == SE_DIRECTION_WRITE'
#7706: FILE: drivers/target/target_core_transport.c:7638:
+	if ((cmd->data_direction == SE_DIRECTION_WRITE) ||
+	    (cmd->data_direction == SE_DIRECTION_BIDI)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->data_direction == SE_DIRECTION_BIDI'
#7706: FILE: drivers/target/target_core_transport.c:7638:
+	if ((cmd->data_direction == SE_DIRECTION_WRITE) ||
+	    (cmd->data_direction == SE_DIRECTION_BIDI)) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7717: FILE: drivers/target/target_core_transport.c:7649:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7718: FILE: drivers/target/target_core_transport.c:7650:
+	printk(KERN_INFO "Setting SAM_STAT_TASK_ABORTED status for CDB: 0x%02x,"

WARNING:SPLIT_STRING: quoted string split across lines
#7719: FILE: drivers/target/target_core_transport.c:7651:
+	printk(KERN_INFO "Setting SAM_STAT_TASK_ABORTED status for CDB: 0x%02x,"
+		" ITT: 0x%08x\n", T_TASK(cmd)->t_task_cdb[0],

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7751: FILE: drivers/target/target_core_transport.c:7683:
+#if 0

WARNING:TYPO_SPELLING: 'Uknown' may be misspelled - perhaps 'Unknown'?
#7763: FILE: drivers/target/target_core_transport.c:7695:
+		printk(KERN_ERR "Uknown TMR function: 0x%02x.\n",
 		                 ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7763: FILE: drivers/target/target_core_transport.c:7695:
+		printk(KERN_ERR "Uknown TMR function: 0x%02x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7764: FILE: drivers/target/target_core_transport.c:7696:
+		printk(KERN_ERR "Uknown TMR function: 0x%02x.\n",
+				tmr->function);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7808: FILE: drivers/target/target_core_transport.c:7740:
+			printk(KERN_ERR "TASK_CMD(task) is NULL!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7814: FILE: drivers/target/target_core_transport.c:7746:
+			printk(KERN_ERR "T_TASK(cmd) is NULL for task: %p cmd:"

WARNING:SPLIT_STRING: quoted string split across lines
#7815: FILE: drivers/target/target_core_transport.c:7747:
+			printk(KERN_ERR "T_TASK(cmd) is NULL for task: %p cmd:"
+				" %p ITT: 0x%08x\n", task, cmd,

WARNING:SPLIT_STRING: quoted string split across lines
#7824: FILE: drivers/target/target_core_transport.c:7756:
+		DEBUG_DO("PT: cmd: %p task: %p ITT/CmdSN: 0x%08x/0x%08x,"
+			" i_state/def_i_state: %d/%d, t_state/def_t_state:"

WARNING:SPLIT_STRING: quoted string split across lines
#7825: FILE: drivers/target/target_core_transport.c:7757:
+			" i_state/def_i_state: %d/%d, t_state/def_t_state:"
+			" %d/%d cdb: 0x%02x\n", cmd, task,

WARNING:SPLIT_STRING: quoted string split across lines
#7831: FILE: drivers/target/target_core_transport.c:7763:
+		DEBUG_DO("PT: ITT[0x%08x] - t_task_cdbs: %d t_task_cdbs_left:"
+			" %d t_task_cdbs_sent: %d -- t_transport_active: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#7832: FILE: drivers/target/target_core_transport.c:7764:
+			" %d t_task_cdbs_sent: %d -- t_transport_active: %d"
+			" t_transport_stop: %d t_transport_sent: %d\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7843: FILE: drivers/target/target_core_transport.c:7775:
+			spin_unlock_irqrestore(

WARNING:SPLIT_STRING: quoted string split across lines
#7847: FILE: drivers/target/target_core_transport.c:7779:
+			DEBUG_DO("Waiting for task: %p to shutdown for dev:"
+				" %p\n", task, dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7850: FILE: drivers/target/target_core_transport.c:7782:
+			DEBUG_DO("Completed task: %p shutdown for dev: %p\n",
+				task, dev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7861: FILE: drivers/target/target_core_transport.c:7793:
+			spin_unlock_irqrestore(

WARNING:SPLIT_STRING: quoted string split across lines
#7865: FILE: drivers/target/target_core_transport.c:7797:
+			DEBUG_DO("Skipping task: %p, dev: %p for"
+				" t_task_cdbs_ex_left: %d\n", task, dev,

WARNING:SPLIT_STRING: quoted string split across lines
#7874: FILE: drivers/target/target_core_transport.c:7806:
+			DEBUG_DO("got t_transport_active = 1 for task: %p, dev:"
+					" %p\n", task, dev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7877: FILE: drivers/target/target_core_transport.c:7809:
+				spin_unlock_irqrestore(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7879: FILE: drivers/target/target_core_transport.c:7811:
+				transport_send_check_condition_and_sense(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7883: FILE: drivers/target/target_core_transport.c:7815:
+				transport_remove_cmd_from_queue(cmd,
+					CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7883: FILE: drivers/target/target_core_transport.c:7815:
+					CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7890: FILE: drivers/target/target_core_transport.c:7822:
+				spin_unlock_irqrestore(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7894: FILE: drivers/target/target_core_transport.c:7826:
+				transport_remove_cmd_from_queue(cmd,
+					CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7894: FILE: drivers/target/target_core_transport.c:7826:
+					CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7909: FILE: drivers/target/target_core_transport.c:7841:
+		DEBUG_DO("Got t_transport_active = 0 for task: %p, dev: %p\n",
+				task, dev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7912: FILE: drivers/target/target_core_transport.c:7844:
+			spin_unlock_irqrestore(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7915: FILE: drivers/target/target_core_transport.c:7847:
+			transport_send_check_condition_and_sense(cmd,
+				LOGICAL_UNIT_COMMUNICATION_FAILURE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7917: FILE: drivers/target/target_core_transport.c:7849:
+			transport_remove_cmd_from_queue(cmd,
+				CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7917: FILE: drivers/target/target_core_transport.c:7849:
+				CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7924: FILE: drivers/target/target_core_transport.c:7856:
+			spin_unlock_irqrestore(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7928: FILE: drivers/target/target_core_transport.c:7860:
+			transport_remove_cmd_from_queue(cmd,
+				CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7928: FILE: drivers/target/target_core_transport.c:7860:
+				CMD_ORIG_OBJ_API(cmd)->get_queue_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7946: FILE: drivers/target/target_core_transport.c:7878:
+		spin_unlock_irqrestore(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7953: FILE: drivers/target/target_core_transport.c:7885:
+		DEBUG_DO("From Device Queue: cmd: %p t_state: %d\n",
+				cmd, state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7957: FILE: drivers/target/target_core_transport.c:7889:
+			transport_send_check_condition_and_sense(cmd,
+				LOGICAL_UNIT_COMMUNICATION_FAILURE, 0);

CHECK:SPACING: No space is necessary after a cast
#7983: FILE: drivers/target/target_core_transport.c:7915:
+	se_device_t *dev = (se_device_t *) param;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7997: FILE: drivers/target/target_core_transport.c:7929:
+		ret = wait_event_interruptible(dev->dev_queue_obj->thread_wq,
+				atomic_read(&dev->dev_queue_obj->queue_cnt) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8027: FILE: drivers/target/target_core_transport.c:7959:
+				transport_generic_request_failure(cmd, NULL,
+					0, (cmd->data_direction !=

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8052: FILE: drivers/target/target_core_transport.c:7984:
+			printk(KERN_ERR "Unknown t_state: %d deferred_t_state:"

WARNING:SPLIT_STRING: quoted string split across lines
#8053: FILE: drivers/target/target_core_transport.c:7985:
+			printk(KERN_ERR "Unknown t_state: %d deferred_t_state:"
+				" %d for ITT: 0x%08x i_state: %d on SE LUN:"

WARNING:SPLIT_STRING: quoted string split across lines
#8054: FILE: drivers/target/target_core_transport.c:7986:
+				" %d for ITT: 0x%08x i_state: %d on SE LUN:"
+				" %u\n", t_state, cmd->deferred_t_state,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8058: FILE: drivers/target/target_core_transport.c:7990:
+			BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8076: FILE: include/target/target_core_transport.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#8099: FILE: include/target/target_core_transport.h:24:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#8100: FILE: include/target/target_core_transport.h:25:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8104: FILE: include/target/target_core_transport.h:29:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#8155: FILE: include/target/target_core_transport.h:80:
+ * se_subsystem_dev_t->su_dev_flags
+*/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ms' may be better as '(ms)' to avoid precedence issues
#8189: FILE: include/target/target_core_transport.h:114:
+#define MOD_MAX_SECTORS(ms, bs)			(ms % (PAGE_SIZE / bs))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bs' may be better as '(bs)' to avoid precedence issues
#8189: FILE: include/target/target_core_transport.h:114:
+#define MOD_MAX_SECTORS(ms, bs)			(ms % (PAGE_SIZE / bs))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8193: FILE: include/target/target_core_transport.h:118:
+extern int init_se_global(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8194: FILE: include/target/target_core_transport.h:119:
+extern void release_se_global(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8196: FILE: include/target/target_core_transport.h:121:
+extern int __iscsi_debug_dev(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8198: FILE: include/target/target_core_transport.h:123:
+extern unsigned char *transport_get_iqn_sn(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8199: FILE: include/target/target_core_transport.h:124:
+extern void transport_init_queue_obj(struct se_queue_obj_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_queue_obj_s *' should also have an identifier name
#8199: FILE: include/target/target_core_transport.h:124:
+extern void transport_init_queue_obj(struct se_queue_obj_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8200: FILE: include/target/target_core_transport.h:125:
+extern void transport_load_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8201: FILE: include/target/target_core_transport.h:126:
+extern struct se_plugin_s *transport_core_get_plugin_by_name(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8202: FILE: include/target/target_core_transport.h:127:
+extern void transport_check_dev_params_delim(char *, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8202: FILE: include/target/target_core_transport.h:127:
+extern void transport_check_dev_params_delim(char *, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#8202: FILE: include/target/target_core_transport.h:127:
+extern void transport_check_dev_params_delim(char *, char **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8203: FILE: include/target/target_core_transport.h:128:
+extern struct se_session_s *transport_init_session(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8204: FILE: include/target/target_core_transport.h:129:
+extern void __transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#8204: FILE: include/target/target_core_transport.h:129:
+extern void __transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#8204: FILE: include/target/target_core_transport.h:129:
+extern void __transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_session_s *' should also have an identifier name
#8204: FILE: include/target/target_core_transport.h:129:
+extern void __transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8204: FILE: include/target/target_core_transport.h:129:
+extern void __transport_register_session(struct se_portal_group_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8205: FILE: include/target/target_core_transport.h:130:
+extern void __transport_register_session(struct se_portal_group_s *,
+					struct se_node_acl_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8207: FILE: include/target/target_core_transport.h:132:
+extern void transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#8207: FILE: include/target/target_core_transport.h:132:
+extern void transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#8207: FILE: include/target/target_core_transport.h:132:
+extern void transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_session_s *' should also have an identifier name
#8207: FILE: include/target/target_core_transport.h:132:
+extern void transport_register_session(struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8207: FILE: include/target/target_core_transport.h:132:
+extern void transport_register_session(struct se_portal_group_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8208: FILE: include/target/target_core_transport.h:133:
+extern void transport_register_session(struct se_portal_group_s *,
+					struct se_node_acl_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8210: FILE: include/target/target_core_transport.h:135:
+extern void transport_free_session(struct se_session_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_session_s *' should also have an identifier name
#8210: FILE: include/target/target_core_transport.h:135:
+extern void transport_free_session(struct se_session_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8211: FILE: include/target/target_core_transport.h:136:
+extern void transport_deregister_session_configfs(struct se_session_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_session_s *' should also have an identifier name
#8211: FILE: include/target/target_core_transport.h:136:
+extern void transport_deregister_session_configfs(struct se_session_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8212: FILE: include/target/target_core_transport.h:137:
+extern void transport_deregister_session(struct se_session_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_session_s *' should also have an identifier name
#8212: FILE: include/target/target_core_transport.h:137:
+extern void transport_deregister_session(struct se_session_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8213: FILE: include/target/target_core_transport.h:138:
+extern void transport_task_dev_remove_state(struct se_task_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8213: FILE: include/target/target_core_transport.h:138:
+extern void transport_task_dev_remove_state(struct se_task_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8213: FILE: include/target/target_core_transport.h:138:
+extern void transport_task_dev_remove_state(struct se_task_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8214: FILE: include/target/target_core_transport.h:139:
+extern void transport_task_dev_remove_state(struct se_task_s *,
+						struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8215: FILE: include/target/target_core_transport.h:140:
+extern void transport_cmd_finish_abort(struct se_cmd_s *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8215: FILE: include/target/target_core_transport.h:140:
+extern void transport_cmd_finish_abort(struct se_cmd_s *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8215: FILE: include/target/target_core_transport.h:140:
+extern void transport_cmd_finish_abort(struct se_cmd_s *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8216: FILE: include/target/target_core_transport.h:141:
+extern void transport_cmd_finish_abort_tmr(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8216: FILE: include/target/target_core_transport.h:141:
+extern void transport_cmd_finish_abort_tmr(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8217: FILE: include/target/target_core_transport.h:142:
+extern int transport_add_cmd_to_queue(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8217: FILE: include/target/target_core_transport.h:142:
+extern int transport_add_cmd_to_queue(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_queue_obj_s *' should also have an identifier name
#8217: FILE: include/target/target_core_transport.h:142:
+extern int transport_add_cmd_to_queue(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#8217: FILE: include/target/target_core_transport.h:142:
+extern int transport_add_cmd_to_queue(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8218: FILE: include/target/target_core_transport.h:143:
+extern int transport_add_cmd_to_queue(struct se_cmd_s *,
+					struct se_queue_obj_s *, u8);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8219: FILE: include/target/target_core_transport.h:144:
+extern struct se_queue_req_s *__transport_get_qr_from_queue(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8219: FILE: include/target/target_core_transport.h:144:
+extern struct se_queue_req_s *__transport_get_qr_from_queue(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_queue_obj_s *' should also have an identifier name
#8219: FILE: include/target/target_core_transport.h:144:
+extern struct se_queue_req_s *__transport_get_qr_from_queue(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8221: FILE: include/target/target_core_transport.h:146:
+extern void transport_remove_cmd_from_queue(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8221: FILE: include/target/target_core_transport.h:146:
+extern void transport_remove_cmd_from_queue(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_queue_obj_s *' should also have an identifier name
#8221: FILE: include/target/target_core_transport.h:146:
+extern void transport_remove_cmd_from_queue(struct se_cmd_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8223: FILE: include/target/target_core_transport.h:148:
+extern void transport_complete_cmd(se_cmd_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8223: FILE: include/target/target_core_transport.h:148:
+extern void transport_complete_cmd(se_cmd_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8223: FILE: include/target/target_core_transport.h:148:
+extern void transport_complete_cmd(se_cmd_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8224: FILE: include/target/target_core_transport.h:149:
+extern void transport_complete_task(struct se_task_s *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8224: FILE: include/target/target_core_transport.h:149:
+extern void transport_complete_task(struct se_task_s *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8224: FILE: include/target/target_core_transport.h:149:
+extern void transport_complete_task(struct se_task_s *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8225: FILE: include/target/target_core_transport.h:150:
+extern void transport_add_task_to_execute_queue(struct se_task_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8225: FILE: include/target/target_core_transport.h:150:
+extern void transport_add_task_to_execute_queue(struct se_task_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8225: FILE: include/target/target_core_transport.h:150:
+extern void transport_add_task_to_execute_queue(struct se_task_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8225: FILE: include/target/target_core_transport.h:150:
+extern void transport_add_task_to_execute_queue(struct se_task_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8228: FILE: include/target/target_core_transport.h:153:
+extern void transport_add_tasks_from_cmd(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8228: FILE: include/target/target_core_transport.h:153:
+extern void transport_add_tasks_from_cmd(struct se_cmd_s *);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8229: FILE: include/target/target_core_transport.h:154:
+extern struct se_task_s *transport_get_task_from_execute_queue(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8229: FILE: include/target/target_core_transport.h:154:
+extern struct se_task_s *transport_get_task_from_execute_queue(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8229: FILE: include/target/target_core_transport.h:154:
+extern struct se_task_s *transport_get_task_from_execute_queue(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8231: FILE: include/target/target_core_transport.h:156:
+extern se_queue_req_t *transport_get_qr_from_queue(struct se_queue_obj_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_queue_obj_s *' should also have an identifier name
#8231: FILE: include/target/target_core_transport.h:156:
+extern se_queue_req_t *transport_get_qr_from_queue(struct se_queue_obj_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8232: FILE: include/target/target_core_transport.h:157:
+extern int transport_check_device_tcq(se_device_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8232: FILE: include/target/target_core_transport.h:157:
+extern int transport_check_device_tcq(se_device_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8232: FILE: include/target/target_core_transport.h:157:
+extern int transport_check_device_tcq(se_device_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8232: FILE: include/target/target_core_transport.h:157:
+extern int transport_check_device_tcq(se_device_t *, u32, u32);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#8233: FILE: include/target/target_core_transport.h:158:
+unsigned char *transport_dump_cmd_direction (struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8233: FILE: include/target/target_core_transport.h:158:
+unsigned char *transport_dump_cmd_direction (struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8234: FILE: include/target/target_core_transport.h:159:
+extern void transport_dump_dev_state(struct se_device_s *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8234: FILE: include/target/target_core_transport.h:159:
+extern void transport_dump_dev_state(struct se_device_s *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8234: FILE: include/target/target_core_transport.h:159:
+extern void transport_dump_dev_state(struct se_device_s *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#8234: FILE: include/target/target_core_transport.h:159:
+extern void transport_dump_dev_state(struct se_device_s *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8235: FILE: include/target/target_core_transport.h:160:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8235: FILE: include/target/target_core_transport.h:160:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#8235: FILE: include/target/target_core_transport.h:160:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#8235: FILE: include/target/target_core_transport.h:160:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8235: FILE: include/target/target_core_transport.h:160:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#8235: FILE: include/target/target_core_transport.h:160:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8236: FILE: include/target/target_core_transport.h:161:
+extern void transport_dump_dev_info(struct se_device_s *, struct se_lun_s *,
+					unsigned long long, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8237: FILE: include/target/target_core_transport.h:162:
+extern void transport_dump_vpd_proto_id(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_vpd_s *' should also have an identifier name
#8237: FILE: include/target/target_core_transport.h:162:
+extern void transport_dump_vpd_proto_id(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8237: FILE: include/target/target_core_transport.h:162:
+extern void transport_dump_vpd_proto_id(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8237: FILE: include/target/target_core_transport.h:162:
+extern void transport_dump_vpd_proto_id(struct t10_vpd_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8239: FILE: include/target/target_core_transport.h:164:
+extern int transport_dump_vpd_assoc(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_vpd_s *' should also have an identifier name
#8239: FILE: include/target/target_core_transport.h:164:
+extern int transport_dump_vpd_assoc(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8239: FILE: include/target/target_core_transport.h:164:
+extern int transport_dump_vpd_assoc(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8239: FILE: include/target/target_core_transport.h:164:
+extern int transport_dump_vpd_assoc(struct t10_vpd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8240: FILE: include/target/target_core_transport.h:165:
+extern int transport_dump_vpd_assoc(struct t10_vpd_s *,
+					unsigned char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8241: FILE: include/target/target_core_transport.h:166:
+extern int transport_dump_vpd_ident_type(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_vpd_s *' should also have an identifier name
#8241: FILE: include/target/target_core_transport.h:166:
+extern int transport_dump_vpd_ident_type(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8241: FILE: include/target/target_core_transport.h:166:
+extern int transport_dump_vpd_ident_type(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8241: FILE: include/target/target_core_transport.h:166:
+extern int transport_dump_vpd_ident_type(struct t10_vpd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8242: FILE: include/target/target_core_transport.h:167:
+extern int transport_dump_vpd_ident_type(struct t10_vpd_s *,
+					unsigned char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8243: FILE: include/target/target_core_transport.h:168:
+extern int transport_dump_vpd_ident(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_vpd_s *' should also have an identifier name
#8243: FILE: include/target/target_core_transport.h:168:
+extern int transport_dump_vpd_ident(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8243: FILE: include/target/target_core_transport.h:168:
+extern int transport_dump_vpd_ident(struct t10_vpd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8243: FILE: include/target/target_core_transport.h:168:
+extern int transport_dump_vpd_ident(struct t10_vpd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8244: FILE: include/target/target_core_transport.h:169:
+extern int transport_dump_vpd_ident(struct t10_vpd_s *,
+					unsigned char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8245: FILE: include/target/target_core_transport.h:170:
+extern int transport_rescan_evpd_device_ident(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8245: FILE: include/target/target_core_transport.h:170:
+extern int transport_rescan_evpd_device_ident(struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8246: FILE: include/target/target_core_transport.h:171:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#8246: FILE: include/target/target_core_transport.h:171:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_subsystem_api_s *' should also have an identifier name
#8246: FILE: include/target/target_core_transport.h:171:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_subsystem_dev_s *' should also have an identifier name
#8246: FILE: include/target/target_core_transport.h:171:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8246: FILE: include/target/target_core_transport.h:171:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8246: FILE: include/target/target_core_transport.h:171:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8247: FILE: include/target/target_core_transport.h:172:
+extern se_device_t *transport_add_device_to_core_hba(se_hba_t *,
+					struct se_subsystem_api_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8250: FILE: include/target/target_core_transport.h:175:
+extern int transport_generic_activate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8250: FILE: include/target/target_core_transport.h:175:
+extern int transport_generic_activate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8251: FILE: include/target/target_core_transport.h:176:
+extern void transport_generic_deactivate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8251: FILE: include/target/target_core_transport.h:176:
+extern void transport_generic_deactivate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8252: FILE: include/target/target_core_transport.h:177:
+extern int transport_generic_claim_phydevice(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8252: FILE: include/target/target_core_transport.h:177:
+extern int transport_generic_claim_phydevice(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8253: FILE: include/target/target_core_transport.h:178:
+extern void transport_generic_release_phydevice(se_device_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8253: FILE: include/target/target_core_transport.h:178:
+extern void transport_generic_release_phydevice(se_device_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8253: FILE: include/target/target_core_transport.h:178:
+extern void transport_generic_release_phydevice(se_device_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8254: FILE: include/target/target_core_transport.h:179:
+extern void transport_generic_free_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8254: FILE: include/target/target_core_transport.h:179:
+extern void transport_generic_free_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8255: FILE: include/target/target_core_transport.h:180:
+extern int transport_allocate_iovecs_for_cmd(struct se_cmd_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8255: FILE: include/target/target_core_transport.h:180:
+extern int transport_allocate_iovecs_for_cmd(struct se_cmd_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8255: FILE: include/target/target_core_transport.h:180:
+extern int transport_allocate_iovecs_for_cmd(struct se_cmd_s *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8256: FILE: include/target/target_core_transport.h:181:
+extern int transport_generic_obj_start(struct se_transform_info_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_transform_info_s *' should also have an identifier name
#8256: FILE: include/target/target_core_transport.h:181:
+extern int transport_generic_obj_start(struct se_transform_info_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_obj_lun_type_s *' should also have an identifier name
#8256: FILE: include/target/target_core_transport.h:181:
+extern int transport_generic_obj_start(struct se_transform_info_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8256: FILE: include/target/target_core_transport.h:181:
+extern int transport_generic_obj_start(struct se_transform_info_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#8256: FILE: include/target/target_core_transport.h:181:
+extern int transport_generic_obj_start(struct se_transform_info_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8257: FILE: include/target/target_core_transport.h:182:
+extern int transport_generic_obj_start(struct se_transform_info_s *,
+					struct se_obj_lun_type_s *, void *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8259: FILE: include/target/target_core_transport.h:184:
+extern void transport_device_setup_cmd(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8259: FILE: include/target/target_core_transport.h:184:
+extern void transport_device_setup_cmd(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8260: FILE: include/target/target_core_transport.h:185:
+extern int transport_check_alloc_task_attr(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8260: FILE: include/target/target_core_transport.h:185:
+extern int transport_check_alloc_task_attr(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct target_core_fabric_ops *' should also have an identifier name
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_session_s *' should also have an identifier name
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8261: FILE: include/target/target_core_transport.h:186:
+extern se_cmd_t *transport_alloc_se_cmd(struct target_core_fabric_ops *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8264: FILE: include/target/target_core_transport.h:189:
+extern void transport_free_se_cmd(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8264: FILE: include/target/target_core_transport.h:189:
+extern void transport_free_se_cmd(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8265: FILE: include/target/target_core_transport.h:190:
+extern int transport_generic_allocate_tasks(se_cmd_t *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8265: FILE: include/target/target_core_transport.h:190:
+extern int transport_generic_allocate_tasks(se_cmd_t *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8265: FILE: include/target/target_core_transport.h:190:
+extern int transport_generic_allocate_tasks(se_cmd_t *, unsigned char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8266: FILE: include/target/target_core_transport.h:191:
+extern int transport_generic_handle_cdb(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8266: FILE: include/target/target_core_transport.h:191:
+extern int transport_generic_handle_cdb(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8267: FILE: include/target/target_core_transport.h:192:
+extern int transport_generic_handle_data(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8267: FILE: include/target/target_core_transport.h:192:
+extern int transport_generic_handle_data(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8268: FILE: include/target/target_core_transport.h:193:
+extern int transport_generic_handle_tmr(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8268: FILE: include/target/target_core_transport.h:193:
+extern int transport_generic_handle_tmr(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8269: FILE: include/target/target_core_transport.h:194:
+extern void transport_stop_tasks_for_cmd(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8269: FILE: include/target/target_core_transport.h:194:
+extern void transport_stop_tasks_for_cmd(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8270: FILE: include/target/target_core_transport.h:195:
+extern void transport_generic_request_failure(se_cmd_t *, se_device_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8270: FILE: include/target/target_core_transport.h:195:
+extern void transport_generic_request_failure(se_cmd_t *, se_device_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8270: FILE: include/target/target_core_transport.h:195:
+extern void transport_generic_request_failure(se_cmd_t *, se_device_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8270: FILE: include/target/target_core_transport.h:195:
+extern void transport_generic_request_failure(se_cmd_t *, se_device_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8270: FILE: include/target/target_core_transport.h:195:
+extern void transport_generic_request_failure(se_cmd_t *, se_device_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8271: FILE: include/target/target_core_transport.h:196:
+extern void transport_generic_request_failure(se_cmd_t *, se_device_t *,
+						int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8272: FILE: include/target/target_core_transport.h:197:
+extern void transport_direct_request_timeout(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8272: FILE: include/target/target_core_transport.h:197:
+extern void transport_direct_request_timeout(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8273: FILE: include/target/target_core_transport.h:198:
+extern void transport_generic_request_timeout(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8273: FILE: include/target/target_core_transport.h:198:
+extern void transport_generic_request_timeout(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8274: FILE: include/target/target_core_transport.h:199:
+extern int transport_generic_allocate_buf(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8274: FILE: include/target/target_core_transport.h:199:
+extern int transport_generic_allocate_buf(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8274: FILE: include/target/target_core_transport.h:199:
+extern int transport_generic_allocate_buf(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8274: FILE: include/target/target_core_transport.h:199:
+extern int transport_generic_allocate_buf(se_cmd_t *, u32, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8275: FILE: include/target/target_core_transport.h:200:
+extern int __transport_execute_tasks(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8275: FILE: include/target/target_core_transport.h:200:
+extern int __transport_execute_tasks(struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8276: FILE: include/target/target_core_transport.h:201:
+extern void transport_new_cmd_failure(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8276: FILE: include/target/target_core_transport.h:201:
+extern void transport_new_cmd_failure(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8277: FILE: include/target/target_core_transport.h:202:
+extern u32 transport_get_default_task_timeout(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8277: FILE: include/target/target_core_transport.h:202:
+extern u32 transport_get_default_task_timeout(struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8278: FILE: include/target/target_core_transport.h:203:
+extern void transport_set_supported_SAM_opcode(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8278: FILE: include/target/target_core_transport.h:203:
+extern void transport_set_supported_SAM_opcode(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8279: FILE: include/target/target_core_transport.h:204:
+extern void transport_start_task_timer(struct se_task_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8279: FILE: include/target/target_core_transport.h:204:
+extern void transport_start_task_timer(struct se_task_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8280: FILE: include/target/target_core_transport.h:205:
+extern void __transport_stop_task_timer(struct se_task_s *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8280: FILE: include/target/target_core_transport.h:205:
+extern void __transport_stop_task_timer(struct se_task_s *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#8280: FILE: include/target/target_core_transport.h:205:
+extern void __transport_stop_task_timer(struct se_task_s *, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8281: FILE: include/target/target_core_transport.h:206:
+extern void transport_stop_task_timer(struct se_task_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8281: FILE: include/target/target_core_transport.h:206:
+extern void transport_stop_task_timer(struct se_task_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8282: FILE: include/target/target_core_transport.h:207:
+extern void transport_stop_all_task_timers(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8282: FILE: include/target/target_core_transport.h:207:
+extern void transport_stop_all_task_timers(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8283: FILE: include/target/target_core_transport.h:208:
+extern int transport_execute_tasks(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8283: FILE: include/target/target_core_transport.h:208:
+extern int transport_execute_tasks(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8284: FILE: include/target/target_core_transport.h:209:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8284: FILE: include/target/target_core_transport.h:209:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#8284: FILE: include/target/target_core_transport.h:209:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8284: FILE: include/target/target_core_transport.h:209:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8284: FILE: include/target/target_core_transport.h:209:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8284: FILE: include/target/target_core_transport.h:209:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8285: FILE: include/target/target_core_transport.h:210:
+extern int transport_generic_emulate_inquiry(struct se_cmd_s *, unsigned char,
+					unsigned char *, unsigned char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8287: FILE: include/target/target_core_transport.h:212:
+extern int transport_generic_emulate_readcapacity(struct se_cmd_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8287: FILE: include/target/target_core_transport.h:212:
+extern int transport_generic_emulate_readcapacity(struct se_cmd_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8287: FILE: include/target/target_core_transport.h:212:
+extern int transport_generic_emulate_readcapacity(struct se_cmd_s *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8288: FILE: include/target/target_core_transport.h:213:
+extern int transport_generic_emulate_readcapacity_16(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8288: FILE: include/target/target_core_transport.h:213:
+extern int transport_generic_emulate_readcapacity_16(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#8288: FILE: include/target/target_core_transport.h:213:
+extern int transport_generic_emulate_readcapacity_16(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8289: FILE: include/target/target_core_transport.h:214:
+extern int transport_generic_emulate_readcapacity_16(struct se_cmd_s *,
+							unsigned long long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8290: FILE: include/target/target_core_transport.h:215:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8290: FILE: include/target/target_core_transport.h:215:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8290: FILE: include/target/target_core_transport.h:215:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8290: FILE: include/target/target_core_transport.h:215:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8290: FILE: include/target/target_core_transport.h:215:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8290: FILE: include/target/target_core_transport.h:215:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8291: FILE: include/target/target_core_transport.h:216:
+extern int transport_generic_emulate_modesense(struct se_cmd_s *,
+						unsigned char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8293: FILE: include/target/target_core_transport.h:218:
+extern int transport_generic_emulate_request_sense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8293: FILE: include/target/target_core_transport.h:218:
+extern int transport_generic_emulate_request_sense(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8293: FILE: include/target/target_core_transport.h:218:
+extern int transport_generic_emulate_request_sense(struct se_cmd_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8295: FILE: include/target/target_core_transport.h:220:
+extern int transport_get_sense_data(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8295: FILE: include/target/target_core_transport.h:220:
+extern int transport_get_sense_data(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_obj_lun_type_s *' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8296: FILE: include/target/target_core_transport.h:221:
+extern se_cmd_t *transport_allocate_passthrough(unsigned char *, int, u32,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8300: FILE: include/target/target_core_transport.h:225:
+extern void transport_passthrough_release(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8300: FILE: include/target/target_core_transport.h:225:
+extern void transport_passthrough_release(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8301: FILE: include/target/target_core_transport.h:226:
+extern int transport_passthrough_complete(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8301: FILE: include/target/target_core_transport.h:226:
+extern int transport_passthrough_complete(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8302: FILE: include/target/target_core_transport.h:227:
+extern int transport_generic_passthrough_async(se_cmd_t *cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8303: FILE: include/target/target_core_transport.h:228:
+extern int transport_generic_passthrough_async(se_cmd_t *cmd,
+				void(*callback)(se_cmd_t *cmd,

WARNING:SPACING: missing space after return type
#8303: FILE: include/target/target_core_transport.h:228:
+				void(*callback)(se_cmd_t *cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8304: FILE: include/target/target_core_transport.h:229:
+				void(*callback)(se_cmd_t *cmd,
+				void *callback_arg, int complete_status),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8306: FILE: include/target/target_core_transport.h:231:
+extern int transport_generic_passthrough(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8306: FILE: include/target/target_core_transport.h:231:
+extern int transport_generic_passthrough(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8307: FILE: include/target/target_core_transport.h:232:
+extern void transport_complete_task_attr(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8307: FILE: include/target/target_core_transport.h:232:
+extern void transport_complete_task_attr(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8308: FILE: include/target/target_core_transport.h:233:
+extern void transport_generic_complete_ok(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8308: FILE: include/target/target_core_transport.h:233:
+extern void transport_generic_complete_ok(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8309: FILE: include/target/target_core_transport.h:234:
+extern void transport_free_dev_tasks(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8309: FILE: include/target/target_core_transport.h:234:
+extern void transport_free_dev_tasks(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8310: FILE: include/target/target_core_transport.h:235:
+extern void transport_release_tasks(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8310: FILE: include/target/target_core_transport.h:235:
+extern void transport_release_tasks(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8311: FILE: include/target/target_core_transport.h:236:
+extern void transport_release_fe_cmd(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8311: FILE: include/target/target_core_transport.h:236:
+extern void transport_release_fe_cmd(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8312: FILE: include/target/target_core_transport.h:237:
+extern int transport_generic_remove(se_cmd_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8312: FILE: include/target/target_core_transport.h:237:
+extern int transport_generic_remove(se_cmd_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8312: FILE: include/target/target_core_transport.h:237:
+extern int transport_generic_remove(se_cmd_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8312: FILE: include/target/target_core_transport.h:237:
+extern int transport_generic_remove(se_cmd_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8313: FILE: include/target/target_core_transport.h:238:
+extern int transport_lun_wait_for_tasks(se_cmd_t *, se_lun_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8313: FILE: include/target/target_core_transport.h:238:
+extern int transport_lun_wait_for_tasks(se_cmd_t *, se_lun_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_lun_t *' should also have an identifier name
#8313: FILE: include/target/target_core_transport.h:238:
+extern int transport_lun_wait_for_tasks(se_cmd_t *, se_lun_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8314: FILE: include/target/target_core_transport.h:239:
+extern void transport_clear_lun_from_sessions(se_lun_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_lun_t *' should also have an identifier name
#8314: FILE: include/target/target_core_transport.h:239:
+extern void transport_clear_lun_from_sessions(se_lun_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8315: FILE: include/target/target_core_transport.h:240:
+extern int transport_check_aborted_status(se_cmd_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8315: FILE: include/target/target_core_transport.h:240:
+extern int transport_check_aborted_status(se_cmd_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8315: FILE: include/target/target_core_transport.h:240:
+extern int transport_check_aborted_status(se_cmd_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8316: FILE: include/target/target_core_transport.h:241:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8316: FILE: include/target/target_core_transport.h:241:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#8316: FILE: include/target/target_core_transport.h:241:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#8316: FILE: include/target/target_core_transport.h:241:
+extern int transport_get_sense_codes(se_cmd_t *, u8 *, u8 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8317: FILE: include/target/target_core_transport.h:242:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8317: FILE: include/target/target_core_transport.h:242:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#8317: FILE: include/target/target_core_transport.h:242:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#8317: FILE: include/target/target_core_transport.h:242:
+extern int transport_set_sense_codes(se_cmd_t *, u8, u8);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8318: FILE: include/target/target_core_transport.h:243:
+extern int transport_send_check_condition_and_sense(se_cmd_t *, u8, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8318: FILE: include/target/target_core_transport.h:243:
+extern int transport_send_check_condition_and_sense(se_cmd_t *, u8, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#8318: FILE: include/target/target_core_transport.h:243:
+extern int transport_send_check_condition_and_sense(se_cmd_t *, u8, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8318: FILE: include/target/target_core_transport.h:243:
+extern int transport_send_check_condition_and_sense(se_cmd_t *, u8, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8319: FILE: include/target/target_core_transport.h:244:
+extern void transport_send_task_abort(struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8319: FILE: include/target/target_core_transport.h:244:
+extern void transport_send_task_abort(struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8320: FILE: include/target/target_core_transport.h:245:
+extern void transport_release_cmd_to_pool(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8320: FILE: include/target/target_core_transport.h:245:
+extern void transport_release_cmd_to_pool(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8321: FILE: include/target/target_core_transport.h:246:
+extern void transport_generic_free_cmd(se_cmd_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8321: FILE: include/target/target_core_transport.h:246:
+extern void transport_generic_free_cmd(se_cmd_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8321: FILE: include/target/target_core_transport.h:246:
+extern void transport_generic_free_cmd(se_cmd_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8321: FILE: include/target/target_core_transport.h:246:
+extern void transport_generic_free_cmd(se_cmd_t *, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8321: FILE: include/target/target_core_transport.h:246:
+extern void transport_generic_free_cmd(se_cmd_t *, int, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8322: FILE: include/target/target_core_transport.h:247:
+extern void transport_generic_wait_for_cmds(se_cmd_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8322: FILE: include/target/target_core_transport.h:247:
+extern void transport_generic_wait_for_cmds(se_cmd_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8322: FILE: include/target/target_core_transport.h:247:
+extern void transport_generic_wait_for_cmds(se_cmd_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8323: FILE: include/target/target_core_transport.h:248:
+extern int transport_generic_do_transform(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8323: FILE: include/target/target_core_transport.h:248:
+extern int transport_generic_do_transform(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_transform_info_s *' should also have an identifier name
#8323: FILE: include/target/target_core_transport.h:248:
+extern int transport_generic_do_transform(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8324: FILE: include/target/target_core_transport.h:249:
+extern int transport_generic_do_transform(struct se_cmd_s *,
+					struct se_transform_info_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8325: FILE: include/target/target_core_transport.h:250:
+extern int transport_get_sectors(struct se_cmd_s *, struct se_obj_lun_type_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8325: FILE: include/target/target_core_transport.h:250:
+extern int transport_get_sectors(struct se_cmd_s *, struct se_obj_lun_type_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_obj_lun_type_s *' should also have an identifier name
#8325: FILE: include/target/target_core_transport.h:250:
+extern int transport_get_sectors(struct se_cmd_s *, struct se_obj_lun_type_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8325: FILE: include/target/target_core_transport.h:250:
+extern int transport_get_sectors(struct se_cmd_s *, struct se_obj_lun_type_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8326: FILE: include/target/target_core_transport.h:251:
+extern int transport_get_sectors(struct se_cmd_s *, struct se_obj_lun_type_s *,
+					void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8327: FILE: include/target/target_core_transport.h:252:
+extern int transport_new_cmd_obj(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8327: FILE: include/target/target_core_transport.h:252:
+extern int transport_new_cmd_obj(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_transform_info_s *' should also have an identifier name
#8327: FILE: include/target/target_core_transport.h:252:
+extern int transport_new_cmd_obj(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_obj_lun_type_s *' should also have an identifier name
#8327: FILE: include/target/target_core_transport.h:252:
+extern int transport_new_cmd_obj(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8327: FILE: include/target/target_core_transport.h:252:
+extern int transport_new_cmd_obj(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8327: FILE: include/target/target_core_transport.h:252:
+extern int transport_new_cmd_obj(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8328: FILE: include/target/target_core_transport.h:253:
+extern int transport_new_cmd_obj(struct se_cmd_s *,
+				struct se_transform_info_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8330: FILE: include/target/target_core_transport.h:255:
+extern unsigned char *transport_get_vaddr(struct se_mem_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#8330: FILE: include/target/target_core_transport.h:255:
+extern unsigned char *transport_get_vaddr(struct se_mem_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8331: FILE: include/target/target_core_transport.h:256:
+extern struct list_head *transport_init_se_mem_list(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8332: FILE: include/target/target_core_transport.h:257:
+extern void transport_free_se_mem_list(struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#8332: FILE: include/target/target_core_transport.h:257:
+extern void transport_free_se_mem_list(struct list_head *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8333: FILE: include/target/target_core_transport.h:258:
+extern int transport_generic_get_mem(struct se_cmd_s *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8333: FILE: include/target/target_core_transport.h:258:
+extern int transport_generic_get_mem(struct se_cmd_s *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8333: FILE: include/target/target_core_transport.h:258:
+extern int transport_generic_get_mem(struct se_cmd_s *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8333: FILE: include/target/target_core_transport.h:258:
+extern int transport_generic_get_mem(struct se_cmd_s *, u32, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8334: FILE: include/target/target_core_transport.h:259:
+extern u32 transport_calc_sg_num(struct se_task_s *, struct se_mem_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8334: FILE: include/target/target_core_transport.h:259:
+extern u32 transport_calc_sg_num(struct se_task_s *, struct se_mem_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#8334: FILE: include/target/target_core_transport.h:259:
+extern u32 transport_calc_sg_num(struct se_task_s *, struct se_mem_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8334: FILE: include/target/target_core_transport.h:259:
+extern u32 transport_calc_sg_num(struct se_task_s *, struct se_mem_s *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s **' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8335: FILE: include/target/target_core_transport.h:260:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8336: FILE: include/target/target_core_transport.h:261:
+extern int transport_map_sg_to_mem(struct se_task_s *, struct list_head *,
+					void *, struct se_mem_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s **' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8338: FILE: include/target/target_core_transport.h:263:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8339: FILE: include/target/target_core_transport.h:264:
+extern int transport_map_mem_to_mem(struct se_task_s *, struct list_head *,
+					void *, struct se_mem_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s **' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8341: FILE: include/target/target_core_transport.h:266:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8342: FILE: include/target/target_core_transport.h:267:
+extern int transport_map_mem_to_sg(struct se_task_s *, struct list_head *,
+					void *, struct se_mem_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_transform_info_s *' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_obj_lun_type_s *' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s **' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8344: FILE: include/target/target_core_transport.h:269:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8345: FILE: include/target/target_core_transport.h:270:
+extern u32 transport_generic_get_cdb_count(struct se_cmd_s *,
+					struct se_transform_info_s *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8350: FILE: include/target/target_core_transport.h:275:
+extern int transport_generic_new_cmd(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8350: FILE: include/target/target_core_transport.h:275:
+extern int transport_generic_new_cmd(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8351: FILE: include/target/target_core_transport.h:276:
+extern void transport_generic_process_write(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8351: FILE: include/target/target_core_transport.h:276:
+extern void transport_generic_process_write(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8352: FILE: include/target/target_core_transport.h:277:
+extern int transport_generic_do_tmr(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8352: FILE: include/target/target_core_transport.h:277:
+extern int transport_generic_do_tmr(se_cmd_t *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8360: FILE: include/target/target_core_transport.h:285:
+typedef struct se_mem_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8371: FILE: include/target/target_core_transport.h:296:
+typedef struct se_subsystem_spc_s {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8372: FILE: include/target/target_core_transport.h:297:
+	int (*inquiry)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8372: FILE: include/target/target_core_transport.h:297:
+	int (*inquiry)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8373: FILE: include/target/target_core_transport.h:298:
+	int (*none)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8373: FILE: include/target/target_core_transport.h:298:
+	int (*none)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8374: FILE: include/target/target_core_transport.h:299:
+	int (*read_non_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8374: FILE: include/target/target_core_transport.h:299:
+	int (*read_non_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8375: FILE: include/target/target_core_transport.h:300:
+	int (*read_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8375: FILE: include/target/target_core_transport.h:300:
+	int (*read_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8376: FILE: include/target/target_core_transport.h:301:
+	int (*write_non_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8376: FILE: include/target/target_core_transport.h:301:
+	int (*write_non_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8377: FILE: include/target/target_core_transport.h:302:
+	int (*write_SG)(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8377: FILE: include/target/target_core_transport.h:302:
+	int (*write_SG)(se_task_t *, u32);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#8381: FILE: include/target/target_core_transport.h:306:
+ * ^IEach type of disk transport supported MUST have a template defined$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#8384: FILE: include/target/target_core_transport.h:309:
+typedef struct se_subsystem_api_s {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#8400: FILE: include/target/target_core_transport.h:325:
+	int (*attach_hba)(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8400: FILE: include/target/target_core_transport.h:325:
+	int (*attach_hba)(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_hba_s *' should also have an identifier name
#8404: FILE: include/target/target_core_transport.h:329:
+	int (*detach_hba)(struct se_hba_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_hba_s *' should also have an identifier name
#8408: FILE: include/target/target_core_transport.h:333:
+	int (*claim_phydevice)(struct se_hba_s *, struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8408: FILE: include/target/target_core_transport.h:333:
+	int (*claim_phydevice)(struct se_hba_s *, struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_hba_s *' should also have an identifier name
#8412: FILE: include/target/target_core_transport.h:337:
+	void *(*allocate_virtdevice)(struct se_hba_s *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#8412: FILE: include/target/target_core_transport.h:337:
+	void *(*allocate_virtdevice)(struct se_hba_s *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_hba_s *' should also have an identifier name
#8416: FILE: include/target/target_core_transport.h:341:
+	se_device_t *(*create_virtdevice)(struct se_hba_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_subsystem_dev_s *' should also have an identifier name
#8416: FILE: include/target/target_core_transport.h:341:
+	se_device_t *(*create_virtdevice)(struct se_hba_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8416: FILE: include/target/target_core_transport.h:341:
+	se_device_t *(*create_virtdevice)(struct se_hba_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8417: FILE: include/target/target_core_transport.h:342:
+	se_device_t *(*create_virtdevice)(struct se_hba_s *,
+				struct se_subsystem_dev_s *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8421: FILE: include/target/target_core_transport.h:346:
+	int (*activate_device)(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8425: FILE: include/target/target_core_transport.h:350:
+	void (*deactivate_device)(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#8429: FILE: include/target/target_core_transport.h:354:
+	int (*release_phydevice)(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8433: FILE: include/target/target_core_transport.h:358:
+	void (*free_device)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8459: FILE: include/target/target_core_transport.h:384:
+	void *(*allocate_request)(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8459: FILE: include/target/target_core_transport.h:384:
+	void *(*allocate_request)(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8463: FILE: include/target/target_core_transport.h:388:
+	int (*allocate_buf)(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8463: FILE: include/target/target_core_transport.h:388:
+	int (*allocate_buf)(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8463: FILE: include/target/target_core_transport.h:388:
+	int (*allocate_buf)(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8467: FILE: include/target/target_core_transport.h:392:
+	int (*allocate_DMA)(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8467: FILE: include/target/target_core_transport.h:392:
+	int (*allocate_DMA)(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8467: FILE: include/target/target_core_transport.h:392:
+	int (*allocate_DMA)(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8471: FILE: include/target/target_core_transport.h:396:
+	void (*free_buf)(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#8475: FILE: include/target/target_core_transport.h:400:
+	void (*free_DMA)(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8479: FILE: include/target/target_core_transport.h:404:
+	int (*do_task)(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8483: FILE: include/target/target_core_transport.h:408:
+	void (*free_task)(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#8487: FILE: include/target/target_core_transport.h:412:
+	ssize_t (*check_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#8487: FILE: include/target/target_core_transport.h:412:
+	ssize_t (*check_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#8491: FILE: include/target/target_core_transport.h:416:
+	ssize_t (*set_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#8491: FILE: include/target/target_core_transport.h:416:
+	ssize_t (*set_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#8491: FILE: include/target/target_core_transport.h:416:
+	ssize_t (*set_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#8491: FILE: include/target/target_core_transport.h:416:
+	ssize_t (*set_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8492: FILE: include/target/target_core_transport.h:417:
+	ssize_t (*set_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,
+						const char *, ssize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#8496: FILE: include/target/target_core_transport.h:421:
+	ssize_t (*show_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#8496: FILE: include/target/target_core_transport.h:421:
+	ssize_t (*show_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8496: FILE: include/target/target_core_transport.h:421:
+	ssize_t (*show_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8497: FILE: include/target/target_core_transport.h:422:
+	ssize_t (*show_configfs_dev_params)(se_hba_t *, se_subsystem_dev_t *,
+						char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#8501: FILE: include/target/target_core_transport.h:426:
+	se_device_t *(*create_virtdevice_from_fd)(se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#8501: FILE: include/target/target_core_transport.h:426:
+	se_device_t *(*create_virtdevice_from_fd)(se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8502: FILE: include/target/target_core_transport.h:427:
+	se_device_t *(*create_virtdevice_from_fd)(se_subsystem_dev_t *,
+						const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8514: FILE: include/target/target_core_transport.h:439:
+	void (*get_plugin_info)(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8514: FILE: include/target/target_core_transport.h:439:
+	void (*get_plugin_info)(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#8514: FILE: include/target/target_core_transport.h:439:
+	void (*get_plugin_info)(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#8518: FILE: include/target/target_core_transport.h:443:
+	void (*get_hba_info)(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8518: FILE: include/target/target_core_transport.h:443:
+	void (*get_hba_info)(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#8518: FILE: include/target/target_core_transport.h:443:
+	void (*get_hba_info)(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8522: FILE: include/target/target_core_transport.h:447:
+	void (*get_dev_info)(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#8522: FILE: include/target/target_core_transport.h:447:
+	void (*get_dev_info)(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#8522: FILE: include/target/target_core_transport.h:447:
+	void (*get_dev_info)(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8526: FILE: include/target/target_core_transport.h:451:
+	int (*check_lba)(unsigned long long lba, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8530: FILE: include/target/target_core_transport.h:455:
+	int (*check_for_SG)(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8534: FILE: include/target/target_core_transport.h:459:
+	unsigned char *(*get_cdb)(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8538: FILE: include/target/target_core_transport.h:463:
+	u32 (*get_blocksize)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8542: FILE: include/target/target_core_transport.h:467:
+	u32 (*get_device_rev)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8546: FILE: include/target/target_core_transport.h:471:
+	u32 (*get_device_type)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#8550: FILE: include/target/target_core_transport.h:475:
+	u32 (*get_dma_length)(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8550: FILE: include/target/target_core_transport.h:475:
+	u32 (*get_dma_length)(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8554: FILE: include/target/target_core_transport.h:479:
+	u32 (*get_max_cdbs)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8558: FILE: include/target/target_core_transport.h:483:
+	 u32 (*get_max_sectors)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8563: FILE: include/target/target_core_transport.h:488:
+	u32 (*get_queue_depth)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#8567: FILE: include/target/target_core_transport.h:492:
+	u32 (*get_max_queue_depth)(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_mem_t *' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_mem_t **' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#8571: FILE: include/target/target_core_transport.h:496:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8572: FILE: include/target/target_core_transport.h:497:
+	int (*do_se_mem_map)(se_task_t *, struct list_head *, void *,
+				se_mem_t *, se_mem_t **, u32 *, u32 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8576: FILE: include/target/target_core_transport.h:501:
+	unsigned char *(*get_sense_buffer)(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8580: FILE: include/target/target_core_transport.h:505:
+	void (*map_task_to_SG)(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_map_sg_t *' should also have an identifier name
#8584: FILE: include/target/target_core_transport.h:509:
+	int (*set_iovec_ptrs)(se_map_sg_t *, se_unmap_sg_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_unmap_sg_t *' should also have an identifier name
#8584: FILE: include/target/target_core_transport.h:509:
+	int (*set_iovec_ptrs)(se_map_sg_t *, se_unmap_sg_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#8588: FILE: include/target/target_core_transport.h:513:
+	int (*write_pending)(se_task_t *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8611: FILE: include/target/target_core_transport_plugin.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#8632: FILE: include/target/target_core_transport_plugin.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#8633: FILE: include/target/target_core_transport_plugin.h:23:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8637: FILE: include/target/target_core_transport_plugin.h:27:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070289.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 710 warnings, 505 checks, 8597 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070289.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
