WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core-locking-for-linus

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#146: FILE: arch/m68k/include/asm/entry_no.h:75:
+	movel	%a0@-,%sp@(PT_OFF_PC)	/* copy exception program counter */
 	     	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxO)
#146: FILE: arch/m68k/include/asm/entry_no.h:75:
+	movel	%a0@-,%sp@(PT_OFF_PC)	/* copy exception program counter */
 	     	    ^

ERROR:SPACING: space required after that ',' (ctx:OxO)
#146: FILE: arch/m68k/include/asm/entry_no.h:75:
+	movel	%a0@-,%sp@(PT_OFF_PC)	/* copy exception program counter */
 	     	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#146: FILE: arch/m68k/include/asm/entry_no.h:75:
+	movel	%a0@-,%sp@(PT_OFF_PC)	/* copy exception program counter */
 	     	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#147: FILE: arch/m68k/include/asm/entry_no.h:76:
+	movel	%a0@-,%sp@(PT_OFF_FORMATVEC)/*copy exception format/vector/sr */
 	     	^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxO)
#147: FILE: arch/m68k/include/asm/entry_no.h:76:
+	movel	%a0@-,%sp@(PT_OFF_FORMATVEC)/*copy exception format/vector/sr */
 	     	    ^

ERROR:SPACING: space required after that ',' (ctx:OxO)
#147: FILE: arch/m68k/include/asm/entry_no.h:76:
+	movel	%a0@-,%sp@(PT_OFF_FORMATVEC)/*copy exception format/vector/sr */
 	     	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#147: FILE: arch/m68k/include/asm/entry_no.h:76:
+	movel	%a0@-,%sp@(PT_OFF_FORMATVEC)/*copy exception format/vector/sr */
 	     	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#157: FILE: arch/m68k/include/asm/entry_no.h:92:
+	movel	%sp@(PT_OFF_PC),%a0@-	/* copy exception program counter */
 	     	^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#157: FILE: arch/m68k/include/asm/entry_no.h:92:
+	movel	%sp@(PT_OFF_PC),%a0@-	/* copy exception program counter */
 	     	               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#157: FILE: arch/m68k/include/asm/entry_no.h:92:
+	movel	%sp@(PT_OFF_PC),%a0@-	/* copy exception program counter */
 	     	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#157: FILE: arch/m68k/include/asm/entry_no.h:92:
+	movel	%sp@(PT_OFF_PC),%a0@-	/* copy exception program counter */
 	     	                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#158: FILE: arch/m68k/include/asm/entry_no.h:93:
+	movel	%sp@(PT_OFF_FORMATVEC),%a0@-/*copy exception format/vector/sr */
 	     	^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#158: FILE: arch/m68k/include/asm/entry_no.h:93:
+	movel	%sp@(PT_OFF_FORMATVEC),%a0@-/*copy exception format/vector/sr */
 	     	                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#158: FILE: arch/m68k/include/asm/entry_no.h:93:
+	movel	%sp@(PT_OFF_FORMATVEC),%a0@-/*copy exception format/vector/sr */
 	     	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxC)
#158: FILE: arch/m68k/include/asm/entry_no.h:93:
+	movel	%sp@(PT_OFF_FORMATVEC),%a0@-/*copy exception format/vector/sr */
 	     	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: arch/m68k/include/asm/math-emu.h:156:
+#define FPS_EA		(PT_OFF_PC+6)
               		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: arch/m68k/include/asm/math-emu.h:157:
+#define FPS_PC2		(PT_OFF_PC+10)
                		          ^

CHECK:SPACING: No space is necessary after a cast
#214: FILE: arch/m68k/include/asm/thread_info_mm.h:39:
+#define task_thread_info(tsk)	((struct thread_info *) NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#216: FILE: arch/m68k/include/asm/thread_info_mm.h:41:
+#define task_thread_info(tsk)	((struct thread_info *)((char *)tsk+TASK_TINFO))
                              	                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#216: FILE: arch/m68k/include/asm/thread_info_mm.h:41:
+#define task_thread_info(tsk)	((struct thread_info *)((char *)tsk+TASK_TINFO))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#714: FILE: arch/sparc/include/asm/spinlock_64.h:95:
+static void inline arch_read_lock(raw_rwlock_t *lock)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#723: FILE: arch/sparc/include/asm/spinlock_64.h:118:
+static int inline arch_read_trylock(raw_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#732: FILE: arch/sparc/include/asm/spinlock_64.h:139:
+static void inline arch_read_unlock(raw_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#741: FILE: arch/sparc/include/asm/spinlock_64.h:155:
+static void inline arch_write_lock(raw_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#750: FILE: arch/sparc/include/asm/spinlock_64.h:180:
+static void inline arch_write_unlock(raw_rwlock_t *lock)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#759: FILE: arch/sparc/include/asm/spinlock_64.h:189:
+static int inline arch_write_trylock(raw_rwlock_t *lock)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/linux/lockdep.h:304:
+extern int lock_is_held(struct lockdep_map *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1363: FILE: kernel/lockdep.c:377:
+	if (trace->entries[trace->nr_entries-1] == ULONG_MAX)
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1371: FILE: kernel/lockdep.c:384:
+	if (nr_stack_trace_entries >= MAX_STACK_TRACE_ENTRIES-1) {
 	                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1474: FILE: kernel/lockdep.c:846:
+#define CQ_MASK				(MAX_CIRCULAR_QUEUE_SIZE-1)
                				                        ^

WARNING:TYPO_SPELLING: 'algorithem' may be misspelled - perhaps 'algorithm'?
#1478: FILE: kernel/lockdep.c:850:
+ * breadth-first search(BFS)algorithem, by which we can build
                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1495: FILE: kernel/lockdep.c:867:
+	cq->front = cq->rear = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1535: FILE: kernel/lockdep.c:907:
+static inline void mark_lock_accessed(struct lock_list *lock,
+					struct lock_list *parent)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1617: FILE: kernel/lockdep.c:989:
+				unsigned int cq_depth;
+				mark_lock_accessed(entry, lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1639: FILE: kernel/lockdep.c:1011:
+static inline int __bfs_forwards(struct lock_list *src_entry,
+			void *data,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1645: FILE: kernel/lockdep.c:1017:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1648: FILE: kernel/lockdep.c:1020:
+static inline int __bfs_backwards(struct lock_list *src_entry,
+			void *data,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1654: FILE: kernel/lockdep.c:1026:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1683: FILE: kernel/lockdep.c:1057:
+print_circular_bug_header(struct lock_list *entry, unsigned int depth,
+			struct held_lock *check_src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1716: FILE: kernel/lockdep.c:1088:
+static noinline int print_circular_bug(struct lock_list *this,
+				struct lock_list *target,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry' should also have an identifier name
#1781: FILE: kernel/lockdep.c:1141:
+	struct lock_list *uninitialized_var(target_entry);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry' should also have an identifier name
#1819: FILE: kernel/lockdep.c:1167:
+	struct lock_list *uninitialized_var(target_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1855: FILE: kernel/lockdep.c:1197:
+check_noncircular(struct lock_list *root, struct lock_class *target,
+		struct lock_list **target_entry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1898: FILE: kernel/lockdep.c:1220:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1919: FILE: kernel/lockdep.c:1234:
+find_usage_forwards(struct lock_list *root, enum lock_usage_bit bit,
+			struct lock_list **target_entry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1973: FILE: kernel/lockdep.c:1257:
+find_usage_backwards(struct lock_list *root, enum lock_usage_bit bit,
+			struct lock_list **target_entry)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2007: FILE: kernel/lockdep.c:1272:
+	printk("%*s->", depth, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2009: FILE: kernel/lockdep.c:1274:
+	printk(" ops: %lu", class->ops);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2010: FILE: kernel/lockdep.c:1275:
+	printk(" {\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2024: FILE: kernel/lockdep.c:1281:
+			len += printk("%*s   %s", depth, "", usage_str[bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2025: FILE: kernel/lockdep.c:1282:
+			len += printk(" at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2030: FILE: kernel/lockdep.c:1286:
+	printk("%*s }\n", depth, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2032: FILE: kernel/lockdep.c:1288:
+	printk("%*s ... key      at: ",depth,"");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2032: FILE: kernel/lockdep.c:1288:
+	printk("%*s ... key      at: ",depth,"");
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2032: FILE: kernel/lockdep.c:1288:
+	printk("%*s ... key      at: ",depth,"");
 	                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2041: FILE: kernel/lockdep.c:1297:
+print_shortest_lock_dependencies(struct lock_list *leaf,
+				struct lock_list *root)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2051: FILE: kernel/lockdep.c:1307:
+		printk("%*s ... acquired at:\n", depth, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2053: FILE: kernel/lockdep.c:1309:
+		printk("\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry != root'
#2055: FILE: kernel/lockdep.c:1311:
+		if (depth == 0 && (entry != root)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2056: FILE: kernel/lockdep.c:1312:
+			printk("lockdep:%s bad BFS generated tree\n", __func__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2101: FILE: kernel/lockdep.c:1376:
+	printk("\nthe dependencies between %s-irq-safe lock", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2102: FILE: kernel/lockdep.c:1377:
+	printk(" and the holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2109: FILE: kernel/lockdep.c:1382:
+	printk("\nthe dependencies between the lock to be acquired");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2110: FILE: kernel/lockdep.c:1383:
+	printk(" and %s-irq-unsafe lock:\n", irqclass);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry' should also have an identifier name
#2122: FILE: kernel/lockdep.c:1401:
+	struct lock_list *uninitialized_var(target_entry);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry1' should also have an identifier name
#2123: FILE: kernel/lockdep.c:1402:
+	struct lock_list *uninitialized_var(target_entry1);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry' should also have an identifier name
#2162: FILE: kernel/lockdep.c:1636:
+	struct lock_list *uninitialized_var(target_entry);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2210: FILE: kernel/lockdep.c:2077:
+	printk("\nthe shortest dependencies between 2nd lock and 1st lock:\n");

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry' should also have an identifier name
#2227: FILE: kernel/lockdep.c:2098:
+	struct lock_list *uninitialized_var(target_entry);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry' should also have an identifier name
#2253: FILE: kernel/lockdep.c:2122:
+	struct lock_list *uninitialized_var(target_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2716: FILE: kernel/lockdep_proc.c:349:
+	seq_printf(m, " max bfs queue depth:           %11u\n",
+			max_bfs_queue_depth);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2784: FILE: kernel/lockdep_proc.c:626:
+		sort(data->stats, data->iter_end - data->stats,
 				sizeof(struct lock_stat_data),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 25 warnings, 37 checks, 2899 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
