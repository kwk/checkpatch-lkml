WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/aufs/opts.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/opts.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#60: FILE: fs/aufs/opts.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_br>
#74: FILE: fs/aufs/opts.c:30:
+	Opt_br,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_add>
#75: FILE: fs/aufs/opts.c:31:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_del>
#75: FILE: fs/aufs/opts.c:31:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mod>
#75: FILE: fs/aufs/opts.c:31:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_reorder>
#75: FILE: fs/aufs/opts.c:31:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_append>
#75: FILE: fs/aufs/opts.c:31:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_prepend>
#75: FILE: fs/aufs/opts.c:31:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_idel>
#76: FILE: fs/aufs/opts.c:32:
+	Opt_idel, Opt_imod, Opt_ireorder,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_imod>
#76: FILE: fs/aufs/opts.c:32:
+	Opt_idel, Opt_imod, Opt_ireorder,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ireorder>
#76: FILE: fs/aufs/opts.c:32:
+	Opt_idel, Opt_imod, Opt_ireorder,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dirwh>
#77: FILE: fs/aufs/opts.c:33:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rdcache>
#77: FILE: fs/aufs/opts.c:33:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_deblk>
#77: FILE: fs/aufs/opts.c:33:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nhash>
#77: FILE: fs/aufs/opts.c:33:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rendir>
#77: FILE: fs/aufs/opts.c:33:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xino>
#78: FILE: fs/aufs/opts.c:34:
+	Opt_xino, Opt_zxino, Opt_noxino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_zxino>
#78: FILE: fs/aufs/opts.c:34:
+	Opt_xino, Opt_zxino, Opt_noxino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noxino>
#78: FILE: fs/aufs/opts.c:34:
+	Opt_xino, Opt_zxino, Opt_noxino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xino>
#79: FILE: fs/aufs/opts.c:35:
+	Opt_trunc_xino, Opt_trunc_xino_v, Opt_notrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xino_v>
#79: FILE: fs/aufs/opts.c:35:
+	Opt_trunc_xino, Opt_trunc_xino_v, Opt_notrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_notrunc_xino>
#79: FILE: fs/aufs/opts.c:35:
+	Opt_trunc_xino, Opt_trunc_xino_v, Opt_notrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xino_path>
#80: FILE: fs/aufs/opts.c:36:
+	Opt_trunc_xino_path, Opt_itrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_itrunc_xino>
#80: FILE: fs/aufs/opts.c:36:
+	Opt_trunc_xino_path, Opt_itrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xinodir>
#81: FILE: fs/aufs/opts.c:37:
+	Opt_xinodir, Opt_xinonames, Opt_ixinonames,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xinonames>
#81: FILE: fs/aufs/opts.c:37:
+	Opt_xinodir, Opt_xinonames, Opt_ixinonames,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ixinonames>
#81: FILE: fs/aufs/opts.c:37:
+	Opt_xinodir, Opt_xinonames, Opt_ixinonames,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xib>
#82: FILE: fs/aufs/opts.c:38:
+	Opt_trunc_xib, Opt_notrunc_xib,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_notrunc_xib>
#82: FILE: fs/aufs/opts.c:38:
+	Opt_trunc_xib, Opt_notrunc_xib,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dirperm1>
#83: FILE: fs/aufs/opts.c:39:
+	Opt_dirperm1, Opt_nodirperm1,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodirperm1>
#83: FILE: fs/aufs/opts.c:39:
+	Opt_dirperm1, Opt_nodirperm1,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_shwh>
#84: FILE: fs/aufs/opts.c:40:
+	Opt_shwh, Opt_noshwh,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noshwh>
#84: FILE: fs/aufs/opts.c:40:
+	Opt_shwh, Opt_noshwh,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_plink>
#85: FILE: fs/aufs/opts.c:41:
+	Opt_plink, Opt_noplink, Opt_list_plink, Opt_clean_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noplink>
#85: FILE: fs/aufs/opts.c:41:
+	Opt_plink, Opt_noplink, Opt_list_plink, Opt_clean_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_list_plink>
#85: FILE: fs/aufs/opts.c:41:
+	Opt_plink, Opt_noplink, Opt_list_plink, Opt_clean_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_clean_plink>
#85: FILE: fs/aufs/opts.c:41:
+	Opt_plink, Opt_noplink, Opt_list_plink, Opt_clean_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_udba>
#86: FILE: fs/aufs/opts.c:42:
+	Opt_udba,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_cmd>
#88: FILE: fs/aufs/opts.c:44:
+	Opt_cmd, Opt_cmd_args,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_cmd_args>
#88: FILE: fs/aufs/opts.c:44:
+	Opt_cmd, Opt_cmd_args,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_diropq_a>
#89: FILE: fs/aufs/opts.c:45:
+	Opt_diropq_a, Opt_diropq_w,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_diropq_w>
#89: FILE: fs/aufs/opts.c:45:
+	Opt_diropq_a, Opt_diropq_w,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_warn_perm>
#90: FILE: fs/aufs/opts.c:46:
+	Opt_warn_perm, Opt_nowarn_perm,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nowarn_perm>
#90: FILE: fs/aufs/opts.c:46:
+	Opt_warn_perm, Opt_nowarn_perm,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wbr_copyup>
#91: FILE: fs/aufs/opts.c:47:
+	Opt_wbr_copyup, Opt_wbr_create,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wbr_create>
#91: FILE: fs/aufs/opts.c:47:
+	Opt_wbr_copyup, Opt_wbr_create,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_coo>
#92: FILE: fs/aufs/opts.c:48:
+	Opt_coo,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dlgt>
#93: FILE: fs/aufs/opts.c:49:
+	Opt_dlgt, Opt_nodlgt,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodlgt>
#93: FILE: fs/aufs/opts.c:49:
+	Opt_dlgt, Opt_nodlgt,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_refrof>
#94: FILE: fs/aufs/opts.c:50:
+	Opt_refrof, Opt_norefrof,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_norefrof>
#94: FILE: fs/aufs/opts.c:50:
+	Opt_refrof, Opt_norefrof,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_verbose>
#95: FILE: fs/aufs/opts.c:51:
+	Opt_verbose, Opt_noverbose,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noverbose>
#95: FILE: fs/aufs/opts.c:51:
+	Opt_verbose, Opt_noverbose,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_tail>
#96: FILE: fs/aufs/opts.c:52:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ignore>
#96: FILE: fs/aufs/opts.c:52:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ignore_silent>
#96: FILE: fs/aufs/opts.c:52:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#96: FILE: fs/aufs/opts.c:52:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#200: FILE: fs/aufs/opts.c:156:
+#if 0 /* reserved for future use */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: fs/aufs/opts.c:181:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <NoLinkWH>
#235: FILE: fs/aufs/opts.c:191:
+#define NoLinkWH	"nolwh"

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RR>
#238: FILE: fs/aufs/opts.c:194:
+	{AuBr_RR, RR},

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RO>
#239: FILE: fs/aufs/opts.c:195:
+	{AuBr_RO, RO},

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RW>
#240: FILE: fs/aufs/opts.c:196:
+	{AuBr_RW, RW},

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RRWH>
#242: FILE: fs/aufs/opts.c:198:
+	{AuBr_RRWH, RR "+" WH},

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_ROWH>
#243: FILE: fs/aufs/opts.c:199:
+	{AuBr_ROWH, RO "+" WH},

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RWNoLinkWH>
#244: FILE: fs/aufs/opts.c:200:
+	{AuBr_RWNoLinkWH, RW "+" NoLinkWH},

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#255: FILE: fs/aufs/opts.c:211:
+	AuDebugOn(!perm || !*perm);

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#256: FILE: fs/aufs/opts.c:212:
+	LKTRTrace("perm %s\n", perm);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#258: FILE: fs/aufs/opts.c:214:
+	AuTraceErr(val);

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_REVAL>
#270: FILE: fs/aufs/opts.c:226:
+	{AuOpt_UDBA_REVAL, "reval"},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_INOTIFY>
#272: FILE: fs/aufs/opts.c:228:
+	{AuOpt_UDBA_INOTIFY, "inotify"},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_NONE>
#274: FILE: fs/aufs/opts.c:230:
+	{AuOpt_UDBA_NONE, "none"},

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: fs/aufs/opts.c:237:
+	substring_t args[MAX_OPT_ARGS];
+	return match_token(str, udbalevel, args);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_COO_NONE>
#292: FILE: fs/aufs/opts.c:248:
+	{AuOpt_COO_NONE, "none"},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_COO_LEAF>
#293: FILE: fs/aufs/opts.c:249:
+	{AuOpt_COO_LEAF, "leaf"},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_COO_ALL>
#294: FILE: fs/aufs/opts.c:250:
+	{AuOpt_COO_ALL, "all"},

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: fs/aufs/opts.c:257:
+	substring_t args[MAX_OPT_ARGS];
+	return match_token(str, coolevel, args);

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_TDP>
#312: FILE: fs/aufs/opts.c:268:
+	{AuWbrCreate_TDP, "tdp"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_RR>
#314: FILE: fs/aufs/opts.c:270:
+	{AuWbrCreate_RR, "rr"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFS>
#316: FILE: fs/aufs/opts.c:272:
+	{AuWbrCreate_MFS, "mfs"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSV>
#318: FILE: fs/aufs/opts.c:274:
+	{AuWbrCreate_MFSV, "mfs:%d"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRR>
#321: FILE: fs/aufs/opts.c:277:
+	{AuWbrCreate_MFSRR, "mfsrr:%d"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRRV>
#322: FILE: fs/aufs/opts.c:278:
+	{AuWbrCreate_MFSRRV, "mfsrr:%d:%d"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFS>
#323: FILE: fs/aufs/opts.c:279:
+	{AuWbrCreate_PMFS, "pmfs"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFSV>
#324: FILE: fs/aufs/opts.c:280:
+	{AuWbrCreate_PMFSV, "pmfs:%d"},

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#341: FILE: fs/aufs/opts.c:297:
+	*result = simple_strtoull(buf, &endp, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#356: FILE: fs/aufs/opts.c:312:
+	if (!au_match_ull(arg, &ull, 0))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#358: FILE: fs/aufs/opts.c:314:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#359: FILE: fs/aufs/opts.c:315:
+		AuErr("bad integer in %s\n", str);

CHECK:BRACES: braces {} should be used on all arms of this statement
#373: FILE: fs/aufs/opts.c:329:
+	if (!match_int(arg, &n) && 0 <= n)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#375: FILE: fs/aufs/opts.c:331:
+	else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#406: FILE: fs/aufs/opts.c:362:
+		/*FALLTHROUGH*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_TDP>
#428: FILE: fs/aufs/opts.c:384:
+	{AuWbrCopyup_TDP, "tdp"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BUP>
#430: FILE: fs/aufs/opts.c:386:
+	{AuWbrCopyup_BUP, "bup"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BU>
#432: FILE: fs/aufs/opts.c:388:
+	{AuWbrCopyup_BU, "bu"},

WARNING:LINE_SPACING: Missing a blank line after declarations
#440: FILE: fs/aufs/opts.c:396:
+	substring_t args[MAX_OPT_ARGS];
+	return match_token(str, au_wbr_copyup_policy, args);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#466: FILE: fs/aufs/opts.c:422:
+	AuTraceEnter();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#475: FILE: fs/aufs/opts.c:431:
+				  u.add->nd.path.dentry);
 				         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#492: FILE: fs/aufs/opts.c:448:
+				  u.add->nd.path.dentry);
 				         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#498: FILE: fs/aufs/opts.c:454:
+				  u.add->nd.path.dentry);
 				         ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#510: FILE: fs/aufs/opts.c:466:
+				  AuDLNPair(u.xino->file->f_dentry));

CHECK:CAMELCASE: Avoid CamelCase: <LKTRLabel>
#513: FILE: fs/aufs/opts.c:469:
+			LKTRLabel(trunc_xino);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#605: FILE: fs/aufs/opts.c:561:
+				LKTRTrace("%Lu watermark\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#609: FILE: fs/aufs/opts.c:565:
+				LKTRTrace("%Lu watermark, %d sec\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#620: FILE: fs/aufs/opts.c:576:
+			BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#639: FILE: fs/aufs/opts.c:595:
+			path_put(&opt->add.nd.path);
 			                   ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_Last>
#667: FILE: fs/aufs/opts.c:623:
+	add->perm = AuBr_Last;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#678: FILE: fs/aufs/opts.c:634:
+	err = vfsub_path_lookup(add->path, lkup_dirflags, &add->nd);
 	                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#682: FILE: fs/aufs/opts.c:638:
+			if (au_test_def_rr(add->nd.path.dentry->d_sb))
 			                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#711: FILE: fs/aufs/opts.c:667:
+	struct nameidata nd;
 	                 ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#740: FILE: fs/aufs/opts.c:696:
+			while (!err && (opt_str = strsep(&args[0].from, ":"))
+			       && *opt_str) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#775: FILE: fs/aufs/opts.c:731:
+						&nd);
 						 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#781: FILE: fs/aufs/opts.c:737:
+			u.del->h_root = dget(nd.path.dentry);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#782: FILE: fs/aufs/opts.c:738:
+			path_put(&nd.path);
 			          ^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#785: FILE: fs/aufs/opts.c:741:
+#if 0 /* reserved for future use */

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#794: FILE: fs/aufs/opts.c:750:
+			aufs_read_lock(root, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#797: FILE: fs/aufs/opts.c:753:
+				aufs_read_unlock(root, !AuLock_IR);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#821: FILE: fs/aufs/opts.c:777:
+						&nd);
 						 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#827: FILE: fs/aufs/opts.c:783:
+			u.mod->h_root = dget(nd.path.dentry);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#828: FILE: fs/aufs/opts.c:784:
+			path_put(&nd.path);
 			          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#880: FILE: fs/aufs/opts.c:836:
+			err = vfsub_path_lookup(p, lkup_dirflags, &nd);
 			                                           ^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#882: FILE: fs/aufs/opts.c:838:
+				AuErr("lookup failed %s (%d)\n", p , err);
 				                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#889: FILE: fs/aufs/opts.c:845:
+				if (au_h_dptr(root, bindex) == nd.path.dentry) {
 				                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#895: FILE: fs/aufs/opts.c:851:
+			path_put(&nd.path);
 			          ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#937: FILE: fs/aufs/opts.c:893:
+			if (flags & MS_RDONLY) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#940: FILE: fs/aufs/opts.c:896:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#972: FILE: fs/aufs/opts.c:928:
+			if (opt->udba >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#975: FILE: fs/aufs/opts.c:931:
+			} else

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#982: FILE: fs/aufs/opts.c:938:
+			u.create->wbr_create
+				= au_wbr_create_val(args[0].from, u.create);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#983: FILE: fs/aufs/opts.c:939:
+			if (u.create->wbr_create >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#986: FILE: fs/aufs/opts.c:942:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#991: FILE: fs/aufs/opts.c:947:
+			if (opt->wbr_copyup >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#994: FILE: fs/aufs/opts.c:950:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1000: FILE: fs/aufs/opts.c:956:
+			if (opt->coo >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1003: FILE: fs/aufs/opts.c:959:
+			} else

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#1009: FILE: fs/aufs/opts.c:965:
+			AuWarn("ignored %s\n", opt_str);

CHECK:CAMELCASE: Avoid CamelCase: <AuOptMask_UDBA>
#1056: FILE: fs/aufs/opts.c:1012:
+		sbinfo->si_mntflags &= ~AuOptMask_UDBA;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1123: FILE: fs/aufs/opts.c:1079:
+		sbinfo->si_wbr_create_ops
+			= au_wbr_create_ops + create->wbr_create;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1128: FILE: fs/aufs/opts.c:1084:
+			sbinfo->si_wbr_mfs.mfsrr_watermark
+				= create->mfsrr_watermark;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1129: FILE: fs/aufs/opts.c:1085:
+			/*FALLTHROUGH*/

CHECK:CAMELCASE: Avoid CamelCase: <AuOptMask_COO>
#1146: FILE: fs/aufs/opts.c:1102:
+		sbinfo->si_mntflags &= ~AuOptMask_COO;

WARNING:INDENTED_LABEL: labels should not be indented
#1224: FILE: fs/aufs/opts.c:1180:
+	add:

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1316: FILE: fs/aufs/opts.c:1272:
+	if (unlikely(au_opt_test(mnt_flags | pending, UDBA_INOTIFY)
+		     && !au_opt_test(mnt_flags, XINO)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1361: FILE: fs/aufs/opts.c:1317:
+			BUG();

CHECK:CAMELCASE: Avoid CamelCase: <SiMustWriteLock>
#1391: FILE: fs/aufs/opts.c:1347:
+	SiMustWriteLock(sb);

CHECK:CAMELCASE: Avoid CamelCase: <DiMustWriteLock>
#1392: FILE: fs/aufs/opts.c:1348:
+	DiMustWriteLock(sb->s_root);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustWriteLock>
#1394: FILE: fs/aufs/opts.c:1350:
+	IiMustWriteLock(dir);

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_XINO>
#1460: FILE: fs/aufs/opts.c:1416:
+		au_reset_hinotify(dir, au_hi_flags(dir, 1) & ~AuHi_XINO);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1530: FILE: fs/aufs/opts.c:1486:
+	if (!au_ftest_opts(opts->flags, REFRESH_DIR)
+	    && (opts->given_udba || au_opt_test(sbinfo->si_mntflags, XINO)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1543: FILE: fs/aufs/opts.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1557: FILE: fs/aufs/opts.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1558: FILE: fs/aufs/opts.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_XINO>
#1579: FILE: fs/aufs/opts.h:37:
+#define AuOpt_XINO		1

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_TRUNC_XINO>
#1580: FILE: fs/aufs/opts.h:38:
+#define AuOpt_TRUNC_XINO	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1580: FILE: fs/aufs/opts.h:38:
+#define AuOpt_TRUNC_XINO	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_LINO>
#1581: FILE: fs/aufs/opts.h:39:
+#define AuOpt_LINO		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1581: FILE: fs/aufs/opts.h:39:
+#define AuOpt_LINO		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1582: FILE: fs/aufs/opts.h:40:
+#define AuOpt_UDBA_NONE		(1 << 3)	/* users direct branch access */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1583: FILE: fs/aufs/opts.h:41:
+#define AuOpt_UDBA_REVAL	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1584: FILE: fs/aufs/opts.h:42:
+#define AuOpt_UDBA_INOTIFY	(1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_SHWH>
#1585: FILE: fs/aufs/opts.h:43:
+#define AuOpt_SHWH		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1585: FILE: fs/aufs/opts.h:43:
+#define AuOpt_SHWH		(1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_PLINK>
#1586: FILE: fs/aufs/opts.h:44:
+#define AuOpt_PLINK		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1586: FILE: fs/aufs/opts.h:44:
+#define AuOpt_PLINK		(1 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_WARN_PERM>
#1587: FILE: fs/aufs/opts.h:45:
+#define AuOpt_WARN_PERM		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1587: FILE: fs/aufs/opts.h:45:
+#define AuOpt_WARN_PERM		(1 << 8)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DIRPERM1>
#1588: FILE: fs/aufs/opts.h:46:
+#define AuOpt_DIRPERM1		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1588: FILE: fs/aufs/opts.h:46:
+#define AuOpt_DIRPERM1		(1 << 9)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DLGT>
#1589: FILE: fs/aufs/opts.h:47:
+#define AuOpt_DLGT		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1589: FILE: fs/aufs/opts.h:47:
+#define AuOpt_DLGT		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1590: FILE: fs/aufs/opts.h:48:
+#define AuOpt_COO_NONE		(1 << 11)	/* copyup on open */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1591: FILE: fs/aufs/opts.h:49:
+#define AuOpt_COO_LEAF		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1592: FILE: fs/aufs/opts.h:50:
+#define AuOpt_COO_ALL		(1 << 13)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_ALWAYS_DIROPQ>
#1593: FILE: fs/aufs/opts.h:51:
+#define AuOpt_ALWAYS_DIROPQ	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1593: FILE: fs/aufs/opts.h:51:
+#define AuOpt_ALWAYS_DIROPQ	(1 << 14)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_REFROF>
#1594: FILE: fs/aufs/opts.h:52:
+#define AuOpt_REFROF		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1594: FILE: fs/aufs/opts.h:52:
+#define AuOpt_REFROF		(1 << 15)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_VERBOSE>
#1595: FILE: fs/aufs/opts.h:53:
+#define AuOpt_VERBOSE		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1595: FILE: fs/aufs/opts.h:53:
+#define AuOpt_VERBOSE		(1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_Def>
#1622: FILE: fs/aufs/opts.h:80:
+	AuWbrCreate_Def = AuWbrCreate_TDP

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_Def>
#1630: FILE: fs/aufs/opts.h:88:
+	AuWbrCopyup_Def = AuWbrCopyup_TDP

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DefExtra1>
#1641: FILE: fs/aufs/opts.h:99:
+#define AuOpt_DefExtra1	AuOpt_ALWAYS_DIROPQ

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_Def>
#1646: FILE: fs/aufs/opts.h:104:
+#define AuOpt_Def	(AuOpt_XINO \

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1659: FILE: fs/aufs/opts.h:117:
+	struct nameidata	nd;
 	                	^^

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REMOUNT>
#1713: FILE: fs/aufs/opts.h:171:
+#define AuOpts_REMOUNT		1

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REFRESH_DIR>
#1714: FILE: fs/aufs/opts.h:172:
+#define AuOpts_REFRESH_DIR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1714: FILE: fs/aufs/opts.h:172:
+#define AuOpts_REFRESH_DIR	(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REFRESH_NONDIR>
#1715: FILE: fs/aufs/opts.h:173:
+#define AuOpts_REFRESH_NONDIR	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1715: FILE: fs/aufs/opts.h:173:
+#define AuOpts_REFRESH_NONDIR	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_TRUNC_XIB>
#1716: FILE: fs/aufs/opts.h:174:
+#define AuOpts_TRUNC_XIB	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1716: FILE: fs/aufs/opts.h:174:
+#define AuOpts_TRUNC_XIB	(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_##name>
#1717: FILE: fs/aufs/opts.h:175:
+#define au_ftest_opts(flags, name)	((flags) & AuOpts_##name)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_##name>
#1751: FILE: fs/aufs/opts.h:209:
+#define au_opt_test(flags, name)	au_opt_do_test(flags, AuOpt_##name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#1760: FILE: fs/aufs/opts.h:218:
+#define au_opt_set_coo(flags, name) do { \
+	(flags) &= ~AuOptMask_COO; \
+	((flags) |= AuOpt_##name); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1763: FILE: fs/aufs/opts.h:221:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#1765: FILE: fs/aufs/opts.h:223:
+#define au_opt_set_udba(flags, name) do { \
+	(flags) &= ~AuOptMask_UDBA; \
+	((flags) |= AuOpt_##name); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1768: FILE: fs/aufs/opts.h:226:
+} while(0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277621.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 34 warnings, 159 checks, 1735 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277621.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
