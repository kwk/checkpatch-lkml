WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: lib/tracing/Kconfig:105:
+config INTERRUPT_OFF_HIST
+	bool "Interrupts off critical timings histogram"
+	depends on CRITICAL_IRQSOFF_TIMING
+	help
+	  This option uses the infrastructure of the critical
+	  irqs off timings to create a histogram of latencies.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#95: FILE: lib/tracing/Kconfig:112:
+config PREEMPT_OFF_HIST
+	bool "Preempt off critical timings histogram"
+	depends on CRITICAL_PREEMPT_TIMING
+	help
+	  This option uses the infrastructure of the critical
+	  preemption off timings to create a histogram of latencies.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#102: FILE: lib/tracing/Kconfig:119:
+config WAKEUP_LATENCY_HIST
+	bool "Interrupts off critical timings histogram"
+	depends on WAKEUP_TRACER
+	help
+	  This option uses the infrastructure of the wakeup tracer
+	  to create a histogram of latencies.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#294: FILE: lib/tracing/tracer_hist.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#295: FILE: lib/tracing/tracer_hist.c:2:
+ * lib/tracing/tracer_hist.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#314: FILE: lib/tracing/tracer_hist.c:21:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#316: FILE: lib/tracing/tracer_hist.c:23:
+#include <asm/uaccess.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#373: FILE: lib/tracing/tracer_hist.c:80:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= NR_CPUS'
#373: FILE: lib/tracing/tracer_hist.c:80:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency_type < INTERRUPT_LATENCY'
#373: FILE: lib/tracing/tracer_hist.c:80:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency_type > WAKEUP_LATENCY'
#373: FILE: lib/tracing/tracer_hist.c:80:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency < 0'
#373: FILE: lib/tracing/tracer_hist.c:80:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#373: FILE: lib/tracing/tracer_hist.c:80:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#374: FILE: lib/tracing/tracer_hist.c:81:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:SPACING: No space is necessary after a cast
#420: FILE: lib/tracing/tracer_hist.c:127:
+	my_hist->avg_lat = (unsigned long) u64_div(my_hist->accumulate_lat,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#423: FILE: lib/tracing/tracer_hist.c:130:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#441: FILE: lib/tracing/tracer_hist.c:148:
+			   "#There are %llu samples greater or equal"
+			   " than %d microseconds\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#477: FILE: lib/tracing/tracer_hist.c:184:
+	int index = *(loff_t *) p;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#484: FILE: lib/tracing/tracer_hist.c:191:
+static struct seq_operations latency_hist_seq_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: lib/tracing/tracer_hist.c:205:
+		struct seq_file *seq = file->private_data;
+		seq->private = inode->i_private;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#503: FILE: lib/tracing/tracer_hist.c:210:
+static struct file_operations latency_hist_fops = {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: lib/tracing/tracer_hist.c:240:
+	switch (latency_type) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#565: FILE: lib/tracing/tracer_hist.c:272:
+static struct file_operations latency_hist_reset_fops = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#664: FILE: lib/tracing/tracer_hist.c:371:
+static unsigned wakeup_prio = (unsigned)-1 ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#664: FILE: lib/tracing/tracer_hist.c:371:
+static unsigned wakeup_prio = (unsigned)-1 ;

WARNING:SPACING: space prohibited before semicolon
#664: FILE: lib/tracing/tracer_hist.c:371:
+static unsigned wakeup_prio = (unsigned)-1 ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#711: FILE: lib/tracing/tracer_hist.c:418:
+	wakeup_prio = (unsigned)-1;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#715: FILE: lib/tracing/tracer_hist.c:422:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#805: FILE: lib/tracing/tracer_hist.c:512:
+
+}

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#807: FILE: lib/tracing/tracer_hist.c:514:
+__initcall(latency_hist_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#813: FILE: lib/tracing/tracer_hist.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#814: FILE: lib/tracing/tracer_hist.h:2:
+ * lib/tracing/tracer_hist.h

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329147.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 11 checks, 729 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329147.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
