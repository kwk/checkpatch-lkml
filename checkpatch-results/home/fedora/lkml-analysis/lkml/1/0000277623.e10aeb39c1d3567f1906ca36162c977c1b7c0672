WARNING:TYPO_SPELLING: 'direcotry' may be misspelled - perhaps 'directory'?
#16: 
Subject: [AUFS PATCH v2.6.26-rc2-mm1 22/39] aufs direcotry
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/aufs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/dir.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#60: FILE: fs/aufs/dir.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#78: FILE: fs/aufs/dir.c:34:
+	LKTRTrace("%.*s\n", AuDLNPair(dentry));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#78: FILE: fs/aufs/dir.c:34:
+	LKTRTrace("%.*s\n", AuDLNPair(dentry));

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#79: FILE: fs/aufs/dir.c:35:
+	AuDebugOn(!S_ISDIR(dentry->d_inode->i_mode));

WARNING:IF_1: Consider removing the #if 1 and its #endif
#83: FILE: fs/aufs/dir.c:39:
+#if 1 /* todo: necessary? */

WARNING:IF_1: Consider removing the #if 1 and its #endif
#89: FILE: fs/aufs/dir.c:45:
+#if 1 /* todo: necessary? */

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#117: FILE: fs/aufs/dir.c:73:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <DiMustAnyLock>
#197: FILE: fs/aufs/dir.c:153:
+	DiMustAnyLock(dentry);

CHECK:CAMELCASE: Avoid CamelCase: <SiMustAnyLock>
#199: FILE: fs/aufs/dir.c:155:
+	SiMustAnyLock(sb);

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#201: FILE: fs/aufs/dir.c:157:
+	IMustLock(inode);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustAnyLock>
#202: FILE: fs/aufs/dir.c:158:
+	IiMustAnyLock(inode);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#209: FILE: fs/aufs/dir.c:165:
+		struct file_operations *fop;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#257: FILE: fs/aufs/dir.c:213:
+	if (file) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#262: FILE: fs/aufs/dir.c:218:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IW>
#263: FILE: fs/aufs/dir.c:219:
+		di_read_lock_child(dentry, !AuLock_IW);

CHECK:BRACES: braces {} should be used on all arms of this statement
#266: FILE: fs/aufs/dir.c:222:
+	if (file) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#288: FILE: fs/aufs/dir.c:244:
+	} else

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#313: FILE: fs/aufs/dir.c:269:
+	LKTRTrace("%.*s, pos %Ld\n", AuDLNPair(dentry), file->f_pos);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#319: FILE: fs/aufs/dir.c:275:
+	si_read_lock(sb, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_WHONLY>
#350: FILE: fs/aufs/dir.c:306:
+#define AuTestEmpty_WHONLY	1

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_DLGT>
#351: FILE: fs/aufs/dir.c:307:
+#define AuTestEmpty_DLGT	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#351: FILE: fs/aufs/dir.c:307:
+#define AuTestEmpty_DLGT	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_DIRPERM1>
#352: FILE: fs/aufs/dir.c:308:
+#define AuTestEmpty_DIRPERM1	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#352: FILE: fs/aufs/dir.c:308:
+#define AuTestEmpty_DIRPERM1	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_CALLED>
#353: FILE: fs/aufs/dir.c:309:
+#define AuTestEmpty_CALLED	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#353: FILE: fs/aufs/dir.c:309:
+#define AuTestEmpty_CALLED	(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_SHWH>
#354: FILE: fs/aufs/dir.c:310:
+#define AuTestEmpty_SHWH	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#354: FILE: fs/aufs/dir.c:310:
+#define AuTestEmpty_SHWH	(1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_##name>
#355: FILE: fs/aufs/dir.c:311:
+#define au_ftest_testempty(flags, name)	((flags) & AuTestEmpty_##name)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#388: FILE: fs/aufs/dir.c:344:
+	if (name[0] == '.'
+	    && (namelen == 1 || (name[1] == '.' && namelen == 2)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#392: FILE: fs/aufs/dir.c:348:
+	if (namelen <= AUFS_WH_PFX_LEN
+	    || memcmp(name, AUFS_WH_PFX, AUFS_WH_PFX_LEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#394: FILE: fs/aufs/dir.c:350:
+		if (au_ftest_testempty(arg->flags, WHONLY)
+		    && !au_nhash_test_known_wh(arg->whlist, name, namelen))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#428: FILE: fs/aufs/dir.c:384:
+	if (unlikely(au_opt_test(au_mntflags(dentry->d_sb), UDBA_INOTIFY)
+		     && !h_file->f_dentry->d_inode->i_nlink))

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#475: FILE: fs/aufs/dir.c:431:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#479: FILE: fs/aufs/dir.c:435:
+	if (!err)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#481: FILE: fs/aufs/dir.c:437:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#488: FILE: fs/aufs/dir.c:444:
+		unsigned int flags = arg->flags;
+		au_fclr_testempty(arg->flags, DLGT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: fs/aufs/dir.c:493:
+		struct dentry *h_dentry;
+		h_dentry = au_h_dptr(dentry, bindex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#571: FILE: fs/aufs/dir.c:527:
+		struct dentry *h_dentry;
+		h_dentry = au_h_dptr(dentry, bindex);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#585: FILE: fs/aufs/dir.c:541:
+struct file_operations aufs_dir_fop = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#599: FILE: fs/aufs/dir.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#613: FILE: fs/aufs/dir.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#614: FILE: fs/aufs/dir.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_DEBLK>
#634: FILE: fs/aufs/dir.h:36:
+#define AuSize_DEBLK	512

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_NHASH>
#635: FILE: fs/aufs/dir.h:37:
+#define AuSize_NHASH	32

WARNING:NEW_TYPEDEFS: do not add new typedefs
#640: FILE: fs/aufs/dir.h:42:
+typedef char au_vdir_deblk_t[AuSize_DEBLK];

WARNING:CONST_STRUCT: struct file_operations should normally be const
#695: FILE: fs/aufs/dir.h:97:
+extern struct file_operations aufs_dir_fop;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277623.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 14 warnings, 33 checks, 693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277623.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
