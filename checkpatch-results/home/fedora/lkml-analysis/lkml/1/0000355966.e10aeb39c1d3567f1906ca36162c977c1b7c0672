WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Here follows a highly experimental patch for the kernel that catches uses of

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#155: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: arch/x86/kernel/kmemcheck_32.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#201: FILE: arch/x86/kernel/kmemcheck_32.c:42:
+		/* Group 2 */
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#202: FILE: arch/x86/kernel/kmemcheck_32.c:43:
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26
+		|| b == 0x64 || b == 0x65 || b == 0x2e || b == 0x3e

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#204: FILE: arch/x86/kernel/kmemcheck_32.c:45:
+		/* Group 3 */
+		|| b == 0x66

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#206: FILE: arch/x86/kernel/kmemcheck_32.c:47:
+		/* Group 4 */
+		|| b == 0x67;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#212: FILE: arch/x86/kernel/kmemcheck_32.c:53:
+ * should be shot. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#216: FILE: arch/x86/kernel/kmemcheck_32.c:57:
+	const uint8_t *i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: arch/x86/kernel/kmemcheck_32.c:74:
+static void *address_get_shadow_slab(unsigned long address,
+	struct page *head)

CHECK:SPACING: No space is necessary after a cast
#241: FILE: arch/x86/kernel/kmemcheck_32.c:82:
+	return (void *) address + (PAGE_SIZE << head->slab->order);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#261: FILE: arch/x86/kernel/kmemcheck_32.c:102:
+	unsigned int size = opcode_get_size((const uint8_t *) regs->eip);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#262: FILE: arch/x86/kernel/kmemcheck_32.c:103:
+	uint8_t *shadow = address_get_shadow(address);

CHECK:SPACING: No space is necessary after a cast
#270: FILE: arch/x86/kernel/kmemcheck_32.c:111:
+		error = *(uint8_t *) shadow != 0xff;

CHECK:SPACING: No space is necessary after a cast
#271: FILE: arch/x86/kernel/kmemcheck_32.c:112:
+		*(uint8_t *) shadow = 0xff;

CHECK:SPACING: No space is necessary after a cast
#274: FILE: arch/x86/kernel/kmemcheck_32.c:115:
+		error = *(uint16_t *) shadow != 0xffff;

CHECK:SPACING: No space is necessary after a cast
#275: FILE: arch/x86/kernel/kmemcheck_32.c:116:
+		*(uint16_t *) shadow = 0xffff;

CHECK:SPACING: No space is necessary after a cast
#278: FILE: arch/x86/kernel/kmemcheck_32.c:119:
+		error = *(uint32_t *) shadow != 0xffffffff;

CHECK:SPACING: No space is necessary after a cast
#279: FILE: arch/x86/kernel/kmemcheck_32.c:120:
+		*(uint32_t *) shadow = 0xffffffff;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#284: FILE: arch/x86/kernel/kmemcheck_32.c:125:
+		printk(KERN_ALERT "kmemcheck: Caught uninitialized read from "

WARNING:SPLIT_STRING: quoted string split across lines
#285: FILE: arch/x86/kernel/kmemcheck_32.c:126:
+		printk(KERN_ALERT "kmemcheck: Caught uninitialized read from "
+			"EIP = %08lx ", regs->eip);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: arch/x86/kernel/kmemcheck_32.c:128:
+		printk("address %08lx, size %d\n", address, size);

CHECK:SPACING: No space is necessary after a cast
#295: FILE: arch/x86/kernel/kmemcheck_32.c:136:
+	unsigned int size = opcode_get_size((const uint8_t *) regs->eip);

CHECK:SPACING: No space is necessary after a cast
#303: FILE: arch/x86/kernel/kmemcheck_32.c:144:
+		*(uint8_t *) shadow = 0xff;

CHECK:SPACING: No space is necessary after a cast
#306: FILE: arch/x86/kernel/kmemcheck_32.c:147:
+		*(uint16_t *) shadow = 0xffff;

CHECK:SPACING: No space is necessary after a cast
#309: FILE: arch/x86/kernel/kmemcheck_32.c:150:
+		*(uint32_t *) shadow = 0xffffffff;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: arch/x86/mm/fault_32.c:262:
+static inline int vmalloc_fault(struct pt_regs *regs, unsigned long address,
+	unsigned long error_code)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#411: FILE: arch/x86/mm/fault_32.c:347:
+		if (!(error_code & 0x0000000d)
+			&& vmalloc_fault(regs, address, error_code) >= 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#421: FILE: include/asm-x86/kmemcheck.h:1:
+#ifdef CONFIG_X86_32

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#430: FILE: include/asm-x86/kmemcheck_32.h:1:
+#ifndef ASM_X86_KMEMCHECK_32_H

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#434: FILE: include/asm-x86/kmemcheck_32.h:5:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: include/asm-x86/kmemcheck_32.h:12:
+void kmemcheck_show_page(struct pt_regs *regs,
+	unsigned long address, pte_t *pte);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: include/asm-x86/kmemcheck_32.h:20:
+static inline void kmemcheck_read(struct pt_regs *regs,
+	unsigned int address) { }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: include/asm-x86/kmemcheck_32.h:22:
+static inline void kmemcheck_write(struct pt_regs *regs,
+	unsigned int address) { }

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#512: FILE: mm/slub.c:25:
+#include <asm/cacheflush.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#533: FILE: mm/slub.c:1058:
+	 * status of each byte within the allocation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#554: FILE: mm/slub.c:1077:
+		 * analyze the memory accesses. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: mm/slub.c:1079:
+		change_page_attr(page, pages >> 1,
+			__pgprot(__PAGE_KERNEL & ~_PAGE_VISIBLE));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355966.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 25 checks, 407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355966.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
