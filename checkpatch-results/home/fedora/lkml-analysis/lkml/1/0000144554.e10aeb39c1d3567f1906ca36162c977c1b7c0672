WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
FS-Cache has an asynchronous operations handling facility that it uses for its

WARNING:REPEATED_WORD: Possible repeated word: 'be'
#54: 
This facility is available to and expected to be be used by the cache backends,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#259: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:REPEATED_WORD: Possible repeated word: 'be'
#292: FILE: Documentation/filesystems/caching/operations.txt:29:
+This facility is available to and expected to be be used by the cache backends,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: fs/fscache/internal.h:98:
+extern int fscache_submit_exclusive_op(struct fscache_object *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#513: FILE: fs/fscache/internal.h:98:
+extern int fscache_submit_exclusive_op(struct fscache_object *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_operation *' should also have an identifier name
#513: FILE: fs/fscache/internal.h:98:
+extern int fscache_submit_exclusive_op(struct fscache_object *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: fs/fscache/internal.h:100:
+extern int fscache_submit_op(struct fscache_object *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#515: FILE: fs/fscache/internal.h:100:
+extern int fscache_submit_op(struct fscache_object *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_operation *' should also have an identifier name
#515: FILE: fs/fscache/internal.h:100:
+extern int fscache_submit_op(struct fscache_object *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: fs/fscache/internal.h:102:
+extern void fscache_abort_object(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#517: FILE: fs/fscache/internal.h:102:
+extern void fscache_abort_object(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: fs/fscache/internal.h:103:
+extern void fscache_start_operations(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#518: FILE: fs/fscache/internal.h:103:
+extern void fscache_start_operations(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: fs/fscache/internal.h:104:
+extern void fscache_operation_gc(struct work_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#519: FILE: fs/fscache/internal.h:104:
+extern void fscache_operation_gc(struct work_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#529: FILE: fs/fscache/operation.c:1:
+/* FS-Cache worker operation management routines

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op->processor"
#562: FILE: fs/fscache/operation.c:34:
+	ASSERT(op->processor != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#582: FILE: fs/fscache/operation.c:54:
+			printk(KERN_ERR "FS-Cache: Unexpected op type %lx",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#584: FILE: fs/fscache/operation.c:56:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#655: FILE: fs/fscache/operation.c:127:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#671: FILE: fs/fscache/operation.c:143:
+	unsigned n;

WARNING:MEMORY_BARRIER: memory barrier without comment
#726: FILE: fs/fscache/operation.c:198:
+	smp_rmb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: fs/fscache/operation.c:303:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#844: FILE: fs/fscache/operation.c:316:
+	 * lock, and defer it otherwise */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op->processor"
#975: FILE: fs/fscache/operation.c:447:
+	ASSERT(op->processor != NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 7 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
