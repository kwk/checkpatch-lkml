WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: drivers/pnp/base.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: drivers/pnp/base.h:116:
+		dev_warn(&dev->dev, "invalid dependent option priority %d "
+			 "clipped to %d", priority,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#389: FILE: drivers/pnp/interface.c:231:
+				pnp_printf(buffer, "Dependent: %02i - "
+					   "Priority %s\n", set,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pnp_assign_resources', this function's name, in a string
#674: FILE: drivers/pnp/manager.c:241:
+	dev_dbg(&dev->dev, "pnp_assign_resources, try dependent set %d\n", set);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#746: FILE: drivers/pnp/manager.c:246:
+		if (pnp_option_is_dependent(option) &&
[...]
+				continue;

CHECK:BRACES: braces {} should be used on all arms of this statement
#782: FILE: drivers/pnp/manager.c:272:
+	if (ret < 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pnp_assign_resources', this function's name, in a string
#783: FILE: drivers/pnp/manager.c:273:
+		dev_dbg(&dev->dev, "pnp_assign_resources failed (%d)\n", ret);

CHECK:BRACES: Unbalanced braces around else statement
#785: FILE: drivers/pnp/manager.c:275:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pnp_assign_resources', this function's name, in a string
#786: FILE: drivers/pnp/manager.c:276:
+		dbg_pnp_show_resources(dev, "pnp_assign_resources succeeded");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: drivers/pnp/pnpacpi/rsparser.c:626:
+		pnpacpi_parse_fixed_port_option(dev, option_flags,
 					        &res->data.fixed_io);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_option)...) over kmalloc(sizeof(struct pnp_option)...)
#1321: FILE: drivers/pnp/quirks.c:31:
+	new_option = kmalloc(sizeof(struct pnp_option), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1323: FILE: drivers/pnp/quirks.c:33:
+	if (!new_option) {
+		dev_err(&dev->dev, "couldn't add ioport region to option set "

WARNING:SPLIT_STRING: quoted string split across lines
#1324: FILE: drivers/pnp/quirks.c:34:
+		dev_err(&dev->dev, "couldn't add ioport region to option set "
+			"%d\n", pnp_option_set(option));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: drivers/pnp/quirks.c:44:
+	dev_info(&dev->dev, "added ioport region %#llx-%#llx to set %d\n",
+		(unsigned long long) new_option->u.port.min,

CHECK:SPACING: No space is necessary after a cast
#1334: FILE: drivers/pnp/quirks.c:44:
+		(unsigned long long) new_option->u.port.min,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: drivers/pnp/quirks.c:45:
+		(unsigned long long) new_option->u.port.max,

WARNING:SPLIT_STRING: quoted string split across lines
#1414: FILE: drivers/pnp/quirks.c:85:
+			dev_info(&dev->dev, "set possible IRQs in "
+				 "option set %d to 5, 7, 10\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1424: FILE: drivers/pnp/quirks.c:93:
+				dev_info(&dev->dev, "changing possible "
+					 "DMA channel mask in option set %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1425: FILE: drivers/pnp/quirks.c:94:
+					 "DMA channel mask in option set %d "
+					 "from %#02x to 0x0A (1, 3)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1476: FILE: drivers/pnp/quirks.c:126:
+				dev_info(&dev->dev, "increased option port "
+					 "range from %#llx-%#llx to "

WARNING:SPLIT_STRING: quoted string split across lines
#1477: FILE: drivers/pnp/quirks.c:127:
+					 "range from %#llx-%#llx to "
+					 "%#llx-%#llx\n",

CHECK:SPACING: No space is necessary after a cast
#1478: FILE: drivers/pnp/quirks.c:128:
+					 (unsigned long long) port->min,

CHECK:SPACING: No space is necessary after a cast
#1479: FILE: drivers/pnp/quirks.c:129:
+					 (unsigned long long) port->min,

CHECK:SPACING: No space is necessary after a cast
#1480: FILE: drivers/pnp/quirks.c:130:
+					 (unsigned long long) port->min,

CHECK:SPACING: No space is necessary after a cast
#1481: FILE: drivers/pnp/quirks.c:131:
+					 (unsigned long long) port->max);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_option)...) over kmalloc(sizeof(struct pnp_option)...)
#1538: FILE: drivers/pnp/quirks.c:157:
+			new_option = kmalloc(sizeof(struct pnp_option),

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1541: FILE: drivers/pnp/quirks.c:160:
+			if (!new_option) {
+				dev_err(&dev->dev, "couldn't clone dependent "

WARNING:SPLIT_STRING: quoted string split across lines
#1542: FILE: drivers/pnp/quirks.c:161:
+				dev_err(&dev->dev, "couldn't clone dependent "
+					"set %d\n", set);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1582: FILE: drivers/pnp/quirks.c:178:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1616: FILE: drivers/pnp/quirks.c:203:
+		dev_info(&dev->dev, "added dependent option set %d (same as "
+			 "set %d except IRQ optional)\n", set, i);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*option)...) over kzalloc(sizeof(struct pnp_option)...)
#1688: FILE: drivers/pnp/resource.c:38:
+	option = kzalloc(sizeof(struct pnp_option), GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2100: FILE: drivers/pnp/support.c:148:
+		printk("io  min %#llx max %#llx align %lld size %lld flags %#x",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2101: FILE: drivers/pnp/support.c:149:
+		printk("io  min %#llx max %#llx align %lld size %lld flags %#x",
+			(unsigned long long) port->min,

CHECK:SPACING: No space is necessary after a cast
#2101: FILE: drivers/pnp/support.c:149:
+			(unsigned long long) port->min,

CHECK:SPACING: No space is necessary after a cast
#2102: FILE: drivers/pnp/support.c:150:
+			(unsigned long long) port->max,

CHECK:SPACING: No space is necessary after a cast
#2103: FILE: drivers/pnp/support.c:151:
+			(unsigned long long) port->align,

CHECK:SPACING: No space is necessary after a cast
#2104: FILE: drivers/pnp/support.c:152:
+			(unsigned long long) port->size, port->flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2108: FILE: drivers/pnp/support.c:156:
+		printk("mem min %#llx max %#llx align %lld size %lld flags %#x",

CHECK:SPACING: No space is necessary after a cast
#2109: FILE: drivers/pnp/support.c:157:
+		       (unsigned long long) mem->min,

CHECK:SPACING: No space is necessary after a cast
#2110: FILE: drivers/pnp/support.c:158:
+		       (unsigned long long) mem->max,

CHECK:SPACING: No space is necessary after a cast
#2111: FILE: drivers/pnp/support.c:159:
+		       (unsigned long long) mem->align,

CHECK:SPACING: No space is necessary after a cast
#2112: FILE: drivers/pnp/support.c:160:
+		       (unsigned long long) mem->size, mem->flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2116: FILE: drivers/pnp/support.c:164:
+		printk("irq");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2117: FILE: drivers/pnp/support.c:165:
+		if (bitmap_empty(irq->map.bits, PNP_IRQ_NR))
[...]
+		else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2118: FILE: drivers/pnp/support.c:166:
+			printk(" <none>");

CHECK:BRACES: Unbalanced braces around else statement
#2119: FILE: drivers/pnp/support.c:167:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2122: FILE: drivers/pnp/support.c:170:
+					printk(" %d", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2124: FILE: drivers/pnp/support.c:172:
+		printk(" flags %#x", irq->flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2126: FILE: drivers/pnp/support.c:174:
+			printk(" (optional)");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2130: FILE: drivers/pnp/support.c:178:
+		printk("dma");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2131: FILE: drivers/pnp/support.c:179:
+		if (!dma->map)
[...]
+		else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2132: FILE: drivers/pnp/support.c:180:
+			printk(" <none>");

CHECK:BRACES: Unbalanced braces around else statement
#2133: FILE: drivers/pnp/support.c:181:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2136: FILE: drivers/pnp/support.c:184:
+					printk(" %d", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2138: FILE: drivers/pnp/support.c:186:
+		printk(" (bitmask %#x) flags %#x", dma->map, dma->flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2141: FILE: drivers/pnp/support.c:189:
+	printk("\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266327.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 29 warnings, 27 checks, 1945 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266327.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
