WARNING:TYPO_SPELLING: 'implemtation' may be misspelled - perhaps 'implementation'?
#30: 
This patch has the ext4 implemtation of fallocate system call.
                        ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#135: FILE: fs/ext4/extents.c:1198:
+	BUG_ON(ext4_ext_get_actual_len(newext) == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: fs/ext4/extents.c:1502:
+^I^I^I        (unsigned long) ext4_ext_get_actual_len(ex));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#245: FILE: fs/ext4/extents.c:1502:
+			        (unsigned long) ext4_ext_get_actual_len(ex));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: fs/ext4/extents.c:1504:
+^I^I            + ext4_ext_get_actual_len(ex)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: fs/ext4/extents.c:1506:
+^I^I         + ext4_ext_get_actual_len(ex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: fs/ext4/extents.c:1510:
+^I^I^I        (unsigned long) ext4_ext_get_actual_len(ex),$

CHECK:SPACING: No space is necessary after a cast
#256: FILE: fs/ext4/extents.c:1510:
+			        (unsigned long) ext4_ext_get_actual_len(ex),

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#279: FILE: fs/ext4/extents.c:1659:
 	if (from >= le32_to_cpu(ex->ee_block)
+	    && to == le32_to_cpu(ex->ee_block) + ee_len - 1) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#295: FILE: fs/ext4/extents.c:1672:
 	} else if (from == le32_to_cpu(ex->ee_block)
+		   && to <= le32_to_cpu(ex->ee_block) + ee_len - 1) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/ext4/extents.c:2084:
+				ext4_ext_put_in_cache(inode, ee_block,
+							ee_len, ee_start,

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#394: FILE: fs/ext4/extents.c:2141:
+	if (create!=EXT4_CREATE_UNINITIALIZED_EXT)
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: fs/ext4/extents.c:2143:
+		ext4_ext_put_in_cache(inode, iblock, allocated, newblock,
+						EXT4_EXT_CACHE_EXTENT);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#430: FILE: fs/ext4/extents.c:2273:
+	handle=ext4_journal_start(inode, credits +
 	      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: fs/ext4/extents.c:2274:
+					EXT4_DATA_TRANS_BLOCKS(inode->i_sb)+1);
 					                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: fs/ext4/extents.c:2285:
+		BUG_ON(!ret);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#444: FILE: fs/ext4/extents.c:2287:
+		if (ret > 0 && test_bit(BH_New, &map_bh.b_state)
+			&& ((block + ret) > (i_size_read(inode) << blkbits)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#464: FILE: fs/ext4/extents.c:2307:
+			loff_t newsize;
+			mutex_lock(&inode->i_mutex);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: include/linux/ext4_fs.h:105:
+#define EXT4_BLOCK_ALIGN(size, blkbits) ^I(((size)+(1 << blkbits)-1) & \$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#506: FILE: include/linux/ext4_fs.h:105:
+#define EXT4_BLOCK_ALIGN(size, blkbits) 	(((size)+(1 << blkbits)-1) & \
                                         	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: include/linux/ext4_fs.h:105:
+#define EXT4_BLOCK_ALIGN(size, blkbits) 	(((size)+(1 << blkbits)-1) & \
                                         	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'blkbits' - possible side-effects?
#506: FILE: include/linux/ext4_fs.h:105:
+#define EXT4_BLOCK_ALIGN(size, blkbits) 	(((size)+(1 << blkbits)-1) & \
+							(~((1 << blkbits)-1)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'blkbits' may be better as '(blkbits)' to avoid precedence issues
#506: FILE: include/linux/ext4_fs.h:105:
+#define EXT4_BLOCK_ALIGN(size, blkbits) 	(((size)+(1 << blkbits)-1) & \
+							(~((1 << blkbits)-1)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#507: FILE: include/linux/ext4_fs.h:106:
+							(~((1 << blkbits)-1)))
 							                 ^

WARNING:TYPO_SPELLING: 'uninitialzed' may be misspelled - perhaps 'uninitialized'?
#516: FILE: include/linux/ext4_fs.h:231:
+ * want uninitialzed extents.
         ^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/linux/ext4_fs.h:985:
+extern int ext4_fallocate(struct inode *, int, loff_t, loff_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#526: FILE: include/linux/ext4_fs.h:985:
+extern int ext4_fallocate(struct inode *, int, loff_t, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#526: FILE: include/linux/ext4_fs.h:985:
+extern int ext4_fallocate(struct inode *, int, loff_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#526: FILE: include/linux/ext4_fs.h:985:
+extern int ext4_fallocate(struct inode *, int, loff_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#526: FILE: include/linux/ext4_fs.h:985:
+extern int ext4_fallocate(struct inode *, int, loff_t, loff_t);

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#538: FILE: include/linux/ext4_fs_extents.h:128:
+ * Macro-instructions to handle (mark/unmark/check/create) unitialized
                                                            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#540: FILE: include/linux/ext4_fs_extents.h:130:
+ * in assigning unitialized extents to the file.
                 ^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: include/linux/ext4_fs_extents.h:134:
+#define ext4_ext_is_uninitialized(ext)  ^I((le16_to_cpu((ext)->ee_len))& \$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxE)
#544: FILE: include/linux/ext4_fs_extents.h:134:
+#define ext4_ext_is_uninitialized(ext)  	((le16_to_cpu((ext)->ee_len))& \
                                         	                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxE)
#546: FILE: include/linux/ext4_fs_extents.h:136:
+#define ext4_ext_get_actual_len(ext)		((le16_to_cpu((ext)->ee_len))& \
                                     		                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#549: FILE: include/linux/ext4_fs_extents.h:139:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440467.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 13 warnings, 17 checks, 463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440467.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
