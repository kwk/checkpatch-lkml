WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: arch/x86/Kconfig.debug:179:
+config X86_DS_SELFTEST
+    bool "DS selftest"
+    default y
+    depends on DEBUG_KERNEL
+    depends on X86_DS
+	---help---
+	  Perform Debug Store selftests at boot time.
+	  If in doubt, say "N".
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: arch/x86/kernel/ds_selftest.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: arch/x86/kernel/ds_selftest.c:16:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: arch/x86/kernel/ds_selftest.c:19:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#129: FILE: arch/x86/kernel/ds_selftest.c:25:
+		printk(KERN_CONT "failed to access trace...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#129: FILE: arch/x86/kernel/ds_selftest.c:25:
+		printk(KERN_CONT "failed to access trace...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#135: FILE: arch/x86/kernel/ds_selftest.c:31:
+		printk(KERN_CONT "bts read not available...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#135: FILE: arch/x86/kernel/ds_selftest.c:31:
+		printk(KERN_CONT "bts read not available...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#141: FILE: arch/x86/kernel/ds_selftest.c:37:
+		printk(KERN_CONT "empty bts buffer...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#141: FILE: arch/x86/kernel/ds_selftest.c:37:
+		printk(KERN_CONT "empty bts buffer...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#145: FILE: arch/x86/kernel/ds_selftest.c:41:
+		printk(KERN_CONT "bad bts trace setup...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#145: FILE: arch/x86/kernel/ds_selftest.c:41:
+		printk(KERN_CONT "bad bts trace setup...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#150: FILE: arch/x86/kernel/ds_selftest.c:46:
+		printk(KERN_CONT "bad bts buffer setup...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#150: FILE: arch/x86/kernel/ds_selftest.c:46:
+		printk(KERN_CONT "bad bts buffer setup...");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->ds.top < trace->ds.begin'
#153: FILE: arch/x86/kernel/ds_selftest.c:49:
+	if ((trace->ds.top < trace->ds.begin) ||
+	    (trace->ds.end <= trace->ds.top)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->ds.end <= trace->ds.top'
#153: FILE: arch/x86/kernel/ds_selftest.c:49:
+	if ((trace->ds.top < trace->ds.begin) ||
+	    (trace->ds.end <= trace->ds.top)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#155: FILE: arch/x86/kernel/ds_selftest.c:51:
+		printk(KERN_CONT "bts top out of bounds...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#155: FILE: arch/x86/kernel/ds_selftest.c:51:
+		printk(KERN_CONT "bts top out of bounds...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#197: FILE: arch/x86/kernel/ds_selftest.c:93:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#197: FILE: arch/x86/kernel/ds_selftest.c:93:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#206: FILE: arch/x86/kernel/ds_selftest.c:102:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#206: FILE: arch/x86/kernel/ds_selftest.c:102:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#216: FILE: arch/x86/kernel/ds_selftest.c:112:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#216: FILE: arch/x86/kernel/ds_selftest.c:112:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#234: FILE: arch/x86/kernel/ds_selftest.c:130:
+	printk(KERN_INFO "[ds] bts selftest...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#242: FILE: arch/x86/kernel/ds_selftest.c:138:
+		printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#242: FILE: arch/x86/kernel/ds_selftest.c:138:
+		printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#265: FILE: arch/x86/kernel/ds_selftest.c:161:
+		printk(KERN_CONT "no trace/overflow...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#265: FILE: arch/x86/kernel/ds_selftest.c:161:
+		printk(KERN_CONT "no trace/overflow...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#286: FILE: arch/x86/kernel/ds_selftest.c:182:
+		printk(KERN_CONT "suspend not working...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#286: FILE: arch/x86/kernel/ds_selftest.c:182:
+		printk(KERN_CONT "suspend not working...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#308: FILE: arch/x86/kernel/ds_selftest.c:204:
+		printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#308: FILE: arch/x86/kernel/ds_selftest.c:204:
+		printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#337: FILE: arch/x86/kernel/ds_selftest.c:233:
+	printk(KERN_CONT "%s.\n", (error ? "failed" : "passed"));

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#337: FILE: arch/x86/kernel/ds_selftest.c:233:
+	printk(KERN_CONT "%s.\n", (error ? "failed" : "passed"));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#351: FILE: arch/x86/kernel/ds_selftest.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#360: FILE: arch/x86/kernel/ds_selftest.h:10:
+extern int ds_selftest_bts(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: arch/x86/kernel/ds_selftest.h:11:
+extern int ds_selftest_pebs(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000155413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 6 checks, 311 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000155413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
