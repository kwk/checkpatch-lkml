WARNING:TYPO_SPELLING: 'ocasional' may be misspelled - perhaps 'occasional'?
#26: 
> > On some strange workload involving strace and fuse I get ocasional 
                                                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reproducable' may be misspelled - perhaps 'reproducible'?
#33: 
> how reproducable are these lockups - could you possibly trace it? If yes 
      ^^^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
--- linux-2.6.22-rc2.orig/include/linux/linkage.h	2007-04-26 05:08:32.000000000 +0200

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#54: FILE: include/linux/linkage.h:6:
+#define notrace __attribute ((no_instrument_function))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#54: FILE: include/linux/linkage.h:6:
+#define notrace __attribute ((no_instrument_function))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#135: FILE: include/asm-i386/module.h:79:
+#define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY MODULE_REGPARM MODULE_STACKSIZE

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#255: FILE: fs/proc/proc_misc.c:627:
+extern struct seq_operations latency_trace_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#260: FILE: fs/proc/proc_misc.c:632:
+}
+static struct file_operations proc_latency_trace_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#260: FILE: fs/proc/proc_misc.c:632:
+static struct file_operations proc_latency_trace_operations = {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/clocksource.h:239:
+extern cycle_t get_monotonic_cycles(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/linux/clocksource.h:240:
+extern unsigned long cycles_to_usecs(cycle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cycle_t' should also have an identifier name
#323: FILE: include/linux/clocksource.h:240:
+extern unsigned long cycles_to_usecs(cycle_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/clocksource.h:241:
+extern cycle_t usecs_to_cycles(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#324: FILE: include/linux/clocksource.h:241:
+extern cycle_t usecs_to_cycles(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/kernel.h:159:
+extern void early_printk(const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#336: FILE: include/linux/kernel.h:160:
+	__attribute__ ((format (printf, 1, 2)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#345: FILE: include/linux/latency_hist.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: include/linux/latency_hist.h:16:
+        INTERRUPT_LATENCY = 0,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: include/linux/latency_hist.h:16:
+        INTERRUPT_LATENCY = 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: include/linux/latency_hist.h:17:
+        PREEMPT_LATENCY,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: include/linux/latency_hist.h:17:
+        PREEMPT_LATENCY,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: include/linux/latency_hist.h:18:
+        WAKEUP_LATENCY$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: include/linux/latency_hist.h:18:
+        WAKEUP_LATENCY$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/linux/latency_hist.h:25:
+extern void latency_hist(int latency_type, int cpu, unsigned long latency);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: include/linux/latency_hist.h:28:
+# define latency_hist(a,b,c) do { (void)(cpu); } while (0)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: include/linux/latency_hist.h:28:
+# define latency_hist(a,b,c) do { (void)(cpu); } while (0)
                          ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#372: FILE: include/linux/latency_hist.h:28:
+# define latency_hist(a,b,c) do { (void)(cpu); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: include/linux/preempt.h:13:
+  extern void notrace add_preempt_count(unsigned int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#389: FILE: include/linux/preempt.h:13:
+  extern void notrace add_preempt_count(unsigned int val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: include/linux/preempt.h:14:
+  extern void notrace sub_preempt_count(unsigned int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/preempt.h:14:
+  extern void notrace sub_preempt_count(unsigned int val);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: include/linux/preempt.h:15:
+  extern void notrace mask_preempt_count(unsigned int mask);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/linux/preempt.h:15:
+  extern void notrace mask_preempt_count(unsigned int mask);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: include/linux/preempt.h:16:
+  extern void notrace unmask_preempt_count(unsigned int mask);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#392: FILE: include/linux/preempt.h:16:
+  extern void notrace unmask_preempt_count(unsigned int mask);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#396: FILE: include/linux/preempt.h:20:
+# define mask_preempt_count(mask) \
+		do { preempt_count() |= (mask); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#398: FILE: include/linux/preempt.h:22:
+# define unmask_preempt_count(mask) \
+		do { preempt_count() &= ~(mask); } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: include/linux/preempt.h:27:
+  extern void touch_critical_timing(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/preempt.h:27:
+  extern void touch_critical_timing(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: include/linux/preempt.h:28:
+  extern void stop_critical_timing(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: include/linux/preempt.h:28:
+  extern void stop_critical_timing(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: include/linux/sched.h:218:
+extern void irq_show_regs_callback(int cpu, struct pt_regs *regs);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: include/linux/sched.h:256:
+  extern void print_traces(struct task_struct *task);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: include/linux/sched.h:256:
+  extern void print_traces(struct task_struct *task);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: include/linux/sched.h:270:
+   extern unsigned long arm_return_addr(int level);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/linux/sched.h:270:
+   extern unsigned long arm_return_addr(int level);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: include/linux/sched.h:288:
+  extern void notrace mcount(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#460: FILE: include/linux/sched.h:288:
+  extern void notrace mcount(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: include/linux/sched.h:294:
+  extern int mcount_enabled, trace_enabled, trace_user_triggered,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: include/linux/sched.h:299:
+  extern void notrace trace_special(unsigned long v1, unsigned long v2, unsigned long v3);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: include/linux/sched.h:299:
+  extern void notrace trace_special(unsigned long v1, unsigned long v2, unsigned long v3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: include/linux/sched.h:300:
+  extern void notrace trace_special_pid(int pid, unsigned long v1, unsigned long v2);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#472: FILE: include/linux/sched.h:300:
+  extern void notrace trace_special_pid(int pid, unsigned long v1, unsigned long v2);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: include/linux/sched.h:301:
+  extern void notrace trace_special_u64(unsigned long long v1, unsigned long v2);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#473: FILE: include/linux/sched.h:301:
+  extern void notrace trace_special_u64(unsigned long long v1, unsigned long v2);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: include/linux/sched.h:302:
+  extern void notrace trace_special_sym(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: include/linux/sched.h:302:
+  extern void notrace trace_special_sym(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: include/linux/sched.h:303:
+  extern void stop_trace(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: include/linux/sched.h:303:
+  extern void stop_trace(void);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#476: FILE: include/linux/sched.h:304:
+# define start_trace() do { trace_enabled = 1; } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: include/linux/sched.h:305:
+  extern void print_last_trace(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: include/linux/sched.h:305:
+  extern void print_last_trace(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: include/linux/sched.h:306:
+  extern void nmi_trace(unsigned long eip, unsigned long parent_eip,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: include/linux/sched.h:306:
+  extern void nmi_trace(unsigned long eip, unsigned long parent_eip,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: include/linux/sched.h:308:
+  extern long user_trace_start(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#480: FILE: include/linux/sched.h:308:
+  extern long user_trace_start(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: include/linux/sched.h:309:
+  extern long user_trace_stop(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: include/linux/sched.h:309:
+  extern long user_trace_stop(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: include/linux/sched.h:310:
+  extern void trace_cmdline(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#482: FILE: include/linux/sched.h:310:
+  extern void trace_cmdline(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: include/linux/sched.h:311:
+  extern void init_tracer(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#483: FILE: include/linux/sched.h:311:
+  extern void init_tracer(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#493: FILE: include/linux/sched.h:321:
+# define trace_special(v1,v2,v3)		do { } while (0)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#493: FILE: include/linux/sched.h:321:
+# define trace_special(v1,v2,v3)		do { } while (0)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: include/linux/sched.h:322:
+# define trace_special_pid(pid,v1,v2)		do { } while (0)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: include/linux/sched.h:322:
+# define trace_special_pid(pid,v1,v2)		do { } while (0)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#495: FILE: include/linux/sched.h:323:
+# define trace_special_u64(v1,v2)		do { } while (0)
                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: include/linux/sched.h:336:
+  extern int wakeup_timing;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#509: FILE: include/linux/sched.h:337:
+  extern int wakeup_timing;
+  extern void __trace_start_sched_wakeup(struct task_struct *p);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: include/linux/sched.h:337:
+  extern void __trace_start_sched_wakeup(struct task_struct *p);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: include/linux/sched.h:337:
+  extern void __trace_start_sched_wakeup(struct task_struct *p);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: include/linux/sched.h:338:
+  extern void trace_stop_sched_switched(struct task_struct *p);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#510: FILE: include/linux/sched.h:338:
+  extern void trace_stop_sched_switched(struct task_struct *p);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: include/linux/sched.h:339:
+  extern void trace_change_sched_cpu(struct task_struct *p, int new_cpu);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#511: FILE: include/linux/sched.h:339:
+  extern void trace_change_sched_cpu(struct task_struct *p, int new_cpu);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: include/linux/sched.h:348:
+  extern void notrace time_hardirqs_on(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: include/linux/sched.h:348:
+  extern void notrace time_hardirqs_on(unsigned long a0, unsigned long a1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: include/linux/sched.h:349:
+  extern void notrace time_hardirqs_off(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#521: FILE: include/linux/sched.h:349:
+  extern void notrace time_hardirqs_off(unsigned long a0, unsigned long a1);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#598: FILE: kernel/latency_hist.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#599: FILE: kernel/latency_hist.c:2:
+ * kernel/latency_hist.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#615: FILE: kernel/latency_hist.c:18:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#617: FILE: kernel/latency_hist.c:20:
+typedef struct hist_data_struct {

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#628: FILE: kernel/latency_hist.c:31:
+static struct proc_dir_entry * latency_hist_root = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#628: FILE: kernel/latency_hist.c:31:
+static struct proc_dir_entry * latency_hist_root = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: kernel/latency_hist.c:32:
+static char * latency_hist_proc_dir_root = "latency_hist";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#631: FILE: kernel/latency_hist.c:34:
+static char * percpu_proc_name = "CPU";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: kernel/latency_hist.c:38:
+static char * interrupt_off_hist_proc_dir = "interrupt_off_latency";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#640: FILE: kernel/latency_hist.c:43:
+static char * preempt_off_hist_proc_dir = "preempt_off_latency";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: kernel/latency_hist.c:48:
+static char * wakeup_latency_hist_proc_dir = "wakeup_latency";

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: kernel/latency_hist.c:55:
+        do_div(x, y);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: kernel/latency_hist.c:55:
+        do_div(x, y);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#653: FILE: kernel/latency_hist.c:56:
+        return x;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: kernel/latency_hist.c:56:
+        return x;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: kernel/latency_hist.c:61:
+	hist_data_t * my_hist;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#660: FILE: kernel/latency_hist.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= NR_CPUS'
#660: FILE: kernel/latency_hist.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency_type < INTERRUPT_LATENCY'
#660: FILE: kernel/latency_hist.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency_type > WAKEUP_LATENCY'
#660: FILE: kernel/latency_hist.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency < 0'
#660: FILE: kernel/latency_hist.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#660: FILE: kernel/latency_hist.c:63:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#661: FILE: kernel/latency_hist.c:64:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type < INTERRUPT_LATENCY)
+			|| (latency_type > WAKEUP_LATENCY) || (latency < 0))

ERROR:SPACING: space required before the open parenthesis '('
#664: FILE: kernel/latency_hist.c:67:
+	switch(latency_type) {

CHECK:SPACING: No space is necessary after a cast
#701: FILE: kernel/latency_hist.c:104:
+	my_hist->avg_lat = (unsigned long) u64_div(my_hist->accumulate_lat,

WARNING:RETURN_VOID: void function return statements are not generally useful
#704: FILE: kernel/latency_hist.c:107:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#706: FILE: kernel/latency_hist.c:109:
+static void *l_start(struct seq_file *m, loff_t * pos)

CHECK:SPACING: No space is necessary after a cast
#710: FILE: kernel/latency_hist.c:113:
+	hist_data_t *my_hist = (hist_data_t *) m->private;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#737: FILE: kernel/latency_hist.c:140:
+static void *l_next(struct seq_file *m, void *p, loff_t * pos)

CHECK:SPACING: No space is necessary after a cast
#740: FILE: kernel/latency_hist.c:143:
+	hist_data_t *my_hist = (hist_data_t *) m->private;

CHECK:SPACING: No space is necessary after a cast
#757: FILE: kernel/latency_hist.c:160:
+	int index = *(loff_t *) p;

CHECK:SPACING: No space is necessary after a cast
#758: FILE: kernel/latency_hist.c:161:
+	hist_data_t *my_hist = (hist_data_t *) m->private;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#764: FILE: kernel/latency_hist.c:167:
+static struct seq_operations latency_hist_seq_op = {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#779: FILE: kernel/latency_hist.c:182:
+		for (j = 0; j < NR_CPUS; j++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry[i][j]"
#780: FILE: kernel/latency_hist.c:183:
+			if (entry[i][j] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct file_operations should normally be const
#798: FILE: kernel/latency_hist.c:201:
+static struct file_operations latency_hist_seq_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#814: FILE: kernel/latency_hist.c:217:
+
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#817: FILE: kernel/latency_hist.c:220:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#824: FILE: kernel/latency_hist.c:227:
+		my_hist = (hist_data_t *) entry[INTERRUPT_LATENCY][i]->data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: kernel/latency_hist.c:228:
+		atomic_set(&my_hist->hist_mode,1);
 		                              ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#832: FILE: kernel/latency_hist.c:235:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#839: FILE: kernel/latency_hist.c:242:
+		my_hist = (hist_data_t *) entry[PREEMPT_LATENCY][i]->data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#840: FILE: kernel/latency_hist.c:243:
+		atomic_set(&my_hist->hist_mode,1);
 		                              ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#847: FILE: kernel/latency_hist.c:250:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#854: FILE: kernel/latency_hist.c:257:
+		my_hist = (hist_data_t *) entry[WAKEUP_LATENCY][i]->data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#855: FILE: kernel/latency_hist.c:258:
+		atomic_set(&my_hist->hist_mode,1);
 		                              ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#861: FILE: kernel/latency_hist.c:264:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#863: FILE: kernel/latency_hist.c:266:
+__initcall(latency_hist_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#870: FILE: kernel/latency_trace.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#871: FILE: kernel/latency_trace.c:2:
+ *  kernel/latency_trace.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#894: FILE: kernel/latency_trace.c:25:
+#include <asm/uaccess.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#908: FILE: kernel/latency_trace.c:39:
+int trace_use_raw_cycles = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#918: FILE: kernel/latency_trace.c:49:
+ * points, but the trace entries inbetween are timestamped with
                                  ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#926: FILE: kernel/latency_trace.c:57:
+	do_div(delta, cpu_khz/1000+1);
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#926: FILE: kernel/latency_trace.c:57:
+	do_div(delta, cpu_khz/1000+1);
 	                          ^

CHECK:SPACING: No space is necessary after a cast
#935: FILE: kernel/latency_trace.c:66:
+	return (unsigned long) delta;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#975: FILE: kernel/latency_trace.c:106:
+static __cacheline_aligned_in_smp struct sch_struct sch =
+		{ trace_lock: __RAW_SPIN_LOCK_UNLOCKED };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#994: FILE: kernel/latency_trace.c:125:
+ * and what happens together happens separately as well, so this doesnt
                                                                  ^^^^^^

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1000: FILE: kernel/latency_trace.c:131:
+enum trace_type
+{

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1016: FILE: kernel/latency_trace.c:147:
+enum trace_flag_type
+{

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1060: FILE: kernel/latency_trace.c:191:
+#define MAX_TRACE (65536UL*16UL)
                           ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1097: FILE: kernel/latency_trace.c:228:
+} __attribute__((packed));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1129: FILE: kernel/latency_trace.c:260:
+static struct cpu_trace cpu_traces[NR_CPUS] ____cacheline_aligned_in_smp =
+{ [0 ... NR_CPUS-1] = {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1129: FILE: kernel/latency_trace.c:260:
+{ [0 ... NR_CPUS-1] = {
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: kernel/latency_trace.c:262:
+ .stack_check = 1$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: kernel/latency_trace.c:264:
+ } };$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1137: FILE: kernel/latency_trace.c:268:
+int trace_enabled = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1139: FILE: kernel/latency_trace.c:270:
+int stackframe_tracing = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1140: FILE: kernel/latency_trace.c:271:
+int mcount_enabled = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1141: FILE: kernel/latency_trace.c:272:
+int trace_freerunning = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1142: FILE: kernel/latency_trace.c:273:
+int trace_print_on_crash = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1143: FILE: kernel/latency_trace.c:274:
+int trace_verbose = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1144: FILE: kernel/latency_trace.c:275:
+int trace_all_cpus = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1145: FILE: kernel/latency_trace.c:276:
+int print_functions = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1146: FILE: kernel/latency_trace.c:277:
+int trace_all_runnable = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1151: FILE: kernel/latency_trace.c:282:
+int trace_user_triggered = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1184: FILE: kernel/latency_trace.c:315:
+	char namebuf[KSYM_NAME_LEN+1];
 	                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1191: FILE: kernel/latency_trace.c:322:
+		printk("%s+%#lx/%#lx", sym_name, offset, size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1193: FILE: kernel/latency_trace.c:324:
+		printk("<%08lx>", eip);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1199: FILE: kernel/latency_trace.c:330:
+# define STACK_WARN (THREAD_SIZE/8)
                                 ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1205: FILE: kernel/latency_trace.c:336:
+#if (defined(__i386__) || defined(__x86_64__)) && defined(CONFIG_FRAME_POINTER)

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1215: FILE: kernel/latency_trace.c:346:
+static char worst_stack_comm[TASK_COMM_LEN+1];
                                           ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1239: FILE: kernel/latency_trace.c:370:
+# ifdef __i386__

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1240: FILE: kernel/latency_trace.c:371:
+		asm ("mov %%ebp, %0\n" :"=g"(worst_stack_bp));
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1242: FILE: kernel/latency_trace.c:373:
+		asm ("mov %%rbp, %0\n" :"=g"(worst_stack_bp));
 		                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bp' may be better as '(bp)' to avoid precedence issues
#1258: FILE: kernel/latency_trace.c:389:
+#define CONVERT_TO_SAVED_STACK(bp) \
+	((void *)worst_stack + ((unsigned long)bp & (THREAD_SIZE-1)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1259: FILE: kernel/latency_trace.c:390:
+	((void *)worst_stack + ((unsigned long)bp & (THREAD_SIZE-1)))
 	                                                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1277: FILE: kernel/latency_trace.c:408:
+		if (frame_size < THREAD_SIZE) {
[...]
+		} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1278: FILE: kernel/latency_trace.c:409:
+			printk("{ %4ld} ", frame_size);

CHECK:BRACES: Unbalanced braces around else statement
#1280: FILE: kernel/latency_trace.c:411:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1281: FILE: kernel/latency_trace.c:412:
+			printk("{=%4ld} ", sum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1283: FILE: kernel/latency_trace.c:414:
+		printk("[<%08lx>] ", addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1285: FILE: kernel/latency_trace.c:416:
+		printk("\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1294: FILE: kernel/latency_trace.c:425:
+                p < (void *)worst_stack + THREAD_SIZE - 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1294: FILE: kernel/latency_trace.c:425:
+                p < (void *)worst_stack + THREAD_SIZE - 3;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1303: FILE: kernel/latency_trace.c:434:
+					(worst_stack_sp & (THREAD_SIZE-1)));
 					                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1309: FILE: kernel/latency_trace.c:440:
+			printk("(%4ld) ", (unsigned long)stack - prev_frame);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1310: FILE: kernel/latency_trace.c:441:
+			printk("[<%08lx>] ", addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1324: FILE: kernel/latency_trace.c:455:
+	unsigned long fill_ratio;
+	printk("----------------------------->\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1324: FILE: kernel/latency_trace.c:455:
+	printk("----------------------------->\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1325: FILE: kernel/latency_trace.c:456:
+	printk("| new stack fill maximum: %s/%d, %ld bytes (out of %ld bytes).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1326: FILE: kernel/latency_trace.c:457:
+	printk("| new stack fill maximum: %s/%d, %ld bytes (out of %ld bytes).\n",
+		worst_stack_comm, worst_stack_pid,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1327: FILE: kernel/latency_trace.c:458:
+		MAX_STACK-worst_stack_left, (long)MAX_STACK);
 		         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1328: FILE: kernel/latency_trace.c:459:
+	fill_ratio = (MAX_STACK-worst_stack_left)*100/(long)MAX_STACK;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1328: FILE: kernel/latency_trace.c:459:
+	fill_ratio = (MAX_STACK-worst_stack_left)*100/(long)MAX_STACK;
 	                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1328: FILE: kernel/latency_trace.c:459:
+	fill_ratio = (MAX_STACK-worst_stack_left)*100/(long)MAX_STACK;
 	                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1329: FILE: kernel/latency_trace.c:460:
+	printk("| Stack fill ratio: %02ld%%", fill_ratio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1331: FILE: kernel/latency_trace.c:462:
+		printk(" - BUG: that's quite high, please report this!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1333: FILE: kernel/latency_trace.c:464:
+		printk(" - that's still OK, no need to report this.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1334: FILE: kernel/latency_trace.c:465:
+	printk("------------|\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1337: FILE: kernel/latency_trace.c:468:
+	printk("<---------------------------\n\n");

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1367: FILE: kernel/latency_trace.c:498:
+#ifdef __i386__

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1378: FILE: kernel/latency_trace.c:509:
+		printk(KERN_ALERT "BUG: stack overflow: only %ld bytes left! [%08lx...(%08lx-%08lx)]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1379: FILE: kernel/latency_trace.c:510:
+		printk(KERN_ALERT "BUG: stack overflow: only %ld bytes left! [%08lx...(%08lx-%08lx)]\n",
+			stack_left - sizeof(struct thread_info),

CHECK:BRACES: Unbalanced braces around else statement
#1392: FILE: kernel/latency_trace.c:523:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1407: FILE: kernel/latency_trace.c:538:
+	char namebuf[KSYM_NAME_LEN+1];
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1429: FILE: kernel/latency_trace.c:560:
+	early_printk("%d%c%c",
+		entry->cpu,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1433: FILE: kernel/latency_trace.c:564:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1433: FILE: kernel/latency_trace.c:564:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1433: FILE: kernel/latency_trace.c:564:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1437: FILE: kernel/latency_trace.c:568:
+	if (hardirq && softirq)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1439: FILE: kernel/latency_trace.c:570:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1440: FILE: kernel/latency_trace.c:571:
+		if (hardirq)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1442: FILE: kernel/latency_trace.c:573:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1461: FILE: kernel/latency_trace.c:592:
+		early_printk(": <%08lx> <%08lx> <%08lx>\n",
+			entry->u.special.v1,

ERROR:SPACING: space required before the open parenthesis '('
#1468: FILE: kernel/latency_trace.c:599:
+#  define early_print_entry(x) do { } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx_next >= MAX_TRACE'
#1499: FILE: kernel/latency_trace.c:630:
+	if (unlikely((trace_freerunning || print_functions || atomic_read(&tr->underrun)) &&
+		     (idx_next >= MAX_TRACE) && !atomic_read(&tr->overrun))) {

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#1537: FILE: kernel/latency_trace.c:668:
+		(irqs_disabled_flags(flags) ? TRACE_FLAG_IRQS_HARD_OFF : 0)|
 		                                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: kernel/latency_trace.c:716:
+___trace(enum trace_type type, unsigned long eip, unsigned long parent_eip,
+		unsigned long v1, unsigned long v2,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1606: FILE: kernel/latency_trace.c:737:
+	if (wakeup_timing && !trace_all_cpus && !trace_print_on_crash &&
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1611: FILE: kernel/latency_trace.c:742:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1641: FILE: kernel/latency_trace.c:772:
+EXPORT_SYMBOL(trace_special);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1648: FILE: kernel/latency_trace.c:779:
+EXPORT_SYMBOL(trace_special_pid);

CHECK:SPACING: No space is necessary after a cast
#1653: FILE: kernel/latency_trace.c:784:
+		 (unsigned long) (v1 >> 32), (unsigned long) (v1 & 0xFFFFFFFF),

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1657: FILE: kernel/latency_trace.c:788:
+EXPORT_SYMBOL(trace_special_u64);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1669: FILE: kernel/latency_trace.c:800:
+^I^Ireturn ^I___trace(TRACE_SPECIAL, CALLER_ADDR0, 0, CALLER_ADDR1, 0, 0);$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1673: FILE: kernel/latency_trace.c:804:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1679: FILE: kernel/latency_trace.c:810:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1691: FILE: kernel/latency_trace.c:822:
+	___trace(TRACE_SPECIAL_SYM, entries[0], 0,
+					entries[1], entries[2], entries[3]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1693: FILE: kernel/latency_trace.c:824:
+	___trace(TRACE_SPECIAL_SYM, entries[4], 0,
+					entries[5], entries[6], entries[7]);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1696: FILE: kernel/latency_trace.c:827:
+EXPORT_SYMBOL(trace_special_sym);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1710: FILE: kernel/latency_trace.c:841:
+EXPORT_SYMBOL(mcount);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1746: FILE: kernel/latency_trace.c:877:
+	char namebuf[KSYM_NAME_LEN+1];
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1767: FILE: kernel/latency_trace.c:898:
+	char namebuf[KSYM_NAME_LEN+1];
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1775: FILE: kernel/latency_trace.c:906:
+		seq_printf(m, "%s+%#lx/%#lx <%08lx>",
+					sym_name, offset, size, eip);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1782: FILE: kernel/latency_trace.c:913:
+static int pid_to_cmdline_array[PID_MAX_DEFAULT+1];
                                                ^

WARNING:MINMAX: min() should probably be min_t(unsigned long, pid, PID_MAX_DEFAULT)
#1837: FILE: kernel/latency_trace.c:968:
+	pid = min(pid, (unsigned long)PID_MAX_DEFAULT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1866: FILE: kernel/latency_trace.c:997:
+		memcpy(save->trace, tr->trace,
+			min(save->trace_idx, MAX_TRACE) *

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1873: FILE: kernel/latency_trace.c:1004:
+
+

CHECK:SPACING: No space is necessary after a cast
#1884: FILE: kernel/latency_trace.c:1015:
+	cycle_t min_stamp = (cycle_t) -1;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1892: FILE: kernel/latency_trace.c:1023:
+		if (idx > MAX_TRACE*NR_CPUS) {
 		                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1892: FILE: kernel/latency_trace.c:1023:
+		if (idx > MAX_TRACE*NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1893: FILE: kernel/latency_trace.c:1024:
+			printk("huh: idx (%d) > %ld*%d!\n", idx, MAX_TRACE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1894: FILE: kernel/latency_trace.c:1025:
+			printk("huh: idx (%d) > %ld*%d!\n", idx, MAX_TRACE,
+				NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1894: FILE: kernel/latency_trace.c:1025:
+				NR_CPUS);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1952: FILE: kernel/latency_trace.c:1083:
+		out_tr.last_timestamp = tmp_out->trace[entries-1].timestamp;
 		                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1980: FILE: kernel/latency_trace.c:1111:
+	last_stamp = tmp_max->trace[entries-1].timestamp;
 	                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1988: FILE: kernel/latency_trace.c:1119:
+			printk("CPU%d: %016Lx (%016Lx) ... #%d (%016Lx) %016Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1988: FILE: kernel/latency_trace.c:1119:
+			printk("CPU%d: %016Lx (%016Lx) ... #%d (%016Lx) %016Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1989: FILE: kernel/latency_trace.c:1120:
+			printk("CPU%d: %016Lx (%016Lx) ... #%d (%016Lx) %016Lx\n",
+				cpu,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1993: FILE: kernel/latency_trace.c:1124:
+				tmp_max->trace[entries-2].timestamp,
 				                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1994: FILE: kernel/latency_trace.c:1125:
+				tmp_max->trace[entries-1].timestamp);
 				                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1999: FILE: kernel/latency_trace.c:1130:
+		printk("CPU%d entries: %d\n", max_tr.cpu, entries);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2000: FILE: kernel/latency_trace.c:1131:
+		printk("first stamp: %016Lx\n", first_stamp);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2000: FILE: kernel/latency_trace.c:1131:
+		printk("first stamp: %016Lx\n", first_stamp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2001: FILE: kernel/latency_trace.c:1132:
+		printk(" last stamp: %016Lx\n", first_stamp);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2001: FILE: kernel/latency_trace.c:1132:
+		printk(" last stamp: %016Lx\n", first_stamp);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2004: FILE: kernel/latency_trace.c:1135:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2005: FILE: kernel/latency_trace.c:1136:
+	printk("first_stamp: %Ld [%016Lx]\n", first_stamp, first_stamp);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2005: FILE: kernel/latency_trace.c:1136:
+	printk("first_stamp: %Ld [%016Lx]\n", first_stamp, first_stamp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2006: FILE: kernel/latency_trace.c:1137:
+	printk(" last_stamp: %Ld [%016Lx]\n", last_stamp, last_stamp);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2006: FILE: kernel/latency_trace.c:1137:
+	printk(" last_stamp: %Ld [%016Lx]\n", last_stamp, last_stamp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2007: FILE: kernel/latency_trace.c:1138:
+	printk("   +1 stamp: %Ld [%016Lx]\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2007: FILE: kernel/latency_trace.c:1138:
+	printk("   +1 stamp: %Ld [%016Lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2008: FILE: kernel/latency_trace.c:1139:
+	printk("   +1 stamp: %Ld [%016Lx]\n",
+		tmp_max->trace[entries].timestamp,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2010: FILE: kernel/latency_trace.c:1141:
+	printk("   +2 stamp: %Ld [%016Lx]\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2010: FILE: kernel/latency_trace.c:1141:
+	printk("   +2 stamp: %Ld [%016Lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2011: FILE: kernel/latency_trace.c:1142:
+	printk("   +2 stamp: %Ld [%016Lx]\n",
+		tmp_max->trace[entries+1].timestamp,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2011: FILE: kernel/latency_trace.c:1142:
+		tmp_max->trace[entries+1].timestamp,
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2012: FILE: kernel/latency_trace.c:1143:
+		tmp_max->trace[entries+1].timestamp);
 		                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2013: FILE: kernel/latency_trace.c:1144:
+	printk("      delta: %Ld\n", last_stamp-first_stamp);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2013: FILE: kernel/latency_trace.c:1144:
+	printk("      delta: %Ld\n", last_stamp-first_stamp);
 	                                       ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2013: FILE: kernel/latency_trace.c:1144:
+	printk("      delta: %Ld\n", last_stamp-first_stamp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2014: FILE: kernel/latency_trace.c:1145:
+	printk("    entries: %d\n", entries);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2039: FILE: kernel/latency_trace.c:1170:
+		if (sum > MAX_TRACE*NR_CPUS) {
 		                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2039: FILE: kernel/latency_trace.c:1170:
+		if (sum > MAX_TRACE*NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2040: FILE: kernel/latency_trace.c:1171:
+			printk("huh: sum (%d) > %ld*%d!\n", sum, MAX_TRACE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2041: FILE: kernel/latency_trace.c:1172:
+			printk("huh: sum (%d) > %ld*%d!\n", sum, MAX_TRACE,
+				NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2041: FILE: kernel/latency_trace.c:1172:
+				NR_CPUS);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2062: FILE: kernel/latency_trace.c:1193:
+	seq_puts(m, "                 _------=> CPU#            \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2063: FILE: kernel/latency_trace.c:1194:
+	seq_puts(m, "                / _-----=> irqs-off        \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2064: FILE: kernel/latency_trace.c:1195:
+	seq_puts(m, "               | / _----=> need-resched    \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2065: FILE: kernel/latency_trace.c:1196:
+	seq_puts(m, "               || / _---=> hardirq/softirq \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2066: FILE: kernel/latency_trace.c:1197:
+	seq_puts(m, "               ||| / _--=> preempt-depth   \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2067: FILE: kernel/latency_trace.c:1198:
+	seq_puts(m, "               |||| /                      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2068: FILE: kernel/latency_trace.c:1199:
+	seq_puts(m, "               |||||     delay             \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2069: FILE: kernel/latency_trace.c:1200:
+	seq_puts(m, "   cmd     pid ||||| time  |   caller      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2070: FILE: kernel/latency_trace.c:1201:
+	seq_puts(m, "      \\   /    |||||   \\   |   /           \n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2088: FILE: kernel/latency_trace.c:1219:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2103: FILE: kernel/latency_trace.c:1234:
+		seq_printf(m, " latency: %lu us, #%lu/%lu, CPU#%d | (M:%s VP:%d, KP:%d, SP:%d HP:%d",
+			cycles_to_usecs(tr->saved_latency),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2125: FILE: kernel/latency_trace.c:1256:
+ hardirq_preemption$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2137: FILE: kernel/latency_trace.c:1268:
+		seq_printf(m, "    | task: %.16s-%d (uid:%ld nice:%ld policy:%ld rt_prio:%ld)\n",
+			tr->comm, tr->pid, tr->uid, tr->nice,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2179: FILE: kernel/latency_trace.c:1310:
+static void print_timestamp(struct seq_file *m, unsigned long abs_usecs,
+						unsigned long rel_usecs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2192: FILE: kernel/latency_trace.c:1323:
+print_timestamp_short(struct seq_file *m, unsigned long abs_usecs,
+			unsigned long rel_usecs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2211: FILE: kernel/latency_trace.c:1342:
+	seq_printf(m, "%c%c",
+		(entry->flags & TRACE_FLAG_IRQS_OFF) ? 'd' :

ERROR:CODE_INDENT: code indent should use tabs where possible
#2214: FILE: kernel/latency_trace.c:1345:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2214: FILE: kernel/latency_trace.c:1345:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2214: FILE: kernel/latency_trace.c:1345:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2218: FILE: kernel/latency_trace.c:1349:
+	if (hardirq && softirq)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2220: FILE: kernel/latency_trace.c:1351:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2221: FILE: kernel/latency_trace.c:1352:
+		if (hardirq)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2223: FILE: kernel/latency_trace.c:1354:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2237: FILE: kernel/latency_trace.c:1368:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2239: FILE: kernel/latency_trace.c:1370:
+static int notrace l_show_fn(struct seq_file *m, unsigned long trace_idx,
+		struct trace_entry *entry, struct trace_entry *entry0,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2248: FILE: kernel/latency_trace.c:1379:
+		seq_printf(m, "%16s %5d %d %d %08x %08lx [%016Lx] %ld.%03ldms (+%ld.%03ldms): ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2249: FILE: kernel/latency_trace.c:1380:
+		seq_printf(m, "%16s %5d %d %d %08x %08lx [%016Lx] %ld.%03ldms (+%ld.%03ldms): ",
+			pid_to_cmdline(entry->pid),

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2252: FILE: kernel/latency_trace.c:1383:
+			entry->timestamp, abs_usecs/1000,
 			                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2253: FILE: kernel/latency_trace.c:1384:
+			abs_usecs % 1000, rel_usecs/1000, rel_usecs % 1000);
 			                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2270: FILE: kernel/latency_trace.c:1401:
+static int notrace l_show_special(struct seq_file *m, unsigned long trace_idx,
+		struct trace_entry *entry, struct trace_entry *entry0,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2302: FILE: kernel/latency_trace.c:1433:
+		seq_printf(m, " (%13Ld %ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2311: FILE: kernel/latency_trace.c:1442:
+l_show_special_pid(struct seq_file *m, unsigned long trace_idx,
+		struct trace_entry *entry, struct trace_entry *entry0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2329: FILE: kernel/latency_trace.c:1460:
+	seq_printf(m, " <%.8s-%d> (%ld %ld)\n",
+		pid_to_cmdline(pid), pid,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2363: FILE: kernel/latency_trace.c:1494:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2365: FILE: kernel/latency_trace.c:1496:
+static int notrace l_show_cmdline(struct seq_file *m, unsigned long trace_idx,
+		struct trace_entry *entry, struct trace_entry *entry0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2377: FILE: kernel/latency_trace.c:1508:
+	seq_printf(m,
+		"[ => %16s ] %ld.%03ldms (+%ld.%03ldms)\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2379: FILE: kernel/latency_trace.c:1510:
+			abs_usecs/1000, abs_usecs % 1000,
 			         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2380: FILE: kernel/latency_trace.c:1511:
+			rel_usecs/1000, rel_usecs % 1000);
 			         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2393: FILE: kernel/latency_trace.c:1524:
+static int notrace l_show_syscall(struct seq_file *m, unsigned long trace_idx,
+		struct trace_entry *entry, struct trace_entry *entry0,

CHECK:BRACES: braces {} should be used on all arms of this statement
#2408: FILE: kernel/latency_trace.c:1539:
+	if (nr & 0x80000000) {
[...]
+	} else
[...]
+	else
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2414: FILE: kernel/latency_trace.c:1545:
+	} else
[...]
+	if (nr < NR_syscalls)

CHECK:BRACES: Unbalanced braces around else statement
#2414: FILE: kernel/latency_trace.c:1545:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2423: FILE: kernel/latency_trace.c:1554:
+	seq_printf(m, " (%016lx %016lx %016lx)\n",
+		entry->u.syscall.p1, entry->u.syscall.p2, entry->u.syscall.p3);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2426: FILE: kernel/latency_trace.c:1557:
+	seq_printf(m, " (%08lx %08lx %08lx)\n",
+		entry->u.syscall.p1, entry->u.syscall.p2, entry->u.syscall.p3);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2433: FILE: kernel/latency_trace.c:1564:
+static int notrace l_show_sysret(struct seq_file *m, unsigned long trace_idx,
+		struct trace_entry *entry, struct trace_entry *entry0,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2449: FILE: kernel/latency_trace.c:1580:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2474: FILE: kernel/latency_trace.c:1605:
+	switch (entry->type) {
+		case TRACE_FN:
[...]
+		case TRACE_SPECIAL:
[...]
+		case TRACE_SPECIAL_PID:
[...]
+		case TRACE_SPECIAL_U64:
[...]
+		case TRACE_SPECIAL_SYM:
[...]
+		case TRACE_CMDLINE:
[...]
+		case TRACE_SYSCALL:
[...]
+		case TRACE_SYSRET:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#2506: FILE: kernel/latency_trace.c:1637:
+struct seq_operations latency_trace_op = {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2550: FILE: kernel/latency_trace.c:1681:
+	if (all_cpus) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2555: FILE: kernel/latency_trace.c:1686:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2571: FILE: kernel/latency_trace.c:1702:
+___trace(enum trace_type type, unsigned long eip, unsigned long parent_eip,
+		unsigned long v1, unsigned long v2,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2597: FILE: kernel/latency_trace.c:1728:
+		printk("Preemption threshold = %u us\n", thresh);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2601: FILE: kernel/latency_trace.c:1732:
+__setup("preempt_thresh=", setup_preempt_thresh);

ERROR:SPACING: space required before the open brace '{'
#2612: FILE: kernel/latency_trace.c:1743:
+	else{

CHECK:BRACES: Unbalanced braces around else statement
#2612: FILE: kernel/latency_trace.c:1743:
+	else{

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2636: FILE: kernel/latency_trace.c:1767:
+	delta = T1-T0;
 	          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2651: FILE: kernel/latency_trace.c:1782:
+	delta = T2-T0;
 	          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2666: FILE: kernel/latency_trace.c:1797:
+		printk("bug: updating %016Lx > %016Lx?\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2666: FILE: kernel/latency_trace.c:1797:
+		printk("bug: updating %016Lx > %016Lx?\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2667: FILE: kernel/latency_trace.c:1798:
+		printk("bug: updating %016Lx > %016Lx?\n",
+			preempt_max_latency, delta);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2668: FILE: kernel/latency_trace.c:1799:
+		printk("  [%016Lx %016Lx %016Lx]\n", T0, T1, T2);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2668: FILE: kernel/latency_trace.c:1799:
+		printk("  [%016Lx %016Lx %016Lx]\n", T0, T1, T2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2682: FILE: kernel/latency_trace.c:1813:
+		printk("(%16s-%-5d|#%d): %lu us critical section "

WARNING:SPLIT_STRING: quoted string split across lines
#2683: FILE: kernel/latency_trace.c:1814:
+		printk("(%16s-%-5d|#%d): %lu us critical section "
+			"violates %lu us threshold.\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2689: FILE: kernel/latency_trace.c:1820:
+		printk("(%16s-%-5d|#%d): new %lu us maximum-latency "

WARNING:SPLIT_STRING: quoted string split across lines
#2690: FILE: kernel/latency_trace.c:1821:
+		printk("(%16s-%-5d|#%d): new %lu us maximum-latency "
+			"critical section.\n => started at timestamp %lu: ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2696: FILE: kernel/latency_trace.c:1827:
+	printk(" =>   ended at timestamp %lu: ", t1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2700: FILE: kernel/latency_trace.c:1831:
+	printk(" =>   dump-end timestamp %lu\n\n", t1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2722: FILE: kernel/latency_trace.c:1853:
+	if (!tr->critical_start || atomic_read(&tr->disabled) ||
+			trace_user_triggered || wakeup_timing)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2752: FILE: kernel/latency_trace.c:1883:
+	if (tr->critical_start || atomic_read(&tr->disabled) ||
+			trace_user_triggered || wakeup_timing)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2778: FILE: kernel/latency_trace.c:1909:
+	if (!tr->critical_start || atomic_read(&tr->disabled) ||
+			trace_user_triggered || wakeup_timing)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2854: FILE: kernel/latency_trace.c:1985:
+EXPORT_SYMBOL(trace_hardirqs_on);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2867: FILE: kernel/latency_trace.c:1998:
+EXPORT_SYMBOL(trace_hardirqs_off);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2902: FILE: kernel/latency_trace.c:2033:
+	if (DEBUG_WARN_ON((preempt_count() & PREEMPT_MASK) >= PREEMPT_MASK-10))
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2910: FILE: kernel/latency_trace.c:2041:
+		unsigned int idx = preempt_count() & PREEMPT_MASK;
+		if (idx < MAX_PREEMPT_TRACE) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val < PREEMPT_MASK'
#2945: FILE: kernel/latency_trace.c:2076:
+	if (DEBUG_WARN_ON((val < PREEMPT_MASK) &&
+			  !(preempt_count() & PREEMPT_MASK)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2967: FILE: kernel/latency_trace.c:2098:
+EXPORT_SYMBOL(sub_preempt_count);

CHECK:SPACING: No space is necessary after a cast
#2990: FILE: kernel/latency_trace.c:2121:
+	(void) eip, (void) parent_eip;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3014: FILE: kernel/latency_trace.c:2145:
+
+

WARNING:TYPO_SPELLING: 'supercedes' may be misspelled - perhaps 'supersedes'?
#3020: FILE: kernel/latency_trace.c:2151:
+ * to a CPU - or an even-higher-prio task supercedes it. (in that
                                           ^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3048: FILE: kernel/latency_trace.c:2179:
+	delta = T1-T0;
 	          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3069: FILE: kernel/latency_trace.c:2200:
+		printk("bug2: updating %016lx > %016Lx?\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3069: FILE: kernel/latency_trace.c:2200:
+		printk("bug2: updating %016lx > %016Lx?\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3070: FILE: kernel/latency_trace.c:2201:
+		printk("bug2: updating %016lx > %016Lx?\n",
+			preempt_max_latency, delta);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3071: FILE: kernel/latency_trace.c:2202:
+		printk("  [%016Lx %016Lx]\n", T0, T1);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3071: FILE: kernel/latency_trace.c:2202:
+		printk("  [%016Lx %016Lx]\n", T0, T1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3088: FILE: kernel/latency_trace.c:2219:
+		printk("(%16s-%-5d|#%d): %lu us wakeup latency "

WARNING:SPLIT_STRING: quoted string split across lines
#3089: FILE: kernel/latency_trace.c:2220:
+		printk("(%16s-%-5d|#%d): %lu us wakeup latency "
+			"violates %lu us threshold.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3094: FILE: kernel/latency_trace.c:2225:
+		printk("(%16s-%-5d|#%d): new %lu us maximum-latency "

WARNING:SPLIT_STRING: quoted string split across lines
#3095: FILE: kernel/latency_trace.c:2226:
+		printk("(%16s-%-5d|#%d): new %lu us maximum-latency "
+			"wakeup.\n", current->comm, current->pid,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sch.task->prio <= p->prio'
#3126: FILE: kernel/latency_trace.c:2257:
+	if (sch.task && (sch.task->prio <= p->prio))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3141: FILE: kernel/latency_trace.c:2272:
+	sch.tr = tr = cpu_traces + cpu;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sch.task->prio >= p->prio'
#3184: FILE: kernel/latency_trace.c:2315:
+		if (sch.task && (sch.task->prio >= p->prio))

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#3226: FILE: kernel/latency_trace.c:2357:
+	 * (we wont get any tracing done otherwise):
 	       ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3236: FILE: kernel/latency_trace.c:2367:
+	if (preempt_count() || irqs_disabled()) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3239: FILE: kernel/latency_trace.c:2370:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3271: FILE: kernel/latency_trace.c:2402:
+EXPORT_SYMBOL_GPL(user_trace_start);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3290: FILE: kernel/latency_trace.c:2421:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3295: FILE: kernel/latency_trace.c:2426:
+			printk("wrong stop: curr: %s/%d[%d] => %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3299: FILE: kernel/latency_trace.c:2430:
+				printk("wrong stop: curr: %s/%d[%d]\n",

CHECK:BRACES: Unbalanced braces around else statement
#3308: FILE: kernel/latency_trace.c:2439:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3326: FILE: kernel/latency_trace.c:2457:
+		if (tr->critical_sequence != max_sequence ||
+						down_trylock(&max_mutex))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3346: FILE: kernel/latency_trace.c:2477:
+			printk("(%16s-%-5d|#%d): %lu us user-latency "

WARNING:SPLIT_STRING: quoted string split across lines
#3347: FILE: kernel/latency_trace.c:2478:
+			printk("(%16s-%-5d|#%d): %lu us user-latency "
+				"violates %lu us threshold.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3352: FILE: kernel/latency_trace.c:2483:
+			printk("(%16s-%-5d|#%d): new %lu us user-latency.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3353: FILE: kernel/latency_trace.c:2484:
+			printk("(%16s-%-5d|#%d): new %lu us user-latency.\n",
+				current->comm, current->pid,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3360: FILE: kernel/latency_trace.c:2491:
+EXPORT_SYMBOL(user_trace_stop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3372: FILE: kernel/latency_trace.c:2503:
+EXPORT_SYMBOL(stop_trace);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3381: FILE: kernel/latency_trace.c:2512:
+	printk("%-5d ", entry->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3383: FILE: kernel/latency_trace.c:2514:
+	printk("%d%c%c",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3384: FILE: kernel/latency_trace.c:2515:
+	printk("%d%c%c",
+		entry->cpu,

ERROR:CODE_INDENT: code indent should use tabs where possible
#3388: FILE: kernel/latency_trace.c:2519:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3388: FILE: kernel/latency_trace.c:2519:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3388: FILE: kernel/latency_trace.c:2519:
+ ^I^I((entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'N' : '.'));$

CHECK:BRACES: braces {} should be used on all arms of this statement
#3392: FILE: kernel/latency_trace.c:2523:
+	if (hardirq && softirq)
[...]
+	else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3393: FILE: kernel/latency_trace.c:2524:
+		printk("H");

CHECK:BRACES: Unbalanced braces around else statement
#3394: FILE: kernel/latency_trace.c:2525:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3395: FILE: kernel/latency_trace.c:2526:
+		if (hardirq)
[...]
+		else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3396: FILE: kernel/latency_trace.c:2527:
+			printk("h");

CHECK:BRACES: Unbalanced braces around else statement
#3397: FILE: kernel/latency_trace.c:2528:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3399: FILE: kernel/latency_trace.c:2530:
+				printk("s");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3401: FILE: kernel/latency_trace.c:2532:
+				printk(".");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3406: FILE: kernel/latency_trace.c:2537:
+		printk(":%x ", entry->preempt_count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3408: FILE: kernel/latency_trace.c:2539:
+		printk(":. ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3410: FILE: kernel/latency_trace.c:2541:
+	printk("%ld.%03ldms: ", abs_usecs/1000, abs_usecs % 1000);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3410: FILE: kernel/latency_trace.c:2541:
+	printk("%ld.%03ldms: ", abs_usecs/1000, abs_usecs % 1000);
 	                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3415: FILE: kernel/latency_trace.c:2546:
+		printk("  <= (");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3417: FILE: kernel/latency_trace.c:2548:
+		printk(")\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3420: FILE: kernel/latency_trace.c:2551:
+		printk(" special: %lx %lx %lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3425: FILE: kernel/latency_trace.c:2556:
+		printk("  spec64: %lx%08lx %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3447: FILE: kernel/latency_trace.c:2578:
+	if (trace_enabled != -1 || trace_print_cpu != cpu ||
+						!trace_print_on_crash) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3449: FILE: kernel/latency_trace.c:2580:
+			printk("skipping trace printing on CPU#%d != %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3450: FILE: kernel/latency_trace.c:2581:
+			printk("skipping trace printing on CPU#%d != %d\n",
+				cpu, trace_print_cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3461: FILE: kernel/latency_trace.c:2592:
+	printk("Last %ld trace entries:\n", MAX_TRACE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3463: FILE: kernel/latency_trace.c:2594:
+	printk("curr idx: %d\n", idx0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3471: FILE: kernel/latency_trace.c:2602:
+			idx = MAX_TRACE-1;
 			               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3483: FILE: kernel/latency_trace.c:2614:
+	printk("printed %ld entries\n", MAX_TRACE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3500: FILE: kernel/latency_trace.c:2631:
+void notrace nmi_trace(unsigned long eip, unsigned long parent_eip,
+			unsigned long flags)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3508: FILE: kernel/latency_trace.c:2639:
+	for (cpu = 0; cpu < NR_CPUS; cpu++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3519: FILE: kernel/latency_trace.c:2650:
+void notrace nmi_trace(unsigned long eip, unsigned long parent_eip,
+			unsigned long flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3533: FILE: kernel/latency_trace.c:2664:
+	unsigned int i, lim = count & PREEMPT_MASK;
+	if (lim >= MAX_PREEMPT_TRACE)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3534: FILE: kernel/latency_trace.c:2665:
+		lim = MAX_PREEMPT_TRACE-1;
 		                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3535: FILE: kernel/latency_trace.c:2666:
+	printk("---------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3536: FILE: kernel/latency_trace.c:2667:
+	printk("| preempt count: %08x ]\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3537: FILE: kernel/latency_trace.c:2668:
+	printk("| %d-level deep critical section nesting:\n", lim);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3538: FILE: kernel/latency_trace.c:2669:
+	printk("----------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3540: FILE: kernel/latency_trace.c:2671:
+		printk(".. [<%08lx>] .... ", task->preempt_trace_eip[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3542: FILE: kernel/latency_trace.c:2673:
+		printk(".....[<%08lx>] ..   ( <= ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3543: FILE: kernel/latency_trace.c:2674:
+		printk(".....[<%08lx>] ..   ( <= ",
+				task->preempt_trace_parent_eip[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3546: FILE: kernel/latency_trace.c:2677:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3578: FILE: kernel/latency_trace.c:2709:
+	printk("num_possible_cpus(): %d\n", num_possible_cpus());

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3580: FILE: kernel/latency_trace.c:2711:
+	size = sizeof(struct trace_entry)*MAX_TRACE;
 	                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3586: FILE: kernel/latency_trace.c:2717:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3590: FILE: kernel/latency_trace.c:2721:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3600: FILE: kernel/latency_trace.c:2731:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3604: FILE: kernel/latency_trace.c:2735:
+			printk(KERN_INFO

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3616: FILE: kernel/latency_trace.c:2747:
+	size = sizeof(struct trace_entry)*MAX_TRACE*num_possible_cpus();
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3616: FILE: kernel/latency_trace.c:2747:
+	size = sizeof(struct trace_entry)*MAX_TRACE*num_possible_cpus();
 	                                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3619: FILE: kernel/latency_trace.c:2750:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3623: FILE: kernel/latency_trace.c:2754:
+		printk(KERN_INFO "allocated %ld bytes out-trace buffer.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3624: FILE: kernel/latency_trace.c:2755:
+		printk(KERN_INFO "allocated %ld bytes out-trace buffer.\n",
+			size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3628: FILE: kernel/latency_trace.c:2759:
+	printk(KERN_INFO

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prio' - possible side-effects?
#3846: FILE: kernel/sched.c:79:
+#define __PRIO(prio) \
+	((prio) <= 99 ? 199 - (prio) : (prio) - 120)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4405: FILE: lib/debug_locks.c:39:
+#if 0

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#4407: FILE: lib/debug_locks.c:41:
+		if (spin_is_locked(&current->pi_lock))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4414: FILE: lib/debug_locks.c:48:
+			printk("stopped custom tracer.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4435: FILE: scripts/trace-it.c:1:
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4472: FILE: scripts/trace-it.c:38:
+int main (int argc, char **argv)

WARNING:TYPO_SPELLING: 'couldnt' may be misspelled - perhaps 'couldn't'?
#4497: FILE: scripts/trace-it.c:63:
+		fprintf(stderr, "trace-it: couldnt start tracing!\n");
 		                           ^^^^^^^

WARNING:TYPO_SPELLING: 'couldnt' may be misspelled - perhaps 'couldn't'?
#4502: FILE: scripts/trace-it.c:68:
+		fprintf(stderr, "trace-it: couldnt stop tracing!\n");
 		                           ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4513: FILE: scripts/trace-it.c:79:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4634: FILE: arch/i386/kernel/mcount-wrapper.S:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4671: FILE: arch/i386/kernel/traps.c:140:
+void notrace dump_trace(struct task_struct *task, struct pt_regs *regs,
 	        unsigned long *stack,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#4702: FILE: arch/i386/mm/fault.c:485:
 		if (nr == 6) {
+		stop_trace();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4731: FILE: include/asm-i386/processor.h:607:
+      unsigned int *ecx, unsigned int *edx)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4888: FILE: arch/x86_64/kernel/head64.c:62:
+void __init notrace x86_64_start_kernel(char * real_mode_data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4927: FILE: arch/x86_64/kernel/setup64.c:191:
+void __cpuinit notrace cpu_init (void)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4965: FILE: arch/x86_64/kernel/vsyscall.c:46:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr))) notrace
                                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4965: FILE: arch/x86_64/kernel/vsyscall.c:46:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_" #nr) over __attribute__((__section__(".vsyscall_" #nr)))
#4965: FILE: arch/x86_64/kernel/vsyscall.c:46:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr))) notrace

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#4965: FILE: arch/x86_64/kernel/vsyscall.c:46:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr))) notrace

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4987: FILE: include/asm-x86_64/calling.h:173:
+	mov     %rdx, %rcx
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4987: FILE: include/asm-x86_64/calling.h:173:
+	mov     %rdx, %rcx
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4988: FILE: include/asm-x86_64/calling.h:174:
+	mov     %rsi, %rdx
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4988: FILE: include/asm-x86_64/calling.h:174:
+	mov     %rsi, %rdx
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4989: FILE: include/asm-x86_64/calling.h:175:
+	mov     %rdi, %rsi
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4989: FILE: include/asm-x86_64/calling.h:175:
+	mov     %rdi, %rsi
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4990: FILE: include/asm-x86_64/calling.h:176:
+	mov     %rax, %rdi
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#4990: FILE: include/asm-x86_64/calling.h:176:
+	mov     %rax, %rdi
 	              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4998: FILE: include/asm-x86_64/calling.h:184:
+
+

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5004: FILE: include/asm-x86_64/calling.h:190:
+	mov     %rdx, %rcx
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5004: FILE: include/asm-x86_64/calling.h:190:
+	mov     %rdx, %rcx
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5005: FILE: include/asm-x86_64/calling.h:191:
+	mov     %rsi, %rdx
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5005: FILE: include/asm-x86_64/calling.h:191:
+	mov     %rsi, %rdx
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5006: FILE: include/asm-x86_64/calling.h:192:
+	mov     %rdi, %rsi
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5006: FILE: include/asm-x86_64/calling.h:192:
+	mov     %rdi, %rsi
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5007: FILE: include/asm-x86_64/calling.h:193:
+	mov     %rax, %rdi
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5007: FILE: include/asm-x86_64/calling.h:193:
+	mov     %rax, %rdi
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5020: FILE: include/asm-x86_64/calling.h:206:
+	mov     %rax, %rdi
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5020: FILE: include/asm-x86_64/calling.h:206:
+	mov     %rax, %rdi
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5035: FILE: include/asm-x86_64/unistd.h:14:
+#define NR_syscalls (__NR_syscall_max+1)
                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5166: FILE: kernel/time/tick-sched.c:179:
+			printk(KERN_ERR

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427181.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 55 errors, 223 warnings, 202 checks, 4788 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427181.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
