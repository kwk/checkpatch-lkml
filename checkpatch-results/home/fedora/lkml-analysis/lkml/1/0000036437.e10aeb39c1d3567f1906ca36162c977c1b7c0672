WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perf-fixes-for-linus

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#369: FILE: arch/x86/kernel/entry_64.S:1080:
+	subq $EXCEPTION_STKSZ, TSS_ist + (\ist - 1) * 8(%r12)
 	                                   ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#372: FILE: arch/x86/kernel/entry_64.S:1082:
+	addq $EXCEPTION_STKSZ, TSS_ist + (\ist - 1) * 8(%r12)
 	                                   ^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#761: FILE: include/linux/perf_event.h:875:
+extern void perf_event_enable(struct perf_event *event);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#762: FILE: include/linux/perf_event.h:876:
+extern void perf_event_disable(struct perf_event *event);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ctx)...) over kzalloc(sizeof(struct perf_event_context)...)
#1106: FILE: kernel/perf_event.c:1656:
+		ctx = kzalloc(sizeof(struct perf_event_context), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*child_ctx)...) over kzalloc(sizeof(struct perf_event_context)...)
#1238: FILE: kernel/perf_event.c:5140:
+			child_ctx = kzalloc(sizeof(struct perf_event_context),

WARNING:SPLIT_STRING: quoted string split across lines
#1291: FILE: kernel/trace/trace_kprobe.c:624:
+		pr_info("Probe definition must be started with 'p', 'r' or"
+			" '-'.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1664: FILE: tools/perf/builtin-kmem.c:690:
+static int parse_caller_opt(const struct option *opt __used,
+			  const char *arg __used, int unset __used)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1679: FILE: tools/perf/builtin-kmem.c:697:
+static int parse_alloc_opt(const struct option *opt __used,
+			  const char *arg __used, int unset __used)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1832: FILE: tools/perf/builtin-probe.c:171:
+	OPT_CALLBACK('d', "del", NULL, "[GROUP:]EVENT", "delete a probe event.",
+		opt_del_probe_event),

WARNING:SPLIT_STRING: quoted string split across lines
#1862: FILE: tools/perf/builtin-probe.c:216:
+			pr_warning("  Error: Don't use --list with"
+				   " --add/--del.\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1883: FILE: tools/perf/builtin-probe.c:236:
+	if (session.vmlinux) {
[...]
-	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1887: FILE: tools/perf/builtin-probe.c:239:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#1897: FILE: tools/perf/builtin-probe.c:246:
+		pr_debug("Could not open vmlinux/module file."
+			 " Try to use symbols.\n");

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1962: FILE: tools/perf/builtin-report.c:627:
+		dump_printf("... chain: nr:%Lu\n", data.callchain->nr);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1975: FILE: tools/perf/builtin-report.c:637:
+				dump_printf("..... %2d: %016Lx\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2070: FILE: tools/perf/builtin-sched.c:431:
+		die("Error: sys_perf_event_open() syscall returned"
+		    "with %d (%s)\n", fd, strerror(errno));

WARNING:MISSING_SPACE: break quoted strings at a space character
#2070: FILE: tools/perf/builtin-sched.c:431:
+		die("Error: sys_perf_event_open() syscall returned"
+		    "with %d (%s)\n", fd, strerror(errno));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2080: FILE: tools/perf/builtin-sched.c:441:
+	BUG_ON(ret != sizeof(runtime));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2147: FILE: tools/perf/builtin-sched.c:1217:
+	printf("|%11.3f ms |%9llu | avg:%9.3f ms | max:%9.3f ms | max at: %9.6f s\n",
 	      (double)work_list->total_runtime / 1e6,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2223: FILE: tools/perf/builtin-sched.c:1504:
+process_sched_runtime_event(void *data,
 			   struct event *event,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2273: FILE: tools/perf/builtin-sched.c:1552:
+process_sched_migrate_task_event(void *data,
 			   struct event *event,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2306: FILE: tools/perf/builtin-sched.c:1577:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_STRING: line length of 135 exceeds 100 columns
#2401: FILE: tools/perf/builtin-sched.c:1711:
+	printf("\n ---------------------------------------------------------------------------------------------------------------\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_STRING: line length of 134 exceeds 100 columns
#2402: FILE: tools/perf/builtin-sched.c:1712:
+	printf("  Task                  |   Runtime ms  | Switches | Average delay ms | Maximum delay ms | Maximum delay at     |\n");

WARNING:LONG_LINE_STRING: line length of 133 exceeds 100 columns
#2403: FILE: tools/perf/builtin-sched.c:1713:
+	printf(" ---------------------------------------------------------------------------------------------------------------\n");

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#2507: FILE: tools/perf/builtin-timechart.c:500:
+	te = (void *)data.raw_data;
 	^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#2529: FILE: tools/perf/builtin-timechart.c:522:
+			sched_wakeup(data.cpu, data.time, data.pid, te);
 			                                            ^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#2533: FILE: tools/perf/builtin-timechart.c:525:
+			sched_switch(data.cpu, data.time, te);
 			                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2665: FILE: tools/perf/util/event.c:325:
+		u32 *p = (u32 *)array;
+		data->pid = p[0];

WARNING:LINE_SPACING: Missing a blank line after declarations
#2692: FILE: tools/perf/util/event.c:352:
+		u32 *p = (u32 *)array;
+		data->cpu = *p;

WARNING:TYPO_SPELLING: 'unsuported' may be misspelled - perhaps 'unsupported'?
#2702: FILE: tools/perf/util/event.c:362:
+		pr_debug("PERF_SAMPLE_READ is unsuported for now\n");
 		                              ^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2713: FILE: tools/perf/util/event.c:373:
+		u32 *p = (u32 *)array;
+		data->raw_size = *p;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#2859: FILE: tools/perf/util/probe-event.c:51:
+	__attribute__((format(printf, 3, 4)));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2945: FILE: tools/perf/util/probe-event.c:447:
+		if (include_group) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2949: FILE: tools/perf/util/probe-event.c:451:
+		} else

WARNING:NAKED_SSCANF: unchecked sscanf return value
#3009: FILE: tools/perf/util/probe-event.c:520:
+			sscanf(pp->probes[i], "%s", buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3085: FILE: tools/perf/util/probe-event.h:13:
+extern void del_trace_kprobe_events(struct strlist *dellist);

WARNING:SPLIT_STRING: quoted string split across lines
#3166: FILE: tools/perf/util/trace-event-perl.c:576:
 	fprintf(stderr, "Perl scripting not supported."
+		"  Install libperl and rebuild perf to enable it.\n"

WARNING:SPLIT_STRING: quoted string split across lines
#3168: FILE: tools/perf/util/trace-event-perl.c:578:
+		"For example:\n  # apt-get install libperl-dev (ubuntu)"
+		"\n  # yum install perl-ExtUtils-Embed (Fedora)"

WARNING:SPLIT_STRING: quoted string split across lines
#3169: FILE: tools/perf/util/trace-event-perl.c:579:
+		"\n  # yum install perl-ExtUtils-Embed (Fedora)"
+		"\n  etc.\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#3244: FILE: tools/perf/util/trace-event-perl.h:37:
+static void boot_Perf__Trace__Context(pTHX_ CV *cv) {}
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <boot_Perf__Trace__Context>
#3244: FILE: tools/perf/util/trace-event-perl.h:37:
+static void boot_Perf__Trace__Context(pTHX_ CV *cv) {}

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pTHX_>
#3244: FILE: tools/perf/util/trace-event-perl.h:37:
+static void boot_Perf__Trace__Context(pTHX_ CV *cv) {}

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#3245: FILE: tools/perf/util/trace-event-perl.h:38:
+static void boot_DynaLoader(pTHX_ CV *cv) {}
                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <boot_DynaLoader>
#3245: FILE: tools/perf/util/trace-event-perl.h:38:
+static void boot_DynaLoader(pTHX_ CV *cv) {}

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#3249: FILE: tools/perf/util/trace-event-perl.h:42:
+void boot_Perf__Trace__Context(pTHX_ CV *cv);
                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#3250: FILE: tools/perf/util/trace-event-perl.h:43:
+void boot_DynaLoader(pTHX_ CV *cv);
                               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036437.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 23 checks, 2768 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036437.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
