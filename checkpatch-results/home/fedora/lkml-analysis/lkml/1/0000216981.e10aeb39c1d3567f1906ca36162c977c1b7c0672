WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#16: 
Subject: [PATCH 5/5] cifs: add global TCP session list and reenable TCP session sharing
                                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'heirarchy' may be misspelled - perhaps 'hierarchy'?
#26: 
implementing a new scheme. The idea is that this should be a heirarchy:
                                                             ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: fs/cifs/cifsproto.h:105:
+extern void cifs_put_tcp_session(struct TCP_Server_Info *server);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#204: FILE: fs/cifs/connect.c:1348:
+	struct sockaddr_in *addr4 = (struct sockaddr_in *) addr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#205: FILE: fs/cifs/connect.c:1349:
+	struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *) addr;

CHECK:CAMELCASE: Avoid CamelCase: <tcpStatus>
#213: FILE: fs/cifs/connect.c:1357:
+		if (server->tcpStatus == CifsNew)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <CifsNew>
#213: FILE: fs/cifs/connect.c:1357:
+		if (server->tcpStatus == CifsNew)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr4->sin_addr.s_addr !=
 		     server->addr.sockAddr.sin_addr.s_addr'
#216: FILE: fs/cifs/connect.c:1360:
+		if (addr->sa_family == AF_INET &&
+		    (addr4->sin_addr.s_addr !=
+		     server->addr.sockAddr.sin_addr.s_addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <sockAddr>
#218: FILE: fs/cifs/connect.c:1362:
+		     server->addr.sockAddr.sin_addr.s_addr))

CHECK:CAMELCASE: Avoid CamelCase: <sockAddr6>
#221: FILE: fs/cifs/connect.c:1365:
+			 memcmp(&server->addr.sockAddr6.sin6_addr,

CHECK:CAMELCASE: Avoid CamelCase: <GlobalMid_Lock>
#247: FILE: fs/cifs/connect.c:1391:
+	spin_lock(&GlobalMid_Lock);

CHECK:CAMELCASE: Avoid CamelCase: <CifsExiting>
#248: FILE: fs/cifs/connect.c:1392:
+	server->tcpStatus = CifsExiting;

CHECK:CAMELCASE: Avoid CamelCase: <srvTcp>
#280: FILE: fs/cifs/connect.c:1917:
+	srvTcp = cifs_find_tcp_session(&addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: fs/cifs/connect.c:1987:
+			list_add(&cifs_tcp_session_list,
+						&srvTcp->tcp_session_list);

WARNING:TYPO_SPELLING: 'accidently' may be misspelled - perhaps 'accidentally'?
#322: FILE: fs/cifs/connect.c:2189:
+		/* up accidently freeing someone elses tcon struct */
 		      ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <pSesInfo>
#337: FILE: fs/cifs/connect.c:2196:
+				    (pSesInfo->status == CifsGood))

CHECK:CAMELCASE: Avoid CamelCase: <CifsGood>
#337: FILE: fs/cifs/connect.c:2196:
+				    (pSesInfo->status == CifsGood))

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBLogoff>
#338: FILE: fs/cifs/connect.c:2197:
+					CIFSSMBLogoff(xid, pSesInfo);

CHECK:BRACES: Unbalanced braces around else statement
#339: FILE: fs/cifs/connect.c:2198:
+				else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216981.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 16 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216981.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
