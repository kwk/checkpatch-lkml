WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#41: FILE: include/linux/mm.h:807:
+extern int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#41: FILE: include/linux/mm.h:807:
+extern int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#71: FILE: include/linux/ptrace.h:99:
+extern int ptrace_readstringdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/ptrace.h:99:
+extern int ptrace_readstringdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: kernel/ptrace.c:513:
+	long j;
+	ret=0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#159: FILE: kernel/ptrace.c:513:
+	ret=0;
 	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: kernel/ptrace.c:514:
+	if (!access_ok(VERIFY_READ, addr,size*sizeof(struct ptrace_multi))) {
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#160: FILE: kernel/ptrace.c:514:
+	if (!access_ok(VERIFY_READ, addr,size*sizeof(struct ptrace_multi))) {
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#164: FILE: kernel/ptrace.c:518:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#164: FILE: kernel/ptrace.c:518:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
 	           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#164: FILE: kernel/ptrace.c:518:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
 	                       ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#164: FILE: kernel/ptrace.c:518:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
 	                                     ^

WARNING:SPACING: space prohibited before semicolon
#166: FILE: kernel/ptrace.c:520:
+		struct ptrace_multi __user pm ;

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#167: FILE: kernel/ptrace.c:521:
+		if (__copy_from_user(&pm, (struct ptrace_multi __user *)addr, sizeof(struct ptrace_multi)) == 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: kernel/ptrace.c:521:
+		struct ptrace_multi __user pm ;
+		if (__copy_from_user(&pm, (struct ptrace_multi __user *)addr, sizeof(struct ptrace_multi)) == 0) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#169: FILE: kernel/ptrace.c:523:
+			switch ( pm.request){
+				case PTRACE_PEEKTEXT:
+				case PTRACE_PEEKDATA:
+				case PTRACE_PEEKUSR:
+				case PTRACE_POKETEXT:
+				case PTRACE_POKEDATA:
+				case PTRACE_POKEUSR:
[...]
+				case PTRACE_PEEKCHARDATA:
[...]
+				case PTRACE_POKECHARDATA:
[...]
+				case PTRACE_PEEKSTRINGDATA:
[...]
+				default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open brace '{'
#169: FILE: kernel/ptrace.c:523:
+			switch ( pm.request){

ERROR:SPACING: space prohibited after that open parenthesis '('
#169: FILE: kernel/ptrace.c:523:
+			switch ( pm.request){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#176: FILE: kernel/ptrace.c:530:
+					if (len <= 0) len=1;
 					                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#176: FILE: kernel/ptrace.c:530:
+					if (len <= 0) len=1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: kernel/ptrace.c:531:
+					for (j=0; j<len && ret==0; j++)
 					      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#177: FILE: kernel/ptrace.c:531:
+					for (j=0; j<len && ret==0; j++)
 					           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#177: FILE: kernel/ptrace.c:531:
+					for (j=0; j<len && ret==0; j++)
 					                      ^

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#178: FILE: kernel/ptrace.c:532:
+						ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long));

CHECK:SPACING: No space is necessary after a cast
#178: FILE: kernel/ptrace.c:532:
+						ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#178: FILE: kernel/ptrace.c:532:
+						ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long));
 						   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#178: FILE: kernel/ptrace.c:532:
+						ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long));
 						                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#178: FILE: kernel/ptrace.c:532:
+						ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long));
 						                                                                                               ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#187: FILE: kernel/ptrace.c:541:
+					ret = ptrace_readstringdata(child, pm.addr, pm.localaddr, len);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#190: FILE: kernel/ptrace.c:544:
+					ret=arch_ptrace(child, pm.request, (long) (pm.addr), (long) (pm.localaddr));

CHECK:SPACING: No space is necessary after a cast
#190: FILE: kernel/ptrace.c:544:
+					ret=arch_ptrace(child, pm.request, (long) (pm.addr), (long) (pm.localaddr));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#190: FILE: kernel/ptrace.c:544:
+					ret=arch_ptrace(child, pm.request, (long) (pm.addr), (long) (pm.localaddr));
 					   ^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#227: FILE: kernel/ptrace.c:683:
+static int compat_multi_ptrace(struct task_struct *child, compat_long_t request, compat_ulong_t addr, compat_ulong_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: kernel/ptrace.c:687:
+	compat_long_t j;
+	ret=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#231: FILE: kernel/ptrace.c:687:
+	ret=0;
 	   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: kernel/ptrace.c:688:
+	if (!access_ok(VERIFY_READ, addr,size*sizeof(struct compat_ptrace_multi))) {
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: kernel/ptrace.c:688:
+	if (!access_ok(VERIFY_READ, addr,size*sizeof(struct compat_ptrace_multi))) {
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#236: FILE: kernel/ptrace.c:692:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct compat_ptrace_multi)) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#236: FILE: kernel/ptrace.c:692:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct compat_ptrace_multi)) {
 	           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#236: FILE: kernel/ptrace.c:692:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct compat_ptrace_multi)) {
 	                       ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#236: FILE: kernel/ptrace.c:692:
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct compat_ptrace_multi)) {
 	                                     ^

WARNING:SPACING: space prohibited before semicolon
#238: FILE: kernel/ptrace.c:694:
+		struct compat_ptrace_multi __user pm ;

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#239: FILE: kernel/ptrace.c:695:
+		if (__copy_from_user(&pm, (struct compat_ptrace_multi __user *)(u_long)addr, sizeof(struct compat_ptrace_multi)) == 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: kernel/ptrace.c:695:
+		struct compat_ptrace_multi __user pm ;
+		if (__copy_from_user(&pm, (struct compat_ptrace_multi __user *)(u_long)addr, sizeof(struct compat_ptrace_multi)) == 0) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#241: FILE: kernel/ptrace.c:697:
+			switch ( pm.request){
+				case PTRACE_PEEKTEXT:
+				case PTRACE_PEEKDATA:
+				case PTRACE_PEEKUSR:
+				case PTRACE_POKETEXT:
+				case PTRACE_POKEDATA:
+				case PTRACE_POKEUSR:
[...]
+				case PTRACE_PEEKCHARDATA:
[...]
+				case PTRACE_POKECHARDATA:
[...]
+				case PTRACE_PEEKSTRINGDATA:
[...]
+				default:

ERROR:SPACING: space required before the open brace '{'
#241: FILE: kernel/ptrace.c:697:
+			switch ( pm.request){

ERROR:SPACING: space prohibited after that open parenthesis '('
#241: FILE: kernel/ptrace.c:697:
+			switch ( pm.request){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#248: FILE: kernel/ptrace.c:704:
+					if (len <= 0) len=1;
 					                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: kernel/ptrace.c:704:
+					if (len <= 0) len=1;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#249: FILE: kernel/ptrace.c:705:
+					for (j=0; j<len && ret==0; j++)
 					      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#249: FILE: kernel/ptrace.c:705:
+					for (j=0; j<len && ret==0; j++)
 					           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#249: FILE: kernel/ptrace.c:705:
+					for (j=0; j<len && ret==0; j++)
 					                      ^

WARNING:LONG_LINE: line length of 202 exceeds 100 columns
#250: FILE: kernel/ptrace.c:706:
+						ret=compat_arch_ptrace(child, pm.request, (compat_long_t) (pm.addr) + j*sizeof(compat_long_t), (compat_ulong_t) (pm.localaddr) + j*sizeof(compat_long_t));

CHECK:SPACING: No space is necessary after a cast
#250: FILE: kernel/ptrace.c:706:
+						ret=compat_arch_ptrace(child, pm.request, (compat_long_t) (pm.addr) + j*sizeof(compat_long_t), (compat_ulong_t) (pm.localaddr) + j*sizeof(compat_long_t));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#250: FILE: kernel/ptrace.c:706:
+						ret=compat_arch_ptrace(child, pm.request, (compat_long_t) (pm.addr) + j*sizeof(compat_long_t), (compat_ulong_t) (pm.localaddr) + j*sizeof(compat_long_t));
 						   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#250: FILE: kernel/ptrace.c:706:
+						ret=compat_arch_ptrace(child, pm.request, (compat_long_t) (pm.addr) + j*sizeof(compat_long_t), (compat_ulong_t) (pm.localaddr) + j*sizeof(compat_long_t));
 						                                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#250: FILE: kernel/ptrace.c:706:
+						ret=compat_arch_ptrace(child, pm.request, (compat_long_t) (pm.addr) + j*sizeof(compat_long_t), (compat_ulong_t) (pm.localaddr) + j*sizeof(compat_long_t));
 						                                                                                                                                  ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#253: FILE: kernel/ptrace.c:709:
+					ret = ptrace_readdata(child, pm.addr, (char __user *)(long)pm.localaddr, len);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#256: FILE: kernel/ptrace.c:712:
+					ret = ptrace_writedata(child, (char __user *)(long)pm.localaddr, pm.addr, len);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#259: FILE: kernel/ptrace.c:715:
+					ret = ptrace_readstringdata(child, pm.addr, (char __user *)(long)pm.localaddr, len);

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#262: FILE: kernel/ptrace.c:718:
+					ret=compat_arch_ptrace(child, pm.request, (compat_ulong_t) (pm.addr), (compat_ulong_t) (pm.localaddr));

CHECK:SPACING: No space is necessary after a cast
#262: FILE: kernel/ptrace.c:718:
+					ret=compat_arch_ptrace(child, pm.request, (compat_ulong_t) (pm.addr), (compat_ulong_t) (pm.localaddr));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#262: FILE: kernel/ptrace.c:718:
+					ret=compat_arch_ptrace(child, pm.request, (compat_ulong_t) (pm.addr), (compat_ulong_t) (pm.localaddr));
 					   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#282: FILE: kernel/ptrace.c:762:
+			ret= compat_multi_ptrace(child, request, addr, data);
 			   ^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#299: FILE: mm/memory.c:2799:
+int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#311: FILE: mm/memory.c:2811:
+	buf=kmalloc(PAGE_SIZE, GFP_KERNEL);
 	   ^

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#316: FILE: mm/memory.c:2816:
+	/* ignore errors, just check how much was sucessfully transfered */
 	                                          ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: mm/memory.c:2822:
+		ret = get_user_pages(tsk, mm, addr, 1,
+				write, 1, &page, &vma);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#327: FILE: mm/memory.c:2827:
+		offset = addr & (PAGE_SIZE-1);
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#328: FILE: mm/memory.c:2828:
+		if (bytes > PAGE_SIZE-offset)
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#329: FILE: mm/memory.c:2829:
+			bytes = PAGE_SIZE-offset;
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: mm/memory.c:2833:
+			__copy_from_user(buf,ubuf,bytes);
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: mm/memory.c:2833:
+			__copy_from_user(buf,ubuf,bytes);
 			                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: mm/memory.c:2835:
+			copy_to_user_page(vma, page, addr,
+					maddr + offset, buf, bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: mm/memory.c:2840:
+			copy_from_user_page(vma, page, addr,
+					buf, maddr + offset, bytes);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#342: FILE: mm/memory.c:2842:
+				for (offset=0;offset<bytes;offset++)
 				           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#342: FILE: mm/memory.c:2842:
+				for (offset=0;offset<bytes;offset++)
 				             ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#342: FILE: mm/memory.c:2842:
+				for (offset=0;offset<bytes;offset++)
 				                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#342: FILE: mm/memory.c:2842:
+				for (offset=0;offset<bytes;offset++)
 				                          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#343: FILE: mm/memory.c:2843:
+					if (buf[offset]==0)
 					               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#346: FILE: mm/memory.c:2846:
+					bytes=len=offset+1;
 					     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#346: FILE: mm/memory.c:2846:
+					bytes=len=offset+1;
 					         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#346: FILE: mm/memory.c:2846:
+					bytes=len=offset+1;
 					                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#346: FILE: mm/memory.c:2846:
+					bytes=len=offset+1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#348: FILE: mm/memory.c:2848:
+			ret=__copy_to_user(ubuf,buf,bytes);
 			   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: mm/memory.c:2848:
+			ret=__copy_to_user(ubuf,buf,bytes);
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: mm/memory.c:2848:
+			ret=__copy_to_user(ubuf,buf,bytes);
 			                           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267016.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 46 errors, 21 warnings, 20 checks, 312 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267016.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
