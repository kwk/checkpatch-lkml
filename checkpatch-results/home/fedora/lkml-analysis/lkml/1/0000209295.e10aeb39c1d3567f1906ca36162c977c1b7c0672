WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#75: 
   Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#86: FILE: crypto/Kconfig:355:
+config CRYPTO_SKEIN256
+	tristate "Skein-256(256) digest algorithm"
+	select CRYPTO_ALGAPI
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#90: FILE: crypto/Kconfig:359:
+config CRYPTO_SKEIN512
+	tristate "Skein-512(512) digest algorithm"
+	select CRYPTO_ALGAPI
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#94: FILE: crypto/Kconfig:363:
+config CRYPTO_SKEIN1024
+	tristate "Skein-1024(1024) digest algorithm"
+	select CRYPTO_ALGAPI
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#116: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: crypto/skein.h:1:
+#ifndef _SKEIN_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#124: FILE: crypto/skein.h:4:
+/**************************************************************************
+**

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: crypto/skein.h:12:
+** $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: crypto/skein.h:23:
+**                            code. If not defined, most error checking $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: crypto/skein.h:24:
+**                            is disabled (for performance). Otherwise, $

ERROR:SPACING: space prohibited after that open parenthesis '('
#159: FILE: crypto/skein.h:39:
+#define  SKEIN_MODIFIER_WORDS  ( 2)	/* number of modifier (tweak) words */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#161: FILE: crypto/skein.h:41:
+#define  SKEIN_256_STATE_WORDS ( 4)

ERROR:SPACING: space prohibited after that open parenthesis '('
#162: FILE: crypto/skein.h:42:
+#define  SKEIN_512_STATE_WORDS ( 8)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#166: FILE: crypto/skein.h:46:
+#define  SKEIN_256_STATE_BYTES ( 8*SKEIN_256_STATE_WORDS)
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#166: FILE: crypto/skein.h:46:
+#define  SKEIN_256_STATE_BYTES ( 8*SKEIN_256_STATE_WORDS)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: crypto/skein.h:47:
+#define  SKEIN_512_STATE_BYTES ( 8*SKEIN_512_STATE_WORDS)
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#167: FILE: crypto/skein.h:47:
+#define  SKEIN_512_STATE_BYTES ( 8*SKEIN_512_STATE_WORDS)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#168: FILE: crypto/skein.h:48:
+#define  SKEIN1024_STATE_BYTES ( 8*SKEIN1024_STATE_WORDS)
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#168: FILE: crypto/skein.h:48:
+#define  SKEIN1024_STATE_BYTES ( 8*SKEIN1024_STATE_WORDS)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#170: FILE: crypto/skein.h:50:
+#define  SKEIN_256_STATE_BITS  (64*SKEIN_256_STATE_WORDS)
                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#171: FILE: crypto/skein.h:51:
+#define  SKEIN_512_STATE_BITS  (64*SKEIN_512_STATE_WORDS)
                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: crypto/skein.h:52:
+#define  SKEIN1024_STATE_BITS  (64*SKEIN1024_STATE_WORDS)
                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#174: FILE: crypto/skein.h:54:
+#define  SKEIN_256_BLOCK_BYTES ( 8*SKEIN_256_STATE_WORDS)
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#174: FILE: crypto/skein.h:54:
+#define  SKEIN_256_BLOCK_BYTES ( 8*SKEIN_256_STATE_WORDS)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#175: FILE: crypto/skein.h:55:
+#define  SKEIN_512_BLOCK_BYTES ( 8*SKEIN_512_STATE_WORDS)
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#175: FILE: crypto/skein.h:55:
+#define  SKEIN_512_BLOCK_BYTES ( 8*SKEIN_512_STATE_WORDS)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#176: FILE: crypto/skein.h:56:
+#define  SKEIN1024_BLOCK_BYTES ( 8*SKEIN1024_STATE_WORDS)
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#176: FILE: crypto/skein.h:56:
+#define  SKEIN1024_BLOCK_BYTES ( 8*SKEIN1024_STATE_WORDS)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#178: FILE: crypto/skein.h:58:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <hashBitLen>
#179: FILE: crypto/skein.h:59:
+	size_t hashBitLen;	/* size of hash result, in bits */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bCnt>
#180: FILE: crypto/skein.h:60:
+	size_t bCnt;		/* current byte count in buffer b[] */

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Ctxt_Hdr_t>
#182: FILE: crypto/skein.h:62:
+} Skein_Ctxt_Hdr_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#203: FILE: crypto/skein.h:83:
+/*****************************************************************
+** "Internal" Skein definitions

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: crypto/skein.h:84:
+**    -- not needed for sequential hashing API, but will be $

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#213: FILE: crypto/skein.h:93:
+#define SKEIN_T1_POS_TREE_LVL   SKEIN_T1_BIT(112)	/* bits 112..118: level in hash tree       */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#214: FILE: crypto/skein.h:94:
+#define SKEIN_T1_POS_BIT_PAD    SKEIN_T1_BIT(119)	/* bit  119     : partial final input byte */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#215: FILE: crypto/skein.h:95:
+#define SKEIN_T1_POS_BLK_TYPE   SKEIN_T1_BIT(120)	/* bits 120..125: type field               */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#216: FILE: crypto/skein.h:96:
+#define SKEIN_T1_POS_FIRST      SKEIN_T1_BIT(126)	/* bits 126     : first block flag         */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#217: FILE: crypto/skein.h:97:
+#define SKEIN_T1_POS_FINAL      SKEIN_T1_BIT(127)	/* bit  127     : final block flag         */

CHECK:SPACING: No space is necessary after a cast
#220: FILE: crypto/skein.h:100:
+#define SKEIN_T1_FLAG_FIRST     (((u64)  1 ) << SKEIN_T1_POS_FIRST)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#220: FILE: crypto/skein.h:100:
+#define SKEIN_T1_FLAG_FIRST     (((u64)  1 ) << SKEIN_T1_POS_FIRST)

CHECK:SPACING: No space is necessary after a cast
#221: FILE: crypto/skein.h:101:
+#define SKEIN_T1_FLAG_FINAL     (((u64)  1 ) << SKEIN_T1_POS_FINAL)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#221: FILE: crypto/skein.h:101:
+#define SKEIN_T1_FLAG_FINAL     (((u64)  1 ) << SKEIN_T1_POS_FINAL)

CHECK:SPACING: No space is necessary after a cast
#222: FILE: crypto/skein.h:102:
+#define SKEIN_T1_FLAG_BIT_PAD   (((u64)  1 ) << SKEIN_T1_POS_BIT_PAD)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#222: FILE: crypto/skein.h:102:
+#define SKEIN_T1_FLAG_BIT_PAD   (((u64)  1 ) << SKEIN_T1_POS_BIT_PAD)

CHECK:SPACING: No space is necessary after a cast
#226: FILE: crypto/skein.h:106:
+#define	SKEIN_T1_TREE_LEVEL(n)  (((u64) (n)) << SKEIN_T1_POS_TREE_LVL)

ERROR:SPACING: space prohibited after that open parenthesis '('
#229: FILE: crypto/skein.h:109:
+#define SKEIN_BLK_TYPE_KEY      ( 0)	/* key, for MAC and KDF */

ERROR:SPACING: space prohibited after that open parenthesis '('
#230: FILE: crypto/skein.h:110:
+#define SKEIN_BLK_TYPE_CFG      ( 4)	/* configuration block */

ERROR:SPACING: space prohibited after that open parenthesis '('
#231: FILE: crypto/skein.h:111:
+#define SKEIN_BLK_TYPE_PERS     ( 8)	/* personalization string */

CHECK:SPACING: No space is necessary after a cast
#239: FILE: crypto/skein.h:119:
+#define SKEIN_T1_BLK_TYPE(T)   (((u64) (SKEIN_BLK_TYPE_##T)) << SKEIN_T1_POS_BLK_TYPE)

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#243: FILE: crypto/skein.h:123:
+#define SKEIN_T1_BLK_TYPE_PK    SKEIN_T1_BLK_TYPE(PK)	/* public key (for digital signature hashing) */

CHECK:SPACING: No space is necessary after a cast
#259: FILE: crypto/skein.h:139:
+#define SKEIN_MK_64(hi32,lo32)  ((lo32) + (((u64) (hi32)) << 32))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: crypto/skein.h:139:
+#define SKEIN_MK_64(hi32,lo32)  ((lo32) + (((u64) (hi32)) << 32))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: crypto/skein.h:140:
+#define SKEIN_SCHEMA_VER        SKEIN_MK_64(SKEIN_VERSION,SKEIN_ID_STRING_LE)
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: crypto/skein.h:141:
+#define SKEIN_KS_PARITY         SKEIN_MK_64(0x55555555,0x55555555)
                                                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#264: FILE: crypto/skein.h:144:
+#define SKEIN_CFG_TREE_LEAF_SIZE_POS  ( 0)

ERROR:SPACING: space prohibited after that open parenthesis '('
#265: FILE: crypto/skein.h:145:
+#define SKEIN_CFG_TREE_NODE_SIZE_POS  ( 8)

CHECK:SPACING: No space is necessary after a cast
#268: FILE: crypto/skein.h:148:
+#define SKEIN_CFG_TREE_LEAF_SIZE_MSK  ((u64) 0xFF) << SKEIN_CFG_TREE_LEAF_SIZE_POS)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: crypto/skein.h:148:
+#define SKEIN_CFG_TREE_LEAF_SIZE_MSK  ((u64) 0xFF) << SKEIN_CFG_TREE_LEAF_SIZE_POS)

CHECK:SPACING: No space is necessary after a cast
#269: FILE: crypto/skein.h:149:
+#define SKEIN_CFG_TREE_NODE_SIZE_MSK  ((u64) 0xFF) << SKEIN_CFG_TREE_NODE_SIZE_POS)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#269: FILE: crypto/skein.h:149:
+#define SKEIN_CFG_TREE_NODE_SIZE_MSK  ((u64) 0xFF) << SKEIN_CFG_TREE_NODE_SIZE_POS)

CHECK:SPACING: No space is necessary after a cast
#270: FILE: crypto/skein.h:150:
+#define SKEIN_CFG_TREE_MAX_LEVEL_MSK  ((u64) 0xFF) << SKEIN_CFG_TREE_MAX_LEVEL_POS)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#270: FILE: crypto/skein.h:150:
+#define SKEIN_CFG_TREE_MAX_LEVEL_MSK  ((u64) 0xFF) << SKEIN_CFG_TREE_MAX_LEVEL_POS)

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#272: FILE: crypto/skein.h:152:
+#define SKEIN_CFG_TREE_INFO_SEQUENTIAL (0)	/* use as treeInfo in InitExt() call for sequential processing */

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#273: FILE: crypto/skein.h:153:
+#define SKEIN_CFG_TREE_INFO(leaf,node,maxLevel) ((u64) ((leaf) | ((node) << 8) | ((maxLevel) << 16)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#273: FILE: crypto/skein.h:153:
+#define SKEIN_CFG_TREE_INFO(leaf,node,maxLevel) ((u64) ((leaf) | ((node) << 8) | ((maxLevel) << 16)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: crypto/skein.h:153:
+#define SKEIN_CFG_TREE_INFO(leaf,node,maxLevel) ((u64) ((leaf) | ((node) << 8) | ((maxLevel) << 16)))
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: crypto/skein.h:153:
+#define SKEIN_CFG_TREE_INFO(leaf,node,maxLevel) ((u64) ((leaf) | ((node) << 8) | ((maxLevel) << 16)))
                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <maxLevel>
#273: FILE: crypto/skein.h:153:
+#define SKEIN_CFG_TREE_INFO(leaf,node,maxLevel) ((u64) ((leaf) | ((node) << 8) | ((maxLevel) << 16)))

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#276: FILE: crypto/skein.h:156:
+/*
+**   Skein macros for getting/setting tweak words, etc.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: crypto/skein.h:159:
+#define Skein_Get_Tweak(ctxPtr,TWK_NUM)         ((ctxPtr)->h.T[TWK_NUM])
                               ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Get_Tweak>
#279: FILE: crypto/skein.h:159:
+#define Skein_Get_Tweak(ctxPtr,TWK_NUM)         ((ctxPtr)->h.T[TWK_NUM])

CHECK:CAMELCASE: Avoid CamelCase: <ctxPtr>
#279: FILE: crypto/skein.h:159:
+#define Skein_Get_Tweak(ctxPtr,TWK_NUM)         ((ctxPtr)->h.T[TWK_NUM])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: crypto/skein.h:160:
+#define Skein_Set_Tweak(ctxPtr,TWK_NUM,tVal)    {(ctxPtr)->h.T[TWK_NUM] = (tVal);}
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: crypto/skein.h:160:
+#define Skein_Set_Tweak(ctxPtr,TWK_NUM,tVal)    {(ctxPtr)->h.T[TWK_NUM] = (tVal);}
                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#280: FILE: crypto/skein.h:160:
+#define Skein_Set_Tweak(ctxPtr,TWK_NUM,tVal)    {(ctxPtr)->h.T[TWK_NUM] = (tVal);}
                                                                                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_Tweak>
#280: FILE: crypto/skein.h:160:
+#define Skein_Set_Tweak(ctxPtr,TWK_NUM,tVal)    {(ctxPtr)->h.T[TWK_NUM] = (tVal);}

CHECK:CAMELCASE: Avoid CamelCase: <tVal>
#280: FILE: crypto/skein.h:160:
+#define Skein_Set_Tweak(ctxPtr,TWK_NUM,tVal)    {(ctxPtr)->h.T[TWK_NUM] = (tVal);}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#282: FILE: crypto/skein.h:162:
+#define Skein_Get_T0(ctxPtr)    Skein_Get_Tweak(ctxPtr,0)
                                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Get_T0>
#282: FILE: crypto/skein.h:162:
+#define Skein_Get_T0(ctxPtr)    Skein_Get_Tweak(ctxPtr,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: crypto/skein.h:163:
+#define Skein_Get_T1(ctxPtr)    Skein_Get_Tweak(ctxPtr,1)
                                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Get_T1>
#283: FILE: crypto/skein.h:163:
+#define Skein_Get_T1(ctxPtr)    Skein_Get_Tweak(ctxPtr,1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: crypto/skein.h:164:
+#define Skein_Set_T0(ctxPtr,T0) Skein_Set_Tweak(ctxPtr,0,T0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: crypto/skein.h:164:
+#define Skein_Set_T0(ctxPtr,T0) Skein_Set_Tweak(ctxPtr,0,T0)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: crypto/skein.h:164:
+#define Skein_Set_T0(ctxPtr,T0) Skein_Set_Tweak(ctxPtr,0,T0)
                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_T0>
#284: FILE: crypto/skein.h:164:
+#define Skein_Set_T0(ctxPtr,T0) Skein_Set_Tweak(ctxPtr,0,T0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: crypto/skein.h:165:
+#define Skein_Set_T1(ctxPtr,T1) Skein_Set_Tweak(ctxPtr,1,T1)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: crypto/skein.h:165:
+#define Skein_Set_T1(ctxPtr,T1) Skein_Set_Tweak(ctxPtr,1,T1)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: crypto/skein.h:165:
+#define Skein_Set_T1(ctxPtr,T1) Skein_Set_Tweak(ctxPtr,1,T1)
                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_T1>
#285: FILE: crypto/skein.h:165:
+#define Skein_Set_T1(ctxPtr,T1) Skein_Set_Tweak(ctxPtr,1,T1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: crypto/skein.h:168:
+#define Skein_Set_T0_T1(ctxPtr,T0,T1)           \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: crypto/skein.h:168:
+#define Skein_Set_T0_T1(ctxPtr,T0,T1)           \
                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_T0_T1>
#288: FILE: crypto/skein.h:168:
+#define Skein_Set_T0_T1(ctxPtr,T0,T1)           \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctxPtr' - possible side-effects?
#288: FILE: crypto/skein.h:168:
+#define Skein_Set_T0_T1(ctxPtr,T0,T1)           \
+    {                                           \
+    Skein_Set_T0(ctxPtr,(T0));                  \
+    Skein_Set_T1(ctxPtr,(T1));                  \
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: crypto/skein.h:169:
+    {                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: crypto/skein.h:170:
+    Skein_Set_T0(ctxPtr,(T0));                  \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: crypto/skein.h:170:
+    Skein_Set_T0(ctxPtr,(T0));                  \
                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: crypto/skein.h:171:
+    Skein_Set_T1(ctxPtr,(T1));                  \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: crypto/skein.h:171:
+    Skein_Set_T1(ctxPtr,(T1));                  \
                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: crypto/skein.h:172:
+    }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: crypto/skein.h:174:
+#define Skein_Set_Type(ctxPtr,BLK_TYPE)         \
                              ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_Type>
#294: FILE: crypto/skein.h:174:
+#define Skein_Set_Type(ctxPtr,BLK_TYPE)         \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: crypto/skein.h:175:
+    Skein_Set_T1(ctxPtr,SKEIN_T1_BLK_TYPE_##BLK_TYPE)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: crypto/skein.h:175:
+    Skein_Set_T1(ctxPtr,SKEIN_T1_BLK_TYPE_##BLK_TYPE)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#298: FILE: crypto/skein.h:178:
+#define Skein_Start_New_Type(ctxPtr,BLK_TYPE)   \
                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Start_New_Type>
#298: FILE: crypto/skein.h:178:
+#define Skein_Start_New_Type(ctxPtr,BLK_TYPE)   \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctxPtr' - possible side-effects?
#298: FILE: crypto/skein.h:178:
+#define Skein_Start_New_Type(ctxPtr,BLK_TYPE)   \
+    { Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#299: FILE: crypto/skein.h:179:
+    { Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: crypto/skein.h:179:
+    { Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: crypto/skein.h:179:
+    { Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: crypto/skein.h:179:
+    { Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }
                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#299: FILE: crypto/skein.h:179:
+    { Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }
                                                                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Clear_First_Flag>
#301: FILE: crypto/skein.h:181:
+#define Skein_Clear_First_Flag(hdr)	     { (hdr).T[1] &= ~SKEIN_T1_FLAG_FIRST;       }

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_Bit_Pad_Flag>
#302: FILE: crypto/skein.h:182:
+#define Skein_Set_Bit_Pad_Flag(hdr)      { (hdr).T[1] |=  SKEIN_T1_FLAG_BIT_PAD;     }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: crypto/skein.h:184:
+#define Skein_Set_Tree_Level(hdr,height) { (hdr).T[1] |= SKEIN_T1_TREE_LEVEL(height);}
                                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#304: FILE: crypto/skein.h:184:
+#define Skein_Set_Tree_Level(hdr,height) { (hdr).T[1] |= SKEIN_T1_TREE_LEVEL(height);}
                                                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Set_Tree_Level>
#304: FILE: crypto/skein.h:184:
+#define Skein_Set_Tree_Level(hdr,height) { (hdr).T[1] |= SKEIN_T1_TREE_LEVEL(height);}

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#307: FILE: crypto/skein.h:187:
+/*****************************************************************
+** "Internal" Skein definitions for debugging and error checking

ERROR:SPACING: exactly one space required after that #ifdef
#309: FILE: crypto/skein.h:189:
+#ifdef  SKEIN_DEBUG		/* examine/display intermediate values? */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)
                                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Show_Block>
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)

CHECK:CAMELCASE: Avoid CamelCase: <blkPtr>
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)

CHECK:CAMELCASE: Avoid CamelCase: <wPtr>
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)

CHECK:CAMELCASE: Avoid CamelCase: <ksEvenPtr>
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)

CHECK:CAMELCASE: Avoid CamelCase: <ksOddPtr>
#312: FILE: crypto/skein.h:192:
+#define Skein_Show_Block(bits,ctx,X,blkPtr,wPtr,ksEvenPtr,ksOddPtr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: crypto/skein.h:193:
+#define Skein_Show_Round(bits,ctx,r,X)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: crypto/skein.h:193:
+#define Skein_Show_Round(bits,ctx,r,X)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: crypto/skein.h:193:
+#define Skein_Show_Round(bits,ctx,r,X)
                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Show_Round>
#313: FILE: crypto/skein.h:193:
+#define Skein_Show_Round(bits,ctx,r,X)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: crypto/skein.h:194:
+#define Skein_Show_R_Ptr(bits,ctx,r,X_ptr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: crypto/skein.h:194:
+#define Skein_Show_R_Ptr(bits,ctx,r,X_ptr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: crypto/skein.h:194:
+#define Skein_Show_R_Ptr(bits,ctx,r,X_ptr)
                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Show_R_Ptr>
#314: FILE: crypto/skein.h:194:
+#define Skein_Show_R_Ptr(bits,ctx,r,X_ptr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: crypto/skein.h:195:
+#define Skein_Show_Final(bits,ctx,cnt,outPtr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: crypto/skein.h:195:
+#define Skein_Show_Final(bits,ctx,cnt,outPtr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: crypto/skein.h:195:
+#define Skein_Show_Final(bits,ctx,cnt,outPtr)
                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Show_Final>
#315: FILE: crypto/skein.h:195:
+#define Skein_Show_Final(bits,ctx,cnt,outPtr)

CHECK:CAMELCASE: Avoid CamelCase: <outPtr>
#315: FILE: crypto/skein.h:195:
+#define Skein_Show_Final(bits,ctx,cnt,outPtr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: crypto/skein.h:196:
+#define Skein_Show_Key(bits,ctx,key,keyBytes)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: crypto/skein.h:196:
+#define Skein_Show_Key(bits,ctx,key,keyBytes)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: crypto/skein.h:196:
+#define Skein_Show_Key(bits,ctx,key,keyBytes)
                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Show_Key>
#316: FILE: crypto/skein.h:196:
+#define Skein_Show_Key(bits,ctx,key,keyBytes)

CHECK:CAMELCASE: Avoid CamelCase: <keyBytes>
#316: FILE: crypto/skein.h:196:
+#define Skein_Show_Key(bits,ctx,key,keyBytes)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: crypto/skein.h:200:
+#define Skein_Assert(x,retCode)	/* default: ignore all Asserts, for performance */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Assert>
#320: FILE: crypto/skein.h:200:
+#define Skein_Assert(x,retCode)	/* default: ignore all Asserts, for performance */

CHECK:CAMELCASE: Avoid CamelCase: <retCode>
#320: FILE: crypto/skein.h:200:
+#define Skein_Assert(x,retCode)	/* default: ignore all Asserts, for performance */

CHECK:CAMELCASE: Avoid CamelCase: <Skein_assert>
#321: FILE: crypto/skein.h:201:
+#define Skein_assert(x)

ERROR:SPACING: exactly one space required after that #elif
#322: FILE: crypto/skein.h:202:
+#elif   defined(SKEIN_ASSERT)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#324: FILE: crypto/skein.h:204:
+#define Skein_Assert(x,retCode) assert(x)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: crypto/skein.h:208:
+#define Skein_Assert(x,retCode) { if (!(x)) return retCode; }	/*  caller  error */
                       ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#328: FILE: crypto/skein.h:208:
+#define Skein_Assert(x,retCode) { if (!(x)) return retCode; }	/*  caller  error */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#333: FILE: crypto/skein.h:213:
+/*****************************************************************
+** Skein block function constants (shared across Ref and Opt code)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#380: FILE: crypto/skein.h:260:
+#define SKEIN_256_ROUNDS_TOTAL (8*((((SKEIN_ROUNDS/100) + 5) % 10) + 5))
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#380: FILE: crypto/skein.h:260:
+#define SKEIN_256_ROUNDS_TOTAL (8*((((SKEIN_ROUNDS/100) + 5) % 10) + 5))
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#381: FILE: crypto/skein.h:261:
+#define SKEIN_512_ROUNDS_TOTAL (8*((((SKEIN_ROUNDS/ 10) + 5) % 10) + 5))
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxW)
#381: FILE: crypto/skein.h:261:
+#define SKEIN_512_ROUNDS_TOTAL (8*((((SKEIN_ROUNDS/ 10) + 5) % 10) + 5))
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#382: FILE: crypto/skein.h:262:
+#define SKEIN1024_ROUNDS_TOTAL (8*((((SKEIN_ROUNDS    ) + 5) % 10) + 5))
                                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#382: FILE: crypto/skein.h:262:
+#define SKEIN1024_ROUNDS_TOTAL (8*((((SKEIN_ROUNDS    ) + 5) % 10) + 5))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#392: FILE: crypto/skein1024_generic.c:1:
+/***********************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#393: FILE: crypto/skein1024_generic.c:2:
+/***********************************************************************
+**

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: crypto/skein1024_generic.c:8:
+** $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: crypto/skein1024_generic.c:19:
+static int Skein1024_Init(struct skein1024_ctx * ctx, size_t hashBitLen);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Skein1024_Init>
#410: FILE: crypto/skein1024_generic.c:19:
+static int Skein1024_Init(struct skein1024_ctx * ctx, size_t hashBitLen);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: crypto/skein1024_generic.c:20:
+static int Skein1024_Update(struct skein1024_ctx * ctx, const u8 * msg, size_t msgByteCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: crypto/skein1024_generic.c:20:
+static int Skein1024_Update(struct skein1024_ctx * ctx, const u8 * msg, size_t msgByteCnt);

CHECK:CAMELCASE: Avoid CamelCase: <Skein1024_Update>
#411: FILE: crypto/skein1024_generic.c:20:
+static int Skein1024_Update(struct skein1024_ctx * ctx, const u8 * msg, size_t msgByteCnt);

CHECK:CAMELCASE: Avoid CamelCase: <msgByteCnt>
#411: FILE: crypto/skein1024_generic.c:20:
+static int Skein1024_Update(struct skein1024_ctx * ctx, const u8 * msg, size_t msgByteCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: crypto/skein1024_generic.c:21:
+static int Skein1024_Final(struct skein1024_ctx * ctx, u8 * hashVal);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: crypto/skein1024_generic.c:21:
+static int Skein1024_Final(struct skein1024_ctx * ctx, u8 * hashVal);

CHECK:CAMELCASE: Avoid CamelCase: <Skein1024_Final>
#412: FILE: crypto/skein1024_generic.c:21:
+static int Skein1024_Final(struct skein1024_ctx * ctx, u8 * hashVal);

CHECK:CAMELCASE: Avoid CamelCase: <hashVal>
#412: FILE: crypto/skein1024_generic.c:21:
+static int Skein1024_Final(struct skein1024_ctx * ctx, u8 * hashVal);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Swap64>
#416: FILE: crypto/skein1024_generic.c:25:
+static u64 Skein_Swap64(u64 w64)

CHECK:SPACING: No space is necessary after a cast
#421: FILE: crypto/skein1024_generic.c:30:
+	if (1 == ((u8 *) & ONE)[0])

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#421: FILE: crypto/skein1024_generic.c:30:
+	if (1 == ((u8 *) & ONE)[0])
 	                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: crypto/skein1024_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: crypto/skein1024_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Put64_LSB_First>
#433: FILE: crypto/skein1024_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#434: FILE: crypto/skein1024_generic.c:43:
+{				/* this version is fully portable (big-endian or little-endian), but slow */

CHECK:SPACING: No space is necessary after a cast
#438: FILE: crypto/skein1024_generic.c:47:
+		dst[n] = (u8) (src[n >> 3] >> (8 * (n & 7)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#441: FILE: crypto/skein1024_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#441: FILE: crypto/skein1024_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

CHECK:CAMELCASE: Avoid CamelCase: <Skein_Get64_LSB_First>
#441: FILE: crypto/skein1024_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

CHECK:CAMELCASE: Avoid CamelCase: <wCnt>
#441: FILE: crypto/skein1024_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#442: FILE: crypto/skein1024_generic.c:51:
+{				/* this version is fully portable (big-endian or little-endian), but slow */

CHECK:SPACING: No space is necessary after a cast
#446: FILE: crypto/skein1024_generic.c:55:
+		dst[n / 8] = (((u64) src[n])) +

CHECK:SPACING: No space is necessary after a cast
#447: FILE: crypto/skein1024_generic.c:56:
+		    (((u64) src[n + 1]) << 8) +

CHECK:SPACING: No space is necessary after a cast
#448: FILE: crypto/skein1024_generic.c:57:
+		    (((u64) src[n + 2]) << 16) +

CHECK:SPACING: No space is necessary after a cast
#449: FILE: crypto/skein1024_generic.c:58:
+		    (((u64) src[n + 3]) << 24) +

CHECK:SPACING: No space is necessary after a cast
#450: FILE: crypto/skein1024_generic.c:59:
+		    (((u64) src[n + 4]) << 32) +

CHECK:SPACING: No space is necessary after a cast
#451: FILE: crypto/skein1024_generic.c:60:
+		    (((u64) src[n + 5]) << 40) +

CHECK:SPACING: No space is necessary after a cast
#452: FILE: crypto/skein1024_generic.c:61:
+		    (((u64) src[n + 6]) << 48) + (((u64) src[n + 7]) << 56);

CHECK:CAMELCASE: Avoid CamelCase: <RotL_64>
#456: FILE: crypto/skein1024_generic.c:65:
+static u64 RotL_64(u64 x, unsigned int N)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#461: FILE: crypto/skein1024_generic.c:70:
+#define BLK_BITS    (WCNT*64)
                          ^

CHECK:CAMELCASE: Avoid CamelCase: <InjectKey>
#464: FILE: crypto/skein1024_generic.c:73:
+#define InjectKey(r)                                                \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#464: FILE: crypto/skein1024_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#464: FILE: crypto/skein1024_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#464: FILE: crypto/skein1024_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: crypto/skein1024_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#465: FILE: crypto/skein1024_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#465: FILE: crypto/skein1024_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#465: FILE: crypto/skein1024_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#465: FILE: crypto/skein1024_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: crypto/skein1024_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: crypto/skein1024_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#466: FILE: crypto/skein1024_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#466: FILE: crypto/skein1024_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: crypto/skein1024_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#467: FILE: crypto/skein1024_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#467: FILE: crypto/skein1024_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: crypto/skein1024_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#468: FILE: crypto/skein1024_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#468: FILE: crypto/skein1024_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: crypto/skein1024_generic.c:78:
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#469: FILE: crypto/skein1024_generic.c:78:
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: crypto/skein1024_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#470: FILE: crypto/skein1024_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#470: FILE: crypto/skein1024_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: crypto/skein1024_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: crypto/skein1024_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein1024_Process_Block>
#472: FILE: crypto/skein1024_generic.c:81:
+static void Skein1024_Process_Block(struct skein1024_ctx *ctx, const u8 *blkPtr,

CHECK:CAMELCASE: Avoid CamelCase: <blkCnt>
#473: FILE: crypto/skein1024_generic.c:82:
+				    size_t blkCnt, size_t byteCntAdd)

CHECK:CAMELCASE: Avoid CamelCase: <byteCntAdd>
#473: FILE: crypto/skein1024_generic.c:82:
+				    size_t blkCnt, size_t byteCntAdd)

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#500: FILE: crypto/skein1024_generic.c:109:
+		Skein_Get64_LSB_First(w, blkPtr, WCNT);	/* get input block in little-endian format */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#508: FILE: crypto/skein1024_generic.c:117:
+		Skein_Show_Round(BLK_BITS, &ctx->h, SKEIN_RND_KEY_INITIAL, X);	/* show starting state values */

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#728: FILE: crypto/skein1024_generic.c:337:
+	}
+	while (--blkCnt);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#769: FILE: crypto/skein1024_generic.c:378:
+static int Skein1024_Update(struct skein1024_ctx *ctx, const u8 * msg,

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#774: FILE: crypto/skein1024_generic.c:383:
+	Skein_Assert(ctx->h.bCnt <= SKEIN1024_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#779: FILE: crypto/skein1024_generic.c:388:
+			n = SKEIN1024_BLOCK_BYTES - ctx->h.bCnt;	/* # bytes free in buffer b[] */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#794: FILE: crypto/skein1024_generic.c:403:
+			n = (msgByteCnt - 1) / SKEIN1024_BLOCK_BYTES;	/* number of full blocks to process */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#815: FILE: crypto/skein1024_generic.c:424:
+static int Skein1024_Final(struct skein1024_ctx *ctx, u8 * hashVal)

CHECK:CAMELCASE: Avoid CamelCase: <byteCnt>
#817: FILE: crypto/skein1024_generic.c:426:
+	size_t i, n, byteCnt;

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#819: FILE: crypto/skein1024_generic.c:428:
+	Skein_Assert(ctx->h.bCnt <= SKEIN1024_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

WARNING:LINE_SPACING: Missing a blank line after declarations
#819: FILE: crypto/skein1024_generic.c:428:
+	u64 X[SKEIN1024_STATE_WORDS];
+	Skein_Assert(ctx->h.bCnt <= SKEIN1024_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#835: FILE: crypto/skein1024_generic.c:444:
+		((u64 *) ctx->b)[0] = Skein_Swap64((u64) i);	/* build the counter block */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#838: FILE: crypto/skein1024_generic.c:447:
+		n = byteCnt - i * SKEIN1024_BLOCK_BYTES;	/* number of output bytes left to go */

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#841: FILE: crypto/skein1024_generic.c:450:
+		Skein_Put64_LSB_First(hashVal + i * SKEIN1024_BLOCK_BYTES, ctx->X, n);	/* "output" the ctr mode bytes */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#856: FILE: crypto/skein1024_generic.c:465:
+static void skein1024_update(struct crypto_tfm *tfm, const u8 * data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: crypto/skein1024_generic.c:466:
+static void skein1024_update(struct crypto_tfm *tfm, const u8 * data,
+			    unsigned int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#864: FILE: crypto/skein1024_generic.c:473:
+static void skein1024_final(struct crypto_tfm *tfm, u8 * out)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#916: FILE: crypto/skein256_generic.c:1:
+/***********************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#917: FILE: crypto/skein256_generic.c:2:
+/***********************************************************************
+**

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: crypto/skein256_generic.c:8:
+** $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#934: FILE: crypto/skein256_generic.c:19:
+static int Skein_256_Init(struct skein256_ctx * ctx, size_t hashBitLen);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_256_Init>
#934: FILE: crypto/skein256_generic.c:19:
+static int Skein_256_Init(struct skein256_ctx * ctx, size_t hashBitLen);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#935: FILE: crypto/skein256_generic.c:20:
+static int Skein_256_Update(struct skein256_ctx * ctx, const u8 * msg, size_t msgByteCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#935: FILE: crypto/skein256_generic.c:20:
+static int Skein_256_Update(struct skein256_ctx * ctx, const u8 * msg, size_t msgByteCnt);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_256_Update>
#935: FILE: crypto/skein256_generic.c:20:
+static int Skein_256_Update(struct skein256_ctx * ctx, const u8 * msg, size_t msgByteCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#936: FILE: crypto/skein256_generic.c:21:
+static int Skein_256_Final(struct skein256_ctx * ctx, u8 * hashVal);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#936: FILE: crypto/skein256_generic.c:21:
+static int Skein_256_Final(struct skein256_ctx * ctx, u8 * hashVal);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_256_Final>
#936: FILE: crypto/skein256_generic.c:21:
+static int Skein_256_Final(struct skein256_ctx * ctx, u8 * hashVal);

CHECK:SPACING: No space is necessary after a cast
#945: FILE: crypto/skein256_generic.c:30:
+	if (1 == ((u8 *) & ONE)[0])

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#945: FILE: crypto/skein256_generic.c:30:
+	if (1 == ((u8 *) & ONE)[0])
 	                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: crypto/skein256_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: crypto/skein256_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#958: FILE: crypto/skein256_generic.c:43:
+{				/* this version is fully portable (big-endian or little-endian), but slow */

CHECK:SPACING: No space is necessary after a cast
#962: FILE: crypto/skein256_generic.c:47:
+		dst[n] = (u8) (src[n >> 3] >> (8 * (n & 7)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#965: FILE: crypto/skein256_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#965: FILE: crypto/skein256_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#966: FILE: crypto/skein256_generic.c:51:
+{				/* this version is fully portable (big-endian or little-endian), but slow */

CHECK:SPACING: No space is necessary after a cast
#970: FILE: crypto/skein256_generic.c:55:
+		dst[n / 8] = (((u64) src[n])) +

CHECK:SPACING: No space is necessary after a cast
#971: FILE: crypto/skein256_generic.c:56:
+		    (((u64) src[n + 1]) << 8) +

CHECK:SPACING: No space is necessary after a cast
#972: FILE: crypto/skein256_generic.c:57:
+		    (((u64) src[n + 2]) << 16) +

CHECK:SPACING: No space is necessary after a cast
#973: FILE: crypto/skein256_generic.c:58:
+		    (((u64) src[n + 3]) << 24) +

CHECK:SPACING: No space is necessary after a cast
#974: FILE: crypto/skein256_generic.c:59:
+		    (((u64) src[n + 4]) << 32) +

CHECK:SPACING: No space is necessary after a cast
#975: FILE: crypto/skein256_generic.c:60:
+		    (((u64) src[n + 5]) << 40) +

CHECK:SPACING: No space is necessary after a cast
#976: FILE: crypto/skein256_generic.c:61:
+		    (((u64) src[n + 6]) << 48) + (((u64) src[n + 7]) << 56);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#985: FILE: crypto/skein256_generic.c:70:
+#define BLK_BITS    (WCNT*64)
                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#988: FILE: crypto/skein256_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#988: FILE: crypto/skein256_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#988: FILE: crypto/skein256_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: crypto/skein256_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#989: FILE: crypto/skein256_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#989: FILE: crypto/skein256_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#989: FILE: crypto/skein256_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#989: FILE: crypto/skein256_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: crypto/skein256_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: crypto/skein256_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#990: FILE: crypto/skein256_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#990: FILE: crypto/skein256_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: crypto/skein256_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#991: FILE: crypto/skein256_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#991: FILE: crypto/skein256_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: crypto/skein256_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#992: FILE: crypto/skein256_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#992: FILE: crypto/skein256_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: crypto/skein256_generic.c:78:
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#993: FILE: crypto/skein256_generic.c:78:
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: crypto/skein256_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#994: FILE: crypto/skein256_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#994: FILE: crypto/skein256_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: crypto/skein256_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: crypto/skein256_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_256_Process_Block>
#996: FILE: crypto/skein256_generic.c:81:
+static void Skein_256_Process_Block(struct skein256_ctx *ctx, const u8 *blkPtr,

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1023: FILE: crypto/skein256_generic.c:108:
+		Skein_Get64_LSB_First(w, blkPtr, WCNT);	/* get input block in little-endian format */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1031: FILE: crypto/skein256_generic.c:116:
+		Skein_Show_Round(BLK_BITS, &ctx->h, SKEIN_RND_KEY_INITIAL, X);	/* show starting state values */

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1108: FILE: crypto/skein256_generic.c:193:
+	}
+	while (--blkCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1149: FILE: crypto/skein256_generic.c:234:
+static int Skein_256_Update(struct skein256_ctx *ctx, const u8 * msg,

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1154: FILE: crypto/skein256_generic.c:239:
+	Skein_Assert(ctx->h.bCnt <= SKEIN_256_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1159: FILE: crypto/skein256_generic.c:244:
+			n = SKEIN_256_BLOCK_BYTES - ctx->h.bCnt;	/* # bytes free in buffer b[] */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1174: FILE: crypto/skein256_generic.c:259:
+			n = (msgByteCnt - 1) / SKEIN_256_BLOCK_BYTES;	/* number of full blocks to process */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1195: FILE: crypto/skein256_generic.c:280:
+static int Skein_256_Final(struct skein256_ctx *ctx, u8 * hashVal)

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1199: FILE: crypto/skein256_generic.c:284:
+	Skein_Assert(ctx->h.bCnt <= SKEIN_256_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1199: FILE: crypto/skein256_generic.c:284:
+	u64 X[SKEIN_256_STATE_WORDS];
+	Skein_Assert(ctx->h.bCnt <= SKEIN_256_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

CHECK:SPACING: No space is necessary after a cast
#1214: FILE: crypto/skein256_generic.c:299:
+		((u64 *) ctx->b)[0] = Skein_Swap64((u64) i);	/* build the counter block */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1217: FILE: crypto/skein256_generic.c:302:
+		n = byteCnt - i * SKEIN_256_BLOCK_BYTES;	/* number of output bytes left to go */

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1220: FILE: crypto/skein256_generic.c:305:
+		Skein_Put64_LSB_First(hashVal + i * SKEIN_256_BLOCK_BYTES, ctx->X, n);	/* "output" the ctr mode bytes */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1235: FILE: crypto/skein256_generic.c:320:
+static void skein256_update(struct crypto_tfm *tfm, const u8 * data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1243: FILE: crypto/skein256_generic.c:328:
+static void skein256_final(struct crypto_tfm *tfm, u8 * out)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1289: FILE: crypto/skein512_generic.c:1:
+/***********************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1290: FILE: crypto/skein512_generic.c:2:
+/***********************************************************************
+**

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1296: FILE: crypto/skein512_generic.c:8:
+** $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: crypto/skein512_generic.c:19:
+static int Skein_512_Init(struct skein512_ctx * ctx, size_t hashBitLen);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_512_Init>
#1307: FILE: crypto/skein512_generic.c:19:
+static int Skein_512_Init(struct skein512_ctx * ctx, size_t hashBitLen);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1308: FILE: crypto/skein512_generic.c:20:
+static int Skein_512_Update(struct skein512_ctx * ctx, const u8 * msg, size_t msgByteCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1308: FILE: crypto/skein512_generic.c:20:
+static int Skein_512_Update(struct skein512_ctx * ctx, const u8 * msg, size_t msgByteCnt);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_512_Update>
#1308: FILE: crypto/skein512_generic.c:20:
+static int Skein_512_Update(struct skein512_ctx * ctx, const u8 * msg, size_t msgByteCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: crypto/skein512_generic.c:21:
+static int Skein_512_Final(struct skein512_ctx * ctx, u8 * hashVal);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: crypto/skein512_generic.c:21:
+static int Skein_512_Final(struct skein512_ctx * ctx, u8 * hashVal);

CHECK:CAMELCASE: Avoid CamelCase: <Skein_512_Final>
#1309: FILE: crypto/skein512_generic.c:21:
+static int Skein_512_Final(struct skein512_ctx * ctx, u8 * hashVal);

CHECK:SPACING: No space is necessary after a cast
#1318: FILE: crypto/skein512_generic.c:30:
+	if (1 == ((u8 *) & ONE)[0])

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1318: FILE: crypto/skein512_generic.c:30:
+	if (1 == ((u8 *) & ONE)[0])
 	                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1330: FILE: crypto/skein512_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1330: FILE: crypto/skein512_generic.c:42:
+static void Skein_Put64_LSB_First(u8 * dst, const u64 * src, size_t bCnt)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#1331: FILE: crypto/skein512_generic.c:43:
+{				/* this version is fully portable (big-endian or little-endian), but slow */

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: crypto/skein512_generic.c:47:
+		dst[n] = (u8) (src[n >> 3] >> (8 * (n & 7)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1338: FILE: crypto/skein512_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1338: FILE: crypto/skein512_generic.c:50:
+static void Skein_Get64_LSB_First(u64 * dst, const u8 * src, size_t wCnt)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#1339: FILE: crypto/skein512_generic.c:51:
+{				/* this version is fully portable (big-endian or little-endian), but slow */

CHECK:SPACING: No space is necessary after a cast
#1343: FILE: crypto/skein512_generic.c:55:
+		dst[n / 8] = (((u64) src[n])) +

CHECK:SPACING: No space is necessary after a cast
#1344: FILE: crypto/skein512_generic.c:56:
+		    (((u64) src[n + 1]) << 8) +

CHECK:SPACING: No space is necessary after a cast
#1345: FILE: crypto/skein512_generic.c:57:
+		    (((u64) src[n + 2]) << 16) +

CHECK:SPACING: No space is necessary after a cast
#1346: FILE: crypto/skein512_generic.c:58:
+		    (((u64) src[n + 3]) << 24) +

CHECK:SPACING: No space is necessary after a cast
#1347: FILE: crypto/skein512_generic.c:59:
+		    (((u64) src[n + 4]) << 32) +

CHECK:SPACING: No space is necessary after a cast
#1348: FILE: crypto/skein512_generic.c:60:
+		    (((u64) src[n + 5]) << 40) +

CHECK:SPACING: No space is necessary after a cast
#1349: FILE: crypto/skein512_generic.c:61:
+		    (((u64) src[n + 6]) << 48) + (((u64) src[n + 7]) << 56);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1358: FILE: crypto/skein512_generic.c:70:
+#define BLK_BITS    (WCNT*64)
                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1361: FILE: crypto/skein512_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#1361: FILE: crypto/skein512_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1361: FILE: crypto/skein512_generic.c:73:
+#define InjectKey(r)                                                \
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: crypto/skein512_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#1362: FILE: crypto/skein512_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1362: FILE: crypto/skein512_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1362: FILE: crypto/skein512_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1362: FILE: crypto/skein512_generic.c:74:
+    for (i=0;i < WCNT;i++)                                          \
                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1363: FILE: crypto/skein512_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: crypto/skein512_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1363: FILE: crypto/skein512_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1363: FILE: crypto/skein512_generic.c:75:
+         X[i] += ks[((r)+i) % (WCNT+1)];                            \
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: crypto/skein512_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1364: FILE: crypto/skein512_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1364: FILE: crypto/skein512_generic.c:76:
+    X[WCNT-3] += ts[((r)+0) % 3];                                   \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: crypto/skein512_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1365: FILE: crypto/skein512_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1365: FILE: crypto/skein512_generic.c:77:
+    X[WCNT-2] += ts[((r)+1) % 3];                                   \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: crypto/skein512_generic.c:78:
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1366: FILE: crypto/skein512_generic.c:78:
+    X[WCNT-1] += (r);                    /* avoid slide attacks */  \
           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: crypto/skein512_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1367: FILE: crypto/skein512_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1367: FILE: crypto/skein512_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1367: FILE: crypto/skein512_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1367: FILE: crypto/skein512_generic.c:79:
+    Skein_Show_Round(BLK_BITS,&ctx->h,SKEIN_RND_KEY_INJECT,X);
                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Skein_512_Process_Block>
#1369: FILE: crypto/skein512_generic.c:81:
+static void Skein_512_Process_Block(struct skein512_ctx *ctx, const u8 *blkPtr,

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1397: FILE: crypto/skein512_generic.c:109:
+		Skein_Get64_LSB_First(w, blkPtr, WCNT);	/* get input block in little-endian format */

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1529: FILE: crypto/skein512_generic.c:241:
+	}
+	while (--blkCnt);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1570: FILE: crypto/skein512_generic.c:282:
+static int Skein_512_Update(struct skein512_ctx *ctx, const u8 * msg,

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1575: FILE: crypto/skein512_generic.c:287:
+	Skein_Assert(ctx->h.bCnt <= SKEIN_512_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1580: FILE: crypto/skein512_generic.c:292:
+			n = SKEIN_512_BLOCK_BYTES - ctx->h.bCnt;	/* # bytes free in buffer b[] */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1595: FILE: crypto/skein512_generic.c:307:
+			n = (msgByteCnt - 1) / SKEIN_512_BLOCK_BYTES;	/* number of full blocks to process */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1616: FILE: crypto/skein512_generic.c:328:
+static int Skein_512_Final(struct skein512_ctx *ctx, u8 * hashVal)

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1620: FILE: crypto/skein512_generic.c:332:
+	Skein_Assert(ctx->h.bCnt <= SKEIN_512_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1620: FILE: crypto/skein512_generic.c:332:
+	u64 X[SKEIN_512_STATE_WORDS];
+	Skein_Assert(ctx->h.bCnt <= SKEIN_512_BLOCK_BYTES, SKEIN_FAIL);	/* catch uninitialized context */

CHECK:SPACING: No space is necessary after a cast
#1636: FILE: crypto/skein512_generic.c:348:
+		((u64 *) ctx->b)[0] = Skein_Swap64((u64) i);	/* build the counter block */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1639: FILE: crypto/skein512_generic.c:351:
+		n = byteCnt - i * SKEIN_512_BLOCK_BYTES;	/* number of output bytes left to go */

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1642: FILE: crypto/skein512_generic.c:354:
+		Skein_Put64_LSB_First(hashVal + i * SKEIN_512_BLOCK_BYTES, ctx->X, n);	/* "output" the ctr mode bytes */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1658: FILE: crypto/skein512_generic.c:370:
+static void skein512_update(struct crypto_tfm *tfm, const u8 * data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1666: FILE: crypto/skein512_generic.c:378:
+static void skein512_final(struct crypto_tfm *tfm, u8 * out)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 152 errors, 90 warnings, 139 checks, 1594 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
