WARNING:TYPO_SPELLING: 'contiguos' may be misspelled - perhaps 'contiguous'?
#32: 
Although how many units have been placed in a single contiguos area
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#228: FILE: include/linux/percpu.h:66:
+						 * entries contain NR_CPUS */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/percpu.h:100:
+extern struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/percpu.h:102:
+extern void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#259: FILE: include/linux/percpu.h:104:
+extern struct pcpu_alloc_info * __init pcpu_build_alloc_info(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/percpu.h:104:
+extern struct pcpu_alloc_info * __init pcpu_build_alloc_info(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/linux/percpu.h:109:
+extern size_t __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#339: FILE: mm/percpu.c:1285:
+		ai->groups[0].cpu_map[unit] = NR_CPUS;

WARNING:TYPO_SPELLING: 'mutliples' may be misspelled - perhaps 'multiples'?
#380: FILE: mm/percpu.c:1315:
+ * Groups are always mutliples of atom size and CPUs which are of
                      ^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#396: FILE: mm/percpu.c:1325:
+struct pcpu_alloc_info * __init pcpu_build_alloc_info(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: mm/percpu.c:1447:
+	BUG_ON(unit != nr_units);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#554: FILE: mm/percpu.c:1481:
+	printk("%spcpu-alloc: s%zu r%zu d%zu u%zu alloc=%zu*%zu",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: mm/percpu.c:1489:
+		BUG_ON(gi->nr_units % upa);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#573: FILE: mm/percpu.c:1494:
+				printk("%spcpu-alloc: ", lvl);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#575: FILE: mm/percpu.c:1496:
+			printk("[%0*d] ", group_width, group);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#578: FILE: mm/percpu.c:1499:
+				if (gi->cpu_map[unit] != NR_CPUS)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: mm/percpu.c:1500:
+					printk("%0*d ", cpu_width,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#582: FILE: mm/percpu.c:1503:
+					printk("%s ", empty_str);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: mm/percpu.c:1581:
+	BUG_ON(ai->nr_groups <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: mm/percpu.c:1582:
+	BUG_ON(!ai->static_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#682: FILE: mm/percpu.c:1584:
+	BUG_ON(ai->unit_size < size_sum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#683: FILE: mm/percpu.c:1585:
+	BUG_ON(ai->unit_size & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: mm/percpu.c:1586:
+	BUG_ON(ai->unit_size < PCPU_MIN_UNIT_SIZE);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#718: FILE: mm/percpu.c:1594:
+		unit_map[cpu] = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#719: FILE: mm/percpu.c:1595:
+	pcpu_first_unit_cpu = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#731: FILE: mm/percpu.c:1602:
+			if (cpu == NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#738: FILE: mm/percpu.c:1605:
+			BUG_ON(cpu > nr_cpu_ids || !cpu_possible(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#739: FILE: mm/percpu.c:1606:
+			BUG_ON(unit_map[cpu] != NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#739: FILE: mm/percpu.c:1606:
+			BUG_ON(unit_map[cpu] != NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#742: FILE: mm/percpu.c:1609:
+			if (pcpu_first_unit_cpu == NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#750: FILE: mm/percpu.c:1617:
+		BUG_ON(unit_map[cpu] == NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#750: FILE: mm/percpu.c:1617:
+		BUG_ON(unit_map[cpu] == NR_CPUS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: mm/percpu.c:1765:
+	BUG_ON(ai->nr_groups != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: mm/percpu.c:1766:
+	BUG_ON(ai->groups[0].nr_units != num_possible_cpus());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#876: FILE: mm/percpu.c:1838:
+	BUG_ON(ai->nr_groups != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#877: FILE: mm/percpu.c:1839:
+	BUG_ON(ai->groups[0].nr_units != num_possible_cpus());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#987: FILE: mm/percpu.c:1954:
+	BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094390.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 31 warnings, 6 checks, 980 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094390.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
