CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#79: FILE: fs/exofs/exofs.h:59:
+	uint64_t pid;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: fs/exofs/exofs.h:210:
+extern int exofs_write_inode(struct inode *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#108: FILE: fs/exofs/exofs.h:210:
+extern int exofs_write_inode(struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#108: FILE: fs/exofs/exofs.h:210:
+extern int exofs_write_inode(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: fs/exofs/exofs.h:211:
+extern void exofs_delete_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#109: FILE: fs/exofs/exofs.h:211:
+extern void exofs_delete_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: fs/exofs/exofs.h:222:
+extern void exofs_write_super(struct super_block *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: fs/exofs/inode.c:59:
+	struct exofs_sb_info *sbi;
+	free_osd_req(req);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#198: FILE: fs/exofs/inode.c:138:
+		printk(KERN_ERR "ERROR: prepare_osd_remove failed\n");

CHECK:CAMELCASE: Avoid CamelCase: <ObjCreated>
#203: FILE: fs/exofs/inode.c:143:
+	if (!ObjCreated(oi)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Obj2BCreated>
#204: FILE: fs/exofs/inode.c:144:
+		if (!Obj2BCreated(oi))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: fs/exofs/inode.c:145:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#212: FILE: fs/exofs/inode.c:152:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_delete_inode', this function's name, in a string
#213: FILE: fs/exofs/inode.c:153:
+		       "ERROR: @exofs_delete_inode exofs_async_op failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fcb)...) over kmalloc(sizeof(struct exofs_fcb)...)
#262: FILE: fs/exofs/inode.c:711:
+	fcb = kmalloc(sizeof(struct exofs_fcb), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: fs/exofs/inode.c:736:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: fs/exofs/inode.c:741:
+	req = prepare_osd_set_attr(sbi->s_dev, sbi->s_pid,
+				 (uint64_t) (inode->i_ino + EXOFS_OBJ_OFF));

CHECK:SPACING: No space is necessary after a cast
#292: FILE: fs/exofs/inode.c:741:
+				 (uint64_t) (inode->i_ino + EXOFS_OBJ_OFF));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#294: FILE: fs/exofs/inode.c:743:
+		printk(KERN_ERR "ERROR: prepare set_attr failed.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: fs/exofs/inode.c:757:
+			BUG();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*args)...) over kmalloc(sizeof(struct updatei_args)...)
#320: FILE: fs/exofs/inode.c:769:
+		args = kmalloc(sizeof(struct updatei_args), GFP_KERNEL);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#370: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#375: FILE: fs/exofs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#404: FILE: fs/exofs/super.c:30:
+ * along with exofs; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#405: FILE: fs/exofs/super.c:31:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_lun>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_tid>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_pid>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_to>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mkfs>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_format>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#422: FILE: fs/exofs/super.c:48:
+enum { Opt_lun, Opt_tid, Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_options', this function's name, in a string
#446: FILE: fs/exofs/super.c:72:
+	EXOFS_DBGMSG("parse_options %s\n", options);

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: fs/exofs/super.c:79:
+		int token;
+		if (!*p)

WARNING:TYPO_SPELLING: 'Timout' may be misspelled - perhaps 'Timeout'?
#472: FILE: fs/exofs/super.c:98:
+				EXOFS_ERR("Timout must be > 0");
 				           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!exofs_inode_cachep"
#540: FILE: fs/exofs/super.c:166:
+	if (exofs_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fscb)...) over kzalloc(sizeof(struct exofs_fscb)...)
#566: FILE: fs/exofs/super.c:192:
+	fscb = kzalloc(sizeof(struct exofs_fscb), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: fs/exofs/super.c:232:
+		wait_queue_head_t wq;
+		init_waitqueue_head(&wq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: fs/exofs/super.c:234:
+		wait_event_timeout(wq,
+				  (atomic_read(&sbi->s_curr_pending) == 0),

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#695: FILE: fs/exofs/super.c:321:
+		EXOFS_ERR("ERROR: exofs_iget faild\n");
 		                             ^^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#701: FILE: fs/exofs/super.c:327:
+		iput(root);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: fs/exofs/super.c:337:
+		EXOFS_ERR("ERROR: corrupt root inode (mode = %hd)\n",
+		       root->i_mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: fs/exofs/super.c:358:
+static int exofs_get_sb(struct file_system_type *type,
+			  int flags, const char *dev_name,

CHECK:SPACING: No space is necessary after a cast
#738: FILE: fs/exofs/super.c:364:
+	ret = parse_options((char *) data, &opts);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#754: FILE: fs/exofs/super.c:380:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#756: FILE: fs/exofs/super.c:382:
+	uint32_t page;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#757: FILE: fs/exofs/super.c:383:
+	uint32_t attr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#758: FILE: fs/exofs/super.c:384:
+	uint16_t expected;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#759: FILE: fs/exofs/super.c:385:
+	uint64_t capacity;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#760: FILE: fs/exofs/super.c:386:
+	uint64_t used;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#761: FILE: fs/exofs/super.c:387:
+	uint8_t *data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: fs/exofs/super.c:400:
+	prepare_get_attr_list_add_entry(req,
+			OSD_APAGE_PARTITION_QUOTAS,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: fs/exofs/super.c:405:
+	prepare_get_attr_list_add_entry(req,
+			OSD_APAGE_PARTITION_INFORMATION,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192055.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 18 warnings, 33 checks, 793 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192055.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
