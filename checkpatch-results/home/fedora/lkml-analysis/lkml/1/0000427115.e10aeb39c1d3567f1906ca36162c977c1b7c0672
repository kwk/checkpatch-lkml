WARNING:NEW_TYPEDEFS: do not add new typedefs
#71: FILE: fs/afs/afs.h:40:
+typedef enum {

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#143: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: fs/afs/flock.c:1:
+/* AFS file locking support

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct file_lock_operations should normally be const
#170: FILE: fs/afs/flock.c:23:
+static struct file_lock_operations afs_lock_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#240: FILE: fs/afs/flock.c:93:
+		 * wait 5 minutes and it'll time out anyway */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#243: FILE: fs/afs/flock.c:96:
+			printk(KERN_WARNING "AFS:"

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: fs/afs/flock.c:97:
+			printk(KERN_WARNING "AFS:"
+			       " Failed to release lock on {%x:%x} error %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#254: FILE: fs/afs/flock.c:107:
+	 * locks time out after 5 minutes */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: fs/afs/flock.c:112:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#274: FILE: fs/afs/flock.c:127:
+			 * extension shortly */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#275: FILE: fs/afs/flock.c:128:
+			printk(KERN_WARNING "AFS:"

WARNING:SPLIT_STRING: quoted string split across lines
#276: FILE: fs/afs/flock.c:129:
+			printk(KERN_WARNING "AFS:"
+			       " Failed to extend lock on {%x:%x} error %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#288: FILE: fs/afs/flock.c:141:
+	 * currently waiting for */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: fs/afs/flock.c:146:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#317: FILE: fs/afs/flock.c:170:
+			 * signal */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: fs/afs/flock.c:213:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#362: FILE: fs/afs/flock.c:215:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#396: FILE: fs/afs/flock.c:249:
+	 * data version is up to date */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#410: FILE: fs/afs/flock.c:263:
+		 * need to ask the server for a lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#442: FILE: fs/afs/flock.c:295:
+		 * readlock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#466: FILE: fs/afs/flock.c:319:
+	 * lock from the server */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#479: FILE: fs/afs/flock.c:332:
+	 * giving us the lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#495: FILE: fs/afs/flock.c:348:
+	 * wait, or because some signal happened */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#512: FILE: fs/afs/flock.c:365:
+	 * mins */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#535: FILE: fs/afs/flock.c:388:
+	 * errors incurred here and deal with the consequences elsewhere) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#545: FILE: fs/afs/flock.c:398:
+	 * what we just got */

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#635: FILE: fs/afs/flock.c:488:
+	_enter("{%x:%u},%d,{t=%x,fl=%x,r=%Ld:%Ld}",

CHECK:SPACING: No space is necessary after a cast
#638: FILE: fs/afs/flock.c:491:
+	       (long long) fl->fl_start, (long long) fl->fl_end);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#641: FILE: fs/afs/flock.c:494:
+	if ((vnode->vfs_inode.i_mode & (S_ISGID | S_IXGRP)) == S_ISGID &&

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#666: FILE: fs/afs/flock.c:519:
+	 * using ((u32) filp | 0x80000000) or some such as the pid.
 	                ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#674: FILE: fs/afs/flock.c:527:
+	fl->fl_owner = (fl_owner_t) file;

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSSetLock>
#752: FILE: fs/afs/fsclient.c:1782:
+static const struct afs_call_type afs_RXFSSetLock = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSExtendLock>
#762: FILE: fs/afs/fsclient.c:1792:
+static const struct afs_call_type afs_RXFSExtendLock = {

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSReleaseLock>
#772: FILE: fs/afs/fsclient.c:1802:
+static const struct afs_call_type afs_RXFSReleaseLock = {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: fs/afs/internal.h:486:
+extern void __exit afs_kill_lock_manager(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#906: FILE: fs/afs/internal.h:487:
+extern void afs_lock_work(struct work_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#906: FILE: fs/afs/internal.h:487:
+extern void afs_lock_work(struct work_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: fs/afs/internal.h:488:
+extern void afs_lock_may_be_available(struct afs_vnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#907: FILE: fs/afs/internal.h:488:
+extern void afs_lock_may_be_available(struct afs_vnode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: fs/afs/internal.h:489:
+extern int afs_lock(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#908: FILE: fs/afs/internal.h:489:
+extern int afs_lock(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#908: FILE: fs/afs/internal.h:489:
+extern int afs_lock(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#908: FILE: fs/afs/internal.h:489:
+extern int afs_lock(struct file *, int, struct file_lock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: fs/afs/internal.h:490:
+extern int afs_flock(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#909: FILE: fs/afs/internal.h:490:
+extern int afs_flock(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#909: FILE: fs/afs/internal.h:490:
+extern int afs_flock(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#909: FILE: fs/afs/internal.h:490:
+extern int afs_flock(struct file *, int, struct file_lock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#919: FILE: fs/afs/internal.h:532:
+extern int afs_fs_set_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#919: FILE: fs/afs/internal.h:532:
+extern int afs_fs_set_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#919: FILE: fs/afs/internal.h:532:
+extern int afs_fs_set_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#919: FILE: fs/afs/internal.h:532:
+extern int afs_fs_set_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'afs_lock_type_t' should also have an identifier name
#919: FILE: fs/afs/internal.h:532:
+extern int afs_fs_set_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#919: FILE: fs/afs/internal.h:532:
+extern int afs_fs_set_lock(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#922: FILE: fs/afs/internal.h:535:
+extern int afs_fs_extend_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#922: FILE: fs/afs/internal.h:535:
+extern int afs_fs_extend_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#922: FILE: fs/afs/internal.h:535:
+extern int afs_fs_extend_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#922: FILE: fs/afs/internal.h:535:
+extern int afs_fs_extend_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#922: FILE: fs/afs/internal.h:535:
+extern int afs_fs_extend_lock(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: fs/afs/internal.h:538:
+extern int afs_fs_release_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#925: FILE: fs/afs/internal.h:538:
+extern int afs_fs_release_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#925: FILE: fs/afs/internal.h:538:
+extern int afs_fs_release_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#925: FILE: fs/afs/internal.h:538:
+extern int afs_fs_release_lock(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#925: FILE: fs/afs/internal.h:538:
+extern int afs_fs_release_lock(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: fs/afs/internal.h:709:
+extern int afs_vnode_set_lock(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#935: FILE: fs/afs/internal.h:709:
+extern int afs_vnode_set_lock(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#935: FILE: fs/afs/internal.h:709:
+extern int afs_vnode_set_lock(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'afs_lock_type_t' should also have an identifier name
#935: FILE: fs/afs/internal.h:709:
+extern int afs_vnode_set_lock(struct afs_vnode *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#937: FILE: fs/afs/internal.h:711:
+extern int afs_vnode_extend_lock(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#937: FILE: fs/afs/internal.h:711:
+extern int afs_vnode_extend_lock(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#937: FILE: fs/afs/internal.h:711:
+extern int afs_vnode_extend_lock(struct afs_vnode *, struct key *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: fs/afs/internal.h:712:
+extern int afs_vnode_release_lock(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#938: FILE: fs/afs/internal.h:712:
+extern int afs_vnode_release_lock(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#938: FILE: fs/afs/internal.h:712:
+extern int afs_vnode_release_lock(struct afs_vnode *, struct key *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 57 warnings, 16 checks, 1020 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
