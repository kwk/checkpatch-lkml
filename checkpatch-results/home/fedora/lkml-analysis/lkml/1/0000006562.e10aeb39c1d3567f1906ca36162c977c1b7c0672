WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-core-for-linus

WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#153: FILE: arch/Kconfig:127:
+	  This symbol should be selected by an architecure if it supports
 	                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: arch/s390/include/asm/ptrace.h:495:
+extern void show_regs(struct pt_regs * regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: arch/s390/include/asm/ptrace.h:495:
+extern void show_regs(struct pt_regs * regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#266: FILE: arch/s390/kernel/ptrace.c:1014:
+	if (strict_strtoul(name + 1, 10, &offset))

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#510: FILE: include/linux/syscalls.h:136:
+	__attribute__((__aligned__(4))) event_enter_##sname;		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#530: FILE: include/linux/syscalls.h:158:
+	__attribute__((__aligned__(4))) event_exit_##sname;		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#554: FILE: include/trace/ftrace.h:69:
+	__attribute__((__aligned__(4))) event_##name

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#818: FILE: include/trace/ftrace.h:624:
+#define DECLARE_EVENT_CLASS(call, proto, args, tstruct, assign, print)	\
+static const char print_fmt_##call[] = print;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#862: FILE: include/trace/ftrace.h:749:
+#define __get_str(field) (char *)__get_dynamic_array(field)

WARNING:TYPO_SPELLING: 'rewrited' may be misspelled - perhaps 'rewrote'?
#1091: FILE: kernel/trace/trace.c:257:
+ *      (not reader page) in ring buffer, and this page will be rewrited
                                                                 ^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#1372: FILE: kernel/trace/trace.h:796:
+	__attribute__((__aligned__(4))) event_##call;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1515: FILE: kernel/trace/trace_events.c:581:
+		r = trace_seq_printf(s, "\nprint fmt: %s\n",
+				call->print_fmt);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1619: FILE: kernel/trace/trace_export.c:106:
+#define __dynamic_array(type, item)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 0, is_signed_type(type), FILTER_OTHER);\
+	if (ret)							\
+		return ret;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1619: FILE: kernel/trace/trace_export.c:106:
+#define __dynamic_array(type, item)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 0, is_signed_type(type), FILTER_OTHER);\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1619: FILE: kernel/trace/trace_export.c:106:
+#define __dynamic_array(type, item)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 0, is_signed_type(type), FILTER_OTHER);\
+	if (ret)							\
+		return ret;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1711: FILE: kernel/trace/trace_functions_graph.c:290:
+	smp_mb();

WARNING:SPLIT_STRING: quoted string split across lines
#2161: FILE: kernel/trace/trace_syscalls.c:611:
 		pr_info("event trace: Could not activate"
+				"syscall exit trace point");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#2161: FILE: kernel/trace/trace_syscalls.c:611:
 		pr_info("event trace: Could not activate"
+				"syscall exit trace point");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006562.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 14 warnings, 2 checks, 1849 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006562.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
