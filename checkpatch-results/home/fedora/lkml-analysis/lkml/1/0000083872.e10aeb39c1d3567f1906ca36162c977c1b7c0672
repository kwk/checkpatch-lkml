WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
  processes are put to sleep and they effectively become serialized. Because

WARNING:TYPO_SPELLING: 'supercedes' may be misspelled - perhaps 'supersedes'?
#63: 
  supercedes q->nr_group_requests to make sure if there are lots of groups
  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: block/blk-core.c:485:
+	BUG_ON(priv && !rq->ioq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#117: FILE: block/blk-core.c:492:
+	BUG_ON(!iog);

WARNING:TYPO_SPELLING: 'instanciated' may be misspelled - perhaps 'instantiated'?
#154: FILE: block/blk-core.c:524:
+	 * instanciated, it takes care of initializing the request list also.
 	   ^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: block/blk-core.c:528:
+	q->rq_data.rq_pool = mempool_create_node(BLKDEV_MIN_RQ,
+				mempool_alloc_slab, mempool_free_slab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: block/blk-core.c:738:
+static void __freed_request(struct request_queue *q, int sync,
+					struct request_list *rl)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: block/blk-core.c:757:
+static void freed_request(struct request_queue *q, int sync, int priv,
+					struct request_list *rl)

WARNING:TYPO_SPELLING: 'Chcek' may be misspelled - perhaps 'Check'?
#248: FILE: block/blk-core.c:769:
+	 * did not allocate that request. Chcek for rl->count going less than
 	                                  ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#255: FILE: block/blk-core.c:776:
+	BUG_ON(!q->rq_data.count[sync]);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#272: FILE: block/blk-core.c:789:
+		if (waitqueue_active(&q->rq_data.starved_wait))

WARNING:TYPO_SPELLING: 'gloabl' may be misspelled - perhaps 'global'?
#281: FILE: block/blk-core.c:798:
+ * any request descriptor but we deny request allocation due to gloabl
                                                                 ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#300: FILE: block/blk-core.c:817:
+		if (rl->count[is_sync ^ 1] != 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#303: FILE: block/blk-core.c:820:
+		} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#359: FILE: block/blk-core.c:851:
+	if (q->rq_data.count[is_sync]+1 >= queue_congestion_on_threshold(q))
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#366: FILE: block/blk-core.c:858:
+	if (q->rq_data.count[is_sync]+1 >= q->nr_requests)
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#369: FILE: block/blk-core.c:861:
+	if (rl->count[is_sync]+1 >= q->nr_group_requests) {
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#378: FILE: block/blk-core.c:870:
+		if (rl->count[is_sync] <= q->nr_group_requests)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: block/blk-core.c:872:
+		else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#382: FILE: block/blk-core.c:874:
+			if (may_queue != ELV_MQUEUE_MUST
+					&& !ioc_batching(q, ioc)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#416: FILE: block/blk-core.c:906:
+		if (test_bit(QUEUE_FLAG_ELVSWITCH, &q->queue_flags)
+		    || !can_sleep_on_request_list(rl, is_sync))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: block/blk-core.c:1015:
+			prepare_to_wait_exclusive(&q->rq_data.starved_wait,
+					&wait, TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: block/blk-core.c:1025:
+			prepare_to_wait_exclusive(&rl->wait[is_sync], &wait,
+					TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: block/blk-core.c:1072:
+		rq = get_request(q, rw_flags, bio, GFP_NOIO, rl,
+					&sleep_on_global);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#657: FILE: block/blk-sysfs.c:66:
+	} else if (q->rq_data.count[BLK_RW_SYNC]+1 <= q->nr_requests) {
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#666: FILE: block/blk-sysfs.c:73:
+	} else if (q->rq_data.count[BLK_RW_ASYNC]+1 <= q->nr_requests) {
 	                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#673: FILE: block/blk-sysfs.c:80:
 }
+#ifdef CONFIG_GROUP_IOSCHED

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: block/blk-sysfs.c:88:
+queue_group_requests_store(struct request_queue *q, const char *page,
+					size_t count)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#704: FILE: block/blk-sysfs.c:270:
+	.attr = {.name = "nr_group_requests", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#734: FILE: block/blk-sysfs.c:436:
+	if (q->rq_data.rq_pool)
+		mempool_destroy(q->rq_data.rq_pool);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: block/elevator-fq.c:925:
+struct request_list *elv_io_group_get_request_list(struct request_queue *q,
+						struct bio *bio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#752: FILE: block/elevator-fq.c:930:
+	BUG_ON(!iog);

WARNING:TYPO_SPELLING: 'eqivalent' may be misspelled - perhaps 'equivalent'?
#839: FILE: include/linux/blkdev.h:42:
+ * This is eqivalent to case of only one group present (root group). Let
            ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/linux/blkdev.h:822:
+extern void blk_init_request_list(struct request_list *rl);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: include/linux/blkdev.h:824:
+extern struct request_list *blk_get_request_list(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: include/linux/blkdev.h:825:
+extern struct request_list *blk_get_request_list(struct request_queue *q,
+							struct bio *bio);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000083872.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 23 checks, 775 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000083872.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
