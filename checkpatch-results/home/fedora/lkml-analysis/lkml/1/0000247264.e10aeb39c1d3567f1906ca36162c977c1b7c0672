WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
There are many reasons why this is desirable. The core limit is to me the most 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#62: 
--- a/fs/proc/base.c	2008-07-30 21:44:44.000000000 +0200

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:BRACES: braces {} should be used on all arms of this statement
#98: FILE: fs/proc/base.c:456:
+			if (strncmp(buffer, "unlimited", 9) == 0)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#100: FILE: fs/proc/base.c:458:
+			else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#101: FILE: fs/proc/base.c:459:
+				softlim = strict_strtoul(buffer, &tmp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: fs/proc/base.c:467:
+				s = tmp+1;
 				       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#114: FILE: fs/proc/base.c:472:
+					hardlim = strict_strtoul(s, &tmp, 10);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hardlim <= task->signal->rlim[RLIMIT_CORE].rlim_max'
#124: FILE: fs/proc/base.c:482:
+				if ((hardlim <= task->signal->rlim[RLIMIT_CORE].rlim_max) ||
+					capable(CAP_SYS_ADMIN))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: fs/proc/base.c:483:
+				if ((hardlim <= task->signal->rlim[RLIMIT_CORE].rlim_max) ||
+					capable(CAP_SYS_ADMIN))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: fs/proc/base.c:536:
+static int pid_limits_read(struct file *file, char __user *buf,
+				size_t cnt, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: fs/proc/base.c:588:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#194: FILE: fs/proc/base.c:2543:
+	REG("limits",	  S_IRUSR|S_IWUSR, pid_limits),
 	             	         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#194: FILE: fs/proc/base.c:2543:
+	REG("limits",	  S_IRUSR|S_IWUSR, pid_limits),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#203: FILE: fs/proc/base.c:2878:
+	REG("limits",	 S_IRUSR|S_IWUSR, pid_limits),
 	             	        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#203: FILE: fs/proc/base.c:2878:
+	REG("limits",	 S_IRUSR|S_IWUSR, pid_limits),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 8 checks, 138 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
