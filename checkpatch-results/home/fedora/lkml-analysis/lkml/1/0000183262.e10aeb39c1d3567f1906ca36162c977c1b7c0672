WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: include/linux/btree.h:1:
+#ifndef BTREE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#240: FILE: include/linux/btree.h:188:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#257: FILE: include/linux/btree.h:205:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#263: FILE: include/linux/btree.h:211:
+#define BTREE_TYPE_GEO &btree_geo32

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#267: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#267: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#267: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#267: FILE: include/linux/btree.h:215:
+#define btree_for_each_safel(head, key, val)	\
+	for (val = btree_lastl(head, &key);	\
+	     val;				\
+	     val = btree_get_prevl(head, &key))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#274: FILE: include/linux/btree.h:222:
+#define BTREE_TYPE_GEO &btree_geo32

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#278: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#278: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#278: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#278: FILE: include/linux/btree.h:226:
+#define btree_for_each_safe32(head, key, val)	\
+	for (val = btree_last32(head, &key);	\
+	     val;				\
+	     val = btree_get_prev32(head, &key))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#286: FILE: include/linux/btree.h:234:
+#define BTREE_TYPE_GEO &btree_geo64

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#290: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#290: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#290: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#290: FILE: include/linux/btree.h:238:
+#define btree_for_each_safe64(head, key, val)	\
+	for (val = btree_last64(head, &key);	\
+	     val;				\
+	     val = btree_get_prev64(head, &key))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#321: FILE: lib/btree.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#322: FILE: lib/btree.c:2:
+ * lib/btree.c	- Simple In-memory B+Tree

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#334: FILE: lib/btree.c:14:
+ * excercise to understand how B+Trees work.  Turned out to be useful as well.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#368: FILE: lib/btree.c:48:
+#define MAX(a, b) ((a) > (b) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#368: FILE: lib/btree.c:48:
+#define MAX(a, b) ((a) > (b) ? (a) : (b))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#390: FILE: lib/btree.c:70:
+EXPORT_SYMBOL_GPL(btree_geo64);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: lib/btree.c:116:
+static unsigned long *longcpy(unsigned long *dest, const unsigned long *src,
+		size_t n)

CHECK:SPACING: No space is necessary after a cast
#486: FILE: lib/btree.c:166:
+	node[geo->no_longs + n] = (unsigned long) val;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: lib/btree.c:240:
+void *btree_lookup(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key)

CHECK:BRACES: braces {} should be used on all arms of this statement
#664: FILE: lib/btree.c:344:
+			if (bval(geo, node, i)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#667: FILE: lib/btree.c:347:
+				return bval(geo, node, i);
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#667: FILE: lib/btree.c:347:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: lib/btree.c:361:
+static int getpos(struct btree_geo *geo, unsigned long *node,
+		unsigned long *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: lib/btree.c:386:
+static unsigned long *find_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == geo->no_pairs'
#716: FILE: lib/btree.c:396:
+		if ((i == geo->no_pairs) || !bval(geo, node, i)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#719: FILE: lib/btree.c:399:
+			 * always zero, this wouldn't be necessary. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#723: FILE: lib/btree.c:403:
+		BUG_ON(i < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#726: FILE: lib/btree.c:406:
+	BUG_ON(!node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#759: FILE: lib/btree.c:439:
+	BUG_ON(fill > 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#772: FILE: lib/btree.c:452:
+	BUG_ON(!val);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#784: FILE: lib/btree.c:464:
+	BUG_ON(pos < fill && keycmp(geo, node, pos, key) == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: lib/btree.c:474:
+		err = btree_insert_level(head, geo,
+				bkey(geo, node, fill / 2 - 1),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#814: FILE: lib/btree.c:494:
+	BUG_ON(fill >= geo->no_pairs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: lib/btree.c:508:
+int btree_insert(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, void *val, gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: lib/btree.c:515:
+static void *btree_remove_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#837: FILE: lib/btree.c:517:
+static void merge(struct btree_head *head, struct btree_geo *geo, int level,
+		unsigned long *left, int lfill,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: lib/btree.c:537:
+static void rebalance(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level, unsigned long *child, int fill)

WARNING:TYPO_SPELLING: 'neigbour' may be misspelled - perhaps 'neighbour'?
#863: FILE: lib/btree.c:543:
+		/* Because we don't steal entries from a neigbour, this case
 		                                         ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#874: FILE: lib/btree.c:554:
+	BUG_ON(bval(geo, parent, i) != child);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: lib/btree.c:561:
+			merge(head, geo, level,
+					left, no_left,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: lib/btree.c:572:
+			merge(head, geo, level,
+					child, fill,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: lib/btree.c:588:
+static void *btree_remove_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level == 1'
#924: FILE: lib/btree.c:604:
+	if ((level == 1) && (keycmp(geo, node, pos, key) != 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: lib/btree.c:626:
+void *btree_remove(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#963: FILE: lib/btree.c:643:
+	BUG_ON(target == victim);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#984: FILE: lib/btree.c:664:
+		 * mangled inside btree_remove. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: lib/btree.c:688:
+			count = __btree_for_each(head, geo, child, opaque,
+					func, func2, reap, height - 1, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: lib/btree.c:691:
+			func(child, opaque, bkey(geo, node, i), count++,
+					func2);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: lib/btree.c:745:
+^I^I     ^I^I  unsigned long *key,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1065: FILE: lib/btree.c:745:
+^I^I     ^I^I  unsigned long *key,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1065: FILE: lib/btree.c:745:
+		     void (*func)(void *elem, unsigned long opaque,
+		     		  unsigned long *key,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: lib/btree.c:746:
+^I^I     ^I^I  size_t index, void *func2),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1066: FILE: lib/btree.c:746:
+^I^I     ^I^I  size_t index, void *func2),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: lib/btree.c:755:
+		count = __btree_for_each(head, geo, head->node, opaque, func,
+				func2, 0, head->height, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1093: FILE: lib/btree.c:773:
+		count = __btree_for_each(head, geo, head->node, opaque, func,
+				func2, 1, head->height, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: lib/btree.c:782:
+	btree_cachep = kmem_cache_create("btree_node", NODESIZE, 0,
+			SLAB_HWCACHE_ALIGN, NULL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1121: FILE: include/linux/btree-128.h:1:
+extern struct btree_geo btree_geo128;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1144: FILE: include/linux/btree-128.h:24:
+	u64 key[2] = {k1, k2};
+	return btree_lookup(&head->h, &btree_geo128, (unsigned long *)&key);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1164: FILE: include/linux/btree-128.h:44:
+	u64 key[2] = {k1, k2};
+	return btree_insert(&head->h, &btree_geo128,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1172: FILE: include/linux/btree-128.h:52:
+	u64 key[2] = {k1, k2};
+	return btree_update(&head->h, &btree_geo128,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1179: FILE: include/linux/btree-128.h:59:
+	u64 key[2] = {k1, k2};
+	return btree_remove(&head->h, &btree_geo128, (unsigned long *)&key);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#1225: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k1' - possible side-effects?
#1225: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k1' may be better as '(k1)' to avoid precedence issues
#1225: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k2' - possible side-effects?
#1225: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k2' may be better as '(k2)' to avoid precedence issues
#1225: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#1225: FILE: include/linux/btree-128.h:105:
+#define btree_for_each_safe128(head, k1, k2, val)	\
+	for (val = btree_last128(head, &k1, &k2);	\
+	     val;					\
+	     val = btree_get_prev128(head, &k1, &k2))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1233: FILE: include/linux/btree-type.h:1:
+#define __BTREE_TP(pfx, type, sfx)	pfx ## type ## sfx

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1235: FILE: include/linux/btree-type.h:3:
+#define BTREE_TP(pfx)			_BTREE_TP(pfx, BTREE_TYPE_SUFFIX,)
                      			                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1272: FILE: include/linux/btree-type.h:40:
+	unsigned long _key = key;
+	return btree_lookup(&head->h, BTREE_TYPE_GEO, &_key);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1279: FILE: include/linux/btree-type.h:47:
+	unsigned long _key = key;
+	return btree_insert(&head->h, BTREE_TYPE_GEO, &_key, val, gfp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1283: FILE: include/linux/btree-type.h:51:
+static inline int BTREE_FN(update)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,
+		void *val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1286: FILE: include/linux/btree-type.h:54:
+	unsigned long _key = key;
+	return btree_update(&head->h, BTREE_TYPE_GEO, &_key, val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1292: FILE: include/linux/btree-type.h:60:
+	unsigned long _key = key;
+	return btree_remove(&head->h, BTREE_TYPE_GEO, &_key);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1299: FILE: include/linux/btree-type.h:67:
+	void *val = btree_last(&head->h, BTREE_TYPE_GEO, &_key);
+	if (val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1308: FILE: include/linux/btree-type.h:76:
+	void *val = btree_get_prev(&head->h, BTREE_TYPE_GEO, &_key);
+	if (val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1319: FILE: include/linux/btree-type.h:87:
+static inline int BTREE_FN(insert)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,
+			   void *val, gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1326: FILE: include/linux/btree-type.h:94:
+static inline int BTREE_FN(update)(BTREE_TYPE_HEAD *head, BTREE_KEYTYPE key,
+		void *val)

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1388: FILE: MAINTAINERS:871:
+P:	Johannes Berg
+M:	johannes@sipsolutions.net

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1390: FILE: MAINTAINERS:873:
+P:	Joern Engel
+M:	joern@logfs.org

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000183262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 33 warnings, 49 checks, 1326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000183262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
