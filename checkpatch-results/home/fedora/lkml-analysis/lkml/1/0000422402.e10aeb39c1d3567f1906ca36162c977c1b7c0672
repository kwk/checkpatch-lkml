WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
It is a bit peculiar in that we have one task with two mm's, one of which is

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: fs/binfmt_elf.c:238:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/binfmt_elf.c:998:
+	retval = create_elf_tables(bprm, &loc->elf_ex,
 			  (interpreter_type == INTERPRETER_AOUT),

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#305: FILE: fs/compat.c:1274:
+		if (MAX_ARG_STRLEN < len) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:TYPO_SPELLING: 'backwords' may be misspelled - perhaps 'backwards'?
#312: FILE: fs/compat.c:1279:
+		/* We're going to work our way backwords. */
 		                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#389: FILE: fs/compat.c:1330:
+			if (copy_from_user(kaddr+offset, compat_ptr(str),
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/compat.c:1331:
+			if (copy_from_user(kaddr+offset, compat_ptr(str),
+						bytes_to_copy)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#476: FILE: fs/compat.c:1409:
+	retval = search_binary_handler(bprm,regs);
 	                                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#500: FILE: fs/compat.c:1424:
+		mmput (bprm->mm);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: fs/exec.c:185:
+static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
+		int write)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: fs/exec.c:198:
+	ret = get_user_pages(current, bprm->mm, pos,
+			1, write, 1, &page, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: fs/exec.c:221:
+static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
+		int write)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#565: FILE: fs/exec.c:227:
+		page = alloc_page(GFP_HIGHUSER|__GFP_ZERO);
 		                              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#608: FILE: fs/exec.c:270:
+	bprm->mm = mm = mm_alloc();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#613: FILE: fs/exec.c:275:
+	if ((err = init_new_context(current, mm)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#617: FILE: fs/exec.c:279:
+	bprm->vma = vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#637: FILE: fs/exec.c:299:
+		if ((err = insert_vm_struct(mm, vma))) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#642: FILE: fs/exec.c:304:
+		mm->stack_vm = mm->total_vm = 1;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#669: FILE: fs/exec.c:331:
+EXPORT_SYMBOL(bprm_mm_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#706: FILE: fs/exec.c:382:
+		if (MAX_ARG_STRLEN < len) {

WARNING:TYPO_SPELLING: 'backwords' may be misspelled - perhaps 'backwards'?
#719: FILE: fs/exec.c:393:
+		/* We're going to work our way backwords. */
 		                               ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#784: FILE: fs/exec.c:434:
+			if (copy_from_user(kaddr+offset, str, bytes_to_copy)) {
 			                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: fs/exec.c:477:
+	BUG_ON(new_start > new_end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: fs/exec.c:494:
+			free_pgd_range(&tlb, new_end, old_end, new_end,
+				vma->vm_next ? vma->vm_next->vm_start : 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: fs/exec.c:497:
+			free_pgd_range(&tlb, old_start, old_end, new_end,
+				vma->vm_next ? vma->vm_next->vm_start : 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: fs/exec.c:513:
+		if (length != move_page_tables_up(vma, old_start,
+					       vma, new_start, length))

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#881: FILE: fs/exec.c:519:
+			       prev ? prev->vm_end: 0, new_start);
 			                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#975: FILE: fs/exec.c:559:
+	BUG_ON(stack_top & ~PAGE_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: fs/exec.c:588:
+		ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,
+				vm_flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1036: FILE: fs/exec.c:593:
+		BUG_ON(prev != vma);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1130: FILE: fs/exec.c:1154:
+        int ret = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: fs/exec.c:1154:
+        int ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1131: FILE: fs/exec.c:1155:
+        unsigned long offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: fs/exec.c:1155:
+        unsigned long offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1132: FILE: fs/exec.c:1156:
+        char *kaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: fs/exec.c:1156:
+        char *kaddr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1133: FILE: fs/exec.c:1157:
+        struct page *page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: fs/exec.c:1157:
+        struct page *page;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1135: FILE: fs/exec.c:1159:
+        if (!bprm->argc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: fs/exec.c:1159:
+        if (!bprm->argc)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1136: FILE: fs/exec.c:1160:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: fs/exec.c:1160:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1138: FILE: fs/exec.c:1162:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: fs/exec.c:1162:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: fs/exec.c:1163:
+                offset = bprm->p & ~PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: fs/exec.c:1163:
+                offset = bprm->p & ~PAGE_MASK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1140: FILE: fs/exec.c:1164:
+                page = get_arg_page(bprm, bprm->p, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: fs/exec.c:1164:
+                page = get_arg_page(bprm, bprm->p, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1141: FILE: fs/exec.c:1165:
+                if (!page) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: fs/exec.c:1165:
+                if (!page) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1142: FILE: fs/exec.c:1166:
+                        ret = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1142: FILE: fs/exec.c:1166:
+                        ret = -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1143: FILE: fs/exec.c:1167:
+                        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: fs/exec.c:1167:
+                        goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1144: FILE: fs/exec.c:1168:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: fs/exec.c:1168:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1145: FILE: fs/exec.c:1169:
+                kaddr = kmap_atomic(page, KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: fs/exec.c:1169:
+                kaddr = kmap_atomic(page, KM_USER0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1147: FILE: fs/exec.c:1171:
+                for (; offset < PAGE_SIZE && kaddr[offset];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1147: FILE: fs/exec.c:1171:
+                for (; offset < PAGE_SIZE && kaddr[offset];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: fs/exec.c:1172:
+                                offset++, bprm->p++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: fs/exec.c:1172:
+                                offset++, bprm->p++)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1149: FILE: fs/exec.c:1173:
+                        ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1149: FILE: fs/exec.c:1173:
+                        ;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1151: FILE: fs/exec.c:1175:
+                kunmap_atomic(kaddr, KM_USER0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: fs/exec.c:1175:
+                kunmap_atomic(kaddr, KM_USER0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1152: FILE: fs/exec.c:1176:
+                put_arg_page(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: fs/exec.c:1176:
+                put_arg_page(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1154: FILE: fs/exec.c:1178:
+                if (offset == PAGE_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: fs/exec.c:1178:
+                if (offset == PAGE_SIZE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1155: FILE: fs/exec.c:1179:
+                        free_arg_page(bprm, (bprm->p >> PAGE_SHIFT) - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: fs/exec.c:1179:
+                        free_arg_page(bprm, (bprm->p >> PAGE_SHIFT) - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1156: FILE: fs/exec.c:1180:
+        } while (offset == PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: fs/exec.c:1180:
+        } while (offset == PAGE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1158: FILE: fs/exec.c:1182:
+        bprm->p++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: fs/exec.c:1182:
+        bprm->p++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1159: FILE: fs/exec.c:1183:
+        bprm->argc--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1159: FILE: fs/exec.c:1183:
+        bprm->argc--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1160: FILE: fs/exec.c:1184:
+        ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: fs/exec.c:1184:
+        ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: fs/exec.c:1187:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: fs/exec.c:1187:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1176: FILE: fs/exec.c:1214:
+^I        loader = bprm->vma->vm_end - sizeof(void *);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1248: FILE: fs/exec.c:1377:
+		mmput (bprm->mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1325: FILE: include/linux/binfmts.h:74:
+extern int __must_check remove_arg_zero(struct linux_binprm *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#1325: FILE: include/linux/binfmts.h:74:
+extern int __must_check remove_arg_zero(struct linux_binprm *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1333: FILE: include/linux/binfmts.h:91:
+extern int bprm_mm_init(struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1353: FILE: include/linux/mm.h:814:
+extern int mprotect_fixup(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1364: FILE: include/linux/mm.h:1136:
+extern int expand_downwards(struct vm_area_struct *vma, unsigned long address);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= addr'
#1428: FILE: mm/mmap.c:1616:
+	if (vma && (vma->vm_start <= addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1432: FILE: mm/mmap.c:1620:
+	if (prev->vm_flags & VM_LOCKED) {
+		make_pages_present(addr, prev->vm_end);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000422402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 39 warnings, 21 checks, 1388 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000422402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
