WARNING:TYPO_SPELLING: 'alltogether' may be misspelled - perhaps 'altogether'?
#32: 
Eventually mlocked pages will be taken off the LRUs alltogether.
                                                    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: mm/memory.c:2357:
+                        lru_cache_add_active_anon(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: mm/memory.c:2357:
+                        lru_cache_add_active_anon(page);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: mm/page_alloc.c:1907:
+	printk("Active_anon:%lu active_file:%lu inactive_anon%lu\n"

WARNING:SPLIT_STRING: quoted string split across lines
#327: FILE: mm/page_alloc.c:1936:
 			" high:%lukB"
+			" active_anon:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: mm/page_alloc.c:1937:
+			" active_anon:%lukB"
+			" inactive_anon:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#329: FILE: mm/page_alloc.c:1938:
+			" inactive_anon:%lukB"
+			" active_file:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#330: FILE: mm/page_alloc.c:1939:
+			" active_file:%lukB"
+			" inactive_file:%lukB"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: mm/swap.c:125:
+				list_move_tail(&page->lru,
+						&zone->list[LRU_INACTIVE_FILE]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: mm/swap.c:128:
+				list_move_tail(&page->lru,
+						&zone->list[LRU_INACTIVE_ANON]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#395: FILE: mm/swap.c:184:
+		int l = LRU_INACTIVE_ANON;
+		l += page_file_cache(page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#508: FILE: mm/swap.c:461:
+EXPORT_SYMBOL(__pagevec_lru_add_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPLIT_STRING: quoted string split across lines
#659: FILE: mm/vmstat.c:753:
 		   "\n        high     %lu"
+		   "\n        scanned  %lu (aa: %lu ia: %lu af: %lu if: %lu)"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: mm/vmscan.c:891:
+			__mod_zone_page_state(zone, NR_INACTIVE_FILE,
+						-(nr_taken - nr_active));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: mm/vmscan.c:895:
+			__mod_zone_page_state(zone, NR_INACTIVE_ANON,
 						-(nr_taken - nr_active));

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#999: FILE: mm/vmscan.c:1026:
+	if (file) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: mm/vmscan.c:1069:
+			__mod_zone_page_state(zone, NR_INACTIVE_ANON + l,
+								pgmoved);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1093: FILE: mm/vmscan.c:1099:
+			__mod_zone_page_state(zone, NR_INACTIVE_ANON + l,
+								pgmoved);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1103: FILE: mm/vmscan.c:1109:
+	if (file) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1137: FILE: mm/vmscan.c:1146:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1138: FILE: mm/vmscan.c:1147:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,
+					unsigned long *percent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1190: FILE: mm/vmscan.c:1199:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1211: FILE: mm/vmscan.c:1220:
+		int file = is_file_lru(l);
+		zone->nr_scan[l] += (zone_page_state(zone, NR_INACTIVE_ANON + l)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1223: FILE: mm/vmscan.c:1230:
+	while (nr[LRU_ACTIVE_ANON] || nr[LRU_INACTIVE_ANON] ||
+			nr[LRU_ACTIVE_FILE] || nr[LRU_INACTIVE_FILE]) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1281: FILE: mm/vmscan.c:1744:
+			if (pass == 0 &&
+				(l == LRU_ACTIVE_ANON || l == LRU_ACTIVE_FILE))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1400: FILE: include/linux/mmzone.h:122:
+	return (l/2 == 1);
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1564: FILE: include/linux/vmstat.h:152:
+extern unsigned long global_lru_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1613: FILE: include/linux/swap.h:177:
+extern void FASTCALL(lru_cache_add_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1613: FILE: include/linux/swap.h:177:
+extern void FASTCALL(lru_cache_add_file(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1614: FILE: include/linux/swap.h:178:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1614: FILE: include/linux/swap.h:178:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1615: FILE: include/linux/swap.h:179:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1615: FILE: include/linux/swap.h:179:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1616: FILE: include/linux/swap.h:180:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1616: FILE: include/linux/swap.h:180:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 17 warnings, 16 checks, 1444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
