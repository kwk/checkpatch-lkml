WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
Latest BIOS ACPI PNP device resource descriptions may have (especially on the

WARNING:TYPO_SPELLING: 'modifyable' may be misspelled - perhaps 'modifiable'?
#77: 
should have been unregistered should be modifyable) it is potential
                                        ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#187: FILE: drivers/pnp/interface.c:387:
+					pnp_err("Cannot manually set port"
+						"resource %d for device %s",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#187: FILE: drivers/pnp/interface.c:387:
+					pnp_err("Cannot manually set port"
+						"resource %d for device %s",

WARNING:SPLIT_STRING: quoted string split across lines
#209: FILE: drivers/pnp/interface.c:416:
+					pnp_err("Cannot manually set mem "
+						"resource %d for device %s",

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: drivers/pnp/interface.c:445:
+					pnp_err("Cannot manually set irq "
+						"resource %d for device %s",

WARNING:SPLIT_STRING: quoted string split across lines
#252: FILE: drivers/pnp/interface.c:464:
+					pnp_err("Cannot manually set dma "
+						"resource %d for device %s",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#310: FILE: drivers/pnp/isapnp/core.c:963:
+				pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#325: FILE: drivers/pnp/isapnp/core.c:975:
+				pnp_err("Bug in %s", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#339: FILE: drivers/pnp/isapnp/core.c:985:
+			new_res.start = new_res.end = ret;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#342: FILE: drivers/pnp/isapnp/core.c:988:
+				pnp_err("Bug in %s", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#355: FILE: drivers/pnp/isapnp/core.c:998:
+			new_res.start = new_res.end = ret;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#358: FILE: drivers/pnp/isapnp/core.c:1001:
+				pnp_err("Bug in %s", __FUNCTION__);

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#406: FILE: drivers/pnp/manager.c:17:
+/* Defines the amount of struct resources that will get (re-)alloced
                                                              ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: drivers/pnp/manager.c:31:
+	int i;
+	pnp_dbg("Resource table dump:");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Allocted' may be misspelled - perhaps 'Allocated'?
#429: FILE: drivers/pnp/manager.c:32:
+	pnp_dbg("Allocted: ports: %d [%p - %p]",
 	         ^^^^^^^^

WARNING:TYPO_SPELLING: 'Allocted' may be misspelled - perhaps 'Allocated'?
#439: FILE: drivers/pnp/manager.c:42:
+	pnp_dbg("Allocted: mems: %d [%p - %p]",
 	         ^^^^^^^^

WARNING:TYPO_SPELLING: 'Allocted' may be misspelled - perhaps 'Allocated'?
#449: FILE: drivers/pnp/manager.c:52:
+	pnp_dbg("Allocted: irqs: %d [%p - %p]",
 	         ^^^^^^^^

WARNING:TYPO_SPELLING: 'Allocted' may be misspelled - perhaps 'Allocated'?
#458: FILE: drivers/pnp/manager.c:61:
+	pnp_dbg("Allocted: dmas: %d [%p - %p]",
 	         ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#477: FILE: drivers/pnp/manager.c:80:
+}
+static void pnp_init_mem(struct resource *res)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#484: FILE: drivers/pnp/manager.c:87:
+}
+static void pnp_init_irq(struct resource *res)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#491: FILE: drivers/pnp/manager.c:94:
+}
+static void pnp_init_dma(struct resource *res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: drivers/pnp/manager.c:121:
+	ret = krealloc(res->port_resource,
+	       (sizeof(struct resource) * res->allocated_ports)

WARNING:SPLIT_STRING: quoted string split across lines
#532: FILE: drivers/pnp/manager.c:135:
+	pnp_dbg("Port allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated ports: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#532: FILE: drivers/pnp/manager.c:135:
+	pnp_dbg("Port allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated ports: %d",

CHECK:SPACING: No space is necessary after a cast
#539: FILE: drivers/pnp/manager.c:142:
+		(unsigned long) sizeof(struct resource),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: drivers/pnp/manager.c:154:
+	ret = krealloc(res->mem_resource,
+	       (sizeof(struct resource) * res->allocated_mems)

WARNING:SPLIT_STRING: quoted string split across lines
#566: FILE: drivers/pnp/manager.c:169:
+	pnp_dbg("Mem allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated mems: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#566: FILE: drivers/pnp/manager.c:169:
+	pnp_dbg("Mem allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated mems: %d",

CHECK:SPACING: No space is necessary after a cast
#573: FILE: drivers/pnp/manager.c:176:
+		(unsigned long) sizeof(struct resource),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: drivers/pnp/manager.c:188:
+	ret = krealloc(res->irq_resource,
+	       (sizeof(struct resource) * res->allocated_irqs)

WARNING:SPLIT_STRING: quoted string split across lines
#599: FILE: drivers/pnp/manager.c:202:
+	pnp_dbg("Irq allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated irqs: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#599: FILE: drivers/pnp/manager.c:202:
+	pnp_dbg("Irq allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated irqs: %d",

CHECK:SPACING: No space is necessary after a cast
#606: FILE: drivers/pnp/manager.c:209:
+		(unsigned long) sizeof(struct resource),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: drivers/pnp/manager.c:220:
+	ret = krealloc(res->dma_resource,
+	       (sizeof(struct resource) * res->allocated_dmas)

WARNING:SPLIT_STRING: quoted string split across lines
#631: FILE: drivers/pnp/manager.c:234:
+	pnp_dbg("Dma allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated dmas: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#631: FILE: drivers/pnp/manager.c:234:
+	pnp_dbg("Dma allocate: %p - %p; Allocated: %lu bytes, size of"
+		"struct: %lu - allocated dmas: %d",

CHECK:SPACING: No space is necessary after a cast
#638: FILE: drivers/pnp/manager.c:241:
+		(unsigned long) sizeof(struct resource),

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#646: FILE: drivers/pnp/manager.c:249:
+		" - alloc: %d", type, val, __FUNCTION__, x)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#648: FILE: drivers/pnp/manager.c:251:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#661: FILE: drivers/pnp/manager.c:264:
+	if (res->flags & IORESOURCE_IO) {
[...]
+	} else 	if (res->flags & IORESOURCE_MEM) {
[...]
+	} else if (res->flags & IORESOURCE_IRQ) {
[...]
+	} else	if (res->flags & IORESOURCE_DMA) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#679: FILE: drivers/pnp/manager.c:282:
+^I} else ^Iif (res->flags & IORESOURCE_MEM) {$

CHECK:BRACES: Unbalanced braces around else statement
#727: FILE: drivers/pnp/manager.c:330:
+	} else

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#733: FILE: drivers/pnp/manager.c:336:
+#define pnp_print_assign_err(type, val)					\
+	pnp_dbg("%s resource %d not allocated, cannot assign value",	\
+		type, val);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#737: FILE: drivers/pnp/manager.c:340:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#753: FILE: drivers/pnp/manager.c:352:
+		/* This resource index already got some values assigned,
+		   take them as init */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#753: FILE: drivers/pnp/manager.c:352:
+		   take them as init */

CHECK:BRACES: Unbalanced braces around else statement
#757: FILE: drivers/pnp/manager.c:356:
+	} else

WARNING:TYPO_SPELLING: 'carefuly' may be misspelled - perhaps 'carefully'?
#759: FILE: drivers/pnp/manager.c:358:
+		   resource and be carefuly to never access
 		                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#759: FILE: drivers/pnp/manager.c:358:
+		/* This index in the table does not exist, initialize the new
+		   resource and be carefuly to never access

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#760: FILE: drivers/pnp/manager.c:359:
+		   dev->res.port_resource[idx] */

CHECK:BRACES: braces {} should be used on all arms of this statement
#816: FILE: drivers/pnp/manager.c:394:
+	if (pnp_mem_valid(dev, idx)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#820: FILE: drivers/pnp/manager.c:398:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#896: FILE: drivers/pnp/manager.c:449:
+	if (pnp_irq_valid(dev, idx)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#900: FILE: drivers/pnp/manager.c:453:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#929: FILE: drivers/pnp/manager.c:475:
+			res.start = res.end = xtab[i];

CHECK:BRACES: braces {} should be used on all arms of this statement
#963: FILE: drivers/pnp/manager.c:497:
+	if (pnp_dma_valid(dev, idx)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#967: FILE: drivers/pnp/manager.c:501:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#980: FILE: drivers/pnp/manager.c:510:
+			res.start = res.end = xtab[i];

ERROR:SPACING: space required before the open brace '{'
#981: FILE: drivers/pnp/manager.c:511:
+			if (pnp_check_dma(dev, idx)){

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#989: FILE: drivers/pnp/manager.c:518:
+	res.start = res.end = MAX_DMA_CHANNELS;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1105: FILE: drivers/pnp/manager.c:712:
+	/* We must never end up here, these functions are poisson for dynamic
+	   allocation via pointer array.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1107: FILE: drivers/pnp/manager.c:714:
+	BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1169: FILE: drivers/pnp/pnpacpi/rsparser.c:107:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1169: FILE: drivers/pnp/pnpacpi/rsparser.c:107:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1172: FILE: drivers/pnp/pnpacpi/rsparser.c:110:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1187: FILE: drivers/pnp/pnpacpi/rsparser.c:122:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1223: FILE: drivers/pnp/pnpacpi/rsparser.c:179:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1223: FILE: drivers/pnp/pnpacpi/rsparser.c:179:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1226: FILE: drivers/pnp/pnpacpi/rsparser.c:182:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1232: FILE: drivers/pnp/pnpacpi/rsparser.c:188:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1267: FILE: drivers/pnp/pnpacpi/rsparser.c:202:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1267: FILE: drivers/pnp/pnpacpi/rsparser.c:202:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1270: FILE: drivers/pnp/pnpacpi/rsparser.c:205:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1276: FILE: drivers/pnp/pnpacpi/rsparser.c:211:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1311: FILE: drivers/pnp/pnpacpi/rsparser.c:224:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1311: FILE: drivers/pnp/pnpacpi/rsparser.c:224:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1314: FILE: drivers/pnp/pnpacpi/rsparser.c:227:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1323: FILE: drivers/pnp/pnpacpi/rsparser.c:236:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1355: FILE: drivers/pnp/pnpbios/rsparser.c:65:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1355: FILE: drivers/pnp/pnpbios/rsparser.c:65:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1358: FILE: drivers/pnp/pnpbios/rsparser.c:68:
+			pnp_err("Bug in %s", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1361: FILE: drivers/pnp/pnpbios/rsparser.c:71:
+	new_res.start = new_res.end = (unsigned long)irq;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1364: FILE: drivers/pnp/pnpbios/rsparser.c:74:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1389: FILE: drivers/pnp/pnpbios/rsparser.c:86:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1389: FILE: drivers/pnp/pnpbios/rsparser.c:86:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1392: FILE: drivers/pnp/pnpbios/rsparser.c:89:
+			pnp_err("Bug in %s", __FUNCTION__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1395: FILE: drivers/pnp/pnpbios/rsparser.c:92:
+	new_res.start = new_res.end = (unsigned long)dma;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1397: FILE: drivers/pnp/pnpbios/rsparser.c:94:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1422: FILE: drivers/pnp/pnpbios/rsparser.c:106:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1422: FILE: drivers/pnp/pnpbios/rsparser.c:106:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1425: FILE: drivers/pnp/pnpbios/rsparser.c:109:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1431: FILE: drivers/pnp/pnpbios/rsparser.c:115:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1456: FILE: drivers/pnp/pnpbios/rsparser.c:127:
+		/* <trenn> Check: Do we need to allocate and assign
+		   this resource at all? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1456: FILE: drivers/pnp/pnpbios/rsparser.c:127:
+		   this resource at all? */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1459: FILE: drivers/pnp/pnpbios/rsparser.c:130:
+			pnp_err("Bug in %s", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1465: FILE: drivers/pnp/pnpbios/rsparser.c:136:
+		pnp_err("Bug in %s", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1555: FILE: drivers/pnp/support.c:19:
+/* <trenn> This interface is only used by pnpbios and one driver:
+   sound/isa/sscape.c

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1625: FILE: include/linux/pnp.h:34:
+#define pnp_port_start(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].start \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1625: FILE: include/linux/pnp.h:34:
+#define pnp_port_start(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].start \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1625: FILE: include/linux/pnp.h:34:
+#define pnp_port_start(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].start \
                                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1625: FILE: include/linux/pnp.h:34:
+#define pnp_port_start(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].start \
+				   : pnp_dbg("WARN: Port start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1625: FILE: include/linux/pnp.h:34:
+#define pnp_port_start(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].start \
+				   : pnp_dbg("WARN: Port start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1626: FILE: include/linux/pnp.h:35:
+				   : pnp_dbg("WARN: Port start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1626: FILE: include/linux/pnp.h:35:
+				   : pnp_dbg("WARN: Port start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1627: FILE: include/linux/pnp.h:36:
+#define pnp_port_end(dev,bar)     (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].end \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1627: FILE: include/linux/pnp.h:36:
+#define pnp_port_end(dev,bar)     (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].end \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1627: FILE: include/linux/pnp.h:36:
+#define pnp_port_end(dev,bar)     (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].end \
                                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1627: FILE: include/linux/pnp.h:36:
+#define pnp_port_end(dev,bar)     (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].end \
+				   : pnp_dbg("WARN: Port end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1627: FILE: include/linux/pnp.h:36:
+#define pnp_port_end(dev,bar)     (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].end \
+				   : pnp_dbg("WARN: Port end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1628: FILE: include/linux/pnp.h:37:
+				   : pnp_dbg("WARN: Port end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1628: FILE: include/linux/pnp.h:37:
+				   : pnp_dbg("WARN: Port end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1629: FILE: include/linux/pnp.h:38:
+#define pnp_port_flags(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].flags \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1629: FILE: include/linux/pnp.h:38:
+#define pnp_port_flags(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].flags \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1629: FILE: include/linux/pnp.h:38:
+#define pnp_port_flags(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].flags \
                                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1629: FILE: include/linux/pnp.h:38:
+#define pnp_port_flags(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].flags \
+				    : pnp_dbg("WARN: Port flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1629: FILE: include/linux/pnp.h:38:
+#define pnp_port_flags(dev,bar)   (pnp_port_valid((dev),(bar)) ? (dev)->res.port_resource[(bar)].flags \
+				    : pnp_dbg("WARN: Port flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1630: FILE: include/linux/pnp.h:39:
+				    : pnp_dbg("WARN: Port flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1630: FILE: include/linux/pnp.h:39:
+				    : pnp_dbg("WARN: Port flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1631: FILE: include/linux/pnp.h:40:
+#define pnp_port_valid(dev,bar)	     \
                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1631: FILE: include/linux/pnp.h:40:
+#define pnp_port_valid(dev,bar)	     \
+	(((dev)->res.allocated_ports > (bar)) &&			\
+	 (((dev)->res.port_resource[(bar)].flags) & (IORESOURCE_IO | IORESOURCE_UNSET)) \
 		== IORESOURCE_IO)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1631: FILE: include/linux/pnp.h:40:
+#define pnp_port_valid(dev,bar)	     \
+	(((dev)->res.allocated_ports > (bar)) &&			\
+	 (((dev)->res.port_resource[(bar)].flags) & (IORESOURCE_IO | IORESOURCE_UNSET)) \
 		== IORESOURCE_IO)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1644: FILE: include/linux/pnp.h:52:
+#define pnp_mem_start(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].start \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1644: FILE: include/linux/pnp.h:52:
+#define pnp_mem_start(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].start \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1644: FILE: include/linux/pnp.h:52:
+#define pnp_mem_start(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].start \
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1644: FILE: include/linux/pnp.h:52:
+#define pnp_mem_start(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].start \
+				   : pnp_dbg("Mem start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1644: FILE: include/linux/pnp.h:52:
+#define pnp_mem_start(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].start \
+				   : pnp_dbg("Mem start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1645: FILE: include/linux/pnp.h:53:
+				   : pnp_dbg("Mem start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1645: FILE: include/linux/pnp.h:53:
+				   : pnp_dbg("Mem start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1646: FILE: include/linux/pnp.h:54:
+#define pnp_mem_end(dev,bar)     (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].end \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1646: FILE: include/linux/pnp.h:54:
+#define pnp_mem_end(dev,bar)     (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].end \
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1646: FILE: include/linux/pnp.h:54:
+#define pnp_mem_end(dev,bar)     (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].end \
+				   : pnp_dbg("Mem end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1646: FILE: include/linux/pnp.h:54:
+#define pnp_mem_end(dev,bar)     (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].end \
+				   : pnp_dbg("Mem end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1647: FILE: include/linux/pnp.h:55:
+				   : pnp_dbg("Mem end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1647: FILE: include/linux/pnp.h:55:
+				   : pnp_dbg("Mem end %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1648: FILE: include/linux/pnp.h:56:
+#define pnp_mem_flags(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].flags \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1648: FILE: include/linux/pnp.h:56:
+#define pnp_mem_flags(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].flags \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1648: FILE: include/linux/pnp.h:56:
+#define pnp_mem_flags(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].flags \
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1648: FILE: include/linux/pnp.h:56:
+#define pnp_mem_flags(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].flags \
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1648: FILE: include/linux/pnp.h:56:
+#define pnp_mem_flags(dev,bar)   (pnp_mem_valid((dev),(bar)) ? (dev)->res.mem_resource[(bar)].flags \
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1649: FILE: include/linux/pnp.h:57:
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1649: FILE: include/linux/pnp.h:57:
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1663: FILE: include/linux/pnp.h:70:
+#define pnp_irq(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].start \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1663: FILE: include/linux/pnp.h:70:
+#define pnp_irq(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].start \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1663: FILE: include/linux/pnp.h:70:
+#define pnp_irq(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].start \
                         	                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1663: FILE: include/linux/pnp.h:70:
+#define pnp_irq(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].start \
+				   : pnp_dbg("Irq start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1663: FILE: include/linux/pnp.h:70:
+#define pnp_irq(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].start \
+				   : pnp_dbg("Irq start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1664: FILE: include/linux/pnp.h:71:
+				   : pnp_dbg("Irq start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1664: FILE: include/linux/pnp.h:71:
+				   : pnp_dbg("Irq start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1665: FILE: include/linux/pnp.h:72:
+#define pnp_irq_flags(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].flags \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1665: FILE: include/linux/pnp.h:72:
+#define pnp_irq_flags(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].flags \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1665: FILE: include/linux/pnp.h:72:
+#define pnp_irq_flags(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].flags \
                               	                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1665: FILE: include/linux/pnp.h:72:
+#define pnp_irq_flags(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].flags \
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1665: FILE: include/linux/pnp.h:72:
+#define pnp_irq_flags(dev,bar)	 (pnp_irq_valid((dev),(bar)) ? (dev)->res.irq_resource[(bar)].flags \
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1666: FILE: include/linux/pnp.h:73:
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1666: FILE: include/linux/pnp.h:73:
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1675: FILE: include/linux/pnp.h:79:
+#define pnp_dma(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].start \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1675: FILE: include/linux/pnp.h:79:
+#define pnp_dma(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].start \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1675: FILE: include/linux/pnp.h:79:
+#define pnp_dma(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].start \
                         	                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1675: FILE: include/linux/pnp.h:79:
+#define pnp_dma(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].start \
+				   : pnp_dbg("Dma start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1675: FILE: include/linux/pnp.h:79:
+#define pnp_dma(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].start \
+				   : pnp_dbg("Dma start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1676: FILE: include/linux/pnp.h:80:
+				   : pnp_dbg("Dma start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1676: FILE: include/linux/pnp.h:80:
+				   : pnp_dbg("Dma start %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1677: FILE: include/linux/pnp.h:81:
+#define pnp_dma_flags(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].flags \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1677: FILE: include/linux/pnp.h:81:
+#define pnp_dma_flags(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].flags \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1677: FILE: include/linux/pnp.h:81:
+#define pnp_dma_flags(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].flags \
                               	                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1677: FILE: include/linux/pnp.h:81:
+#define pnp_dma_flags(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].flags \
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1677: FILE: include/linux/pnp.h:81:
+#define pnp_dma_flags(dev,bar)	 (pnp_dma_valid((dev),(bar)) ? (dev)->res.dma_resource[(bar)].flags \
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1678: FILE: include/linux/pnp.h:82:
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1678: FILE: include/linux/pnp.h:82:
+				    : pnp_dbg("Mem flags %d - [%s] invalid - %s:%d", (bar), (dev->name), __FUNCTION__, __LINE__))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1735: FILE: include/linux/pnp.h:489:
+#define pnp_dbg(format, arg...) printk(KERN_INFO "pnp: " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1735: FILE: include/linux/pnp.h:489:
+#define pnp_dbg(format, arg...) printk(KERN_INFO "pnp: " format "\n" , ## arg)
                                                                      ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 98 warnings, 51 checks, 1535 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
