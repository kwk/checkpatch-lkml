WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#108: FILE: include/linux/rcuclassic.h:156:
+#define call_rcu_sched(head, func) call_rcu(head, func)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/rcupdate.h:193:
+extern void wakeme_after_rcu(struct rcu_head  *head);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/rcupreempt.h:75:
+extern void call_rcu_sched(struct rcu_head *head,

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#192: FILE: include/linux/rcupreempt.h:75:
+extern void call_rcu_sched(struct rcu_head *head,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/rcupreempt.h:89:
+extern void rcu_init_sched(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: include/linux/rcupreempt_trace.h:73:
+#define RCU_TRACE(fn, arg) ^I^I^Ifn(arg)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: include/linux/rcupreempt_trace.h:74:
+#define RCU_TRACE_1ARG(fn, arg, arg1) ^I^Ifn(arg, arg1)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: include/linux/rcupreempt_trace.h:100:
+extern void rcusched_trace_grace_wait(struct rcupreempt_trace *trace, int cpu);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#390: FILE: kernel/rcupreempt.c:220:
+#define RCU_TRACE_1ARG_CPU(f, cpu, a) RCU_TRACE_1ARG(f, &(RCU_DATA_CPU(cpu)->trace), a);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr == snap'
#592: FILE: kernel/rcupreempt.c:671:
+	if ((curr == snap) && ((curr & 0x1) == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: kernel/rcupreempt.c:944:
+^I     ^Ircu_qsctr_inc(cpu);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#673: FILE: kernel/rcupreempt.c:944:
+^I     ^Ircu_qsctr_inc(cpu);$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#717: FILE: kernel/rcupreempt.c:1063:
 void __devinit rcu_online_cpu(int cpu)

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#752: FILE: kernel/rcupreempt.c:1143:
+void call_rcu_sched(struct rcu_head *head, void (*func)(struct rcu_head *rcu))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#766: FILE: kernel/rcupreempt.c:1157:
+	if (rdp->rcu_sched_sleeping) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#774: FILE: kernel/rcupreempt.c:1165:
+	if (wake_gp) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitschedlist"
#898: FILE: kernel/rcupreempt.c:1280:
+			if (rdp->waitschedlist != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextschedlist"
#907: FILE: kernel/rcupreempt.c:1289:
+			if (rdp->nextschedlist != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#935: FILE: kernel/rcupreempt.c:1317:
+		if (rcu_ctrlblk.sched_sleep != rcu_sched_sleep_prep) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: kernel/rcupreempt.c:1333:
+		__wait_event_interruptible(rcu_ctrlblk.sched_wq,
+			rcu_ctrlblk.sched_sleep != rcu_sched_sleeping,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#964: FILE: kernel/rcupreempt.c:1346:
+	return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#975: FILE: kernel/rcupreempt.c:1364:
+		rdp->nextlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextschedlist"
#976: FILE: kernel/rcupreempt.c:1365:
+		rdp->nextschedlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitschedlist"
#977: FILE: kernel/rcupreempt.c:1366:
+		rdp->waitschedlist != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#986: FILE: kernel/rcupreempt.c:1377:
+	    rdp->nextlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextschedlist"
#987: FILE: kernel/rcupreempt.c:1378:
+	    rdp->nextschedlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitschedlist"
#988: FILE: kernel/rcupreempt.c:1379:
+	    rdp->waitschedlist != NULL)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1030: FILE: kernel/rcupreempt_trace.c:137:
 }
+void rcusched_trace_grace_wait(struct rcupreempt_trace *trace, int cpu)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1041: FILE: kernel/rcupreempt_trace.c:269:
+static ssize_t rcuschedstat_read(struct file *filp, char __user *buffer,
                                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: kernel/rcupreempt_trace.c:296:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1081: FILE: kernel/rcupreempt_trace.c:316:
+static struct file_operations rcuschedstat_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: kernel/rcupreempt_trace.c:342:
+	schedstatdir = debugfs_create_file("schedstat", 0444, rcudir,
+						NULL, &rcuschedstat_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1106: FILE: kernel/rcupreempt_trace.c:352:
+	if (ctrsdir)
+		debugfs_remove(ctrsdir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000292422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 20 checks, 968 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000292422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
