WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: security/tomoyo/internal.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#37: FILE: security/tomoyo/internal.h:2:
+ * security/tomoyo/internal.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#287: FILE: security/tomoyo/internal.h:252:
+	TOMOYO_TASK_TYPE,            /* ((u8) task->tomoyo_flags) &
+					TOMOYO_TASK_IS_EXECUTE_HANDLER */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#287: FILE: security/tomoyo/internal.h:252:
+					TOMOYO_TASK_IS_EXECUTE_HANDLER */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#392: FILE: security/tomoyo/internal.h:357:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }),			\
+		     pos = rcu_dereference((cookie)->next);		\
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#392: FILE: security/tomoyo/internal.h:357:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }),			\
+		     pos = rcu_dereference((cookie)->next);		\
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cookie' may be better as '(cookie)' to avoid precedence issues
#392: FILE: security/tomoyo/internal.h:357:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }),			\
+		     pos = rcu_dereference((cookie)->next);		\
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#392: FILE: security/tomoyo/internal.h:357:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }),			\
+		     pos = rcu_dereference((cookie)->next);		\
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#393: FILE: security/tomoyo/internal.h:358:
+	for (({ if (!cookie)						\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: security/tomoyo/internal.h:427:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'enrty' may be misspelled - perhaps 'entry'?
#600: FILE: security/tomoyo/internal.h:565:
+ *  (2) "type" which tells type of the enrty.
                                        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#613: FILE: security/tomoyo/internal.h:578:
+} __attribute__((__packed__));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#959: FILE: security/tomoyo/internal.h:924:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#984: FILE: security/tomoyo/internal.h:949:
+	void (*read) (struct tomoyo_io_buffer *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tomoyo_io_buffer *' should also have an identifier name
#984: FILE: security/tomoyo/internal.h:949:
+	void (*read) (struct tomoyo_io_buffer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#985: FILE: security/tomoyo/internal.h:950:
+	int (*write) (struct tomoyo_io_buffer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tomoyo_io_buffer *' should also have an identifier name
#985: FILE: security/tomoyo/internal.h:950:
+	int (*write) (struct tomoyo_io_buffer *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#986: FILE: security/tomoyo/internal.h:951:
+	int (*poll) (struct file *file, poll_table *wait);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: security/tomoyo/internal.h:1043:
+     __attribute__ ((format(printf, 2, 3)));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1078: FILE: security/tomoyo/internal.h:1043:
+     __attribute__ ((format(printf, 2, 3)));

CHECK:SPACING: No space is necessary after a cast
#1140: FILE: security/tomoyo/internal.h:1105:
+int tomoyo_read_lock(void) __acquires(tomoyo_ss);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1140: FILE: security/tomoyo/internal.h:1105:
+int tomoyo_read_lock(void) __acquires(tomoyo_ss);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1142: FILE: security/tomoyo/internal.h:1107:
+     __attribute__ ((format(printf, 2, 3)));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1142: FILE: security/tomoyo/internal.h:1107:
+     __attribute__ ((format(printf, 2, 3)));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1149: FILE: security/tomoyo/internal.h:1114:
+     __attribute__ ((format(printf, 3, 4)));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#1149: FILE: security/tomoyo/internal.h:1114:
+     __attribute__ ((format(printf, 3, 4)));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: security/tomoyo/internal.h:1177:
+     __attribute__ ((format(printf, 2, 3)));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1212: FILE: security/tomoyo/internal.h:1177:
+     __attribute__ ((format(printf, 2, 3)));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1225: FILE: security/tomoyo/internal.h:1190:
+int tomoyo_rewrite_permission(struct file *filp);
                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1226: FILE: security/tomoyo/internal.h:1191:
+int tomoyo_ioctl_permission(struct file *filp, unsigned int cmd,
                                          ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <_Bool>
#1228: FILE: security/tomoyo/internal.h:1193:
+_Bool tomoyo_capable(const u8 operation);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#1270: FILE: security/tomoyo/internal.h:1235:
+	return memcmp(((char *) a) + offset, ((char *) b) + offset,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1306: FILE: security/tomoyo/internal.h:1271:
+	struct task_struct *task = current;
+	if (!task->tomoyo_domain_info)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1341: FILE: security/tomoyo/internal.h:1306:
+#define HIPQUAD(addr)				\
+	((unsigned char *)&addr)[3],		\
+		((unsigned char *)&addr)[2],	\
+		((unsigned char *)&addr)[1],	\
+		((unsigned char *)&addr)[0]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1341: FILE: security/tomoyo/internal.h:1306:
+#define HIPQUAD(addr)				\
+	((unsigned char *)&addr)[3],		\
+		((unsigned char *)&addr)[2],	\
+		((unsigned char *)&addr)[1],	\
+		((unsigned char *)&addr)[0]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#1341: FILE: security/tomoyo/internal.h:1306:
+#define HIPQUAD(addr)				\
+	((unsigned char *)&addr)[3],		\
+		((unsigned char *)&addr)[2],	\
+		((unsigned char *)&addr)[1],	\
+		((unsigned char *)&addr)[0]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064267.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 23 warnings, 11 checks, 1317 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064267.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
