WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/aufs/branch.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#56: FILE: fs/aufs/branch.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/branch.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#63: FILE: fs/aufs/branch.h:22:
+ * $Id: branch.h,v 1.3 2008/04/28 03:03:32 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: fs/aufs/branch.h:60:
+^Iatomic_t ^I^Ixi_running;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: fs/aufs/branch.h:77:
+^Iatomic_t ^I^Ibr_wh_running;$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#123: FILE: fs/aufs/branch.h:82:
+#if 1

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RW>
#145: FILE: fs/aufs/branch.h:104:
+	AuBr_RW,		/* writable, linkable wh */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RO>
#146: FILE: fs/aufs/branch.h:105:
+	AuBr_RO,		/* readonly, no wh */

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RR>
#147: FILE: fs/aufs/branch.h:106:
+	AuBr_RR,		/* natively readonly, no wh */

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RWNoLinkWH>
#149: FILE: fs/aufs/branch.h:108:
+	AuBr_RWNoLinkWH,	/* un-linkable whiteouts */

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_ROWH>
#151: FILE: fs/aufs/branch.h:110:
+	AuBr_ROWH,

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_RRWH>
#152: FILE: fs/aufs/branch.h:111:
+	AuBr_RRWH,		/* whiteout-able */

CHECK:CAMELCASE: Avoid CamelCase: <AuBr_Last>
#154: FILE: fs/aufs/branch.h:113:
+	AuBr_Last

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#165: FILE: fs/aufs/branch.h:124:
+	return (brperm == AuBr_RW
+		|| brperm == AuBr_ROWH

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#166: FILE: fs/aufs/branch.h:125:
+		|| brperm == AuBr_ROWH
+		|| brperm == AuBr_RRWH);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#169: FILE: fs/aufs/branch.h:128:
+#if 0 // rfu

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#250: FILE: fs/aufs/branch.h:209:
+	return ((br->br_mnt->mnt_sb->s_flags & MS_RDONLY)
+		|| !au_br_writable(br->br_perm))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#275: FILE: fs/aufs/branch.h:234:
+#if 0 // rfu

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#310: FILE: fs/aufs/branch.h:269:
+#if defined(CONFIG_CRAMFS) || defined(CONFIG_CRAMFS_MODULE)

CHECK:CAMELCASE: Avoid CamelCase: <AuNoNfsBranchMsg>
#337: FILE: fs/aufs/branch.h:296:
+#define AuNoNfsBranchMsg "dummy"

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#367: FILE: fs/aufs/branch.h:326:
+AuSimpleRwsemFuncs(br_wh, struct au_branch *br, br->br_wh_rwsem);

CHECK:CAMELCASE: Avoid CamelCase: <BrWhMustReadLock>
#370: FILE: fs/aufs/branch.h:329:
+#define BrWhMustReadLock(br) do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#370: FILE: fs/aufs/branch.h:329:
+#define BrWhMustReadLock(br) do { \
+	/* SiMustAnyLock(sb); */ \
+	AuRwMustReadLock(&(br)->br_wh_rwsem); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustReadLock>
#372: FILE: fs/aufs/branch.h:331:
+	AuRwMustReadLock(&(br)->br_wh_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <BrWhMustWriteLock>
#375: FILE: fs/aufs/branch.h:334:
+#define BrWhMustWriteLock(br) do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#375: FILE: fs/aufs/branch.h:334:
+#define BrWhMustWriteLock(br) do { \
+	/* SiMustAnyLock(sb); */ \
+	AuRwMustWriteLock(&(br)->br_wh_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustWriteLock>
#377: FILE: fs/aufs/branch.h:336:
+	AuRwMustWriteLock(&(br)->br_wh_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <BrWhMustAnyLock>
#380: FILE: fs/aufs/branch.h:339:
+#define BrWhMustAnyLock(br) do { \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#380: FILE: fs/aufs/branch.h:339:
+#define BrWhMustAnyLock(br) do { \
+	/* SiMustAnyLock(sb); */ \
+	AuRwMustAnyLock(&(br)->br_wh_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustAnyLock>
#382: FILE: fs/aufs/branch.h:341:
+	AuRwMustAnyLock(&(br)->br_wh_rwsem); \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 12 warnings, 18 checks, 345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
