WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/pramfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: fs/pramfs/inode.c:2:
+ * FILE NAME fs/pramfs/inode.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:CAMELCASE: Avoid CamelCase: <Nbits>
#116: FILE: fs/pramfs/inode.c:70:
+	int Nbits = sb->s_blocksize_bits - 2;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#121: FILE: fs/pramfs/inode.c:75:
+	i_col  = file_blocknr & (N-1);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: fs/pramfs/inode.c:87:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#166: FILE: fs/pramfs/inode.c:120:
+			first_blocknr & (N-1) : 0;
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#168: FILE: fs/pramfs/inode.c:122:
+			last_blocknr & (N-1) : N-1;
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#168: FILE: fs/pramfs/inode.c:122:
+			last_blocknr & (N-1) : N-1;
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#264: FILE: fs/pramfs/inode.c:218:
+			first_file_blocknr & (N-1) : 0;
 			                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#267: FILE: fs/pramfs/inode.c:221:
+			last_file_blocknr & (N-1) : N-1;
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#267: FILE: fs/pramfs/inode.c:221:
+			last_file_blocknr & (N-1) : N-1;
 			                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/pramfs/inode.c:228:
+				errval = pram_new_data_block(inode,
+							      &blocknr,

WARNING:SPLIT_STRING: quoted string split across lines
#278: FILE: fs/pramfs/inode.c:232:
+					pram_err("failed to alloc "
+						  "data block\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#298: FILE: fs/pramfs/inode.c:252:
+	if (pram_calc_checksum((u32 *)pi, PRAM_INODE_SIZE>>2)) {
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/pramfs/inode.c:254:
+		pram_err("checksum error in inode %08x\n",
+			  (u32)inode->i_ino);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#312: FILE: fs/pramfs/inode.c:266:
+	inode->i_atime.tv_nsec = inode->i_mtime.tv_nsec =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#405: FILE: fs/pramfs/inode.c:359:
+		/* Quota is already initialized in iput() */
 		                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#437: FILE: fs/pramfs/inode.c:391:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: fs/pramfs/inode.c:394:
+pram_fill_new_inode(struct super_block *sb,
+		     struct pram_inode *pi)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: fs/pramfs/inode.c:404:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#452: FILE: fs/pramfs/inode.c:406:
+ * Called at the last iput() if i_nlink is zero.
                       ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: fs/pramfs/inode.c:429:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#518: FILE: fs/pramfs/inode.c:472:
+		ps->s_free_inode_hint = (i < ps->s_inodes_count-1) ? i+1 : 0;
 		                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#518: FILE: fs/pramfs/inode.c:472:
+		ps->s_free_inode_hint = (i < ps->s_inodes_count-1) ? i+1 : 0;
 		                                                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#531: FILE: fs/pramfs/inode.c:485:
+	if (dir->i_mode & S_ISGID) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#535: FILE: fs/pramfs/inode.c:489:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#539: FILE: fs/pramfs/inode.c:493:
+	inode->i_blocks = inode->i_size = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#540: FILE: fs/pramfs/inode.c:494:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#556: FILE: fs/pramfs/inode.c:510:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#564: FILE: fs/pramfs/inode.c:518:
+	iput(inode);
 	^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#581: FILE: fs/pramfs/inode.c:535:
+	blocknr = (inode->i_size + blocksize-1) >> blocksize_bits;
 	                                    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#585: FILE: fs/pramfs/inode.c:539:
+	inode->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: fs/pramfs/inode.c:564:
+int pram_get_and_update_block(struct inode *inode, sector_t iblock,
+				     struct buffer_head *bh, int create)

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#662: FILE: fs/pramfs/inode.c:616:
+struct address_space_operations pram_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 26 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
