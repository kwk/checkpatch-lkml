WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
   git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-bigbox.git for-linus

WARNING:TYPO_SPELLING: 'mergable' may be misspelled - perhaps 'mergeable'?
#76: 
So we need a bit of help wrt. how mergable this is, and what else is 
                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'mergable' may be misspelled - perhaps 'mergeable'?
#77: 
needed to make it mergable. These changes have been booted all across 
                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'machanism' may be misspelled - perhaps 'mechanism'?
#85: 
      x86, boot: add free_early to early reservation machanism
                                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#106: 
      x86: seperate mmconf for fam10h out from setup_64.c
           ^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#303: FILE: arch/x86/kernel/acpi/boot.c:783:
+	 * and (optionally) overriden by a LAPIC_ADDR_OVR entry (64-bit value).
 	                    ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#310: FILE: arch/x86/kernel/acpi/boot.c:790:
+		printk(KERN_ERR PREFIX

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#333: FILE: arch/x86/kernel/acpi/boot.c:936:
+	if (!acpi_table_parse(ACPI_SIG_MADT, acpi_parse_madt)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#346: FILE: arch/x86/kernel/acpi/boot.c:949:
+			printk(KERN_ERR PREFIX

WARNING:TYPO_SPELLING: 'positon' may be misspelled - perhaps 'position'?
#424: FILE: arch/x86/kernel/aperture_64.c:84:
+	 * that positon with gart that is used.
 	        ^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#434: FILE: arch/x86/kernel/aperture_64.c:94:
+	p = __alloc_bootmem_nopanic(aper_size, aper_size, 512ULL<<20);
 	                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#454: FILE: arch/x86/kernel/aperture_64.c:126:
+		printk(KERN_ERR "Aperture too small (%d MB) than (%d MB)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: arch/x86/kernel/aperture_64.c:127:
+		printk(KERN_ERR "Aperture too small (%d MB) than (%d MB)\n",
+				 aper_size>>20, min_size>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#455: FILE: arch/x86/kernel/aperture_64.c:127:
+				 aper_size>>20, min_size>>20);
 				          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#455: FILE: arch/x86/kernel/aperture_64.c:127:
+				 aper_size>>20, min_size>>20);
 				                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#481: FILE: arch/x86/kernel/aperture_64.c:149:
+		id = read_pci_config_byte(bus, slot, func, pos+PCI_CAP_LIST_ID);
 		                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: arch/x86/kernel/aperture_64.c:155:
+		pos = read_pci_config_byte(bus, slot, func,
 						pos+PCI_CAP_LIST_NEXT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#506: FILE: arch/x86/kernel/aperture_64.c:170:
+	printk(KERN_INFO "AGP bridge at %02x:%02x:%02x\n", bus, slot, func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#533: FILE: arch/x86/kernel/aperture_64.c:197:
+	printk(KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#533: FILE: arch/x86/kernel/aperture_64.c:197:
+	printk(KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: arch/x86/kernel/aperture_64.c:198:
+	printk(KERN_INFO "Aperture from AGP @ %Lx old size %u MB\n",
+			aper, 32 << old_order);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#535: FILE: arch/x86/kernel/aperture_64.c:199:
+	if (aper + (32ULL<<(20 + *order)) > 0x100000000ULL) {
 	                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#536: FILE: arch/x86/kernel/aperture_64.c:200:
+		printk(KERN_INFO "Aperture size %u MB (APSIZE %x) is not right, using settings from NB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: arch/x86/kernel/aperture_64.c:201:
+		printk(KERN_INFO "Aperture size %u MB (APSIZE %x) is not right, using settings from NB\n",
+				32 << *order, apsizereg);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#545: FILE: arch/x86/kernel/aperture_64.c:208:
+	if (!aperture_valid(aper, (32*1024*1024) << *order, 32<<20))
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#545: FILE: arch/x86/kernel/aperture_64.c:208:
+	if (!aperture_valid(aper, (32*1024*1024) << *order, 32<<20))
 	                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#545: FILE: arch/x86/kernel/aperture_64.c:208:
+	if (!aperture_valid(aper, (32*1024*1024) << *order, 32<<20))
 	                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: arch/x86/kernel/aperture_64.c:246:
+					cap = find_cap(bus, slot, func,
 							PCI_CAP_ID_AGP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: arch/x86/kernel/aperture_64.c:256:
+				type = read_pci_config_byte(bus, slot, func,
 							       PCI_HEADER_TYPE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: arch/x86/kernel/aperture_64.c:346:
+		if (!e820_all_mapped(aper_base, aper_base + aper_size,
+				    E820_RESERVED)) {

WARNING:MISPLACED_INIT: __initdata should be placed after printed_gart_size_msg
#700: FILE: arch/x86/kernel/aperture_64.c:376:
+static int __initdata printed_gart_size_msg;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#758: FILE: arch/x86/kernel/aperture_64.c:412:
+			aper_order = (read_pci_config(bus, slot, 3, AMD64_GARTAPERTURECTL) >> 1) & 7;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#763: FILE: arch/x86/kernel/aperture_64.c:417:
+			printk(KERN_INFO "Node %d: aperture @ %Lx size %u MB\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#763: FILE: arch/x86/kernel/aperture_64.c:417:
+			printk(KERN_INFO "Node %d: aperture @ %Lx size %u MB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: arch/x86/kernel/aperture_64.c:418:
+			printk(KERN_INFO "Node %d: aperture @ %Lx size %u MB\n",
+					node, aper_base, aper_size >> 20);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#767: FILE: arch/x86/kernel/aperture_64.c:421:
+			if (!aperture_valid(aper_base, aper_size, 64<<20)) {
 			                                            ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#772: FILE: arch/x86/kernel/aperture_64.c:426:
+					if (!no_iommu && end_pfn > MAX_DMA32_PFN && !printed_gart_size_msg) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#773: FILE: arch/x86/kernel/aperture_64.c:427:
+						printk(KERN_ERR "you are using iommu with agp, but GART size is less than 64M\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#774: FILE: arch/x86/kernel/aperture_64.c:428:
+						printk(KERN_ERR "please increase GART size in your BIOS setup\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#775: FILE: arch/x86/kernel/aperture_64.c:429:
+						printk(KERN_ERR "if BIOS doesn't have that option, contact your HW vendor!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#844: FILE: arch/x86/kernel/aperture_64.c:509:
+			/* Don't enable translation yet. That is done later.
+			   Assume this BIOS didn't initialise the GART so

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#845: FILE: arch/x86/kernel/aperture_64.c:510:
+			   just overwrite all previous bits */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_early', this function's name, in a string
#871: FILE: arch/x86/kernel/e820_64.c:98:
+		panic("free_early on not reserved area: %lx-%lx!", start, end);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#895: FILE: arch/x86/kernel/e820_64.c:119:
+		printk(KERN_INFO "  early res: %d [%lx-%lx] %s\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: arch/x86/kernel/e820_64.c:120:
+		printk(KERN_INFO "  early res: %d [%lx-%lx] %s\n", i,
+			final_start, final_end - 1, r->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#929: FILE: arch/x86/kernel/head64.c:116:
+		reserve_early(pa_data, pa_data+sizeof(*data)+data->len, buf);
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#929: FILE: arch/x86/kernel/head64.c:116:
+		reserve_early(pa_data, pa_data+sizeof(*data)+data->len, buf);
 		                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1037: FILE: arch/x86/kernel/kdebugfs.c:91:
+	type = debugfs_create_x32("type", S_IRUGO, d, &node->type);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1042: FILE: arch/x86/kernel/kdebugfs.c:96:
+	data = debugfs_create_file("data", S_IRUGO, d, node, &fops_setup_data);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1080: FILE: arch/x86/kernel/kdebugfs.c:134:
+		pg = pfn_to_page((pa_data+sizeof(*data)-1) >> PAGE_SHIFT);
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1080: FILE: arch/x86/kernel/kdebugfs.c:134:
+		pg = pfn_to_page((pa_data+sizeof(*data)-1) >> PAGE_SHIFT);
 		                                       ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1147: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1152: FILE: arch/x86/kernel/mmconf-fam10h_64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1163: FILE: arch/x86/kernel/mmconf-fam10h_64.c:12:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/acpi.h> instead of <asm/acpi.h>
#1165: FILE: arch/x86/kernel/mmconf-fam10h_64.c:14:
+#include <asm/acpi.h>

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after fam10h_pci_mmconf_base
#1176: FILE: arch/x86/kernel/mmconf-fam10h_64.c:25:
+static u64 __cpuinitdata fam10h_pci_mmconf_base;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after fam10h_pci_mmconf_base_status
#1177: FILE: arch/x86/kernel/mmconf-fam10h_64.c:26:
+static int __cpuinitdata fam10h_pci_mmconf_base_status;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1203: FILE: arch/x86/kernel/mmconf-fam10h_64.c:52:
+#define FAM10H_PCI_MMCONF_BASE (0xfcULL<<32)
                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#1204: FILE: arch/x86/kernel/mmconf-fam10h_64.c:53:
+#define BASE_VALID(b) ((b != (0xfdULL << 32)) && (b != (0xfeULL << 32)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1204: FILE: arch/x86/kernel/mmconf-fam10h_64.c:53:
+#define BASE_VALID(b) ((b != (0xfdULL << 32)) && (b != (0xfeULL << 32)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1208: FILE: arch/x86/kernel/mmconf-fam10h_64.c:57:
+	unsigned bus;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1209: FILE: arch/x86/kernel/mmconf-fam10h_64.c:58:
+	unsigned slot;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1239: FILE: arch/x86/kernel/mmconf-fam10h_64.c:88:
+		device = (id>>16) & 0xffff;
 		            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1255: FILE: arch/x86/kernel/mmconf-fam10h_64.c:104:
+	if (!(val & (1<<21))) {
 	              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1261: FILE: arch/x86/kernel/mmconf-fam10h_64.c:110:
+		tom2 = val & (0xffffULL<<32);
 		                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1265: FILE: arch/x86/kernel/mmconf-fam10h_64.c:114:
+		base = tom2 + (1ULL<<32);
 		                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1276: FILE: arch/x86/kernel/mmconf-fam10h_64.c:125:
+		u64 end;
+		reg = read_pci_config(bus, slot, 1, 0x80 + (i << 3));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base > tom2'
#1305: FILE: arch/x86/kernel/mmconf-fam10h_64.c:154:
+	if ((base > tom2) && BASE_VALID(base))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base > tom2'
#1308: FILE: arch/x86/kernel/mmconf-fam10h_64.c:157:
+	if ((base > tom2) && BASE_VALID(base))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1311: FILE: arch/x86/kernel/mmconf-fam10h_64.c:160:
+	if (hi_mmio_num > 1)
+	for (i = 0; i < hi_mmio_num - 1; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base > tom2'
#1315: FILE: arch/x86/kernel/mmconf-fam10h_64.c:164:
+			if ((base > tom2) && BASE_VALID(base))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1341: FILE: arch/x86/kernel/mmconf-fam10h_64.c:190:
+		unsigned busnbits;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1342: FILE: arch/x86/kernel/mmconf-fam10h_64.c:191:
+		unsigned busnbits;
+		busnbits = (val >> FAM10H_MMIO_CONF_BUSRANGE_SHIFT) &

WARNING:LINE_SPACING: Missing a blank line after declarations
#1348: FILE: arch/x86/kernel/mmconf-fam10h_64.c:197:
+			u64 base;
+			base = val & (0xffffULL << 32);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1349: FILE: arch/x86/kernel/mmconf-fam10h_64.c:198:
+			if (fam10h_pci_mmconf_base_status <= 0) {
[...]
+			} else if (fam10h_pci_mmconf_base ==  base)
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1366: FILE: arch/x86/kernel/mmconf-fam10h_64.c:215:
+	printk(KERN_INFO "Enable MMCONFIG on AMD Family 10h\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1367: FILE: arch/x86/kernel/mmconf-fam10h_64.c:216:
+	val &= ~((FAM10H_MMIO_CONF_BASE_MASK<<FAM10H_MMIO_CONF_BASE_SHIFT) |
 	                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1368: FILE: arch/x86/kernel/mmconf-fam10h_64.c:217:
+	     (FAM10H_MMIO_CONF_BUSRANGE_MASK<<FAM10H_MMIO_CONF_BUSRANGE_SHIFT));
 	                                    ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1374: FILE: arch/x86/kernel/mmconf-fam10h_64.c:223:
+static int __devinit set_check_enable_amd_mmconf(const struct dmi_system_id *d)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1376: FILE: arch/x86/kernel/mmconf-fam10h_64.c:225:
+        pci_probe |= PCI_CHECK_ENABLE_AMD_MMCONF;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1376: FILE: arch/x86/kernel/mmconf-fam10h_64.c:225:
+        pci_probe |= PCI_CHECK_ENABLE_AMD_MMCONF;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1377: FILE: arch/x86/kernel/mmconf-fam10h_64.c:226:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1377: FILE: arch/x86/kernel/mmconf-fam10h_64.c:226:
+        return 0;$

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1380: FILE: arch/x86/kernel/mmconf-fam10h_64.c:229:
+static struct dmi_system_id __devinitdata mmconf_dmi_table[] = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after mmconf_dmi_table[]
#1380: FILE: arch/x86/kernel/mmconf-fam10h_64.c:229:
+static struct dmi_system_id __devinitdata mmconf_dmi_table[] = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1381: FILE: arch/x86/kernel/mmconf-fam10h_64.c:230:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: arch/x86/kernel/mmconf-fam10h_64.c:230:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: arch/x86/kernel/mmconf-fam10h_64.c:231:
+                .callback = set_check_enable_amd_mmconf,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: arch/x86/kernel/mmconf-fam10h_64.c:231:
+                .callback = set_check_enable_amd_mmconf,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1383: FILE: arch/x86/kernel/mmconf-fam10h_64.c:232:
+                .ident = "Sun Microsystems Machine",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1383: FILE: arch/x86/kernel/mmconf-fam10h_64.c:232:
+                .ident = "Sun Microsystems Machine",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1384: FILE: arch/x86/kernel/mmconf-fam10h_64.c:233:
+                .matches = {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: arch/x86/kernel/mmconf-fam10h_64.c:233:
+                .matches = {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1385: FILE: arch/x86/kernel/mmconf-fam10h_64.c:234:
+                        DMI_MATCH(DMI_SYS_VENDOR, "Sun Microsystems"),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: arch/x86/kernel/mmconf-fam10h_64.c:234:
+                        DMI_MATCH(DMI_SYS_VENDOR, "Sun Microsystems"),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1386: FILE: arch/x86/kernel/mmconf-fam10h_64.c:235:
+                },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: arch/x86/kernel/mmconf-fam10h_64.c:235:
+                },$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1387: FILE: arch/x86/kernel/mmconf-fam10h_64.c:236:
+        },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: arch/x86/kernel/mmconf-fam10h_64.c:236:
+        },$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1411: FILE: arch/x86/kernel/pci-dma.c:87:
+				 512ULL<<20);
 				       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1458: FILE: arch/x86/kernel/setup_64.c:195:
+	early_res_to_bootmem(0, end_pfn<<PAGE_SHIFT);
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1481: FILE: arch/x86/kernel/setup_64.c:285:
+		free_early(pa_data, pa_data+sizeof(*data)+data->len);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1481: FILE: arch/x86/kernel/setup_64.c:285:
+		free_early(pa_data, pa_data+sizeof(*data)+data->len);
 		                                         ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1490: FILE: arch/x86/kernel/setup_64.c:294:
+extern void __init check_enable_amd_mmconf_dmi(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1495: FILE: arch/x86/kernel/setup_64.c:299:
+}
+void __init check_enable_amd_mmconf_dmi(void)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1560: FILE: arch/x86/mm/init_64.c:834:
+	if (nid == next_nid)
 	reserve_bootmem_node(NODE_DATA(nid), phys, len, BOOTMEM_DEFAULT);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1564: FILE: arch/x86/mm/init_64.c:836:
+	else
[...]
+	reserve_bootmem(phys, len, BOOTMEM_DEFAULT);

WARNING:MISPLACED_INIT: __meminitdata should be placed after node_start
#1577: FILE: arch/x86/mm/init_64.c:935:
+static int __meminitdata node_start;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1591: FILE: arch/x86/mm/init_64.c:974:
+					printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1592: FILE: arch/x86/mm/init_64.c:975:
+						addr_start, addr_end-1, p_start, p_end-1, node_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: arch/x86/mm/init_64.c:975:
+					printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",
+						addr_start, addr_end-1, p_start, p_end-1, node_start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1592: FILE: arch/x86/mm/init_64.c:975:
+						addr_start, addr_end-1, p_start, p_end-1, node_start);
 						                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1592: FILE: arch/x86/mm/init_64.c:975:
+						addr_start, addr_end-1, p_start, p_end-1, node_start);
 						                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1609: FILE: arch/x86/mm/init_64.c:992:
+		printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1610: FILE: arch/x86/mm/init_64.c:993:
+		printk(KERN_DEBUG " [%lx-%lx] PMD -> [%p-%p] on node %d\n",
+			addr_start, addr_end-1, p_start, p_end-1, node_start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1610: FILE: arch/x86/mm/init_64.c:993:
+			addr_start, addr_end-1, p_start, p_end-1, node_start);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1610: FILE: arch/x86/mm/init_64.c:993:
+			addr_start, addr_end-1, p_start, p_end-1, node_start);
 			                                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1672: FILE: arch/x86/mm/k8topology_64.c:86:
+	unsigned apicid_base;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1684: FILE: arch/x86/mm/k8topology_64.c:209:
+		printk(KERN_INFO "BSP APIC ID: %02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1685: FILE: arch/x86/mm/k8topology_64.c:210:
+		printk(KERN_INFO "BSP APIC ID: %02x\n",
+				 boot_cpu_physical_apicid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1752: FILE: arch/x86/mm/numa_64.c:272:
+		printk(KERN_INFO "    NODE_DATA(%d) on node %d\n", nodeid, nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1755: FILE: arch/x86/mm/numa_64.c:275:
+		reserve_bootmem_node(NODE_DATA(nodeid), nodedata_phys,
+					pgdat_size, BOOTMEM_DEFAULT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1758: FILE: arch/x86/mm/numa_64.c:278:
+		printk(KERN_INFO "    bootmap(%d) on node %d\n", nodeid, nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1761: FILE: arch/x86/mm/numa_64.c:281:
+		reserve_bootmem_node(NODE_DATA(nodeid), bootmap_start,
+				 bootmap_pages<<PAGE_SHIFT, BOOTMEM_DEFAULT);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1761: FILE: arch/x86/mm/numa_64.c:281:
+				 bootmap_pages<<PAGE_SHIFT, BOOTMEM_DEFAULT);
 				              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1900: FILE: arch/x86/pci/acpi.c:213:
+			printk(KERN_DEBUG "bus %02x -> pxm %d -> node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1901: FILE: arch/x86/pci/acpi.c:214:
+			printk(KERN_DEBUG "bus %02x -> pxm %d -> node %d\n",
+				busnum, pxm, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1903: FILE: arch/x86/pci/acpi.c:216:
+		printk(KERN_DEBUG "bus %02x -> node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1904: FILE: arch/x86/pci/acpi.c:217:
+		printk(KERN_DEBUG "bus %02x -> node %d\n",
+			busnum, node);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1922: FILE: arch/x86/pci/common.c:93:
+static int __devinit can_skip_ioresource_align(const struct dmi_system_id *d)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1925: FILE: arch/x86/pci/common.c:96:
+	printk(KERN_INFO "PCI: %s detected, can skip ISA alignment\n", d->ident);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1929: FILE: arch/x86/pci/common.c:100:
+static struct dmi_system_id can_skip_pciprobe_dmi_table[] __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1978: FILE: arch/x86/pci/common.c:370:
 struct pci_bus * __devinit pcibios_scan_root(int busnum)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2008: FILE: arch/x86/pci/common.c:475:
 	}
+	else if (!strcmp(str, "check_enable_amd_mmconf")) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2061: FILE: arch/x86/pci/direct.c:261:
+	printk(KERN_INFO "PCI: Using configuration type %d for base access\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2062: FILE: arch/x86/pci/direct.c:262:
+	printk(KERN_INFO "PCI: Using configuration type %d for base access\n",
+		 type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2198: FILE: arch/x86/pci/k8-bus_64.c:13:
 
+

WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#2201: FILE: arch/x86/pci/k8-bus_64.c:16:
+ * so need to make sure have enought slot there, increase PCI_BUS_NUM_RESOURCES?
                              ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2312: FILE: arch/x86/pci/k8-bus_64.c:127:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2328: FILE: arch/x86/pci/k8-bus_64.c:143:
+				printk(KERN_ERR "run of slot in ranges\n");

WARNING:MINMAX: max() should probably be max_t(size_t, res->start, start)
#2354: FILE: arch/x86/pci/k8-bus_64.c:169:
+		common_start = max((size_t)res->start, start);

WARNING:MINMAX: min() should probably be min_t(size_t, res->end, end)
#2355: FILE: arch/x86/pci/k8-bus_64.c:170:
+		common_end = min((size_t)res->end, end);

WARNING:MINMAX: min() should probably be min_t(size_t, res->start, start)
#2359: FILE: arch/x86/pci/k8-bus_64.c:174:
+		final_start = min((size_t)res->start, start);

WARNING:MINMAX: max() should probably be max_t(size_t, res->end, end)
#2360: FILE: arch/x86/pci/k8-bus_64.c:175:
+		final_end = max((size_t)res->end, end);

WARNING:MISPLACED_INIT: __initdata should be placed after fam10h_mmconf_start
#2396: FILE: arch/x86/pci/k8-bus_64.c:211:
+static u64 __initdata fam10h_mmconf_start;

WARNING:MISPLACED_INIT: __initdata should be placed after fam10h_mmconf_end
#2397: FILE: arch/x86/pci/k8-bus_64.c:212:
+static u64 __initdata fam10h_mmconf_end;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2402: FILE: arch/x86/pci/k8-bus_64.c:217:
+	unsigned segn_busn_bits;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2405: FILE: arch/x86/pci/k8-bus_64.c:220:
+        if (boot_cpu_data.x86 < 0x10)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2405: FILE: arch/x86/pci/k8-bus_64.c:220:
+        if (boot_cpu_data.x86 < 0x10)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2415: FILE: arch/x86/pci/k8-bus_64.c:230:
+	base = msr & (FAM10H_MMIO_CONF_BASE_MASK<<FAM10H_MMIO_CONF_BASE_SHIFT);
 	                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2421: FILE: arch/x86/pci/k8-bus_64.c:236:
+	fam10h_mmconf_end = base + (1ULL<<(segn_busn_bits + 20)) - 1;
 	                                ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2482: FILE: arch/x86/pci/k8-bus_64.c:249:
+	unsigned bus;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2483: FILE: arch/x86/pci/k8-bus_64.c:250:
+	unsigned slot;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2517: FILE: arch/x86/pci/k8-bus_64.c:284:
+		device = (id>>16) & 0xffff;
 		            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2532: FILE: arch/x86/pci/k8-bus_64.c:299:
+		int max_bus;
+		reg = read_pci_config(bus, slot, 1, 0xe0 + (i << 2));

CHECK:SPACING: No space is necessary after a cast
#2543: FILE: arch/x86/pci/k8-bus_64.c:310:
+			mp_bus_to_node[j] = (unsigned char) node;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2586: FILE: arch/x86/pci/k8-bus_64.c:353:
+		printk(KERN_DEBUG "node %d link %d: io port [%llx, %llx]\n",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2615: FILE: arch/x86/pci/k8-bus_64.c:382:
+	range[0].end = (0xfdULL<<32) - 1;
 	                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2621: FILE: arch/x86/pci/k8-bus_64.c:388:
+	printk(KERN_INFO "TOM: %016lx aka %ldM\n", end, end>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2621: FILE: arch/x86/pci/k8-bus_64.c:388:
+	printk(KERN_INFO "TOM: %016lx aka %ldM\n", end, end>>20);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2622: FILE: arch/x86/pci/k8-bus_64.c:389:
+	if (end < (1ULL<<32))
 	               ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2629: FILE: arch/x86/pci/k8-bus_64.c:396:
+		printk(KERN_DEBUG "Fam 10h mmconf [%llx, %llx]\n", fam10h_mmconf_start, fam10h_mmconf_end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2629: FILE: arch/x86/pci/k8-bus_64.c:396:
+		printk(KERN_DEBUG "Fam 10h mmconf [%llx, %llx]\n", fam10h_mmconf_start, fam10h_mmconf_end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2659: FILE: arch/x86/pci/k8-bus_64.c:426:
+		printk(KERN_DEBUG "node %d link %d: mmio [%llx, %llx]",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2668: FILE: arch/x86/pci/k8-bus_64.c:435:
+			u64 endx = 0;
+			if (start >= fam10h_mmconf_start &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2686: FILE: arch/x86/pci/k8-bus_64.c:453:
+				printk(KERN_CONT " ==> [%llx, %llx]", (u64)start, endx);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2686: FILE: arch/x86/pci/k8-bus_64.c:453:
+				printk(KERN_CONT " ==> [%llx, %llx]", (u64)start, endx);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#2692: FILE: arch/x86/pci/k8-bus_64.c:459:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2692: FILE: arch/x86/pci/k8-bus_64.c:459:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2692: FILE: arch/x86/pci/k8-bus_64.c:459:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);
 					                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2692: FILE: arch/x86/pci/k8-bus_64.c:459:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);
 					                                               ^

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2692: FILE: arch/x86/pci/k8-bus_64.c:459:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2694: FILE: arch/x86/pci/k8-bus_64.c:461:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2694: FILE: arch/x86/pci/k8-bus_64.c:461:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");
 					                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2694: FILE: arch/x86/pci/k8-bus_64.c:461:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");
 					                                ^

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2694: FILE: arch/x86/pci/k8-bus_64.c:461:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2702: FILE: arch/x86/pci/k8-bus_64.c:469:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2702: FILE: arch/x86/pci/k8-bus_64.c:469:
+		printk(KERN_CONT "\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2710: FILE: arch/x86/pci/k8-bus_64.c:477:
+	if (val & (1<<21)) {
 	            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2715: FILE: arch/x86/pci/k8-bus_64.c:482:
+		printk(KERN_INFO "TOM2: %016lx aka %ldM\n", end, end>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2715: FILE: arch/x86/pci/k8-bus_64.c:482:
+		printk(KERN_INFO "TOM2: %016lx aka %ldM\n", end, end>>20);
 		                                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2716: FILE: arch/x86/pci/k8-bus_64.c:483:
+		update_range(range, 1ULL<<32, end - 1);
 		                        ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2734: FILE: arch/x86/pci/k8-bus_64.c:501:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2749: FILE: arch/x86/pci/k8-bus_64.c:516:
+			printk(KERN_DEBUG "bus: %02x to node: %02x\n", i, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2760: FILE: arch/x86/pci/k8-bus_64.c:527:
+		printk(KERN_DEBUG "bus: [%02x,%02x] on node %x link %x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2764: FILE: arch/x86/pci/k8-bus_64.c:531:
+			printk(KERN_DEBUG "bus: %02x index %x %s: [%llx, %llx]\n",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2766: FILE: arch/x86/pci/k8-bus_64.c:533:
+			       (res->flags & IORESOURCE_IO)?"io port":"mmio",
 			                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2766: FILE: arch/x86/pci/k8-bus_64.c:533:
+			       (res->flags & IORESOURCE_IO)?"io port":"mmio",
 			                                             ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2781: FILE: arch/x86/pci/legacy.c:12:
 static void __devinit pcibios_fixup_peer_bridges(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2834: FILE: arch/x86/pci/mmconfig-shared.c:108:
+	unsigned segnbits = 0, busnbits;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2851: FILE: arch/x86/pci/mmconfig-shared.c:125:
+	base = msr & (FAM10H_MMIO_CONF_BASE_MASK<<FAM10H_MMIO_CONF_BASE_SHIFT);
 	                                        ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2869: FILE: arch/x86/pci/mmconfig-shared.c:143:
+	pci_mmcfg_config = kzalloc(sizeof(pci_mmcfg_config[0]) *
+				   pci_mmcfg_config_num, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2875: FILE: arch/x86/pci/mmconfig-shared.c:149:
+		pci_mmcfg_config[i].address = base + (1<<28) * i;
 		                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= fixmem32->address'
#2950: FILE: arch/x86/pci/mmconfig-shared.c:257:
+		if ((mcfg_res->start >= fixmem32->address) &&
+		    (mcfg_res->end < (fixmem32->address +
+				      fixmem32->address_length))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS32'
#2957: FILE: arch/x86/pci/mmconfig-shared.c:264:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+	    (res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS64'
#2957: FILE: arch/x86/pci/mmconfig-shared.c:264:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+	    (res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.address_length <= 0'
#2962: FILE: arch/x86/pci/mmconfig-shared.c:269:
+	if (ACPI_FAILURE(status) ||
+	   (address.address_length <= 0) ||
+	   (address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.resource_type != ACPI_MEMORY_RANGE'
#2962: FILE: arch/x86/pci/mmconfig-shared.c:269:
+	if (ACPI_FAILURE(status) ||
+	   (address.address_length <= 0) ||
+	   (address.resource_type != ACPI_MEMORY_RANGE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2963: FILE: arch/x86/pci/mmconfig-shared.c:270:
+	if (ACPI_FAILURE(status) ||
+	   (address.address_length <= 0) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= address.minimum'
#2967: FILE: arch/x86/pci/mmconfig-shared.c:274:
+	if ((mcfg_res->start >= address.minimum) &&
+	    (mcfg_res->end < (address.minimum + address.address_length))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3030: FILE: arch/x86/pci/mmconfig-shared.c:328:
+		u32 size = (cfg->end_bus_number + 1) << 20;
+		cfg = &pci_mmcfg_config[i];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3031: FILE: arch/x86/pci/mmconfig-shared.c:329:
+		printk(KERN_NOTICE "PCI: MCFG configuration %d: base %lx "

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#3031: FILE: arch/x86/pci/mmconfig-shared.c:329:
+		printk(KERN_NOTICE "PCI: MCFG configuration %d: base %lx "
+		       "segment %hu buses %u - %u\n",
+		       i, (unsigned long)cfg->address, cfg->pci_segment,
+		       (unsigned int)cfg->start_bus_number,
+		       (unsigned int)cfg->end_bus_number);

WARNING:SPLIT_STRING: quoted string split across lines
#3032: FILE: arch/x86/pci/mmconfig-shared.c:330:
+		printk(KERN_NOTICE "PCI: MCFG configuration %d: base %lx "
+		       "segment %hu buses %u - %u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3039: FILE: arch/x86/pci/mmconfig-shared.c:337:
+			printk(KERN_NOTICE "PCI: MCFG area at %Lx reserved "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3039: FILE: arch/x86/pci/mmconfig-shared.c:337:
+			printk(KERN_NOTICE "PCI: MCFG area at %Lx reserved "

WARNING:SPLIT_STRING: quoted string split across lines
#3040: FILE: arch/x86/pci/mmconfig-shared.c:338:
+			printk(KERN_NOTICE "PCI: MCFG area at %Lx reserved "
+			       "in ACPI motherboard resources\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3049: FILE: arch/x86/pci/mmconfig-shared.c:347:
+			printk(KERN_ERR "PCI: BIOS Bug: MCFG area at %Lx is not"

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3049: FILE: arch/x86/pci/mmconfig-shared.c:347:
+			printk(KERN_ERR "PCI: BIOS Bug: MCFG area at %Lx is not"

WARNING:SPLIT_STRING: quoted string split across lines
#3050: FILE: arch/x86/pci/mmconfig-shared.c:348:
+			printk(KERN_ERR "PCI: BIOS Bug: MCFG area at %Lx is not"
+			       " reserved in ACPI motherboard resources\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3053: FILE: arch/x86/pci/mmconfig-shared.c:351:
+		/* Don't try to do this check unless configuration
+		   type 1 is available. how about type 2 ?*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3053: FILE: arch/x86/pci/mmconfig-shared.c:351:
+		   type 1 is available. how about type 2 ?*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3055: FILE: arch/x86/pci/mmconfig-shared.c:353:
+		if (raw_pci_ops && e820_all_mapped(cfg->address,
+						  cfg->address + size - 1,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3057: FILE: arch/x86/pci/mmconfig-shared.c:355:
+			printk(KERN_NOTICE

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3058: FILE: arch/x86/pci/mmconfig-shared.c:356:
+			       "PCI: MCFG area at %Lx reserved in E820\n",

WARNING:MISPLACED_INIT: __initdata should be placed after known_bridge
#3091: FILE: arch/x86/pci/mmconfig-shared.c:375:
+static int __initdata known_bridge;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3112: FILE: arch/x86/pci/mmconfig-shared.c:394:
+#if 0

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#3164: FILE: arch/x86/pci/mmconfig_64.c:130:
+	pci_mmcfg_virt = kzalloc(sizeof(*pci_mmcfg_virt) *
 				 pci_mmcfg_config_num, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pci_mmcfg_virt"
#3184: FILE: arch/x86/pci/mmconfig_64.c:156:
+	if (pci_mmcfg_virt == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3204: FILE: arch/x86/pci/mp_bus_to_node.c:1:
+#include <linux/pci.h>

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3214: FILE: arch/x86/pci/mp_bus_to_node.c:11:
+	if (busnum >= 0 &&  busnum < BUS_NR)
+	mp_bus_to_node[busnum] = (unsigned char) node;

CHECK:SPACING: No space is necessary after a cast
#3215: FILE: arch/x86/pci/mp_bus_to_node.c:12:
+	mp_bus_to_node[busnum] = (unsigned char) node;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3243: FILE: arch/x86/pci/pci.h:41:
+extern void __init dmi_check_pciprobe(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3244: FILE: arch/x86/pci/pci.h:42:
+extern void __init dmi_check_skip_isa_align(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3258: FILE: arch/x86/pci/pci.h:108:
+extern void __init pci_mmcfg_arch_free(void);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3345: FILE: drivers/char/agp/amd64-agp.c:275:
+	if (size < 32*1024*1024) {
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3345: FILE: drivers/char/agp/amd64-agp.c:275:
+	if (size < 32*1024*1024) {
 	                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3346: FILE: drivers/char/agp/amd64-agp.c:276:
+		printk(KERN_ERR PFX "Aperture too small (%d MB)\n", size>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3346: FILE: drivers/char/agp/amd64-agp.c:276:
+		printk(KERN_ERR PFX "Aperture too small (%d MB)\n", size>>20);
 		                                                        ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#3361: FILE: drivers/char/agp/amd64-agp.c:339:
+	if (order >=0 && aper + (32ULL<<(20 + order)) > 0x100000000ULL) {
 	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3361: FILE: drivers/char/agp/amd64-agp.c:339:
+	if (order >=0 && aper + (32ULL<<(20 + order)) > 0x100000000ULL) {
 	                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3362: FILE: drivers/char/agp/amd64-agp.c:340:
+		printk(KERN_INFO "Aperture size %u MB is not right, using settings from NB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3363: FILE: drivers/char/agp/amd64-agp.c:341:
+		printk(KERN_INFO "Aperture size %u MB is not right, using settings from NB\n",
+				  32 << order);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3379: FILE: drivers/pci/probe.c:845:
+int pci_cfg_space_size_ext(struct pci_dev *dev, unsigned check_exp_pcix)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3422: FILE: drivers/pci/probe.c:1091:
+void __attribute__((weak)) set_pci_bus_resources_arch_default(struct pci_bus *b)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3489: FILE: include/asm-x86/e820_64.h:51:
+extern void free_early(unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3490: FILE: include/asm-x86/e820_64.h:52:
+extern void early_res_to_bootmem(unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3502: FILE: include/asm-x86/pci.h:22:
+extern struct pci_bus *pci_scan_bus_on_node(int busno, struct pci_ops *ops,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3524: FILE: include/asm-x86/topology.h:205:
+extern int get_mp_bus_to_node(int busnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3525: FILE: include/asm-x86/topology.h:206:
+extern void set_mp_bus_to_node(int busnum, int node);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3531: FILE: include/asm-x86/topology.h:212:
+}
+static inline void set_mp_bus_to_node(int busnum, int node)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3603: FILE: include/linux/pci.h:669:
+int pci_cfg_space_size_ext(struct pci_dev *dev, unsigned check_exp_pcix);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3612: FILE: include/linux/pci.h:1058:
+extern void __init pci_mmcfg_early_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3613: FILE: include/linux/pci.h:1059:
+extern void __init pci_mmcfg_late_init(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3631: FILE: mm/bootmem.c:115:
+static int __init can_reserve_bootmem_core(bootmem_data_t *bdata,
 			unsigned long addr, unsigned long size, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3637: FILE: mm/bootmem.c:120:
+	BUG_ON(!size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3641: FILE: mm/bootmem.c:124:
+	if (addr + size < bdata->node_boot_start ||
+		PFN_DOWN(addr) > bdata->node_low_pfn)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3650: FILE: mm/bootmem.c:131:
+		sidx= PFN_DOWN(addr - bdata->node_boot_start);
 		    ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3666: FILE: mm/bootmem.c:147:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3667: FILE: mm/bootmem.c:148:
+}
+static void __init reserve_bootmem_core(bootmem_data_t *bdata,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3668: FILE: mm/bootmem.c:149:
+static void __init reserve_bootmem_core(bootmem_data_t *bdata,
+			unsigned long addr, unsigned long size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3681: FILE: mm/bootmem.c:158:
+	if (addr + size < bdata->node_boot_start ||
+		PFN_DOWN(addr) > bdata->node_low_pfn)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3688: FILE: mm/bootmem.c:165:
+		sidx= PFN_DOWN(addr - bdata->node_boot_start);
 		    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3749: FILE: mm/bootmem.c:259:
+			    PFN_DOWN(node_boot_start - bdata->node_boot_start)/BITS_PER_LONG;
 			                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3780: FILE: mm/bootmem.c:282:
+		if (bdata->last_success > node_boot_start &&
+			bdata->last_success - node_boot_start >= preferred)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3898: FILE: mm/bootmem.c:477:
+	bootmem_data_t *bdata;
+	list_for_each_entry(bdata, &bdata_list, list) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3917: FILE: mm/sparse.c:298:
+void __attribute__((weak)) __meminit vmemmap_populate_print_last(void)

WARNING:TYPO_SPELLING: 'continously' may be misspelled - perhaps 'continuously'?
#3936: FILE: mm/sparse.c:319:
+	 * here try to allocate 2M pages continously.
 	                                 ^^^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290028.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 134 warnings, 110 checks, 3491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290028.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
