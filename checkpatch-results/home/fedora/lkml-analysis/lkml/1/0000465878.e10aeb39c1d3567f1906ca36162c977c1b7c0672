WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#88: FILE: include/linux/memctlr.h:26:
+^I^I^I^I/* counted ^I^I^I^I   */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/memctlr.h:31:
+extern int memctlr_mm_init(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/memctlr.h:32:
+extern void memctlr_mm_free(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/memctlr.h:33:
+extern void memctlr_mm_assign_container(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: include/linux/memctlr.h:34:
+extern void memctlr_mm_assign_container(struct mm_struct *mm,
+						struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/memctlr.h:35:
+extern int memctlr_update_rss(struct mm_struct *mm, int count, bool check);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: include/linux/memctlr.h:49:
+static inline void memctlr_mm_assign_container(struct mm_struct *mm,
+						struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: include/linux/memctlr.h:54:
+static inline int memctlr_update_rss(struct mm_struct *mm, int count,
+					bool check)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: include/linux/sched.h:385:
+^Irwlock_t ^I^Icontainer_lock;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mm->counter)...) over kmalloc(sizeof(struct res_counter)...)
#226: FILE: mm/memctlr.c:47:
+	mm->counter = kmalloc(sizeof(struct res_counter), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: mm/memctlr.c:62:
+static inline void memctlr_mm_assign_container_direct(struct mm_struct *mm,
+							struct container *cont)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: mm/memctlr.c:74:
+	BUG_ON(!mem);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage > limit'
#281: FILE: mm/memctlr.c:102:
+	if (check && limit && (usage > limit))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#283: FILE: mm/memctlr.c:104:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: mm/memctlr.c:213:
+static inline void memctlr_double_lock(struct memctlr *mem1,
+					struct memctlr *mem2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: mm/memctlr.c:225:
+static inline void memctlr_double_unlock(struct memctlr *mem1,
+						struct memctlr *mem2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: mm/memctlr.c:243:
+static void memctlr_attach(struct container_subsys *ss,
+				struct container *cont,

CHECK:BRACES: Unbalanced braces around else statement
#459: FILE: mm/memory.c:1625:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465878.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 15 checks, 468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465878.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
