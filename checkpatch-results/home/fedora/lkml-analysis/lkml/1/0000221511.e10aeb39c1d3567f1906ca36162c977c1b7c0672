CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#47: FILE: arch/x86/kernel/signal_32.c:116:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#47: FILE: arch/x86/kernel/signal_32.c:116:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#51: FILE: arch/x86/kernel/signal_32.c:120:
+#define COPY_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#51: FILE: arch/x86/kernel/signal_32.c:120:
+#define COPY_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#57: FILE: arch/x86/kernel/signal_32.c:126:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#57: FILE: arch/x86/kernel/signal_32.c:126:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#63: FILE: arch/x86/kernel/signal_32.c:132:
+#define GET_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		loadsegment(seg, tmp);			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#63: FILE: arch/x86/kernel/signal_32.c:132:
+#define GET_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		loadsegment(seg, tmp);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#103: FILE: arch/x86/kernel/signal_64.c:55:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#103: FILE: arch/x86/kernel/signal_64.c:55:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#107: FILE: arch/x86/kernel/signal_64.c:59:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#107: FILE: arch/x86/kernel/signal_64.c:59:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221511.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 12 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221511.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
