CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#87: FILE: include/asm-generic/vmlinux.lds.h:33:
+#if defined(CONFIG_MEMORY_HOTPLUG) || defined(CONFIG_ACPI_HOTPLUG_MEMORY) \
+	|| defined(CONFIG_ACPI_HOTPLUG_MEMORY_MODULE)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: include/asm-generic/vmlinux.lds.h:41:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#139: FILE: include/asm-generic/vmlinux.lds.h:207:
+		*(.exit.text.refok)					\
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#205: FILE: include/linux/init.h:68:
+#define __exit          __section(.exit.text) __exitused __cold

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#208: FILE: include/linux/init.h:71:
+#define __devinit        __section(.devinit.text) __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#208: FILE: include/linux/init.h:71:
+#define __devinit        __section(.devinit.text) __cold

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#209: FILE: include/linux/init.h:72:
+#define __devinitdata    __section(.devinit.data)

WARNING:HOTPLUG_SECTION: Using __devinitconst is unnecessary
#210: FILE: include/linux/init.h:73:
+#define __devinitconst   __section(.devinit.rodata)

ERROR:INIT_ATTRIBUTE: Use of __devinitconst requires a separate use of const
#210: FILE: include/linux/init.h:73:
+#define __devinitconst   __section(.devinit.rodata)

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#211: FILE: include/linux/init.h:74:
+#define __devexit        __section(.devexit.text) __exitused __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#211: FILE: include/linux/init.h:74:
+#define __devexit        __section(.devexit.text) __exitused __cold

WARNING:HOTPLUG_SECTION: Using __devexitdata is unnecessary
#212: FILE: include/linux/init.h:75:
+#define __devexitdata    __section(.devexit.data)

WARNING:HOTPLUG_SECTION: Using __devexitconst is unnecessary
#213: FILE: include/linux/init.h:76:
+#define __devexitconst   __section(.devexit.rodata)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#216: FILE: include/linux/init.h:79:
+#define __cpuinit        __section(.cpuinit.text) __cold

ERROR:INIT_ATTRIBUTE: Use of __cpuinitconst requires a separate use of const
#218: FILE: include/linux/init.h:81:
+#define __cpuinitconst   __section(.cpuinit.rodata)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#219: FILE: include/linux/init.h:82:
+#define __cpuexit        __section(.cpuexit.text) __exitused __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#224: FILE: include/linux/init.h:87:
+#define __meminit        __section(.meminit.text) __cold

ERROR:INIT_ATTRIBUTE: Use of __meminitconst requires a separate use of const
#226: FILE: include/linux/init.h:89:
+#define __meminitconst   __section(.meminit.rodata)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#227: FILE: include/linux/init.h:90:
+#define __memexit        __section(.memexit.text) __exitused __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#319: FILE: scripts/mod/modpost.c:683:
+#define ALL_INIT_SECTIONS ALL_INIT_DATA_SECTIONS, ALL_INIT_TEXT_SECTIONS

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#320: FILE: scripts/mod/modpost.c:684:
+#define ALL_EXIT_SECTIONS ALL_EXIT_DATA_SECTIONS, ALL_EXIT_TEXT_SECTIONS

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#337: FILE: scripts/mod/modpost.c:700:
+static const char *init_data_sections[] = { ALL_INIT_DATA_SECTIONS, NULL };

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#341: FILE: scripts/mod/modpost.c:703:
+static const char *init_sections[] = { ALL_INIT_SECTIONS, NULL };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#346: FILE: scripts/mod/modpost.c:707:
 static const char *init_exit_sections[] =
+	{ALL_INIT_SECTIONS, ALL_EXIT_SECTIONS, NULL };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000334058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 8 warnings, 3 checks, 310 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000334058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
