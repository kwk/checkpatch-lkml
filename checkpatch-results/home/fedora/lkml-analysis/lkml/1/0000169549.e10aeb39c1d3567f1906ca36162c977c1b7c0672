WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: arch/arm/plat-s3c/clock.c:72:
+       long idno;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: arch/arm/plat-s3c/clock.c:73:
+       char *name = (char *)id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: arch/arm/plat-s3c/clock.c:74:
+       char *dotpos = strrchr(id, '.');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/arm/plat-s3c/clock.c:78:
+       if (dotpos) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#64: FILE: arch/arm/plat-s3c/clock.c:78:
+       if (dotpos) {
+               int err = strict_strtol(dotpos + 1, 10, &idno);

CHECK:BRACES: braces {} should be used on all arms of this statement
#64: FILE: arch/arm/plat-s3c/clock.c:78:
+       if (dotpos) {
[...]
+       } else if (dev == NULL || dev->bus != &platform_bus_type)
[...]
       else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: arch/arm/plat-s3c/clock.c:79:
+               int err = strict_strtol(dotpos + 1, 10, &idno);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: arch/arm/plat-s3c/clock.c:79:
+               int err = strict_strtol(dotpos + 1, 10, &idno);$

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#65: FILE: arch/arm/plat-s3c/clock.c:79:
+               int err = strict_strtol(dotpos + 1, 10, &idno);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: arch/arm/plat-s3c/clock.c:80:
+               if (err)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#66: FILE: arch/arm/plat-s3c/clock.c:80:
+               int err = strict_strtol(dotpos + 1, 10, &idno);
+               if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/arm/plat-s3c/clock.c:80:
+               if (err)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 31)
#66: FILE: arch/arm/plat-s3c/clock.c:80:
+               if (err)
+                               return ERR_PTR(err);

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: arch/arm/plat-s3c/clock.c:81:
+                               return ERR_PTR(err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/arm/plat-s3c/clock.c:81:
+                               return ERR_PTR(err);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: arch/arm/plat-s3c/clock.c:82:
+               name = kstrdup(id, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: arch/arm/plat-s3c/clock.c:82:
+               name = kstrdup(id, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: arch/arm/plat-s3c/clock.c:83:
+               name[dotpos - id] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/arm/plat-s3c/clock.c:83:
+               name[dotpos - id] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/arm/plat-s3c/clock.c:84:
+       } else if (dev == NULL || dev->bus != &platform_bus_type)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 14)
#70: FILE: arch/arm/plat-s3c/clock.c:84:
+       } else if (dev == NULL || dev->bus != &platform_bus_type)
               idno = -1;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#70: FILE: arch/arm/plat-s3c/clock.c:84:
+       } else if (dev == NULL || dev->bus != &platform_bus_type)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: arch/arm/plat-s3c/clock.c:93:
+                   strcmp(name, p->name) == 0 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: arch/arm/plat-s3c/clock.c:93:
+                   strcmp(name, p->name) == 0 &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 23)
#86: FILE: arch/arm/plat-s3c/clock.c:104:
               list_for_each_entry(p, &clocks, list) {
+                       if (p->id == -1 && strcmp(name, p->name) == 0 &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: arch/arm/plat-s3c/clock.c:105:
+                       if (p->id == -1 && strcmp(name, p->name) == 0 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: arch/arm/plat-s3c/clock.c:105:
+                       if (p->id == -1 && strcmp(name, p->name) == 0 &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 30)
#88: FILE: arch/arm/plat-s3c/clock.c:105:
+                       if (p->id == -1 && strcmp(name, p->name) == 0 &&
[...]
                               clk = p;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: arch/arm/plat-s3c/clock.c:106:
+                       if (p->id == -1 && strcmp(name, p->name) == 0 &&
                           try_module_get(p->owner)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: arch/arm/plat-s3c/clock.c:114:
+       if (dotpos)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#96: FILE: arch/arm/plat-s3c/clock.c:114:
+       if (dotpos)
+               kfree(name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: arch/arm/plat-s3c/clock.c:115:
+               kfree(name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/arm/plat-s3c/clock.c:115:
+               kfree(name);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#105: FILE: arch/arm/plat-s3c/clock.c:235:
+int clk_for_each(int(*fn)(struct clk *, void *), void *data)
+       {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/arm/plat-s3c/clock.c:236:
+       {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: arch/arm/plat-s3c/clock.c:237:
+       struct clk *clk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/arm/plat-s3c/clock.c:238:
+       int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: arch/arm/plat-s3c/clock.c:240:
+       list_for_each_entry(clk, &clocks, list)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#110: FILE: arch/arm/plat-s3c/clock.c:240:
+       list_for_each_entry(clk, &clocks, list)
+       {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#110: FILE: arch/arm/plat-s3c/clock.c:240:
+       list_for_each_entry(clk, &clocks, list)
+       {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: arch/arm/plat-s3c/clock.c:241:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: arch/arm/plat-s3c/clock.c:242:
+               ret = fn(clk, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: arch/arm/plat-s3c/clock.c:242:
+               ret = fn(clk, data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: arch/arm/plat-s3c/clock.c:243:
+               if (ret)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: arch/arm/plat-s3c/clock.c:243:
+               if (ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#113: FILE: arch/arm/plat-s3c/clock.c:243:
+               if (ret)
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: arch/arm/plat-s3c/clock.c:244:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: arch/arm/plat-s3c/clock.c:244:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/arm/plat-s3c/clock.c:245:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/arm/plat-s3c/clock.c:246:
+       return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/arm/plat-s3c/clock.c:253:
+       char *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/arm/plat-s3c/clock.c:254:
+       int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/arm/plat-s3c/clock.c:256:
+       if (IS_ERR(clk))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#126: FILE: arch/arm/plat-s3c/clock.c:256:
+       if (IS_ERR(clk))
+               return ERR_PTR(-EINVAL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: arch/arm/plat-s3c/clock.c:257:
+               return ERR_PTR(-EINVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: arch/arm/plat-s3c/clock.c:257:
+               return ERR_PTR(-EINVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: arch/arm/plat-s3c/clock.c:259:
+       len = strlen(clk->name) + 8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/arm/plat-s3c/clock.c:260:
+       s = kmalloc(len, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: arch/arm/plat-s3c/clock.c:261:
+       if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#131: FILE: arch/arm/plat-s3c/clock.c:261:
+       if (!s)
+               return ERR_PTR(-ENOMEM);

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: arch/arm/plat-s3c/clock.c:262:
+               return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/arm/plat-s3c/clock.c:262:
+               return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/arm/plat-s3c/clock.c:263:
+       if (clk->id == -1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#133: FILE: arch/arm/plat-s3c/clock.c:263:
+       if (clk->id == -1)
+               strlcpy(s, clk->name, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: arch/arm/plat-s3c/clock.c:264:
+               strlcpy(s, clk->name, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/arm/plat-s3c/clock.c:264:
+               strlcpy(s, clk->name, len);$

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#134: FILE: arch/arm/plat-s3c/clock.c:264:
+               strlcpy(s, clk->name, len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/arm/plat-s3c/clock.c:265:
+       else if (snprintf(s, len, "%s.%d", clk->name, clk->id) > len)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#135: FILE: arch/arm/plat-s3c/clock.c:265:
+       else if (snprintf(s, len, "%s.%d", clk->name, clk->id) > len)
+               s[len - 1] = '\0';

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: arch/arm/plat-s3c/clock.c:266:
+               s[len - 1] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/arm/plat-s3c/clock.c:266:
+               s[len - 1] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: arch/arm/plat-s3c/clock.c:267:
+       return s;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 52 warnings, 3 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
