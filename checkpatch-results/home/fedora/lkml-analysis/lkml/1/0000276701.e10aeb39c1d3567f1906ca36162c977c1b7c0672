WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-davem

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#137: 
Ilpo Järvinen (2):
      ^

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#242: FILE: drivers/net/cpmac.c:41:
+#include <asm/atomic.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: drivers/net/cpmac.c:251:
+	struct cpmac_desc *dump = priv->rx_head;
+	do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#306: FILE: drivers/net/cpmac.c:449:
+			/* The last update to eoq->hw_next didn't happen
+			* soon enough, and the receiver stopped here.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#312: FILE: drivers/net/cpmac.c:455:
+					printk(KERN_ERR "%s: poll found a"

WARNING:SPLIT_STRING: quoted string split across lines
#313: FILE: drivers/net/cpmac.c:456:
+					printk(KERN_ERR "%s: poll found a"
+						" duplicate EOQ: %p and %p\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#330: FILE: drivers/net/cpmac.c:474:
+		 * add what we did free to the rx list */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#337: FILE: drivers/net/cpmac.c:481:
+	 * of quota limits), check to see if the tail of the queue has EOQ set.
+	* We should immediately restart in that case so that the receiver can

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#340: FILE: drivers/net/cpmac.c:484:
+	* out of ring space (assuming dev->weight < ring_size) */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: drivers/net/cpmac.c:487:
+	if (!restart &&
+	     (priv->rx_head->prev->dataflags & (CPMAC_OWN|CPMAC_EOQ))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#343: FILE: drivers/net/cpmac.c:487:
+	     (priv->rx_head->prev->dataflags & (CPMAC_OWN|CPMAC_EOQ))
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#347: FILE: drivers/net/cpmac.c:491:
+		/* reset EOQ so the poll loop (above) doesn't try to
+		* restart this when it eventually gets to this descriptor.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#357: FILE: drivers/net/cpmac.c:501:
+			printk(KERN_WARNING "%s: rx dma ring overrun\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: drivers/net/cpmac.c:506:
+				printk(KERN_ERR "%s: cpmac_poll is trying to "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpmac_poll', this function's name, in a string
#362: FILE: drivers/net/cpmac.c:506:
+				printk(KERN_ERR "%s: cpmac_poll is trying to "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#363: FILE: drivers/net/cpmac.c:507:
+				printk(KERN_ERR "%s: cpmac_poll is trying to "
+					"restart rx from a descriptor that's "

WARNING:SPLIT_STRING: quoted string split across lines
#364: FILE: drivers/net/cpmac.c:508:
+					"restart rx from a descriptor that's "
+					"not free: %p\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#380: FILE: drivers/net/cpmac.c:523:
+		 * revert to interrupt-driven mode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: drivers/net/cpmac.c:533:
+	 * Reset hardware to try to recover rather than wedging. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#394: FILE: drivers/net/cpmac.c:536:
+		printk(KERN_ERR "%s: cpmac_poll is confused. "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpmac_poll', this function's name, in a string
#394: FILE: drivers/net/cpmac.c:536:
+		printk(KERN_ERR "%s: cpmac_poll is confused. "

WARNING:SPLIT_STRING: quoted string split across lines
#395: FILE: drivers/net/cpmac.c:537:
+		printk(KERN_ERR "%s: cpmac_poll is confused. "
+				"Resetting hardware\n", priv->dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#397: FILE: drivers/net/cpmac.c:539:
+		printk(KERN_DEBUG "%s: RX_PTR(0)=0x%08x RX_ACK(0)=0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/net/cpmac.c:540:
+		printk(KERN_DEBUG "%s: RX_PTR(0)=0x%08x RX_ACK(0)=0x%08x\n",
+			priv->dev->name,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#486: FILE: drivers/net/cpmac.c:789:
+				printk(KERN_WARNING "%s: host error %d on rx "

WARNING:SPLIT_STRING: quoted string split across lines
#487: FILE: drivers/net/cpmac.c:790:
+				printk(KERN_WARNING "%s: host error %d on rx "
+				     "channel %d (macstatus %08x), resetting\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#490: FILE: drivers/net/cpmac.c:793:
+				printk(KERN_WARNING "%s: host error %d on tx "

WARNING:SPLIT_STRING: quoted string split across lines
#491: FILE: drivers/net/cpmac.c:794:
+				printk(KERN_WARNING "%s: host error %d on tx "
+				     "channel %d (macstatus %08x), resetting\n",

WARNING:TABSTOP: Statements should start on a tabstop
#745: FILE: drivers/net/pcmcia/fmvj18x_cs.c:394:
+	    if (link->conf.ConfigBase == 0x0fe0)

CHECK:CAMELCASE: Avoid CamelCase: <ConfigBase>
#745: FILE: drivers/net/pcmcia/fmvj18x_cs.c:394:
+	    if (link->conf.ConfigBase == 0x0fe0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: drivers/net/pcmcia/fmvj18x_cs.c:396:
+^I    else if (link->card_id == PRODID_FUJITSU_MBH10302) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#747: FILE: drivers/net/pcmcia/fmvj18x_cs.c:396:
+	    else if (link->card_id == PRODID_FUJITSU_MBH10302) 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: drivers/net/pcmcia/xirc2ps_cs.c:1464:
+    unsigned value;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: drivers/net/pcmcia/xirc2ps_cs.c:1464:
+    unsigned value;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: drivers/net/pcmcia/xirc2ps_cs.c:1467:
+    value = GetByte(XIRCREG42_SWC1) & 0xC0;$

CHECK:CAMELCASE: Avoid CamelCase: <GetByte>
#762: FILE: drivers/net/pcmcia/xirc2ps_cs.c:1467:
+    value = GetByte(XIRCREG42_SWC1) & 0xC0;

CHECK:CAMELCASE: Avoid CamelCase: <PutByte>
#766: FILE: drivers/net/pcmcia/xirc2ps_cs.c:1470:
+	PutByte(XIRCREG42_SWC1, value | 0x06); /* set MPE and PME */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'link == LINK_UP'
#886: FILE: drivers/net/s2io.c:1224:
+			if (use_continuous_tx_intrs && (link == LINK_UP))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nic->config.tx_steering_type ==
 				TX_DEFAULT_STEERING'
#900: FILE: drivers/net/s2io.c:1234:
+			if ((nic->config.tx_steering_type ==
+				TX_DEFAULT_STEERING) &&
+				(config->tx_fifo_num > 1) &&
+				(i >= nic->udp_fifo_idx) &&
+				(i < (nic->udp_fifo_idx +
+				nic->total_udp_fifos)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'config->tx_fifo_num > 1'
#900: FILE: drivers/net/s2io.c:1234:
+			if ((nic->config.tx_steering_type ==
+				TX_DEFAULT_STEERING) &&
+				(config->tx_fifo_num > 1) &&
+				(i >= nic->udp_fifo_idx) &&
+				(i < (nic->udp_fifo_idx +
+				nic->total_udp_fifos)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i >= nic->udp_fifo_idx'
#900: FILE: drivers/net/s2io.c:1234:
+			if ((nic->config.tx_steering_type ==
+				TX_DEFAULT_STEERING) &&
+				(config->tx_fifo_num > 1) &&
+				(i >= nic->udp_fifo_idx) &&
+				(i < (nic->udp_fifo_idx +
+				nic->total_udp_fifos)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#989: FILE: drivers/net/s2io.c:2889:
+}
+static int s2io_poll_inta(struct napi_struct *napi, int budget)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1120: FILE: drivers/net/s2io.c:3781:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1125: FILE: drivers/net/s2io.c:3786:
+		msix_index = (i) ? ((i-1) * 8 + 1): 0;
 		                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1125: FILE: drivers/net/s2io.c:3786:
+		msix_index = (i) ? ((i-1) * 8 + 1): 0;
 		                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <vBIT>
#1129: FILE: drivers/net/s2io.c:3789:
+		val64 = (s2BIT(7) | s2BIT(15) | vBIT(msix_index, 26, 6));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1149: FILE: drivers/net/s2io.c:3809:
+		msix_index = (i) ? ((i-1) * 8 + 1): 0;
 		                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1149: FILE: drivers/net/s2io.c:3809:
+		msix_index = (i) ? ((i-1) * 8 + 1): 0;
 		                                  ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1167: FILE: drivers/net/s2io.c:3832:
+	nic->entries = kmalloc(nic->num_entries * sizeof(struct msix_entry),
 			       GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1176: FILE: drivers/net/s2io.c:3841:
 	nic->mac_control.stats_info->sw_stat.mem_allocated
+		+= (nic->num_entries * sizeof(struct msix_entry));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: drivers/net/s2io.c:3847:
+		kmalloc(nic->num_entries * sizeof(struct s2io_msix_entry),
 				   GFP_KERNEL);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1191: FILE: drivers/net/s2io.c:3854:
 		nic->mac_control.stats_info->sw_stat.mem_freed
+			+= (nic->num_entries * sizeof(struct msix_entry));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1200: FILE: drivers/net/s2io.c:3858:
 	 nic->mac_control.stats_info->sw_stat.mem_allocated
+		+= (nic->num_entries * sizeof(struct s2io_msix_entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1202: FILE: drivers/net/s2io.c:3860:
+	memset(nic->s2io_entries, 0,
+		nic->num_entries * sizeof(struct s2io_msix_entry));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1234: FILE: drivers/net/s2io.c:3878:
+		nic->s2io_entries[j+1].arg = &nic->mac_control.rings[j];
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1235: FILE: drivers/net/s2io.c:3879:
+		nic->s2io_entries[j+1].type = MSIX_RING_TYPE;
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1236: FILE: drivers/net/s2io.c:3880:
+		nic->s2io_entries[j+1].in_use = MSIX_FLG;
 		                   ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1255: FILE: drivers/net/s2io.c:3892:
 		nic->mac_control.stats_info->sw_stat.mem_freed
+			+= (nic->num_entries * sizeof(struct msix_entry));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1259: FILE: drivers/net/s2io.c:3895:
 		nic->mac_control.stats_info->sw_stat.mem_freed
+			+= (nic->num_entries * sizeof(struct s2io_msix_entry));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1314: FILE: drivers/net/s2io.c:4049:
 			sp->mac_control.stats_info->sw_stat.mem_freed
+			+= (sp->num_entries * sizeof(struct msix_entry));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#1320: FILE: drivers/net/s2io.c:4054:
 			sp->mac_control.stats_info->sw_stat.mem_freed
+			+= (sp->num_entries * sizeof(struct s2io_msix_entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1451: FILE: drivers/net/s2io.c:7042:
+					err = request_irq(sp->entries[i].vector,
+						s2io_msix_ring_handle, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: drivers/net/s2io.c:7048:
+					sprintf(sp->desc[i], "%s:MSI-X-%d-TX",
 					dev->name, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: drivers/net/s2io.c:7050:
+					err = request_irq(sp->entries[i].vector,
+						s2io_msix_fifo_handle, 0,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1487: FILE: drivers/net/s2io.c:7056:
+				if (!(sp->msix_info[i].addr &&
[...]
 						(unsigned long long)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1488: FILE: drivers/net/s2io.c:7057:
+				if (!(sp->msix_info[i].addr &&
 					sp->msix_info[i].data)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: drivers/net/s2io.c:7059:
+					DBG_PRINT(ERR_DBG,
+						"%s @Addr:0x%llx Data:0x%llx\n",

CHECK:BRACES: Unbalanced braces around else statement
#1500: FILE: drivers/net/s2io.c:7065:
+				} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: drivers/net/s2io.c:7071:
+					DBG_PRINT(ERR_DBG,
+						"%s:MSI-X-%d registration "

WARNING:SPLIT_STRING: quoted string split across lines
#1507: FILE: drivers/net/s2io.c:7072:
+						"%s:MSI-X-%d registration "
+						"failed\n", dev->name, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1510: FILE: drivers/net/s2io.c:7075:
+					DBG_PRINT(ERR_DBG,
+						"%s: Defaulting to INTA\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1536: FILE: drivers/net/s2io.c:7088:
+			DBG_PRINT(INFO_DBG, "MSI-X-TX entries enabled"
+						" through alarm vector\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1548: FILE: drivers/net/s2io.c:7131:
+		int off = 0;
+		if (config->intr_type ==  MSI_X) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1548: FILE: drivers/net/s2io.c:7131:
+		if (config->intr_type ==  MSI_X) {
[...]
+		else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1566: FILE: drivers/net/s2io.c:7231:
+		int i;
+		if (config->intr_type ==  MSI_X) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1618: FILE: drivers/net/s2io.c:8031:
+		if (ret) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1620: FILE: drivers/net/s2io.c:8033:
+			DBG_PRINT(ERR_DBG,
+			  "%s: MSI-X requested but failed to enable\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: drivers/net/s2io.c:8042:
+			netif_napi_add(dev, &mac_control->rings[i].napi,
+				s2io_poll_msix, 64);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sp->device_type == XFRAME_II_DEVICE'
#1642: FILE: drivers/net/s2io.c:8098:
+	if ((sp->device_type == XFRAME_II_DEVICE) &&
+		(config->intr_type == MSI_X))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'config->intr_type == MSI_X'
#1642: FILE: drivers/net/s2io.c:8098:
+	if ((sp->device_type == XFRAME_II_DEVICE) &&
+		(config->intr_type == MSI_X))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1643: FILE: drivers/net/s2io.c:8099:
+	if ((sp->device_type == XFRAME_II_DEVICE) &&
+		(config->intr_type == MSI_X))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1826: FILE: drivers/net/sb1250-mac.c:796:
+ *  ^I    d - DMA channel descriptor$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1880: FILE: drivers/net/sb1250-mac.c:1036:
+ *  ^I    d - DMA channel$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around s->sbm_rxdma
#1927: FILE: drivers/net/sb1250-mac.c:1575:
+	sbdma_fillring(s, &(s->sbm_rxdma));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1965: FILE: drivers/net/sc92031.c:977:
+		memset(priv->tx_bufs + entry * TX_BUF_SIZE + len,
+				0, ETH_ZLEN - len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2042: FILE: drivers/net/sfc/efx.c:204:
+	 * it's cleared before then. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2108: FILE: drivers/net/sfc/efx.c:433:
+	 * then.  Similarly, make sure it sees the enabled flag set. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efx->loopback_mode != LOOPBACK_NONE'
#2424: FILE: drivers/net/sfc/falcon.c:1727:
+	if ((falcon_rev(efx) < FALCON_REV_B0) ||
 	    (efx->loopback_mode != LOOPBACK_NONE))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2636: FILE: drivers/net/sfc/falcon_io.h:65:
+}
+static inline __le64 _falcon_readq(struct efx_nic *efx, unsigned int reg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2647: FILE: drivers/net/sfc/falcon_io.h:76:
+}
+static inline __le32 _falcon_readl(struct efx_nic *efx, unsigned int reg)

CHECK:SPACING: No space is necessary after a cast
#2830: FILE: drivers/net/sfc/rx.c:94:
+	return (__force unsigned long) buf->data & (PAGE_SIZE - 1);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2832: FILE: drivers/net/sfc/rx.c:96:
+}
+static inline unsigned int efx_rx_buf_size(struct efx_nic *efx)

CHECK:SPACING: No space is necessary after a cast
#2958: FILE: drivers/net/sfc/selftest.c:293:
+	received = (struct efx_loopback_payload *) buf_ptr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3096: FILE: drivers/net/sfc/tx.c:642:
+	while (*p != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_queue->tso_headers_free"
#3110: FILE: drivers/net/sfc/tx.c:943:
+		if (tx_queue->tso_headers_free == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "grp"
#3197: FILE: drivers/net/sky2.c:1187:
+	sky2_set_vlan_mode(hw, port, grp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sky2->vlgrp"
#3206: FILE: drivers/net/sky2.c:1427:
+	sky2_set_vlan_mode(hw, port, sky2->vlgrp != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3315: FILE: drivers/net/ucc_geth.c:2190:
+					dma_unmap_single(&ugeth->dev->dev,
 						in_be32(&((struct qe_bd __iomem *)bd)->buf),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3324: FILE: drivers/net/ucc_geth.c:3410:
+		      dma_map_single(&ugeth->dev->dev, skb->data,
+			      skb->len, DMA_TO_DEVICE));

CHECK:SPACING: No space is necessary after a cast
#3339: FILE: drivers/net/usb/asix.c:1446:
+	.driver_info = (unsigned long) &ax88772_info,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3408: FILE: drivers/net/wan/hdlc.c:330:
+		BUG_ON(!*p);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3424: FILE: drivers/net/wan/hdlc_cisco.c:59:
+	spinlock_t lock;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3528: FILE: drivers/net/wan/hdlc_cisco.c:299:
+	st->txseq = st->rxseq = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276701.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 40 warnings, 61 checks, 3000 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276701.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
