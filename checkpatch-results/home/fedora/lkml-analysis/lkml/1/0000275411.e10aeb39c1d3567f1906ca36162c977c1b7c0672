WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: fs/ubifs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: fs/ubifs/dir.c:17:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: fs/ubifs/dir.c:121:
+	if (dir->i_mode & S_ISGID) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#175: FILE: fs/ubifs/dir.c:125:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#178: FILE: fs/ubifs/dir.c:128:
+	inode->i_mtime = inode->i_atime = inode->i_ctime =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: fs/ubifs/dir.c:155:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#224: FILE: fs/ubifs/dir.c:174:
+			iput(inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#266: FILE: fs/ubifs/dir.c:216:
+				   struct nameidata *nd)
 				                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#327: FILE: fs/ubifs/dir.c:277:
+			struct nameidata *nd)
 			                  ^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#363: FILE: fs/ubifs/dir.c:313:
+	iput(inode);
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: fs/ubifs/dir.c:342:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#555: FILE: fs/ubifs/dir.c:505:
+	inode->i_ctime = dir->i_mtime = dir->i_ctime =

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#572: FILE: fs/ubifs/dir.c:522:
+	iput(inode);
 	^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#597: FILE: fs/ubifs/dir.c:547:
+	dir->i_mtime = dir->i_ctime = ubifs_current_time(dir);

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#627: FILE: fs/ubifs/dir.c:577:
+ * in case of of errors.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#674: FILE: fs/ubifs/dir.c:624:
+	dir->i_mtime = dir->i_ctime = ubifs_current_time(dir);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#724: FILE: fs/ubifs/dir.c:674:
+	dir->i_mtime = dir->i_ctime = ubifs_current_time(dir);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#743: FILE: fs/ubifs/dir.c:693:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#806: FILE: fs/ubifs/dir.c:756:
+	iput(inode);
 	^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#833: FILE: fs/ubifs/dir.c:783:
+	inode = ubifs_new_inode(c, dir, S_IFLNK | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#872: FILE: fs/ubifs/dir.c:822:
+	iput(inode);
 	^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: fs/ubifs/dir.c:844:
+	dbg_gen("dent '%.*s' ino %lu in dir ino %lu to dent '%.*s' in "
+		"dir ino %lu", old_dentry->d_name.len, old_dentry->d_name.name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#936: FILE: fs/ubifs/dir.c:886:
+	old_dir->i_mtime = old_dir->i_ctime = time;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#937: FILE: fs/ubifs/dir.c:887:
+	new_dir->i_mtime = new_dir->i_ctime = time;

CHECK:BRACES: braces {} should be used on all arms of this statement
#951: FILE: fs/ubifs/dir.c:901:
+	if (unlink) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#961: FILE: fs/ubifs/dir.c:911:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#973: FILE: fs/ubifs/dir.c:923:
+	if (unlink) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#977: FILE: fs/ubifs/dir.c:927:
+	} else

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1036: FILE: fs/ubifs/dir.c:986:
+struct inode_operations ubifs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1056: FILE: fs/ubifs/dir.c:1006:
+struct file_operations ubifs_dir_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1073: FILE: fs/ubifs/file.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1088: FILE: fs/ubifs/file.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1259: FILE: fs/ubifs/file.c:187:
+			     loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1259: FILE: fs/ubifs/file.c:187:
+			     loff_t pos, unsigned len, unsigned flags,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1267: FILE: fs/ubifs/file.c:195:
+	loff_t i_size =  i_size_read(inode);
+	int uninitialized_var(err);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1267: FILE: fs/ubifs/file.c:195:
+	int uninitialized_var(err);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'err' should also have an identifier name
#1267: FILE: fs/ubifs/file.c:195:
+	int uninitialized_var(err);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:BRACES: Unbalanced braces around else statement
#1326: FILE: fs/ubifs/file.c:254:
+		else {

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1350: FILE: fs/ubifs/file.c:278:
+		 * case. If this was done, we do not free the the inode budget,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1380: FILE: fs/ubifs/file.c:308:
+			   loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1380: FILE: fs/ubifs/file.c:308:
+			   loff_t pos, unsigned len, unsigned copied,

WARNING:REPEATED_WORD: Possible repeated word: 'one'
#1463: FILE: fs/ubifs/file.c:391:
+ * of changing one one page of data which already exists on the flash media.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1657: FILE: fs/ubifs/file.c:585:
+		inode->i_mtime = inode->i_ctime = ubifs_current_time(inode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1713: FILE: fs/ubifs/file.c:641:
+	if (PageChecked(page)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1717: FILE: fs/ubifs/file.c:645:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1726: FILE: fs/ubifs/file.c:654:
+static void *ubifs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1730: FILE: fs/ubifs/file.c:658:
+	nd_set_link(nd, ui->data);
 	            ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1798: FILE: fs/ubifs/file.c:726:
+		inode->i_mtime = inode->i_ctime = now;

WARNING:SPLIT_STRING: quoted string split across lines
#1935: FILE: fs/ubifs/file.c:863:
+			ubifs_warn("out of space for mmapped file "
+				   "(inode number %lu)", inode->i_ino);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1947: FILE: fs/ubifs/file.c:875:
+	if (PagePrivate(page))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1949: FILE: fs/ubifs/file.c:877:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1958: FILE: fs/ubifs/file.c:886:
+		inode->i_mtime = inode->i_ctime = now;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1975: FILE: fs/ubifs/file.c:903:
+struct vm_operations_struct ubifs_file_vm_ops = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1992: FILE: fs/ubifs/file.c:920:
+struct address_space_operations ubifs_file_address_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#2002: FILE: fs/ubifs/file.c:930:
+struct inode_operations ubifs_file_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#2013: FILE: fs/ubifs/file.c:941:
+struct inode_operations ubifs_symlink_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2020: FILE: fs/ubifs/file.c:948:
+struct file_operations ubifs_file_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2039: FILE: fs/ubifs/ioctl.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2055: FILE: fs/ubifs/ioctl.c:17:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2149: FILE: fs/ubifs/ioctl.c:111:
+	memset(&req, 0 , sizeof(struct ubifs_budget_req));
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#2196: FILE: fs/ubifs/ioctl.c:158:
+		return put_user(flags, (int __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#2205: FILE: fs/ubifs/ioctl.c:167:
+		if (get_user(flags, (int __user *) arg))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000275411.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 36 warnings, 23 checks, 2188 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000275411.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
