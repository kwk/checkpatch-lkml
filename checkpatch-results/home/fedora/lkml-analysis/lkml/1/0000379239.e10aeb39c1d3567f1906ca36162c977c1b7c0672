CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: fs/locks.c:2039:
+static void lock_get_status(struct seq_file *f, struct file_lock *fl,
+							int id, char *pfx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: fs/locks.c:2049:
+		seq_printf(f, "%6s %s ",
 			     (fl->fl_flags & FL_ACCESS) ? "ACCESS" : "POSIX ",

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#82: FILE: fs/locks.c:2054:
+			seq_printf(f, "FLOCK  MSNFS     ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#85: FILE: fs/locks.c:2056:
+			seq_printf(f, "FLOCK  ADVISORY  ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#89: FILE: fs/locks.c:2059:
+		seq_printf(f, "LEASE  ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#92: FILE: fs/locks.c:2061:
+			seq_printf(f, "BREAKING  ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#95: FILE: fs/locks.c:2063:
+			seq_printf(f, "ACTIVE    ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#98: FILE: fs/locks.c:2065:
+			seq_printf(f, "BREAKER   ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#101: FILE: fs/locks.c:2067:
+		seq_printf(f, "UNKNOWN UNKNOWN  ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: fs/locks.c:2071:
+		seq_printf(f, "%s ",
 			       (fl->fl_type & LOCK_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: fs/locks.c:2076:
+		seq_printf(f, "%s ",
 			       (fl->fl_type & F_INPROGRESS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: fs/locks.c:2083:
+		seq_printf(f, "%d %s:%ld ", fl->fl_pid,
 				inode->i_sb->s_id, inode->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: fs/locks.c:2087:
+		seq_printf(f, "%d %02x:%02x:%ld ", fl->fl_pid,
 				MAJOR(inode->i_sb->s_dev),

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#135: FILE: fs/locks.c:2095:
+			seq_printf(f, "%Ld EOF\n", fl->fl_start);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#139: FILE: fs/locks.c:2097:
+			seq_printf(f, "%Ld %Ld\n", fl->fl_start, fl->fl_end);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#142: FILE: fs/locks.c:2099:
+		seq_printf(f, "0 EOF\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#232: FILE: fs/locks.c:2137:
+struct seq_operations locks_seq_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#261: FILE: fs/proc/proc_misc.c:632:
+extern struct seq_operations locks_seq_operations;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#262: FILE: fs/proc/proc_misc.c:633:
+static int locks_open(struct inode *inode, struct file *filp)
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#269: FILE: fs/proc/proc_misc.c:635:
+	return seq_open(filp, &locks_seq_operations);
 	                ^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379239.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 6 checks, 234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379239.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
