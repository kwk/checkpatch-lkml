CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#47: FILE: drivers/net/pci-skeleton.c:14:
+		Written 1997-2000 by Donald Becker.
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Written>
#47: FILE: drivers/net/pci-skeleton.c:14:
+		Written 1997-2000 by Donald Becker.

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Donald>
#47: FILE: drivers/net/pci-skeleton.c:14:
+		Written 1997-2000 by Donald Becker.

CHECK:CAMELCASE: Avoid CamelCase: <Becker>
#47: FILE: drivers/net/pci-skeleton.c:14:
+		Written 1997-2000 by Donald Becker.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#72: FILE: drivers/net/pci-skeleton.c:107:
 static char version[] __devinitdata =

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#86: FILE: drivers/net/pci-skeleton.c:124:
+	printk(KERN_DEBUG "%s: " fmt, __func__ , ## args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#86: FILE: drivers/net/pci-skeleton.c:124:
+	printk(KERN_DEBUG "%s: " fmt, __func__ , ## args)
 	                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#92: FILE: drivers/net/pci-skeleton.c:129:
+		printk(KERN_DEBUG fmt, ##args);		\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#105: FILE: drivers/net/pci-skeleton.c:136:
+#define assert(expr)						\
+	if (!(expr)) {						\
+		printk("Assertion failed! %s,%s,%s,line=%d\n",	\
+		       #expr, __FILE__, __func__, __LINE__);	\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#107: FILE: drivers/net/pci-skeleton.c:138:
+		printk("Assertion failed! %s,%s,%s,line=%d\n",	\

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#136: FILE: drivers/net/pci-skeleton.c:177:
+/* The following settings are log_2(bytes)-4:
+   0==16 bytes 1==32 2==64 3==128 4==256 5==512 6==1024 7==end of packet.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Config1Clear>
#174: FILE: drivers/net/pci-skeleton.c:280:
+	Config1Clear = (1 << 7) | (1 << 6) | (1 << 3) | (1 << 2) | (1 << 1),

CHECK:CAMELCASE: Avoid CamelCase: <TxDMAShift>
#183: FILE: drivers/net/pci-skeleton.c:339:
+	TxDMAShift = 8,		/* DMA burst value(0-7) is shift this many bits */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#277: FILE: drivers/net/pci-skeleton.c:549:
+#define NETDRV_W8_F(reg, val8)			\
+do {						\
+	writeb((val8), ioaddr + (reg));		\
+	readb(ioaddr + (reg));			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#282: FILE: drivers/net/pci-skeleton.c:554:
+#define NETDRV_W16_F(reg, val16)		\
+do {						\
+	writew((val16), ioaddr + (reg));	\
+	readw(ioaddr + (reg));			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#287: FILE: drivers/net/pci-skeleton.c:559:
+#define NETDRV_W32_F(reg, val32)		\
+do {						\
+	writel((val32), ioaddr + (reg));	\
+	readl(ioaddr + (reg));			\
+} while (0)

CHECK:SPACING: No space is necessary after a cast
#315: FILE: drivers/net/pci-skeleton.c:585:
+#define NETDRV_R32(reg)		((unsigned long) readl(ioaddr + (reg)))

CHECK:CAMELCASE: Avoid CamelCase: <RxCfgEarlyRxNone>
#326: FILE: drivers/net/pci-skeleton.c:595:
+	RxCfgEarlyRxNone | RxCfgRcv32K | RxNoWrap |

CHECK:CAMELCASE: Avoid CamelCase: <RxCfgRcv32K>
#326: FILE: drivers/net/pci-skeleton.c:595:
+	RxCfgEarlyRxNone | RxCfgRcv32K | RxNoWrap |

CHECK:CAMELCASE: Avoid CamelCase: <RxNoWrap>
#326: FILE: drivers/net/pci-skeleton.c:595:
+	RxCfgEarlyRxNone | RxCfgRcv32K | RxNoWrap |

CHECK:CAMELCASE: Avoid CamelCase: <RxCfgFIFOShift>
#327: FILE: drivers/net/pci-skeleton.c:596:
+	(RX_FIFO_THRESH << RxCfgFIFOShift) |

CHECK:CAMELCASE: Avoid CamelCase: <RxCfgDMAShift>
#328: FILE: drivers/net/pci-skeleton.c:597:
+	(RX_DMA_BURST << RxCfgDMAShift);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#334: FILE: drivers/net/pci-skeleton.c:600:
+static int __devinit netdrv_init_board(struct pci_dev *pdev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdev"
#349: FILE: drivers/net/pci-skeleton.c:614:
+	assert(pdev != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioaddr_out"
#350: FILE: drivers/net/pci-skeleton.c:615:
+	assert(ioaddr_out != NULL);

CHECK:CAMELCASE: Avoid CamelCase: <ChipCmd>
#428: FILE: drivers/net/pci-skeleton.c:691:
+	NETDRV_W8(ChipCmd, (NETDRV_R8(ChipCmd) & ChipCmdClear) | CmdReset);

CHECK:CAMELCASE: Avoid CamelCase: <ChipCmdClear>
#428: FILE: drivers/net/pci-skeleton.c:691:
+	NETDRV_W8(ChipCmd, (NETDRV_R8(ChipCmd) & ChipCmdClear) | CmdReset);

CHECK:CAMELCASE: Avoid CamelCase: <CmdReset>
#428: FILE: drivers/net/pci-skeleton.c:691:
+	NETDRV_W8(ChipCmd, (NETDRV_R8(ChipCmd) & ChipCmdClear) | CmdReset);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#437: FILE: drivers/net/pci-skeleton.c:698:
+			udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#448: FILE: drivers/net/pci-skeleton.c:705:
+	assert(inb(pio_start+Config0) == readb(ioaddr+Config0));
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#448: FILE: drivers/net/pci-skeleton.c:705:
+	assert(inb(pio_start+Config0) == readb(ioaddr+Config0));
 	                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Config0>
#448: FILE: drivers/net/pci-skeleton.c:705:
+	assert(inb(pio_start+Config0) == readb(ioaddr+Config0));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#449: FILE: drivers/net/pci-skeleton.c:706:
+	assert(inb(pio_start+Config1) == readb(ioaddr+Config1));
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#449: FILE: drivers/net/pci-skeleton.c:706:
+	assert(inb(pio_start+Config1) == readb(ioaddr+Config1));
 	                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Config1>
#449: FILE: drivers/net/pci-skeleton.c:706:
+	assert(inb(pio_start+Config1) == readb(ioaddr+Config1));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: drivers/net/pci-skeleton.c:707:
+	assert(inb(pio_start+TxConfig) == readb(ioaddr+TxConfig));
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: drivers/net/pci-skeleton.c:707:
+	assert(inb(pio_start+TxConfig) == readb(ioaddr+TxConfig));
 	                                              ^

CHECK:CAMELCASE: Avoid CamelCase: <TxConfig>
#450: FILE: drivers/net/pci-skeleton.c:707:
+	assert(inb(pio_start+TxConfig) == readb(ioaddr+TxConfig));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#451: FILE: drivers/net/pci-skeleton.c:708:
+	assert(inb(pio_start+RxConfig) == readb(ioaddr+RxConfig));
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#451: FILE: drivers/net/pci-skeleton.c:708:
+	assert(inb(pio_start+RxConfig) == readb(ioaddr+RxConfig));
 	                                              ^

CHECK:CAMELCASE: Avoid CamelCase: <RxConfig>
#451: FILE: drivers/net/pci-skeleton.c:708:
+	assert(inb(pio_start+RxConfig) == readb(ioaddr+RxConfig));

CHECK:CAMELCASE: Avoid CamelCase: <ChipVersion>
#457: FILE: drivers/net/pci-skeleton.c:712:
+	tmp = NETDRV_R8(ChipVersion);

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#469: FILE: drivers/net/pci-skeleton.c:720:
+	dev_printk(KERN_DEBUG, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#471: FILE: drivers/net/pci-skeleton.c:722:
+	dev_printk(KERN_DEBUG, &pdev->dev, "TxConfig = %#lx\n",

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#513: FILE: drivers/net/pci-skeleton.c:763:
+static int __devinit netdrv_init_one(struct pci_dev *pdev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdev"
#527: FILE: drivers/net/pci-skeleton.c:781:
+	assert(pdev != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ent"
#528: FILE: drivers/net/pci-skeleton.c:782:
+	assert(ent != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioaddr"
#545: FILE: drivers/net/pci-skeleton.c:794:
+	assert(ioaddr != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#546: FILE: drivers/net/pci-skeleton.c:795:
+	assert(dev != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tp"
#547: FILE: drivers/net/pci-skeleton.c:796:
+	assert(tp != NULL);

CHECK:CAMELCASE: Avoid CamelCase: <Cfg9346>
#589: FILE: drivers/net/pci-skeleton.c:832:
+	NETDRV_W8_F(Cfg9346, Cfg9346_Unlock);

CHECK:CAMELCASE: Avoid CamelCase: <Cfg9346_Unlock>
#589: FILE: drivers/net/pci-skeleton.c:832:
+	NETDRV_W8_F(Cfg9346, Cfg9346_Unlock);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#613: FILE: drivers/net/pci-skeleton.c:854:
+static void __devexit netdrv_remove_one(struct pci_dev *pdev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#623: FILE: drivers/net/pci-skeleton.c:861:
+	assert(dev != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "np"
#627: FILE: drivers/net/pci-skeleton.c:864:
+	assert(np != NULL);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#683: FILE: drivers/net/pci-skeleton.c:906:
+static int __devinit read_eeprom(void *ioaddr, int location, int addr_len)

CHECK:CAMELCASE: Avoid CamelCase: <MediaStatus>
#955: FILE: drivers/net/pci-skeleton.c:1120:
+		   dev->irq, NETDRV_R8(MediaStatus),

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#989: FILE: drivers/net/pci-skeleton.c:1147:
+	udelay(100);

CHECK:CAMELCASE: Avoid CamelCase: <CmdRxEnb>
#1007: FILE: drivers/net/pci-skeleton.c:1160:
+		    CmdRxEnb | CmdTxEnb);

CHECK:CAMELCASE: Avoid CamelCase: <CmdTxEnb>
#1007: FILE: drivers/net/pci-skeleton.c:1160:
+		    CmdRxEnb | CmdTxEnb);

CHECK:CAMELCASE: Avoid CamelCase: <RxConfigMask>
#1012: FILE: drivers/net/pci-skeleton.c:1163:
+		(NETDRV_R32(RxConfig) & rtl_chip_info[tp->chipset].RxConfigMask);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1023: FILE: drivers/net/pci-skeleton.c:1171:
+	udelay(10);

CHECK:CAMELCASE: Avoid CamelCase: <Cfg9346_Lock>
#1030: FILE: drivers/net/pci-skeleton.c:1176:
+	NETDRV_W8_F(Cfg9346, Cfg9346_Lock);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1031: FILE: drivers/net/pci-skeleton.c:1177:
+	udelay(10);

CHECK:CAMELCASE: Avoid CamelCase: <RxBuf>
#1035: FILE: drivers/net/pci-skeleton.c:1180:
+	NETDRV_W32_F(RxBuf, tp->rx_ring_dma);

CHECK:CAMELCASE: Avoid CamelCase: <TxAddr0>
#1040: FILE: drivers/net/pci-skeleton.c:1184:
+		NETDRV_W32_F(TxAddr0 + (i * 4), tp->tx_bufs_dma + (tp->tx_buf[i] - tp->tx_bufs));

CHECK:CAMELCASE: Avoid CamelCase: <RxMissed>
#1043: FILE: drivers/net/pci-skeleton.c:1186:
+	NETDRV_W32_F(RxMissed, 0);

CHECK:CAMELCASE: Avoid CamelCase: <MultiIntr>
#1050: FILE: drivers/net/pci-skeleton.c:1191:
+	NETDRV_W16(MultiIntr, NETDRV_R16(MultiIntr) & MultiIntrClear);

CHECK:CAMELCASE: Avoid CamelCase: <MultiIntrClear>
#1050: FILE: drivers/net/pci-skeleton.c:1191:
+	NETDRV_W16(MultiIntr, NETDRV_R16(MultiIntr) & MultiIntrClear);

CHECK:CAMELCASE: Avoid CamelCase: <IntrMask>
#1060: FILE: drivers/net/pci-skeleton.c:1198:
+	NETDRV_W16_F(IntrMask, netdrv_intr_mask);

CHECK:CAMELCASE: Avoid CamelCase: <NWayLPAR>
#1143: FILE: drivers/net/pci-skeleton.c:1253:
+		   NETDRV_R16(NWayLPAR));

CHECK:CAMELCASE: Avoid CamelCase: <IntrStatus>
#1146: FILE: drivers/net/pci-skeleton.c:1256:
+		   NETDRV_R16(IntrStatus),

CHECK:CAMELCASE: Avoid CamelCase: <RxEarlyStatus>
#1147: FILE: drivers/net/pci-skeleton.c:1257:
+		   NETDRV_R32(RxEarlyStatus));

CHECK:CAMELCASE: Avoid CamelCase: <TxStatus0>
#1231: FILE: drivers/net/pci-skeleton.c:1318:
+			   i, NETDRV_R32(TxStatus0 + (i * 4)),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->tx_info[entry].skb"
#1268: FILE: drivers/net/pci-skeleton.c:1346:
+	assert(tp->tx_info[entry].skb == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#1310: FILE: drivers/net/pci-skeleton.c:1375:
+	assert(dev != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tp"
#1311: FILE: drivers/net/pci-skeleton.c:1376:
+	assert(tp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioaddr"
#1312: FILE: drivers/net/pci-skeleton.c:1377:
+	assert(ioaddr != NULL);

CHECK:CAMELCASE: Avoid CamelCase: <TxClearAbt>
#1341: FILE: drivers/net/pci-skeleton.c:1400:
+				NETDRV_W32(TxConfig, TxClearAbt | (TX_DMA_BURST << TxDMAShift));

CHECK:CAMELCASE: Avoid CamelCase: <RxTooLong>
#1401: FILE: drivers/net/pci-skeleton.c:1461:
+	if (rx_status & RxTooLong)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#1464: FILE: drivers/net/pci-skeleton.c:1509:
+	assert(dev != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tp"
#1465: FILE: drivers/net/pci-skeleton.c:1510:
+	assert(tp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioaddr"
#1466: FILE: drivers/net/pci-skeleton.c:1511:
+	assert(ioaddr != NULL);

CHECK:CAMELCASE: Avoid CamelCase: <RxBufAddr>
#1476: FILE: drivers/net/pci-skeleton.c:1517:
+		   cur_rx, NETDRV_R16(RxBufAddr),

CHECK:CAMELCASE: Avoid CamelCase: <RxBufPtr>
#1477: FILE: drivers/net/pci-skeleton.c:1518:
+		   NETDRV_R16(RxBufPtr), NETDRV_R8(ChipCmd));

CHECK:CAMELCASE: Avoid CamelCase: <RxBufEmpty>
#1480: FILE: drivers/net/pci-skeleton.c:1520:
+	while ((NETDRV_R8(ChipCmd) & RxBufEmpty) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#1587: FILE: drivers/net/pci-skeleton.c:1595:
+	assert(dev != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tp"
#1588: FILE: drivers/net/pci-skeleton.c:1596:
+	assert(tp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioaddr"
#1589: FILE: drivers/net/pci-skeleton.c:1597:
+	assert(ioaddr != NULL);

CHECK:CAMELCASE: Avoid CamelCase: <RxUnderrun>
#1620: FILE: drivers/net/pci-skeleton.c:1619:
+	if (status & (RxUnderrun | RxOverflow | RxErr | RxFIFOOver))

CHECK:CAMELCASE: Avoid CamelCase: <RxOverflow>
#1620: FILE: drivers/net/pci-skeleton.c:1619:
+	if (status & (RxUnderrun | RxOverflow | RxErr | RxFIFOOver))

CHECK:CAMELCASE: Avoid CamelCase: <RxErr>
#1620: FILE: drivers/net/pci-skeleton.c:1619:
+	if (status & (RxUnderrun | RxOverflow | RxErr | RxFIFOOver))

CHECK:CAMELCASE: Avoid CamelCase: <RxFIFOOver>
#1620: FILE: drivers/net/pci-skeleton.c:1619:
+	if (status & (RxUnderrun | RxOverflow | RxErr | RxFIFOOver))

CHECK:CAMELCASE: Avoid CamelCase: <TxErr>
#1688: FILE: drivers/net/pci-skeleton.c:1674:
+			     RxFIFOOver | TxErr | RxErr))

CHECK:CAMELCASE: Avoid CamelCase: <AcceptBroadcast>
#1862: FILE: drivers/net/pci-skeleton.c:1807:
+			AcceptBroadcast | AcceptMulticast | AcceptMyPhys |

CHECK:CAMELCASE: Avoid CamelCase: <AcceptMulticast>
#1862: FILE: drivers/net/pci-skeleton.c:1807:
+			AcceptBroadcast | AcceptMulticast | AcceptMyPhys |

CHECK:CAMELCASE: Avoid CamelCase: <AcceptMyPhys>
#1862: FILE: drivers/net/pci-skeleton.c:1807:
+			AcceptBroadcast | AcceptMulticast | AcceptMyPhys |

CHECK:CAMELCASE: Avoid CamelCase: <AcceptAllPhys>
#1863: FILE: drivers/net/pci-skeleton.c:1808:
+			AcceptAllPhys;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 85 checks, 1890 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
