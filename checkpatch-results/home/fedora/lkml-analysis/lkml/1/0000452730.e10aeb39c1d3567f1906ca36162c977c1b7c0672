WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
signed-off-by: Mimi Zohar <zohar@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
signed-off-by: Kylene Hall <kjhall@us.ibm.com>

WARNING:RETURN_VOID: void function return statements are not generally useful
#95: FILE: security/integrity_dummy.c:76:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: security/integrity_dummy.c:79:
+static void dummy_inode_init_integrity(struct inode *inode, struct inode *dir,
+				      char **name, void **value, size_t * len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: security/integrity_dummy.c:79:
+				      char **name, void **value, size_t * len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#101: FILE: security/integrity_dummy.c:82:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#106: FILE: security/integrity_dummy.c:87:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#125: FILE: security/integrity_dummy.c:106:
+	return;
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ops' - possible side-effects?
#141: FILE: security/integrity_dummy.c:121:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ops' may be better as '(ops)' to avoid precedence issues
#141: FILE: security/integrity_dummy.c:121:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#141: FILE: security/integrity_dummy.c:121:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#141: FILE: security/integrity_dummy.c:121:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#145: FILE: security/integrity_dummy.c:125:
+			printk(KERN_INFO "Had to override the " #function \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: security/integrity_dummy.h:13:
+extern void integrity_fixup_ops(struct integrity_operations *ops);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: include/linux/integrity.h:50:
+ * ^Ito be set.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: include/linux/integrity.h:56:
+ * ^Iidentified by @name for @dentry.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: include/linux/integrity.h:60:
+ * ^Ii_integrity field is initialized to NULL when the inode structure is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: include/linux/integrity.h:61:
+ * ^Iallocated.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: include/linux/integrity.h:62:
+ * ^I@inode contains the inode structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: include/linux/integrity.h:63:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: include/linux/integrity.h:67:
+ * ^IDeallocate the inode integrity structure and set @inode->i_integrity to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: include/linux/integrity.h:68:
+ * ^INULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: include/linux/integrity.h:72:
+ * ^Ixattr information.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: include/linux/integrity.h:75:
+ * ^I@name contains the security xattr name suffix.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: include/linux/integrity.h:81:
+ * ^I*file contains the file structure being closed.$

WARNING:SPACING: Unnecessary space before function pointer arguments
#244: FILE: include/linux/integrity.h:99:
+	int (*inode_setxattr) (struct dentry *dentry, char *name, void *value,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#246: FILE: include/linux/integrity.h:101:
+	void (*inode_post_setxattr) (struct dentry *dentry, char *name);

WARNING:SPACING: Unnecessary space before function pointer arguments
#247: FILE: include/linux/integrity.h:102:
+	int (*inode_alloc_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#248: FILE: include/linux/integrity.h:103:
+	void (*inode_free_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#249: FILE: include/linux/integrity.h:104:
+	void (*inode_init_integrity) (struct inode *inode, struct inode *dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: include/linux/integrity.h:105:
+	void (*inode_init_integrity) (struct inode *inode, struct inode *dir,
+				    char **name, void **value, size_t *len);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: include/linux/integrity.h:106:
+	void (*file_free_integrity) (struct file * file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#251: FILE: include/linux/integrity.h:106:
+	void (*file_free_integrity) (struct file * file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#252: FILE: include/linux/integrity.h:107:
+	void (*d_instantiate) (struct dentry *dentry, struct inode *inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#282: FILE: include/linux/integrity.h:142:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#282: FILE: include/linux/integrity.h:142:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_inode'
#282: FILE: include/linux/integrity.h:142:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: include/linux/integrity.h:149:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: include/linux/integrity.h:149:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_inode'
#289: FILE: include/linux/integrity.h:149:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: include/linux/integrity.h:151:
+ ^Iintegrity_ops->inode_post_setxattr(dentry, name);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: include/linux/integrity.h:151:
+ ^Iintegrity_ops->inode_post_setxattr(dentry, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/linux/integrity.h:151:
+ ^Iintegrity_ops->inode_post_setxattr(dentry, name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: include/linux/integrity.h:165:
+static inline void integrity_inode_init_integrity(struct inode *inode,
+						struct inode *dir,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: include/linux/integrity.h:170:
+	if (unlikely (IS_PRIVATE (inode)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: include/linux/integrity.h:170:
+	if (unlikely (IS_PRIVATE (inode)))

WARNING:RETURN_VOID: void function return statements are not generally useful
#314: FILE: include/linux/integrity.h:174:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#323: FILE: include/linux/integrity.h:183:
+	if (unlikely (inode && IS_PRIVATE(inode)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: include/linux/integrity.h:225:
+static inline int integrity_inode_init_integrity(struct inode *inode,
+						struct inode *dir,

WARNING:RETURN_VOID: void function return statements are not generally useful
#379: FILE: include/linux/integrity.h:241:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#384: FILE: include/linux/integrity.h:246:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 37 warnings, 11 checks, 345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
