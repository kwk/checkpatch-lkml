WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#189: FILE: include/asm-x86/i387_64.h:54:
+#if 0 /* See comment in __save_init_fpu() below. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#202: FILE: include/asm-x86/i387_64.h:64:
+#define X87_FSW_ES (1 << 7)	/* Exception Summary */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#205: FILE: include/asm-x86/i387_64.h:67:
+/* AMD CPUs don't save/restore FDP/FIP/FOP unless an exception
+   is pending. Clear the x87 state here by setting it to fixed

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: include/asm-x86/i387_64.h:70:
+   Use the PDA as safe address because it should be already in L1. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#211: FILE: include/asm-x86/i387_64.h:73:
+	if (unlikely(fx->swd & X87_FSW_ES))
+		 asm volatile("fnclex");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/asm-x86/i387_64.h:76:
+	alternative_input(ASM_NOP8 ASM_NOP2,
+		     "    emms\n"		/* clear stack tags */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: include/asm-x86/i387_64.h:151:
+		printk("save_i387: bad fpstate %p\n", buf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_i387', this function's name, in a string
#256: FILE: include/asm-x86/i387_64.h:151:
+		printk("save_i387: bad fpstate %p\n", buf);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#263: FILE: include/asm-x86/i387_64.h:158:
+		if (err) return err;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#300: FILE: include/asm-x86/i387_64.h:195:
+	alternative_input(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#308: FILE: include/asm-x86/i387_64.h:203:
+/* We need a safe address that is cheap to find and that is already
+   in L1 during context switch. The best choices are unfortunately

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: include/asm-x86/i387_64.h:204:
+   different for UP and SMP */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#322: FILE: include/asm-x86/i387_64.h:217:
+	/* Use more nops than strictly needed in case the compiler
+	   varies code */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: include/asm-x86/i387_64.h:217:
+	   varies code */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#323: FILE: include/asm-x86/i387_64.h:218:
+	alternative_input(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#331: FILE: include/asm-x86/i387_64.h:226:
+	/* AMD K7/K8 CPUs don't save/restore FDP/FIP/FOP unless an exception
+	   is pending.  Clear the x87 state here by setting it to fixed

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#332: FILE: include/asm-x86/i387_64.h:227:
+	   values. safe_address is a random variable that should be in L1 */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#333: FILE: include/asm-x86/i387_64.h:228:
+	alternative_input(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: include/asm-x86/i387_64.h:230:
+^I^I"emms\n\t"^I  ^I/* clear stack tags */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: include/asm-x86/i387_64.h:231:
+^I^I"fildl %[addr]", ^I/* set F?P to defined value */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: include/asm-x86/i387_64.h:240:
+extern int save_i387(struct _fpstate __user *buf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/asm-x86/i387_64.h:241:
+extern int restore_i387(struct _fpstate __user *buf);

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: include/asm-x86/i387_64.h:247:
+	if (task_thread_info(tsk)->status & TS_USEDFPU) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#355: FILE: include/asm-x86/i387_64.h:250:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: include/asm-x86/i387_64.h:322:
+extern int get_fpregs(struct user_i387_struct __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: include/asm-x86/i387_64.h:324:
+extern int set_fpregs(struct task_struct *tsk,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: include/asm-x86/i387_64.h:328:
+extern int get_fpxregs(struct user_fxsr_struct __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/asm-x86/i387_64.h:330:
+extern int set_fpxregs(struct task_struct *tsk,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#457: FILE: include/asm-x86/i387_64.h:338:
+	if (cpu_has_fxsr) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#466: FILE: include/asm-x86/i387_64.h:347:
+	if (cpu_has_fxsr) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#475: FILE: include/asm-x86/i387_64.h:356:
+	if (cpu_has_xmm) {
[...]
+	} else {
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 17 warnings, 13 checks, 423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
