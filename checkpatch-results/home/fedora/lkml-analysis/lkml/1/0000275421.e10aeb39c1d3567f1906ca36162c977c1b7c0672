WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#42: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/ubifs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: fs/ubifs/super.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#136: FILE: fs/ubifs/super.c:90:
+		ubifs_warn("inode %lu uses '%s' compression, but it was not "
+			   "compiled in", inode->i_ino,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#247: FILE: fs/ubifs/super.c:201:
+		if (ui->data_len == sizeof(dev->new))
[...]
+		else if (ui->data_len == sizeof(dev->huge))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#251: FILE: fs/ubifs/super.c:205:
+		else {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#455: FILE: fs/ubifs/super.c:409:
+		seq_printf(s, ",fast_unmount");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#457: FILE: fs/ubifs/super.c:411:
+		seq_printf(s, ",norm_unmount");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#625: FILE: fs/ubifs/super.c:579:
+	uint64_t tmp64;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#762: FILE: fs/ubifs/super.c:716:
+	c->jheads = kzalloc(c->jhead_cnt * sizeof(struct ubifs_jhead),
+			   GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: fs/ubifs/super.c:717:
+	c->jheads = kzalloc(c->jhead_cnt * sizeof(struct ubifs_jhead),
+			   GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#843: FILE: fs/ubifs/super.c:797:
+		if (this->rb_left)
[...]
+		else if (this->rb_right)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#847: FILE: fs/ubifs/super.c:801:
+		else {

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fast_unmount>
#898: FILE: fs/ubifs/super.c:852:
+	Opt_fast_unmount,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_norm_unmount>
#899: FILE: fs/ubifs/super.c:853:
+	Opt_norm_unmount,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#900: FILE: fs/ubifs/super.c:854:
+	Opt_err,

WARNING:SPLIT_STRING: quoted string split across lines
#945: FILE: fs/ubifs/super.c:899:
+			ubifs_err("unrecognized mount option \"%s\" "
+				  "or missing value", p);

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#990: FILE: fs/ubifs/super.c:944:
+ * Note, the function does not de-allocate resources it it fails half way

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1037: FILE: fs/ubifs/super.c:991:
+	c->bottom_up_buf = kmalloc(BOTTOM_UP_HEIGHT * sizeof(int), GFP_KERNEL);

WARNING:SPLIT_STRING: quoted string split across lines
#1061: FILE: fs/ubifs/super.c:1015:
+		ubifs_warn("'%s' compressor is set by superblock, but not "
+			   "compiled in", ubifs_compr_name(c->default_compr));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1182: FILE: fs/ubifs/super.c:1136:
+		if (mounted_read_only)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1184: FILE: fs/ubifs/super.c:1138:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#1199: FILE: fs/ubifs/super.c:1153:
+	ubifs_msg("file system size:        %lld bytes (%lld KiB, %lld MiB, "
+		  "%d LEBs)", x, x >> 10, x >> 20, c->main_lebs);

WARNING:SPLIT_STRING: quoted string split across lines
#1202: FILE: fs/ubifs/super.c:1156:
+	ubifs_msg("journal size:            %lld bytes (%lld KiB, %lld MiB, "
+		  "%d LEBs)", x, x >> 10, x >> 20,

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#1209: FILE: fs/ubifs/super.c:1163:
+	dbg_msg("compiled on:            " __DATE__ " at " __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#1209: FILE: fs/ubifs/super.c:1163:
+	dbg_msg("compiled on:            " __DATE__ " at " __TIME__);

WARNING:SPLIT_STRING: quoted string split across lines
#1579: FILE: fs/ubifs/super.c:1533:
+				ubifs_err("failed to write master node, "
+					  "error %d", err);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1601: FILE: fs/ubifs/super.c:1555:
+	if ((sb->s_flags & MS_RDONLY) && !(*flags & MS_RDONLY)) {
[...]
+	} else if (!(sb->s_flags & MS_RDONLY) && (*flags & MS_RDONLY))
[...]

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1655: FILE: fs/ubifs/super.c:1609:
+	dev = simple_strtoul(name + 3, &endptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1663: FILE: fs/ubifs/super.c:1617:
+		vol = simple_strtoul(endptr + 1, &endptr, 0);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*c)...) over kzalloc(sizeof(struct ubifs_info)...)
#1683: FILE: fs/ubifs/super.c:1637:
+	c = kzalloc(sizeof(struct ubifs_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1718: FILE: fs/ubifs/super.c:1672:
+	c->lhead_lnum = c->ltail_lnum = UBIFS_LOG_LNUM;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1741: FILE: fs/ubifs/super.c:1695:
+	sb->s_maxbytes = c->max_inode_sz = key_max_inode_size(c);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1743: FILE: fs/ubifs/super.c:1697:
+		sb->s_maxbytes = c->max_inode_sz = MAX_LFS_FILESIZE;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1769: FILE: fs/ubifs/super.c:1723:
+	iput(root);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1891: FILE: fs/ubifs/super.c:1845:
+	struct ubifs_inode *inode = obj;
+	inode_init_once(&inode->vfs_inode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1943: FILE: fs/ubifs/super.c:1897:
+		ubifs_err("VFS page cache size is %u bytes, but UBIFS requires"
+			  " at least 4096 bytes",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1960: FILE: fs/ubifs/super.c:1914:
+	ubifs_inode_slab = kmem_cache_create("ubifs_inode_slab",
+				sizeof(struct ubifs_inode), 0,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1983: FILE: fs/ubifs/super.c:1937:
+}
+/* late_initcall to let compressors initialize first */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000275421.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 18 warnings, 18 checks, 1956 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000275421.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
