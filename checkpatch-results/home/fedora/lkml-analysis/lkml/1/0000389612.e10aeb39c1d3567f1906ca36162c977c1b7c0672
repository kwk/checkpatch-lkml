WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This will generate smaller code, and avoid the slow rep/string instructions.

CHECK:SPACING: No space is necessary after a cast
#50: FILE: include/asm-x86_64/string.h:54:
+	unsigned long pattern = 0x01010101UL * (unsigned char) c;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#63: FILE: include/asm-x86_64/string.h:67:
+		*(2+(unsigned char *)s) = pattern;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#70: FILE: include/asm-x86_64/string.h:74:
+		*(2+(unsigned short *)s) = pattern;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#74: FILE: include/asm-x86_64/string.h:78:
+		*(1+(unsigned long *)s) = pattern;
 		   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#80: FILE: include/asm-x86_64/string.h:84:
+}
+#define memset(s, c, count)					\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#80: FILE: include/asm-x86_64/string.h:84:
+#define memset(s, c, count)					\
+	(__builtin_constant_p(c)				\
+	 ? __constant_c_and_count_memset((s),(c),(count))	\
+	 : __memset((s),(c),(count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#80: FILE: include/asm-x86_64/string.h:84:
+#define memset(s, c, count)					\
+	(__builtin_constant_p(c)				\
+	 ? __constant_c_and_count_memset((s),(c),(count))	\
+	 : __memset((s),(c),(count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#80: FILE: include/asm-x86_64/string.h:84:
+#define memset(s, c, count)					\
+	(__builtin_constant_p(c)				\
+	 ? __constant_c_and_count_memset((s),(c),(count))	\
+	 : __memset((s),(c),(count)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: include/asm-x86_64/string.h:86:
+	 ? __constant_c_and_count_memset((s),(c),(count))	\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: include/asm-x86_64/string.h:86:
+	 ? __constant_c_and_count_memset((s),(c),(count))	\
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: include/asm-x86_64/string.h:87:
+	 : __memset((s),(c),(count)))
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: include/asm-x86_64/string.h:87:
+	 : __memset((s),(c),(count)))
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#85: FILE: include/asm-x86_64/string.h:89:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);
                                  ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__kernel_size_t' should also have an identifier name
#95: FILE: arch/x86_64/kernel/x8664_ksyms.c:51:
+extern void * __memset(void *,int,__kernel_size_t);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389612.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 5 warnings, 9 checks, 65 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389612.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
