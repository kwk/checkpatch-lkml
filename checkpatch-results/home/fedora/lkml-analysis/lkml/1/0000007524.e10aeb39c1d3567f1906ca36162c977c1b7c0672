WARNING:TYPO_SPELLING: 'convinience' may be misspelled - perhaps 'convenience'?
#36: 
for convinience. It can be thought as the first step of further cleanup. 
    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/string.h:146:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#96: FILE: include/linux/string.h:146:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#97: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *, char **, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#97: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#97: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#97: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *, char **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#98: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#98: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#98: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#98: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#99: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#99: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#99: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoll is obsolete, use kstrtoll instead
#99: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *, char **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#100: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#100: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#100: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#100: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#101: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#101: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#101: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#101: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#102: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#102: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#102: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#102: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#103: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#103: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long *' should also have an identifier name
#103: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:CONSIDER_KSTRTO: strict_strtoll is obsolete, use kstrtoll instead
#103: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/string.h:154:
+extern int sprintf(char *buf, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#105: FILE: include/linux/string.h:155:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/string.h:156:
+extern int vsprintf(char *buf, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#106: FILE: include/linux/string.h:156:
+extern int vsprintf(char *buf, const char *, va_list)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#107: FILE: include/linux/string.h:157:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/string.h:158:
+extern int snprintf(char *buf, size_t size, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#109: FILE: include/linux/string.h:159:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/string.h:160:
+extern int vsnprintf(char *buf, size_t size, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 0) over __attribute__((format(printf, 3, 0)))
#111: FILE: include/linux/string.h:161:
+	__attribute__ ((format (printf, 3, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/string.h:162:
+extern int scnprintf(char *buf, size_t size, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#113: FILE: include/linux/string.h:163:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/string.h:164:
+extern int vscnprintf(char *buf, size_t size, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 0) over __attribute__((format(printf, 3, 0)))
#115: FILE: include/linux/string.h:165:
+	__attribute__ ((format (printf, 3, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/string.h:166:
+extern char *kasprintf(gfp_t gfp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#117: FILE: include/linux/string.h:167:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/string.h:168:
+extern char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#120: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)
+	__attribute__ ((format (scanf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#120: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#120: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __scanf(2, 3) over __attribute__((format(scanf, 2, 3)))
#121: FILE: include/linux/string.h:171:
+	__attribute__ ((format (scanf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#122: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#122: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'va_list' should also have an identifier name
#122: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __scanf(2, 0) over __attribute__((format(scanf, 2, 0)))
#123: FILE: include/linux/string.h:173:
+	__attribute__ ((format (scanf, 2, 0)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 46 warnings, 18 checks, 76 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
