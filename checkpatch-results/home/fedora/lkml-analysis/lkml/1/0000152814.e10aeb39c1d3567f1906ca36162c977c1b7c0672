WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#79: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: arch/microblaze/include/asm/processor.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: arch/microblaze/include/asm/processor.h:78:
+extern unsigned long thread_saved_pc(struct task_struct *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: arch/microblaze/include/asm/processor.h:80:
+extern unsigned long get_wchan(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: arch/microblaze/include/asm/processor.h:85:
+extern int kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#183: FILE: arch/microblaze/include/asm/system.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: arch/microblaze/include/asm/system.h:19:
+extern struct task_struct *_switch_to(struct thread_info *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: arch/microblaze/include/asm/system.h:20:
+extern struct task_struct *_switch_to(struct thread_info *prev,
+					struct thread_info *next);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#204: FILE: arch/microblaze/include/asm/system.h:22:
+#define switch_to(prev, next, last)					\
+	do {								\
+		(last) = _switch_to(task_thread_info(prev),		\
+					task_thread_info(next));	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#213: FILE: arch/microblaze/include/asm/system.h:31:
+#define nop()			asm volatile ("nop")

WARNING:MEMORY_BARRIER: memory barrier without comment
#214: FILE: arch/microblaze/include/asm/system.h:32:
+#define mb()			barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#215: FILE: arch/microblaze/include/asm/system.h:33:
+#define rmb()			mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#216: FILE: arch/microblaze/include/asm/system.h:34:
+#define wmb()			mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#217: FILE: arch/microblaze/include/asm/system.h:35:
+#define set_mb(var, value)	do { var = value; mb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#218: FILE: arch/microblaze/include/asm/system.h:36:
+#define set_wmb(var, value)	do { var = value; wmb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#220: FILE: arch/microblaze/include/asm/system.h:38:
+#define smp_mb()		mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#221: FILE: arch/microblaze/include/asm/system.h:39:
+#define smp_rmb()		rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#222: FILE: arch/microblaze/include/asm/system.h:40:
+#define smp_wmb()		wmb()

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#225: FILE: arch/microblaze/include/asm/system.h:43:
+void __bad_xchg(volatile void *ptr, int size);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#227: FILE: arch/microblaze/include/asm/system.h:45:
+static inline unsigned long __xchg(unsigned long x, volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: arch/microblaze/include/asm/system.h:46:
+static inline unsigned long __xchg(unsigned long x, volatile void *ptr,
+								int size)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#236: FILE: arch/microblaze/include/asm/system.h:54:
+		ret = *(volatile unsigned char *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#237: FILE: arch/microblaze/include/asm/system.h:55:
+		*(volatile unsigned char *)ptr = x;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#243: FILE: arch/microblaze/include/asm/system.h:61:
+		ret = *(volatile unsigned long *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#244: FILE: arch/microblaze/include/asm/system.h:62:
+		*(volatile unsigned long *)ptr = x;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#259: FILE: arch/microblaze/include/asm/system.h:77:
+#define xchg(ptr, x) \
+	((__typeof__(*(ptr))) __xchg((unsigned long)(x), (ptr), sizeof(*(ptr))))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: arch/microblaze/include/asm/system.h:83:
+extern void ret_from_fork(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 8 checks, 184 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
