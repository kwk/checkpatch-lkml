ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#57: FILE: include/linux/cgroup.h:392:
+struct css_set* cgroup_first_css_set(const struct cgroup *cgrp);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#72: FILE: kernel/cgroup.c:343:
+struct css_set* cgroup_first_css_set(const struct cgroup *cgrp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: kernel/cgroup.c:345:
+       struct list_head *head = &cgrp->css_sets;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: kernel/cgroup.c:346:
+       struct cg_cgroup_link *link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: kernel/cgroup.c:348:
+       read_lock(&css_set_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: kernel/cgroup.c:349:
+       if (list_empty(head)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#78: FILE: kernel/cgroup.c:349:
+       if (list_empty(head)) {
+               read_unlock(&css_set_lock);

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: kernel/cgroup.c:350:
+               read_unlock(&css_set_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: kernel/cgroup.c:350:
+               read_unlock(&css_set_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: kernel/cgroup.c:351:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: kernel/cgroup.c:351:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/cgroup.c:352:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/cgroup.c:353:
+       link = list_first_entry(head, struct cg_cgroup_link, cgrp_link_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/cgroup.c:354:
+       read_unlock(&css_set_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: kernel/cgroup.c:355:
+       BUG_ON(!link);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: kernel/cgroup.c:355:
+       BUG_ON(!link);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: kernel/cgroup.c:357:
+       return link->cg;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000053608.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 13 warnings, 0 checks, 34 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000053608.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
