WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
SPORT is a serial port which can support serveral serial communication protocols.

WARNING:TYPO_SPELLING: 'serveral' may be misspelled - perhaps 'several'?
#31: 
SPORT is a serial port which can support serveral serial communication protocols.
                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: sound/soc/blackfin/bf5xx-sport.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#75: FILE: sound/soc/blackfin/bf5xx-sport.c:27:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#87: FILE: sound/soc/blackfin/bf5xx-sport.c:39:
+#include <asm/cacheflush.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#91: FILE: sound/soc/blackfin/bf5xx-sport.c:43:
+#define FRAME_DELAY (1<<12)
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#91: FILE: sound/soc/blackfin/bf5xx-sport.c:43:
+#define FRAME_DELAY (1<<12)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#96: FILE: sound/soc/blackfin/bf5xx-sport.c:48:
+ * tdm_count is # channels NOT / 8 ! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: sound/soc/blackfin/bf5xx-sport.c:50:
+int sport_set_multichannel(struct sport_device *sport,
+		int tdm_count, u32 mask, int packed)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: sound/soc/blackfin/bf5xx-sport.c:53:
+	pr_debug("%s tdm_count=%d mask:0x%08x packed=%d\n", __func__,
+			tdm_count, mask, packed);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#113: FILE: sound/soc/blackfin/bf5xx-sport.c:65:
+		sport->regs->mcmc1 = ((tdm_count>>3)-1) << 12;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#113: FILE: sound/soc/blackfin/bf5xx-sport.c:65:
+		sport->regs->mcmc1 = ((tdm_count>>3)-1) << 12;
 		                                    ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#114: FILE: sound/soc/blackfin/bf5xx-sport.c:66:
+		sport->regs->mcmc2 = FRAME_DELAY | MCMEN | \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#115: FILE: sound/soc/blackfin/bf5xx-sport.c:67:
+				(packed ? (MCDTXPE|MCDRXPE) : 0);
 				                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: sound/soc/blackfin/bf5xx-sport.c:95:
+int sport_config_rx(struct sport_device *sport, unsigned int rcr1,
+		unsigned int rcr2, unsigned int clkdiv, unsigned int fsdiv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: sound/soc/blackfin/bf5xx-sport.c:112:
+int sport_config_tx(struct sport_device *sport, unsigned int tcr1,
+		unsigned int tcr2, unsigned int clkdiv, unsigned int fsdiv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: sound/soc/blackfin/bf5xx-sport.c:129:
+static void setup_desc(struct dmasg *desc, void *buf, int fragcount,
+		size_t fragsize, unsigned int cfg,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#180: FILE: sound/soc/blackfin/bf5xx-sport.c:132:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around desc[i + 1]
#184: FILE: sound/soc/blackfin/bf5xx-sport.c:136:
+		desc[i].next_desc_addr  = (unsigned long)&(desc[i + 1]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: sound/soc/blackfin/bf5xx-sport.c:137:
+		desc[i].start_addr = (unsigned long)buf + i*fragsize;
 		                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#194: FILE: sound/soc/blackfin/bf5xx-sport.c:146:
+	desc[fragcount-1].next_desc_addr = (unsigned long)desc;
 	              ^

WARNING:SPLIT_STRING: quoted string split across lines
#197: FILE: sound/soc/blackfin/bf5xx-sport.c:149:
+	pr_debug("setup desc: desc0=%p, next0=%lx, desc1=%p,"
+		"next1=%lx\nx_count=%x,y_count=%x,addr=0x%lx,cfs=0x%x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around desc[0]
#198: FILE: sound/soc/blackfin/bf5xx-sport.c:150:
+		&(desc[0]), desc[0].next_desc_addr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around desc[1]
#199: FILE: sound/soc/blackfin/bf5xx-sport.c:151:
+		&(desc[1]), desc[1].next_desc_addr,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#231: FILE: sound/soc/blackfin/bf5xx-sport.c:183:
+	BUG_ON(sport->dummy_rx_desc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sport->dummy_rx_desc"
#231: FILE: sound/soc/blackfin/bf5xx-sport.c:183:
+	BUG_ON(sport->dummy_rx_desc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: sound/soc/blackfin/bf5xx-sport.c:184:
+	BUG_ON(sport->curr_rx_desc == sport->dummy_rx_desc);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#235: FILE: sound/soc/blackfin/bf5xx-sport.c:187:
+	sport->dummy_rx_desc->next_desc_addr = \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: sound/soc/blackfin/bf5xx-sport.c:188:
+			(unsigned long)(sport->dummy_rx_desc+1);
 			                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#247: FILE: sound/soc/blackfin/bf5xx-sport.c:199:
+	while ((get_dma_curr_desc_ptr(sport->dma_rx_chan) - \
[...]
+			(unsigned long)sport->dummy_rx_desc) {}

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#247: FILE: sound/soc/blackfin/bf5xx-sport.c:199:
+	while ((get_dma_curr_desc_ptr(sport->dma_rx_chan) - \

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: sound/soc/blackfin/bf5xx-sport.c:211:
+	if (dummy) {
[...]
+	} else
[...]

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#260: FILE: sound/soc/blackfin/bf5xx-sport.c:212:
+		sport->dummy_rx_desc->next_desc_addr = \

CHECK:SPACING: No space is necessary after a cast
#261: FILE: sound/soc/blackfin/bf5xx-sport.c:213:
+				(unsigned long) sport->dummy_rx_desc;

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: sound/soc/blackfin/bf5xx-sport.c:215:
+	} else

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#266: FILE: sound/soc/blackfin/bf5xx-sport.c:218:
+	set_dma_next_desc_addr(sport->dma_rx_chan, \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#270: FILE: sound/soc/blackfin/bf5xx-sport.c:222:
+	set_dma_config(sport->dma_rx_chan, (DMAFLOW_LARGE | NDSIZE_9 | \

CHECK:BRACES: braces {} should be used on all arms of this statement
#280: FILE: sound/soc/blackfin/bf5xx-sport.c:232:
+	if (dummy) {
[...]
+	} else
[...]

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#281: FILE: sound/soc/blackfin/bf5xx-sport.c:233:
+		sport->dummy_tx_desc->next_desc_addr = \

CHECK:SPACING: No space is necessary after a cast
#282: FILE: sound/soc/blackfin/bf5xx-sport.c:234:
+				(unsigned long) sport->dummy_tx_desc;

CHECK:BRACES: Unbalanced braces around else statement
#284: FILE: sound/soc/blackfin/bf5xx-sport.c:236:
+	} else

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#287: FILE: sound/soc/blackfin/bf5xx-sport.c:239:
+	set_dma_next_desc_addr(sport->dma_tx_chan, \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: sound/soc/blackfin/bf5xx-sport.c:244:
+	set_dma_config(sport->dma_tx_chan,
+			(DMAFLOW_LARGE | NDSIZE_9 | WDSIZE_32));

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: sound/soc/blackfin/bf5xx-sport.c:254:
+	unsigned long flags;
+	pr_debug("%s enter\n", __func__);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#302: FILE: sound/soc/blackfin/bf5xx-sport.c:254:
+	pr_debug("%s enter\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: sound/soc/blackfin/bf5xx-sport.c:259:
+		BUG_ON(sport->dma_rx_desc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sport->dma_rx_desc"
#307: FILE: sound/soc/blackfin/bf5xx-sport.c:259:
+		BUG_ON(sport->dma_rx_desc == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: sound/soc/blackfin/bf5xx-sport.c:260:
+		BUG_ON(sport->curr_rx_desc != sport->dummy_rx_desc);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#310: FILE: sound/soc/blackfin/bf5xx-sport.c:262:
+		while ((get_dma_curr_desc_ptr(sport->dma_rx_chan) - \
[...]
+			(unsigned long)sport->dummy_rx_desc) {}

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#310: FILE: sound/soc/blackfin/bf5xx-sport.c:262:
+		while ((get_dma_curr_desc_ptr(sport->dma_rx_chan) - \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#313: FILE: sound/soc/blackfin/bf5xx-sport.c:265:
+		sport->dummy_rx_desc->next_desc_addr = \

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#331: FILE: sound/soc/blackfin/bf5xx-sport.c:283:
+	pr_debug("%s enter\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: sound/soc/blackfin/bf5xx-sport.c:308:
+	BUG_ON(sport->dummy_tx_desc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sport->dummy_tx_desc"
#356: FILE: sound/soc/blackfin/bf5xx-sport.c:308:
+	BUG_ON(sport->dummy_tx_desc == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: sound/soc/blackfin/bf5xx-sport.c:309:
+	BUG_ON(sport->curr_tx_desc == sport->dummy_tx_desc);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#359: FILE: sound/soc/blackfin/bf5xx-sport.c:311:
+	sport->dummy_tx_desc->next_desc_addr = \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#360: FILE: sound/soc/blackfin/bf5xx-sport.c:312:
+			(unsigned long)(sport->dummy_tx_desc+1);
 			                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#372: FILE: sound/soc/blackfin/bf5xx-sport.c:324:
+	while ((get_dma_curr_desc_ptr(sport->dma_tx_chan) - \
[...]
+			(unsigned long)sport->dummy_tx_desc) {}

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#372: FILE: sound/soc/blackfin/bf5xx-sport.c:324:
+	while ((get_dma_curr_desc_ptr(sport->dma_tx_chan) - \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: sound/soc/blackfin/bf5xx-sport.c:336:
+	unsigned flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: sound/soc/blackfin/bf5xx-sport.c:337:
+	unsigned flags;
+	pr_debug("%s: tx_run:%d, rx_run:%d\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: sound/soc/blackfin/bf5xx-sport.c:338:
+	pr_debug("%s: tx_run:%d, rx_run:%d\n", __func__,
+			sport->tx_run, sport->rx_run);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#390: FILE: sound/soc/blackfin/bf5xx-sport.c:342:
+		BUG_ON(sport->dma_tx_desc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sport->dma_tx_desc"
#390: FILE: sound/soc/blackfin/bf5xx-sport.c:342:
+		BUG_ON(sport->dma_tx_desc == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: sound/soc/blackfin/bf5xx-sport.c:343:
+		BUG_ON(sport->curr_tx_desc != sport->dummy_tx_desc);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#394: FILE: sound/soc/blackfin/bf5xx-sport.c:346:
+		while ((get_dma_curr_desc_ptr(sport->dma_tx_chan) - \
[...]
+			(unsigned long)sport->dummy_tx_desc) {}

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#394: FILE: sound/soc/blackfin/bf5xx-sport.c:346:
+		while ((get_dma_curr_desc_ptr(sport->dma_tx_chan) - \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#397: FILE: sound/soc/blackfin/bf5xx-sport.c:349:
+		sport->dummy_tx_desc->next_desc_addr = \

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#402: FILE: sound/soc/blackfin/bf5xx-sport.c:354:
+	} else {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: sound/soc/blackfin/bf5xx-sport.c:399:
+int sport_config_rx_dma(struct sport_device *sport, void *buf,
+		int fragcount, size_t fragsize)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#454: FILE: sound/soc/blackfin/bf5xx-sport.c:406:
+	pr_debug("%s buf:%p, frag:%d, fragsize:0x%lx\n", __func__, \

WARNING:TYPO_SPELLING: 'mutliply' may be misspelled - perhaps 'multiply'?
#461: FILE: sound/soc/blackfin/bf5xx-sport.c:413:
+	 * denote fragecount as two numbers' mutliply and both of them
 	                                     ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#462: FILE: sound/soc/blackfin/bf5xx-sport.c:414:
+	 * are less than 64k.*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: sound/soc/blackfin/bf5xx-sport.c:430:
+	pr_debug("%s(x_count:0x%x, y_count:0x%x)\n", __func__,
+			x_count, y_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: sound/soc/blackfin/bf5xx-sport.c:434:
+		dma_free_coherent(NULL, sport->rx_desc_bytes,
+					sport->dma_rx_desc, 0);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#485: FILE: sound/soc/blackfin/bf5xx-sport.c:437:
+	sport->dma_rx_desc = dma_alloc_coherent(NULL, \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#498: FILE: sound/soc/blackfin/bf5xx-sport.c:450:
+	cfg     = 0x7000 | DI_EN | compute_wdsize(sport->wdsize) | WNR | \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: sound/soc/blackfin/bf5xx-sport.c:457:
+	setup_desc(sport->dma_rx_desc, buf, fragcount, fragsize,
+			cfg|DMAEN, x_count, y_count, sport->wdsize);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#505: FILE: sound/soc/blackfin/bf5xx-sport.c:457:
+			cfg|DMAEN, x_count, y_count, sport->wdsize);
 			   ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#511: FILE: sound/soc/blackfin/bf5xx-sport.c:463:
+int sport_config_tx_dma(struct sport_device *sport, void *buf, \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: sound/soc/blackfin/bf5xx-sport.c:472:
+	pr_debug("%s buf:%p, fragcount:%d, fragsize:0x%lx\n",
+			__func__, buf, fragcount, fragsize);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#522: FILE: sound/soc/blackfin/bf5xx-sport.c:474:
+	x_count = fragsize/sport->wdsize;
 	                  ^

WARNING:TYPO_SPELLING: 'mutliply' may be misspelled - perhaps 'multiply'?
#526: FILE: sound/soc/blackfin/bf5xx-sport.c:478:
+	 * denote fragecount as two numbers' mutliply and both of them
 	                                     ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#527: FILE: sound/soc/blackfin/bf5xx-sport.c:479:
+	 * are less than 64k.*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: sound/soc/blackfin/bf5xx-sport.c:495:
+	pr_debug("%s x_count:0x%x, y_count:0x%x\n", __func__,
+			x_count, y_count);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: sound/soc/blackfin/bf5xx-sport.c:497:
+
+

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#547: FILE: sound/soc/blackfin/bf5xx-sport.c:499:
+		dma_free_coherent(NULL, sport->tx_desc_bytes, \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#551: FILE: sound/soc/blackfin/bf5xx-sport.c:503:
+	sport->dma_tx_desc = dma_alloc_coherent(NULL, \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#562: FILE: sound/soc/blackfin/bf5xx-sport.c:514:
+	cfg     = 0x7000 | DI_EN | compute_wdsize(sport->wdsize) | \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: sound/soc/blackfin/bf5xx-sport.c:521:
+	setup_desc(sport->dma_tx_desc, buf, fragcount, fragsize,
+			cfg|DMAEN, x_count, y_count, sport->wdsize);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#569: FILE: sound/soc/blackfin/bf5xx-sport.c:521:
+			cfg|DMAEN, x_count, y_count, sport->wdsize);
 			   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#576: FILE: sound/soc/blackfin/bf5xx-sport.c:528:
+ * the x_modify is set to 0 */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#580: FILE: sound/soc/blackfin/bf5xx-sport.c:532:
+	unsigned config;

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#582: FILE: sound/soc/blackfin/bf5xx-sport.c:534:
+	pr_debug("%s entered\n", __func__);

CHECK:SPACING: No space is necessary after a cast
#584: FILE: sound/soc/blackfin/bf5xx-sport.c:536:
+	desc = (struct dmasg *) l1_data_sram_alloc(2 * sizeof(*desc));

WARNING:LINE_SPACING: Missing a blank line after declarations
#588: FILE: sound/soc/blackfin/bf5xx-sport.c:540:
+		dma_addr_t addr;
+		desc = dma_alloc_coherent(NULL, 2 * sizeof(*desc), &addr, 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#591: FILE: sound/soc/blackfin/bf5xx-sport.c:543:
+	if (desc == NULL) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#601: FILE: sound/soc/blackfin/bf5xx-sport.c:553:
+	desc->x_count = sport->dummy_count/sport->wdsize;
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#605: FILE: sound/soc/blackfin/bf5xx-sport.c:557:
+	memcpy(desc+1, desc, sizeof(*desc));
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#606: FILE: sound/soc/blackfin/bf5xx-sport.c:558:
+	desc->next_desc_addr = (unsigned long)(desc+1);
 	                                           ^

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#616: FILE: sound/soc/blackfin/bf5xx-sport.c:568:
+	pr_debug("%s entered\n", __func__);

CHECK:SPACING: No space is necessary after a cast
#619: FILE: sound/soc/blackfin/bf5xx-sport.c:571:
+	desc = (struct dmasg *) l1_data_sram_alloc(2 * sizeof(*desc));

WARNING:LINE_SPACING: Missing a blank line after declarations
#623: FILE: sound/soc/blackfin/bf5xx-sport.c:575:
+		dma_addr_t addr;
+		desc = dma_alloc_coherent(NULL, 2 * sizeof(*desc), &addr, 0);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#632: FILE: sound/soc/blackfin/bf5xx-sport.c:584:
+	desc->start_addr = (unsigned long)sport->dummy_buf + \

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#637: FILE: sound/soc/blackfin/bf5xx-sport.c:589:
+	desc->x_count = sport->dummy_count/sport->wdsize;
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#641: FILE: sound/soc/blackfin/bf5xx-sport.c:593:
+	memcpy(desc+1, desc, sizeof(*desc));
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#642: FILE: sound/soc/blackfin/bf5xx-sport.c:594:
+	desc->next_desc_addr = (unsigned long)(desc+1);
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: sound/soc/blackfin/bf5xx-sport.c:638:
+static int sport_check_status(struct sport_device *sport,
+		unsigned int *sport_stat,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#695: FILE: sound/soc/blackfin/bf5xx-sport.c:647:
+		if (status & (TOVF|TUVF|ROVF|RUVF))
 		                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#695: FILE: sound/soc/blackfin/bf5xx-sport.c:647:
+		if (status & (TOVF|TUVF|ROVF|RUVF))
 		                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#695: FILE: sound/soc/blackfin/bf5xx-sport.c:647:
+		if (status & (TOVF|TUVF|ROVF|RUVF))
 		                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#696: FILE: sound/soc/blackfin/bf5xx-sport.c:648:
+			sport->regs->stat = (status & (TOVF|TUVF|ROVF|RUVF));
 			                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#696: FILE: sound/soc/blackfin/bf5xx-sport.c:648:
+			sport->regs->stat = (status & (TOVF|TUVF|ROVF|RUVF));
 			                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#696: FILE: sound/soc/blackfin/bf5xx-sport.c:648:
+			sport->regs->stat = (status & (TOVF|TUVF|ROVF|RUVF));
 			                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#704: FILE: sound/soc/blackfin/bf5xx-sport.c:656:
+		if (status & (DMA_DONE|DMA_ERR))
 		                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#713: FILE: sound/soc/blackfin/bf5xx-sport.c:665:
+		if (status & (DMA_DONE|DMA_ERR))
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: sound/soc/blackfin/bf5xx-sport.c:679:
+	ret = snprintf(buf, len,
+			"sts: 0x%04x\n"

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#753: FILE: sound/soc/blackfin/bf5xx-sport.c:705:
+	pr_debug("%s enter\n", __func__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#770: FILE: sound/soc/blackfin/bf5xx-sport.c:722:
+	struct sport_device *sport = dev_id;
+	pr_debug("%s enter\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#770: FILE: sound/soc/blackfin/bf5xx-sport.c:722:
+	pr_debug("%s enter\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#789: FILE: sound/soc/blackfin/bf5xx-sport.c:741:
+	pr_debug("%s\n", __func__);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#795: FILE: sound/soc/blackfin/bf5xx-sport.c:747:
+	if (status & (TOVF|TUVF|ROVF|RUVF)) {
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#795: FILE: sound/soc/blackfin/bf5xx-sport.c:747:
+	if (status & (TOVF|TUVF|ROVF|RUVF)) {
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#795: FILE: sound/soc/blackfin/bf5xx-sport.c:747:
+	if (status & (TOVF|TUVF|ROVF|RUVF)) {
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: sound/soc/blackfin/bf5xx-sport.c:749:
+		pr_info("sport status error:%s%s%s%s\n",
+				status & TOVF ? " TOVF" : "",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#818: FILE: sound/soc/blackfin/bf5xx-sport.c:770:
+	if (status & (TOVF|TUVF|ROVF|RUVF))
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#818: FILE: sound/soc/blackfin/bf5xx-sport.c:770:
+	if (status & (TOVF|TUVF|ROVF|RUVF))
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#818: FILE: sound/soc/blackfin/bf5xx-sport.c:770:
+	if (status & (TOVF|TUVF|ROVF|RUVF))
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#819: FILE: sound/soc/blackfin/bf5xx-sport.c:771:
+		sport->regs->stat = (status & (TOVF|TUVF|ROVF|RUVF));
 		                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#819: FILE: sound/soc/blackfin/bf5xx-sport.c:771:
+		sport->regs->stat = (status & (TOVF|TUVF|ROVF|RUVF));
 		                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#819: FILE: sound/soc/blackfin/bf5xx-sport.c:771:
+		sport->regs->stat = (status & (TOVF|TUVF|ROVF|RUVF));
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: sound/soc/blackfin/bf5xx-sport.c:781:
+int sport_set_rx_callback(struct sport_device *sport,
+		       void (*rx_callback)(void *), void *rx_data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: sound/soc/blackfin/bf5xx-sport.c:783:
+	BUG_ON(rx_callback == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rx_callback"
#831: FILE: sound/soc/blackfin/bf5xx-sport.c:783:
+	BUG_ON(rx_callback == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: sound/soc/blackfin/bf5xx-sport.c:792:
+int sport_set_tx_callback(struct sport_device *sport,
+		void (*tx_callback)(void *), void *tx_data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#842: FILE: sound/soc/blackfin/bf5xx-sport.c:794:
+	BUG_ON(tx_callback == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_callback"
#842: FILE: sound/soc/blackfin/bf5xx-sport.c:794:
+	BUG_ON(tx_callback == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: sound/soc/blackfin/bf5xx-sport.c:803:
+int sport_set_err_callback(struct sport_device *sport,
+		void (*err_callback)(void *), void *err_data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#853: FILE: sound/soc/blackfin/bf5xx-sport.c:805:
+	BUG_ON(err_callback == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!err_callback"
#853: FILE: sound/soc/blackfin/bf5xx-sport.c:805:
+	BUG_ON(err_callback == NULL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#861: FILE: sound/soc/blackfin/bf5xx-sport.c:813:
+struct sport_device *sport_init(struct sport_param *param, unsigned wdsize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: sound/soc/blackfin/bf5xx-sport.c:814:
+struct sport_device *sport_init(struct sport_param *param, unsigned wdsize,
+		unsigned dummy_count, void *private_data)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#862: FILE: sound/soc/blackfin/bf5xx-sport.c:814:
+		unsigned dummy_count, void *private_data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#866: FILE: sound/soc/blackfin/bf5xx-sport.c:818:
+	struct sport_device *sport;
+	pr_debug("%s enter\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#866: FILE: sound/soc/blackfin/bf5xx-sport.c:818:
+	pr_debug("%s enter\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#867: FILE: sound/soc/blackfin/bf5xx-sport.c:819:
+	BUG_ON(param == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!param"
#867: FILE: sound/soc/blackfin/bf5xx-sport.c:819:
+	BUG_ON(param == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#868: FILE: sound/soc/blackfin/bf5xx-sport.c:820:
+	BUG_ON(wdsize == 0 || dummy_count == 0);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sport)...) over kmalloc(sizeof(struct sport_device)...)
#869: FILE: sound/soc/blackfin/bf5xx-sport.c:821:
+	sport = kmalloc(sizeof(struct sport_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#883: FILE: sound/soc/blackfin/bf5xx-sport.c:835:
+		pr_err("Failed to request RX dma %d\n", \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#888: FILE: sound/soc/blackfin/bf5xx-sport.c:840:
+		pr_err("Failed to request RX irq %d\n", \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#894: FILE: sound/soc/blackfin/bf5xx-sport.c:846:
+		pr_err("Failed to request TX dma %d\n", \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#900: FILE: sound/soc/blackfin/bf5xx-sport.c:852:
+		pr_err("Failed to request TX irq %d\n", \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#907: FILE: sound/soc/blackfin/bf5xx-sport.c:859:
+		pr_err("Failed to request err irq:%d\n", \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: sound/soc/blackfin/bf5xx-sport.c:865:
+	pr_err("dma rx:%d tx:%d, err irq:%d, regs:%p\n",
+			sport->dma_rx_chan, sport->dma_tx_chan,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sport->dummy_buf"
#924: FILE: sound/soc/blackfin/bf5xx-sport.c:876:
+	if (sport->dummy_buf == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#925: FILE: sound/soc/blackfin/bf5xx-sport.c:877:
+	if (sport->dummy_buf == NULL) {
+		pr_err("Failed to allocate dummy buffer\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sport"
#956: FILE: sound/soc/blackfin/bf5xx-sport.c:908:
+	if (sport == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: sound/soc/blackfin/bf5xx-sport.c:914:
+		dma_free_coherent(NULL, sport->rx_desc_bytes,
+			sport->dma_rx_desc, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: sound/soc/blackfin/bf5xx-sport.c:917:
+		dma_free_coherent(NULL, sport->tx_desc_bytes,
+			sport->dma_tx_desc, 0);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#972: FILE: sound/soc/blackfin/bf5xx-sport.c:924:
+	dma_free_coherent(NULL, 2*sizeof(struct dmasg),
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: sound/soc/blackfin/bf5xx-sport.c:925:
+	dma_free_coherent(NULL, 2*sizeof(struct dmasg),
+		sport->dummy_rx_desc, 0);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#974: FILE: sound/soc/blackfin/bf5xx-sport.c:926:
+	dma_free_coherent(NULL, 2*sizeof(struct dmasg),
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: sound/soc/blackfin/bf5xx-sport.c:927:
+	dma_free_coherent(NULL, 2*sizeof(struct dmasg),
+		sport->dummy_tx_desc, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#987: FILE: sound/soc/blackfin/bf5xx-sport.c:939:
+/*
+* It is only used to send several bytes when dma is not enabled

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#988: FILE: sound/soc/blackfin/bf5xx-sport.c:940:
+* It is only used to send several bytes when dma is not enabled
+ * sport controller is configured but not enabled.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#989: FILE: sound/soc/blackfin/bf5xx-sport.c:941:
+ * Multichannel cannot works with pio mode */

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#991: FILE: sound/soc/blackfin/bf5xx-sport.c:943:
+int sport_send_and_recv(struct sport_device *sport, u8 *out_data, \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#999: FILE: sound/soc/blackfin/bf5xx-sport.c:951:
+	pr_debug("%s enter, out_data:%p, in_data:%p len:%d\n", \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1006: FILE: sound/soc/blackfin/bf5xx-sport.c:958:
+	flush_dcache_range((unsigned)out_data, (unsigned)(out_data + len));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1006: FILE: sound/soc/blackfin/bf5xx-sport.c:958:
+	flush_dcache_range((unsigned)out_data, (unsigned)(out_data + len));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1011: FILE: sound/soc/blackfin/bf5xx-sport.c:963:
+	set_dma_x_count(sport->dma_tx_chan, len/2);
 	                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "in_data"
#1016: FILE: sound/soc/blackfin/bf5xx-sport.c:968:
+	if (in_data != NULL) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1017: FILE: sound/soc/blackfin/bf5xx-sport.c:969:
+		invalidate_dcache_range((unsigned)in_data, \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1017: FILE: sound/soc/blackfin/bf5xx-sport.c:969:
+		invalidate_dcache_range((unsigned)in_data, \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1018: FILE: sound/soc/blackfin/bf5xx-sport.c:970:
+				(unsigned)(in_data + len));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1022: FILE: sound/soc/blackfin/bf5xx-sport.c:974:
+		set_dma_x_count(sport->dma_rx_chan, len/2);
 		                                       ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1052: FILE: sound/soc/blackfin/bf5xx-sport.c:1004:
+	udelay(20);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "in_data"
#1062: FILE: sound/soc/blackfin/bf5xx-sport.c:1014:
+	if (in_data != NULL) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1083: FILE: sound/soc/blackfin/bf5xx-sport.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1108: FILE: sound/soc/blackfin/bf5xx-sport.h:26:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1111: FILE: sound/soc/blackfin/bf5xx-sport.h:29:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1221: FILE: sound/soc/blackfin/bf5xx-sport.h:139:
+struct sport_device *sport_init(struct sport_param *param, unsigned wdsize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: sound/soc/blackfin/bf5xx-sport.h:140:
+struct sport_device *sport_init(struct sport_param *param, unsigned wdsize,
+		unsigned dummy_count, void *private_data);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1222: FILE: sound/soc/blackfin/bf5xx-sport.h:140:
+		unsigned dummy_count, void *private_data);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1229: FILE: sound/soc/blackfin/bf5xx-sport.h:147:
+ *  NOT / 8 ! all channels are enabled by default */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: sound/soc/blackfin/bf5xx-sport.h:149:
+int sport_set_multichannel(struct sport_device *sport, int tdm_count,
+		u32 mask, int packed);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: sound/soc/blackfin/bf5xx-sport.h:152:
+int sport_config_rx(struct sport_device *sport,
+		unsigned int rcr1, unsigned int rcr2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: sound/soc/blackfin/bf5xx-sport.h:156:
+int sport_config_tx(struct sport_device *sport,
+		unsigned int tcr1, unsigned int tcr2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1248: FILE: sound/soc/blackfin/bf5xx-sport.h:166:
+int sport_config_rx_dma(struct sport_device *sport, void *buf,
+		int fragcount, size_t fragsize_bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: sound/soc/blackfin/bf5xx-sport.h:169:
+int sport_config_tx_dma(struct sport_device *sport, void *buf,
+		int fragcount, size_t fragsize_bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: sound/soc/blackfin/bf5xx-sport.h:184:
+int sport_set_rx_callback(struct sport_device *sport,
+		       void (*rx_callback)(void *), void *rx_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: sound/soc/blackfin/bf5xx-sport.h:186:
+int sport_set_tx_callback(struct sport_device *sport,
+		       void (*tx_callback)(void *), void *tx_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: sound/soc/blackfin/bf5xx-sport.h:188:
+int sport_set_err_callback(struct sport_device *sport,
+		       void (*err_callback)(void *), void *err_data);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1272: FILE: sound/soc/blackfin/bf5xx-sport.h:190:
+int sport_send_and_recv(struct sport_device *sport, u8 *out_data, \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000231224.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 86 warnings, 104 checks, 1220 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000231224.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
