WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: kernel/trace/trace.h:779:
+^Ifilter_pred_fn_t ^Ifn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#98: FILE: kernel/trace/trace.h:780:
+^Iu64 ^I^I^Ival;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: kernel/trace/trace.h:782:
+^Ichar ^I^I^I*field_name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: kernel/trace/trace.h:783:
+^Iint ^I^I^Ioffset;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: kernel/trace/trace.h:784:
+^Iint ^I^I^Inot;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#103: FILE: kernel/trace/trace.h:785:
+^Iint ^I^I^Iop;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: kernel/trace/trace.h:786:
+^Iint ^I^I^Ipop_n;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#153: FILE: kernel/trace/trace_events.c:677:
+event_filter_write_regex(struct file *filp, const char __user *ubuf, size_t cnt,
                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#156: FILE: kernel/trace/trace_events.c:680:
+	return event_filter_write(filp, ubuf, cnt, ppos, true);
 	                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#160: FILE: kernel/trace/trace_events.c:684:
+event_filter_write_common(struct file *filp, const char __user *ubuf, size_t cnt,
                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: kernel/trace/trace_events.c:685:
+event_filter_write_common(struct file *filp, const char __user *ubuf, size_t cnt,
+			 loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#163: FILE: kernel/trace/trace_events.c:687:
+	return event_filter_write(filp, ubuf, cnt, ppos, false);
 	                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#192: FILE: kernel/trace/trace_events.c:747:
+subsystem_filter_write_regex(struct file *filp, const char __user *ubuf, size_t cnt,
                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#195: FILE: kernel/trace/trace_events.c:750:
+	return subsystem_filter_write(filp, ubuf, cnt, ppos, true);
 	                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#199: FILE: kernel/trace/trace_events.c:754:
+subsystem_filter_write_common(struct file *filp, const char __user *ubuf, size_t cnt,
                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#202: FILE: kernel/trace/trace_events.c:757:
+	return subsystem_filter_write(filp, ubuf, cnt, ppos, false);
 	                              ^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: kernel/trace/trace_events.c:950:
+		pr_warning("Could not create debugfs "
+			   "'%s/filter_regex' entry\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#288: FILE: kernel/trace/trace_events.c:1070:
+	struct file_operations		filter_regex;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr[r->search_len] == 0'
#385: FILE: kernel/trace/trace_events_filter.c:219:
+	if (ptr && (ptr[r->search_len] == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#404: FILE: kernel/trace/trace_events_filter.c:238:
+	if (buff[0] == '!') {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#408: FILE: kernel/trace/trace_events_filter.c:242:
+	} else

WARNING:CONSIDER_KSTRTO: strict_strtoll is obsolete, use kstrtoll instead
#511: FILE: kernel/trace/trace_events_filter.c:664:
+		ret = strict_strtoll(pred->regex.pattern, 0, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#513: FILE: kernel/trace/trace_events_filter.c:666:
+		ret = strict_strtoull(pred->regex.pattern, 0, &val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: kernel/trace/trace_events_filter.c:1131:
+int apply_event_filter(struct ftrace_event_call *call, char *filter_string,
+			bool regex)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090046.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 5 checks, 514 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090046.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
