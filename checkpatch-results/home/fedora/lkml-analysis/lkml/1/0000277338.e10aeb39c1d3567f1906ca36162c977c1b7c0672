WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '8f40f672e6bb071812f61bfbd30efc3fc1263ad1', maybe rebased or not pulled?
#71: 
commit 8f40f672e6bb071812f61bfbd30efc3fc1263ad1

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ericvh/v9fs

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#107: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: arch/x86/kernel/nmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#137: FILE: arch/x86/kernel/nmi.c:26:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#138: FILE: arch/x86/kernel/nmi.c:27:
+#include <asm/nmi.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#164: FILE: arch/x86/kernel/nmi.c:53:
+static int endflag __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MEMORY_BARRIER: memory barrier without comment
#230: FILE: arch/x86/kernel/nmi.c:119:
+		mb();

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#245: FILE: arch/x86/kernel/nmi.c:134:
+	prev_nmi_count = kmalloc(NR_CPUS * sizeof(int), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#245: FILE: arch/x86/kernel/nmi.c:134:
+	prev_nmi_count = kmalloc(NR_CPUS * sizeof(int), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#249: FILE: arch/x86/kernel/nmi.c:138:
+	printk(KERN_INFO "Testing NMI watchdog ... ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#266: FILE: arch/x86/kernel/nmi.c:155:
+			printk(KERN_WARNING "WARNING: CPU#%d: NMI "

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: arch/x86/kernel/nmi.c:156:
+			printk(KERN_WARNING "WARNING: CPU#%d: NMI "
+				"appears to be stuck (%d->%d)!\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#281: FILE: arch/x86/kernel/nmi.c:170:
+	printk("OK.\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#320: FILE: arch/x86/kernel/nmi.c:209:
+__setup("nmi_watchdog=", setup_nmi_watchdog);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: arch/x86/kernel/nmi.c:221:
+	BUG_ON(atomic_read(&nmi_active) != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#377: FILE: arch/x86/kernel/nmi.c:266:
+}
+/* must come after the local APIC's device_initcall() */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#423: FILE: arch/x86/kernel/nmi.c:312:
+		/* FALL THROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: arch/x86/kernel/nmi.c:324:
+^I    ^Ireturn;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#435: FILE: arch/x86/kernel/nmi.c:324:
+^I    ^Ireturn;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#458: FILE: arch/x86/kernel/nmi.c:347:
+static DEFINE_PER_CPU(unsigned, last_irq_sum);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#465: FILE: arch/x86/kernel/nmi.c:354:
+		unsigned cpu;

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: arch/x86/kernel/nmi.c:357:
+ ^I^I * Tell other CPUs to reset their alert counters. We cannot$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: arch/x86/kernel/nmi.c:357:
+ ^I^I * Tell other CPUs to reset their alert counters. We cannot$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#484: FILE: arch/x86/kernel/nmi.c:373:
+nmi_watchdog_tick(struct pt_regs *regs, unsigned reason)

WARNING:LINE_SPACING: Missing a blank line after declarations
#512: FILE: arch/x86/kernel/nmi.c:401:
+		static DEFINE_SPINLOCK(lock);
+		spin_lock(&lock);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#513: FILE: arch/x86/kernel/nmi.c:402:
+		printk("NMI backtrace for cpu %d\n", cpu);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#563: FILE: arch/x86/kernel/nmi.c:452:
+static unsigned ignore_nmis;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: arch/x86/kernel/nmi.c:458:
+	add_pda(__nmi_count,1);
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: arch/x86/kernel/nmi.c:493:
+int proc_nmi_enabled(struct ctl_table *table, int write, struct file *file,
+			void __user *buffer, size_t *length, loff_t *ppos)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#615: FILE: arch/x86/kernel/nmi.c:504:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#629: FILE: arch/x86/kernel/nmi.c:518:
+		printk(KERN_WARNING

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#660: FILE: arch/x86/kernel/nmi.c:549:
+EXPORT_SYMBOL(nmi_active);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#661: FILE: arch/x86/kernel/nmi.c:550:
+EXPORT_SYMBOL(nmi_watchdog);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1650: FILE: arch/x86/kernel/traps_32.c:769:
+	printk(KERN_EMERG "%s", str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1676: FILE: arch/x86/kernel/traps_64.c:618:
+	printk(KERN_EMERG "%s", str);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1677: FILE: arch/x86/kernel/traps_64.c:619:
+	printk(" on CPU%d, ip %08lx, registers:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1678: FILE: arch/x86/kernel/traps_64.c:620:
+	printk(" on CPU%d, ip %08lx, registers:\n",
+		smp_processor_id(), regs->ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1696: FILE: include/asm-x86/nmi.h:43:
+extern void nmi_watchdog_default(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1697: FILE: include/asm-x86/nmi.h:44:
+extern void die_nmi(char *str, struct pt_regs *regs, int do_panic);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277338.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 28 warnings, 8 checks, 614 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277338.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
