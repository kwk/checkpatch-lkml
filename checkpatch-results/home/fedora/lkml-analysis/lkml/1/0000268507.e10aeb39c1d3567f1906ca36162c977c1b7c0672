CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#84: FILE: include/linux/swap.h:241:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/swap.h:242:
+extern int scan_unevictable_handler(struct ctl_table *, int, struct file *,
+					void __user *, size_t *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/swap.h:243:
+extern int scan_unevictable_register_node(struct node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/swap.h:244:
+extern void scan_unevictable_unregister_node(struct node *node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#127: FILE: mm/vmscan.c:2369:
+	char buf[256];
+	if (page_is_file_cache(page)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#134: FILE: mm/vmscan.c:2376:
+		printk(KERN_INFO "rescued: %s %lu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#147: FILE: mm/vmscan.c:2389:
+			printk(KERN_INFO "rescued: anon %s\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: mm/vmscan.c:2398:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: mm/vmscan.c:2541:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: mm/vmscan.c:2569:
+int scan_unevictable_handler(struct ctl_table *table, int write,
+			   struct file *file, void __user *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: mm/vmscan.c:2592:
+static ssize_t write_scan_unevictable_node(struct sys_device *dev,
+					const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#272: FILE: mm/vmscan.c:2597:
+	unsigned long req = strict_strtoul(buf, 10, &res);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: mm/vmscan.c:2610:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#286: FILE: mm/vmscan.c:2611:
+static SYSDEV_ATTR(scan_unevictable_pages, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#360: FILE: include/linux/rmap.h:70:
+extern struct anon_vma *page_lock_anon_vma(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: include/linux/rmap.h:71:
+extern void page_unlock_anon_vma(struct anon_vma *anon_vma);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 11 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
