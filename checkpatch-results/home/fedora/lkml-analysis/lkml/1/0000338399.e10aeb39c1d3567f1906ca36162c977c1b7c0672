WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#472: FILE: tests/lkdtm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#486: FILE: tests/lkdtm.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#487: FILE: tests/lkdtm.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: tests/lkdtm.c:81:
+	BUG,

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#558: FILE: tests/lkdtm.c:87:
+static char* cp_name[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#569: FILE: tests/lkdtm.c:98:
+static char* cp_type[] = {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#582: FILE: tests/lkdtm.c:111:
+static char* cpoint_name;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#583: FILE: tests/lkdtm.c:112:
+static char* cpoint_type;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#592: FILE: tests/lkdtm.c:121:
+MODULE_PARM_DESC(recur_count, " Recursion level for the stack overflow test, "\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#597: FILE: tests/lkdtm.c:126:
+MODULE_PARM_DESC(cpoint_type, " Crash Point Type, action to be taken on "\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#600: FILE: tests/lkdtm.c:129:
+MODULE_PARM_DESC(cpoint_count, " Crash Point Count, number of times the "\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: tests/lkdtm.c:187:
+int jp_generic_ide_ioctl(ide_drive_t *drive, struct file *file,
+			struct block_device *bdev, unsigned int cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: tests/lkdtm.c:201:
+	if (cpoint_name == INVALID || cpoint_type == NONE ||
+					cpoint_count < 1 || recur_count < 1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: tests/lkdtm.c:219:
+                return -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: tests/lkdtm.c:219:
+                return -EINVAL;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: tests/lkdtm.c:230:
+	memset(buf,0xFF,1024);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: tests/lkdtm.c:230:
+	memset(buf,0xFF,1024);
 	               ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#705: FILE: tests/lkdtm.c:234:
+		return 0;
+	else

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: tests/lkdtm.c:235:
+        ^Ireturn recursive_loop(a);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#706: FILE: tests/lkdtm.c:235:
+        ^Ireturn recursive_loop(a);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: tests/lkdtm.c:235:
+        ^Ireturn recursive_loop(a);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#711: FILE: tests/lkdtm.c:240:
+	printk(KERN_INFO "lkdtm : Crash point %s of type %s hit\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: tests/lkdtm.c:241:
+	printk(KERN_INFO "lkdtm : Crash point %s of type %s hit\n",
+					 cpoint_name, cpoint_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#720: FILE: tests/lkdtm.c:249:
+			printk(KERN_INFO "lkdtm : PANIC\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#723: FILE: tests/lkdtm.c:252:
+		case BUG:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#724: FILE: tests/lkdtm.c:253:
+			printk(KERN_INFO "lkdtm : BUG\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: tests/lkdtm.c:254:
+			BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#728: FILE: tests/lkdtm.c:257:
+			printk(KERN_INFO "lkdtm : EXCEPTION\n");

CHECK:SPACING: No space is necessary after a cast
#729: FILE: tests/lkdtm.c:258:
+			*((int *) 0) = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#732: FILE: tests/lkdtm.c:261:
+			printk(KERN_INFO "lkdtm : LOOP\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#733: FILE: tests/lkdtm.c:262:
+			for (;;);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#736: FILE: tests/lkdtm.c:265:
+			printk(KERN_INFO "lkdtm : OVERFLOW\n");

CHECK:SPACING: No space is necessary after a cast
#737: FILE: tests/lkdtm.c:266:
+			(void) recursive_loop(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#751: FILE: tests/lkdtm.c:280:
+		printk(KERN_INFO "lkdtm : Invalid command\n");

CHECK:SPACING: No space is necessary after a cast
#758: FILE: tests/lkdtm.c:287:
+		lkdtm.entry = (kprobe_opcode_t*) jp_do_irq;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#758: FILE: tests/lkdtm.c:287:
+		lkdtm.entry = (kprobe_opcode_t*) jp_do_irq;

CHECK:SPACING: No space is necessary after a cast
#762: FILE: tests/lkdtm.c:291:
+		lkdtm.entry = (kprobe_opcode_t*) jp_handle_irq_event;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#762: FILE: tests/lkdtm.c:291:
+		lkdtm.entry = (kprobe_opcode_t*) jp_handle_irq_event;

CHECK:SPACING: No space is necessary after a cast
#766: FILE: tests/lkdtm.c:295:
+		lkdtm.entry = (kprobe_opcode_t*) jp_tasklet_action;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#766: FILE: tests/lkdtm.c:295:
+		lkdtm.entry = (kprobe_opcode_t*) jp_tasklet_action;

CHECK:SPACING: No space is necessary after a cast
#770: FILE: tests/lkdtm.c:299:
+		lkdtm.entry = (kprobe_opcode_t*) jp_ll_rw_block;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#770: FILE: tests/lkdtm.c:299:
+		lkdtm.entry = (kprobe_opcode_t*) jp_ll_rw_block;

CHECK:SPACING: No space is necessary after a cast
#774: FILE: tests/lkdtm.c:303:
+		lkdtm.entry = (kprobe_opcode_t*) jp_shrink_inactive_list;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#774: FILE: tests/lkdtm.c:303:
+		lkdtm.entry = (kprobe_opcode_t*) jp_shrink_inactive_list;

CHECK:SPACING: No space is necessary after a cast
#778: FILE: tests/lkdtm.c:307:
+		lkdtm.entry = (kprobe_opcode_t*) jp_hrtimer_start;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#778: FILE: tests/lkdtm.c:307:
+		lkdtm.entry = (kprobe_opcode_t*) jp_hrtimer_start;

CHECK:SPACING: No space is necessary after a cast
#782: FILE: tests/lkdtm.c:311:
+		lkdtm.entry = (kprobe_opcode_t*) jp_scsi_dispatch_cmd;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#782: FILE: tests/lkdtm.c:311:
+		lkdtm.entry = (kprobe_opcode_t*) jp_scsi_dispatch_cmd;

CHECK:SPACING: No space is necessary after a cast
#787: FILE: tests/lkdtm.c:316:
+		lkdtm.entry = (kprobe_opcode_t*) jp_generic_ide_ioctl;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#787: FILE: tests/lkdtm.c:316:
+		lkdtm.entry = (kprobe_opcode_t*) jp_generic_ide_ioctl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#789: FILE: tests/lkdtm.c:318:
+		printk(KERN_INFO "lkdtm : Crash point not available\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#793: FILE: tests/lkdtm.c:322:
+		printk(KERN_INFO "lkdtm : Invalid Crash Point\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#797: FILE: tests/lkdtm.c:326:
+	if ((ret = register_jprobe(&lkdtm)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: tests/lkdtm.c:327:
+                printk(KERN_INFO "lkdtm : Couldn't register jprobe\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: tests/lkdtm.c:327:
+                printk(KERN_INFO "lkdtm : Couldn't register jprobe\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#798: FILE: tests/lkdtm.c:327:
+                printk(KERN_INFO "lkdtm : Couldn't register jprobe\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: tests/lkdtm.c:328:
+                return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: tests/lkdtm.c:328:
+                return ret;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#802: FILE: tests/lkdtm.c:331:
+	printk(KERN_INFO "lkdtm : Crash point %s of type %s registered\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: tests/lkdtm.c:332:
+	printk(KERN_INFO "lkdtm : Crash point %s of type %s registered\n",
+						cpoint_name, cpoint_type);

ERROR:CODE_INDENT: code indent should use tabs where possible
#809: FILE: tests/lkdtm.c:338:
+        unregister_jprobe(&lkdtm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: tests/lkdtm.c:338:
+        unregister_jprobe(&lkdtm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#810: FILE: tests/lkdtm.c:339:
+        printk(KERN_INFO "lkdtm : Crash point unregistered\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: tests/lkdtm.c:339:
+        printk(KERN_INFO "lkdtm : Crash point unregistered\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#810: FILE: tests/lkdtm.c:339:
+        printk(KERN_INFO "lkdtm : Crash point unregistered\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338399.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 27 warnings, 14 checks, 397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338399.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
