WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <__uClinux__>
#71: FILE: arch/microblaze/include/asm/elf.h:32:
+#ifndef __uClinux__

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#82: FILE: arch/microblaze/include/asm/elf.h:43:
+typedef unsigned long elf_greg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#91: FILE: arch/microblaze/include/asm/elf.h:52:
+typedef elf_greg_t elf_gregset_t[ELF_NGREG];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#99: FILE: arch/microblaze/include/asm/elf.h:60:
+typedef unsigned long elf_fpreg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#100: FILE: arch/microblaze/include/asm/elf.h:61:
+typedef elf_fpreg_t elf_fpregset_t[ELF_NFPREG];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: arch/microblaze/include/asm/elf.h:83:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_dest' may be better as '(_dest)' to avoid precedence issues
#123: FILE: arch/microblaze/include/asm/elf.h:84:
+#define ELF_CORE_COPY_REGS(_dest, _regs)			\
+	memcpy((char *) &_dest, (char *) _regs,		\
+	sizeof(struct pt_regs));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#123: FILE: arch/microblaze/include/asm/elf.h:84:
+#define ELF_CORE_COPY_REGS(_dest, _regs)			\
+	memcpy((char *) &_dest, (char *) _regs,		\
+	sizeof(struct pt_regs));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#124: FILE: arch/microblaze/include/asm/elf.h:85:
+	memcpy((char *) &_dest, (char *) _regs,		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#143: FILE: arch/microblaze/include/asm/elf.h:104:
+#define ELF_PLAT_INIT(_r, _f)				\
+do {							\
+	_r->r1 =  _r->r1 =  _r->r2 =  _r->r3 =		\
+	_r->r4 =  _r->r5 =  _r->r6 =  _r->r7 =		\
+	_r->r8 =  _r->r9 =  _r->r10 = _r->r11 =		\
+	_r->r12 = _r->r13 = _r->r14 = _r->r15 =		\
+	_r->r16 = _r->r17 = _r->r18 = _r->r19 =		\
+	_r->r20 = _r->r21 = _r->r22 = _r->r23 =		\
+	_r->r24 = _r->r25 = _r->r26 = _r->r27 =		\
+	_r->r28 = _r->r29 = _r->r30 = _r->r31 =		\
+	0;						\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#143: FILE: arch/microblaze/include/asm/elf.h:104:
+#define ELF_PLAT_INIT(_r, _f)				\
+do {							\
+	_r->r1 =  _r->r1 =  _r->r2 =  _r->r3 =		\
+	_r->r4 =  _r->r5 =  _r->r6 =  _r->r7 =		\
+	_r->r8 =  _r->r9 =  _r->r10 = _r->r11 =		\
+	_r->r12 = _r->r13 = _r->r14 = _r->r15 =		\
+	_r->r16 = _r->r17 = _r->r18 = _r->r19 =		\
+	_r->r20 = _r->r21 = _r->r22 = _r->r23 =		\
+	_r->r24 = _r->r25 = _r->r26 = _r->r27 =		\
+	_r->r28 = _r->r29 = _r->r30 = _r->r31 =		\
+	0;						\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#143: FILE: arch/microblaze/include/asm/elf.h:104:
+#define ELF_PLAT_INIT(_r, _f)				\
+do {							\
+	_r->r1 =  _r->r1 =  _r->r2 =  _r->r3 =		\
+	_r->r4 =  _r->r5 =  _r->r6 =  _r->r7 =		\
+	_r->r8 =  _r->r9 =  _r->r10 = _r->r11 =		\
+	_r->r12 = _r->r13 = _r->r14 = _r->r15 =		\
+	_r->r16 = _r->r17 = _r->r18 = _r->r19 =		\
+	_r->r20 = _r->r21 = _r->r22 = _r->r23 =		\
+	_r->r24 = _r->r25 = _r->r26 = _r->r27 =		\
+	_r->r28 = _r->r29 = _r->r30 = _r->r31 =		\
+	0;						\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#145: FILE: arch/microblaze/include/asm/elf.h:106:
+	_r->r1 =  _r->r1 =  _r->r2 =  _r->r3 =		\

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#146: FILE: arch/microblaze/include/asm/elf.h:107:
+	_r->r4 =  _r->r5 =  _r->r6 =  _r->r7 =		\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#147: FILE: arch/microblaze/include/asm/elf.h:108:
+	_r->r8 =  _r->r9 =  _r->r10 = _r->r11 =		\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#148: FILE: arch/microblaze/include/asm/elf.h:109:
+	_r->r12 = _r->r13 = _r->r14 = _r->r15 =		\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#149: FILE: arch/microblaze/include/asm/elf.h:110:
+	_r->r16 = _r->r17 = _r->r18 = _r->r19 =		\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#150: FILE: arch/microblaze/include/asm/elf.h:111:
+	_r->r20 = _r->r21 = _r->r22 = _r->r23 =		\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#151: FILE: arch/microblaze/include/asm/elf.h:112:
+	_r->r24 = _r->r25 = _r->r26 = _r->r27 =		\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#152: FILE: arch/microblaze/include/asm/elf.h:113:
+	_r->r28 = _r->r29 = _r->r30 = _r->r31 =		\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119776.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 14 checks, 101 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119776.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
