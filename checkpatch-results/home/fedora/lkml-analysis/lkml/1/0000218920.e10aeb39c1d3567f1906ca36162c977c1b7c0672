WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-v28-for-linus-phase7

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#290: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#295: FILE: arch/x86/oprofile/op_model_amd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#307: FILE: arch/x86/oprofile/op_model_amd.c:13:
+ * @author Barry Kasindorf
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#315: FILE: arch/x86/oprofile/op_model_amd.c:21:
+#include <asm/nmi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msrs' may be better as '(msrs)' to avoid precedence issues
#323: FILE: arch/x86/oprofile/op_model_amd.c:29:
+#define CTR_IS_RESERVED(msrs, c) (msrs->counters[(c)].addr ? 1 : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msrs' may be better as '(msrs)' to avoid precedence issues
#324: FILE: arch/x86/oprofile/op_model_amd.c:30:
+#define CTR_READ(l, h, msrs, c) do {rdmsr(msrs->counters[(c)].addr, (l), (h)); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#324: FILE: arch/x86/oprofile/op_model_amd.c:30:
+#define CTR_READ(l, h, msrs, c) do {rdmsr(msrs->counters[(c)].addr, (l), (h)); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#325: FILE: arch/x86/oprofile/op_model_amd.c:31:
+#define CTR_WRITE(l, msrs, c) do {wrmsr(msrs->counters[(c)].addr, -(unsigned int)(l), -1); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msrs' may be better as '(msrs)' to avoid precedence issues
#325: FILE: arch/x86/oprofile/op_model_amd.c:31:
+#define CTR_WRITE(l, msrs, c) do {wrmsr(msrs->counters[(c)].addr, -(unsigned int)(l), -1); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#325: FILE: arch/x86/oprofile/op_model_amd.c:31:
+#define CTR_WRITE(l, msrs, c) do {wrmsr(msrs->counters[(c)].addr, -(unsigned int)(l), -1); } while (0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#326: FILE: arch/x86/oprofile/op_model_amd.c:32:
+#define CTR_OVERFLOWED(n) (!((n) & (1U<<31)))
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msrs' may be better as '(msrs)' to avoid precedence issues
#328: FILE: arch/x86/oprofile/op_model_amd.c:34:
+#define CTRL_IS_RESERVED(msrs, c) (msrs->controls[(c)].addr ? 1 : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msrs' may be better as '(msrs)' to avoid precedence issues
#329: FILE: arch/x86/oprofile/op_model_amd.c:35:
+#define CTRL_READ(l, h, msrs, c) do {rdmsr(msrs->controls[(c)].addr, (l), (h)); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#329: FILE: arch/x86/oprofile/op_model_amd.c:35:
+#define CTRL_READ(l, h, msrs, c) do {rdmsr(msrs->controls[(c)].addr, (l), (h)); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'msrs' may be better as '(msrs)' to avoid precedence issues
#330: FILE: arch/x86/oprofile/op_model_amd.c:36:
+#define CTRL_WRITE(l, h, msrs, c) do {wrmsr(msrs->controls[(c)].addr, (l), (h)); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#330: FILE: arch/x86/oprofile/op_model_amd.c:36:
+#define CTRL_WRITE(l, h, msrs, c) do {wrmsr(msrs->controls[(c)].addr, (l), (h)); } while (0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#331: FILE: arch/x86/oprofile/op_model_amd.c:37:
+#define CTRL_SET_ACTIVE(n) (n |= (1<<22))
                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#331: FILE: arch/x86/oprofile/op_model_amd.c:37:
+#define CTRL_SET_ACTIVE(n) (n |= (1<<22))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#332: FILE: arch/x86/oprofile/op_model_amd.c:38:
+#define CTRL_SET_INACTIVE(n) (n &= ~(1<<22))
                                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#332: FILE: arch/x86/oprofile/op_model_amd.c:38:
+#define CTRL_SET_INACTIVE(n) (n &= ~(1<<22))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#333: FILE: arch/x86/oprofile/op_model_amd.c:39:
+#define CTRL_CLEAR_LO(x) (x &= (1<<21))
                                  ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#333: FILE: arch/x86/oprofile/op_model_amd.c:39:
+#define CTRL_CLEAR_LO(x) (x &= (1<<21))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#334: FILE: arch/x86/oprofile/op_model_amd.c:40:
+#define CTRL_CLEAR_HI(x) (x &= 0xfffffcf0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#335: FILE: arch/x86/oprofile/op_model_amd.c:41:
+#define CTRL_SET_ENABLE(val) (val |= 1<<20)
                                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#335: FILE: arch/x86/oprofile/op_model_amd.c:41:
+#define CTRL_SET_ENABLE(val) (val |= 1<<20)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#336: FILE: arch/x86/oprofile/op_model_amd.c:42:
+#define CTRL_SET_USR(val, u) (val |= ((u & 1) << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'u' may be better as '(u)' to avoid precedence issues
#336: FILE: arch/x86/oprofile/op_model_amd.c:42:
+#define CTRL_SET_USR(val, u) (val |= ((u & 1) << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#337: FILE: arch/x86/oprofile/op_model_amd.c:43:
+#define CTRL_SET_KERN(val, k) (val |= ((k & 1) << 17))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#337: FILE: arch/x86/oprofile/op_model_amd.c:43:
+#define CTRL_SET_KERN(val, k) (val |= ((k & 1) << 17))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#338: FILE: arch/x86/oprofile/op_model_amd.c:44:
+#define CTRL_SET_UM(val, m) (val |= (m << 8))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#338: FILE: arch/x86/oprofile/op_model_amd.c:44:
+#define CTRL_SET_UM(val, m) (val |= (m << 8))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#339: FILE: arch/x86/oprofile/op_model_amd.c:45:
+#define CTRL_SET_EVENT_LOW(val, e) (val |= (e & 0xff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'e' may be better as '(e)' to avoid precedence issues
#339: FILE: arch/x86/oprofile/op_model_amd.c:45:
+#define CTRL_SET_EVENT_LOW(val, e) (val |= (e & 0xff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#340: FILE: arch/x86/oprofile/op_model_amd.c:46:
+#define CTRL_SET_EVENT_HIGH(val, e) (val |= ((e >> 8) & 0xf))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'e' may be better as '(e)' to avoid precedence issues
#340: FILE: arch/x86/oprofile/op_model_amd.c:46:
+#define CTRL_SET_EVENT_HIGH(val, e) (val |= ((e >> 8) & 0xf))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#341: FILE: arch/x86/oprofile/op_model_amd.c:47:
+#define CTRL_SET_HOST_ONLY(val, h) (val |= ((h & 1) << 9))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#341: FILE: arch/x86/oprofile/op_model_amd.c:47:
+#define CTRL_SET_HOST_ONLY(val, h) (val |= ((h & 1) << 9))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#342: FILE: arch/x86/oprofile/op_model_amd.c:48:
+#define CTRL_SET_GUEST_ONLY(val, h) (val |= ((h & 1) << 8))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#342: FILE: arch/x86/oprofile/op_model_amd.c:48:
+#define CTRL_SET_GUEST_ONLY(val, h) (val |= ((h & 1) << 8))

CHECK:BIT_MACRO: Prefer using the BIT macro
#349: FILE: arch/x86/oprofile/op_model_amd.c:55:
+#define IBS_FETCH_HIGH_VALID_BIT	(1UL << 17)	/* bit 49 */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#350: FILE: arch/x86/oprofile/op_model_amd.c:56:
+#define IBS_FETCH_HIGH_ENABLE		(1UL << 16)	/* bit 48 */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#354: FILE: arch/x86/oprofile/op_model_amd.c:60:
+#define IBS_OP_LOW_VALID_BIT		(1ULL<<18)	/* bit 18 */
                             		     ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#354: FILE: arch/x86/oprofile/op_model_amd.c:60:
+#define IBS_OP_LOW_VALID_BIT		(1ULL<<18)	/* bit 18 */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#355: FILE: arch/x86/oprofile/op_model_amd.c:61:
+#define IBS_OP_LOW_ENABLE		(1ULL<<17)	/* bit 17 */
                          		     ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#355: FILE: arch/x86/oprofile/op_model_amd.c:61:
+#define IBS_OP_LOW_ENABLE		(1ULL<<17)	/* bit 17 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#363: FILE: arch/x86/oprofile/op_model_amd.c:69:
+/* The function interface needs to be fixed, something like add
+   data. Should then be added to linux/oprofile.h. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: arch/x86/oprofile/op_model_amd.c:69:
+   data. Should then be added to linux/oprofile.h. */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#364: FILE: arch/x86/oprofile/op_model_amd.c:70:
+extern void oprofile_add_ibs_sample(struct pt_regs *const regs,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'unitialize' may be misspelled - perhaps 'uninitialize'?
#401: FILE: arch/x86/oprofile/op_model_amd.c:107:
+ * unitialize the APIC for the IBS interrupts if needed on AMD Family10h+
    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#402: FILE: arch/x86/oprofile/op_model_amd.c:108:
+ * unitialize the APIC for the IBS interrupts if needed on AMD Family10h+
+*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: arch/x86/oprofile/op_model_amd.c:147:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'counter_config[i].enabled'
#466: FILE: arch/x86/oprofile/op_model_amd.c:172:
+		if ((counter_config[i].enabled) && (CTR_IS_RESERVED(msrs, i))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#519: FILE: arch/x86/oprofile/op_model_amd.c:225:
+			/*reenable the IRQ */
 			  ^^^^^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#550: FILE: arch/x86/oprofile/op_model_amd.c:256:
+			/* reenable the IRQ */
 			   ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#595: FILE: arch/x86/oprofile/op_model_amd.c:301:
+	int i;
+	for (i = 0 ; i < NUM_COUNTERS ; ++i) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#618: FILE: arch/x86/oprofile/op_model_amd.c:324:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#625: FILE: arch/x86/oprofile/op_model_amd.c:331:
+	 * setting our pm callback */

CHECK:BIT_MACRO: Prefer using the BIT macro
#690: FILE: arch/x86/oprofile/op_model_amd.c:396:
+#define IBSCTL_LVTOFFSETVAL		(1 << 8)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#712: FILE: arch/x86/oprofile/op_model_amd.c:418:
+			printk(KERN_DEBUG "Failed to setup IBS LVT offset, "

WARNING:SPLIT_STRING: quoted string split across lines
#713: FILE: arch/x86/oprofile/op_model_amd.c:419:
+			printk(KERN_DEBUG "Failed to setup IBS LVT offset, "
+				"IBSCTL = 0x%08x", value);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#719: FILE: arch/x86/oprofile/op_model_amd.c:425:
+		printk(KERN_DEBUG "No CPU node configured for IBS");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#727: FILE: arch/x86/oprofile/op_model_amd.c:433:
+		printk(KERN_DEBUG "Failed to setup CPU node(s) for IBS, "

WARNING:SPLIT_STRING: quoted string split across lines
#728: FILE: arch/x86/oprofile/op_model_amd.c:434:
+		printk(KERN_DEBUG "Failed to setup CPU node(s) for IBS, "
+			"found: %d, expected %d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#752: FILE: arch/x86/oprofile/op_model_amd.c:458:
+	printk(KERN_INFO "oprofile: AMD IBS detected\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#755: FILE: arch/x86/oprofile/op_model_amd.c:461:
+
+

WARNING:TYPO_SPELLING: 'unitialize' may be misspelled - perhaps 'uninitialize'?
#757: FILE: arch/x86/oprofile/op_model_amd.c:463:
+ * unitialize the APIC for the IBS interrupts if needed on AMD Family10h
    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#758: FILE: arch/x86/oprofile/op_model_amd.c:464:
+ * rev B0 and later */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#765: FILE: arch/x86/oprofile/op_model_amd.c:471:
+static int (*create_arch_files)(struct super_block * sb, struct dentry * root);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#765: FILE: arch/x86/oprofile/op_model_amd.c:471:
+static int (*create_arch_files)(struct super_block * sb, struct dentry * root);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#767: FILE: arch/x86/oprofile/op_model_amd.c:473:
+static int setup_ibs_files(struct super_block * sb, struct dentry * root)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#767: FILE: arch/x86/oprofile/op_model_amd.c:473:
+static int setup_ibs_files(struct super_block * sb, struct dentry * root)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: arch/x86/oprofile/op_model_amd.c:502:
+	oprofilefs_create_ulong(sb, dir, "enable",
+		&ibs_config.fetch_enabled);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: arch/x86/oprofile/op_model_amd.c:504:
+	oprofilefs_create_ulong(sb, dir, "max_count",
+		&ibs_config.max_cnt_fetch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: arch/x86/oprofile/op_model_amd.c:508:
+	oprofilefs_create_ulong(sb, dir, "enable",
+		&ibs_config.op_enabled);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: arch/x86/oprofile/op_model_amd.c:510:
+	oprofilefs_create_ulong(sb, dir, "max_count",
+		&ibs_config.max_cnt_op);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: arch/x86/oprofile/op_model_amd.c:512:
+	oprofilefs_create_ulong(sb, dir, "dispatched_ops",
+		&ibs_config.dispatched_ops);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1128: FILE: drivers/oprofile/buffer_sync.c:106:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1143: FILE: drivers/oprofile/buffer_sync.c:126:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1152: FILE: drivers/oprofile/buffer_sync.c:143:
 
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1189: FILE: drivers/oprofile/buffer_sync.c:250:
 	for (vma = find_vma(mm, addr); vma; vma = vma->vm_next) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'synchromized' may be misspelled - perhaps 'synchronized'?
#1201: FILE: drivers/oprofile/buffer_sync.c:276:
+	rmb();	/* be sure fifo pointers are synchromized */
 	      	                             ^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1242: FILE: drivers/oprofile/buffer_sync.c:316:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1251: FILE: drivers/oprofile/buffer_sync.c:324:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: drivers/oprofile/buffer_sync.c:344:
+static void add_ibs_begin(struct oprofile_cpu_buffer *cpu_buf, int code,
+	int in_kernel, struct mm_struct *mm)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1286: FILE: drivers/oprofile/buffer_sync.c:359:
+	if (mm) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1299: FILE: drivers/oprofile/buffer_sync.c:372:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1349: FILE: drivers/oprofile/buffer_sync.c:426:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1367: FILE: drivers/oprofile/buffer_sync.c:445:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1465: FILE: drivers/oprofile/buffer_sync.c:597:
+				add_ibs_begin(cpu_buf,
+					IBS_FETCH_CODE, in_kernel, mm);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1469: FILE: drivers/oprofile/buffer_sync.c:601:
+				add_ibs_begin(cpu_buf,
+					IBS_OP_CODE, in_kernel, mm);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1525: FILE: drivers/oprofile/cpu_buffer.c:262:
+static int log_ibs_sample(struct oprofile_cpu_buffer *cpu_buf,
+	unsigned long pc, int is_kernel, unsigned  int *ibs, int ibs_code)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1559: FILE: drivers/oprofile/cpu_buffer.c:296:
+	if (ibs_code == IBS_OP_BEGIN) {
+	add_sample(cpu_buf, ibs[6], ibs[7]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1569: FILE: drivers/oprofile/cpu_buffer.c:306:
+void oprofile_add_ibs_sample(struct pt_regs *const regs,
+				unsigned int * const ibs_sample, u8 code)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1583: FILE: drivers/oprofile/cpu_buffer.c:320:
+	* of this event */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1583: FILE: drivers/oprofile/cpu_buffer.c:320:
+	/* if log_sample() fails we can't backtrace since we lost the source
+	* of this event */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1598: FILE: drivers/oprofile/cpu_buffer.c:369:
+		printk(KERN_DEBUG "WQ on CPU%d, prefer CPU%d\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218920.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 31 warnings, 62 checks, 1218 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218920.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
