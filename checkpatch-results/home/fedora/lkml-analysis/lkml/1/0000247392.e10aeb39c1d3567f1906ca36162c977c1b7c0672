WARNING:TYPO_SPELLING: 'Unfortunatly' may be misspelled - perhaps 'Unfortunately'?
#34: 
code to prevent most of these cases. Unfortunatly, kstop_machine does not
                                     ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
a warning and disables ftrace.  Near the end of the boot process, the kernel

WARNING:TYPO_SPELLING: 'preformance' may be misspelled - perhaps 'performance'?
#57: 
This is not turned on by default since it brings the preformance of the
                                                     ^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#79: FILE: kernel/trace/Kconfig:138:
+config FTRACE_NMI_TESTER
+	bool "Enable NMI checking in all ftrace calls"
+	depends on DYNAMIC_FTRACE
+	help
+	  This option is used to find areas in the kernel that might be traced
+	  in NMI context. It adds a function tracer that only checks to see

Kconfig symbols should have a help text which fully describes
it.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#110: FILE: kernel/trace/ftrace.c:1483:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#117: FILE: kernel/trace/ftrace.c:1490:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#119: FILE: kernel/trace/ftrace.c:1492:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#122: FILE: kernel/trace/ftrace.c:1495:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#125: FILE: kernel/trace/ftrace.c:1498:
+		printk(KERN_WARNING

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#131: FILE: kernel/trace/ftrace.c:1504:
+static struct ftrace_ops ftrace_nmi_trace_ops __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: kernel/trace/ftrace.c:1509:
+ftrace_nmi_tester_read(struct file *filp, char __user *ubuf,
                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#147: FILE: kernel/trace/ftrace.c:1520:
+ftrace_nmi_tester_write(struct file *filp, const char __user *ubuf,
                                      ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#160: FILE: kernel/trace/ftrace.c:1533:
+	if (strncmp(buf, "enable", 6) == 0)
[...]
+	else if (strncmp(buf, "disable", 7) == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#164: FILE: kernel/trace/ftrace.c:1537:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#167: FILE: kernel/trace/ftrace.c:1540:
+		ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#187: FILE: kernel/trace/ftrace.c:1560:
+static struct file_operations ftrace_nmi_tester_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPLIT_STRING: quoted string split across lines
#207: FILE: kernel/trace/ftrace.c:1686:
+		pr_warning("Could not create debugfs "
+			   "'ftrace_nmi_tester' entry\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247392.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 3 checks, 132 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247392.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
