CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/swap.h:317:
+extern int add_swap_count_continuation(swp_entry_t, gfp_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#106: FILE: include/linux/swap.h:317:
+extern int add_swap_count_continuation(swp_entry_t, gfp_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#106: FILE: include/linux/swap.h:317:
+extern int add_swap_count_continuation(swp_entry_t, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/swap.h:318:
+extern int swap_duplicate(swp_entry_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#107: FILE: include/linux/swap.h:318:
+extern int swap_duplicate(swp_entry_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/swap.h:319:
+extern int swapcache_prepare(swp_entry_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#108: FILE: include/linux/swap.h:319:
+extern int swapcache_prepare(swp_entry_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: mm/memory.c:679:
+		entry.val = copy_one_pte(dst_mm, src_mm, dst_pte, src_pte,
+							vma, addr, rss);

CHECK:BRACES: braces {} should be used on all arms of this statement
#240: FILE: mm/swapfile.c:552:
+		if (count == COUNT_CONTINUED) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#245: FILE: mm/swapfile.c:557:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: mm/swapfile.c:2277:
+		BUG_ON(count & COUNT_CONTINUED);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: mm/swapfile.c:2332:
+		BUG_ON(count & COUNT_CONTINUED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#547: FILE: mm/swapfile.c:2350:
+			BUG_ON(page == head);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: mm/swapfile.c:2376:
+		BUG_ON(count != COUNT_CONTINUED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#577: FILE: mm/swapfile.c:2380:
+			BUG_ON(page == head);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#580: FILE: mm/swapfile.c:2383:
+		BUG_ON(*map == 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: mm/swapfile.c:2410:
+		struct page *head;
+		head = vmalloc_to_page(si->swap_map + offset);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: mm/swapfile.c:2413:
+			struct list_head *this, *next;
+			list_for_each_safe(this, next, &head->lru) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: mm/swapfile.c:2415:
+				struct page *page;
+				page = list_entry(this, struct page, lru);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 6 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
