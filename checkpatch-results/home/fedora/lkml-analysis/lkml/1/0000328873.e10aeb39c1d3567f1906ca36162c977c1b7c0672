WARNING:REPEATED_WORD: Possible repeated word: 'many'
#38: 
implementing store operation, so many many callers are doing duplicate

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
This patch tries to fix the aforementioned issues and implements real_strtox

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/kernel.h:144:
+extern int real_strtoul(const char *, unsigned int, unsigned long *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#122: FILE: include/linux/kernel.h:144:
+extern int real_strtoul(const char *, unsigned int, unsigned long *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#122: FILE: include/linux/kernel.h:144:
+extern int real_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#122: FILE: include/linux/kernel.h:144:
+extern int real_strtoul(const char *, unsigned int, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/kernel.h:145:
+extern int real_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#123: FILE: include/linux/kernel.h:145:
+extern int real_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#123: FILE: include/linux/kernel.h:145:
+extern int real_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#123: FILE: include/linux/kernel.h:145:
+extern int real_strtol(const char *, unsigned int, long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/kernel.h:146:
+extern int real_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#124: FILE: include/linux/kernel.h:146:
+extern int real_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#124: FILE: include/linux/kernel.h:146:
+extern int real_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#124: FILE: include/linux/kernel.h:146:
+extern int real_strtoull(const char *, unsigned int, unsigned long long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/kernel.h:147:
+extern int real_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#125: FILE: include/linux/kernel.h:147:
+extern int real_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#125: FILE: include/linux/kernel.h:147:
+extern int real_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long *' should also have an identifier name
#125: FILE: include/linux/kernel.h:147:
+extern int real_strtoll(const char *, unsigned int, long long *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'valtype' - possible side-effects?
#135: FILE: lib/vsprintf.c:129:
+#define define_real_strtoux(type, valtype)				\
+int real_strtou##type(const char *cp, unsigned int base, valtype *res)	\
+{									\
+	char *tail;							\
+	valtype val;							\
+	size_t len;							\
+									\
+	*res = 0;							\
+	len = strlen(cp);						\
+	if (len == 0)							\
+		return -EINVAL;						\
+									\
+	val = simple_strtoul(cp, &tail, base);				\
+	if ((*tail == '\0') ||						\
+		(len == (size_t)(tail - cp) + 1) && (*tail == '\n')) {	\
+		*res = val;						\
+		return 0;						\
+	}								\
+									\
+	return -EINVAL;							\
+}									\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'valtype' may be better as '(valtype)' to avoid precedence issues
#135: FILE: lib/vsprintf.c:129:
+#define define_real_strtoux(type, valtype)				\
+int real_strtou##type(const char *cp, unsigned int base, valtype *res)	\
+{									\
+	char *tail;							\
+	valtype val;							\
+	size_t len;							\
+									\
+	*res = 0;							\
+	len = strlen(cp);						\
+	if (len == 0)							\
+		return -EINVAL;						\
+									\
+	val = simple_strtoul(cp, &tail, base);				\
+	if ((*tail == '\0') ||						\
+		(len == (size_t)(tail - cp) + 1) && (*tail == '\n')) {	\
+		*res = val;						\
+		return 0;						\
+	}								\
+									\
+	return -EINVAL;							\
+}									\
+

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#136: FILE: lib/vsprintf.c:130:
+int real_strtou##type(const char *cp, unsigned int base, valtype *res)	\
                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#147: FILE: lib/vsprintf.c:141:
+	val = simple_strtoul(cp, &tail, base);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'valtype' may be better as '(valtype)' to avoid precedence issues
#157: FILE: lib/vsprintf.c:151:
+#define define_real_strtox(type, valtype)				\
+int real_strto##type(const char *cp, unsigned int base, valtype *res)	\
+{									\
+	int ret;							\
+	if (*cp == '-') {						\
+		ret = real_strtou##type(cp+1, base, res);		\
+		if (ret != 0)						\
+			*res = -(*res);					\
+	} else								\
+		ret = real_strtou##type(cp+1, base, res);		\
+									\
+	return ret;							\
+}									\
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#162: FILE: lib/vsprintf.c:156:
+		ret = real_strtou##type(cp+1, base, res);		\
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: lib/vsprintf.c:160:
+		ret = real_strtou##type(cp+1, base, res);		\
 		                          ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#176: FILE: lib/vsprintf.c:170:
+EXPORT_SYMBOL(real_strtoul);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#177: FILE: lib/vsprintf.c:171:
+EXPORT_SYMBOL(real_strtol);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#178: FILE: lib/vsprintf.c:172:
+EXPORT_SYMBOL(real_strtoll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#179: FILE: lib/vsprintf.c:173:
+EXPORT_SYMBOL(real_strtoull);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000328873.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 10 checks, 97 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000328873.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
