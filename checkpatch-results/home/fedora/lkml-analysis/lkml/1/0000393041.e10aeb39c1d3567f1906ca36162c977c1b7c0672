WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
Content-Disposition: attachment; filename="sync_sb_inodes-propagate-errors.patch"

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#253: FILE: include/linux/writeback.h:73:
+int sync_inodes_sb(struct super_block *, int wait);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BAD_SIGN_OFF: Duplicate signature
#288: 
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: fs/fs-writeback.c:394:
+int generic_sync_sb_inodes(struct super_block *sb,
+			struct writeback_control *wbc)

WARNING:SPACING: Unnecessary space before function pointer arguments
#379: FILE: include/linux/fs.h:1263:
+	int (*sync_inodes) (struct super_block *sb,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: include/linux/fs.h:1264:
+	int (*sync_inodes) (struct super_block *sb,
+				struct writeback_control *wbc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: include/linux/fs.h:1659:
+extern int generic_sync_sb_inodes(struct super_block *, struct writeback_control *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#388: FILE: include/linux/fs.h:1659:
+extern int generic_sync_sb_inodes(struct super_block *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#388: FILE: include/linux/fs.h:1659:
+extern int generic_sync_sb_inodes(struct super_block *, struct writeback_control *);

WARNING:BAD_SIGN_OFF: Duplicate signature
#428: 
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: fs/fs-writeback.c:36:
+		struct inode *inode = list_entry(cursor, struct inode, i_list);
+		if (print_stuff) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: fs/fs-writeback.c:37:
+			printk("%p:%lu\n", inode, inode->dirtied_when);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: fs/fs-writeback.c:49:
+static void __check_dirty_inode_list(struct super_block *sb,
+			struct inode *inode, const char *file, int line)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#472: FILE: fs/fs-writeback.c:57:
+			printk("%s:%d: s_dirty got screwed up.  inode=%p:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/fs-writeback.c:58:
+			printk("%s:%d: s_dirty got screwed up.  inode=%p:%lu\n",
+					file, line, inode, inode->dirtied_when);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#475: FILE: fs/fs-writeback.c:60:
+			printk("%s:%d: s_dirty got screwed up\n", file, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#481: FILE: fs/fs-writeback.c:66:
+			printk("%s:%d: s_io got screwed up.  inode=%p:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: fs/fs-writeback.c:67:
+			printk("%s:%d: s_io got screwed up.  inode=%p:%lu\n",
+					file, line, inode, inode->dirtied_when);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#484: FILE: fs/fs-writeback.c:69:
+			printk("%s:%d: s_io got screwed up\n", file, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#490: FILE: fs/fs-writeback.c:75:
+			printk("%s:%d: s_more_io got screwed up.  inode=%p:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: fs/fs-writeback.c:76:
+			printk("%s:%d: s_more_io got screwed up.  inode=%p:%lu\n",
+					file, line, inode, inode->dirtied_when);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#493: FILE: fs/fs-writeback.c:78:
+			printk("%s:%d: s_more_io got screwed up\n", file, line);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#500: FILE: fs/fs-writeback.c:85:
+		if (unlikely(sysctl_inode_debug))			\
+		__check_dirty_inode_list(sb, NULL, __FILE__, __LINE__);	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#504: FILE: fs/fs-writeback.c:89:
+#define check_dirty_inode(inode)					\
+	do {								\
+		if (unlikely(sysctl_inode_debug))			\
+			__check_dirty_inode_list(inode->i_sb, inode,	\
+						__FILE__, __LINE__);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#504: FILE: fs/fs-writeback.c:89:
+#define check_dirty_inode(inode)					\
+	do {								\
+		if (unlikely(sysctl_inode_debug))			\
+			__check_dirty_inode_list(inode->i_sb, inode,	\
+						__FILE__, __LINE__);	\
+	} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000393041.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 9 checks, 381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000393041.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
