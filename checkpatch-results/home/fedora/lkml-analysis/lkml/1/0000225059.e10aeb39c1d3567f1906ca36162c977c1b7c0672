WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: include/linux/ring_buffer.h:1:
+#ifndef _LINUX_RING_BUFFER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#106: FILE: include/linux/ring_buffer.h:18:
+} __attribute__((__packed__));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#144: FILE: include/linux/ring_buffer.h:56:
+unsigned ring_buffer_seq_length(struct ring_buffer_seq *seq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#145: FILE: include/linux/ring_buffer.h:57:
+void ring_buffer_seq_set_length(struct ring_buffer_seq *seq, unsigned len);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#147: FILE: include/linux/ring_buffer.h:59:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/linux/ring_buffer.h:66:
+ssize_t ring_buffer_seq_copy_to_user(struct ring_buffer_seq *seq,
+				 char __user *ubuf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: include/linux/ring_buffer.h:108:
+ring_buffer_start(struct ring_buffer *buffer, unsigned flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: kernel/trace/ring_buffer.c:1:
+/*

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#253: FILE: kernel/trace/ring_buffer.c:22:
+#define RB_EVENT_HASHSIZE	(1<<RB_EVENT_HASHBITS)
                          	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: kernel/trace/ring_buffer.c:22:
+#define RB_EVENT_HASHSIZE	(1<<RB_EVENT_HASHBITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#278: FILE: kernel/trace/ring_buffer.c:47:
+	unsigned		pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: kernel/trace/ring_buffer.c:48:
+	unsigned		page_size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: kernel/trace/ring_buffer.c:49:
+	unsigned		flags;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#284: FILE: kernel/trace/ring_buffer.c:53:
+	spinlock_t		lock;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#285: FILE: kernel/trace/ring_buffer.c:54:
+	struct mutex		mutex;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: kernel/trace/ring_buffer.c:76:
+	unsigned		event_type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: kernel/trace/ring_buffer.c:77:
+	unsigned		length;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#321: FILE: kernel/trace/ring_buffer.c:90:
+	unsigned			flags;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#330: FILE: kernel/trace/ring_buffer.c:99:
+static struct file_operations text_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#331: FILE: kernel/trace/ring_buffer.c:100:
+#if 0

WARNING:CONST_STRUCT: struct file_operations should normally be const
#339: FILE: kernel/trace/ring_buffer.c:108:
+static struct file_operations binary_fops = {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#340: FILE: kernel/trace/ring_buffer.c:109:
+#if 0

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#355: FILE: kernel/trace/ring_buffer.c:124:
+DEFINE_MUTEX(buffer_mutex);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#359: FILE: kernel/trace/ring_buffer.c:128:
+static char temp_buffer[TEMP_BUFFER_SIZE+1];
                                         ^

WARNING:SPLIT_STRING: quoted string split across lines
#374: FILE: kernel/trace/ring_buffer.c:143:
+			pr_warning("Could not create debugfs directory"
+				   " 'tracing/buffers'\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#410: FILE: kernel/trace/ring_buffer.c:179:
+		if (buffer->binary_ents[i])
+			debugfs_remove(buffer->binary_ents[i]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#665: FILE: kernel/trace/ring_buffer.c:434:
+	event->name = kzalloc(r+1, GFP_KERNEL);
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#674: FILE: kernel/trace/ring_buffer.c:443:
+		vsnprintf(event->name, r+1, name, args2);
 		                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: kernel/trace/ring_buffer.c:563:
+ring_buffer_reserve_next_event(struct ring_buffer_per_cpu *cpu_buffer,
+			   unsigned long length)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#807: FILE: kernel/trace/ring_buffer.c:576:
+	BUG_ON(tail_page >= buffer->pages);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#808: FILE: kernel/trace/ring_buffer.c:577:
+	BUG_ON(head_page >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: kernel/trace/ring_buffer.c:610:
+	BUG_ON(tail_page >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#842: FILE: kernel/trace/ring_buffer.c:611:
+	BUG_ON(ring_buffer_short_event(buffer, tail));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1003: FILE: kernel/trace/ring_buffer.c:772:
+	for (cpu = 0; cpu < buffer->cpus; cpu++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1020: FILE: kernel/trace/ring_buffer.c:789:
+	for (cpu = buffer->cpus - 1; cpu >= 0; cpu--) {
+

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#1045: FILE: kernel/trace/ring_buffer.c:814:
+ * to truely enable the writing (much like preempt_disable).
       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1151: FILE: kernel/trace/ring_buffer.c:920:
+		BUG_ON(cpu_buffer->head_page == cpu_buffer->tail_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1157: FILE: kernel/trace/ring_buffer.c:926:
+	BUG_ON((cpu_buffer->head_page == cpu_buffer->tail_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_buffer->head_page != cpu_buffer->tail_page'
#1169: FILE: kernel/trace/ring_buffer.c:938:
+	if ((ring_buffer_short_event(buffer, cpu_buffer->head) ||
+	     ring_buffer_null_event(event)) &&
+	    (cpu_buffer->head_page != cpu_buffer->tail_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1188: FILE: kernel/trace/ring_buffer.c:957:
+		BUG_ON(cpu_iter->head_page == cpu_buffer->tail_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1194: FILE: kernel/trace/ring_buffer.c:963:
+	BUG_ON((cpu_iter->head_page == cpu_buffer->tail_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_iter->head_page != cpu_buffer->tail_page'
#1206: FILE: kernel/trace/ring_buffer.c:975:
+	if ((ring_buffer_short_event(buffer, cpu_iter->head) ||
+	     ring_buffer_null_event(event)) &&
+	    (cpu_iter->head_page != cpu_buffer->tail_page))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1279: FILE: kernel/trace/ring_buffer.c:1048:
+ring_buffer_start(struct ring_buffer *buffer, unsigned iter_flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1447: FILE: kernel/trace/ring_buffer.c:1216:
+	cpu_buffer->head_page = cpu_buffer->tail_page = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1448: FILE: kernel/trace/ring_buffer.c:1217:
+	cpu_buffer->head = cpu_buffer->tail = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1611: FILE: kernel/trace/ring_buffer.c:1380:
+unsigned ring_buffer_seq_length(struct ring_buffer_seq *seq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1616: FILE: kernel/trace/ring_buffer.c:1385:
+void ring_buffer_seq_set_length(struct ring_buffer_seq *seq, unsigned len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1618: FILE: kernel/trace/ring_buffer.c:1387:
+	BUG_ON(len > PAGE_SIZE);

WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#1628: FILE: kernel/trace/ring_buffer.c:1397:
+ * copy to user routines. To simplify formating of a trace
                                       ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1714: FILE: kernel/trace/ring_buffer.c:1483:
+	BUG_ON(len >= HEX_CHARS);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1719: FILE: kernel/trace/ring_buffer.c:1488:
+	for (i = len-1, j = 0; i >= 0; i--) {
 	            ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1805: FILE: kernel/trace/Kconfig:18:
+config RING_BUFFER
+	bool "ring buffer"
+	select DEBUG_FS
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 35 warnings, 17 checks, 1720 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
