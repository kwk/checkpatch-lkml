WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: drivers/md/dm-adaptive.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#110: FILE: drivers/md/dm-adaptive.c:63:
+static int ad_create(struct path_selector *ps, unsigned argc, char **argv)

CHECK:SPACING: No space is necessary after a cast
#124: FILE: drivers/md/dm-adaptive.c:77:
+	struct selector *s = (struct selector *) ps->context;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: drivers/md/dm-adaptive.c:86:
+static int ad_status(struct path_selector *ps, struct dm_path *path,
+			status_type_t type, char *result, unsigned int maxlen)

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: drivers/md/dm-adaptive.c:91:
+	if (!path)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#140: FILE: drivers/md/dm-adaptive.c:93:
+	else {

CHECK:SPACING: No space is necessary after a cast
#141: FILE: drivers/md/dm-adaptive.c:94:
+		pi = (struct path_info *) path->pscontext;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: drivers/md/dm-adaptive.c:96:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: drivers/md/dm-adaptive.c:101:
+			DMEMIT("if:%08lu pf:%06lu rsR:%06lu rsW:%06lu ",
+				(unsigned long) atomic_read(&pi->in_flight),

CHECK:SPACING: No space is necessary after a cast
#148: FILE: drivers/md/dm-adaptive.c:101:
+				(unsigned long) atomic_read(&pi->in_flight),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: drivers/md/dm-adaptive.c:118:
+static int ad_add_path(struct path_selector *ps, struct dm_path *path,
+			int argc, char **argv, char **error)

CHECK:SPACING: No space is necessary after a cast
#167: FILE: drivers/md/dm-adaptive.c:120:
+	struct selector *s = (struct selector *) ps->context;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'argc == 1'
#178: FILE: drivers/md/dm-adaptive.c:131:
+	if ((argc == 1) && (sscanf(argv[0], "%u", &repeat_count) != 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#178: FILE: drivers/md/dm-adaptive.c:131:
+	if ((argc == 1) && (sscanf(argv[0], "%u", &repeat_count) != 1)) {
+		*error = "adaptive ps: invalid repeat count";
+		return -EINVAL;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#198: FILE: drivers/md/dm-adaptive.c:151:
+	pi->rqsz[READ]  = pi->rqsz[WRITE]  = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#214: FILE: drivers/md/dm-adaptive.c:167:
+	struct selector *s = (struct selector *) ps->context;

CHECK:SPACING: No space is necessary after a cast
#215: FILE: drivers/md/dm-adaptive.c:168:
+	struct path_info *pi = (struct path_info *) p->pscontext;

CHECK:SPACING: No space is necessary after a cast
#227: FILE: drivers/md/dm-adaptive.c:180:
+	struct selector *s = (struct selector *) ps->context;

CHECK:SPACING: No space is necessary after a cast
#228: FILE: drivers/md/dm-adaptive.c:181:
+	struct path_info *pi = (struct path_info *) p->pscontext;

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: drivers/md/dm-adaptive.c:183:
+	if(!pi)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#231: FILE: drivers/md/dm-adaptive.c:184:
+		BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sectors != pi->last_sectors'
#250: FILE: drivers/md/dm-adaptive.c:203:
+	if ((sectors != pi->last_sectors) && (io_ticks != pi->last_io_ticks)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'io_ticks != pi->last_io_ticks'
#250: FILE: drivers/md/dm-adaptive.c:203:
+	if ((sectors != pi->last_sectors) && (io_ticks != pi->last_io_ticks)) {

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#270: FILE: drivers/md/dm-adaptive.c:223:
+	 * Case 1: No performace data available. Choose less loaded path.
 	              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/md/dm-adaptive.c:257:
+static struct dm_path *ad_select_path(struct path_selector *ps,
+				   unsigned int *repeat_count, size_t nr_bytes)

CHECK:SPACING: No space is necessary after a cast
#306: FILE: drivers/md/dm-adaptive.c:259:
+	struct selector *s = (struct selector *) ps->context;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#311: FILE: drivers/md/dm-adaptive.c:264:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: drivers/md/dm-adaptive.c:266:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#318: FILE: drivers/md/dm-adaptive.c:271:
+		printk(KERN_INFO "adaptive ps: no valid paths.\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#331: FILE: drivers/md/dm-adaptive.c:284:
+		if (!best)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#333: FILE: drivers/md/dm-adaptive.c:286:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: drivers/md/dm-adaptive.c:302:
+static int ad_start_io(struct path_selector *ps, struct dm_path *p,
+			struct request *clone)

CHECK:SPACING: No space is necessary after a cast
#351: FILE: drivers/md/dm-adaptive.c:304:
+	struct path_info *pi = (struct path_info *) p->pscontext;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/md/dm-adaptive.c:316:
+static int ad_end_io(struct path_selector *ps, struct dm_path *p,
+			struct request *clone, int nr_bytes)

CHECK:SPACING: No space is necessary after a cast
#365: FILE: drivers/md/dm-adaptive.c:318:
+	struct path_info *pi = (struct path_info *) p->pscontext;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#411: FILE: drivers/md/dm-adaptive.c:364:
+MODULE_DESCRIPTION(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#442: FILE: drivers/md/dm-load-balance.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#455: FILE: drivers/md/dm-load-balance.c:14:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#465: FILE: drivers/md/dm-load-balance.c:24:
+	spinlock_t		lock;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#472: FILE: drivers/md/dm-load-balance.c:31:
+	struct dm_path *	path;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#479: FILE: drivers/md/dm-load-balance.c:38:
+	struct selector *	s;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#481: FILE: drivers/md/dm-load-balance.c:40:
+	if ((s = kmalloc(sizeof(*s), GFP_KERNEL)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#496: FILE: drivers/md/dm-load-balance.c:55:
+static int lb_create(struct path_selector *ps, unsigned argc, char **argv)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#498: FILE: drivers/md/dm-load-balance.c:57:
+	struct selector *	s;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#500: FILE: drivers/md/dm-load-balance.c:59:
+	if ((s = alloc_selector()) == NULL)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#510: FILE: drivers/md/dm-load-balance.c:69:
+	struct path_info *	cpi;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#511: FILE: drivers/md/dm-load-balance.c:70:
+	struct path_info *	npi;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#522: FILE: drivers/md/dm-load-balance.c:81:
+	struct selector *	s;

CHECK:SPACING: No space is necessary after a cast
#524: FILE: drivers/md/dm-load-balance.c:83:
+	s = (struct selector *) ps->context;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#535: FILE: drivers/md/dm-load-balance.c:94:
+lb_add_path(

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#536: FILE: drivers/md/dm-load-balance.c:95:
+	struct path_selector *	ps,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#537: FILE: drivers/md/dm-load-balance.c:96:
+	struct dm_path *	path,

ERROR:POINTER_LOCATION: "foo **			bar" should be "foo **bar"
#539: FILE: drivers/md/dm-load-balance.c:98:
+	char **			argv,

ERROR:POINTER_LOCATION: "foo **			bar" should be "foo **bar"
#540: FILE: drivers/md/dm-load-balance.c:99:
+	char **			error)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#542: FILE: drivers/md/dm-load-balance.c:101:
+	struct selector *	s;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#543: FILE: drivers/md/dm-load-balance.c:102:
+	struct path_info *	pi;

CHECK:SPACING: No space is necessary after a cast
#546: FILE: drivers/md/dm-load-balance.c:105:
+	s = (struct selector *) ps->context;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#557: FILE: drivers/md/dm-load-balance.c:116:
+		if (sscanf(argv[0], "%u", &repeat_count) != 1) {
+			*error = "load-balance ps: invalid repeat count";
+			return -EINVAL;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#564: FILE: drivers/md/dm-load-balance.c:123:
+	if ((pi = kmalloc(sizeof(*pi), GFP_KERNEL)) == NULL) {

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#587: FILE: drivers/md/dm-load-balance.c:146:
+	struct path_info *	pi;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#588: FILE: drivers/md/dm-load-balance.c:147:
+	struct selector *	s;

CHECK:SPACING: No space is necessary after a cast
#590: FILE: drivers/md/dm-load-balance.c:149:
+	pi = (struct path_info *) p->pscontext;

CHECK:SPACING: No space is necessary after a cast
#591: FILE: drivers/md/dm-load-balance.c:150:
+	s  = (struct selector *) ps->context;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#604: FILE: drivers/md/dm-load-balance.c:163:
+	struct path_info *	pi;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#605: FILE: drivers/md/dm-load-balance.c:164:
+	struct selector *	s;

CHECK:SPACING: No space is necessary after a cast
#607: FILE: drivers/md/dm-load-balance.c:166:
+	pi = (struct path_info *) p->pscontext;

CHECK:SPACING: No space is necessary after a cast
#608: FILE: drivers/md/dm-load-balance.c:167:
+	s  = (struct selector *)  ps->context;

ERROR:SPACING: space required before the open parenthesis '('
#610: FILE: drivers/md/dm-load-balance.c:169:
+	if(!pi)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#611: FILE: drivers/md/dm-load-balance.c:170:
+		BUG();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#627: FILE: drivers/md/dm-load-balance.c:186:
+lb_select_path(

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#628: FILE: drivers/md/dm-load-balance.c:187:
+	struct path_selector *	ps,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#629: FILE: drivers/md/dm-load-balance.c:188:
+	unsigned *		repeat,

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#629: FILE: drivers/md/dm-load-balance.c:188:
+	unsigned *		repeat,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#632: FILE: drivers/md/dm-load-balance.c:191:
+	struct selector *	s;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#633: FILE: drivers/md/dm-load-balance.c:192:
+	struct path_info *	cpi;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#634: FILE: drivers/md/dm-load-balance.c:193:
+	struct path_info *	spi;

CHECK:SPACING: No space is necessary after a cast
#637: FILE: drivers/md/dm-load-balance.c:196:
+	s   = (struct selector *) ps->context;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: drivers/md/dm-load-balance.c:198:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: drivers/md/dm-load-balance.c:200:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#646: FILE: drivers/md/dm-load-balance.c:205:
+		printk(KERN_ERR "dm-load-balance: no valid paths!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!spi"
#655: FILE: drivers/md/dm-load-balance.c:214:
+		if (spi == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#658: FILE: drivers/md/dm-load-balance.c:217:
+			if (lb_compare_load(cpi, spi) < 0) {
+				spi = cpi;
+			}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#672: FILE: drivers/md/dm-load-balance.c:231:
+lb_io_started(

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#673: FILE: drivers/md/dm-load-balance.c:232:
+	struct path_selector *	ps,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#674: FILE: drivers/md/dm-load-balance.c:233:
+	struct dm_path *	p,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#675: FILE: drivers/md/dm-load-balance.c:234:
+	struct request *	clone)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#677: FILE: drivers/md/dm-load-balance.c:236:
+	struct path_info *	pi;

CHECK:SPACING: No space is necessary after a cast
#679: FILE: drivers/md/dm-load-balance.c:238:
+	pi = (struct path_info *) p->pscontext;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#686: FILE: drivers/md/dm-load-balance.c:245:
+lb_io_finished(

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#687: FILE: drivers/md/dm-load-balance.c:246:
+	struct path_selector *	ps,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#688: FILE: drivers/md/dm-load-balance.c:247:
+	struct dm_path *	p,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#689: FILE: drivers/md/dm-load-balance.c:248:
+	struct request *	clone,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#692: FILE: drivers/md/dm-load-balance.c:251:
+	struct path_info *	pi;

CHECK:SPACING: No space is necessary after a cast
#694: FILE: drivers/md/dm-load-balance.c:253:
+	pi = (struct path_info *) p->pscontext;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#701: FILE: drivers/md/dm-load-balance.c:260:
+lb_status(

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#702: FILE: drivers/md/dm-load-balance.c:261:
+	struct path_selector *	ps,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#703: FILE: drivers/md/dm-load-balance.c:262:
+	struct dm_path *	p,

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#705: FILE: drivers/md/dm-load-balance.c:264:
+	char *			result,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#708: FILE: drivers/md/dm-load-balance.c:267:
+	struct path_info *	pi;

CHECK:SPACING: No space is necessary after a cast
#718: FILE: drivers/md/dm-load-balance.c:277:
+		pi = (struct path_info *) p->pscontext;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#720: FILE: drivers/md/dm-load-balance.c:279:
+			BUG();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#722: FILE: drivers/md/dm-load-balance.c:281:
+		switch (type) {
+			case STATUSTYPE_TABLE:
[...]
+			case STATUSTYPE_INFO:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#777: FILE: drivers/md/dm-load-balance.c:336:
+MODULE_DESCRIPTION(

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: drivers/md/dm-load-balance.c:337:
+        "(C) Copyright IBM Corp. 2004,2005   All Rights Reserved.\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: drivers/md/dm-load-balance.c:337:
+        "(C) Copyright IBM Corp. 2004,2005   All Rights Reserved.\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: drivers/md/dm-load-balance.c:338:
+        DM_NAME " load balancing path selector (dm-load-balance.c version "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: drivers/md/dm-load-balance.c:338:
+        DM_NAME " load balancing path selector (dm-load-balance.c version "$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#918: FILE: drivers/md/dm-path-selector.h:59:
+				       unsigned *repeat_count, size_t nr_bytes);

WARNING:SPACING: Unnecessary space before function pointer arguments
#927: FILE: drivers/md/dm-path-selector.h:78:
+	int (*start_io) (struct path_selector *ps, struct dm_path *path,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: drivers/md/dm-path-selector.h:79:
+	int (*start_io) (struct path_selector *ps, struct dm_path *path,
+			struct request *clone);

WARNING:SPACING: Unnecessary space before function pointer arguments
#929: FILE: drivers/md/dm-path-selector.h:80:
+	int (*end_io) (struct path_selector *ps, struct dm_path *path,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: drivers/md/dm-path-selector.h:81:
+	int (*end_io) (struct path_selector *ps, struct dm_path *path,
+			struct request *clone, int nr_bytes);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#942: FILE: drivers/md/dm-round-robin.c:163:
+				      unsigned *repeat_count, size_t nr_bytes)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384866.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 41 errors, 26 warnings, 46 checks, 889 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384866.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
