WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
>> The differences in asm are pretty much the same, as before rmqueue_bulk was already inlined the actually intended change to its parameters was negligible.

WARNING:TYPO_SPELLING: 'progres' may be misspelled - perhaps 'progress'?
#69: 
b2) tracking the average amount of pages freed by try_to_free_pages for fast path and slow path (progres&!page)
                                                                                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#84: 
The timings showed that that the so called slow case is actually much faster passing though direct_reclaim in bad case.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#124: 
Grüsse / regards, Christian Ehrhardt
  ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#143: FILE: kernel/sysctl.c:268:
+extern unsigned long long perf_count_direct_reclaim_slow_dursum_pre_ttf_2_post_ttf;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#144: FILE: kernel/sysctl.c:269:
+extern unsigned long long perf_count_direct_reclaim_slow_dursum_post_ttf_2_pre_get_page;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#145: FILE: kernel/sysctl.c:270:
+extern unsigned long long perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_ttf;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#146: FILE: kernel/sysctl.c:271:
+extern unsigned long long perf_count_direct_reclaim_fast_dursum_pre_ttf_2_post_ttf;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#147: FILE: kernel/sysctl.c:272:
+extern unsigned long long perf_count_direct_reclaim_fast_dursum_post_ttf_2_pre_get_page;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#148: FILE: kernel/sysctl.c:273:
+extern unsigned long long perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_ttf;

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#168: FILE: kernel/sysctl.c:293:
+		.procname       = "perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_get_page",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#169: FILE: kernel/sysctl.c:294:
+		.data           = &perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_get_page,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#192: FILE: kernel/sysctl.c:317:
+		.procname       = "perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_get_page",

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#193: FILE: kernel/sysctl.c:318:
+		.data           = &perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_get_page,

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#219: FILE: mm/page_alloc.c:1659:
+unsigned long long perf_count_direct_reclaim_slow_dursum_pre_ttf_2_post_ttf = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#220: FILE: mm/page_alloc.c:1660:
+unsigned long long perf_count_direct_reclaim_slow_dursum_post_ttf_2_pre_get_page = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#221: FILE: mm/page_alloc.c:1661:
+unsigned long long perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_get_page = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#222: FILE: mm/page_alloc.c:1662:
+unsigned long long perf_count_direct_reclaim_fast_dursum_pre_ttf_2_post_ttf = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#223: FILE: mm/page_alloc.c:1663:
+unsigned long long perf_count_direct_reclaim_fast_dursum_post_ttf_2_pre_get_page = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#224: FILE: mm/page_alloc.c:1664:
+unsigned long long perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_get_page = 0;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#226: FILE: mm/page_alloc.c:1666:
+static inline unsigned long long tod_duration_ns(unsigned long long from, unsigned long long to) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#227: FILE: mm/page_alloc.c:1667:
+	return ((to*125)>>9)-((from*125)>>9);
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#227: FILE: mm/page_alloc.c:1667:
+	return ((to*125)>>9)-((from*125)>>9);
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#227: FILE: mm/page_alloc.c:1667:
+	return ((to*125)>>9)-((from*125)>>9);
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#227: FILE: mm/page_alloc.c:1667:
+	return ((to*125)>>9)-((from*125)>>9);
 	                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#227: FILE: mm/page_alloc.c:1667:
+	return ((to*125)>>9)-((from*125)>>9);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: mm/page_alloc.c:1680:
+	unsigned long long t1,t2,t3,t4;
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: mm/page_alloc.c:1680:
+	unsigned long long t1,t2,t3,t4;
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: mm/page_alloc.c:1680:
+	unsigned long long t1,t2,t3,t4;
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: mm/page_alloc.c:1719:
+		perf_count_direct_reclaim_slow_dursum_pre_ttf_2_post_ttf += tod_duration_ns(t1,t2);
 		                                                                              ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#273: FILE: mm/page_alloc.c:1720:
+		perf_count_direct_reclaim_slow_dursum_post_ttf_2_pre_get_page += tod_duration_ns(t2,t3);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: mm/page_alloc.c:1720:
+		perf_count_direct_reclaim_slow_dursum_post_ttf_2_pre_get_page += tod_duration_ns(t2,t3);
 		                                                                                   ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#274: FILE: mm/page_alloc.c:1721:
+		perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_get_page += tod_duration_ns(t3,t4);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: mm/page_alloc.c:1721:
+		perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_get_page += tod_duration_ns(t3,t4);
 		                                                                                        ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#276: FILE: mm/page_alloc.c:1723:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: mm/page_alloc.c:1723:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: mm/page_alloc.c:1724:
+		perf_count_direct_reclaim_fast_dursum_pre_ttf_2_post_ttf += tod_duration_ns(t1,t2);
 		                                                                              ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#278: FILE: mm/page_alloc.c:1725:
+		perf_count_direct_reclaim_fast_dursum_post_ttf_2_pre_get_page += tod_duration_ns(t2,t3);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: mm/page_alloc.c:1725:
+		perf_count_direct_reclaim_fast_dursum_post_ttf_2_pre_get_page += tod_duration_ns(t2,t3);
 		                                                                                   ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#279: FILE: mm/page_alloc.c:1726:
+		perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_get_page += tod_duration_ns(t3,t4);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: mm/page_alloc.c:1726:
+		perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_get_page += tod_duration_ns(t3,t4);
 		                                                                                        ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#301: FILE: kernel/sysctl.c:270:
+extern unsigned long long perf_count_direct_reclaim_slow_dursum_pre_get_page_2_post_get_page;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#305: FILE: kernel/sysctl.c:273:
+extern unsigned long long perf_count_direct_reclaim_fast_dursum_pre_get_page_2_post_get_page;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#306: FILE: kernel/sysctl.c:274:
+extern unsigned long perf_count_direct_reclaim_fast_sum_progress;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#307: FILE: kernel/sysctl.c:275:
+extern unsigned long perf_count_direct_reclaim_slow_sum_progress;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#308: FILE: kernel/sysctl.c:276:
+extern unsigned long perf_count_direct_reclaim_fast_sum_order;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#309: FILE: kernel/sysctl.c:277:
+extern unsigned long perf_count_direct_reclaim_slow_sum_order;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#356: FILE: mm/page_alloc.c:1666:
+unsigned long perf_count_direct_reclaim_fast_sum_progress = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#357: FILE: mm/page_alloc.c:1667:
+unsigned long perf_count_direct_reclaim_slow_sum_progress = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#358: FILE: mm/page_alloc.c:1668:
+unsigned long perf_count_direct_reclaim_fast_sum_order = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#359: FILE: mm/page_alloc.c:1669:
+unsigned long perf_count_direct_reclaim_slow_sum_order = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000011098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 23 warnings, 7 checks, 215 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000011098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
