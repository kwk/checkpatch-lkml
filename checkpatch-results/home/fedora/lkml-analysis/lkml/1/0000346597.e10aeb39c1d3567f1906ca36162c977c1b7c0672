WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
 SYAORAN can ensure /dev/null is a character device file with major=1 minor=3.

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#57: 
Signed-off-by:  Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: fs/syaoran/syaoran.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#67: FILE: fs/syaoran/syaoran.c:2:
+ * fs/syaoran/syaoran.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#115: FILE: fs/syaoran/syaoran.c:50:
+static struct address_space_operations syaoran_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#116: FILE: fs/syaoran/syaoran.c:51:
+static struct inode_operations syaoran_file_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#117: FILE: fs/syaoran/syaoran.c:52:
+static struct inode_operations syaoran_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#118: FILE: fs/syaoran/syaoran.c:53:
+static struct inode_operations syaoran_symlink_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#119: FILE: fs/syaoran/syaoran.c:54:
+static struct file_operations syaoran_file_operations;

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: fs/syaoran/syaoran.c:72:
+		struct timespec now = CURRENT_TIME;
+		inode->i_mode = mode;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: fs/syaoran/syaoran.c:120:
+	int error = -ENOSPC;
+	if (MayCreateNode(dentry, mode, dev) < 0)

CHECK:CAMELCASE: Avoid CamelCase: <MayCreateNode>
#185: FILE: fs/syaoran/syaoran.c:120:
+	if (MayCreateNode(dentry, mode, dev) < 0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: fs/syaoran/syaoran.c:139:
+	int retval = syaoran_mknod(dir, dentry, mode | S_IFDIR, 0);
+	if (!retval)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#210: FILE: fs/syaoran/syaoran.c:145:
+			  struct nameidata *nd)
 			                    ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: fs/syaoran/syaoran.c:155:
+	int error = -ENOSPC;
+	if (MayCreateNode(dentry, S_IFLNK, 0) < 0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#222: FILE: fs/syaoran/syaoran.c:157:
+	inode = syaoran_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#222: FILE: fs/syaoran/syaoran.c:157:
+	inode = syaoran_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#224: FILE: fs/syaoran/syaoran.c:159:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: fs/syaoran/syaoran.c:160:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

CHECK:BRACES: braces {} should be used on all arms of this statement
#226: FILE: fs/syaoran/syaoran.c:161:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: fs/syaoran/syaoran.c:166:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#232: FILE: fs/syaoran/syaoran.c:167:
+			iput(inode);
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: fs/syaoran/syaoran.c:176:
+	struct inode *inode = old_dentry->d_inode;
+	if (!inode || MayCreateNode(dentry, inode->i_mode, inode->i_rdev) < 0)

CHECK:CAMELCASE: Avoid CamelCase: <MayModifyNode>
#248: FILE: fs/syaoran/syaoran.c:183:
+	if (MayModifyNode(dentry, MAY_DELETE) < 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: fs/syaoran/syaoran.c:192:
+	struct inode *inode = old_dentry->d_inode;
+	if (!inode || MayModifyNode(old_dentry, MAY_DELETE) < 0 ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: fs/syaoran/syaoran.c:209:
+	int error = inode_change_ok(inode, attr);
+	if (!error) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: fs/syaoran/syaoran.c:212:
+		unsigned int flags = 0;
+		if (ia_valid & (ATTR_UID | ATTR_GID))

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#300: FILE: fs/syaoran/syaoran.c:235:
+static struct address_space_operations syaoran_aops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#307: FILE: fs/syaoran/syaoran.c:242:
+static struct file_operations syaoran_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#318: FILE: fs/syaoran/syaoran.c:253:
+static struct inode_operations syaoran_file_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#323: FILE: fs/syaoran/syaoran.c:258:
+static struct inode_operations syaoran_dir_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#336: FILE: fs/syaoran/syaoran.c:271:
+static struct inode_operations syaoran_symlink_inode_operations = {

CHECK:CAMELCASE: Avoid CamelCase: <Syaoran_Initialize>
#361: FILE: fs/syaoran/syaoran.c:296:
+	error = Syaoran_Initialize(sb, data);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#370: FILE: fs/syaoran/syaoran.c:305:
+		iput(inode);
 		^^^^

CHECK:CAMELCASE: Avoid CamelCase: <MakeInitialNodes>
#374: FILE: fs/syaoran/syaoran.c:309:
+	MakeInitialNodes(sb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: fs/syaoran/syaoran.c:314:
+static int syaoran_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#407: FILE: fs/syaoran/syaoran.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#441: FILE: fs/syaoran/syaoran.h:35:
+#define list_for_each_cookie(pos, cookie, head) \
+	for ((cookie) || ((cookie) = (head)), pos = (cookie)->next; \
+		prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+		(cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#441: FILE: fs/syaoran/syaoran.h:35:
+#define list_for_each_cookie(pos, cookie, head) \
+	for ((cookie) || ((cookie) = (head)), pos = (cookie)->next; \
+		prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+		(cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#441: FILE: fs/syaoran/syaoran.h:35:
+#define list_for_each_cookie(pos, cookie, head) \
+	for ((cookie) || ((cookie) = (head)), pos = (cookie)->next; \
+		prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+		(cookie) = pos, pos = pos->next)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#467: FILE: fs/syaoran/syaoran.h:61:
+static int (*org_blkdev_open) (struct inode *inode, struct file *filp);
                                                                  ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#467: FILE: fs/syaoran/syaoran.h:61:
+static int (*org_blkdev_open) (struct inode *inode, struct file *filp);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#468: FILE: fs/syaoran/syaoran.h:62:
+static struct file_operations wrapped_def_blk_fops;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#470: FILE: fs/syaoran/syaoran.h:64:
+static int wrapped_blkdev_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#472: FILE: fs/syaoran/syaoran.h:66:
+	int error = org_blkdev_open(inode, filp);
 	                                   ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#473: FILE: fs/syaoran/syaoran.h:67:
+	int error = org_blkdev_open(inode, filp);
+	if (error != -ENXIO)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#479: FILE: fs/syaoran/syaoran.h:73:
+static int (*org_chrdev_open) (struct inode *inode, struct file *filp);
                                                                  ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#479: FILE: fs/syaoran/syaoran.h:73:
+static int (*org_chrdev_open) (struct inode *inode, struct file *filp);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#480: FILE: fs/syaoran/syaoran.h:74:
+static struct file_operations wrapped_def_chr_fops;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#482: FILE: fs/syaoran/syaoran.h:76:
+static int wrapped_chrdev_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#484: FILE: fs/syaoran/syaoran.h:78:
+	int error = org_chrdev_open(inode, filp);
 	                                   ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: fs/syaoran/syaoran.h:79:
+	int error = org_chrdev_open(inode, filp);
+	if (error != -ENXIO)

WARNING:LINE_SPACING: Missing a blank line after declarations
#496: FILE: fs/syaoran/syaoran.h:90:
+	const int len = name ? strlen(name) : 0;
+	mutex_lock(&base->d_inode->i_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#516: FILE: fs/syaoran/syaoran.h:110:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#536: FILE: fs/syaoran/syaoran.h:130:
+	int error;
+	switch (mode & S_IFMT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: fs/syaoran/syaoran.h:162:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

CHECK:CAMELCASE: Avoid CamelCase: <NormalizeLine>
#588: FILE: fs/syaoran/syaoran.h:182:
+static void NormalizeLine(unsigned char *buffer)

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: fs/syaoran/syaoran.h:187:
+	bool first = 1;
+	while (*sp && (*sp <= ' ' || *sp >= 127))

CHECK:CAMELCASE: Avoid CamelCase: <UnEscape>
#608: FILE: fs/syaoran/syaoran.h:202:
+static void UnEscape(char *filename)

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: fs/syaoran/syaoran.h:206:
+	char c, d, e;
+	if (!cp)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#619: FILE: fs/syaoran/syaoran.h:213:
+		if ((c = *filename++) == '\\') {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#631: FILE: fs/syaoran/syaoran.h:225:
+		*(unsigned char *) cp++ = (unsigned char)

CHECK:SPACING: No space is necessary after a cast
#632: FILE: fs/syaoran/syaoran.h:226:
+			(((unsigned char) (c - '0') << 6) +

CHECK:SPACING: No space is necessary after a cast
#633: FILE: fs/syaoran/syaoran.h:227:
+			 ((unsigned char) (d - '0') << 3) +

CHECK:SPACING: No space is necessary after a cast
#634: FILE: fs/syaoran/syaoran.h:228:
+			 (unsigned char) (e - '0'));

CHECK:CAMELCASE: Avoid CamelCase: <RegisterNodeInfo>
#677: FILE: fs/syaoran/syaoran.h:271:
+static int RegisterNodeInfo(char *buffer, struct super_block *sb)

CHECK:SPACING: No space is necessary after a cast
#695: FILE: fs/syaoran/syaoran.h:289:
+	struct syaoran_sb_info *info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: fs/syaoran/syaoran.h:291:
+	struct dev_entry *entry;
+	memset(args, 0, sizeof(args));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#706: FILE: fs/syaoran/syaoran.h:300:
+	/*
+	  printk("<%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>\n",

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#714: FILE: fs/syaoran/syaoran.h:308:
+	if (sscanf(args[ARG_PERMISSION], "%o", &perm) != 1 || !(perm <= 0777)
+	    || sscanf(args[ARG_UID], "%u", &uid) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#715: FILE: fs/syaoran/syaoran.h:309:
+	    || sscanf(args[ARG_UID], "%u", &uid) != 1
+	    || sscanf(args[ARG_GID], "%u", &gid) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#716: FILE: fs/syaoran/syaoran.h:310:
+	    || sscanf(args[ARG_GID], "%u", &gid) != 1
+	    || sscanf(args[ARG_FLAGS], "%u", &flags) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#717: FILE: fs/syaoran/syaoran.h:311:
+	    || sscanf(args[ARG_FLAGS], "%u", &flags) != 1
+	    || *(args[ARG_DEV_TYPE] + 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#723: FILE: fs/syaoran/syaoran.h:317:
+		if (!args[ARG_DEV_MAJOR]
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#724: FILE: fs/syaoran/syaoran.h:318:
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1
+		    || !args[ARG_DEV_MINOR]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#725: FILE: fs/syaoran/syaoran.h:319:
+		    || !args[ARG_DEV_MINOR]
+		    || sscanf(args[ARG_DEV_MINOR], "%u", &minor) != 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#731: FILE: fs/syaoran/syaoran.h:325:
+		if (!args[ARG_DEV_MAJOR]
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#732: FILE: fs/syaoran/syaoran.h:326:
+		    || sscanf(args[ARG_DEV_MAJOR], "%u", &major) != 1
+		    || !args[ARG_DEV_MINOR]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#733: FILE: fs/syaoran/syaoran.h:327:
+		    || !args[ARG_DEV_MINOR]
+		    || sscanf(args[ARG_DEV_MINOR], "%u", &minor) != 1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: fs/syaoran/syaoran.h:402:
+	struct dev_entry *tmp;
+	if (!sb)

CHECK:SPACING: No space is necessary after a cast
#810: FILE: fs/syaoran/syaoran.h:404:
+	info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#824: FILE: fs/syaoran/syaoran.h:418:
+	printk(KERN_DEBUG "%s: Unused memory freed.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#824: FILE: fs/syaoran/syaoran.h:418:
+	printk(KERN_DEBUG "%s: Unused memory freed.\n", __FUNCTION__);

CHECK:CAMELCASE: Avoid CamelCase: <ReadConfigFile>
#827: FILE: fs/syaoran/syaoran.h:421:
+static int ReadConfigFile(struct file *file, struct super_block *sb)

WARNING:LINE_SPACING: Missing a blank line after declarations
#831: FILE: fs/syaoran/syaoran.h:425:
+	int error = -ENOMEM;
+	if (!file)

WARNING:LINE_SPACING: Missing a blank line after declarations
#838: FILE: fs/syaoran/syaoran.h:432:
+		unsigned long offset = 0;
+		while ((len = kernel_read(file, offset, buffer, PAGE_SIZE)) > 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#839: FILE: fs/syaoran/syaoran.h:433:
+		while ((len = kernel_read(file, offset, buffer, PAGE_SIZE)) > 0
+		       && (cp = memchr(buffer, '\n', len)) != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <MakeNode>
#853: FILE: fs/syaoran/syaoran.h:447:
+static void MakeNode(struct dev_entry *entry, struct dentry *root)

CHECK:SPACING: No space is necessary after a cast
#863: FILE: fs/syaoran/syaoran.h:457:
+	while ((c = *(unsigned char *) filename) != '\0') {

CHECK:SPACING: No space is necessary after a cast
#888: FILE: fs/syaoran/syaoran.h:482:
+	filename = (char *) name;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#889: FILE: fs/syaoran/syaoran.h:483:
+	if (S_ISLNK(perm)) {
[...]
+	} else if (S_ISDIR(perm)) {
[...]
+	} else if (S_ISSOCK(perm) || S_ISFIFO(perm) || S_ISREG(perm)) {
[...]
+	} else if (S_ISCHR(perm) || S_ISBLK(perm)) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#906: FILE: fs/syaoran/syaoran.h:500:
+	struct dev_entry *entry;
+	if (!sb)

CHECK:SPACING: No space is necessary after a cast
#908: FILE: fs/syaoran/syaoran.h:502:
+	info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#927: FILE: fs/syaoran/syaoran.h:521:
+	static bool first = 1;
+	if (first) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#929: FILE: fs/syaoran/syaoran.h:523:
+		printk(KERN_INFO "SYAORAN: 1.5.3-pre   2007/12/16\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: fs/syaoran/syaoran.h:527:
+		struct inode *inode = new_inode(sb);
+		if (!inode)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#938: FILE: fs/syaoran/syaoran.h:532:
+		iput(inode);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#944: FILE: fs/syaoran/syaoran.h:538:
+		struct inode *inode = new_inode(sb);
+		if (!inode)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#949: FILE: fs/syaoran/syaoran.h:543:
+		iput(inode);
 		^^^^

CHECK:SPACING: No space is necessary after a cast
#955: FILE: fs/syaoran/syaoran.h:549:
+		char *filename = (char *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#957: FILE: fs/syaoran/syaoran.h:551:
+		bool is_permissive_mode = 0;
+		if (strncmp(filename, "accept=", 7) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#964: FILE: fs/syaoran/syaoran.h:558:
+			printk(KERN_INFO

WARNING:LINE_SPACING: Missing a blank line after declarations
#971: FILE: fs/syaoran/syaoran.h:565:
+			struct syaoran_sb_info *p;
+			if (!S_ISREG(f->f_dentry->d_inode->i_mode))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#980: FILE: fs/syaoran/syaoran.h:574:
+			printk(KERN_INFO "SYAORAN: Reading '%s'\n", filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#984: FILE: fs/syaoran/syaoran.h:578:
+				printk(KERN_INFO "SYAORAN: Can't read '%s'\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#988: FILE: fs/syaoran/syaoran.h:582:
+			printk(KERN_INFO "SYAORAN: Can't open '%s'\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#992: FILE: fs/syaoran/syaoran.h:586:
+		printk(KERN_INFO "SYAORAN: Missing config-file path.\n");

CHECK:CAMELCASE: Avoid CamelCase: <GetLocalAbsolutePath>
#998: FILE: fs/syaoran/syaoran.h:592:
+static int GetLocalAbsolutePath(struct dentry *dentry, char *buffer, int buflen)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1011: FILE: fs/syaoran/syaoran.h:605:
+		struct dentry *parent;
+		if (IS_ROOT(dentry))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1045: FILE: fs/syaoran/syaoran.h:639:
+	struct dentry *d_dentry;
+	if (!dentry || !newname || newname_len <= 0)

CHECK:CAMELCASE: Avoid CamelCase: <CheckFlags>
#1057: FILE: fs/syaoran/syaoran.h:651:
+static int CheckFlags(struct syaoran_sb_info *info, struct dentry *dentry,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1067: FILE: fs/syaoran/syaoran.h:661:
+	static DEFINE_SPINLOCK(lock);
+	spin_lock(&lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1072: FILE: fs/syaoran/syaoran.h:666:
+		struct dev_entry *entry;
+		list_for_each_entry(entry, &info->list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1095: FILE: fs/syaoran/syaoran.h:689:
+		const mode_t perm = mode & 0777;
+		flags &= ~DEVICE_USED;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1099: FILE: fs/syaoran/syaoran.h:693:
+			const char *cp = strchr(filename, '\0') - 1;
+			while (cp > filename) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1101: FILE: fs/syaoran/syaoran.h:695:
+				const unsigned char c = *cp--;
+				if (c == '\\') {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1117: FILE: fs/syaoran/syaoran.h:711:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1123: FILE: fs/syaoran/syaoran.h:717:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1129: FILE: fs/syaoran/syaoran.h:723:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1134: FILE: fs/syaoran/syaoran.h:728:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1139: FILE: fs/syaoran/syaoran.h:733:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1144: FILE: fs/syaoran/syaoran.h:738:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1149: FILE: fs/syaoran/syaoran.h:743:
+			printk(KERN_DEBUG

CHECK:SPACING: No space is necessary after a cast
#1163: FILE: fs/syaoran/syaoran.h:757:
+		(struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1165: FILE: fs/syaoran/syaoran.h:759:
+		printk(KERN_DEBUG "%s: dentry->d_sb->s_fs_info == NULL\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1166: FILE: fs/syaoran/syaoran.h:760:
+		       __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#1178: FILE: fs/syaoran/syaoran.h:772:
+		(struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1180: FILE: fs/syaoran/syaoran.h:774:
+		printk(KERN_DEBUG "%s: dentry->d_sb->s_fs_info == NULL\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1181: FILE: fs/syaoran/syaoran.h:775:
+		       __FUNCTION__);

CHECK:CAMELCASE: Avoid CamelCase: <_Bool>
#1202: FILE: fs/syaoran/syaoran.h:796:
+	_Bool read_all;          /* Dump all entries?                  */

CHECK:CAMELCASE: Avoid CamelCase: <ReadTable>
#1206: FILE: fs/syaoran/syaoran.h:800:
+static void ReadTable(struct syaoran_read_struct *head, char *buf, int count)

CHECK:SPACING: No space is necessary after a cast
#1210: FILE: fs/syaoran/syaoran.h:804:
+		(struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1213: FILE: fs/syaoran/syaoran.h:807:
+	const _Bool read_all = head->read_all;
+	if (!info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1227: FILE: fs/syaoran/syaoran.h:821:
+		int len = 0;
+		switch (entry->mode & S_IFMT) {

CHECK:SPACING: No space is necessary after a cast
#1288: FILE: fs/syaoran/syaoran.h:882:
+	head->pos = &((struct syaoran_sb_info *) head->sb->s_fs_info)->list;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1301: FILE: fs/syaoran/syaoran.h:895:
+	struct syaoran_read_struct *head = file->private_data;
+	kfree(head->buf);

CHECK:SPACING: No space is necessary after a cast
#1311: FILE: fs/syaoran/syaoran.h:905:
+		(struct syaoran_read_struct *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1314: FILE: fs/syaoran/syaoran.h:908:
+	char *cp = head->buf;
+	if (!access_ok(VERIFY_WRITE, buf, count))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1329: FILE: fs/syaoran/syaoran.h:923:
+static struct file_operations syaoran_trace_operations = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1342: FILE: fs/syaoran/syaoran.h:936:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1344: FILE: fs/syaoran/syaoran.h:938:
+		struct inode *inode = new_inode(sb);
+		if (inode) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1346: FILE: fs/syaoran/syaoran.h:940:
+			struct timespec now = CURRENT_TIME;
+			inode->i_mode = S_IFREG | 0400;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346597.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 94 warnings, 47 checks, 1302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346597.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
