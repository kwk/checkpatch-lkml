WARNING:REPEATED_WORD: Possible repeated word: 'the'
#111: 
  tasklet.  if the the channel does not support interrupts then a live

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#119: 
  xor routine.  To the software routine the destination address is an implied

WARNING:BAD_SIGN_OFF: 'Acked-by:' is the preferred signature form
#152: 
Acked-By: NeilBrown <neilb@suse.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#201: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#238: FILE: crypto/async_tx/async_memcpy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#259: FILE: crypto/async_tx/async_memcpy.c:22:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#260: FILE: crypto/async_tx/async_memcpy.c:23:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: crypto/async_tx/async_memcpy.c:46:
+async_memcpy(struct page *dest, struct page *src, unsigned int dest_offset,
+	unsigned int src_offset, size_t len, enum async_tx_flags flags,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#298: FILE: crypto/async_tx/async_memcpy.c:61:
+		pr_debug("%s: (async) len: %zu\n", __FUNCTION__, len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: crypto/async_tx/async_memcpy.c:78:
+		void *dest_buf, *src_buf;
+		pr_debug("%s: (sync) len: %zu\n", __FUNCTION__, len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#315: FILE: crypto/async_tx/async_memcpy.c:78:
+		pr_debug("%s: (sync) len: %zu\n", __FUNCTION__, len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: crypto/async_tx/async_memcpy.c:85:
+			BUG_ON(depend_tx->ack);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: crypto/async_tx/async_memcpy.c:88:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#325: FILE: crypto/async_tx/async_memcpy.c:88:
+					__FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#375: FILE: crypto/async_tx/async_memset.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#396: FILE: crypto/async_tx/async_memset.c:22:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#397: FILE: crypto/async_tx/async_memset.c:23:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: crypto/async_tx/async_memset.c:45:
+async_memset(struct page *dest, int val, unsigned int offset,
+	size_t len, enum async_tx_flags flags,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#434: FILE: crypto/async_tx/async_memset.c:60:
+		pr_debug("%s: (async) len: %zu\n", __FUNCTION__, len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#444: FILE: crypto/async_tx/async_memset.c:70:
+		void *dest_buf;
+		pr_debug("%s: (sync) len: %zu\n", __FUNCTION__, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#444: FILE: crypto/async_tx/async_memset.c:70:
+		pr_debug("%s: (sync) len: %zu\n", __FUNCTION__, len);

CHECK:SPACING: No space is necessary after a cast
#446: FILE: crypto/async_tx/async_memset.c:72:
+		dest_buf = (void *) (((char *) page_address(dest)) + offset);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#453: FILE: crypto/async_tx/async_memset.c:79:
+			BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: crypto/async_tx/async_memset.c:82:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#456: FILE: crypto/async_tx/async_memset.c:82:
+					__FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#490: FILE: crypto/async_tx/async_tx.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#511: FILE: crypto/async_tx/async_tx.c:22:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#512: FILE: crypto/async_tx/async_tx.c:23:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: crypto/async_tx/async_tx.c:32:
+dma_channel_add_remove(struct dma_client *client,
+	struct dma_chan *chan, enum dma_state state);

WARNING:TYPO_SPELLING: 'opertion' may be misspelled - perhaps 'operation'?
#534: FILE: crypto/async_tx/async_tx.c:45:
+ * chan_ref_percpu - tracks channel allocations per core/opertion
                                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: crypto/async_tx/async_tx.c:112:
+	list_for_each_entry_safe(dep_tx, _dep_tx, &tx->depend_list,
+		depend_node) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: crypto/async_tx/async_tx.c:116:
+		BUG_ON(chan == tx->chan);

WARNING:LINE_SPACING: Missing a blank line after declarations
#621: FILE: crypto/async_tx/async_tx.c:132:
+	struct dma_chan_ref *ref;
+	ref = container_of(rcu, struct dma_chan_ref, rcu);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#636: FILE: crypto/async_tx/async_tx.c:147:
+ * ^Idefaults to returning the channel with the desired capability and the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#637: FILE: crypto/async_tx/async_tx.c:148:
+ * ^Ilowest reference count if the index can not be satisfied$

WARNING:TYPO_SPELLING: 'opertaion' may be misspelled - perhaps 'operation'?
#674: FILE: crypto/async_tx/async_tx.c:185:
+ * for cpu isolation in the SMP case, and opertaion isolation in the
                                           ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#702: FILE: crypto/async_tx/async_tx.c:213:
+			struct dma_chan_ref *new;
+			if (NR_CPUS > 1)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#702: FILE: crypto/async_tx/async_tx.c:213:
+			if (NR_CPUS > 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: crypto/async_tx/async_tx.c:226:
+dma_channel_add_remove(struct dma_client *client,
+	struct dma_chan *chan, enum dma_state state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: crypto/async_tx/async_tx.c:244:
+		pr_debug("async_tx: dma resource available [%s]\n",
+			found ? "old" : "new");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: crypto/async_tx/async_tx.c:259:
+			list_add_tail_rcu(&master_ref->node,
+				&async_tx_master_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: crypto/async_tx/async_tx.c:261:
+			spin_unlock_irqrestore(&async_tx_lock,
+				flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#752: FILE: crypto/async_tx/async_tx.c:263:
+			printk(KERN_WARNING "async_tx: unable to create"

WARNING:SPLIT_STRING: quoted string split across lines
#753: FILE: crypto/async_tx/async_tx.c:264:
+			printk(KERN_WARNING "async_tx: unable to create"
+				" new master entry in response to"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#754: FILE: crypto/async_tx/async_tx.c:265:
+				" new master entry in response to"
+				" a DMA_RESOURCE_ADDED event"

WARNING:SPLIT_STRING: quoted string split across lines
#755: FILE: crypto/async_tx/async_tx.c:266:
+				" a DMA_RESOURCE_ADDED event"
+				" (-ENOMEM)\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: crypto/async_tx/async_tx.c:287:
+		pr_debug("async_tx: dma resource removed [%s]\n",
+			found ? "ours" : "not ours");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#787: FILE: crypto/async_tx/async_tx.c:298:
+		printk(KERN_WARNING "async_tx: does not support dma channel"

WARNING:SPLIT_STRING: quoted string split across lines
#788: FILE: crypto/async_tx/async_tx.c:299:
+		printk(KERN_WARNING "async_tx: does not support dma channel"
+			" suspend/resume\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#791: FILE: crypto/async_tx/async_tx.c:302:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#820: FILE: crypto/async_tx/async_tx.c:331:
+	printk(KERN_INFO "async_tx: api initialized (async)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#824: FILE: crypto/async_tx/async_tx.c:335:
+	printk(KERN_ERR "async_tx: initialization failure\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: crypto/async_tx/async_tx.c:364:
+async_tx_find_channel(struct dma_async_tx_descriptor *depend_tx,
+	enum dma_transaction_type tx_type)

CHECK:BRACES: braces {} should be used on all arms of this statement
#856: FILE: crypto/async_tx/async_tx.c:367:
+	if (depend_tx &&
[...]
+	else if (likely(channel_table_initialized)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: crypto/async_tx/async_tx.c:368:
+	if (depend_tx &&
+		dma_has_cap(tx_type, depend_tx->chan->device->cap_mask))

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: crypto/async_tx/async_tx.c:373:
+		int cpu = get_cpu();
+		ref = per_cpu_ptr(channel_table[tx_type], cpu)->ref;

CHECK:BRACES: Unbalanced braces around else statement
#865: FILE: crypto/async_tx/async_tx.c:376:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#872: FILE: crypto/async_tx/async_tx.c:383:
+	printk(KERN_INFO "async_tx: api initialized (sync-only)\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: crypto/async_tx/async_tx.c:395:
+async_tx_submit(struct dma_chan *chan, struct dma_async_tx_descriptor *tx,
+	enum async_tx_flags flags, struct dma_async_tx_descriptor *depend_tx,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#898: FILE: crypto/async_tx/async_tx.c:409:
+		BUG_ON(depend_tx->ack);

WARNING:LINE_SPACING: Missing a blank line after declarations
#906: FILE: crypto/async_tx/async_tx.c:417:
+			struct dma_device *dep_dev = dep_chan->device;
+			dep_dev->device_dependency_added(dep_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: crypto/async_tx/async_tx.c:446:
+async_trigger_callback(enum async_tx_flags flags,
+	struct dma_async_tx_descriptor *depend_tx,

CHECK:BRACES: braces {} should be used on all arms of this statement
#942: FILE: crypto/async_tx/async_tx.c:453:
+	if (depend_tx) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#953: FILE: crypto/async_tx/async_tx.c:464:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#957: FILE: crypto/async_tx/async_tx.c:468:
+		pr_debug("%s: (async)\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#961: FILE: crypto/async_tx/async_tx.c:472:
+		pr_debug("%s: (sync)\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#968: FILE: crypto/async_tx/async_tx.c:479:
+			BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: crypto/async_tx/async_tx.c:482:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#971: FILE: crypto/async_tx/async_tx.c:482:
+					__FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#993: FILE: crypto/async_tx/async_xor.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1014: FILE: crypto/async_tx/async_xor.c:22:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1015: FILE: crypto/async_tx/async_xor.c:23:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: crypto/async_tx/async_xor.c:35:
+do_async_xor(struct dma_async_tx_descriptor *tx, struct dma_device *device,
+	struct dma_chan *chan, struct page *dest, struct page **src_list,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1036: FILE: crypto/async_tx/async_xor.c:44:
+	pr_debug("%s: len: %zu\n", __FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: crypto/async_tx/async_xor.c:57:
+		dma_addr = dma_map_page(device->dev, src_list[i],
+			offset, len, dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1058: FILE: crypto/async_tx/async_xor.c:66:
+do_sync_xor(struct page *dest, struct page **src_list, unsigned int offset,
+	unsigned int src_cnt, size_t len, enum async_tx_flags flags,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1065: FILE: crypto/async_tx/async_xor.c:73:
+	pr_debug("%s: len: %zu\n", __FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: crypto/async_tx/async_xor.c:87:
+	xor_blocks(src_cnt, len, _dest,
+		(void **) src_list);

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: crypto/async_tx/async_xor.c:87:
+		(void **) src_list);

WARNING:TYPO_SPELLING: 'explicity' may be misspelled - perhaps 'explicitly'?
#1089: FILE: crypto/async_tx/async_xor.c:97:
+ *	buffer as a source when it is explicity specified in the source list.
   	                              ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: crypto/async_tx/async_xor.c:112:
+async_xor(struct page *dest, struct page **src_list, unsigned int offset,
+	int src_cnt, size_t len, enum async_tx_flags flags,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1117: FILE: crypto/async_tx/async_xor.c:125:
+	BUG_ON(src_cnt <= 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1137: FILE: crypto/async_tx/async_xor.c:145:
+			tx = device->device_prep_dma_xor(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: crypto/async_tx/async_xor.c:150:
+				do_async_xor(tx, device, chan, dest,
+				&src_list[src_off], offset, xor_src_cnt, len,

CHECK:BRACES: Unbalanced braces around else statement
#1145: FILE: crypto/async_tx/async_xor.c:153:
+			} else /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1145: FILE: crypto/async_tx/async_xor.c:153:
+			} else /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1177: FILE: crypto/async_tx/async_xor.c:185:
+				BUG_ON(depend_tx->ack);

WARNING:SPLIT_STRING: quoted string split across lines
#1181: FILE: crypto/async_tx/async_xor.c:189:
+					panic("%s: DMA_ERROR waiting for "
+						"depend_tx\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1182: FILE: crypto/async_tx/async_xor.c:190:
+						__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: crypto/async_tx/async_xor.c:194:
+			do_sync_xor(dest, &src_list[src_off], offset,
+				xor_src_cnt, len, local_flags, depend_tx,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1198: FILE: crypto/async_tx/async_xor.c:206:
+		if (src_cnt > xor_src_cnt) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1212: FILE: crypto/async_tx/async_xor.c:220:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1224: FILE: crypto/async_tx/async_xor.c:232:
+	return ((*(u32 *) a) == 0 &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#1224: FILE: crypto/async_tx/async_xor.c:232:
+	char *a = page_address(p) + offset;
+	return ((*(u32 *) a) == 0 &&

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1232: FILE: crypto/async_tx/async_xor.c:240:
+ * ^Iat index zero.  The contents of this array may be overwritten.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1244: FILE: crypto/async_tx/async_xor.c:252:
+async_xor_zero_sum(struct page *dest, struct page **src_list,
+	unsigned int offset, int src_cnt, size_t len,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1257: FILE: crypto/async_tx/async_xor.c:265:
+	BUG_ON(src_cnt <= 1);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1263: FILE: crypto/async_tx/async_xor.c:271:
+		pr_debug("%s: (async) len: %zu\n", __FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: crypto/async_tx/async_xor.c:278:
+			dma_addr = dma_map_page(device->dev, src_list[i],
+				offset, len, dir);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1278: FILE: crypto/async_tx/async_xor.c:286:
+		pr_debug("%s: (sync) len: %zu\n", __FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: crypto/async_tx/async_xor.c:292:
+		tx = async_xor(dest, src_list, offset, src_cnt, len, xor_flags,
+			depend_tx, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1289: FILE: crypto/async_tx/async_xor.c:297:
+				panic("%s: DMA_ERROR waiting for tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1289: FILE: crypto/async_tx/async_xor.c:297:
+					__FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#1338: FILE: crypto/xor.c:33:
+	p1 = (unsigned long *) srcs[0];

CHECK:SPACING: No space is necessary after a cast
#1347: FILE: crypto/xor.c:39:
+	p2 = (unsigned long *) srcs[1];

CHECK:SPACING: No space is necessary after a cast
#1356: FILE: crypto/xor.c:45:
+	p3 = (unsigned long *) srcs[2];

CHECK:SPACING: No space is necessary after a cast
#1364: FILE: crypto/xor.c:51:
+	p4 = (unsigned long *) srcs[3];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1374: FILE: crypto/xor.c:130:
+		printk(KERN_INFO "xor: measuring software checksum speed\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#1427: FILE: drivers/md/raid5.c:920:
+				if (count == MAX_XOR_BLOCKS) {		  \
+				xor_blocks(count, STRIPE_SIZE, dest, ptr);\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1533: FILE: drivers/md/raid5.c:1147:
+		if (!nozero) memset(dest, 0, STRIPE_SIZE);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1555: FILE: include/linux/async_tx.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1568: FILE: include/linux/async_tx.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1569: FILE: include/linux/async_tx.h:15:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

WARNING:TYPO_SPELLING: 'capabiities' may be misspelled - perhaps 'capabilities'?
#1585: FILE: include/linux/async_tx.h:31:
+ *	(for channels with multiple capabiities)
   	                            ^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1597: FILE: include/linux/async_tx.h:43:
+ * @ASYNC_TX_XOR_ZERO_DST: this flag must be used for xor operations where the
+ * the destination address is not a source.  The asynchronous case handles this

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: include/linux/async_tx.h:75:
+async_tx_find_channel(struct dma_async_tx_descriptor *depend_tx,
+	enum dma_transaction_type tx_type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1644: FILE: include/linux/async_tx.h:90:
+async_tx_run_dependencies(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *host_chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1651: FILE: include/linux/async_tx.h:97:
+async_tx_find_channel(struct dma_async_tx_descriptor *depend_tx,
+	enum dma_transaction_type tx_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: include/linux/async_tx.h:112:
+async_tx_sync_epilog(unsigned long flags,
+	struct dma_async_tx_descriptor *depend_tx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1678: FILE: include/linux/async_tx.h:124:
+async_tx_submit(struct dma_chan *chan, struct dma_async_tx_descriptor *tx,
+	enum async_tx_flags flags, struct dma_async_tx_descriptor *depend_tx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1683: FILE: include/linux/async_tx.h:129:
+async_xor(struct page *dest, struct page **src_list, unsigned int offset,
+	int src_cnt, size_t len, enum async_tx_flags flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1689: FILE: include/linux/async_tx.h:135:
+async_xor_zero_sum(struct page *dest, struct page **src_list,
+	unsigned int offset, int src_cnt, size_t len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1696: FILE: include/linux/async_tx.h:142:
+async_memcpy(struct page *dest, struct page *src, unsigned int dest_offset,
+	unsigned int src_offset, size_t len, enum async_tx_flags flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1702: FILE: include/linux/async_tx.h:148:
+async_memset(struct page *dest, int val, unsigned int offset,
+	size_t len, enum async_tx_flags flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: include/linux/async_tx.h:154:
+async_trigger_callback(enum async_tx_flags flags,
+	struct dma_async_tx_descriptor *depend_tx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1723: FILE: include/linux/raid/xor.h:8:
+extern void xor_blocks(unsigned int count, unsigned int bytes,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1724: FILE: include/linux/raid/xor.h:9:
+extern void xor_blocks(unsigned int count, unsigned int bytes,
+	void *dest, void **srcs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 62 warnings, 54 checks, 1470 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
