WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Very interesting.  There's a little noise there (that first local_inc of 243

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#153: FILE: init/main.c:548:
+};
+struct local2 {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#156: FILE: init/main.c:551:
+};
+struct local3 {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#161: FILE: init/main.c:556:
+#define NUM_LOCAL_TEST (1024*1024)
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#162: FILE: init/main.c:557:
+#define NUM_LOCAL_RUNS (NUM_LOCAL_TEST*32)
                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: init/main.c:566:
+	unsigned long size;
+	size = max(sizeof(struct local1),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: init/main.c:574:
+		printk("test_local_variants: failed to allocate %lu bytes\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#191: FILE: init/main.c:586:
+	printk("%s=%lli/%lli ",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#192: FILE: init/main.c:587:
+	       str, diff, diff/NUM_LOCAL_RUNS);
 	                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: init/main.c:593:
+	unsigned int i, total = 0;
+	for (i = 0; i < len; i++)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#203: FILE: init/main.c:598:
+#define TEST_LOOP(expr)				\
+	n = 0;					\
+	getnstimeofday(&start);			\
+	for (i = 0; i < NUM_LOCAL_RUNS; i++) {	\
+		expr;				\
+		n += STRIDE;			\
+		n %= NUM_LOCAL_TEST;		\
+	}					\
+	getnstimeofday(&end);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#203: FILE: init/main.c:598:
+#define TEST_LOOP(expr)				\
+	n = 0;					\
+	getnstimeofday(&start);			\
+	for (i = 0; i < NUM_LOCAL_RUNS; i++) {	\
+		expr;				\
+		n += STRIDE;			\
+		n %= NUM_LOCAL_TEST;		\
+	}					\
+	getnstimeofday(&end);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: init/main.c:628:
+	printk("Running local_t variant benchmarks\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: init/main.c:634:
+	printk("atomic_long: ");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#240: FILE: init/main.c:635:
+	memset(l1, 0, sizeof(*l1)*NUM_LOCAL_TEST);
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#244: FILE: init/main.c:639:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#248: FILE: init/main.c:643:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#249: FILE: init/main.c:644:
+	TEST_LOOP(atomic_long_inc(&__get_cpu_var(local1_test)[n%NUM_PERCPU_VARS].v));
 	                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#252: FILE: init/main.c:647:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: init/main.c:652:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#261: FILE: init/main.c:656:
+	printk("(total was %lu)\n", total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#263: FILE: init/main.c:658:
+	printk("irqsave/restore: ");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#264: FILE: init/main.c:659:
+	memset(l2, 0, sizeof(*l2)*NUM_LOCAL_TEST);
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#271: FILE: init/main.c:666:
+	warm_total += warm_local_test_cache(l2, sizeof(*l2)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#278: FILE: init/main.c:673:
+	warm_total += warm_local_test_cache(l2, sizeof(*l2)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#281: FILE: init/main.c:676:
+		  __get_cpu_var(local2_test)[n%NUM_PERCPU_VARS].v++;
 		                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#285: FILE: init/main.c:680:
+	warm_total += warm_local_test_cache(l2, sizeof(*l2)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#290: FILE: init/main.c:685:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: init/main.c:692:
+	printk("(total was %lu)\n", total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: init/main.c:694:
+	printk("trivalue: ");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#300: FILE: init/main.c:695:
+	memset(l3, 0, sizeof(*l3)*NUM_LOCAL_TEST);
 	                         ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#302: FILE: init/main.c:697:
+	TEST_LOOP(unsigned int idx
+			= !(preempt_count() & (HARDIRQ_MASK | SOFTIRQ_MASK)) +

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: init/main.c:702:
+	warm_total += warm_local_test_cache(l3, sizeof(*l3)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#309: FILE: init/main.c:704:
+	TEST_LOOP(unsigned int idx
+			= !(preempt_count() & (HARDIRQ_MASK | SOFTIRQ_MASK)) +

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#314: FILE: init/main.c:709:
+	warm_total += warm_local_test_cache(l3, sizeof(*l3)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#316: FILE: init/main.c:711:
+	TEST_LOOP(unsigned int idx
+			= !(preempt_count() & (HARDIRQ_MASK | SOFTIRQ_MASK)) +

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#318: FILE: init/main.c:713:
+		  get_cpu_var(local3_test)[n%NUM_PERCPU_VARS].v[idx]++;
 		                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#322: FILE: init/main.c:717:
+	warm_total += warm_local_test_cache(l3, sizeof(*l3)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#327: FILE: init/main.c:722:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: init/main.c:730:
+	printk("(total was %lu)\n", total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#337: FILE: init/main.c:732:
+	printk("local_t: ");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#338: FILE: init/main.c:733:
+	memset(l4, 0, sizeof(*l4)*NUM_LOCAL_TEST);
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#342: FILE: init/main.c:737:
+	warm_total += warm_local_test_cache(l4, sizeof(*l4)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#346: FILE: init/main.c:741:
+	warm_total += warm_local_test_cache(l4, sizeof(*l4)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#347: FILE: init/main.c:742:
+	TEST_LOOP(cpu_local_inc(local4_test[n%NUM_PERCPU_VARS]));
 	                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#350: FILE: init/main.c:745:
+	warm_total += warm_local_test_cache(l4, sizeof(*l4)*NUM_LOCAL_TEST);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#355: FILE: init/main.c:750:
+	warm_total += warm_local_test_cache(l1, sizeof(*l1)*NUM_LOCAL_TEST);
 	                                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#358: FILE: init/main.c:753:
+	printk("(total was %lu, warm_total %lu)\n", total, warm_total);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000188388.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 32 checks, 267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000188388.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
