WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: include/linux/ring_buffer.h:15:
+       u64              time_stamp;    /* page time stamp */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: include/linux/ring_buffer.h:16:
+       local_t          write;         /* index for next write */$

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#63: FILE: include/linux/ring_buffer.h:17:
+       local_t          commit;        /* write commited index */
                                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: include/linux/ring_buffer.h:17:
+       local_t          commit;        /* write commited index */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: include/linux/ring_buffer.h:18:
+       unsigned         read;          /* index for next read */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#64: FILE: include/linux/ring_buffer.h:18:
+       unsigned         read;          /* index for next read */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: include/linux/ring_buffer.h:19:
+       struct list_head list;          /* list of free pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: include/linux/ring_buffer.h:20:
+       void *page;                     /* Actual data page */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: include/linux/ring_buffer.h:31:
+       int                             cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/linux/ring_buffer.h:32:
+       struct ring_buffer              *buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/linux/ring_buffer.h:33:
+       spinlock_t                      lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#79: FILE: include/linux/ring_buffer.h:33:
+       spinlock_t                      lock;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/ring_buffer.h:34:
+       struct lock_class_key           lock_key;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: include/linux/ring_buffer.h:35:
+       struct list_head                pages;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/ring_buffer.h:36:
+       struct buffer_page              *page_array;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/linux/ring_buffer.h:37:
+       struct buffer_page              *head_page;     /* read from head */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/linux/ring_buffer.h:38:
+       struct buffer_page              *tail_page;     /* write to tail */$

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#85: FILE: include/linux/ring_buffer.h:39:
+       struct buffer_page              *commit_page;   /* commited pages */
                                                           ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: include/linux/ring_buffer.h:39:
+       struct buffer_page              *commit_page;   /* commited pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: include/linux/ring_buffer.h:40:
+       struct buffer_page              *reader_page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/linux/ring_buffer.h:41:
+       unsigned long                   overrun;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/linux/ring_buffer.h:42:
+       unsigned long                   entries;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/linux/ring_buffer.h:43:
+       u64                             write_stamp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/linux/ring_buffer.h:44:
+       u64                             read_stamp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/linux/ring_buffer.h:45:
+       atomic_t                        record_disabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/linux/ring_buffer.h:49:
+       unsigned long                   size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: include/linux/ring_buffer.h:50:
+       unsigned                        pages;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#96: FILE: include/linux/ring_buffer.h:50:
+       unsigned                        pages;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: include/linux/ring_buffer.h:51:
+       unsigned                        flags;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#97: FILE: include/linux/ring_buffer.h:51:
+       unsigned                        flags;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: include/linux/ring_buffer.h:52:
+       int                             cpus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: include/linux/ring_buffer.h:53:
+       cpumask_t                       cpumask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/linux/ring_buffer.h:54:
+       atomic_t                        record_disabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/linux/ring_buffer.h:56:
+       struct mutex                    mutex;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#102: FILE: include/linux/ring_buffer.h:56:
+       struct mutex                    mutex;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/linux/ring_buffer.h:58:
+       struct ring_buffer_per_cpu      **buffers;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: include/linux/ring_buffer.h:144:
+       return sched_clock() << DEBUG_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: include/linux/ring_buffer.h:150:
+       *ts >>= DEBUG_SHIFT;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: include/linux/ring_buffer.h:153:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: include/linux/ring_buffer.h:156:
+#define RB_ALIGNMENT           (1 << RB_ALIGNMENT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: include/linux/ring_buffer.h:159:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: include/linux/ring_buffer.h:159:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: include/linux/ring_buffer.h:161:
+       struct ring_buffer_event event; /* Used only for sizeof array */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: include/linux/ring_buffer.h:164:
+       if (!length)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#143: FILE: include/linux/ring_buffer.h:164:
+       if (!length)
+               length = 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: include/linux/ring_buffer.h:165:
+               length = 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: include/linux/ring_buffer.h:165:
+               length = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/ring_buffer.h:167:
+       if (length > RB_MAX_SMALL_DATA)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#146: FILE: include/linux/ring_buffer.h:167:
+       if (length > RB_MAX_SMALL_DATA)
+               length += sizeof(event.array[0]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: include/linux/ring_buffer.h:168:
+               length += sizeof(event.array[0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: include/linux/ring_buffer.h:168:
+               length += sizeof(event.array[0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: include/linux/ring_buffer.h:170:
+       length += RB_EVNT_HDR_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: include/linux/ring_buffer.h:171:
+       length = ALIGN(length, RB_ALIGNMENT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: include/linux/ring_buffer.h:173:
+       return length;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: include/linux/ring_buffer.h:176:
+static inline unsigned rb_page_write(struct buffer_page *bpage)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: include/linux/ring_buffer.h:178:
+       return local_read(&bpage->write);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: include/linux/ring_buffer.h:181:
+static inline void *__rb_page_index(struct buffer_page *page, unsigned index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: include/linux/ring_buffer.h:183:
+       return page->page + index;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: include/linux/ring_buffer.h:188:
+                     unsigned type, unsigned long length);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: include/linux/ring_buffer.h:188:
+rb_reserve_next_event(struct ring_buffer_per_cpu *cpu_buffer,
+                     unsigned type, unsigned long length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: include/linux/ring_buffer.h:188:
+                     unsigned type, unsigned long length);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: include/linux/ring_buffer.h:188:
+                     unsigned type, unsigned long length);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: include/linux/ring_buffer.h:190:
+static inline unsigned rb_page_commit(struct buffer_page *bpage)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: include/linux/ring_buffer.h:192:
+       return local_read(&bpage->commit);$

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#174: FILE: include/linux/ring_buffer.h:195:
+/* Size is determined by what has been commited */
                                        ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#175: FILE: include/linux/ring_buffer.h:196:
+static inline unsigned rb_page_size(struct buffer_page *bpage)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: include/linux/ring_buffer.h:198:
+       return rb_page_commit(bpage);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: include/linux/ring_buffer.h:204:
+       return rb_page_commit(cpu_buffer->commit_page);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: include/linux/ring_buffer.h:207:
+static inline unsigned rb_head_size(struct ring_buffer_per_cpu *cpu_buffer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: include/linux/ring_buffer.h:209:
+       return rb_page_commit(cpu_buffer->head_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: include/linux/ring_buffer.h:215:
+       unsigned long addr = (unsigned long)event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: include/linux/ring_buffer.h:217:
+       return (addr & ~PAGE_MASK) - (PAGE_SIZE - BUF_PAGE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: include/linux/ring_buffer.h:221:
+                              struct buffer_page **page)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: include/linux/ring_buffer.h:221:
+static inline void rb_inc_page(struct ring_buffer_per_cpu *cpu_buffer,
+                              struct buffer_page **page)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: include/linux/ring_buffer.h:221:
+                              struct buffer_page **page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: include/linux/ring_buffer.h:223:
+       struct list_head *p = (*page)->list.next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: include/linux/ring_buffer.h:225:
+       if (p == &cpu_buffer->pages)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#204: FILE: include/linux/ring_buffer.h:225:
+       if (p == &cpu_buffer->pages)
+               p = p->next;

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: include/linux/ring_buffer.h:226:
+               p = p->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: include/linux/ring_buffer.h:226:
+               p = p->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: include/linux/ring_buffer.h:228:
+       *page = list_entry(p, struct buffer_page, list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: include/linux/ring_buffer.h:233:
+            struct ring_buffer_event *event)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: include/linux/ring_buffer.h:233:
+rb_is_commit(struct ring_buffer_per_cpu *cpu_buffer,
+            struct ring_buffer_event *event)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: include/linux/ring_buffer.h:233:
+            struct ring_buffer_event *event)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: include/linux/ring_buffer.h:235:
+       unsigned long addr = (unsigned long)event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: include/linux/ring_buffer.h:236:
+       unsigned long index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: include/linux/ring_buffer.h:238:
+       index = rb_event_index(event);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: include/linux/ring_buffer.h:239:
+       addr &= PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: include/linux/ring_buffer.h:241:
+       return cpu_buffer->commit_page->page == (void *)addr &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: include/linux/ring_buffer.h:242:
+               rb_commit_index(cpu_buffer) == index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/linux/ring_buffer.h:242:
+               rb_commit_index(cpu_buffer) == index;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: include/linux/ring_buffer.h:249:
+        * We only race with interrupts and NMIs on this CPU.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: include/linux/ring_buffer.h:250:
+        * If we own the commit event, then we can commit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: include/linux/ring_buffer.h:251:
+        * all others that interrupted us, since the interruptions$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: include/linux/ring_buffer.h:252:
+        * are in stack format (they finish before they come$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: include/linux/ring_buffer.h:253:
+        * back to us). This allows us to do a simple loop to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: include/linux/ring_buffer.h:254:
+        * assign the commit to the tail.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: include/linux/ring_buffer.h:255:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: include/linux/ring_buffer.h:256:
+       while (cpu_buffer->commit_page != cpu_buffer->tail_page) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#235: FILE: include/linux/ring_buffer.h:256:
+       while (cpu_buffer->commit_page != cpu_buffer->tail_page) {
+               cpu_buffer->commit_page->commit =

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: include/linux/ring_buffer.h:257:
+               cpu_buffer->commit_page->commit =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: include/linux/ring_buffer.h:257:
+               cpu_buffer->commit_page->commit =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: include/linux/ring_buffer.h:258:
+                       cpu_buffer->commit_page->write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: include/linux/ring_buffer.h:258:
+                       cpu_buffer->commit_page->write;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: include/linux/ring_buffer.h:259:
+               rb_inc_page(cpu_buffer, &cpu_buffer->commit_page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: include/linux/ring_buffer.h:259:
+               rb_inc_page(cpu_buffer, &cpu_buffer->commit_page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: include/linux/ring_buffer.h:260:
+               cpu_buffer->write_stamp = cpu_buffer->commit_page->time_stamp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: include/linux/ring_buffer.h:260:
+               cpu_buffer->write_stamp = cpu_buffer->commit_page->time_stamp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: include/linux/ring_buffer.h:261:
+               /* add barrier to keep gcc from optimizing too much */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: include/linux/ring_buffer.h:262:
+               barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/ring_buffer.h:262:
+               barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/ring_buffer.h:263:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/ring_buffer.h:264:
+       while (rb_commit_index(cpu_buffer) !=$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#243: FILE: include/linux/ring_buffer.h:264:
+       while (rb_commit_index(cpu_buffer) !=
[...]
+               cpu_buffer->commit_page->commit =

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: include/linux/ring_buffer.h:265:
+              rb_page_write(cpu_buffer->commit_page)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: include/linux/ring_buffer.h:265:
+              rb_page_write(cpu_buffer->commit_page)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: include/linux/ring_buffer.h:266:
+               cpu_buffer->commit_page->commit =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/linux/ring_buffer.h:266:
+               cpu_buffer->commit_page->commit =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: include/linux/ring_buffer.h:267:
+                       cpu_buffer->commit_page->write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/linux/ring_buffer.h:267:
+                       cpu_buffer->commit_page->write;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: include/linux/ring_buffer.h:268:
+               barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: include/linux/ring_buffer.h:268:
+               barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: include/linux/ring_buffer.h:269:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: include/linux/ring_buffer.h:274:
+                        unsigned long length,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: include/linux/ring_buffer.h:274:
+__ring_buffer_lock_reserve(struct ring_buffer *buffer,
+                        unsigned long length,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: include/linux/ring_buffer.h:274:
+                        unsigned long length,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: include/linux/ring_buffer.h:275:
+                        unsigned long *flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: include/linux/ring_buffer.h:275:
+                        unsigned long *flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: include/linux/ring_buffer.h:277:
+       struct ring_buffer_per_cpu *cpu_buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: include/linux/ring_buffer.h:278:
+       struct ring_buffer_event *event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: include/linux/ring_buffer.h:279:
+       struct buffer_page *tail_page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: include/linux/ring_buffer.h:280:
+       unsigned long tail, write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: include/linux/ring_buffer.h:281:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: include/linux/ring_buffer.h:283:
+       if (atomic_read(&buffer->record_disabled))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#262: FILE: include/linux/ring_buffer.h:283:
+       if (atomic_read(&buffer->record_disabled))
+               return NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: include/linux/ring_buffer.h:284:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: include/linux/ring_buffer.h:284:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/linux/ring_buffer.h:286:
+       preempt_disable_notrace();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: include/linux/ring_buffer.h:288:
+       cpu = raw_smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: include/linux/ring_buffer.h:289:
+       if (!cpu_isset(cpu, buffer->cpumask))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#268: FILE: include/linux/ring_buffer.h:289:
+       if (!cpu_isset(cpu, buffer->cpumask))
+               goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: include/linux/ring_buffer.h:290:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: include/linux/ring_buffer.h:290:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: include/linux/ring_buffer.h:292:
+       cpu_buffer = buffer->buffers[cpu];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: include/linux/ring_buffer.h:293:
+       if (atomic_read(&cpu_buffer->record_disabled))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#272: FILE: include/linux/ring_buffer.h:293:
+       if (atomic_read(&cpu_buffer->record_disabled))
+               goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: include/linux/ring_buffer.h:294:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: include/linux/ring_buffer.h:294:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: include/linux/ring_buffer.h:296:
+       length = rb_calculate_event_length(length);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: include/linux/ring_buffer.h:297:
+       tail_page = cpu_buffer->tail_page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: include/linux/ring_buffer.h:298:
+       if (rb_page_write(tail_page) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#277: FILE: include/linux/ring_buffer.h:298:
+       if (rb_page_write(tail_page) &&
[...]
+               write = local_add_return(length, &tail_page->write);

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: include/linux/ring_buffer.h:299:
+                       (rb_page_write(tail_page) + length <= BUF_PAGE_SIZE)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: include/linux/ring_buffer.h:299:
+       if (rb_page_write(tail_page) &&
+                       (rb_page_write(tail_page) + length <= BUF_PAGE_SIZE)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: include/linux/ring_buffer.h:299:
+                       (rb_page_write(tail_page) + length <= BUF_PAGE_SIZE)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: include/linux/ring_buffer.h:300:
+               write = local_add_return(length, &tail_page->write);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/linux/ring_buffer.h:300:
+               write = local_add_return(length, &tail_page->write);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: include/linux/ring_buffer.h:301:
+               tail = write - length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/linux/ring_buffer.h:301:
+               tail = write - length;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: include/linux/ring_buffer.h:302:
+               event = __rb_page_index(tail_page, tail);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: include/linux/ring_buffer.h:302:
+               event = __rb_page_index(tail_page, tail);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: include/linux/ring_buffer.h:303:
+               event->type = RINGBUF_TYPE_DATA;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/linux/ring_buffer.h:303:
+               event->type = RINGBUF_TYPE_DATA;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: include/linux/ring_buffer.h:304:
+               length -= RB_EVNT_HDR_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: include/linux/ring_buffer.h:304:
+               length -= RB_EVNT_HDR_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: include/linux/ring_buffer.h:305:
+               if (length > RB_MAX_SMALL_DATA) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: include/linux/ring_buffer.h:305:
+               if (length > RB_MAX_SMALL_DATA) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#284: FILE: include/linux/ring_buffer.h:305:
+               if (length > RB_MAX_SMALL_DATA) {
+                       event->len = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: include/linux/ring_buffer.h:306:
+                       event->len = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/linux/ring_buffer.h:306:
+                       event->len = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: include/linux/ring_buffer.h:307:
+                       event->array[0] = length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: include/linux/ring_buffer.h:307:
+                       event->array[0] = length;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: include/linux/ring_buffer.h:308:
+               } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/linux/ring_buffer.h:308:
+               } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#287: FILE: include/linux/ring_buffer.h:308:
+               } else
+                       event->len = (length + (RB_ALIGNMENT-1))

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: include/linux/ring_buffer.h:308:
+               } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: include/linux/ring_buffer.h:309:
+                       event->len = (length + (RB_ALIGNMENT-1))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/linux/ring_buffer.h:309:
+                       event->len = (length + (RB_ALIGNMENT-1))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#288: FILE: include/linux/ring_buffer.h:309:
+                       event->len = (length + (RB_ALIGNMENT-1))
                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: include/linux/ring_buffer.h:310:
+                               >> RB_ALIGNMENT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: include/linux/ring_buffer.h:310:
+                               >> RB_ALIGNMENT_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: include/linux/ring_buffer.h:311:
+                event->time_delta = ring_buffer_time_stamp(cpu) -$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: include/linux/ring_buffer.h:311:
+                event->time_delta = ring_buffer_time_stamp(cpu) -$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: include/linux/ring_buffer.h:312:
+                        cpu_buffer->write_stamp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/linux/ring_buffer.h:312:
+                        cpu_buffer->write_stamp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: include/linux/ring_buffer.h:313:
+       } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#292: FILE: include/linux/ring_buffer.h:313:
+       } else
+               event = rb_reserve_next_event(cpu_buffer,

CHECK:BRACES: Unbalanced braces around else statement
#292: FILE: include/linux/ring_buffer.h:313:
+       } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: include/linux/ring_buffer.h:314:
+               event = rb_reserve_next_event(cpu_buffer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: include/linux/ring_buffer.h:314:
+               event = rb_reserve_next_event(cpu_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: include/linux/ring_buffer.h:315:
+                               RINGBUF_TYPE_DATA, length);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/ring_buffer.h:315:
+               event = rb_reserve_next_event(cpu_buffer,
+                               RINGBUF_TYPE_DATA, length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: include/linux/ring_buffer.h:315:
+                               RINGBUF_TYPE_DATA, length);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: include/linux/ring_buffer.h:317:
+       return event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/linux/ring_buffer.h:319:
+       preempt_enable_notrace();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/ring_buffer.h:320:
+       return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: include/linux/ring_buffer.h:324:
+                             struct ring_buffer_event *event,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: include/linux/ring_buffer.h:324:
+static inline int __ring_buffer_unlock_commit(struct ring_buffer *buffer,
+                             struct ring_buffer_event *event,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: include/linux/ring_buffer.h:324:
+                             struct ring_buffer_event *event,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: include/linux/ring_buffer.h:325:
+                             unsigned long flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: include/linux/ring_buffer.h:325:
+                             unsigned long flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: include/linux/ring_buffer.h:327:
+       struct ring_buffer_per_cpu *cpu_buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: include/linux/ring_buffer.h:328:
+       int cpu = raw_smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: include/linux/ring_buffer.h:330:
+       cpu_buffer = buffer->buffers[cpu];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: include/linux/ring_buffer.h:332:
+       cpu_buffer->entries++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: include/linux/ring_buffer.h:333:
+       if (!rb_is_commit(cpu_buffer, event))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#312: FILE: include/linux/ring_buffer.h:333:
+       if (!rb_is_commit(cpu_buffer, event))
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: include/linux/ring_buffer.h:334:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: include/linux/ring_buffer.h:334:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: include/linux/ring_buffer.h:336:
+       cpu_buffer->write_stamp += event->time_delta;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: include/linux/ring_buffer.h:337:
+       rb_set_commit_to_write(cpu_buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: include/linux/ring_buffer.h:339:
+       preempt_enable_notrace();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/linux/ring_buffer.h:340:
+       return 0;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197020.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 48 errors, 151 warnings, 14 checks, 520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197020.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
