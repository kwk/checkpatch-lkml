WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: arch/microblaze/kernel/prom.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#91: FILE: arch/microblaze/kernel/prom.c:38:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#93: FILE: arch/microblaze/kernel/prom.c:40:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#96: FILE: arch/microblaze/kernel/prom.c:43:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pci.h> instead of <asm/pci.h>
#97: FILE: arch/microblaze/kernel/prom.c:44:
+#include <asm/pci.h>

WARNING:MISPLACED_INIT: __initdata should be placed after dt_root_addr_cells
#101: FILE: arch/microblaze/kernel/prom.c:48:
+static int __initdata dt_root_addr_cells;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after dt_root_size_cells
#102: FILE: arch/microblaze/kernel/prom.c:49:
+static int __initdata dt_root_size_cells;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: arch/microblaze/kernel/prom.c:55:
+extern struct device_node *allnodes;	/* temporary while merging */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#110: FILE: arch/microblaze/kernel/prom.c:57:
+extern rwlock_t devtree_lock;	/* temporary while merging */

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#123: FILE: arch/microblaze/kernel/prom.c:70:
+ * used to extract the memory informations at boot before we can
                               ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: arch/microblaze/kernel/prom.c:98:
+			u32 sz = *((u32 *)p);
+			p += 8;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#159: FILE: arch/microblaze/kernel/prom.c:106:
+			printk(KERN_WARNING "Invalid tag %x scanning flattened"

WARNING:SPLIT_STRING: quoted string split across lines
#160: FILE: arch/microblaze/kernel/prom.c:107:
+			printk(KERN_WARNING "Invalid tag %x scanning flattened"
+				" device tree !\n", tag);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#168: FILE: arch/microblaze/kernel/prom.c:115:
+			char *lp, *np;
+			for (lp = NULL, np = pathp; *np; np++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#170: FILE: arch/microblaze/kernel/prom.c:117:
+					lp = np+1;
 					       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lp"
#171: FILE: arch/microblaze/kernel/prom.c:118:
+			if (lp != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: arch/microblaze/kernel/prom.c:136:
+	BUG_ON(*((u32 *)p) != OF_DT_BEGIN_NODE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo* __init bar" should be "foo * __init bar"
#198: FILE: arch/microblaze/kernel/prom.c:145:
+void* __init of_get_flat_dt_prop(unsigned long node, const char *name,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: arch/microblaze/kernel/prom.c:146:
+void* __init of_get_flat_dt_prop(unsigned long node, const char *name,
+				unsigned long *size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nstr"
#221: FILE: arch/microblaze/kernel/prom.c:168:
+		if (nstr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#222: FILE: arch/microblaze/kernel/prom.c:169:
+			printk(KERN_WARNING "Can't find property index"

WARNING:SPLIT_STRING: quoted string split across lines
#223: FILE: arch/microblaze/kernel/prom.c:170:
+			printk(KERN_WARNING "Can't find property index"
+				" name !\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#242: FILE: arch/microblaze/kernel/prom.c:189:
+	if (cp == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: arch/microblaze/kernel/prom.c:215:
+static unsigned long __init unflatten_dt_node(unsigned long mem,
+					unsigned long *p,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: arch/microblaze/kernel/prom.c:230:
+		printk("Weird tag at start of node: %x\n", tag);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#288: FILE: arch/microblaze/kernel/prom.c:235:
+	l = allocl = strlen(pathp) + 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#320: FILE: arch/microblaze/kernel/prom.c:267:
+		if (new_format) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: arch/microblaze/kernel/prom.c:275:
+					pr_debug("%s: p: %d, l: %d, a: %d\n",
+						pathp, (int)strlen(p),

CHECK:BRACES: Unbalanced braces around else statement
#336: FILE: arch/microblaze/kernel/prom.c:283:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dad"
#341: FILE: arch/microblaze/kernel/prom.c:288:
+		if (dad != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pname"
#371: FILE: arch/microblaze/kernel/prom.c:318:
+		if (pname == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#372: FILE: arch/microblaze/kernel/prom.c:319:
+			printk(KERN_INFO

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: arch/microblaze/kernel/prom.c:372:
+			pr_debug("fixed up name for %s -> %s\n", pathp,
+				(char *)pp->value);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#443: FILE: arch/microblaze/kernel/prom.c:390:
+		printk(KERN_INFO "Weird tag at end of node: %x\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unflatten_device_tree', this function's name, in a string
#461: FILE: arch/microblaze/kernel/prom.c:408:
+	pr_debug(" -> unflatten_device_tree()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#473: FILE: arch/microblaze/kernel/prom.c:420:
+	mem = (unsigned long) __va(mem);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#484: FILE: arch/microblaze/kernel/prom.c:431:
+		printk(KERN_WARNING "Weird tag at end of tree: %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: arch/microblaze/kernel/prom.c:432:
+		printk(KERN_WARNING "Weird tag at end of tree: %08x\n",
+			*((u32 *)start));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#487: FILE: arch/microblaze/kernel/prom.c:434:
+		printk(KERN_WARNING "End of tree marker overwritten: %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: arch/microblaze/kernel/prom.c:435:
+		printk(KERN_WARNING "End of tree marker overwritten: %08x\n",
+			((u32 *)mem)[size / 4]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!of_chosen"
#493: FILE: arch/microblaze/kernel/prom.c:440:
+	if (of_chosen == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unflatten_device_tree', this function's name, in a string
#496: FILE: arch/microblaze/kernel/prom.c:443:
+	pr_debug(" <- unflatten_device_tree()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!type"
#512: FILE: arch/microblaze/kernel/prom.c:459:
+	if (type == NULL || strcmp(type, "cpu") != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: arch/microblaze/kernel/prom.c:488:
+			if (of_get_flat_dt_prop(node,
+					"linux,boot-cpu", NULL) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: arch/microblaze/kernel/prom.c:502:
+		pr_debug("boot cpu: logical %d physical %d\n", logical_cpuid,
+			intserv[i]);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#572: FILE: arch/microblaze/kernel/prom.c:519:
+		initrd_start = (unsigned long)__va(of_read_ulong(prop, l/4));
 		                                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#577: FILE: arch/microblaze/kernel/prom.c:524:
+					__va(of_read_ulong(prop, l/4));
 					                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: arch/microblaze/kernel/prom.c:532:
+	pr_debug("initrd_start=0x%lx  initrd_end=0x%lx\n",
+					initrd_start, initrd_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: arch/microblaze/kernel/prom.c:541:
+static int __init early_init_dt_scan_chosen(unsigned long node,
+				const char *uname, int depth, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: arch/microblaze/kernel/prom.c:549:
+	if (depth != 1 ||
+		(strcmp(uname, "chosen") != 0 &&

WARNING:TYPO_SPELLING: 'Retreive' may be misspelled - perhaps 'Retrieve'?
#620: FILE: arch/microblaze/kernel/prom.c:567:
+	/* Retreive command line */
 	   ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#622: FILE: arch/microblaze/kernel/prom.c:569:
+	if (p != NULL && l > 0)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#623: FILE: arch/microblaze/kernel/prom.c:570:
+		strlcpy(cmd_line, p, min((int)l, COMMAND_LINE_SIZE));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#626: FILE: arch/microblaze/kernel/prom.c:573:
+	if (p == NULL || l == 0 || (l == 1 && (*p) == 0))

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#627: FILE: arch/microblaze/kernel/prom.c:574:
+		strlcpy(cmd_line, CONFIG_CMDLINE, COMMAND_LINE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: arch/microblaze/kernel/prom.c:584:
+static int __init early_init_dt_scan_root(unsigned long node,
+				const char *uname, int depth, void *data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#645: FILE: arch/microblaze/kernel/prom.c:592:
+	dt_root_size_cells = (prop == NULL) ? 1 : *prop;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#649: FILE: arch/microblaze/kernel/prom.c:596:
+	dt_root_addr_cells = (prop == NULL) ? 2 : *prop;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: arch/microblaze/kernel/prom.c:612:
+static int __init early_init_dt_scan_memory(unsigned long node,
+				const char *uname, int depth, void *data)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#673: FILE: arch/microblaze/kernel/prom.c:620:
+/*	if (depth == 1 &&
+		strcmp(uname, "ibm,dynamic-reconfiguration-memory") == 0)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#677: FILE: arch/microblaze/kernel/prom.c:624:
+	if (type == NULL) {
[...]
+	} else if (strcmp(type, "memory") != 0)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!type"
#677: FILE: arch/microblaze/kernel/prom.c:624:
+	if (type == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reg"
#688: FILE: arch/microblaze/kernel/prom.c:635:
+	if (reg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reg"
#690: FILE: arch/microblaze/kernel/prom.c:637:
+	if (reg == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: arch/microblaze/kernel/prom.c:643:
+	pr_debug("memory scan node %s, reg size %ld, data: %x %x %x %x,\n",
+		uname, l, reg[0], reg[1], reg[2], reg[3]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: arch/microblaze/kernel/prom.c:654:
+		pr_debug(" - %llx ,  %llx\n", (unsigned long long)base,
+			(unsigned long long)size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#758: FILE: arch/microblaze/kernel/prom.c:705:
+		printk(KERN_ERR "Phyp-dump not supported on this hardware\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#763: FILE: arch/microblaze/kernel/prom.c:710:
+		printk(KERN_INFO "Phyp-dump disabled at boot time\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#775: FILE: arch/microblaze/kernel/prom.c:722:
+		 * the memory_limit, it will need to be adjusted. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_init_devtree', this function's name, in a string
#796: FILE: arch/microblaze/kernel/prom.c:743:
+	pr_debug(" -> early_init_devtree(%p)\n", params);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#802: FILE: arch/microblaze/kernel/prom.c:749:
+	/* scan tree to see if dump occured during last boot */
 	                            ^^^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#806: FILE: arch/microblaze/kernel/prom.c:753:
+	/* Retrieve various informations from the /chosen node of the
 	                    ^^^^^^^^^^^^

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#818: FILE: arch/microblaze/kernel/prom.c:765:
+	strlcpy(boot_command_line, cmd_line, COMMAND_LINE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#823: FILE: arch/microblaze/kernel/prom.c:770:
+	pr_debug("Phys. mem: %lx\n",(unsigned long) lmb_phys_mem_size());

ERROR:SPACING: space required after that ',' (ctx:VxV)
#823: FILE: arch/microblaze/kernel/prom.c:770:
+	pr_debug("Phys. mem: %lx\n",(unsigned long) lmb_phys_mem_size());
 	                           ^

WARNING:TYPO_SPELLING: 'Retreive' may be misspelled - perhaps 'Retrieve'?
#827: FILE: arch/microblaze/kernel/prom.c:774:
+	/* Retreive CPU related informations from the flat tree
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#827: FILE: arch/microblaze/kernel/prom.c:774:
+	/* Retreive CPU related informations from the flat tree
 	                        ^^^^^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_init_devtree', this function's name, in a string
#832: FILE: arch/microblaze/kernel/prom.c:779:
+	pr_debug(" <- early_init_devtree()\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#942: FILE: arch/microblaze/kernel/prom.c:889:
+		printk(KERN_INFO "WARNING: Bad of_node_put() on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: arch/microblaze/kernel/prom.c:890:
+		printk(KERN_INFO "WARNING: Bad of_node_put() on %s\n",
+			node->full_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#954: FILE: arch/microblaze/kernel/prom.c:901:
+		struct property *next = prop->next;
+		kfree(prop->name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1013: FILE: arch/microblaze/kernel/prom.c:960:
+	if (allnodes == np)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1015: FILE: arch/microblaze/kernel/prom.c:962:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1017: FILE: arch/microblaze/kernel/prom.c:964:
+		struct device_node *prev;
+		for (prev = allnodes;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1024: FILE: arch/microblaze/kernel/prom.c:971:
+	if (parent->child == np)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1026: FILE: arch/microblaze/kernel/prom.c:973:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1028: FILE: arch/microblaze/kernel/prom.c:975:
+		struct device_node *prevsib;
+		for (prevsib = np->parent->child;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1173: FILE: arch/microblaze/kernel/prom.c:1120:
+		intserv = of_get_property(np, "ibm,ppc-interrupt-server#s",
+				&plen);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!intserv"
#1174: FILE: arch/microblaze/kernel/prom.c:1121:
+		if (intserv == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1176: FILE: arch/microblaze/kernel/prom.c:1123:
+			const u32 *reg = of_get_property(np, "reg", NULL);
+			if (reg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reg"
#1176: FILE: arch/microblaze/kernel/prom.c:1123:
+			if (reg == NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1208: FILE: arch/microblaze/kernel/prom.c:1155:
+	d = debugfs_create_blob("flat-device-tree", S_IFREG | S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1215: FILE: arch/microblaze/kernel/prom.c:1162:
+__initcall(export_flat_device_tree);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1223: FILE: include/asm-microblaze/of_device.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1251: FILE: include/asm-microblaze/of_device.h:29:
+extern void of_device_make_bus_id(struct of_device *dev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1264: FILE: include/asm-microblaze/of_platform.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1302: FILE: include/asm-microblaze/of_platform.h:39:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1310: FILE: include/asm-microblaze/prom.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1332: FILE: include/asm-microblaze/prom.h:23:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'pathes' may be misspelled - perhaps 'paths'?
#1354: FILE: include/asm-microblaze/prom.h:45:
+ * The dt struct contains the device tree structure, full pathes and
                                                           ^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'kref'
#1406: FILE: include/asm-microblaze/prom.h:97:
+	struct	kref kref;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1426: FILE: include/asm-microblaze/prom.h:117:
+static inline void set_node_proc_entry(struct device_node *dn,
+					struct proc_dir_entry *de)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1431: FILE: include/asm-microblaze/prom.h:122:
+extern struct device_node *of_find_all_nodes(struct device_node *prev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1432: FILE: include/asm-microblaze/prom.h:123:
+extern struct device_node *of_node_get(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1433: FILE: include/asm-microblaze/prom.h:124:
+extern void of_node_put(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1436: FILE: include/asm-microblaze/prom.h:127:
+extern int __init of_scan_flat_dt(int (*it)(unsigned long node,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1437: FILE: include/asm-microblaze/prom.h:128:
+extern int __init of_scan_flat_dt(int (*it)(unsigned long node,
+					const char *uname, int depth,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1444: FILE: include/asm-microblaze/prom.h:135:
+extern unsigned long __init of_get_flat_dt_root(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1447: FILE: include/asm-microblaze/prom.h:138:
+extern void of_attach_node(struct device_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#1447: FILE: include/asm-microblaze/prom.h:138:
+extern void of_attach_node(struct device_node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: include/asm-microblaze/prom.h:139:
+extern void of_detach_node(struct device_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#1448: FILE: include/asm-microblaze/prom.h:139:
+extern void of_detach_node(struct device_node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1451: FILE: include/asm-microblaze/prom.h:142:
+extern void finish_device_tree(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1452: FILE: include/asm-microblaze/prom.h:143:
+extern void unflatten_device_tree(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1453: FILE: include/asm-microblaze/prom.h:144:
+extern void early_init_devtree(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1453: FILE: include/asm-microblaze/prom.h:144:
+extern void early_init_devtree(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1454: FILE: include/asm-microblaze/prom.h:145:
+extern int machine_is_compatible(const char *compat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1455: FILE: include/asm-microblaze/prom.h:146:
+extern void print_properties(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: include/asm-microblaze/prom.h:147:
+extern int prom_n_intr_cells(struct device_node *np);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1457: FILE: include/asm-microblaze/prom.h:148:
+extern void prom_get_irq_senses(unsigned char *senses, int off, int max);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1458: FILE: include/asm-microblaze/prom.h:149:
+extern int prom_add_property(struct device_node *np, struct property *prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1459: FILE: include/asm-microblaze/prom.h:150:
+extern int prom_remove_property(struct device_node *np, struct property *prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1460: FILE: include/asm-microblaze/prom.h:151:
+extern int prom_update_property(struct device_node *np,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1464: FILE: include/asm-microblaze/prom.h:155:
+extern struct resource *request_OF_resource(struct device_node *node,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1465: FILE: include/asm-microblaze/prom.h:156:
+extern struct resource *request_OF_resource(struct device_node *node,
+				int index, const char *name_postfix);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1466: FILE: include/asm-microblaze/prom.h:157:
+extern int release_OF_resource(struct device_node *node, int index);

WARNING:TYPO_SPELLING: 'retreival' may be misspelled - perhaps 'retrieval'?
#1469: FILE: include/asm-microblaze/prom.h:160:
+ * OF address retreival & translation
               ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1476: FILE: include/asm-microblaze/prom.h:167:
+	u64 r = 0;
+	while (size--)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1486: FILE: include/asm-microblaze/prom.h:177:
+extern u64 of_translate_address(struct device_node *np, const u32 *addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1492: FILE: include/asm-microblaze/prom.h:183:
+extern const u32 *of_get_address(struct device_node *dev, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: include/asm-microblaze/prom.h:184:
+extern const u32 *of_get_address(struct device_node *dev, int index,
+			u64 *size, unsigned int *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1494: FILE: include/asm-microblaze/prom.h:185:
+extern const u32 *of_get_pci_address(struct device_node *dev, int bar_no,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1495: FILE: include/asm-microblaze/prom.h:186:
+extern const u32 *of_get_pci_address(struct device_node *dev, int bar_no,
+			u64 *size, unsigned int *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1503: FILE: include/asm-microblaze/prom.h:194:
+extern int of_address_to_resource(struct device_node *dev, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: include/asm-microblaze/prom.h:195:
+extern int of_address_to_resource(struct device_node *dev, int index,
+				struct resource *r);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1505: FILE: include/asm-microblaze/prom.h:196:
+extern int of_pci_address_to_resource(struct device_node *dev, int bar,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: include/asm-microblaze/prom.h:197:
+extern int of_pci_address_to_resource(struct device_node *dev, int bar,
+				struct resource *r);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: include/asm-microblaze/prom.h:203:
+void of_parse_dma_window(struct device_node *dn, const void *dma_window_prop,
+		unsigned long *busno, unsigned long *phys, unsigned long *size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1514: FILE: include/asm-microblaze/prom.h:205:
+extern void kdump_move_device_tree(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1520: FILE: include/asm-microblaze/prom.h:211:
+extern const void *of_get_mac_address(struct device_node *np);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1549: FILE: include/asm-microblaze/prom.h:240:
+extern void of_irq_map_init(unsigned int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1568: FILE: include/asm-microblaze/prom.h:259:
+extern int of_irq_map_raw(struct device_node *parent, const u32 *intspec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1569: FILE: include/asm-microblaze/prom.h:260:
+extern int of_irq_map_raw(struct device_node *parent, const u32 *intspec,
+			u32 ointsize, const u32 *addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1582: FILE: include/asm-microblaze/prom.h:273:
+extern int of_irq_map_one(struct device_node *device, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: include/asm-microblaze/prom.h:274:
+extern int of_irq_map_one(struct device_node *device, int index,
+			struct of_irq *out_irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1597: FILE: include/asm-microblaze/prom.h:288:
+extern int of_irq_map_pci(struct pci_dev *pdev, struct of_irq *out_irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1599: FILE: include/asm-microblaze/prom.h:290:
+extern int of_irq_to_resource(struct device_node *dev, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1600: FILE: include/asm-microblaze/prom.h:291:
+extern int of_irq_to_resource(struct device_node *dev, int index,
+			struct resource *r);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1609: FILE: include/asm-microblaze/prom.h:300:
+extern void __iomem *of_iomap(struct device_node *device, int index);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262724.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 53 warnings, 95 checks, 1547 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262724.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
