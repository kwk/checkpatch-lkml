WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: include/linux/pollfs_fs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#53: FILE: include/linux/pollfs_fs.h:17:
+#define PFS_CHECK_CALLBACK_1(f, a) (void*)				\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#53: FILE: include/linux/pollfs_fs.h:17:
+#define PFS_CHECK_CALLBACK_1(f, a) (void*)				\
+	(sizeof((f)((typeof(a *))0)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#56: FILE: include/linux/pollfs_fs.h:20:
+#define PFS_CHECK_CALLBACK_2(f, a, b) (void*)				\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#56: FILE: include/linux/pollfs_fs.h:20:
+#define PFS_CHECK_CALLBACK_2(f, a, b) (void*)				\
+	(sizeof((f)((typeof(a *))0, (typeof(b*))0)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#57: FILE: include/linux/pollfs_fs.h:21:
+	(sizeof((f)((typeof(a *))0, (typeof(b*))0)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#59: FILE: include/linux/pollfs_fs.h:23:
+#define PFS_WRITE(func, type, utype)					\
+	(ssize_t (*)(void *, const void __user *))			\
+	(0 ? PFS_CHECK_CALLBACK_2(func, type, utype) : func)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#59: FILE: include/linux/pollfs_fs.h:23:
+#define PFS_WRITE(func, type, utype)					\
+	(ssize_t (*)(void *, const void __user *))			\
+	(0 ? PFS_CHECK_CALLBACK_2(func, type, utype) : func)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#63: FILE: include/linux/pollfs_fs.h:27:
+#define PFS_READ(func, type, utype)					\
+	(ssize_t (*)(void *, void __user *))				\
+	(0 ? PFS_CHECK_CALLBACK_2(func, type, utype) : func)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#63: FILE: include/linux/pollfs_fs.h:27:
+#define PFS_READ(func, type, utype)					\
+	(ssize_t (*)(void *, void __user *))				\
+	(0 ? PFS_CHECK_CALLBACK_2(func, type, utype) : func)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#67: FILE: include/linux/pollfs_fs.h:31:
+#define PFS_POLL(func, type)						\
+	(int (*)(void *))(0 ? PFS_CHECK_CALLBACK_1(func, type) : func)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#67: FILE: include/linux/pollfs_fs.h:31:
+#define PFS_POLL(func, type)						\
+	(int (*)(void *))(0 ? PFS_CHECK_CALLBACK_1(func, type) : func)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#70: FILE: include/linux/pollfs_fs.h:34:
+#define PFS_RELEASE(func, type)						\
+	(int (*)(void *))(0 ? PFS_CHECK_CALLBACK_1(func, type) : func)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#70: FILE: include/linux/pollfs_fs.h:34:
+#define PFS_RELEASE(func, type)						\
+	(int (*)(void *))(0 ? PFS_CHECK_CALLBACK_1(func, type) : func)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#74: FILE: include/linux/pollfs_fs.h:38:
+	ssize_t (*read)(void *, void __user *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#74: FILE: include/linux/pollfs_fs.h:38:
+	ssize_t (*read)(void *, void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#75: FILE: include/linux/pollfs_fs.h:39:
+	ssize_t (*write)(void *, const void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#75: FILE: include/linux/pollfs_fs.h:39:
+	ssize_t (*write)(void *, const void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#76: FILE: include/linux/pollfs_fs.h:40:
+	int (*mmap)(void *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#76: FILE: include/linux/pollfs_fs.h:40:
+	int (*mmap)(void *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#77: FILE: include/linux/pollfs_fs.h:41:
+	int (*poll)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#78: FILE: include/linux/pollfs_fs.h:42:
+	int (*release)(void *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450177.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 9 warnings, 4 checks, 57 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450177.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
