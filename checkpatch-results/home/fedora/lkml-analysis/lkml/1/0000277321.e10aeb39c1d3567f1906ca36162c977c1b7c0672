WARNING:TYPO_SPELLING: 'temparary' may be misspelled - perhaps 'temporary'?
#47: 
For ecryptfs this is done with a temparary hack using d_find_alias(),
                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#73: FILE: fs/ecryptfs/inode.c:821:
+		rc = dentry_permission(nd->path.dentry, mask, nd);
 		                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#100: FILE: fs/namei.c:229:
+int dentry_permission(struct dentry *dentry, int mask, struct nameidata *nd)
                                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#111: FILE: fs/namei.c:305:
+	return dentry_permission(nd->path.dentry, mask, nd);
 	                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#129: FILE: fs/namei.c:1345:
+	err = dentry_permission(nd->path.dentry, MAY_EXEC, nd);
 	                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#177: FILE: fs/namei.c:1522:
+	return dentry_permission(dir_dentry, MAY_WRITE | MAY_EXEC, nd);
 	                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#188: FILE: fs/namei.c:1586:
+		      int mode,	struct nameidata *nd)
 		               	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#192: FILE: fs/namei.c:1589:
+	int error = may_create(dir_dentry, dentry, nd);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#201: FILE: fs/namei.c:1614:
+		error = vfs_create(dir_path->dentry, dentry, mode, nd);
 		                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#210: FILE: fs/namei.c:1715:
+	error = vfs_create(dir, path->dentry, mode, nd);
 	                                            ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#444: FILE: fs/nfsd/vfs.c:1945:
+	err = dentry_permission(dentry, acc & (MAY_READ|MAY_WRITE|MAY_EXEC),
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#444: FILE: fs/nfsd/vfs.c:1945:
+	err = dentry_permission(dentry, acc & (MAY_READ|MAY_WRITE|MAY_EXEC),
 	                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: include/linux/fs.h:1761:
+extern int dentry_permission(struct dentry *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#464: FILE: include/linux/fs.h:1761:
+extern int dentry_permission(struct dentry *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#464: FILE: include/linux/fs.h:1761:
+extern int dentry_permission(struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#464: FILE: include/linux/fs.h:1761:
+extern int dentry_permission(struct dentry *, int, struct nameidata *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277321.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 3 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277321.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
