WARNING:LINE_SPACING: Missing a blank line after declarations
#56: FILE: arch/x86/mm/fault_32.c:179:
+	unsigned long dummy;
+	return probe_kernel_address((unsigned long *)p, dummy);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#80: FILE: arch/x86/mm/fault_32.c:230:
+	if (bad_address(pgd)) goto bad;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#81: FILE: arch/x86/mm/fault_32.c:231:
+	printk("PGD %lx ", pgd_val(*pgd));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#82: FILE: arch/x86/mm/fault_32.c:232:
+	if (!pgd_present(*pgd)) goto ret;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#85: FILE: arch/x86/mm/fault_32.c:235:
+	if (bad_address(pud)) goto bad;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#86: FILE: arch/x86/mm/fault_32.c:236:
+	printk("PUD %lx ", pud_val(*pud));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#87: FILE: arch/x86/mm/fault_32.c:237:
+	if (!pud_present(*pud))	goto ret;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#90: FILE: arch/x86/mm/fault_32.c:240:
+	if (bad_address(pmd)) goto bad;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#91: FILE: arch/x86/mm/fault_32.c:241:
+	printk("PMD %lx ", pmd_val(*pmd));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#92: FILE: arch/x86/mm/fault_32.c:242:
+	if (!pmd_present(*pmd) || pmd_large(*pmd)) goto ret;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#95: FILE: arch/x86/mm/fault_32.c:245:
+	if (bad_address(pte)) goto bad;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: arch/x86/mm/fault_32.c:246:
+	printk("PTE %lx", pte_val(*pte));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: arch/x86/mm/fault_32.c:248:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#101: FILE: arch/x86/mm/fault_32.c:251:
+	printk("BAD\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#130: FILE: arch/x86/mm/fault_32.c:398:
+	printk(KERN_ALERT "BUG: unable to handle kernel ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#132: FILE: arch/x86/mm/fault_32.c:400:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#132: FILE: arch/x86/mm/fault_32.c:400:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#134: FILE: arch/x86/mm/fault_32.c:402:
+		printk(KERN_CONT "paging request");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#134: FILE: arch/x86/mm/fault_32.c:402:
+		printk(KERN_CONT "paging request");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#135: FILE: arch/x86/mm/fault_32.c:403:
+	printk(KERN_CONT " at %016lx\n", address);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#135: FILE: arch/x86/mm/fault_32.c:403:
+	printk(KERN_CONT " at %016lx\n", address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#137: FILE: arch/x86/mm/fault_32.c:405:
+	printk(KERN_ALERT "IP:");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#150: FILE: arch/x86/mm/fault_32.c:418:
+	printk(KERN_ALERT "%s: Corrupted page table at address %lx\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: arch/x86/mm/fault_32.c:841:
+				pgd_t *pgd;
+				pgd = (pgd_t *)page_address(page) + pgd_index(address);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: arch/x86/mm/fault_32.c:845:
+					BUG_ON(pgd_page_vaddr(*pgd) != pgd_page_vaddr(*pgd_ref));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#238: FILE: arch/x86/mm/fault_64.c:192:
+	page = ((__typeof__(page) *) __va(page))[address >> PGDIR_SHIFT];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: arch/x86/mm/fault_64.c:194:
+	printk("*pdpt = %016Lx ", page);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#240: FILE: arch/x86/mm/fault_64.c:194:
+	printk("*pdpt = %016Lx ", page);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#242: FILE: arch/x86/mm/fault_64.c:196:
+	if ((page >> PAGE_SHIFT) < max_low_pfn
+	    && page & _PAGE_PRESENT) {

CHECK:SPACING: No space is necessary after a cast
#244: FILE: arch/x86/mm/fault_64.c:198:
+		page = ((__typeof__(page) *) __va(page))[(address >> PMD_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: arch/x86/mm/fault_64.c:199:
+^I^I                                         & (PTRS_PER_PMD - 1)];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#246: FILE: arch/x86/mm/fault_64.c:200:
+		printk(KERN_CONT "*pde = %016Lx ", page);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#246: FILE: arch/x86/mm/fault_64.c:200:
+		printk(KERN_CONT "*pde = %016Lx ", page);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#246: FILE: arch/x86/mm/fault_64.c:200:
+		printk(KERN_CONT "*pde = %016Lx ", page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: arch/x86/mm/fault_64.c:204:
+	printk("*pde = %08lx ", page);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#260: FILE: arch/x86/mm/fault_64.c:214:
+	if ((page >> PAGE_SHIFT) < max_low_pfn
+	    && (page & _PAGE_PRESENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#261: FILE: arch/x86/mm/fault_64.c:215:
+	    && (page & _PAGE_PRESENT)
+	    && !(page & _PAGE_PSE)) {

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/x86/mm/fault_64.c:217:
+		page = ((__typeof__(page) *) __va(page))[(address >> PAGE_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: arch/x86/mm/fault_64.c:218:
+^I^I                                         & (PTRS_PER_PTE - 1)];$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: arch/x86/mm/fault_64.c:219:
+		printk("*pte = %0*Lx ", sizeof(page)*2, (u64)page);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#265: FILE: arch/x86/mm/fault_64.c:219:
+		printk("*pte = %0*Lx ", sizeof(page)*2, (u64)page);
 		                                    ^

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#265: FILE: arch/x86/mm/fault_64.c:219:
+		printk("*pte = %0*Lx ", sizeof(page)*2, (u64)page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#268: FILE: arch/x86/mm/fault_64.c:222:
+	printk("\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#283: FILE: arch/x86/mm/fault_64.c:261:
+	unsigned index = pgd_index(address);

CHECK:BRACES: braces {} should be used on all arms of this statement
#309: FILE: arch/x86/mm/fault_64.c:287:
+	if (!pmd_present(*pmd)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#312: FILE: arch/x86/mm/fault_64.c:290:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: arch/x86/mm/fault_64.c:291:
+		BUG_ON(pmd_page(*pmd) != pmd_page(*pmd_k));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#335: FILE: arch/x86/mm/fault_64.c:385:
+			printk(KERN_CRIT "kernel tried to execute "

WARNING:SPLIT_STRING: quoted string split across lines
#336: FILE: arch/x86/mm/fault_64.c:386:
+			printk(KERN_CRIT "kernel tried to execute "
+				"NX-protected page - exploit attempt? "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#337: FILE: arch/x86/mm/fault_64.c:387:
+				"NX-protected page - exploit attempt? "
+				"(uid: %d)\n", current->uid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#340: FILE: arch/x86/mm/fault_64.c:390:
+	printk(KERN_ALERT "BUG: unable to handle kernel ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#342: FILE: arch/x86/mm/fault_64.c:392:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#342: FILE: arch/x86/mm/fault_64.c:392:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#344: FILE: arch/x86/mm/fault_64.c:394:
+		printk(KERN_CONT "paging request");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#344: FILE: arch/x86/mm/fault_64.c:394:
+		printk(KERN_CONT "paging request");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#345: FILE: arch/x86/mm/fault_64.c:395:
+	printk(KERN_CONT " at %08lx\n", address);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#345: FILE: arch/x86/mm/fault_64.c:395:
+	printk(KERN_CONT " at %08lx\n", address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#347: FILE: arch/x86/mm/fault_64.c:397:
+	printk(KERN_ALERT "IP:");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: arch/x86/mm/fault_64.c:831:
+				if (!vmalloc_sync_one(page_address(page),
+								address)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: arch/x86/mm/fault_64.c:832:
+					BUG_ON(page != pgd_list);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 41 warnings, 10 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
