WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#56: FILE: arch/x86/mm/init.c:14:
+extern void __init kernel_physical_mapping_init(unsigned long start_pfn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#76: FILE: arch/x86/mm/init.c:34:
+#ifdef CONFIG_DIRECT_GBPAGES
+				= 1

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#88: FILE: arch/x86/mm/init.c:46:
+	if (use_gbpages) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#91: FILE: arch/x86/mm/init.c:49:
+		extra = end - ((end>>PUD_SHIFT) << PUD_SHIFT);
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#93: FILE: arch/x86/mm/init.c:51:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#98: FILE: arch/x86/mm/init.c:56:
+	if (use_pse) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#101: FILE: arch/x86/mm/init.c:59:
+		extra = end - ((end>>PMD_SHIFT) << PMD_SHIFT);
 		                   ^

CHECK:BRACES: Unbalanced braces around else statement
#106: FILE: arch/x86/mm/init.c:64:
+	} else

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#123: FILE: arch/x86/mm/init.c:81:
+	table_start = find_e820_area(start, max_pfn_mapped<<PAGE_SHIFT,
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: arch/x86/mm/init.c:82:
+	table_start = find_e820_area(start, max_pfn_mapped<<PAGE_SHIFT,
+					tables, PAGE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#136: FILE: arch/x86/mm/init.c:94:
+	printk(KERN_DEBUG "kernel direct mapping tables up to %lx @ %lx-%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: arch/x86/mm/init.c:95:
+	printk(KERN_DEBUG "kernel direct mapping tables up to %lx @ %lx-%lx\n",
+		end, table_start << PAGE_SHIFT, table_top << PAGE_SHIFT);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#143: FILE: arch/x86/mm/init.c:101:
+	unsigned page_size_mask;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#159: FILE: arch/x86/mm/init.c:117:
+		mr[nr_range].start = start_pfn<<PAGE_SHIFT;
 		                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#160: FILE: arch/x86/mm/init.c:118:
+		mr[nr_range].end   = end_pfn<<PAGE_SHIFT;
 		                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#172: FILE: arch/x86/mm/init.c:130:
+		printk(KERN_INFO "Using GB pages for direct mapping\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#199: FILE: arch/x86/mm/init.c:157:
+	printk(KERN_INFO "init_memory_mapping: %016lx-%016lx\n", start, end);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_memory_mapping', this function's name, in a string
#199: FILE: arch/x86/mm/init.c:157:
+	printk(KERN_INFO "init_memory_mapping: %016lx-%016lx\n", start, end);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#210: FILE: arch/x86/mm/init.c:168:
+	use_pse = use_gbpages = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#220: FILE: arch/x86/mm/init.c:178:
+		printk(KERN_INFO "NX (Execute Disable) protection: active\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#253: FILE: arch/x86/mm/init.c:211:
+		end_pfn = 1<<(PMD_SHIFT - PAGE_SHIFT);
 		           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#255: FILE: arch/x86/mm/init.c:213:
+		end_pfn = ((pos + (PMD_SIZE - 1))>>PMD_SHIFT)
 		                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#269: FILE: arch/x86/mm/init.c:227:
+	start_pfn = ((pos + (PMD_SIZE - 1))>>PMD_SHIFT)
 	                                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#272: FILE: arch/x86/mm/init.c:230:
+	end_pfn = (end>>PMD_SHIFT) << (PMD_SHIFT - PAGE_SHIFT);
 	              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#274: FILE: arch/x86/mm/init.c:232:
+	end_pfn = ((pos + (PUD_SIZE - 1))>>PUD_SHIFT)
 	                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#276: FILE: arch/x86/mm/init.c:234:
+	if (end_pfn > ((end>>PMD_SHIFT)<<(PMD_SHIFT - PAGE_SHIFT)))
 	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#276: FILE: arch/x86/mm/init.c:234:
+	if (end_pfn > ((end>>PMD_SHIFT)<<(PMD_SHIFT - PAGE_SHIFT)))
 	                               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#277: FILE: arch/x86/mm/init.c:235:
+		end_pfn = ((end>>PMD_SHIFT)<<(PMD_SHIFT - PAGE_SHIFT));
 		               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#277: FILE: arch/x86/mm/init.c:235:
+		end_pfn = ((end>>PMD_SHIFT)<<(PMD_SHIFT - PAGE_SHIFT));
 		                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: arch/x86/mm/init.c:240:
+		nr_range = save_mr(mr, nr_range, start_pfn, end_pfn,
+				page_size_mask & (1<<PG_LEVEL_2M));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#282: FILE: arch/x86/mm/init.c:240:
+				page_size_mask & (1<<PG_LEVEL_2M));
 				                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#288: FILE: arch/x86/mm/init.c:246:
+	start_pfn = ((pos + (PUD_SIZE - 1))>>PUD_SHIFT)
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: arch/x86/mm/init.c:251:
+		nr_range = save_mr(mr, nr_range, start_pfn, end_pfn,
+				page_size_mask &

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#294: FILE: arch/x86/mm/init.c:252:
+				 ((1<<PG_LEVEL_2M)|(1<<PG_LEVEL_1G)));
 				    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#294: FILE: arch/x86/mm/init.c:252:
+				 ((1<<PG_LEVEL_2M)|(1<<PG_LEVEL_1G)));
 				                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#294: FILE: arch/x86/mm/init.c:252:
+				 ((1<<PG_LEVEL_2M)|(1<<PG_LEVEL_1G)));
 				                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#299: FILE: arch/x86/mm/init.c:257:
+	start_pfn = ((pos + (PMD_SIZE - 1))>>PMD_SHIFT)
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: arch/x86/mm/init.c:262:
+		nr_range = save_mr(mr, nr_range, start_pfn, end_pfn,
+				page_size_mask & (1<<PG_LEVEL_2M));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#304: FILE: arch/x86/mm/init.c:262:
+				page_size_mask & (1<<PG_LEVEL_2M));
 				                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#310: FILE: arch/x86/mm/init.c:268:
+	start_pfn = pos>>PAGE_SHIFT;
 	               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#311: FILE: arch/x86/mm/init.c:269:
+	end_pfn = end>>PAGE_SHIFT;
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: arch/x86/mm/init.c:275:
+		unsigned long old_start;
+		if (mr[i].end != mr[i+1].start ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#317: FILE: arch/x86/mm/init.c:275:
+		if (mr[i].end != mr[i+1].start ||
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#318: FILE: arch/x86/mm/init.c:276:
+		    mr[i].page_size_mask != mr[i+1].page_size_mask)
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#322: FILE: arch/x86/mm/init.c:280:
+		memmove(&mr[i], &mr[i+1],
 		                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#329: FILE: arch/x86/mm/init.c:287:
+		printk(KERN_DEBUG " %010lx - %010lx page %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: arch/x86/mm/init.c:288:
+		printk(KERN_DEBUG " %010lx - %010lx page %s\n",
+				mr[i].start, mr[i].end,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#331: FILE: arch/x86/mm/init.c:289:
+			(mr[i].page_size_mask & (1<<PG_LEVEL_1G))?"1G":(

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#331: FILE: arch/x86/mm/init.c:289:
+			(mr[i].page_size_mask & (1<<PG_LEVEL_1G))?"1G":(
 			                          ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#331: FILE: arch/x86/mm/init.c:289:
+			(mr[i].page_size_mask & (1<<PG_LEVEL_1G))?"1G":(
 			                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#331: FILE: arch/x86/mm/init.c:289:
+			(mr[i].page_size_mask & (1<<PG_LEVEL_1G))?"1G":(
 			                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#332: FILE: arch/x86/mm/init.c:290:
+			 (mr[i].page_size_mask & (1<<PG_LEVEL_2M))?"2M":"4k"));
 			                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#332: FILE: arch/x86/mm/init.c:290:
+			 (mr[i].page_size_mask & (1<<PG_LEVEL_2M))?"2M":"4k"));
 			                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#332: FILE: arch/x86/mm/init.c:290:
+			 (mr[i].page_size_mask & (1<<PG_LEVEL_2M))?"2M":"4k"));
 			                                               ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#346: FILE: arch/x86/mm/init.c:304:
+		kernel_physical_mapping_init(

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#349: FILE: arch/x86/mm/init.c:307:
+				mr[i].page_size_mask == (1<<PG_LEVEL_2M));
 				                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/x86/mm/init.c:329:
+		reserve_early(table_start << PAGE_SHIFT,
+				 table_end << PAGE_SHIFT, "PGTABLE");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#397: FILE: arch/x86/mm/init_32.c:62:
+extern unsigned long __initdata table_start;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#398: FILE: arch/x86/mm/init_32.c:63:
+extern unsigned long __meminitdata table_end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#399: FILE: arch/x86/mm/init_32.c:64:
+extern unsigned long __meminitdata table_top;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#756: FILE: arch/x86/mm/init_64.c:287:
+extern unsigned long __meminitdata table_end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#757: FILE: arch/x86/mm/init_64.c:288:
+extern unsigned long __meminitdata table_top;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 48 checks, 1014 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
