WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: include/linux/rwlock.h:1:
+#ifndef __LINUX_RWLOCK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: include/linux/rwlock.h:20:
+  extern void __rwlock_init(rwlock_t *lock, const char *name,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/rwlock.h:20:
+  extern void __rwlock_init(rwlock_t *lock, const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#75: FILE: include/linux/rwlock.h:29:
+# define rwlock_init(lock)					\
+	do { *(lock) = __RW_LOCK_UNLOCKED(lock); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#75: FILE: include/linux/rwlock.h:29:
+# define rwlock_init(lock)					\
+	do { *(lock) = __RW_LOCK_UNLOCKED(lock); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/rwlock.h:34:
+ extern void _raw_read_lock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/rwlock.h:34:
+ extern void _raw_read_lock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/rwlock.h:36:
+ extern int _raw_read_trylock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/rwlock.h:36:
+ extern int _raw_read_trylock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/linux/rwlock.h:37:
+ extern void _raw_read_unlock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/rwlock.h:37:
+ extern void _raw_read_unlock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/linux/rwlock.h:38:
+ extern void _raw_write_lock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/rwlock.h:38:
+ extern void _raw_write_lock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: include/linux/rwlock.h:40:
+ extern int _raw_write_trylock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/rwlock.h:40:
+ extern int _raw_write_trylock(rwlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/linux/rwlock.h:41:
+ extern void _raw_write_unlock(rwlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/rwlock.h:41:
+ extern void _raw_write_unlock(rwlock_t *lock);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#109: FILE: include/linux/rwlock.h:63:
+#define read_trylock(lock)		__cond_lock(lock, _read_trylock(lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#110: FILE: include/linux/rwlock.h:64:
+#define write_trylock(lock)		__cond_lock(lock, _write_trylock(lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#166: FILE: include/linux/rwlock.h:120:
+#define write_trylock_irqsave(lock, flags) \
+({ \
+	local_irq_save(flags); \
+	write_trylock(lock) ? \
+	1 : ({ local_irq_restore(flags); 0; }); \
+})

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#179: FILE: include/linux/rwlock_types.h:1:
+#ifndef __LINUX_RWLOCK_TYPES_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#183: FILE: include/linux/rwlock_types.h:5:
+ * include/linux/rwlock_types.h - generic rwlock type definitions

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#189: FILE: include/linux/rwlock_types.h:11:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#212: FILE: include/linux/rwlock_types.h:34:
+#define __RW_LOCK_UNLOCKED(lockname)					\
+	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED,	\
+				.magic = RWLOCK_MAGIC,			\
+				.owner = SPINLOCK_OWNER_INIT,		\
+				.owner_cpu = -1,			\
+				RW_DEP_MAP_INIT(lockname) }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#219: FILE: include/linux/rwlock_types.h:41:
+#define __RW_LOCK_UNLOCKED(lockname) \
+	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED,	\
+				RW_DEP_MAP_INIT(lockname) }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#232: FILE: include/linux/rwlock_types.h:54:
+#define DEFINE_RWLOCK(x)	rwlock_t x = __RW_LOCK_UNLOCKED(x)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038714.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 12 warnings, 12 checks, 421 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038714.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
