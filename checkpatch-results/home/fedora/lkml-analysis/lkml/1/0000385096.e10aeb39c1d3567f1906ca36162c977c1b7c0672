WARNING:SPACING: Unnecessary space before function pointer arguments
#75: FILE: ipc/util.h:62:
+	int (*getnew) (struct ipc_namespace *, struct ipc_params *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_namespace *' should also have an identifier name
#75: FILE: ipc/util.h:62:
+	int (*getnew) (struct ipc_namespace *, struct ipc_params *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_params *' should also have an identifier name
#75: FILE: ipc/util.h:62:
+	int (*getnew) (struct ipc_namespace *, struct ipc_params *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#76: FILE: ipc/util.h:63:
+	int (*associate) (void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#76: FILE: ipc/util.h:63:
+	int (*associate) (void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#76: FILE: ipc/util.h:63:
+	int (*associate) (void *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#77: FILE: ipc/util.h:64:
+	int (*more_checks) (void *, struct ipc_params *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#77: FILE: ipc/util.h:64:
+	int (*more_checks) (void *, struct ipc_params *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_params *' should also have an identifier name
#77: FILE: ipc/util.h:64:
+	int (*more_checks) (void *, struct ipc_params *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: ipc/util.h:126:
+extern int ipcget_new(struct ipc_namespace *, struct ipc_ids *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_namespace *' should also have an identifier name
#95: FILE: ipc/util.h:126:
+extern int ipcget_new(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#95: FILE: ipc/util.h:126:
+extern int ipcget_new(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ops *' should also have an identifier name
#95: FILE: ipc/util.h:126:
+extern int ipcget_new(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_params *' should also have an identifier name
#95: FILE: ipc/util.h:126:
+extern int ipcget_new(struct ipc_namespace *, struct ipc_ids *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: ipc/util.h:127:
+extern int ipcget_new(struct ipc_namespace *, struct ipc_ids *,
+			struct ipc_ops *, struct ipc_params *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: ipc/util.h:128:
+extern int ipcget_public(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_namespace *' should also have an identifier name
#97: FILE: ipc/util.h:128:
+extern int ipcget_public(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#97: FILE: ipc/util.h:128:
+extern int ipcget_public(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ops *' should also have an identifier name
#97: FILE: ipc/util.h:128:
+extern int ipcget_public(struct ipc_namespace *, struct ipc_ids *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_params *' should also have an identifier name
#97: FILE: ipc/util.h:128:
+extern int ipcget_public(struct ipc_namespace *, struct ipc_ids *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: ipc/util.h:129:
+extern int ipcget_public(struct ipc_namespace *, struct ipc_ids *,
+			struct ipc_ops *, struct ipc_params *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: ipc/util.h:132:
+static inline int ipcget(struct ipc_namespace *ns, struct ipc_ids *ids,
+			struct ipc_ops *ops, struct ipc_params *params)

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#129: FILE: ipc/util.c:306:
+ *	@ids: identifer set
   	      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: ipc/util.c:314:
+int ipcget_new(struct ipc_namespace *ns, struct ipc_ids *ids,
+		struct ipc_ops *ops, struct ipc_params *params)

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#156: FILE: ipc/util.c:333:
+ *	@ids: identifer set
   	      ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: ipc/util.c:338:
+static int ipc_check_perms(struct kern_ipc_perm *ipcp, struct ipc_ops *ops,
+			struct ipc_params *params)

CHECK:BRACES: braces {} should be used on all arms of this statement
#165: FILE: ipc/util.c:342:
+	if (ipcperms(ipcp, params->flg))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: ipc/util.c:344:
+	else {

WARNING:TYPO_SPELLING: 'identifer' may be misspelled - perhaps 'identifier'?
#179: FILE: ipc/util.c:356:
+ *	@ids: identifer set
   	      ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: ipc/util.c:364:
+int ipcget_public(struct ipc_namespace *ns, struct ipc_ids *ids,
+		struct ipc_ops *ops, struct ipc_params *params)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipcp"
#197: FILE: ipc/util.c:374:
+	if (ipcp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#208: FILE: ipc/util.c:385:
+		if (flg & IPC_CREAT && flg & IPC_EXCL)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#210: FILE: ipc/util.c:387:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: ipc/util.c:401:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#262: FILE: ipc/msg.c:271:
+	return security_msg_queue_associate((struct msg_queue *) msq, msgflg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: ipc/sem.c:269:
 
+

CHECK:SPACING: No space is necessary after a cast
#364: FILE: ipc/sem.c:272:
+	return security_sem_associate((struct sem_array *) sma, semflg);

CHECK:SPACING: No space is necessary after a cast
#476: FILE: ipc/shm.c:429:
+	return security_shm_associate((struct shmid_kernel *) shp, shmflg);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385096.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 18 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385096.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
