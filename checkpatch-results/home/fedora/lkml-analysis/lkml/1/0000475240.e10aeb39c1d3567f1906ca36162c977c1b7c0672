CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/hrtimer.h:205:
+extern unsigned long ktime_divns(const ktime_t kt, s64 div);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#113: FILE: include/linux/hrtimer.h:207:
+# define ktime_divns(kt, div)		(unsigned long)((kt).tv64 / (div))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/tick.h:61:
+extern int tick_is_oneshot_available(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/tick.h:64:
+extern int tick_init_highres(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/tick.h:65:
+extern int tick_program_event(ktime_t expires, int force);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/tick.h:66:
+extern void tick_setup_sched_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/tick.h:67:
+extern void tick_cancel_sched_timer(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/tick.h:73:
+extern void tick_clock_notify(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/tick.h:74:
+extern int tick_check_oneshot_change(int allow_nohz);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/tick.h:75:
+extern struct tick_sched *tick_get_tick_sched(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/tick.h:89:
+extern void tick_nohz_stop_sched_tick(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/tick.h:90:
+extern void tick_nohz_restart_sched_tick(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/tick.h:91:
+extern void tick_nohz_update_jiffies(void);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#312: FILE: kernel/time/Kconfig:8:
+config NO_HZ
+	bool "Tickless System (Dynamic Ticks)"
+	depends on GENERIC_TIME && GENERIC_CLOCKEVENTS
+	select TICK_ONESHOT
+	help
+	  This option enables a tickless system: timer interrupts will
+	  only trigger on an as-needed basis both when the system is
+	  busy and when the system is idle.

Kconfig symbols should have a help text which fully describes
it.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#382: FILE: kernel/time/tick-broadcast.c:283:
+	for (cpu = first_cpu(tick_broadcast_oneshot_mask); cpu != NR_CPUS;

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: kernel/time/tick-broadcast.c:293:
+	for(;;) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#416: FILE: kernel/time/tick-broadcast.c:317:
+	for (cpu = first_cpu(tick_broadcast_oneshot_mask); cpu != NR_CPUS;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: kernel/time/tick-internal.h:16:
+extern void tick_setup_oneshot(struct clock_event_device *newdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: kernel/time/tick-internal.h:19:
+extern void tick_resume_jiffy_update(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#609: FILE: kernel/time/tick-internal.h:20:
+extern int tick_program_event(ktime_t expires, int force);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#610: FILE: kernel/time/tick-internal.h:21:
+extern void tick_oneshot_notify(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: kernel/time/tick-internal.h:22:
+extern int tick_switch_to_oneshot(void (*handler)(struct clock_event_device *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#612: FILE: kernel/time/tick-internal.h:23:
+extern void tick_oneshot_resume(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#615: FILE: kernel/time/tick-internal.h:26:
+extern void tick_broadcast_setup_oneshot(struct clock_event_device *bc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: kernel/time/tick-internal.h:27:
+extern void tick_broadcast_oneshot_control(unsigned long reason);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#617: FILE: kernel/time/tick-internal.h:28:
+extern void tick_broadcast_switch_to_oneshot(void);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: kernel/time/tick-internal.h:32:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#623: FILE: kernel/time/tick-internal.h:34:
+}
+static inline void tick_broadcast_oneshot_control(unsigned long reason) { }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#633: FILE: kernel/time/tick-internal.h:44:
+	BUG();

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#635: FILE: kernel/time/tick-internal.h:46:
+}
+static inline int tick_program_event(ktime_t expires, int force)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#639: FILE: kernel/time/tick-internal.h:50:
+}
+static inline void tick_resume_jiffy_update(void) { }

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#644: FILE: kernel/time/tick-internal.h:55:
+	BUG();

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#646: FILE: kernel/time/tick-internal.h:57:
+}
+static inline void tick_broadcast_oneshot_control(unsigned long reason) { }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#673: FILE: kernel/time/tick-oneshot.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#674: FILE: kernel/time/tick-oneshot.c:2:
+ * linux/kernel/time/tick-oneshot.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#761: FILE: kernel/time/tick-sched.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#762: FILE: kernel/time/tick-sched.c:2:
+ *  linux/kernel/time/tick-sched.c

WARNING:TYPO_SPELLING: 'Reevalute' may be misspelled - perhaps 'Reevaluate'?
#809: FILE: kernel/time/tick-sched.c:49:
+	/* Reevalute with xtime_lock held */
 	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#814: FILE: kernel/time/tick-sched.c:54:
+	if (delta.tv64 >= tick_period.tv64) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#886: FILE: kernel/time/tick-sched.c:126:
+__setup("nohz=", setup_tick_nohz);

CHECK:BRACES: braces {} should be used on all arms of this statement
#986: FILE: kernel/time/tick-sched.c:226:
+		if (ts->nohz_mode == NOHZ_MODE_HIGHRES) {
[...]
+		} else if(!tick_program_event(expires, 0))
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#992: FILE: kernel/time/tick-sched.c:232:
+		} else if(!tick_program_event(expires, 0))
+				goto out;

ERROR:SPACING: space required before the open parenthesis '('
#992: FILE: kernel/time/tick-sched.c:232:
+		} else if(!tick_program_event(expires, 0))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1159: FILE: kernel/time/tick-sched.c:399:
+	printk(KERN_INFO "Switched to NOHz mode on CPU #%d\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 13 warnings, 28 checks, 1195 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
