CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: drivers/char/keyboard.c:1042:
+		led_trigger_event(ledtrig_scrolllock,
+				leds & (1 << VC_SCROLLOCK) ? INT_MAX : LED_OFF);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: drivers/char/keyboard.c:1044:
+		led_trigger_event(ledtrig_numlock,
+				leds & (1 << VC_NUMLOCK)   ? INT_MAX : LED_OFF);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: drivers/char/keyboard.c:1046:
+		led_trigger_event(ledtrig_capslock,
+				leds & (1 << VC_CAPSLOCK)  ? INT_MAX : LED_OFF);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: drivers/char/keyboard.c:1048:
+		led_trigger_event(ledtrig_kanalock,
+				leds & (1 << VC_KANALOCK)  ? INT_MAX : LED_OFF);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: drivers/char/keyboard.c:1054:
+			input_inject_event(handle, EV_LED, LED_SCROLLL,
+					!!(leds & (1 << VC_SCROLLOCK)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: drivers/char/keyboard.c:1056:
+			input_inject_event(handle, EV_LED, LED_NUML,
+					!!(leds & (1 << VC_NUMLOCK)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/char/keyboard.c:1058:
+			input_inject_event(handle, EV_LED, LED_CAPSL,
+					!!(leds & (1 << VC_CAPSLOCK)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: drivers/char/keyboard.c:1067:
+		led_trigger_event(ledtrig_shiftlock,
+			kbd->lockstate & (1<<VC_SHIFTLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#148: FILE: drivers/char/keyboard.c:1067:
+			kbd->lockstate & (1<<VC_SHIFTLOCK)
 			                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: drivers/char/keyboard.c:1070:
+		led_trigger_event(ledtrig_altgrlock,
+			kbd->lockstate & (1<<VC_ALTGRLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#151: FILE: drivers/char/keyboard.c:1070:
+			kbd->lockstate & (1<<VC_ALTGRLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/char/keyboard.c:1073:
+		led_trigger_event(ledtrig_ctrllock,
+			kbd->lockstate & (1<<VC_CTRLLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#154: FILE: drivers/char/keyboard.c:1073:
+			kbd->lockstate & (1<<VC_CTRLLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/char/keyboard.c:1076:
+		led_trigger_event(ledtrig_altlock,
+			kbd->lockstate & (1<<VC_ALTLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#157: FILE: drivers/char/keyboard.c:1076:
+			kbd->lockstate & (1<<VC_ALTLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: drivers/char/keyboard.c:1079:
+		led_trigger_event(ledtrig_shiftllock,
+			kbd->lockstate & (1<<VC_SHIFTLLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#160: FILE: drivers/char/keyboard.c:1079:
+			kbd->lockstate & (1<<VC_SHIFTLLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/char/keyboard.c:1082:
+		led_trigger_event(ledtrig_shiftrlock,
+			kbd->lockstate & (1<<VC_SHIFTRLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#163: FILE: drivers/char/keyboard.c:1082:
+			kbd->lockstate & (1<<VC_SHIFTRLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: drivers/char/keyboard.c:1085:
+		led_trigger_event(ledtrig_ctrlllock,
+			kbd->lockstate & (1<<VC_CTRLLLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#166: FILE: drivers/char/keyboard.c:1085:
+			kbd->lockstate & (1<<VC_CTRLLLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: drivers/char/keyboard.c:1088:
+		led_trigger_event(ledtrig_ctrlrlock,
+			kbd->lockstate & (1<<VC_CTRLRLOCK)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#169: FILE: drivers/char/keyboard.c:1088:
+			kbd->lockstate & (1<<VC_CTRLRLOCK)
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/char/keyboard.c:1437:
+		input_inject_event(handle, EV_LED, LED_SCROLLL,
+				!!(leds & (1 << VC_SCROLLOCK)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: drivers/char/keyboard.c:1439:
+		input_inject_event(handle, EV_LED, LED_NUML,
+				!!(leds & (1 << VC_NUMLOCK)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: drivers/char/keyboard.c:1441:
+		input_inject_event(handle, EV_LED, LED_CAPSL,
+				!!(leds & (1 << VC_CAPSLOCK)));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#256: FILE: drivers/leds/Kconfig:17:
+config LEDS_INPUT
+	tristate "LED Support using input keyboards"
+	depends on LEDS_CLASS
+	help
+	  This option enables support for the LEDs on keyboard managed
+	  by the input layer.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: drivers/leds/leds-input.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: drivers/leds/leds-input.c:69:
+static int input_led_connect(struct input_handler *handler,
+			      struct input_dev *dev,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*handle)...) over kzalloc(sizeof(struct input_handle)...)
#348: FILE: drivers/leds/leds-input.c:79:
+	handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#365: FILE: drivers/leds/leds-input.c:96:
+		if (input_leds[i].name
+				&& !test_bit(i, input_led_registered)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#366: FILE: drivers/leds/leds-input.c:97:
+				&& !test_bit(i, input_led_registered)
+				&& test_bit(i, dev->ledbit))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: drivers/leds/leds-input.c:108:
+	int unregister,i;
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: drivers/leds/leds-input.c:109:
+	int unregister,i;
+	input_unregister_handle(handle);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: drivers/leds/leds-input.c:141:
+			input_inject_event(handle, EV_LED, i,
+					test_bit(i, input_led_leds));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008296.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 31 checks, 387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008296.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
