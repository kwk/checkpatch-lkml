WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
contexts one at a time, thus increasing the writer priority in stages. It favors

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: include/linux/psrwlock.h:1:
+#ifndef _LINUX_PSRWLOCK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#121: FILE: include/linux/psrwlock.h:24:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#139: FILE: include/linux/psrwlock.h:42:
+ *   26 bits left for preemptable readers count
                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: include/linux/psrwlock.h:44:
+#define UC_READER_MAX		(1U << 29)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#147: FILE: include/linux/psrwlock.h:50:
+#define UC_WRITER		(1U << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#148: FILE: include/linux/psrwlock.h:51:
+#define UC_SLOW_WRITER		(1U << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#149: FILE: include/linux/psrwlock.h:52:
+#define UC_WQ_ACTIVE		(1U << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#150: FILE: include/linux/psrwlock.h:53:
+#define UC_READER_OFFSET	(1U << 3)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: include/linux/psrwlock.h:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#168: FILE: include/linux/psrwlock.h:71:
+#define WS_WQ_MUTEX		(1U << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#169: FILE: include/linux/psrwlock.h:72:
+#define WS_COUNT_MUTEX		(1U << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#170: FILE: include/linux/psrwlock.h:73:
+#define WS_LOCK_MUTEX		(1U << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#172: FILE: include/linux/psrwlock.h:75:
+#define WS_MAX			(1U << 29)

CHECK:BIT_MACRO: Prefer using the BIT macro
#173: FILE: include/linux/psrwlock.h:76:
+#define WS_OFFSET		(1U << 3)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: include/linux/psrwlock.h:79:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#183: FILE: include/linux/psrwlock.h:86:
+#define CTX_WOFFSET		(1UL << 0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#184: FILE: include/linux/psrwlock.h:87:
+#define CTX_WMAX		(1UL << (BITS_PER_LONG/2))
                 		                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#188: FILE: include/linux/psrwlock.h:91:
+#define CTX_RMAX		(1UL << (BITS_PER_LONG/2))
                 		                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: include/linux/psrwlock.h:94:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/psrwlock.h:197:
+static inline void psrwlock_preempt_check(unsigned int uc,
+		psrwlock_t *rwlock)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: include/linux/psrwlock.h:203:
+
+

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#308: FILE: include/linux/psrwlock.h:211:
+ * many readers, from irq/softirq/non preemptable and preemptable thread
                                       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#308: FILE: include/linux/psrwlock.h:211:
+ * many readers, from irq/softirq/non preemptable and preemptable thread
                                                       ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: include/linux/psrwlock.h:228:
+	unsigned int uc = atomic_sub_return(UC_READER_OFFSET, &rwlock->uc);
+	psrwlock_preempt_check(uc, rwlock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: include/linux/psrwlock.h:237:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: include/linux/psrwlock.h:245:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: include/linux/psrwlock.h:257:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: include/linux/psrwlock.h:265:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: include/linux/psrwlock.h:270:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: include/linux/psrwlock.h:278:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: include/linux/psrwlock.h:286:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#388: FILE: include/linux/psrwlock.h:291:
+
+

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#390: FILE: include/linux/psrwlock.h:293:
+ * Called from preemptable thread context.
                ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: include/linux/psrwlock.h:299:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: include/linux/psrwlock.h:307:
+	unsigned int uc = atomic_cmpxchg(&rwlock->uc, 0, UC_READER_OFFSET);
+	if (likely(!uc))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: include/linux/psrwlock.h:312:
+
+

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#417: FILE: include/linux/psrwlock.h:320:
+ * preemptable context and non-preemptable context. The writer lock is taken in
    ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#418: FILE: include/linux/psrwlock.h:321:
+ * preemptable context.
    ^^^^^^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#437: FILE: include/linux/psrwlock.h:340:
+		return;
+	else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#501: FILE: lib/psrwlock.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#518: FILE: lib/psrwlock.c:18:
+#include <asm/processor.h>

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#527: FILE: lib/psrwlock.c:27:
+	PSRW_PREEMPT,		/* preemptable */
 	             		   ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: lib/psrwlock.c:42:
+static void rwlock_wait(void *vptr, psrwlock_t *rwlock,
+		unsigned long mask, unsigned long test_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: lib/psrwlock.c:53:
+static int _pswrite_lock_ctx_wait_sub(void *v_inout,
+		void *vptr, psrwlock_t *rwlock,

WARNING:SPLIT_STRING: quoted string split across lines
#569: FILE: lib/psrwlock.c:69:
+	printk_dbg("wait sub start v %lX, new %lX, wait_mask %lX, "
+		"test_mask %lX, full_mask %lX, offset %lX\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#576: FILE: lib/psrwlock.c:76:
+			if (ptype == PSRW_PREEMPT && unlikely(!(--try))) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: lib/psrwlock.c:78:
+				rwlock_wait(vptr, rwlock, wait_mask,
+					test_mask, full_mask, 1,

CHECK:BRACES: Unbalanced braces around else statement
#581: FILE: lib/psrwlock.c:81:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: lib/psrwlock.c:91:
+			newv = atomic_long_cmpxchg((atomic_long_t *)vptr,
+				v, v + offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: lib/psrwlock.c:94:
+			newv = atomic_cmpxchg((atomic_t *)vptr,
+				(int)v, (int)v + (int)offset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#595: FILE: lib/psrwlock.c:95:
+		if (likely(newv == v))
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#597: FILE: lib/psrwlock.c:97:
+			break;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#597: FILE: lib/psrwlock.c:97:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#604: FILE: lib/psrwlock.c:104:
+	printk_dbg("wait sub end v %lX, new %lX, wait_mask %lX, "
+		"test_mask %lX, full_mask %lX, offset %lX\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: lib/psrwlock.c:116:
+static int _pswrite_lock_ctx_wait(unsigned long v_in, void *vptr,
+		psrwlock_t *rwlock, unsigned long wait_mask,

CHECK:BRACES: braces {} should be used on all arms of this statement
#627: FILE: lib/psrwlock.c:127:
+		if (ptype == PSRW_PREEMPT && unlikely(!(--try))) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: lib/psrwlock.c:131:
+			rwlock_wait(vptr, rwlock, wait_mask, 0, 0, 0, vtype,
+				ltype);

CHECK:BRACES: Unbalanced braces around else statement
#633: FILE: lib/psrwlock.c:133:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: lib/psrwlock.c:153:
+static void rwlock_wait(void *vptr, psrwlock_t *rwlock,
+		unsigned long mask, unsigned long test_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: lib/psrwlock.c:167:
+	_pswrite_lock_ctx_wait_sub(&ws, &rwlock->ws, rwlock,
+		0, WS_WQ_MUTEX, WS_WQ_MUTEX, WS_WQ_MUTEX,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#673: FILE: lib/psrwlock.c:173:
+	wq_active = waitqueue_active(&rwlock->wq_read)
+			|| waitqueue_active(&rwlock->wq_write);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#673: FILE: lib/psrwlock.c:173:
+			|| waitqueue_active(&rwlock->wq_write);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#688: FILE: lib/psrwlock.c:188:
+	if (unlikely(!(v & mask || (check_full_mask
+			&& (v & test_mask) >= full_mask))))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: lib/psrwlock.c:195:
+		add_wait_queue_exclusive_locked(&rwlock->wq_write,
+			&psrwlock_wq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: lib/psrwlock.c:212:
+	_pswrite_lock_ctx_wait_sub(&ws, &rwlock->ws, rwlock,
+		0, WS_WQ_MUTEX, WS_WQ_MUTEX, WS_WQ_MUTEX,

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#720: FILE: lib/psrwlock.c:220:
+	wq_active = waitqueue_active(&rwlock->wq_read)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#721: FILE: lib/psrwlock.c:221:
+	wq_active = waitqueue_active(&rwlock->wq_read)
+			|| waitqueue_active(&rwlock->wq_write);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#721: FILE: lib/psrwlock.c:221:
+			|| waitqueue_active(&rwlock->wq_write);

WARNING:TYPO_SPELLING: 'concurency' may be misspelled - perhaps 'concurrency'?
#744: FILE: lib/psrwlock.c:244:
+ * spin if there is concurency to win the cmpxchg. It could happen if, for
                     ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: lib/psrwlock.c:255:
+static int _psread_lock_fast_check(unsigned int uc, psrwlock_t *rwlock,
+	unsigned int uc_rmask)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#763: FILE: lib/psrwlock.c:263:
+	while (likely(!(uc & (UC_SLOW_WRITER | UC_WRITER))
+			&& (uc & UC_READER_MASK) < uc_rmask)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#767: FILE: lib/psrwlock.c:267:
+			return 1;
+		else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: lib/psrwlock.c:274:
+int __psread_lock_slow(psrwlock_t *rwlock,
+		unsigned int uc_rmask, atomic_long_t *vptr,

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#787: FILE: lib/psrwlock.c:287:
+	else if (in_atomic())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#789: FILE: lib/psrwlock.c:289:
+		WARN_ON_ONCE(!(rctx & PSR_NPTHREAD)
+			|| ptype != PSRW_NON_PREEMPT);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#795: FILE: lib/psrwlock.c:295:
+		WARN_ON_ONCE((!(rctx & PSR_NPTHREAD)
+				|| ptype != PSRW_NON_PREEMPT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#796: FILE: lib/psrwlock.c:296:
+				|| ptype != PSRW_NON_PREEMPT)
+				&& (!(rctx & PSR_PTHREAD)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#797: FILE: lib/psrwlock.c:297:
+				&& (!(rctx & PSR_PTHREAD)
+				|| ptype != PSRW_PREEMPT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: lib/psrwlock.c:305:
+	ret = _pswrite_lock_ctx_wait_sub(&v, vptr, rwlock,
+		CTX_WMASK, CTX_RMASK, CTX_RMASK, CTX_ROFFSET,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: lib/psrwlock.c:330:
+	ret = _pswrite_lock_ctx_wait_sub(&uc, &rwlock->uc, rwlock,
+		UC_WRITER, UC_READER_MASK, uc_rmask, UC_READER_OFFSET,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#856: FILE: lib/psrwlock.c:356:
+
+}

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#863: FILE: lib/psrwlock.c:363:
+ * Preemptable :
    ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: lib/psrwlock.c:381:
+	__psread_lock_slow(rwlock, UC_HARDIRQ_READER_MASK,
+			&rwlock->prio[PSRW_PRIO_IRQ],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: lib/psrwlock.c:395:
+	__psread_lock_slow(rwlock, UC_SOFTIRQ_READER_MASK,
+			&rwlock->prio[PSRW_PRIO_BH],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: lib/psrwlock.c:409:
+	__psread_lock_slow(rwlock, UC_NPTHREAD_READER_MASK,
+			&rwlock->prio[PSRW_PRIO_NP],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: lib/psrwlock.c:423:
+	__psread_lock_slow(rwlock, UC_PTHREAD_READER_MASK,
+			&rwlock->prio[PSRW_PRIO_P],

CHECK:LINE_SPACING: Please don't use multiple blank lines
#984: FILE: lib/psrwlock.c:484:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: lib/psrwlock.c:488:
+static int _pswrite_lock_out_context(unsigned int *uc_inout,
+	atomic_long_t *vptr, psrwlock_t *rwlock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: lib/psrwlock.c:497:
+	ret = _pswrite_lock_ctx_wait_sub(&v, vptr, rwlock,
+		0, CTX_WMASK, CTX_WMASK, CTX_WOFFSET,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: lib/psrwlock.c:506:
+	ret = _pswrite_lock_ctx_wait(v, vptr, rwlock,
+		CTX_RMASK, V_LONG, PSRW_WRITE, ptype, trylock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: lib/psrwlock.c:512:
+	ret = _pswrite_lock_ctx_wait(*uc_inout, &rwlock->uc, rwlock,
+		UC_WRITER | UC_READER_MASK,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: lib/psrwlock.c:524:
+static void writer_count_inc(unsigned int *uc, psrwlock_t *rwlock,
+		enum preempt_type ptype)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1034: FILE: lib/psrwlock.c:534:
+	_pswrite_lock_ctx_wait_sub(&ws, &rwlock->ws, rwlock,
+		WS_COUNT_MUTEX, WS_MASK, WS_MASK,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: lib/psrwlock.c:547:
+static void writer_count_dec(unsigned int *uc, psrwlock_t *rwlock,
+		enum preempt_type ptype)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: lib/psrwlock.c:557:
+	_pswrite_lock_ctx_wait_sub(&ws, &rwlock->ws, rwlock,
+		WS_COUNT_MUTEX, WS_COUNT_MUTEX, WS_COUNT_MUTEX,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: lib/psrwlock.c:570:
+static int __pswrite_lock_slow(unsigned int uc, psrwlock_t *rwlock,
+		int trylock)

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#1086: FILE: lib/psrwlock.c:586:
+		WARN_ON_ONCE(!in_atomic());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: lib/psrwlock.c:605:
+		ret = _pswrite_lock_out_context(&uc,
+			&rwlock->prio[PSRW_PRIO_P], rwlock, ptype, trylock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1118: FILE: lib/psrwlock.c:618:
+		ret = _pswrite_lock_out_context(&uc,
+			&rwlock->prio[PSRW_PRIO_NP], rwlock, ptype, trylock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1129: FILE: lib/psrwlock.c:629:
+		ret = _pswrite_lock_out_context(&uc,
+			&rwlock->prio[PSRW_PRIO_BH], rwlock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1141: FILE: lib/psrwlock.c:641:
+		ret = _pswrite_lock_out_context(&uc,
+			&rwlock->prio[PSRW_PRIO_IRQ], rwlock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1156: FILE: lib/psrwlock.c:656:
+	ret = _pswrite_lock_ctx_wait_sub(&ws, &rwlock->ws, rwlock,
+		0, WS_LOCK_MUTEX, WS_LOCK_MUTEX, WS_LOCK_MUTEX,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: lib/psrwlock.c:746:
+			atomic_long_sub(CTX_WOFFSET,
+				&rwlock->prio[PSRW_PRIO_IRQ]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: lib/psrwlock.c:752:
+			atomic_long_sub(CTX_WOFFSET,
+				&rwlock->prio[PSRW_PRIO_BH]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1258: FILE: lib/psrwlock.c:758:
+			atomic_long_sub(CTX_WOFFSET,
+				&rwlock->prio[PSRW_PRIO_NP]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1264: FILE: lib/psrwlock.c:764:
+			atomic_long_sub(CTX_WOFFSET,
+				&rwlock->prio[PSRW_PRIO_P]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1296: FILE: lib/psrwlock.c:796:
+	_pswrite_lock_ctx_wait_sub(&ws, &rwlock->ws, rwlock,
+		0, WS_WQ_MUTEX, WS_WQ_MUTEX, WS_WQ_MUTEX,

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1301: FILE: lib/psrwlock.c:801:
+	 * its critical section which excludes any preemptable context anyway.
 	                                           ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1302: FILE: lib/psrwlock.c:802:
+	 * The same applies to preemptable readers, which are the only ones
 	                       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1303: FILE: lib/psrwlock.c:803:
+	 * which can cause a preemptable writer to sleep.
 	                     ^^^^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1310: FILE: lib/psrwlock.c:810:
+	if (!(uc & UC_WQ_ACTIVE) || uc & UC_READER_MASK
+			|| (atomic_long_read(&rwlock->prio[PSRW_PRIO_IRQ])

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1312: FILE: lib/psrwlock.c:812:
+				& CTX_WMASK)
+			|| (atomic_long_read(&rwlock->prio[PSRW_PRIO_BH])

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1314: FILE: lib/psrwlock.c:814:
+				& CTX_WMASK)
+			|| (atomic_long_read(&rwlock->prio[PSRW_PRIO_NP])

WARNING:MEMORY_BARRIER: memory barrier without comment
#1316: FILE: lib/psrwlock.c:816:
+		smp_mb();	/*

WARNING:MEMORY_BARRIER: memory barrier without comment
#1333: FILE: lib/psrwlock.c:833:
+	smp_mb();	/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1359: FILE: include/linux/psrwlock-types.h:1:
+#ifndef _LINUX_PSRWLOCK_TYPES_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1370: FILE: include/linux/psrwlock-types.h:12:
+#include <asm/atomic.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#1409: FILE: include/linux/psrwlock-types.h:51:
+#define PSR_PTHREAD	(1U << PSRW_PRIO_P)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1410: FILE: include/linux/psrwlock-types.h:52:
+#define PSR_NPTHREAD	(1U << PSRW_PRIO_NP)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1411: FILE: include/linux/psrwlock-types.h:53:
+#define PSR_BH		(1U << PSRW_PRIO_BH)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1412: FILE: include/linux/psrwlock-types.h:54:
+#define PSR_IRQ		(1U << PSRW_PRIO_IRQ)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1416: FILE: include/linux/psrwlock-types.h:58:
+typedef struct psrwlock {

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#1422: FILE: include/linux/psrwlock-types.h:64:
+	wait_queue_head_t wq_read;	/* Preemptable readers wait queue */
 	                          	   ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#1423: FILE: include/linux/psrwlock-types.h:65:
+	wait_queue_head_t wq_write;	/* Preemptable writers wait queue */
 	                           	   ^^^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1426: FILE: include/linux/psrwlock-types.h:68:
+#define __PSRWLOCK_UNLOCKED(x, _wctx, _rctx)				\
+	{								\
+		.uc = { 0 },						\
+		.ws = { 0 },						\
+		.prio[0 ... (PSRW_NR_PRIO - 1)] = { 0 },		\
+		.rctx_bitmap = (_rctx),					\
+		.wctx = (_wctx),					\
+		.wq_read = __WAIT_QUEUE_HEAD_INITIALIZER((x).wq_read),	\
+		.wq_write = __WAIT_QUEUE_HEAD_INITIALIZER((x).wq_write),\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1437: FILE: include/linux/psrwlock-types.h:79:
+#define DEFINE_PSRWLOCK(x, wctx, rctx)					\
+	psrwlock_t x = __PSRWLOCK_UNLOCKED(x, wctx, rctx)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 43 warnings, 84 checks, 1333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
