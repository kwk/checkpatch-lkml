WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
 - Background write-out: memory.dirty_background_ratio, memory.dirty_background_bytes

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#82: FILE: include/linux/memcontrol.h:54:
+	MEM_CGROUP_STAT_SOFTLIMIT, /* decrements on each page in/out.
+					used by soft limit implementation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#82: FILE: include/linux/memcontrol.h:54:
+					used by soft limit implementation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#84: FILE: include/linux/memcontrol.h:56:
+	MEM_CGROUP_STAT_THRESHOLDS, /* decrements on each page in/out.
+					used by threshold implementation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#84: FILE: include/linux/memcontrol.h:56:
+					used by threshold implementation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#88: FILE: include/linux/memcontrol.h:60:
+	MEM_CGROUP_STAT_WRITEBACK_TEMP,   /* # of pages under writeback using
+						temporary buffers */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#88: FILE: include/linux/memcontrol.h:60:
+						temporary buffers */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/memcontrol.h:158:
+extern long mem_cgroup_dirty_ratio(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/memcontrol.h:159:
+extern unsigned long mem_cgroup_dirty_bytes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/memcontrol.h:160:
+extern long mem_cgroup_dirty_background_ratio(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/memcontrol.h:161:
+extern unsigned long mem_cgroup_dirty_background_bytes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/memcontrol.h:163:
+extern s64 mem_cgroup_page_stat(enum mem_cgroup_page_stat_item item);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/memcontrol.h:174:
+void mem_cgroup_update_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/memcontrol.h:350:
+static inline void mem_cgroup_update_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: mm/memcontrol.c:1022:
+static unsigned long get_dirty_param(struct mem_cgroup *memcg,
+			enum mem_cgroup_dirty_param idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: mm/memcontrol.c:1112:
+static s64 mem_cgroup_get_local_page_stat(struct mem_cgroup *memcg,
+				enum mem_cgroup_page_stat_item item)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: mm/memcontrol.c:1131:
+			mem_cgroup_read_stat(memcg,
+					MEM_CGROUP_STAT_UNSTABLE_NFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: mm/memcontrol.c:1139:
+			mem_cgroup_read_stat(memcg,
+				MEM_CGROUP_STAT_UNSTABLE_NFS);

CHECK:BRACES: braces {} should be used on all arms of this statement
#380: FILE: mm/memcontrol.c:1165:
+	if (memcg) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'evaulate' may be misspelled - perhaps 'evaluate'?
#382: FILE: mm/memcontrol.c:1167:
+		 * Recursively evaulate page statistics against all cgroup
 		               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#387: FILE: mm/memcontrol.c:1172:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: mm/memcontrol.c:1424:
+void mem_cgroup_update_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int val)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#482: FILE: mm/memcontrol.c:3658:
+	if (cgrp->parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == MEM_CGROUP_DIRTY_RATIO'
#484: FILE: mm/memcontrol.c:3660:
+	if (((type == MEM_CGROUP_DIRTY_RATIO) ||
+		(type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO)) && (val > 100))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO'
#484: FILE: mm/memcontrol.c:3660:
+	if (((type == MEM_CGROUP_DIRTY_RATIO) ||
+		(type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO)) && (val > 100))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val > 100'
#484: FILE: mm/memcontrol.c:3660:
+	if (((type == MEM_CGROUP_DIRTY_RATIO) ||
+		(type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO)) && (val > 100))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/memcontrol.c:3661:
+	if (((type == MEM_CGROUP_DIRTY_RATIO) ||
+		(type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO)) && (val > 100))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005721.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 19 checks, 537 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005721.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
