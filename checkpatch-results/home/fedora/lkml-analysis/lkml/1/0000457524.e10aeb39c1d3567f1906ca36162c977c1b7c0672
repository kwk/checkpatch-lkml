WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
A novel design which incorporates a foreground-background descending priority

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#401: FILE: kernel/sched.c:89:
+#define SCHED_PRIO(p)		((p)+MAX_RT_PRIO)
                      		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#413: FILE: kernel/sched.c:98:
+#define TASK_PREEMPTS_CURR(p, curr) \
+	(((p)->prio < (curr)->prio) || (((p)->prio == (curr)->prio) && \
+		((p)->static_prio < (curr)->static_prio && \
+			((curr)->static_prio > (curr)->prio)) && \
+				!rt_task(p)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'curr' - possible side-effects?
#413: FILE: kernel/sched.c:98:
+#define TASK_PREEMPTS_CURR(p, curr) \
+	(((p)->prio < (curr)->prio) || (((p)->prio == (curr)->prio) && \
+		((p)->static_prio < (curr)->static_prio && \
+			((curr)->static_prio > (curr)->prio)) && \
+				!rt_task(p)))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#696: FILE: kernel/sched.c:715:
+	p->prio = p->normal_prio = p->static_prio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#723: FILE: kernel/sched.c:739:
+	if (p->rotation == rq->prio_rotation) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#724: FILE: kernel/sched.c:740:
+		if (p->array == array) {
[...]
+		} else if (p->array == rq->expired) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#730: FILE: kernel/sched.c:746:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#730: FILE: kernel/sched.c:746:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#732: FILE: kernel/sched.c:748:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: kernel/sched.c:761:
+	queue_prio = SCHED_PRIO(find_next_zero_bit(p->bitmap, PRIO_RANGE,
+		     USER_PRIO(search_prio)));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#751: FILE: kernel/sched.c:767:
+	p->prio = p->normal_prio = queue_prio;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#839: FILE: kernel/sched.c:839:
+	slice = rr = p->quota;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#907: FILE: kernel/sched.c:920:
+		return MAX_RT_PRIO-1 - p->rt_priority;
 		                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1115: FILE: kernel/sched.c:1402:
+#define rq_idle(rq)	((rq)->curr == (rq)->idle && !rt_task((rq)->curr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1117: FILE: kernel/sched.c:1404:
+#define rq_idle(rq)	((rq)->curr == (rq)->idle)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1125: FILE: kernel/sched.c:1412:
+	return ((p->array == task_rq(p)->active &&
+		TASK_PREEMPTS_CURR(p, curr)) || rq_idle(rq));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1419: FILE: kernel/sched.c:2177:
+		idx = find_next_bit(busiest->dyn_bitmap, MAX_DYN_PRIO,
+		      test_idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1593: FILE: kernel/sched.c:3351:
+		new_prio_level = find_next_bit(rq->static_bitmap, MAX_PRIO,
+				 MAX_RT_PRIO);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1596: FILE: kernel/sched.c:3354:
+			list_splice_tail_init(array->queue + rq->prio_level,
+					 new_queue->queue + new_prio_level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1607: FILE: kernel/sched.c:3364:
+			list_splice_tail_init(array->queue + rq->prio_level,
+					 array->queue + new_prio_level);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1716: FILE: kernel/sched.c:3481:
+	static int bitmap_error = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1721: FILE: kernel/sched.c:3486:
+	printk(KERN_ERR

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1734: FILE: kernel/sched.c:3499:
+			if (!test_bit(test_idx, rq->dyn_bitmap)) {
+				__set_bit(test_idx, rq->dyn_bitmap);
+			}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1741: FILE: kernel/sched.c:3506:
+	BUG_ON(idx == MAX_DYN_PRIO);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1788: FILE: kernel/sched.c:3551:
+	if (next->rotation != rq->prio_rotation) {
[...]
+			task_new_array(next, rq);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1793: FILE: kernel/sched.c:3556:
+	} else if (!test_bit(USER_PRIO(idx), next->bitmap)) {
[...]
+			set_task_entitlement(next);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1864: FILE: kernel/sched.c:3643:
+	if (!rt_prio(idx))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1866: FILE: kernel/sched.c:3645:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1925: FILE: kernel/sched.c:4102:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#1948: FILE: kernel/sched.c:4116:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1959: FILE: kernel/sched.c:4126:
+	int queued, old_prio,delta;
 	                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1970: FILE: kernel/sched.c:4147:
+	if ((queued = task_queued(p))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2000: FILE: kernel/sched.c:4282:
+	BUG_ON(task_queued(p));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2031: FILE: kernel/sched.c:4377:
+	if ((queued = task_queued(p)))

CHECK:BRACES: Unbalanced braces around else statement
#2046: FILE: kernel/sched.c:4391:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2108: FILE: kernel/sched.c:5019:
+	idle->prio = idle->normal_prio = NICE_TO_PRIO(0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2156: FILE: kernel/sched.c:7097:
 		for (j = 0; j < 2; j++) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2193: FILE: kernel/sched.c:7178:
+		if ((queued = task_queued(p)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000457524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 8 warnings, 25 checks, 1829 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000457524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
