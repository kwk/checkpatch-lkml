CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/linux/libfs.h:7:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#323: FILE: include/linux/libfs.h:7:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#323: FILE: include/linux/libfs.h:7:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct tree_descr *' should also have an identifier name
#323: FILE: include/linux/libfs.h:7:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/libfs.h:8:
+extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#324: FILE: include/linux/libfs.h:8:
+extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/linux/libfs.h:9:
+extern void simple_release_fs(struct vfsmount **mount, int *count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: include/linux/libfs.h:48:
+char *simple_transaction_get(struct file *file, const char __user *buf,
+				size_t size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: include/linux/libfs.h:57:
+	BUG_ON(n > SIMPLE_TRANSACTION_LIMIT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__fmt' - possible side-effects?
#383: FILE: include/linux/libfs.h:83:
+#define __DEFINE_SIMPLE_ATTRIBUTE(__static, __fops, __get, __set, __fmt)\
+static int __fops ## _open(struct inode *inode, struct file *file)	\
+{									\
+	__simple_attr_check_format(__fmt, 0ull);			\
+	return simple_attr_open(inode, file, __get, __set, __fmt);	\
+}									\
+__static const struct file_operations __fops = {			\
+	.owner	 = THIS_MODULE,						\
+	.open	 = __fops ## _open,					\
+	.release = simple_attr_release,					\
+	.read	 = simple_attr_read,					\
+	.write	 = simple_attr_write,					\
+}

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#400: FILE: include/linux/libfs.h:100:
+#define DEFINE_SIMPLE_EXPORTED_ATTRIBUTE(__fops, __get, __set, __fmt)	\
+	__DEFINE_SIMPLE_ATTRIBUTE(/**/, __fops, __get, __set, __fmt);	\
+	EXPORT_SYMBOL_GPL(__fops)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__fops' - possible side-effects?
#400: FILE: include/linux/libfs.h:100:
+#define DEFINE_SIMPLE_EXPORTED_ATTRIBUTE(__fops, __get, __set, __fmt)	\
+	__DEFINE_SIMPLE_ATTRIBUTE(/**/, __fops, __get, __set, __fmt);	\
+	EXPORT_SYMBOL_GPL(__fops)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#404: FILE: include/linux/libfs.h:104:
+static inline void __attribute__((format(printf, 1, 2)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 6 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
