WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Add an FS-Cache cache-backend that permits a mounted filesystem to be used as a

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#299: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#321: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#693: FILE: Documentation/filesystems/caching/cachefiles.txt:368:
+	cachefilesd.te
 	            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#814: FILE: fs/cachefiles/cf-bind.c:1:
+/* Bind and unbind a cache from the filesystem backing it

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#884: FILE: fs/cachefiles/cf-bind.c:71:
+		 * function, so we don't release it on error here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#900: FILE: fs/cachefiles/cf-bind.c:87:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#930: FILE: fs/cachefiles/cf-bind.c:117:
+	memset(&nd, 0, sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#930: FILE: fs/cachefiles/cf-bind.c:117:
+	memset(&nd, 0, sizeof(nd));
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#932: FILE: fs/cachefiles/cf-bind.c:119:
+	ret = path_lookup(cache->rootdirname, LOOKUP_DIRECTORY, &nd);
 	                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#936: FILE: fs/cachefiles/cf-bind.c:123:
+	cache->mnt = mntget(nd.mnt);
 	                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#937: FILE: fs/cachefiles/cf-bind.c:124:
+	root = dget(nd.dentry);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#938: FILE: fs/cachefiles/cf-bind.c:125:
+	path_release(&nd);
 	              ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#959: FILE: fs/cachefiles/cf-bind.c:146:
+	 * security ID of files we create */

CHECK:SPACING: No space is necessary after a cast
#989: FILE: fs/cachefiles/cf-bind.c:176:
+	       (unsigned long long) stats.f_blocks,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#990: FILE: fs/cachefiles/cf-bind.c:177:
+	       (unsigned long long) stats.f_bavail);

CHECK:SPACING: No space is necessary after a cast
#999: FILE: fs/cachefiles/cf-bind.c:186:
+	       (unsigned long long) cache->frun,

CHECK:SPACING: No space is necessary after a cast
#1000: FILE: fs/cachefiles/cf-bind.c:187:
+	       (unsigned long long) cache->fcull,

CHECK:SPACING: No space is necessary after a cast
#1001: FILE: fs/cachefiles/cf-bind.c:188:
+	       (unsigned long long) cache->fstop);

CHECK:SPACING: No space is necessary after a cast
#1010: FILE: fs/cachefiles/cf-bind.c:197:
+	       (unsigned long long) cache->brun,

CHECK:SPACING: No space is necessary after a cast
#1011: FILE: fs/cachefiles/cf-bind.c:198:
+	       (unsigned long long) cache->bcull,

CHECK:SPACING: No space is necessary after a cast
#1012: FILE: fs/cachefiles/cf-bind.c:199:
+	       (unsigned long long) cache->bstop);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1051: FILE: fs/cachefiles/cf-bind.c:238:
+	printk(KERN_INFO "CacheFiles:"

WARNING:SPLIT_STRING: quoted string split across lines
#1052: FILE: fs/cachefiles/cf-bind.c:239:
+	printk(KERN_INFO "CacheFiles:"
+	       " File cache on %s registered\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1085: FILE: fs/cachefiles/cf-bind.c:272:
+		printk(KERN_INFO "CacheFiles:"

WARNING:SPLIT_STRING: quoted string split across lines
#1086: FILE: fs/cachefiles/cf-bind.c:273:
+		printk(KERN_INFO "CacheFiles:"
+		       " File cache on %s unregistering\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1109: FILE: fs/cachefiles/cf-daemon.c:1:
+/* Daemon interface

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1183: FILE: fs/cachefiles/cf-daemon.c:75:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cache)...) over kzalloc(sizeof(struct cachefiles_cache)...)
#1202: FILE: fs/cachefiles/cf-daemon.c:94:
+	cache = kzalloc(sizeof(struct cachefiles_cache), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPLIT_STRING: quoted string split across lines
#1281: FILE: fs/cachefiles/cf-daemon.c:173:
+		     "cull=%c"
+		     " frun=%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#1282: FILE: fs/cachefiles/cf-daemon.c:174:
+		     " frun=%llx"
+		     " fcull=%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#1283: FILE: fs/cachefiles/cf-daemon.c:175:
+		     " fcull=%llx"
+		     " fstop=%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#1284: FILE: fs/cachefiles/cf-daemon.c:176:
+		     " fstop=%llx"
+		     " brun=%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#1285: FILE: fs/cachefiles/cf-daemon.c:177:
+		     " brun=%llx"
+		     " bcull=%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#1286: FILE: fs/cachefiles/cf-daemon.c:178:
+		     " bcull=%llx"
+		     " bstop=%llx",

CHECK:SPACING: No space is necessary after a cast
#1288: FILE: fs/cachefiles/cf-daemon.c:180:
+		     (unsigned long long) cache->frun,

CHECK:SPACING: No space is necessary after a cast
#1289: FILE: fs/cachefiles/cf-daemon.c:181:
+		     (unsigned long long) cache->fcull,

CHECK:SPACING: No space is necessary after a cast
#1290: FILE: fs/cachefiles/cf-daemon.c:182:
+		     (unsigned long long) cache->fstop,

CHECK:SPACING: No space is necessary after a cast
#1291: FILE: fs/cachefiles/cf-daemon.c:183:
+		     (unsigned long long) cache->brun,

CHECK:SPACING: No space is necessary after a cast
#1292: FILE: fs/cachefiles/cf-daemon.c:184:
+		     (unsigned long long) cache->bcull,

CHECK:SPACING: No space is necessary after a cast
#1293: FILE: fs/cachefiles/cf-daemon.c:185:
+		     (unsigned long long) cache->bstop

WARNING:SPLIT_STRING: quoted string split across lines
#1419: FILE: fs/cachefiles/cf-daemon.c:311:
+	kerror("Free space limits must be in range"
+	       " 0%%<=stop<cull<run<100%%");

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1437: FILE: fs/cachefiles/cf-daemon.c:329:
+	frun = simple_strtoul(args, &args, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1461: FILE: fs/cachefiles/cf-daemon.c:353:
+	fcull = simple_strtoul(args, &args, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1485: FILE: fs/cachefiles/cf-daemon.c:377:
+	fstop = simple_strtoul(args, &args, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1509: FILE: fs/cachefiles/cf-daemon.c:401:
+	brun = simple_strtoul(args, &args, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1533: FILE: fs/cachefiles/cf-daemon.c:425:
+	bcull = simple_strtoul(args, &args, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1557: FILE: fs/cachefiles/cf-daemon.c:449:
+	bstop = simple_strtoul(args, &args, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1685: FILE: fs/cachefiles/cf-daemon.c:577:
+	mask = simple_strtoul(args, &args, 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1756: FILE: fs/cachefiles/cf-daemon.c:648:
+			 unsigned fnr, unsigned bnr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1756: FILE: fs/cachefiles/cf-daemon.c:648:
+			 unsigned fnr, unsigned bnr)

CHECK:SPACING: No space is necessary after a cast
#1762: FILE: fs/cachefiles/cf-daemon.c:654:
+	       (unsigned long long) cache->frun,

CHECK:SPACING: No space is necessary after a cast
#1763: FILE: fs/cachefiles/cf-daemon.c:655:
+	       (unsigned long long) cache->fcull,

CHECK:SPACING: No space is necessary after a cast
#1764: FILE: fs/cachefiles/cf-daemon.c:656:
+	       (unsigned long long) cache->fstop,

CHECK:SPACING: No space is necessary after a cast
#1765: FILE: fs/cachefiles/cf-daemon.c:657:
+	       (unsigned long long) cache->brun,

CHECK:SPACING: No space is necessary after a cast
#1766: FILE: fs/cachefiles/cf-daemon.c:658:
+	       (unsigned long long) cache->bcull,

CHECK:SPACING: No space is necessary after a cast
#1767: FILE: fs/cachefiles/cf-daemon.c:659:
+	       (unsigned long long) cache->bstop,

CHECK:SPACING: No space is necessary after a cast
#1784: FILE: fs/cachefiles/cf-daemon.c:676:
+	       (unsigned long long) stats.f_ffree,

CHECK:SPACING: No space is necessary after a cast
#1785: FILE: fs/cachefiles/cf-daemon.c:677:
+	       (unsigned long long) stats.f_bavail);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1835: FILE: fs/cachefiles/cf-interface.c:1:
+/* FS-Cache interface to CacheFiles

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1862: FILE: fs/cachefiles/cf-interface.c:28:
+static struct fscache_object *cachefiles_alloc_object(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1870: FILE: fs/cachefiles/cf-interface.c:36:
+	unsigned keylen, auxlen;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1889: FILE: fs/cachefiles/cf-interface.c:55:
+	BUG_ON(test_bit(CACHEFILES_OBJECT_ACTIVE, &object->flags));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1941: FILE: fs/cachefiles/cf-interface.c:107:
+	BUG_ON(test_bit(CACHEFILES_OBJECT_ACTIVE, &object->flags));

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#2028: FILE: fs/cachefiles/cf-interface.c:194:
+ * update the auxilliary data for an object object on disk
               ^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#2028: FILE: fs/cachefiles/cf-interface.c:194:
+ * update the auxilliary data for an object object on disk

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2037: FILE: fs/cachefiles/cf-interface.c:203:
+	unsigned auxlen;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2114: FILE: fs/cachefiles/cf-interface.c:280:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2184: FILE: fs/cachefiles/cf-interface.c:350:
+	 * written to disc */

WARNING:SPLIT_STRING: quoted string split across lines
#2192: FILE: fs/cachefiles/cf-interface.c:358:
+				    "Attempt to sync backing fs superblock"
+				    " returned error %d",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2283: FILE: fs/cachefiles/cf-internal.h:1:
+/* General netfs cache on cache files internal defs

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2303: FILE: fs/cachefiles/cf-internal.h:21:
+extern unsigned cachefiles_debug;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2320: FILE: fs/cachefiles/cf-internal.h:38:
+	uint8_t				type;		/* object type */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2321: FILE: fs/cachefiles/cf-internal.h:39:
+	uint8_t				new;		/* T if object new */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2342: FILE: fs/cachefiles/cf-internal.h:60:
+	unsigned			frun_percent;	/* when to stop culling (% files) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2343: FILE: fs/cachefiles/cf-internal.h:61:
+	unsigned			fcull_percent;	/* when to start culling (% files) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2344: FILE: fs/cachefiles/cf-internal.h:62:
+	unsigned			fstop_percent;	/* when to stop allocating (% files) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2345: FILE: fs/cachefiles/cf-internal.h:63:
+	unsigned			brun_percent;	/* when to stop culling (% blocks) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2346: FILE: fs/cachefiles/cf-internal.h:64:
+	unsigned			bcull_percent;	/* when to start culling (% blocks) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2347: FILE: fs/cachefiles/cf-internal.h:65:
+	unsigned			bstop_percent;	/* when to stop allocating (% blocks) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2348: FILE: fs/cachefiles/cf-internal.h:66:
+	unsigned			bsize;		/* cache's block size */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2349: FILE: fs/cachefiles/cf-internal.h:67:
+	unsigned			bshift;		/* min(ilog2(PAGE_SIZE / bsize), 0) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2350: FILE: fs/cachefiles/cf-internal.h:68:
+	uint64_t			frun;		/* when to stop culling */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2351: FILE: fs/cachefiles/cf-internal.h:69:
+	uint64_t			fcull;		/* when to start culling */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2352: FILE: fs/cachefiles/cf-internal.h:70:
+	uint64_t			fstop;		/* when to stop allocating */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2391: FILE: fs/cachefiles/cf-internal.h:109:
+	uint16_t			len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2392: FILE: fs/cachefiles/cf-internal.h:110:
+	uint8_t				type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2393: FILE: fs/cachefiles/cf-internal.h:111:
+	uint8_t				data[];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2408: FILE: fs/cachefiles/cf-internal.h:126:
+extern int cachefiles_daemon_bind(struct cachefiles_cache *cache, char *args);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2409: FILE: fs/cachefiles/cf-internal.h:127:
+extern void cachefiles_daemon_unbind(struct cachefiles_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2416: FILE: fs/cachefiles/cf-internal.h:134:
+extern int cachefiles_has_space(struct cachefiles_cache *cache,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2417: FILE: fs/cachefiles/cf-internal.h:135:
+				unsigned fnr, unsigned bnr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2417: FILE: fs/cachefiles/cf-internal.h:135:
+				unsigned fnr, unsigned bnr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2427: FILE: fs/cachefiles/cf-internal.h:145:
+extern char *cachefiles_cook_key(const u8 *raw, int keylen, uint8_t type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2432: FILE: fs/cachefiles/cf-internal.h:150:
+extern int cachefiles_delete_object(struct cachefiles_cache *cache,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2434: FILE: fs/cachefiles/cf-internal.h:152:
+extern int cachefiles_walk_to_object(struct cachefiles_object *parent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2438: FILE: fs/cachefiles/cf-internal.h:156:
+extern struct dentry *cachefiles_get_directory(struct cachefiles_cache *cache,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2442: FILE: fs/cachefiles/cf-internal.h:160:
+extern int cachefiles_cull(struct cachefiles_cache *cache, struct dentry *dir,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2445: FILE: fs/cachefiles/cf-internal.h:163:
+extern int cachefiles_check_in_use(struct cachefiles_cache *cache,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2456: FILE: fs/cachefiles/cf-internal.h:174:
+extern int __init cachefiles_proc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2457: FILE: fs/cachefiles/cf-internal.h:175:
+extern void cachefiles_proc_cleanup(void);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2462: FILE: fs/cachefiles/cf-internal.h:180:
+	unsigned long jif = jiffies - start_jif;
+	if (jif >= HZ)

ERROR:SPACING: space required before the open parenthesis '('
#2469: FILE: fs/cachefiles/cf-internal.h:187:
+#define cachefiles_proc_cleanup()	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2470: FILE: fs/cachefiles/cf-internal.h:188:
+#define cachefiles_hist(hist, start_jif) do {} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2476: FILE: fs/cachefiles/cf-internal.h:194:
+extern int cachefiles_read_or_alloc_page(struct fscache_retrieval *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2478: FILE: fs/cachefiles/cf-internal.h:196:
+extern int cachefiles_read_or_alloc_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_retrieval *' should also have an identifier name
#2478: FILE: fs/cachefiles/cf-internal.h:196:
+extern int cachefiles_read_or_alloc_pages(struct fscache_retrieval *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#2478: FILE: fs/cachefiles/cf-internal.h:196:
+extern int cachefiles_read_or_alloc_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned *' should also have an identifier name
#2478: FILE: fs/cachefiles/cf-internal.h:196:
+extern int cachefiles_read_or_alloc_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2478: FILE: fs/cachefiles/cf-internal.h:196:
+extern int cachefiles_read_or_alloc_pages(struct fscache_retrieval *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#2479: FILE: fs/cachefiles/cf-internal.h:197:
+					  struct list_head *, unsigned *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2481: FILE: fs/cachefiles/cf-internal.h:199:
+extern int cachefiles_allocate_page(struct fscache_retrieval *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_retrieval *' should also have an identifier name
#2481: FILE: fs/cachefiles/cf-internal.h:199:
+extern int cachefiles_allocate_page(struct fscache_retrieval *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2481: FILE: fs/cachefiles/cf-internal.h:199:
+extern int cachefiles_allocate_page(struct fscache_retrieval *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2481: FILE: fs/cachefiles/cf-internal.h:199:
+extern int cachefiles_allocate_page(struct fscache_retrieval *, struct page *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2483: FILE: fs/cachefiles/cf-internal.h:201:
+extern int cachefiles_allocate_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_retrieval *' should also have an identifier name
#2483: FILE: fs/cachefiles/cf-internal.h:201:
+extern int cachefiles_allocate_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#2483: FILE: fs/cachefiles/cf-internal.h:201:
+extern int cachefiles_allocate_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned *' should also have an identifier name
#2483: FILE: fs/cachefiles/cf-internal.h:201:
+extern int cachefiles_allocate_pages(struct fscache_retrieval *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2483: FILE: fs/cachefiles/cf-internal.h:201:
+extern int cachefiles_allocate_pages(struct fscache_retrieval *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#2484: FILE: fs/cachefiles/cf-internal.h:202:
+				     struct list_head *, unsigned *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2485: FILE: fs/cachefiles/cf-internal.h:203:
+extern int cachefiles_write_page(struct fscache_storage *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_storage *' should also have an identifier name
#2485: FILE: fs/cachefiles/cf-internal.h:203:
+extern int cachefiles_write_page(struct fscache_storage *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2485: FILE: fs/cachefiles/cf-internal.h:203:
+extern int cachefiles_write_page(struct fscache_storage *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2486: FILE: fs/cachefiles/cf-internal.h:204:
+extern void cachefiles_uncache_page(struct fscache_object *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#2486: FILE: fs/cachefiles/cf-internal.h:204:
+extern void cachefiles_uncache_page(struct fscache_object *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2486: FILE: fs/cachefiles/cf-internal.h:204:
+extern void cachefiles_uncache_page(struct fscache_object *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2491: FILE: fs/cachefiles/cf-internal.h:209:
+extern int cachefiles_get_security_ID(struct cachefiles_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2492: FILE: fs/cachefiles/cf-internal.h:210:
+extern int cachefiles_determine_cache_secid(struct cachefiles_cache *cache,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2510: FILE: fs/cachefiles/cf-internal.h:228:
+extern int cachefiles_check_object_type(struct cachefiles_object *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2511: FILE: fs/cachefiles/cf-internal.h:229:
+extern int cachefiles_set_object_xattr(struct cachefiles_object *object,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2513: FILE: fs/cachefiles/cf-internal.h:231:
+extern int cachefiles_update_object_xattr(struct cachefiles_object *object,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2515: FILE: fs/cachefiles/cf-internal.h:233:
+extern int cachefiles_check_object_xattr(struct cachefiles_object *object,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2517: FILE: fs/cachefiles/cf-internal.h:235:
+extern int cachefiles_remove_object_xattr(struct cachefiles_cache *cache,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2520: FILE: fs/cachefiles/cf-internal.h:238:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2524: FILE: fs/cachefiles/cf-internal.h:242:
+#define kerror(FMT,...) printk(KERN_ERR "CacheFiles: "FMT"\n" ,##__VA_ARGS__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2524: FILE: fs/cachefiles/cf-internal.h:242:
+#define kerror(FMT,...) printk(KERN_ERR "CacheFiles: "FMT"\n" ,##__VA_ARGS__);
                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2524: FILE: fs/cachefiles/cf-internal.h:242:
+#define kerror(FMT,...) printk(KERN_ERR "CacheFiles: "FMT"\n" ,##__VA_ARGS__);
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2524: FILE: fs/cachefiles/cf-internal.h:242:
+#define kerror(FMT,...) printk(KERN_ERR "CacheFiles: "FMT"\n" ,##__VA_ARGS__);
                                                               ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2524: FILE: fs/cachefiles/cf-internal.h:242:
+#define kerror(FMT,...) printk(KERN_ERR "CacheFiles: "FMT"\n" ,##__VA_ARGS__);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2524: FILE: fs/cachefiles/cf-internal.h:242:
+#define kerror(FMT,...) printk(KERN_ERR "CacheFiles: "FMT"\n" ,##__VA_ARGS__);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:MACRO_ARG_REUSE: Macro argument reuse '___cache' - possible side-effects?
#2526: FILE: fs/cachefiles/cf-internal.h:244:
+#define cachefiles_io_error(___cache, FMT, ...)		\
+do {							\
+	kerror("I/O Error: " FMT ,##__VA_ARGS__);	\
+	fscache_io_error(&(___cache)->cache);		\
+	set_bit(CACHEFILES_DEAD, &(___cache)->flags);	\
+} while(0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2528: FILE: fs/cachefiles/cf-internal.h:246:
+	kerror("I/O Error: " FMT ,##__VA_ARGS__);	\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2528: FILE: fs/cachefiles/cf-internal.h:246:
+	kerror("I/O Error: " FMT ,##__VA_ARGS__);	\
 	                         ^

ERROR:SPACING: space required before the open parenthesis '('
#2531: FILE: fs/cachefiles/cf-internal.h:249:
+} while(0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2539: FILE: fs/cachefiles/cf-internal.h:257:
+	cachefiles_io_error(___cache, FMT ,##__VA_ARGS__);		\
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2539: FILE: fs/cachefiles/cf-internal.h:257:
+	cachefiles_io_error(___cache, FMT ,##__VA_ARGS__);		\
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#2540: FILE: fs/cachefiles/cf-internal.h:258:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2542: FILE: fs/cachefiles/cf-internal.h:260:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2546: FILE: fs/cachefiles/cf-internal.h:264:
+#define dbgprintk(FMT,...) \
                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2547: FILE: fs/cachefiles/cf-internal.h:265:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2547: FILE: fs/cachefiles/cf-internal.h:265:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)
 	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2547: FILE: fs/cachefiles/cf-internal.h:265:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2547: FILE: fs/cachefiles/cf-internal.h:265:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)
 	                                        ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2547: FILE: fs/cachefiles/cf-internal.h:265:
+	printk("[%-6.6s] "FMT"\n",current->comm ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2551: FILE: fs/cachefiles/cf-internal.h:269:
+	__attribute__((format(printf,1,2)));
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2551: FILE: fs/cachefiles/cf-internal.h:269:
+	__attribute__((format(printf,1,2)));
 	                              ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1,2) over __attribute__((format(printf,1,2)))
#2551: FILE: fs/cachefiles/cf-internal.h:269:
+	__attribute__((format(printf,1,2)));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2556: FILE: fs/cachefiles/cf-internal.h:274:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2556: FILE: fs/cachefiles/cf-internal.h:274:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2556: FILE: fs/cachefiles/cf-internal.h:274:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2556: FILE: fs/cachefiles/cf-internal.h:274:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2556: FILE: fs/cachefiles/cf-internal.h:274:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2556: FILE: fs/cachefiles/cf-internal.h:274:
+#define kenter(FMT,...)	dbgprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2557: FILE: fs/cachefiles/cf-internal.h:275:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2557: FILE: fs/cachefiles/cf-internal.h:275:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2557: FILE: fs/cachefiles/cf-internal.h:275:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2557: FILE: fs/cachefiles/cf-internal.h:275:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2557: FILE: fs/cachefiles/cf-internal.h:275:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2557: FILE: fs/cachefiles/cf-internal.h:275:
+#define kleave(FMT,...)	dbgprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2558: FILE: fs/cachefiles/cf-internal.h:276:
+#define kdebug(FMT,...)	dbgprintk(FMT ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2558: FILE: fs/cachefiles/cf-internal.h:276:
+#define kdebug(FMT,...)	dbgprintk(FMT ,##__VA_ARGS__)
                        	              ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2558: FILE: fs/cachefiles/cf-internal.h:276:
+#define kdebug(FMT,...)	dbgprintk(FMT ,##__VA_ARGS__)
                        	              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2560: FILE: fs/cachefiles/cf-internal.h:278:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2562: FILE: fs/cachefiles/cf-internal.h:280:
+#define _enter(FMT,...)	kenter(FMT,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2562: FILE: fs/cachefiles/cf-internal.h:280:
+#define _enter(FMT,...)	kenter(FMT,##__VA_ARGS__)
                        	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2563: FILE: fs/cachefiles/cf-internal.h:281:
+#define _leave(FMT,...)	kleave(FMT,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2563: FILE: fs/cachefiles/cf-internal.h:281:
+#define _leave(FMT,...)	kleave(FMT,##__VA_ARGS__)
                        	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2564: FILE: fs/cachefiles/cf-internal.h:282:
+#define _debug(FMT,...)	kdebug(FMT,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2564: FILE: fs/cachefiles/cf-internal.h:282:
+#define _debug(FMT,...)	kdebug(FMT,##__VA_ARGS__)
                        	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2567: FILE: fs/cachefiles/cf-internal.h:285:
+#define _enter(FMT,...)					\
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2570: FILE: fs/cachefiles/cf-internal.h:288:
+		kenter(FMT,##__VA_ARGS__);		\
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2573: FILE: fs/cachefiles/cf-internal.h:291:
+#define _leave(FMT,...)					\
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2576: FILE: fs/cachefiles/cf-internal.h:294:
+		kleave(FMT,##__VA_ARGS__);		\
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2579: FILE: fs/cachefiles/cf-internal.h:297:
+#define _debug(FMT,...)					\
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2582: FILE: fs/cachefiles/cf-internal.h:300:
+		kdebug(FMT,##__VA_ARGS__);		\
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2586: FILE: fs/cachefiles/cf-internal.h:304:
+#define _enter(FMT,...)	_dbprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2586: FILE: fs/cachefiles/cf-internal.h:304:
+#define _enter(FMT,...)	_dbprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2586: FILE: fs/cachefiles/cf-internal.h:304:
+#define _enter(FMT,...)	_dbprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2586: FILE: fs/cachefiles/cf-internal.h:304:
+#define _enter(FMT,...)	_dbprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2586: FILE: fs/cachefiles/cf-internal.h:304:
+#define _enter(FMT,...)	_dbprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2586: FILE: fs/cachefiles/cf-internal.h:304:
+#define _enter(FMT,...)	_dbprintk("==> %s("FMT")",__FUNCTION__ ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2587: FILE: fs/cachefiles/cf-internal.h:305:
+#define _leave(FMT,...)	_dbprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2587: FILE: fs/cachefiles/cf-internal.h:305:
+#define _leave(FMT,...)	_dbprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2587: FILE: fs/cachefiles/cf-internal.h:305:
+#define _leave(FMT,...)	_dbprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2587: FILE: fs/cachefiles/cf-internal.h:305:
+#define _leave(FMT,...)	_dbprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)
                        	                                       ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2587: FILE: fs/cachefiles/cf-internal.h:305:
+#define _leave(FMT,...)	_dbprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2587: FILE: fs/cachefiles/cf-internal.h:305:
+#define _leave(FMT,...)	_dbprintk("<== %s()"FMT"",__FUNCTION__ ,##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2588: FILE: fs/cachefiles/cf-internal.h:306:
+#define _debug(FMT,...)	_dbprintk(FMT ,##__VA_ARGS__)
                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2588: FILE: fs/cachefiles/cf-internal.h:306:
+#define _debug(FMT,...)	_dbprintk(FMT ,##__VA_ARGS__)
                        	              ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2588: FILE: fs/cachefiles/cf-internal.h:306:
+#define _debug(FMT,...)	_dbprintk(FMT ,##__VA_ARGS__)
                        	              ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#2591: FILE: fs/cachefiles/cf-internal.h:309:
+#if 1 // defined(__KDEBUGALL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2596: FILE: fs/cachefiles/cf-internal.h:314:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2597: FILE: fs/cachefiles/cf-internal.h:315:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2598: FILE: fs/cachefiles/cf-internal.h:316:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2600: FILE: fs/cachefiles/cf-internal.h:318:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#2602: FILE: fs/cachefiles/cf-internal.h:320:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#2602: FILE: fs/cachefiles/cf-internal.h:320:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2604: FILE: fs/cachefiles/cf-internal.h:322:
+	if (unlikely(!((X) OP (Y)))) {					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2605: FILE: fs/cachefiles/cf-internal.h:323:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2606: FILE: fs/cachefiles/cf-internal.h:324:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2607: FILE: fs/cachefiles/cf-internal.h:325:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2609: FILE: fs/cachefiles/cf-internal.h:327:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2611: FILE: fs/cachefiles/cf-internal.h:329:
+} while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2616: FILE: fs/cachefiles/cf-internal.h:334:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2617: FILE: fs/cachefiles/cf-internal.h:335:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2618: FILE: fs/cachefiles/cf-internal.h:336:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2620: FILE: fs/cachefiles/cf-internal.h:338:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#2622: FILE: fs/cachefiles/cf-internal.h:340:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#2622: FILE: fs/cachefiles/cf-internal.h:340:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while(0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2624: FILE: fs/cachefiles/cf-internal.h:342:
+	if (unlikely((C) && !((X) OP (Y)))) {				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2625: FILE: fs/cachefiles/cf-internal.h:343:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2626: FILE: fs/cachefiles/cf-internal.h:344:
+		printk(KERN_ERR "CacheFiles: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2627: FILE: fs/cachefiles/cf-internal.h:345:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2629: FILE: fs/cachefiles/cf-internal.h:347:
+		BUG();							\

ERROR:SPACING: space required before the open parenthesis '('
#2631: FILE: fs/cachefiles/cf-internal.h:349:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2637: FILE: fs/cachefiles/cf-internal.h:355:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2641: FILE: fs/cachefiles/cf-internal.h:359:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2645: FILE: fs/cachefiles/cf-internal.h:363:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2649: FILE: fs/cachefiles/cf-internal.h:367:
+} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2658: FILE: fs/cachefiles/cf-key.c:1:
+/* Key to pathname encoder

ERROR:SPACING: space prohibited after that open square bracket '['
#2681: FILE: fs/cachefiles/cf-key.c:24:
+	[ 33 ... 46 ] = 1,		/* '!' -> '.' */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2681: FILE: fs/cachefiles/cf-key.c:24:
+	[ 33 ... 46 ] = 1,		/* '!' -> '.' */

ERROR:SPACING: space prohibited after that open square bracket '['
#2683: FILE: fs/cachefiles/cf-key.c:26:
+	[ 48 ... 127 ] = 1,		/* '0' -> '~' */

ERROR:SPACING: space prohibited before that close square bracket ']'
#2683: FILE: fs/cachefiles/cf-key.c:26:
+	[ 48 ... 127 ] = 1,		/* '0' -> '~' */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2703: FILE: fs/cachefiles/cf-key.c:46:
+	BUG_ON(keylen < 2 || keylen > 514);

CHECK:SPACING: No space is necessary after a cast
#2745: FILE: fs/cachefiles/cf-key.c:88:
+	sprintf(key, "@%02x%c+", (unsigned) csum, 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2745: FILE: fs/cachefiles/cf-key.c:88:
+	sprintf(key, "@%02x%c+", (unsigned) csum, 0);

CHECK:SPACING: No space is necessary after a cast
#2750: FILE: fs/cachefiles/cf-key.c:93:
+		acc = *(uint16_t *) raw;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2772: FILE: fs/cachefiles/cf-key.c:115:
+		case FSCACHE_COOKIE_TYPE_INDEX:		type = 'I';	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2773: FILE: fs/cachefiles/cf-key.c:116:
+		case FSCACHE_COOKIE_TYPE_DATAFILE:	type = 'D';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2774: FILE: fs/cachefiles/cf-key.c:117:
+		default:				type = 'S';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2804: FILE: fs/cachefiles/cf-key.c:147:
+		case FSCACHE_COOKIE_TYPE_INDEX:		type = 'J';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2805: FILE: fs/cachefiles/cf-key.c:148:
+		case FSCACHE_COOKIE_TYPE_DATAFILE:	type = 'E';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2806: FILE: fs/cachefiles/cf-key.c:149:
+		default:				type = 'T';	break;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2823: FILE: fs/cachefiles/cf-main.c:1:
+/* Network filesystem caching backend to use cache files on a premounted

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2849: FILE: fs/cachefiles/cf-main.c:27:
+unsigned cachefiles_debug;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#2850: FILE: fs/cachefiles/cf-main.c:28:
+module_param_named(debug, cachefiles_debug, uint, S_IWUSR | S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2896: FILE: fs/cachefiles/cf-main.c:74:
+		printk(KERN_NOTICE

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2905: FILE: fs/cachefiles/cf-main.c:83:
+	printk(KERN_INFO "CacheFiles: Loaded\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2924: FILE: fs/cachefiles/cf-main.c:102:
+	printk(KERN_INFO "CacheFiles: Unloading\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2938: FILE: fs/cachefiles/cf-namei.c:1:
+/* CacheFiles path walking and related routines

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2983: FILE: fs/cachefiles/cf-namei.c:46:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3008: FILE: fs/cachefiles/cf-namei.c:71:
+	 * need to wait for it to be destroyed */

CHECK:SPACING: No space is necessary after a cast
#3065: FILE: fs/cachefiles/cf-namei.c:128:
+		(uint32_t) xtime.tv_sec,

CHECK:SPACING: No space is necessary after a cast
#3066: FILE: fs/cachefiles/cf-namei.c:129:
+		(uint32_t) atomic_inc_return(&cache->gravecounter));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3074: FILE: fs/cachefiles/cf-namei.c:137:
+		 * lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3231: FILE: fs/cachefiles/cf-namei.c:294:
+	 * there's nothing for them to actually read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3305: FILE: fs/cachefiles/cf-namei.c:368:
+	 * check its attributes and delete it if it's out of date */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3313: FILE: fs/cachefiles/cf-namei.c:376:
+			 * mutex) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3346: FILE: fs/cachefiles/cf-namei.c:409:
+		 * open) */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3365: FILE: fs/cachefiles/cf-namei.c:428:
+			BUG(); // TODO: open file in data-class subdir

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3687: FILE: fs/cachefiles/cf-proc.c:1:
+/* CacheFiles statistics

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3704: FILE: fs/cachefiles/cf-proc.c:18:
+	unsigned			nlines;

CHECK:SPACING: No space is necessary after a cast
#3758: FILE: fs/cachefiles/cf-proc.c:72:
+	p->data = (void *) &cachefiles_histogram;

CHECK:SPACING: No space is necessary after a cast
#3791: FILE: fs/cachefiles/cf-proc.c:105:
+		m->private = (void *) proc;

CHECK:SPACING: No space is necessary after a cast
#3803: FILE: fs/cachefiles/cf-proc.c:117:
+	return (void *)(unsigned long) *_pos;

CHECK:SPACING: No space is necessary after a cast
#3814: FILE: fs/cachefiles/cf-proc.c:128:
+	return *pos > proc->nlines ? NULL : (void *)(unsigned long) *pos;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3830: FILE: fs/cachefiles/cf-proc.c:144:
+	unsigned x, y, z, t;

CHECK:SPACING: No space is necessary after a cast
#3832: FILE: fs/cachefiles/cf-proc.c:146:
+	switch ((unsigned long) v) {

CHECK:SPACING: No space is necessary after a cast
#3840: FILE: fs/cachefiles/cf-proc.c:154:
+		index = (unsigned long) v - 3;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3859: FILE: fs/cachefiles/cf-rdwr.c:1:
+/* Storage object read/write

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3878: FILE: fs/cachefiles/cf-rdwr.c:20:
+static int cachefiles_read_waiter(wait_queue_t *wait, unsigned mode,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3961: FILE: fs/cachefiles/cf-rdwr.c:103:
+			cachefiles_io_error_obj(

CHECK:SPACING: No space is necessary after a cast
#3964: FILE: fs/cachefiles/cf-rdwr.c:106:
+				(unsigned long) monitor->back_page->flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4043: FILE: fs/cachefiles/cf-rdwr.c:185:
+	 * to the LRU list and start it reading */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4073: FILE: fs/cachefiles/cf-rdwr.c:215:
+	 * one in such a case */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4081: FILE: fs/cachefiles/cf-rdwr.c:223:
+	 * three states: read in progress, read failed or read okay */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4102: FILE: fs/cachefiles/cf-rdwr.c:244:
+	 * page to the pagecache and LRU and copy the data across */

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#4104: FILE: fs/cachefiles/cf-rdwr.c:246:
+	_debug("- uptodate");
 	          ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4168: FILE: fs/cachefiles/cf-rdwr.c:310:
+	unsigned shift;

CHECK:SPACING: No space is necessary after a cast
#4207: FILE: fs/cachefiles/cf-rdwr.c:349:
+	       (unsigned long long) block0,

CHECK:SPACING: No space is necessary after a cast
#4208: FILE: fs/cachefiles/cf-rdwr.c:350:
+	       (unsigned long long) block);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4212: FILE: fs/cachefiles/cf-rdwr.c:354:
+		 * read from disk */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4283: FILE: fs/cachefiles/cf-rdwr.c:425:
+		 * to the LRU list and start it reading */

WARNING:INDENTED_LABEL: labels should not be indented
#4284: FILE: fs/cachefiles/cf-rdwr.c:426:
+	installed_new_backing_page:

WARNING:INDENTED_LABEL: labels should not be indented
#4294: FILE: fs/cachefiles/cf-rdwr.c:436:
+	reread_backing_page:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4300: FILE: fs/cachefiles/cf-rdwr.c:442:
+		 * monitor to transfer the data across */

WARNING:INDENTED_LABEL: labels should not be indented
#4301: FILE: fs/cachefiles/cf-rdwr.c:443:
+	monitor_backing_page:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4330: FILE: fs/cachefiles/cf-rdwr.c:472:
+		 * ensure that we do get one in such a case */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4344: FILE: fs/cachefiles/cf-rdwr.c:486:
+		 * three states: read in progress, read failed or read okay */

WARNING:INDENTED_LABEL: labels should not be indented
#4345: FILE: fs/cachefiles/cf-rdwr.c:487:
+	backing_page_already_present:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4369: FILE: fs/cachefiles/cf-rdwr.c:511:
+		 * so we need to attempt to read it again */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4373: FILE: fs/cachefiles/cf-rdwr.c:515:
+		 * page to the pagecache and LRU and copy the data across */

WARNING:INDENTED_LABEL: labels should not be indented
#4374: FILE: fs/cachefiles/cf-rdwr.c:516:
+	backing_page_already_uptodate_unlock:

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#4375: FILE: fs/cachefiles/cf-rdwr.c:517:
+		_debug("uptodate %lx", backpage->flags);
 		        ^^^^^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#4377: FILE: fs/cachefiles/cf-rdwr.c:519:
+	backing_page_already_uptodate:

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#4378: FILE: fs/cachefiles/cf-rdwr.c:520:
+		_debug("- uptodate");
 		          ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4456: FILE: fs/cachefiles/cf-rdwr.c:598:
+				   unsigned *nr_pages,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4465: FILE: fs/cachefiles/cf-rdwr.c:607:
+	unsigned shift, nrbackpages;

CHECK:SPACING: No space is necessary after a cast
#4518: FILE: fs/cachefiles/cf-rdwr.c:660:
+		       (unsigned long long) block0,

CHECK:SPACING: No space is necessary after a cast
#4519: FILE: fs/cachefiles/cf-rdwr.c:661:
+		       (unsigned long long) block);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4523: FILE: fs/cachefiles/cf-rdwr.c:665:
+			 * backing fs */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4540: FILE: fs/cachefiles/cf-rdwr.c:682:
+	 * disk */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4609: FILE: fs/cachefiles/cf-rdwr.c:751:
+			      unsigned *nr_pages,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op"
#4658: FILE: fs/cachefiles/cf-rdwr.c:800:
+	ASSERT(op != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#4659: FILE: fs/cachefiles/cf-rdwr.c:801:
+	ASSERT(page != NULL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4682: FILE: fs/cachefiles/cf-rdwr.c:824:
+			cachefiles_io_error_obj(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4714: FILE: fs/cachefiles/cf-security.c:1:
+/* CacheFiles security management

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4770: FILE: fs/cachefiles/cf-security.c:57:
+	 * create files */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4782: FILE: fs/cachefiles/cf-security.c:69:
+	 * the security ID we've been given */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4787: FILE: fs/cachefiles/cf-security.c:74:
+		printk(KERN_ERR "CacheFiles:"

WARNING:SPLIT_STRING: quoted string split across lines
#4788: FILE: fs/cachefiles/cf-security.c:75:
+		printk(KERN_ERR "CacheFiles:"
+		       " Security denies permission to make dirs: error %d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4795: FILE: fs/cachefiles/cf-security.c:82:
+		printk(KERN_ERR "CacheFiles:"

WARNING:SPLIT_STRING: quoted string split across lines
#4796: FILE: fs/cachefiles/cf-security.c:83:
+		printk(KERN_ERR "CacheFiles:"
+		       " Security denies permission to create files: error %d",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4814: FILE: fs/cachefiles/cf-xattr.c:1:
+/* CacheFiles extended attribute management

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4936: FILE: fs/cachefiles/cf-xattr.c:123:
+		cachefiles_io_error_obj(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4965: FILE: fs/cachefiles/cf-xattr.c:152:
+		cachefiles_io_error_obj(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*auxbuf)...) over kmalloc(sizeof(struct cachefiles_xattr)...)
#4989: FILE: fs/cachefiles/cf-xattr.c:176:
+	auxbuf = kmalloc(sizeof(struct cachefiles_xattr) + 512, GFP_KERNEL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5001: FILE: fs/cachefiles/cf-xattr.c:188:
+				     * mid-cull? */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5031: FILE: fs/cachefiles/cf-xattr.c:218:
+		result = object->fscache.cookie->def->check_aux(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5049: FILE: fs/cachefiles/cf-xattr.c:236:
+			BUG();

WARNING:SPLIT_STRING: quoted string split across lines
#5059: FILE: fs/cachefiles/cf-xattr.c:246:
+						"Can't update xattr on %lu"
+						" (error %d)",

WARNING:SPLIT_STRING: quoted string split across lines
#5099: FILE: fs/cachefiles/cf-xattr.c:286:
+					    "Can't remove xattr from %lu"
+					    " (error %d)",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000378126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 69 errors, 161 warnings, 94 checks, 4692 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000378126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
