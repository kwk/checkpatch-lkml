WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
> > + * slob_block has a field 'units', which indicates size of block if +ve,

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#173: FILE: mm/slob.c:43:
+#include <asm/atomic.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(SLOB_MIN_ALIGN) over __attribute__((aligned(SLOB_MIN_ALIGN)))
#205: FILE: mm/slob.c:72:
+} __attribute__((aligned(SLOB_MIN_ALIGN)));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#223: FILE: mm/slob.c:90:
+};
+static inline void struct_slob_page_wrong_size(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#315: FILE: mm/slob.c:172:
+	if (size > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#318: FILE: mm/slob.c:175:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#345: FILE: mm/slob.c:201:
+	return base+next;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: mm/slob.c:298:
+		BUG_ON(!b);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: mm/slob.c:316:
+	BUG_ON(!size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: mm/slob.c:338:
+		set_slob(b, units,
+			(void *)((unsigned long)(b +

CHECK:BRACES: braces {} should be used on all arms of this statement
#553: FILE: mm/slob.c:361:
+		if (!slob_last(prev) && b + units == next) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#556: FILE: mm/slob.c:364:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#559: FILE: mm/slob.c:367:
+		if (prev + slob_units(prev) == b) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: mm/slob.c:370:
+		} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#578: FILE: mm/slob.c:386:
+};
+typedef struct bigblock bigblock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#578: FILE: mm/slob.c:386:
+typedef struct bigblock bigblock_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#584: FILE: mm/slob.c:392:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#623: FILE: mm/slob.c:483:
+		BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 11 checks, 560 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
