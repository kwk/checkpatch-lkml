CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#148: FILE: security/selinux/ss/ebitmap.c:120:
+				c_iter->next
+				  = netlbl_secattr_catmap_alloc(GFP_ATOMIC);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c_iter->next"
#149: FILE: security/selinux/ss/ebitmap.c:121:
+				if (c_iter->next == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#153: FILE: security/selinux/ss/ebitmap.c:125:
+				c_iter->startbit
+				  = e_startbit & ~(NETLBL_CATMAP_SIZE - 1);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '|=' should be on the previous line
#159: FILE: security/selinux/ss/ebitmap.c:131:
+			c_iter->bitmap[cmap_idx]
+				|= e_iter->maps[cmap_idx] << cmap_sft;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#221: FILE: security/selinux/ss/ebitmap.c:179:
+			if (!e_iter
+			    || c_pos >= e_iter->startbit + EBITMAP_SIZE) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#226: FILE: security/selinux/ss/ebitmap.c:184:
+				e_iter->startbit
+					= c_pos - (c_pos % EBITMAP_SIZE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!emap_prev"
#227: FILE: security/selinux/ss/ebitmap.c:185:
+				if (emap_prev == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#387: FILE: security/selinux/ss/ebitmap.c:368:
 		printk(KERN_ERR "security: ebitmap: map size %u does not "
+		       "match my size %Zd (high bit was %d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#387: FILE: security/selinux/ss/ebitmap.c:368:
+		       "match my size %Zd (high bit was %d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#430: FILE: security/selinux/ss/ebitmap.c:392:
 			printk(KERN_ERR "security: ebitmap start bit (%d) is "
+			       "not a multiple of the map unit size (%Zd)\n",

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#430: FILE: security/selinux/ss/ebitmap.c:392:
+			       "not a multiple of the map unit size (%Zd)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#446: FILE: security/selinux/ss/ebitmap.c:405:
+			struct ebitmap_node *tmp;
+			tmp = kzalloc(sizeof(*tmp), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#448: FILE: security/selinux/ss/ebitmap.c:407:
+				printk(KERN_ERR

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#455: FILE: security/selinux/ss/ebitmap.c:414:
+			if (n) {
[...]
+			} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#462: FILE: security/selinux/ss/ebitmap.c:421:
+			printk(KERN_ERR "security: ebitmap: start bit %d"

WARNING:SPLIT_STRING: quoted string split across lines
#463: FILE: security/selinux/ss/ebitmap.c:422:
+			printk(KERN_ERR "security: ebitmap: start bit %d"
+			       " comes after start bit %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#601: FILE: security/selinux/ss/ebitmap.h:86:
+	BUG_ON(index >= EBITMAP_UNIT_NUMS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: security/selinux/ss/ebitmap.h:98:
+	BUG_ON(index >= EBITMAP_UNIT_NUMS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#625: FILE: security/selinux/ss/ebitmap.h:108:
+	BUG_ON(index >= EBITMAP_UNIT_NUMS);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#629: FILE: security/selinux/ss/ebitmap.h:112:
+#define ebitmap_for_each_positive_bit(e, n, bit)	\
+	for (bit = ebitmap_start_positive(e, &n);	\
+	     bit < ebitmap_length(e);			\
+	     bit = ebitmap_next_positive(e, &n, bit))	\
 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#629: FILE: security/selinux/ss/ebitmap.h:112:
+#define ebitmap_for_each_positive_bit(e, n, bit)	\
+	for (bit = ebitmap_start_positive(e, &n);	\
+	     bit < ebitmap_length(e);			\
+	     bit = ebitmap_next_positive(e, &n, bit))	\
 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#629: FILE: security/selinux/ss/ebitmap.h:112:
+#define ebitmap_for_each_positive_bit(e, n, bit)	\
+	for (bit = ebitmap_start_positive(e, &n);	\
+	     bit < ebitmap_length(e);			\
+	     bit = ebitmap_next_positive(e, &n, bit))	\
 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bit' - possible side-effects?
#629: FILE: security/selinux/ss/ebitmap.h:112:
+#define ebitmap_for_each_positive_bit(e, n, bit)	\
+	for (bit = ebitmap_start_positive(e, &n);	\
+	     bit < ebitmap_length(e);			\
+	     bit = ebitmap_next_positive(e, &n, bit))	\
 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#630: FILE: security/selinux/ss/ebitmap.h:113:
+	for (bit = ebitmap_start_positive(e, &n);	\
[...]
 int ebitmap_cmp(struct ebitmap *e1, struct ebitmap *e2);

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: security/selinux/ss/mls.c:48:
+		int index_sens = context->range.level[l].sens;
+		len += strlen(policydb.p_sens_val_to_name[index_sens - 1]);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000372019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 11 checks, 784 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000372019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
