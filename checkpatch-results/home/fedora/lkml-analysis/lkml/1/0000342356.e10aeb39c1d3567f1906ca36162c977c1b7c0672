WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Extend group scheduling to also cover the realtime classes. It uses the time

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: kernel/sched.c:7106:
+static void init_tg_cfs_entry(struct rq *rq, struct task_group *tg,
+		struct cfs_rq *cfs_rq, struct sched_entity *se,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#244: FILE: kernel/sched.c:7119:
+	se->load.inv_weight = div64_64(1ULL<<32, se->load.weight);
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: kernel/sched.c:7124:
+static void init_tg_rt_entry(struct rq *rq, struct task_group *tg,
+		struct rt_rq *rt_rq, struct sched_rt_entity *rt_se,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/sched.c:7165:
+		init_tg_cfs_entry(rq, &init_task_group,
+				&per_cpu(init_cfs_rq, i),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/sched.c:7171:
+		init_tg_rt_entry(rq, &init_task_group,
+				&per_cpu(init_rt_rq, i),

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#325: FILE: kernel/sched.c:7532:
+	tg->rt_rq = kzalloc(sizeof(rt_rq) * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#328: FILE: kernel/sched.c:7535:
+	tg->rt_se = kzalloc(sizeof(rt_se) * NR_CPUS, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*cfs_rq)...) over kmalloc_node(sizeof(struct cfs_rq)...)
#340: FILE: kernel/sched.c:7545:
+		cfs_rq = kmalloc_node(sizeof(struct cfs_rq),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: kernel/sched.c:7546:
+		cfs_rq = kmalloc_node(sizeof(struct cfs_rq),
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: kernel/sched.c:7546:
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));
 				          ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*se)...) over kmalloc_node(sizeof(struct sched_entity)...)
#347: FILE: kernel/sched.c:7550:
+		se = kmalloc_node(sizeof(struct sched_entity),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: kernel/sched.c:7551:
+		se = kmalloc_node(sizeof(struct sched_entity),
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#348: FILE: kernel/sched.c:7551:
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));
 				          ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*rt_rq)...) over kmalloc_node(sizeof(struct rt_rq)...)
#354: FILE: kernel/sched.c:7555:
+		rt_rq = kmalloc_node(sizeof(struct rt_rq),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: kernel/sched.c:7556:
+		rt_rq = kmalloc_node(sizeof(struct rt_rq),
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#355: FILE: kernel/sched.c:7556:
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));
 				          ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*rt_se)...) over kmalloc_node(sizeof(struct sched_rt_entity)...)
#370: FILE: kernel/sched.c:7560:
+		rt_se = kmalloc_node(sizeof(struct sched_rt_entity),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: kernel/sched.c:7561:
+		rt_se = kmalloc_node(sizeof(struct sched_rt_entity),
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#371: FILE: kernel/sched.c:7561:
+				GFP_KERNEL|__GFP_ZERO, cpu_to_node(i));
 				          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: kernel/sched.c:7864:
+static int cpu_rt_ratio_write_uint(struct cgroup *cgrp, struct cftype *cftype,
+		u64 rt_ratio_val)

CHECK:SPACING: No space is necessary after a cast
#521: FILE: kernel/sched.c:7873:
+	return (u64) tg->rt_ratio;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#567: FILE: kernel/sched_rt.c:68:
+#define for_each_leaf_rt_rq(rt_rq, rq) \
+	list_for_each_entry(rt_rq, &rq->leaf_rt_rq_list, leaf_rt_rq_list)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rt_se' - possible side-effects?
#580: FILE: kernel/sched_rt.c:81:
+#define for_each_sched_rt_entity(rt_se) \
+	for (; rt_se; rt_se = rt_se->parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rt_rq' - possible side-effects?
#614: FILE: kernel/sched_rt.c:115:
+#define for_each_leaf_rt_rq(rt_rq, rq) \
+	for (rt_rq = &rq->rt; rt_rq; rt_rq = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#614: FILE: kernel/sched_rt.c:115:
+#define for_each_leaf_rt_rq(rt_rq, rq) \
+	for (rt_rq = &rq->rt; rt_rq; rt_rq = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rt_se' - possible side-effects?
#630: FILE: kernel/sched_rt.c:131:
+#define for_each_sched_rt_entity(rt_se) \
+	for (; rt_se; rt_se = NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#759: FILE: kernel/sched_rt.c:243:
+	BUG_ON(!task_has_rt_policy(curr));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#830: FILE: kernel/sched_rt.c:298:
+	if (rt_rq->rt_nr_running) {
[...]
+			array = &rt_rq->active;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#881: FILE: kernel/sched_rt.c:333:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1034: FILE: kernel/sched_rt.c:504:
+	BUG_ON(idx >= MAX_RT_PRIO);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1151: FILE: kernel/sched_rt.c:583:
+			struct task_struct *p = rt_task_of(rt_se);
+			if (pick_rt_task(rq, p, cpu)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1157: FILE: kernel/sched_rt.c:589:
+			idx = find_next_bit(array->bitmap, MAX_RT_PRIO, idx+1);
 			                                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'weight != p->rt.nr_cpus_allowed'
#1173: FILE: kernel/sched_rt.c:1022:
+	if (p->se.on_rq && (weight != p->rt.nr_cpus_allowed)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->rt.nr_cpus_allowed <= 1'
#1177: FILE: kernel/sched_rt.c:1025:
+		if ((p->rt.nr_cpus_allowed <= 1) && (weight > 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'weight > 1'
#1177: FILE: kernel/sched_rt.c:1025:
+		if ((p->rt.nr_cpus_allowed <= 1) && (weight > 1)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1207: FILE: include/linux/init_task.h:148:
+^I^I.time_slice^I= HZ, ^I^I^I^I^I\$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000342356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 30 checks, 1116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000342356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
