WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Luca Bigliardi <shammash@artha.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: arch/um/drivers/vde_user.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn"
#149: FILE: arch/um/drivers/vde_user.c:29:
+	if (conn == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: arch/um/drivers/vde_user.c:31:
+		printk(UM_KERN_ERR "vde_user_init: vde_open failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_user_init', this function's name, in a string
#151: FILE: arch/um/drivers/vde_user.c:31:
+		printk(UM_KERN_ERR "vde_user_init: vde_open failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#152: FILE: arch/um/drivers/vde_user.c:32:
+		printk(UM_KERN_ERR "vde_user_init: vde_open failed, "
+		       "errno = %d\n", errno);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#156: FILE: arch/um/drivers/vde_user.c:36:
+	printk(UM_KERN_INFO "vde backend - connection opened\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pri->conn"
#167: FILE: arch/um/drivers/vde_user.c:47:
+	if (pri->conn != NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: arch/um/drivers/vde_user.c:50:
+	printk(UM_KERN_WARNING "vde_open - we have no VDECONN to open");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pri->conn"
#178: FILE: arch/um/drivers/vde_user.c:58:
+	if (pri->conn != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/um/drivers/vde_user.c:59:
+		printk(UM_KERN_INFO "vde backend - closing connection\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: arch/um/drivers/vde_user.c:67:
+	printk(UM_KERN_WARNING "vde_remove - we have no VDECONN to remove");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_remove', this function's name, in a string
#187: FILE: arch/um/drivers/vde_user.c:67:
+	printk(UM_KERN_WARNING "vde_remove - we have no VDECONN to remove");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: arch/um/drivers/vde_user.c:78:
+^I.close^I ^I= NULL,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: arch/um/drivers/vde_user.c:79:
+^I.remove^I ^I= vde_remove,$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vpri->args)...) over kmalloc(sizeof(struct vde_open_args)...)
#210: FILE: arch/um/drivers/vde_user.c:90:
+	vpri->args = kmalloc(sizeof(struct vde_open_args), UM_GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vpri->args"
#211: FILE: arch/um/drivers/vde_user.c:91:
+	if (vpri->args == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: arch/um/drivers/vde_user.c:92:
+		printk(UM_KERN_ERR "vde_init_libstuff - vde_open_args"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_init_libstuff', this function's name, in a string
#212: FILE: arch/um/drivers/vde_user.c:92:
+		printk(UM_KERN_ERR "vde_init_libstuff - vde_open_args"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#212: FILE: arch/um/drivers/vde_user.c:92:
+	if (vpri->args == NULL) {
+		printk(UM_KERN_ERR "vde_init_libstuff - vde_open_args"

WARNING:SPLIT_STRING: quoted string split across lines
#213: FILE: arch/um/drivers/vde_user.c:93:
+		printk(UM_KERN_ERR "vde_init_libstuff - vde_open_args"
+		       "allocation failed");

WARNING:MISSING_SPACE: break quoted strings at a space character
#213: FILE: arch/um/drivers/vde_user.c:93:
+		printk(UM_KERN_ERR "vde_init_libstuff - vde_open_args"
+		       "allocation failed");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#223: FILE: arch/um/drivers/vde_user.c:103:
+	args->port ?  printk(UM_KERN_INFO "port %d", args->port) :

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#224: FILE: arch/um/drivers/vde_user.c:104:
+		printk(UM_KERN_INFO "undefined port");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vconn"
#232: FILE: arch/um/drivers/vde_user.c:112:
+	if (vconn == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: arch/um/drivers/vde_user.c:116:
+	if (rv < 0) {
[...]
+	else if (rv == 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#241: FILE: arch/um/drivers/vde_user.c:121:
+	}
+	else if (rv == 0)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vconn"
#251: FILE: arch/um/drivers/vde_user.c:131:
+	if (vconn == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#262: FILE: arch/um/drivers/vde.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: arch/um/drivers/vde.h:27:
+extern void vde_init_libstuff(struct vde_data *vpri, struct vde_init *init);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: arch/um/drivers/vde.h:29:
+extern int vde_user_read(void *conn, void *buf, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: arch/um/drivers/vde.h:30:
+extern int vde_user_write(void *conn, void *buf, int len);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#299: FILE: arch/um/drivers/vde_kern.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#323: FILE: arch/um/drivers/vde_kern.c:25:
+	vpri = (struct vde_data *) pri->user;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#331: FILE: arch/um/drivers/vde_kern.c:33:
+	printk(KERN_INFO "vde backend - %s, ", vpri->vde_switch ?

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#336: FILE: arch/um/drivers/vde_kern.c:38:
+	printk(KERN_INFO "\n");

CHECK:SPACING: No space is necessary after a cast
#341: FILE: arch/um/drivers/vde_kern.c:43:
+	struct vde_data *pri = (struct vde_data *) &lp->user;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pri->conn"
#343: FILE: arch/um/drivers/vde_kern.c:45:
+	if (pri->conn != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#345: FILE: arch/um/drivers/vde_kern.c:47:
+		if (*skb == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#352: FILE: arch/um/drivers/vde_kern.c:54:
+	printk(KERN_ERR "vde_read - we have no VDECONN to read from");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_read', this function's name, in a string
#352: FILE: arch/um/drivers/vde_kern.c:54:
+	printk(KERN_ERR "vde_read - we have no VDECONN to read from");

CHECK:SPACING: No space is necessary after a cast
#358: FILE: arch/um/drivers/vde_kern.c:60:
+	struct vde_data *pri = (struct vde_data *) &lp->user;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pri->conn"
#360: FILE: arch/um/drivers/vde_kern.c:62:
+	if (pri->conn != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#364: FILE: arch/um/drivers/vde_kern.c:66:
+	printk(KERN_ERR "vde_write - we have no VDECONN to write to");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_write', this function's name, in a string
#364: FILE: arch/um/drivers/vde_kern.c:66:
+	printk(KERN_ERR "vde_write - we have no VDECONN to write to");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: arch/um/drivers/vde_kern.c:90:
+	remain = split_if_spec(str, &init->vde_switch, mac_out, &port_str,
+				&init->group, &mode_str, &init->descr, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "remain"
#390: FILE: arch/um/drivers/vde_kern.c:92:
+	if (remain != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#391: FILE: arch/um/drivers/vde_kern.c:93:
+		printk(KERN_WARNING "vde_setup - Ignoring extra data :"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_setup', this function's name, in a string
#391: FILE: arch/um/drivers/vde_kern.c:93:
+		printk(KERN_WARNING "vde_setup - Ignoring extra data :"

WARNING:SPLIT_STRING: quoted string split across lines
#392: FILE: arch/um/drivers/vde_kern.c:94:
+		printk(KERN_WARNING "vde_setup - Ignoring extra data :"
+		       "'%s'\n", remain);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "port_str"
#394: FILE: arch/um/drivers/vde_kern.c:96:
+	if (port_str != NULL) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#395: FILE: arch/um/drivers/vde_kern.c:97:
+		init->port = simple_strtoul(port_str, &last, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last == port_str'
#396: FILE: arch/um/drivers/vde_kern.c:98:
+		if ((*last != '\0') || (last == port_str)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#397: FILE: arch/um/drivers/vde_kern.c:99:
+			printk(KERN_ERR "vde_setup - Bad port : '%s'\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_setup', this function's name, in a string
#397: FILE: arch/um/drivers/vde_kern.c:99:
+			printk(KERN_ERR "vde_setup - Bad port : '%s'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: arch/um/drivers/vde_kern.c:100:
+			printk(KERN_ERR "vde_setup - Bad port : '%s'\n",
+						port_str);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mode_str"
#403: FILE: arch/um/drivers/vde_kern.c:105:
+	if (mode_str != NULL) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#404: FILE: arch/um/drivers/vde_kern.c:106:
+		init->mode = simple_strtoul(mode_str, &last, 8);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last == mode_str'
#405: FILE: arch/um/drivers/vde_kern.c:107:
+		if ((*last != '\0') || (last == mode_str)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#406: FILE: arch/um/drivers/vde_kern.c:108:
+			printk(KERN_ERR "vde_setup - Bad mode : '%s'\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vde_setup', this function's name, in a string
#406: FILE: arch/um/drivers/vde_kern.c:108:
+			printk(KERN_ERR "vde_setup - Bad mode : '%s'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: arch/um/drivers/vde_kern.c:109:
+			printk(KERN_ERR "vde_setup - Bad mode : '%s'\n",
+						mode_str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#412: FILE: arch/um/drivers/vde_kern.c:114:
+	printk(KERN_INFO "Configured vde device: %s\n", init->vde_switch ?

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: arch/um/drivers/vde_kern.c:121:
+^I.list ^I^I= LIST_HEAD_INIT(vde_transport.list),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: arch/um/drivers/vde_kern.c:122:
+^I.name ^I^I= "vde",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: arch/um/drivers/vde_kern.c:123:
+^I.setup  ^I= vde_setup,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: arch/um/drivers/vde_kern.c:124:
+^I.user ^I^I= &vde_user_info,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: arch/um/drivers/vde_kern.c:125:
+^I.kern ^I^I= &vde_kern_info,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: arch/um/drivers/vde_kern.c:126:
+^I.private_size ^I= sizeof(struct vde_data),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: arch/um/drivers/vde_kern.c:127:
+^I.setup_size ^I= sizeof(struct vde_init),$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 44 warnings, 25 checks, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
