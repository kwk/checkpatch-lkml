WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
2.6.28-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '920313a726e04fef0f2c0bcb04ad8229c0e700d8', maybe rebased or not pulled?
#46: 
(cherry picked from commit 920313a726e04fef0f2c0bcb04ad8229c0e700d8)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#51: 
new groups the page may still be marked uptodate even though
                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grp->bb_state
#100: FILE: fs/ext4/balloc.c:462:
+	set_bit(EXT4_GROUP_INFO_NEED_INIT_BIT, &(grp->bb_state));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: fs/ext4/ext4.h:1059:
+extern int ext4_mb_add_groupinfo(struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/ext4/ext4.h:1060:
+extern int ext4_mb_add_groupinfo(struct super_block *sb,
 		ext4_group_t i, struct ext4_group_desc *desc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: fs/ext4/ext4.h:1063:
+extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#133: FILE: fs/ext4/ext4.h:1063:
+extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_group_t' should also have an identifier name
#133: FILE: fs/ext4/ext4.h:1063:
+extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: fs/ext4/ext4.h:1064:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#134: FILE: fs/ext4/ext4.h:1064:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_group_t' should also have an identifier name
#134: FILE: fs/ext4/ext4.h:1064:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#134: FILE: fs/ext4/ext4.h:1064:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/ext4/ext4.h:1065:
+extern void ext4_mb_put_buddy_cache_lock(struct super_block *,
+						ext4_group_t, int);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#187: FILE: fs/ext4/mballoc.c:937:
+			 * are not uptodate that implies
 			           ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#249: FILE: fs/ext4/mballoc.c:1752:
+	for (i = 0; i < groups_per_page; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: fs/ext4/mballoc.c:1767:
+void ext4_mb_put_buddy_cache_lock(struct super_block *sb,
+					ext4_group_t group, int locked_group)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#283: FILE: fs/ext4/mballoc.c:1786:
+	for (i = 0; i < locked_group; i++) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#293: FILE: fs/ext4/mballoc.c:1796:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#297: FILE: fs/ext4/mballoc.c:1800:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: fs/ext4/mballoc.c:1837:
+		BUG_ON(page->mapping != inode->i_mapping);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#342: FILE: fs/ext4/mballoc.c:1845:
+	if (page == NULL || !PageUptodate(page)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#363: FILE: fs/ext4/mballoc.c:1866:
+		BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#371: FILE: fs/ext4/mballoc.c:1874:
+	if (page == NULL || !PageUptodate(page)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: fs/ext4/resize.c:791:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000165269.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 14 checks, 517 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000165269.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
