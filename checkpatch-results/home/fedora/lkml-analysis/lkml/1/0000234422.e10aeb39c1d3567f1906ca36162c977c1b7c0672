WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
The only issue is that only one set of nodes can be actively used for a lock

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/linux/mcslock.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#58: FILE: include/linux/mcslock.h:11:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#60: FILE: include/linux/mcslock.h:13:
+#include <asm/processor.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#82: FILE: include/linux/mcslock.h:35:
+}
+static inline int mcs_trylock(mcslock_t *lock, int nest)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#86: FILE: include/linux/mcslock.h:39:
+}
+static inline void mcs_unlock(mcslock_t *lock, int nest)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#92: FILE: include/linux/mcslock.h:45:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/mcslock.h:68:
+extern void mcs_lock(mcslock_t *lock, int nest);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/mcslock.h:69:
+extern int mcs_trylock(mcslock_t *lock, int nest);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/mcslock.h:70:
+extern void mcs_unlock(mcslock_t *lock, int nest);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/mcslock.h:74:
+extern int atomic_dec_and_mcslock(atomic_t *atomic, mcslock_t *lock, int nest);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: lib/mcslock.c:1:
+#include <linux/mcslock.h>

WARNING:MEMORY_BARRIER: memory barrier without comment
#169: FILE: lib/mcslock.c:27:
+		smp_wmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#199: FILE: lib/mcslock.c:57:
+	if (instance->next == MCS_CPU_NONE) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#209: FILE: lib/mcslock.c:67:
+	} else

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#232: FILE: fs/dcache.c:42:
+__cacheline_aligned_in_smp DEFINE_MCS_LOCK(dcache_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dcache_lock' should also have an identifier name
#232: FILE: fs/dcache.c:42:
+__cacheline_aligned_in_smp DEFINE_MCS_LOCK(dcache_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 8 checks, 1583 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
