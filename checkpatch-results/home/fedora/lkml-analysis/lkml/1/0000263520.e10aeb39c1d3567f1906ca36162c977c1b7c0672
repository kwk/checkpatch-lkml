CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#49: FILE: include/asm-x86/paravirt.h:1459:
+#define PARA_INDIRECT(addr)	*addr(%rip)
                            	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#49: FILE: include/asm-x86/paravirt.h:1459:
+#define PARA_INDIRECT(addr)	*addr(%rip)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#49: FILE: include/asm-x86/paravirt.h:1459:
+#define PARA_INDIRECT(addr)	*addr(%rip)

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#55: FILE: include/asm-x86/paravirt.h:1465:
+#define PARA_INDIRECT(addr)	*%cs:addr
                            	 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#55: FILE: include/asm-x86/paravirt.h:1465:
+#define PARA_INDIRECT(addr)	*%cs:addr
                            	    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#55: FILE: include/asm-x86/paravirt.h:1465:
+#define PARA_INDIRECT(addr)	*%cs:addr

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#61: FILE: include/asm-x86/paravirt.h:1470:
+		  jmp PARA_INDIRECT(pv_cpu_ops+PV_CPU_iret))
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#66: FILE: include/asm-x86/paravirt.h:1474:
+		  jmp PARA_INDIRECT(pv_cpu_ops+PV_CPU_nmi_return))
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#73: FILE: include/asm-x86/paravirt.h:1479:
+		  call PARA_INDIRECT(pv_irq_ops+PV_IRQ_irq_disable);	\
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#81: FILE: include/asm-x86/paravirt.h:1485:
+		  call PARA_INDIRECT(pv_irq_ops+PV_IRQ_irq_enable);	\
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#88: FILE: include/asm-x86/paravirt.h:1491:
+		  jmp PARA_INDIRECT(pv_cpu_ops+PV_CPU_irq_enable_syscall_ret))
 		                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#96: FILE: include/asm-x86/paravirt.h:1496:
+	push %ecx; push %edx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#96: FILE: include/asm-x86/paravirt.h:1496:
+	push %ecx; push %edx;				\
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#97: FILE: include/asm-x86/paravirt.h:1497:
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_read_cr0);	\
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#104: FILE: include/asm-x86/paravirt.h:1503:
+		  call PARA_INDIRECT(pv_cpu_ops+PV_CPU_swapgs);		\
 		                               ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#111: FILE: include/asm-x86/paravirt.h:1507:
+#define GET_CR2_INTO_RCX				\
+	call PARA_INDIRECT(pv_mmu_ops+PV_MMU_read_cr2);	\
+	movq %rax, %rcx;				\
 	xorq %rax, %rax;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: include/asm-x86/paravirt.h:1508:
+	call PARA_INDIRECT(pv_mmu_ops+PV_MMU_read_cr2);	\
 	                             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#113: FILE: include/asm-x86/paravirt.h:1509:
+	movq %rax, %rcx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#113: FILE: include/asm-x86/paravirt.h:1509:
+	movq %rax, %rcx;				\
 	           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000263520.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 1 warnings, 16 checks, 71 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000263520.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
