WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
      [S390] s390-kvm: leave sie context on work. Removes preemption requirement

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#66: 
      [S390] s390-kvm: leave sie context on work. Removes preemption requirement
                             ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#113: FILE: arch/s390/Kconfig:433:
+config PAGE_STATES
+	bool "Unused page notification"
+	help
+	  This enables the notification of unused pages to the
+	  hypervisor. The ESSA instruction is used to do the states
+	  changes between a page that has content and the unused state.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#248: FILE: arch/s390/kernel/entry64.S:611:
+# check, if we are in SIE, if yes leave it
                       ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#254: FILE: arch/s390/kernel/entry64.S:617:
+	jnz	io_work_user		# yes -> no need to check for SIE
 	   	            		                              ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#257: FILE: arch/s390/kernel/entry64.S:620:
+	clc	0(2,%r1), 0(%r2)	# is current instruction = SIE?
 	   	                	                           ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#259: FILE: arch/s390/kernel/entry64.S:622:
+	lg	%r1, SP_PSW+8(%r15)	# yes-> add 4 bytes to leave SIE
 	  	                   	                             ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#271: FILE: arch/s390/kernel/entry64.S:634:
+	clc	0(2,%r1), 0(%r2)	# is current instruction = SIE?
 	   	                	                           ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#273: FILE: arch/s390/kernel/entry64.S:636:
+	lg	%r1, SP_PSW+8(%r15)	# yes-> add 4 bytes to leave SIE
 	  	                   	                             ^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#520: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#525: FILE: arch/s390/mm/page-states.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#526: FILE: arch/s390/mm/page-states.c:2:
+ * arch/s390/mm/page-states.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#548: FILE: arch/s390/mm/page-states.c:24:
+	char *parm;
 	      ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#549: FILE: arch/s390/mm/page-states.c:25:
+	parm = strstrip(str);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#549: FILE: arch/s390/mm/page-states.c:25:
+	char *parm;
+	parm = strstrip(str);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#550: FILE: arch/s390/mm/page-states.c:26:
+	if (strcmp(parm, "yes") == 0 || strcmp(parm, "on") == 0) {
 	           ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#550: FILE: arch/s390/mm/page-states.c:26:
+	if (strcmp(parm, "yes") == 0 || strcmp(parm, "on") == 0) {
 	                                       ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#555: FILE: arch/s390/mm/page-states.c:31:
+	if (strcmp(parm, "no") == 0 || strcmp(parm, "off") == 0)
 	           ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#555: FILE: arch/s390/mm/page-states.c:31:
+	if (strcmp(parm, "no") == 0 || strcmp(parm, "off") == 0)
 	                                      ^^^^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#560: FILE: arch/s390/mm/page-states.c:36:
+__setup("cmma=", cmma);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#569: FILE: arch/s390/mm/page-states.c:45:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#573: FILE: arch/s390/mm/page-states.c:49:
+		EX_TABLE(0b,1b)
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from_ssid > to_ssid'
#679: FILE: drivers/s390/cio/blacklist.c:51:
+	if ((from_ssid > to_ssid) || ((from_ssid == to_ssid) && (from > to))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from_ssid == to_ssid'
#679: FILE: drivers/s390/cio/blacklist.c:51:
+	if ((from_ssid > to_ssid) || ((from_ssid == to_ssid) && (from > to))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from > to'
#679: FILE: drivers/s390/cio/blacklist.c:51:
+	if ((from_ssid > to_ssid) || ((from_ssid == to_ssid) && (from > to))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#681: FILE: drivers/s390/cio/blacklist.c:53:
+			printk(KERN_WARNING "cio: Invalid cio_ignore range "

WARNING:SPLIT_STRING: quoted string split across lines
#682: FILE: drivers/s390/cio/blacklist.c:54:
+			printk(KERN_WARNING "cio: Invalid cio_ignore range "
+			       "0.%x.%04x-0.%x.%04x\n", from_ssid, from,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: drivers/s390/cio/blacklist.c:60:
+	while ((from_ssid < to_ssid) || ((from_ssid == to_ssid) &&
+	       (from <= to))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#744: FILE: drivers/s390/cio/blacklist.c:85:
+	while (isxdigit(**cp) && (diff <= max_digit)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'diff < min_digit'
#774: FILE: drivers/s390/cio/blacklist.c:95:
+	if ((diff < min_digit) || (diff > max_digit) || (*val > max_val))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'diff > max_digit'
#774: FILE: drivers/s390/cio/blacklist.c:95:
+	if ((diff < min_digit) || (diff > max_digit) || (*val > max_val))

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#808: FILE: drivers/s390/cio/blacklist.c:114:
+	val = simple_strtoul(str, &str_work, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#850: FILE: drivers/s390/cio/blacklist.c:143:
+		printk(KERN_WARNING "cio: Invalid cio_ignore device '%s'\n",

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#888: FILE: drivers/s390/cio/blacklist.c:154:
+	char *parm;
 	      ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#893: FILE: drivers/s390/cio/blacklist.c:159:
+	while ((parm = strsep(&str, ","))) {
 	        ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#896: FILE: drivers/s390/cio/blacklist.c:162:
+		if (*parm == '!') {
 		     ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#901: FILE: drivers/s390/cio/blacklist.c:167:
+			parm++;
 			^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#903: FILE: drivers/s390/cio/blacklist.c:169:
+		if (strcmp(parm, "all") == 0) {
 		           ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#911: FILE: drivers/s390/cio/blacklist.c:177:
+			rc = parse_busid(strsep(&parm, "-"), &from_cssid,
 			                         ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#914: FILE: drivers/s390/cio/blacklist.c:180:
+				if (parm != NULL)
 				    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parm"
#914: FILE: drivers/s390/cio/blacklist.c:180:
+				if (parm != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#915: FILE: drivers/s390/cio/blacklist.c:181:
+					rc = parse_busid(parm, &to_cssid,
 					                 ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: drivers/s390/cio/blacklist.c:184:
+				else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#926: FILE: drivers/s390/cio/blacklist.c:191:
+		if (!rc) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#931: FILE: drivers/s390/cio/blacklist.c:196:
+		} else

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#986: FILE: drivers/s390/cio/blacklist.c:236:
+	char *parm;
 	      ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#988: FILE: drivers/s390/cio/blacklist.c:238:
+	parm = strsep(&buf, " ");
 	^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#990: FILE: drivers/s390/cio/blacklist.c:240:
+	if (strcmp("free", parm) == 0)
 	                   ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#992: FILE: drivers/s390/cio/blacklist.c:242:
+	else if (strcmp("add", parm) == 0)
 	                       ^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1091: FILE: drivers/s390/cio/cio.c:554:
+		CIO_MSG_EVENT(4, "Subchannel 0.%x.%04x reports "
+			      "non-I/O subchannel type %04X\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1116: FILE: drivers/s390/cio/cio.c:587:
+	CIO_MSG_EVENT(6, "Detected device %04x on subchannel 0.%x.%04X "
+		      "- PIM = %02X, PAM = %02X, POM = %02X\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1297: FILE: drivers/s390/cio/device_fsm.c:326:
+		CIO_MSG_EVENT(2, "SenseID : unknown device %04x on "
+			      "subchannel 0.%x.%04x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1316: FILE: drivers/s390/cio/device_fsm.c:352:
+		CIO_MSG_EVENT(4, "SenseID : device 0.%x.%04x reports: "
+			      "CU  Type/Mod = %04X/%02X, Dev Type/Mod = "

WARNING:SPLIT_STRING: quoted string split across lines
#1317: FILE: drivers/s390/cio/device_fsm.c:353:
+			      "CU  Type/Mod = %04X/%02X, Dev Type/Mod = "
+			      "%04X/%02X\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1329: FILE: drivers/s390/cio/device_fsm.c:361:
+		CIO_MSG_EVENT(0, "SenseID : boxed device %04x on "
+			      " subchannel 0.%x.%04x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1363: FILE: drivers/s390/cio/device_fsm.c:1171:
+	CIO_MSG_EVENT(0, "Internal state [%i][%i] not handled for device "
+		      "0.%x.%04x\n", cdev->private->state, dev_event,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1522: FILE: include/asm-s390/system.h:120:
+extern void cmma_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000284067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 42 warnings, 14 checks, 1267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000284067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
