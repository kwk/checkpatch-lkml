CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#44: FILE: fs/ext2/balloc.c:327:
+unsigned long ext2_new_block(struct inode *inode, unsigned long goal,
 			u32 *prealloc_count, u32 *prealloc_block, int *err)

WARNING:SPLIT_STRING: quoted string split across lines
#63: FILE: fs/ext2/balloc.c:463:
 			    "Allocating block in system zone - "
+			    "block = %lu", target_block);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32 *' should also have an identifier name
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32 *' should also have an identifier name
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#76: FILE: fs/ext2/ext2.h:94:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: fs/ext2/ext2.h:95:
+extern unsigned long ext2_new_block (struct inode *, unsigned long,
 			   __u32 *, __u32 *, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: fs/ext2/inode.c:110:
+static unsigned long ext2_alloc_block (struct inode * inode, unsigned long goal, int *err)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#89: FILE: fs/ext2/inode.c:110:
+static unsigned long ext2_alloc_block (struct inode * inode, unsigned long goal, int *err)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000443027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 8 warnings, 3 checks, 57 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000443027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
