WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
- asm-generic/marker.h is now only used as a fallback defining MARK as GEN_MARK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#97: FILE: arch/powerpc/kernel/marker.c:1:
+/* marker.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#107: FILE: arch/powerpc/kernel/marker.c:11:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: arch/powerpc/kernel/marker.c:15:
+	char newi[MARK_ENABLE_IMMEDIATE_OFFSET+1];
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: arch/powerpc/kernel/marker.c:16:
+	int size = MARK_ENABLE_IMMEDIATE_OFFSET+sizeof(MARK_ENABLE_TYPE);
 	                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: include/asm-generic/marker.h:1:
+#ifndef _ASM_GENERIC_MARKER_H

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#168: FILE: include/asm-generic/marker.h:26:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#186: FILE: include/asm-i386/marker.h:45:
+#define MARK_ENABLE(a) \
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#186: FILE: include/asm-i386/marker.h:45:
+#define MARK_ENABLE(a) \
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#187: FILE: include/asm-i386/marker.h:46:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#187: FILE: include/asm-i386/marker.h:46:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: include/asm-i386/marker.h:46:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)
 	                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/asm-i386/marker.h:48:
+extern int marker_set_ins_enable(void *address, char enable);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#206: FILE: include/asm-powerpc/marker.h:49:
+#define MARK_ENABLE(a) \
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#206: FILE: include/asm-powerpc/marker.h:49:
+#define MARK_ENABLE(a) \
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#207: FILE: include/asm-powerpc/marker.h:50:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#207: FILE: include/asm-powerpc/marker.h:50:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#207: FILE: include/asm-powerpc/marker.h:50:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)
 	                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/asm-powerpc/marker.h:52:
+extern int marker_set_ins_enable(void *address, char enable);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#268: FILE: include/linux/marker.h:37:
+#define GEN_MARK(name, format, args...) \
+	do { \
+		static marker_probe_func *__mark_call_##name = \
+					__mark_empty_function; \
+		static char __marker_enable_##name = 0; \
+		static const struct __mark_marker_c __mark_c_##name \
+			__attribute__((section(".markers.c"))) = \
+			{ #name, &__mark_call_##name, format, \
+			MARKER_GENERIC } ; \
+		static const struct __mark_marker __mark_##name \
+			__attribute__((section(".markers"))) = \
+			{ &__mark_c_##name, &__marker_enable_##name } ; \
+		asm volatile ( "" : : "i" (&__mark_##name)); \
+		__mark_check_format(format, ## args); \
+		if (unlikely(__marker_enable_##name)) { \
+			preempt_disable(); \
+			(*__mark_call_##name)(format, ## args); \
+			preempt_enable(); \
+		} \
+	} while (0)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#272: FILE: include/linux/marker.h:41:
+		static char __marker_enable_##name = 0; \

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".markers.c") over __attribute__((section(".markers.c")))
#274: FILE: include/linux/marker.h:43:
+			__attribute__((section(".markers.c"))) = \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".markers") over __attribute__((section(".markers")))
#278: FILE: include/linux/marker.h:47:
+			__attribute__((section(".markers"))) = \

ERROR:SPACING: space prohibited after that open parenthesis '('
#280: FILE: include/linux/marker.h:49:
+		asm volatile ( "" : : "i" (&__mark_##name)); \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#292: FILE: include/linux/marker.h:61:
+#define GEN_MARK_ENABLE(a) \
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#292: FILE: include/linux/marker.h:61:
+#define GEN_MARK_ENABLE(a) \
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#293: FILE: include/linux/marker.h:62:
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#293: FILE: include/linux/marker.h:62:
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#293: FILE: include/linux/marker.h:62:
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)
 	                                 ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#340: FILE: kernel/Kconfig.marker:10:
+config MARKERS_DISABLE_OPTIMIZATION
+	bool "Disable marker optimization"
+	depends on MARKERS && EMBEDDED
+	default n
 	help
 	  Disable code replacement jump optimisations. Especially useful if your
 	  code is in a read-only rom/flash.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 7 warnings, 12 checks, 281 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
