WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
>    git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-fixes-for-linus

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#417: FILE: MAINTAINERS:2577:
+P:	Eduard - Gabriel Munteanu
+M:	eduard.munteanu@linux360.ro

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/linux/slab_def.h:33:
+extern void *kmem_cache_alloc_notrace(struct kmem_cache *cachep, gfp_t flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: include/linux/slab_def.h:34:
+extern size_t slab_buffer_size(struct kmem_cache *cachep);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#477: FILE: include/linux/slab_def.h:41:
+}
+static inline size_t slab_buffer_size(struct kmem_cache *cachep)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: include/linux/slab_def.h:92:
+extern void *kmem_cache_alloc_node_notrace(struct kmem_cache *cachep,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: include/linux/slub_def.h:209:
+extern void *kmem_cache_alloc_notrace(struct kmem_cache *s, gfp_t gfpflags);

CHECK:SPACING: No space is necessary after a cast
#629: FILE: include/linux/slub_def.h:221:
+	void *ret = (void *) __get_free_pages(flags | __GFP_COMP, order);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#664: FILE: include/linux/slub_def.h:260:
+extern void *kmem_cache_alloc_node_notrace(struct kmem_cache *s,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#705: FILE: include/trace/kmemtrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/trace/kmemtrace.h:23:
+extern void kmemtrace_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#729: FILE: include/trace/kmemtrace.h:25:
+extern void kmemtrace_mark_alloc_node(enum kmemtrace_type_id type_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: include/trace/kmemtrace.h:26:
+extern void kmemtrace_mark_alloc_node(enum kmemtrace_type_id type_id,
+					     unsigned long call_site,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#737: FILE: include/trace/kmemtrace.h:33:
+extern void kmemtrace_mark_free(enum kmemtrace_type_id type_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: include/trace/kmemtrace.h:34:
+extern void kmemtrace_mark_free(enum kmemtrace_type_id type_id,
+				       unsigned long call_site,

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#811: FILE: kernel/relay.c:678:
+			WARN_ONCE(1, KERN_ERR "CPU has no buffer!\n");

WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#834: FILE: kernel/trace/Kconfig:278:
+	  This requires an userspace application to use. See
 	                ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#895: FILE: kernel/trace/kmemtrace.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#926: FILE: kernel/trace/kmemtrace.c:32:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: kernel/trace/kmemtrace.c:39:
+	int cpu;
+	kmemtrace_array = tr;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#954: FILE: kernel/trace/kmemtrace.c:60:
+	seq_printf(s, "#\n");

WARNING:SPLIT_STRING: quoted string split across lines
#956: FILE: kernel/trace/kmemtrace.c:62:
+	seq_printf(s, "# ALLOC  TYPE  REQ   GIVEN  FLAGS     "
+			"      POINTER         NODE    CALLER\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#958: FILE: kernel/trace/kmemtrace.c:64:
+	seq_printf(s, "# FREE   |      |     |       |       "
+			"       |   |            |        |\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#959: FILE: kernel/trace/kmemtrace.c:65:
+	seq_printf(s, "# |\n\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: kernel/trace/kmemtrace.c:74:
+kmemtrace_print_alloc_original(struct trace_iterator *iter,
+				struct kmemtrace_alloc_entry *entry)

WARNING:SPLIT_STRING: quoted string split across lines
#975: FILE: kernel/trace/kmemtrace.c:81:
+	ret = trace_seq_printf(s, "type_id %d call_site %lu ptr %lu "
+	  "bytes_req %lu bytes_alloc %lu gfp_flags %lu node %d\n",

CHECK:SPACING: No space is necessary after a cast
#976: FILE: kernel/trace/kmemtrace.c:82:
+	   entry->type_id, entry->call_site, (unsigned long) entry->ptr,

CHECK:SPACING: No space is necessary after a cast
#977: FILE: kernel/trace/kmemtrace.c:83:
+	   (unsigned long) entry->bytes_req, (unsigned long) entry->bytes_alloc,

CHECK:SPACING: No space is necessary after a cast
#978: FILE: kernel/trace/kmemtrace.c:84:
+	   (unsigned long) entry->gfp_flags, entry->node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: kernel/trace/kmemtrace.c:94:
+kmemtrace_print_free_original(struct trace_iterator *iter,
+				struct kmemtrace_free_entry *entry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: kernel/trace/kmemtrace.c:101:
+	ret = trace_seq_printf(s, "type_id %d call_site %lu ptr %lu\n",
+	   entry->type_id, entry->call_site, (unsigned long) entry->ptr);

CHECK:SPACING: No space is necessary after a cast
#995: FILE: kernel/trace/kmemtrace.c:101:
+	   entry->type_id, entry->call_site, (unsigned long) entry->ptr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1003: FILE: kernel/trace/kmemtrace.c:109:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: kernel/trace/kmemtrace.c:113:
+kmemtrace_print_alloc_compress(struct trace_iterator *iter,
+					struct kmemtrace_alloc_entry *entry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: kernel/trace/kmemtrace.c:181:
+kmemtrace_print_free_compress(struct trace_iterator *iter,
+				struct kmemtrace_free_entry *entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1136: FILE: kernel/trace/kmemtrace.c:242:
+		struct kmemtrace_alloc_entry *field;
+		trace_assign_type(field, entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1145: FILE: kernel/trace/kmemtrace.c:251:
+		struct kmemtrace_free_entry *field;
+		trace_assign_type(field, entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1159: FILE: kernel/trace/kmemtrace.c:265:
+void kmemtrace_mark_alloc_node(enum kmemtrace_type_id type_id,
+			     unsigned long call_site,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1196: FILE: kernel/trace/kmemtrace.c:302:
+void kmemtrace_mark_free(enum kmemtrace_type_id type_id,
+		       unsigned long call_site,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2267: FILE: kernel/trace/trace.h:499:
+extern char *trace_find_cmdline(int pid);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2371: FILE: kernel/trace/trace_branch.c:184:
 
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2373: FILE: kernel/trace/trace_branch.c:186:
+^I.type^I ^I= TRACE_BRANCH,$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2393: FILE: kernel/trace/trace_branch.c:219:
+extern unsigned long __start_annotated_branch_profile[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2394: FILE: kernel/trace/trace_branch.c:220:
+extern unsigned long __stop_annotated_branch_profile[];

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2414: FILE: kernel/trace/trace_branch.c:224:
+	seq_printf(m, " correct incorrect  %% ");

WARNING:SPLIT_STRING: quoted string split across lines
#2416: FILE: kernel/trace/trace_branch.c:226:
+	seq_printf(m, "       Function                "
+			      "  File              Line\n"

WARNING:SPLIT_STRING: quoted string split across lines
#2418: FILE: kernel/trace/trace_branch.c:228:
+			      " ------- ---------  - "
+			      "       --------                "

WARNING:SPLIT_STRING: quoted string split across lines
#2419: FILE: kernel/trace/trace_branch.c:229:
+			      "       --------                "
+			      "  ----              ----\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2435: FILE: kernel/trace/trace_branch.c:237:
+	if (p->correct) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2438: FILE: kernel/trace/trace_branch.c:240:
+	} else

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2566: FILE: kernel/trace/trace_branch.c:323:
+extern unsigned long __start_branch_profile[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2567: FILE: kernel/trace/trace_branch.c:324:
+extern unsigned long __stop_branch_profile[];

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2575: FILE: kernel/trace/trace_branch.c:328:
+	seq_printf(m, "   miss      hit    %% ");

WARNING:SPLIT_STRING: quoted string split across lines
#2577: FILE: kernel/trace/trace_branch.c:330:
+	seq_printf(m, "       Function                "
+			      "  File              Line\n"

WARNING:SPLIT_STRING: quoted string split across lines
#2579: FILE: kernel/trace/trace_branch.c:332:
+			      " ------- ---------  - "
+			      "       --------                "

WARNING:SPLIT_STRING: quoted string split across lines
#2580: FILE: kernel/trace/trace_branch.c:333:
+			      "       --------                "
+			      "  ----              ----\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2644: FILE: kernel/trace/trace_branch.c:378:
+static struct tracer branch_trace __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#2668: FILE: kernel/trace/trace_branch.c:402:
+	int ret;
+	ret = register_ftrace_event(&trace_branch_event);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2670: FILE: kernel/trace/trace_branch.c:404:
+		printk(KERN_WARNING "Warning: could not register branch events\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2744: FILE: kernel/trace/trace_output.c:1:
+/*

WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#2771: FILE: kernel/trace/trace_output.c:28:
+ * copy to user routines. To simplify formating of a trace
                                       ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2852: FILE: kernel/trace/trace_output.c:109:
+	for (i = len-1, j = 0; i >= 0; i--) {
 	            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3051: FILE: kernel/trace/trace_output.c:308:
+	unsigned key;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3080: FILE: kernel/trace/trace_output.c:337:
+	unsigned key;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3085: FILE: kernel/trace/trace_output.c:342:
+	if (!event->type)
[...]
+	else if (event->type > __TRACE_LAST_TYPE) {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3088: FILE: kernel/trace/trace_output.c:345:
+		printk(KERN_WARNING "Need to add type to trace.h\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3221: FILE: kernel/trace/trace_output.c:478:
+^I.type^I ^I= TRACE_FN,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3305: FILE: kernel/trace/trace_output.c:562:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3360: FILE: kernel/trace/trace_output.c:617:
+^I.type^I ^I= TRACE_CTX,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3369: FILE: kernel/trace/trace_output.c:626:
+^I.type^I ^I= TRACE_WAKE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3423: FILE: kernel/trace/trace_output.c:680:
+^I.type^I ^I= TRACE_SPECIAL,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3460: FILE: kernel/trace/trace_output.c:717:
+^I.type^I ^I= TRACE_STACK,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3490: FILE: kernel/trace/trace_output.c:747:
+^I.type^I ^I= TRACE_USER_STACK,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3538: FILE: kernel/trace/trace_output.c:795:
+^I.type^I ^I= TRACE_PRINT,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3567: FILE: kernel/trace/trace_output.c:824:
+			printk(KERN_WARNING "event %d failed to register\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3582: FILE: kernel/trace/trace_output.h:1:
+#ifndef __TRACE_EVENTS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3600: FILE: kernel/trace/trace_output.h:19:
+extern int trace_seq_printf(struct trace_seq *s, const char *fmt, ...);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3603: FILE: kernel/trace/trace_output.h:22:
+seq_print_ip_sym(struct trace_seq *s, unsigned long ip,
+		unsigned long sym_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3604: FILE: kernel/trace/trace_output.h:23:
+extern ssize_t trace_seq_to_user(struct trace_seq *s, char __user *ubuf,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3624: FILE: kernel/trace/trace_output.h:43:
+#define HEX_CHARS		(MAX_MEMHEX_BYTES*2 + 1)
                  		                 ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3626: FILE: kernel/trace/trace_output.h:45:
+#define SEQ_PUT_FIELD_RET(s, x)				\
+do {							\
+	if (!trace_seq_putmem(s, &(x), sizeof(x)))	\
+		return 0;				\
+} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3632: FILE: kernel/trace/trace_output.h:51:
+#define SEQ_PUT_HEX_FIELD_RET(s, x)			\
+do {							\
+	BUILD_BUG_ON(sizeof(x) > MAX_MEMHEX_BYTES);	\
+	if (!trace_seq_putmem_hex(s, &(x), sizeof(x)))	\
+		return 0;				\
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3671: FILE: kernel/trace/trace_stat.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3681: FILE: kernel/trace/trace_stat.c:11:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3687: FILE: kernel/trace/trace_stat.c:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3709: FILE: kernel/trace/trace_stat.c:39:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3753: FILE: kernel/trace/trace_stat.c:83:
+	if (!current_tracer.stat_start || !current_tracer.stat_next ||
+					!current_tracer.stat_show)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_entry)...) over kmalloc(sizeof(struct trace_stat_list)...)
#3763: FILE: kernel/trace/trace_stat.c:93:
+	new_entry = kmalloc(sizeof(struct trace_stat_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_entry)...) over kmalloc(sizeof(struct trace_stat_list)...)
#3780: FILE: kernel/trace/trace_stat.c:110:
+		new_entry = kmalloc(sizeof(struct trace_stat_list), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3796: FILE: kernel/trace/trace_stat.c:126:
+			if (current_tracer.stat_cmp(new_entry->stat,
+						iter_entry->stat) > 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3797: FILE: kernel/trace/trace_stat.c:127:
+						iter_entry->stat) > 0) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3799: FILE: kernel/trace/trace_stat.c:129:
+				list_add_tail(&new_entry->list,
+						&iter_entry->list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3822: FILE: kernel/trace/trace_stat.c:152:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3872: FILE: kernel/trace/trace_stat.c:202:
+		struct seq_file *m = file->private_data;
+		m->private = &stat_list;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3879: FILE: kernel/trace/trace_stat.c:209:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3906: FILE: kernel/trace/trace_stat.c:236:
+	entry = debugfs_create_file("trace_stat", 0444, d_tracing,
+					NULL,

WARNING:SPLIT_STRING: quoted string split across lines
#3910: FILE: kernel/trace/trace_stat.c:240:
+		pr_warning("Could not create debugfs "
+			   "'trace_stat' entry\n");

CHECK:SPACING: No space is necessary after a cast
#4007: FILE: mm/slab.c:3657:
+				  (unsigned long) caller, ret,

CHECK:SPACING: No space is necessary after a cast
#4034: FILE: mm/slab.c:3709:
+			     (unsigned long) caller, ret,

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#4309: FILE: mm/slub.c:3289:
+	/* Honor the call site pointer we recieved. */
 	                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#4331: FILE: mm/slub.c:3312:
+	/* Honor the call site pointer we recieved. */
 	                                  ^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000184485.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 50 warnings, 50 checks, 3953 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000184485.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
