WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#32: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: drivers/regulator/reg-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#82: FILE: drivers/regulator/reg-core.c:46:
+	struct mutex mutex;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#91: FILE: drivers/regulator/reg-core.c:55:
+};
+#define to_rcdev(cd) \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#132: FILE: drivers/regulator/reg-core.c:96:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: drivers/regulator/reg-core.c:97:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,
+			rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#137: FILE: drivers/regulator/reg-core.c:101:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/regulator/reg-core.c:102:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",
+			__func__, rcdev->desc->name);

CHECK:CAMELCASE: Avoid CamelCase: <max_uV>
#141: FILE: drivers/regulator/reg-core.c:105:
+	if (uV > rcdev->constraints->max_uV ||

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: drivers/regulator/reg-core.c:106:
+	if (uV > rcdev->constraints->max_uV ||
+		uV < rcdev->constraints->min_uV) {

CHECK:CAMELCASE: Avoid CamelCase: <min_uV>
#142: FILE: drivers/regulator/reg-core.c:106:
+		uV < rcdev->constraints->min_uV) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#143: FILE: drivers/regulator/reg-core.c:107:
+		printk(KERN_ERR "%s: invalid voltage %duV for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: drivers/regulator/reg-core.c:108:
+		printk(KERN_ERR "%s: invalid voltage %duV for %s\n",
+			__func__, uV, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#153: FILE: drivers/regulator/reg-core.c:117:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/regulator/reg-core.c:118:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,
+			rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#158: FILE: drivers/regulator/reg-core.c:122:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: drivers/regulator/reg-core.c:123:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",
+			__func__, rcdev->desc->name);

CHECK:CAMELCASE: Avoid CamelCase: <max_uA>
#162: FILE: drivers/regulator/reg-core.c:126:
+	if (uA > rcdev->constraints->max_uA ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/regulator/reg-core.c:127:
+	if (uA > rcdev->constraints->max_uA ||
+		uA < rcdev->constraints->min_uA) {

CHECK:CAMELCASE: Avoid CamelCase: <min_uA>
#163: FILE: drivers/regulator/reg-core.c:127:
+		uA < rcdev->constraints->min_uA) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#164: FILE: drivers/regulator/reg-core.c:128:
+		printk(KERN_ERR "%s: invalid current %duA for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: drivers/regulator/reg-core.c:129:
+		printk(KERN_ERR "%s: invalid current %duA for %s\n",
+			__func__, uA, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#174: FILE: drivers/regulator/reg-core.c:138:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: drivers/regulator/reg-core.c:139:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,
+			rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#179: FILE: drivers/regulator/reg-core.c:143:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: drivers/regulator/reg-core.c:144:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",
+			__func__, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#184: FILE: drivers/regulator/reg-core.c:148:
+		printk(KERN_ERR "%s: invalid mode %x for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: drivers/regulator/reg-core.c:149:
+		printk(KERN_ERR "%s: invalid mode %x for %s\n",
+			__func__, mode, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#194: FILE: drivers/regulator/reg-core.c:158:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: drivers/regulator/reg-core.c:159:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,
+			rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#199: FILE: drivers/regulator/reg-core.c:163:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/regulator/reg-core.c:164:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",
+			__func__, rcdev->desc->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: drivers/regulator/reg-core.c:171:
+static ssize_t dev_load_show(struct device *dev,
+	struct device_attribute *attr, char *buf)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#212: FILE: drivers/regulator/reg-core.c:176:
+	if (regulator == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <uA_load>
#215: FILE: drivers/regulator/reg-core.c:179:
+	return sprintf(buf, "%d\n", regulator->uA_load);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#270: FILE: drivers/regulator/reg-core.c:234:
+	return sprintf (buf, "%d %d\n", rcdev->constraints->min_uA,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#281: FILE: drivers/regulator/reg-core.c:245:
+	return sprintf (buf, "%d %d\n", rcdev->constraints->min_uV,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#294: FILE: drivers/regulator/reg-core.c:258:
+		count = sprintf (buf, "fast ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#296: FILE: drivers/regulator/reg-core.c:260:
+		count += sprintf (buf + count, "normal ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#298: FILE: drivers/regulator/reg-core.c:262:
+		count += sprintf (buf + count, "idle ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: drivers/regulator/reg-core.c:264:
+		count += sprintf (buf + count, "standby");

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#312: FILE: drivers/regulator/reg-core.c:276:
+		uA =+ regulator->uA_load;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:OxW)
#312: FILE: drivers/regulator/reg-core.c:276:
+		uA =+ regulator->uA_load;
 		    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: drivers/regulator/reg-core.c:283:
+	struct regulator_cdev *rcdev = to_rcdev(cdev);
+	return sprintf(buf, "%d\n", rcdev->use_count);

CHECK:CAMELCASE: Avoid CamelCase: <uV_required>
#364: FILE: drivers/regulator/reg-core.c:328:
+		if (regulator->enabled && regulator->uV_required > highest_uV)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#371: FILE: drivers/regulator/reg-core.c:335:
+ * support all the client devices */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#384: FILE: drivers/regulator/reg-core.c:348:
+static void regulator_load_change (struct regulator_cdev *rcdev)

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#391: FILE: drivers/regulator/reg-core.c:355:
+	if (err < 0 || !rcdev->desc->ops->get_optimum_mode ||
+		!rcdev->desc->ops->get_voltage || !rcdev->desc->ops->set_mode);
+		return;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#391: FILE: drivers/regulator/reg-core.c:355:
+	if (err < 0 || !rcdev->desc->ops->get_optimum_mode ||
+		!rcdev->desc->ops->get_voltage || !rcdev->desc->ops->set_mode);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: drivers/regulator/reg-core.c:356:
+	if (err < 0 || !rcdev->desc->ops->get_optimum_mode ||
+		!rcdev->desc->ops->get_voltage || !rcdev->desc->ops->set_mode);

CHECK:CAMELCASE: Avoid CamelCase: <input_uV>
#402: FILE: drivers/regulator/reg-core.c:366:
+		input_uV = rcdev->constraints->input_uV;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: drivers/regulator/reg-core.c:391:
+			count = sprintf(buf, "%d mV ",
+				uV_to_mV(constraints->min_uV));

CHECK:CAMELCASE: Avoid CamelCase: <uV_to_mV>
#427: FILE: drivers/regulator/reg-core.c:391:
+				uV_to_mV(constraints->min_uV));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: drivers/regulator/reg-core.c:394:
+			count = sprintf(buf, "%d <--> %d mV ",
+				uV_to_mV(constraints->min_uV),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: drivers/regulator/reg-core.c:399:
+			count = sprintf(buf, "%d mA ",
+				uA_to_mA(constraints->min_uA));

CHECK:CAMELCASE: Avoid CamelCase: <uA_to_mA>
#435: FILE: drivers/regulator/reg-core.c:399:
+				uA_to_mA(constraints->min_uA));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: drivers/regulator/reg-core.c:402:
+			count = sprintf(buf, "%d <--> %d mA ",
+				uA_to_mA(constraints->min_uA),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#442: FILE: drivers/regulator/reg-core.c:406:
+		count += sprintf (buf + count, "fast ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: drivers/regulator/reg-core.c:408:
+		count += sprintf (buf + count, "normal ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#446: FILE: drivers/regulator/reg-core.c:410:
+		count += sprintf (buf + count, "idle ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#448: FILE: drivers/regulator/reg-core.c:412:
+		count += sprintf (buf + count, "standby");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#450: FILE: drivers/regulator/reg-core.c:414:
+	printk(KERN_INFO "regulator: %s: %s\n", rcdev->desc->name, buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: drivers/regulator/reg-core.c:418:
+static struct regulator *create_regulator(struct regulator_cdev *rcdev,
+	struct device *dev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#461: FILE: drivers/regulator/reg-core.c:425:
+	if (regulator == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#468: FILE: drivers/regulator/reg-core.c:432:
+	if (dev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator->dev_attr.attr.name"
#473: FILE: drivers/regulator/reg-core.c:437:
+	if (regulator->dev_attr.attr.name == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#480: FILE: drivers/regulator/reg-core.c:444:
+		printk(KERN_WARNING "%s: could not add regulator_cdev load"

WARNING:SPLIT_STRING: quoted string split across lines
#481: FILE: drivers/regulator/reg-core.c:445:
+		printk(KERN_WARNING "%s: could not add regulator_cdev load"
+		" sysfs\n", __func__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: drivers/regulator/reg-core.c:449:
+	err = sysfs_create_link(&rcdev->cdev.kobj, &dev->kobj,
+		dev->kobj.name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#487: FILE: drivers/regulator/reg-core.c:451:
+		printk(KERN_WARNING "%s : could not add device link %s err %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: drivers/regulator/reg-core.c:452:
+		printk(KERN_WARNING "%s : could not add device link %s err %d\n",
+			__func__, dev->kobj.name, err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#505: FILE: drivers/regulator/reg-core.c:469:
+	if (id == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: drivers/regulator/reg-core.c:475:
+		if (strcmp(id, rcdev->desc->name) == 0 &&
+			try_module_get(rcdev->owner)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#515: FILE: drivers/regulator/reg-core.c:479:
+	printk(KERN_ERR "regulator: Unable to get requested regulator: %s\n", id);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#521: FILE: drivers/regulator/reg-core.c:485:
+	if (regulator == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#535: FILE: drivers/regulator/reg-core.c:499:
+	if (regulator == NULL || IS_ERR(regulator))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#557: FILE: drivers/regulator/reg-core.c:521:
+	 * it's parent, mode and required voltage */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#562: FILE: drivers/regulator/reg-core.c:526:
+				printk(KERN_ERR "%s: failed to enable %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/regulator/reg-core.c:527:
+				printk(KERN_ERR "%s: failed to enable %s\n",
+					__func__, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#570: FILE: drivers/regulator/reg-core.c:534:
+				printk(KERN_ERR "%s: invalid voltage for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/regulator/reg-core.c:535:
+				printk(KERN_ERR "%s: invalid voltage for %s\n",
+					__func__, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: drivers/regulator/reg-core.c:541:
+				printk(KERN_ERR "%s: failed to enable %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: drivers/regulator/reg-core.c:542:
+				printk(KERN_ERR "%s: failed to enable %s\n",
+					__func__, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#585: FILE: drivers/regulator/reg-core.c:549:
+			printk(KERN_ERR "%s: invalid voltage for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: drivers/regulator/reg-core.c:550:
+			printk(KERN_ERR "%s: invalid voltage for %s\n",
+				__func__, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#619: FILE: drivers/regulator/reg-core.c:583:
+				printk(KERN_ERR "%s: failed to disable %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: drivers/regulator/reg-core.c:584:
+				printk(KERN_ERR "%s: failed to disable %s\n",
+					__func__, rcdev->desc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: drivers/regulator/reg-core.c:599:
+		printk(KERN_ERR "%s: tried to disable too many times\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/regulator/reg-core.c:600:
+		printk(KERN_ERR "%s: tried to disable too many times\n",
+			__func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: drivers/regulator/reg-core.c:795:
+static unsigned int _regulator_get_optimum_mode(struct regulator_cdev *rcdev,
+	int input_uV, int output_uV, int load_uA)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: drivers/regulator/reg-core.c:815:
+unsigned int regulator_get_optimum_mode(struct regulator *regulator,
+	int input_uV, int output_uV, int load_uA)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: drivers/regulator/reg-core.c:823:
+int regulator_register_client(struct regulator *regulator,
+	struct notifier_block *nb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/regulator/reg-core.c:830:
+int regulator_unregister_client(struct regulator *regulator,
+	struct notifier_block *nb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: drivers/regulator/reg-core.c:837:
+int regulator_notifier_call_chain(struct regulator_cdev *rcdev,
+	unsigned long event, void *data)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#879: FILE: drivers/regulator/reg-core.c:843:
+struct regulator_cdev *regulator_register(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc"
#886: FILE: drivers/regulator/reg-core.c:850:
+	if (regulator_desc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc->name"
#889: FILE: drivers/regulator/reg-core.c:853:
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc->ops"
#889: FILE: drivers/regulator/reg-core.c:853:
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: drivers/regulator/reg-core.c:857:
+	if (!regulator_desc->type == REGULATOR_VOLTAGE &&
+		!regulator_desc->type == REGULATOR_CURRENT)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rcdev)...) over kzalloc(sizeof(struct regulator_cdev)...)
#896: FILE: drivers/regulator/reg-core.c:860:
+	rcdev = kzalloc(sizeof(struct regulator_cdev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcdev"
#897: FILE: drivers/regulator/reg-core.c:861:
+	if (rcdev == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: drivers/regulator/reg-core.c:877:
+	snprintf(rcdev->cdev.class_id, sizeof(rcdev->cdev.class_id),
+		"regulator-%ld-%s",

CHECK:SPACING: No space is necessary after a cast
#914: FILE: drivers/regulator/reg-core.c:878:
+		(unsigned long) atomic_inc_return(&regulator_no) - 1,

CHECK:BRACES: braces {} should be used on all arms of this statement
#918: FILE: drivers/regulator/reg-core.c:882:
+	if (ret == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#920: FILE: drivers/regulator/reg-core.c:884:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcdev"
#931: FILE: drivers/regulator/reg-core.c:895:
+	if (rcdev == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: drivers/regulator/reg-core.c:909:
+int regulator_set_platform_source(const char *regulator_source,
+	const char *regulator_parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_source"
#950: FILE: drivers/regulator/reg-core.c:914:
+	if (regulator_source == NULL || regulator_parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_parent"
#950: FILE: drivers/regulator/reg-core.c:914:
+	if (regulator_source == NULL || regulator_parent == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: drivers/regulator/reg-core.c:937:
+	err = sysfs_create_link(&source_rcdev->cdev.kobj, &parent_rcdev->cdev.kobj,
+		"source");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#975: FILE: drivers/regulator/reg-core.c:939:
+		printk(KERN_WARNING "%s : could not add device link %s err %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: drivers/regulator/reg-core.c:940:
+		printk(KERN_WARNING "%s : could not add device link %s err %d\n",
+			__func__, parent_rcdev->cdev.kobj.name, err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_name"
#986: FILE: drivers/regulator/reg-core.c:950:
+	if (regulator_name == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: drivers/regulator/reg-core.c:971:
+int regulator_set_platform_constraints(const char *regulator_name,
+	struct regulation_constraints *constraints)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_name"
#1011: FILE: drivers/regulator/reg-core.c:975:
+	if (regulator_name == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1036: FILE: drivers/regulator/reg-core.c:1000:
+	regulator_load_change (rcdev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1053: FILE: drivers/regulator/reg-core.c:1017:
+int rcdev_get_id (struct regulator_cdev *rcdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1059: FILE: drivers/regulator/reg-core.c:1023:
+void *rcdev_get_drvdata (struct regulator_cdev *rcdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1067: FILE: drivers/regulator/reg-core.c:1031:
+	printk(KERN_INFO "regulator: core version %s\n", REGULATOR_VERSION);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320849.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 45 warnings, 73 checks, 1036 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320849.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
