WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
are maintained in a cache. Subsequently when the entries from the bottom layers

WARNING:TYPO_SPELLING: 'maitained' may be misspelled - perhaps 'maintained'?
#44: 
But union directory cache is not maitained across these calls. Instead
                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#46: 
and newly read entires are compared against these for duplicates before
               ^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#75: FILE: fs/aio.c:493:
+		 * __fput no longer releases the dentry and vfsmnt, thanks to
+		 * to union mount. Hence do this manually.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#146: FILE: fs/union.c:967:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#175: FILE: fs/union.c:996:
+		printk(KERN_CRIT

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#175: FILE: fs/union.c:996:
+	if (!this) {
+		printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'union_cache_add_entry', this function's name, in a string
#176: FILE: fs/union.c:997:
+		       "union_cache_add_entry(): out of kernel memory\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#182: FILE: fs/union.c:1003:
+		printk(KERN_CRIT

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#182: FILE: fs/union.c:1003:
+	if (!tmp_name) {
+		printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'union_cache_add_entry', this function's name, in a string
#183: FILE: fs/union.c:1004:
+		       "union_cache_add_entry(): out of kernel memory\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#215: FILE: fs/union.c:1036:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: fs/union.c:1166:
+static struct file * __dentry_open_read(struct dentry *dentry,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#357: FILE: fs/union.c:1178:
+	f->f_mode = ((flags+1) & O_ACCMODE) | FMODE_LSEEK |
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: fs/union.c:1181:
+	BUG_ON(f->f_mode & FMODE_WRITE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: fs/union.c:1190:
+		error = f->f_op->open(inode,f);
 		                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: fs/union.c:1271:
+		 * only */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#509: FILE: fs/union.c:1330:
+			 * only */

WARNING:INDENTED_LABEL: labels should not be indented
#524: FILE: fs/union.c:1345:
+	out_fput:

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#543: FILE: include/linux/union.h:32:
+extern int readdir_union(struct file *, void *, filldir_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#543: FILE: include/linux/union.h:32:
+extern int readdir_union(struct file *, void *, filldir_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#543: FILE: include/linux/union.h:32:
+extern int readdir_union(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'filldir_t' should also have an identifier name
#543: FILE: include/linux/union.h:32:
+extern int readdir_union(struct file *, void *, filldir_t);

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: include/linux/union.h:69:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444412.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 18 warnings, 4 checks, 490 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444412.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
