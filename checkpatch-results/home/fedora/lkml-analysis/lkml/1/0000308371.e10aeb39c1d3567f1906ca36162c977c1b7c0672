CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#56: FILE: arch/x86/kernel/smp_32.c:490:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#83: FILE: arch/x86/kernel/smp_32.c:516:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#86: FILE: arch/x86/kernel/smp_32.c:519:
+};
+static DEFINE_PER_CPU(struct call_single_queue, call_single_queue);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct call_data)...)
#175: FILE: arch/x86/kernel/smp_32.c:584:
+	data = kmalloc(sizeof(struct call_data), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#176: FILE: arch/x86/kernel/smp_32.c:585:
+	if (unlikely(!data)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: arch/x86/kernel/smp_32.c:591:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: arch/x86/kernel/smp_32.c:683:
+int smp_call_function_single(int cpu, void (*func) (void *info), void *info,
+			      int nonatomic, int wait)

WARNING:MEMORY_BARRIER: memory barrier without comment
#388: FILE: arch/x86/kernel/smp_32.c:792:
+				smp_wmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#426: FILE: arch/x86/kernel/smp_32.c:827:
+		if (data->flags & CALL_WAIT) {
[...]
+		} else if (data->flags & CALL_DATA_ALLOC)
[...]

WARNING:MEMORY_BARRIER: memory barrier without comment
#427: FILE: arch/x86/kernel/smp_32.c:828:
+			smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: arch/x86/kernel/smpboot_32.c:1310:
+	set_intr_gate(CALL_FUNCTION_SINGLE_VECTOR,
+					call_function_single_interrupt);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308371.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 9 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308371.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
