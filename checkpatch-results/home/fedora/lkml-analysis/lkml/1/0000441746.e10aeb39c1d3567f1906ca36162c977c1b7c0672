WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#42: FILE: arch/x86_64/Kconfig:690:
+config DMAR
+	bool "Support for DMA Remapping Devices (EXPERIMENTAL)"
+	depends on PCI_MSI && ACPI && EXPERIMENTAL
+	help
+	  Support DMA Remapping Devices. The devices are reported via
+	  ACPI tables and includes pci device scope under each DMA
+	  remapping device.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: drivers/pci/dmar.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: drivers/pci/dmar.c:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: drivers/pci/dmar.c:59:
+static int dmar_pci_device_match(struct pci_dev *devices[], int cnt,
+			     struct pci_dev *dev)

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#133: FILE: drivers/pci/dmar.c:64:
+		for (index = 0; index < cnt; index ++)
 		                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: drivers/pci/dmar.c:75:
+struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: drivers/pci/dmar.c:81:
+		if (drhd->include_all || dmar_pci_device_match(drhd->devices,
+						drhd->devices_cnt, dev))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: drivers/pci/dmar.c:88:
+struct dmar_rmrr_unit * dmar_find_matched_rmrr_unit(struct pci_dev *dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/pci/dmar.c:94:
+		if (dmar_pci_device_match(rmrr->devices,
+						rmrr->devices_cnt, dev))

CHECK:SPACING: spaces preferred around that '/' (ctx:ExV)
#182: FILE: drivers/pci/dmar.c:113:
+		/sizeof(struct acpi_dmar_pci_path);
 		^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#192: FILE: drivers/pci/dmar.c:123:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#199: FILE: drivers/pci/dmar.c:130:
+			printk(KERN_WARNING PREFIX

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#204: FILE: drivers/pci/dmar.c:135:
+		path ++;
 		     ^

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#205: FILE: drivers/pci/dmar.c:136:
+		count --;
 		      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#209: FILE: drivers/pci/dmar.c:140:
+		printk(KERN_WARNING PREFIX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#216: FILE: drivers/pci/dmar.c:147:
+	if ((scope->entry_type == ACPI_DMAR_SCOPE_TYPE_ENDPOINT && pdev->subordinate)
+	   || (scope->entry_type == ACPI_DMAR_SCOPE_TYPE_BRIDGE && !pdev->subordinate)) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#218: FILE: drivers/pci/dmar.c:149:
+		printk(KERN_WARNING PREFIX "Device scope type does not match for %s\n", pci_name(pdev));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#218: FILE: drivers/pci/dmar.c:149:
+		printk(KERN_WARNING PREFIX "Device scope type does not match for %s\n", pci_name(pdev));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: drivers/pci/dmar.c:160:
+	void * tmp = start;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#240: FILE: drivers/pci/dmar.c:171:
+			printk(KERN_WARNING PREFIX "Unsupported device scope\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: drivers/pci/dmar.c:188:
+			ret = dmar_parse_one_dev_scope(scope,
+				&(*devices)[index], segment);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#262: FILE: drivers/pci/dmar.c:193:
+			index ++;
 			      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: drivers/pci/dmar.c:204:
+	struct acpi_dmar_hardware_unit * drhd = (struct acpi_dmar_hardware_unit *)header;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: drivers/pci/dmar.c:218:
+		ret = dmar_parse_dev_scope((void *)(drhd + 1),
+				((void *)drhd) + header->length,

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: drivers/pci/dmar.c:221:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#293: FILE: drivers/pci/dmar.c:224:
+			printk(KERN_WARNING PREFIX "Only one INCLUDE_ALL "

WARNING:SPLIT_STRING: quoted string split across lines
#294: FILE: drivers/pci/dmar.c:225:
+			printk(KERN_WARNING PREFIX "Only one INCLUDE_ALL "
+				"device scope is allowed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: drivers/pci/dmar.c:252:
+	ret = dmar_parse_dev_scope((void *)(rmrr + 1),
+		((void*)rmrr) + header->length,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#321: FILE: drivers/pci/dmar.c:252:
+		((void*)rmrr) + header->length,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rmrru->devices_cnt == 0'
#324: FILE: drivers/pci/dmar.c:255:
+	if (ret || (rmrru->devices_cnt == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#340: FILE: drivers/pci/dmar.c:271:
+		printk (KERN_INFO PREFIX

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#340: FILE: drivers/pci/dmar.c:271:
+		printk (KERN_INFO PREFIX

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#341: FILE: drivers/pci/dmar.c:272:
+			"DRHD (flags: 0x%08x)base: 0x%016Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#347: FILE: drivers/pci/dmar.c:278:
+		printk (KERN_INFO PREFIX

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: drivers/pci/dmar.c:278:
+		printk (KERN_INFO PREFIX

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#348: FILE: drivers/pci/dmar.c:279:
+			"RMRR base: 0x%016Lx end: 0x%016Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#363: FILE: drivers/pci/dmar.c:294:
+		printk (KERN_WARNING PREFIX "Unable to map DMAR\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#363: FILE: drivers/pci/dmar.c:294:
+		printk (KERN_WARNING PREFIX "Unable to map DMAR\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#368: FILE: drivers/pci/dmar.c:299:
+		printk (KERN_WARNING PREFIX "Zero: Invalid DMAR haw\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#368: FILE: drivers/pci/dmar.c:299:
+		printk (KERN_WARNING PREFIX "Zero: Invalid DMAR haw\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#373: FILE: drivers/pci/dmar.c:304:
+	printk (KERN_INFO PREFIX "Host address width %d\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: drivers/pci/dmar.c:304:
+	printk (KERN_INFO PREFIX "Host address width %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#388: FILE: drivers/pci/dmar.c:319:
+			printk(KERN_WARNING PREFIX "Unknown DMAR structure type\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#407: FILE: drivers/pci/dmar.c:338:
+	return (ACPI_SUCCESS(status) ? 1 : 0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#412: FILE: drivers/pci/dmar.c:343:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#415: FILE: drivers/pci/dmar.c:346:
+		printk(KERN_ERR PREFIX "No DMAR devices found\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#425: FILE: drivers/pci/dmar.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#438: FILE: drivers/pci/dmar.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rmrr' - possible side-effects?
#474: FILE: drivers/pci/dmar.h:50:
+#define for_each_rmrr_device(rmrr, pdev) \
+	list_for_each_entry(rmrr, &dmar_rmrr_units, list) { \
+		int _i; \
+		for (_i = 0; _i < rmrr->devices_cnt; _i++) { \
+			pdev = rmrr->devices[_i]; \
+			/* some BIOS lists non-exist devices in DMAR table */\
+			if (!pdev) \
+				continue;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pdev' - possible side-effects?
#474: FILE: drivers/pci/dmar.h:50:
+#define for_each_rmrr_device(rmrr, pdev) \
+	list_for_each_entry(rmrr, &dmar_rmrr_units, list) { \
+		int _i; \
+		for (_i = 0; _i < rmrr->devices_cnt; _i++) { \
+			pdev = rmrr->devices[_i]; \
+			/* some BIOS lists non-exist devices in DMAR table */\
+			if (!pdev) \
+				continue;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#474: FILE: drivers/pci/dmar.h:50:
+#define for_each_rmrr_device(rmrr, pdev) \
+	list_for_each_entry(rmrr, &dmar_rmrr_units, list) { \
+		int _i; \
+		for (_i = 0; _i < rmrr->devices_cnt; _i++) { \
+			pdev = rmrr->devices[_i]; \
+			/* some BIOS lists non-exist devices in DMAR table */\
+			if (!pdev) \
+				continue;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#482: FILE: drivers/pci/dmar.h:58:
+#define end_for_each_rmrr_device(rmrr, pdev) \
+		} \
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#486: FILE: drivers/pci/dmar.h:62:
+struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#487: FILE: drivers/pci/dmar.h:63:
+struct dmar_rmrr_unit * dmar_find_matched_rmrr_unit(struct pci_dev *dev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441746.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 26 warnings, 13 checks, 504 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441746.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
