WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Use the getters/setters for 32bit x86 descriptors instead of touching the internal fields directly.

CHECK:BRACES: braces {} should be used on all arms of this statement
#116: FILE: arch/x86/kernel/tls.c:44:
+		if (LDT_empty(info)) {
[...]
 		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#168: FILE: arch/x86/math-emu/fpu_system.h:22:
+#define SEG_D_SIZE(x)		(desc_get_hi(&x) & (3 << 21))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#169: FILE: arch/x86/math-emu/fpu_system.h:23:
+#define SEG_G_BIT(x)		(desc_get_hi(&x) & (1 << 23))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#170: FILE: arch/x86/math-emu/fpu_system.h:24:
+#define SEG_GRANULARITY(x)	((desc_get_hi(&x) & (1 << 23)) ? 4096 : 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#171: FILE: arch/x86/math-emu/fpu_system.h:25:
+#define SEG_286_MODE(x)		(desc_get_hi(&x) & (0xff000000 | 0xf0000 | (1 << 23)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#172: FILE: arch/x86/math-emu/fpu_system.h:26:
+#define SEG_BASE_ADDR(s)	((desc_get_hi(&s) & 0xff000000) \
+				 | ((desc_get_hi(&s) & 0xff) << 16) | (desc_get_lo(&s) >> 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#172: FILE: arch/x86/math-emu/fpu_system.h:26:
+#define SEG_BASE_ADDR(s)	((desc_get_hi(&s) & 0xff000000) \
+				 | ((desc_get_hi(&s) & 0xff) << 16) | (desc_get_lo(&s) >> 16))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#174: FILE: arch/x86/math-emu/fpu_system.h:28:
+#define SEG_LIMIT(s)		((desc_get_hi(&s) & 0xff0000) | (desc_get_lo(&s) & 0xffff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#174: FILE: arch/x86/math-emu/fpu_system.h:28:
+#define SEG_LIMIT(s)		((desc_get_hi(&s) & 0xff0000) | (desc_get_lo(&s) & 0xffff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#175: FILE: arch/x86/math-emu/fpu_system.h:29:
+#define SEG_EXECUTE_ONLY(s)	((desc_get_hi(&s) & ((1 << 11) | (1 << 9))) == (1 << 11))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#176: FILE: arch/x86/math-emu/fpu_system.h:30:
+#define SEG_WRITE_PERM(s)	((desc_get_hi(&s) & ((1 << 11) | (1 << 9))) == (1 << 9))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#177: FILE: arch/x86/math-emu/fpu_system.h:31:
+#define SEG_EXPAND_DOWN(s)	((desc_get_hi(&s) & ((1 << 11) | (1 << 10))) \
 				 == (1 << 10))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#231: FILE: drivers/lguest/interrupts_and_traps.c:381:
+	desc_set_lo(trap, ((__KERNEL_CS|GUEST_PL)<<16) | (lo&0x0000FFFF));
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#231: FILE: drivers/lguest/interrupts_and_traps.c:381:
+	desc_set_lo(trap, ((__KERNEL_CS|GUEST_PL)<<16) | (lo&0x0000FFFF));
 	                                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#231: FILE: drivers/lguest/interrupts_and_traps.c:381:
+	desc_set_lo(trap, ((__KERNEL_CS|GUEST_PL)<<16) | (lo&0x0000FFFF));
 	                                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#232: FILE: drivers/lguest/interrupts_and_traps.c:382:
+	desc_set_hi(trap, (hi&0xFFFFEF00));
 	                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#246: FILE: drivers/lguest/interrupts_and_traps.c:431:
+	desc_set_lo(idt, (LGUEST_CS<<16) | (handler&0x0000FFFF));
 	                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#246: FILE: drivers/lguest/interrupts_and_traps.c:431:
+	desc_set_lo(idt, (LGUEST_CS<<16) | (handler&0x0000FFFF));
 	                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#247: FILE: drivers/lguest/interrupts_and_traps.c:432:
+	desc_set_hi(idt, (handler&0xFFFF0000) | flags);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/lguest/segments.c:122:
+	desc_set_hi(cpu->arch.gdt + GDT_ENTRY_KERNEL_CS,
+		desc_get_hi(cpu->arch.gdt + GDT_ENTRY_KERNEL_CS) | (GUEST_PL << 13));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/lguest/segments.c:124:
+	desc_set_hi(cpu->arch.gdt + GDT_ENTRY_KERNEL_DS,
+		desc_get_hi(cpu->arch.gdt + GDT_ENTRY_KERNEL_DS) | (GUEST_PL << 13));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147680.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 21 checks, 225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147680.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
