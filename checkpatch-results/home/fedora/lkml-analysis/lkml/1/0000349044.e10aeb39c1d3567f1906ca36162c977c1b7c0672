WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#60: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#65: FILE: drivers/block/dst/Kconfig:1:
+config DST
+	tristate "Distributed storage"
+	depends on NET
+	select CONNECTOR
+	select LIBCRC32C
+	---help---
+	This driver allows to create a distributed storage.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: drivers/block/dst/Kconfig:9:
+config DST_DEBUG
+	bool "DST debug"
+	depends on DST
+	---help---
+	This option will turn HEAVY debugging of the DST.
+	Turn it on ONLY if you have to debug some really obscure problem.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: drivers/block/dst/Kconfig:16:
+config DST_ALG_LINEAR
+	tristate "Linear distribution algorithm"
+	depends on DST
+	---help---
+	This module allows to create linear mapping of the nodes
+	in the distributed storage.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#87: FILE: drivers/block/dst/Kconfig:23:
+config DST_ALG_MIRROR
+	tristate "Mirror distribution algorithm"
+	depends on DST
+	---help---
+	This module allows to create a mirror of the noes in the
+	distributed storage.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: drivers/block/dst/dcore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#152: FILE: drivers/block/dst/dcore.c:42:
+static char dst_name[] = "Gamardjoba, genacvale!";

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: drivers/block/dst/dcore.c:75:
+^I.name ^I^I= "dst",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: drivers/block/dst/dcore.c:76:
+^I.match ^I^I= &dst_dev_match,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: drivers/block/dst/dcore.c:80:
+^I.bus ^I^I= &dst_dev_bus_type,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: drivers/block/dst/dcore.c:81:
+^I.release ^I= &dst_dev_release$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: drivers/block/dst/dcore.c:89:
+^I.release ^I= &dst_node_release$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: drivers/block/dst/dcore.c:117:
+	BUG_ON(rb_first(&st->tree_root) != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_first"
#227: FILE: drivers/block/dst/dcore.c:117:
+	BUG_ON(rb_first(&st->tree_root) != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#249: FILE: drivers/block/dst/dcore.c:139:
+ * which are splitted between nodes (part with local node destination
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#280: FILE: drivers/block/dst/dcore.c:170:
+		dprintk("%s: start: %llu, num: %d, idx: %d, offset: %u, "
+				"size: %llu, bi_idx: %d, bi_vcnt: %d.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/block/dst/dcore.c:175:
+		if (likely(bio->bi_idx == req->idx &&
+					bio->bi_vcnt == req->num)) {

WARNING:SPLIT_STRING: quoted string split across lines
#312: FILE: drivers/block/dst/dcore.c:202:
+			dprintk("%s: start: %llu, num: %d, idx: %d, "
+				"offset: %u, size: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#313: FILE: drivers/block/dst/dcore.c:203:
+				"offset: %u, size: %llu, "
+				"bi_idx: %d, bi_vcnt: %d, req: %p, bio: %p.\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#318: FILE: drivers/block/dst/dcore.c:208:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#336: FILE: drivers/block/dst/dcore.c:226:
+	unsigned int bio_sectors = bio->bi_size>>9;
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#347: FILE: drivers/block/dst/dcore.c:237:
+		dprintk("%s: failed to find a node for bio: %p, "
+				"sector: %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/block/dst/dcore.c:243:
+	dprintk("%s: bio: %llu-%llu, dev: %llu-%llu, in sectors.\n",
+			__func__, (u64)bio->bi_sector, (u64)bio->bi_sector+bio_sectors,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#353: FILE: drivers/block/dst/dcore.c:243:
+			__func__, (u64)bio->bi_sector, (u64)bio->bi_sector+bio_sectors,
 			                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#354: FILE: drivers/block/dst/dcore.c:244:
+			n->start, n->start+n->size);
 			                  ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#361: FILE: drivers/block/dst/dcore.c:251:
+	req.flags = (test_bit(DST_NODE_FROZEN, &n->flags))?
 	                                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#362: FILE: drivers/block/dst/dcore.c:252:
+				DST_REQ_ALWAYS_QUEUE:0;
 				                    ^

WARNING:SPLIT_STRING: quoted string split across lines
#405: FILE: drivers/block/dst/dcore.c:295:
+			dprintk("%s: split: start: %llu/%llu, size: %llu, "
+					"total_size: %llu, diff: %u, idx: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#406: FILE: drivers/block/dst/dcore.c:296:
+					"total_size: %llu, diff: %u, idx: %d, "
+					"num: %d, bv_len: %u, bv_offset: %u.\n",

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#422: FILE: drivers/block/dst/dcore.c:312:
+			req.flags = (test_bit(DST_NODE_FROZEN, &n->flags))?
 			                                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#423: FILE: drivers/block/dst/dcore.c:313:
+				DST_REQ_ALWAYS_QUEUE:0;
 				                    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#424: FILE: drivers/block/dst/dcore.c:314:
+			req.orig_size = req.size = diff;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#435: FILE: drivers/block/dst/dcore.c:325:
+			dprintk("%s: next: start: %llu, size: %llu, "
+				"total_size: %llu, diff: %u, idx: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#436: FILE: drivers/block/dst/dcore.c:326:
+				"total_size: %llu, diff: %u, idx: %d, "
+				"num: %d, offset: %u, bv_len: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: drivers/block/dst/dcore.c:327:
+				"num: %d, offset: %u, bv_len: %u, "
+				"bv_offset: %u.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#449: FILE: drivers/block/dst/dcore.c:339:
+				dprintk("%s: failed to find a split node for "
+				  "bio: %p, sector: %llu, start: %llu.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#461: FILE: drivers/block/dst/dcore.c:351:
+			dprintk("%s: req.start: %llu, start: %llu, "
+					"dev_start: %llu, dev_size: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#462: FILE: drivers/block/dst/dcore.c:352:
+					"dev_start: %llu, dev_size: %llu, "
+					"rest_in_node: %llu.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#472: FILE: drivers/block/dst/dcore.c:362:
+	dprintk("%s: last request: start: %llu, size: %llu, "
+			"total_size: %llu.\n", __func__,

WARNING:SPLIT_STRING: quoted string split across lines
#480: FILE: drivers/block/dst/dcore.c:370:
+		dprintk("%s: last: start: %llu/%llu, size: %llu, "
+				"total_size: %llu, idx: %d, num: %d.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#488: FILE: drivers/block/dst/dcore.c:378:
+			BUG_ON(total_size != 0);

WARNING:TYPO_SPELLING: 'spcific' may be misspelled - perhaps 'specific'?
#498: FILE: drivers/block/dst/dcore.c:388:
+ * It calls algorithm spcific remapping code only.
                       ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/block/dst/dcore.c:396:
+	dprintk("\n%s: start: st: %p, bio: %p, cnt: %u.\n",
+			__func__, st, bio, bio->bi_vcnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/block/dst/dcore.c:403:
+	dprintk("%s: end: st: %p, bio: %p, err: %d.\n",
+			__func__, st, bio, err);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#544: FILE: drivers/block/dst/dcore.c:434:
+static struct block_device_operations dst_blk_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: drivers/block/dst/dcore.c:470:
+	snprintf(st->disk->disk_name, sizeof(st->disk->disk_name),
+			"dst-%s-%d", st->name, st->disk->first_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/block/dst/dcore.c:484:
+static ssize_t dst_name_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: drivers/block/dst/dcore.c:500:
+		dprintk("%s: n: %p, start: %llu, size: %llu.\n",
+				__func__, n, n->start, n->size);

WARNING:TYPO_SPELLING: 'syfs' may be misspelled - perhaps 'sysfs'?
#626: FILE: drivers/block/dst/dcore.c:516:
+ * Shows node layout in syfs.
                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/block/dst/dcore.c:519:
+static ssize_t dst_nodes_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/block/dst/dcore.c:556:
+static ssize_t dst_alg_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: drivers/block/dst/dcore.c:559:
+	struct dst_storage *st = container_of(dev, struct dst_storage, device);
+	return sprintf(buf, "%s\n", st->alg->name);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: drivers/block/dst/dcore.c:567:
+static ssize_t dst_remove_nodes(struct device *dev,
+		struct device_attribute *attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: drivers/block/dst/dcore.c:571:
+	struct dst_storage *st = container_of(dev, struct dst_storage, device);
+	dst_remove_all_nodes(st);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_name_show' to 'name_show'
#683: FILE: drivers/block/dst/dcore.c:573:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_nodes_show' to 'nodes_show'
#686: FILE: drivers/block/dst/dcore.c:576:
+static DEVICE_ATTR(nodes, 0444, dst_nodes_show, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_alg_show' to 'alg_show'
#687: FILE: drivers/block/dst/dcore.c:577:
+static DEVICE_ATTR(alg, 0444, dst_alg_show, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_remove_nodes' to 'remove_all_nodes_store'
#688: FILE: drivers/block/dst/dcore.c:578:
+static DEVICE_ATTR(remove_all_nodes, 0644, NULL, dst_remove_nodes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: drivers/block/dst/dcore.c:632:
+static ssize_t dst_show_start(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: drivers/block/dst/dcore.c:640:
+static ssize_t dst_show_size(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: drivers/block/dst/dcore.c:652:
+static ssize_t dst_show_type(struct device *dev,
+		struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#782: FILE: drivers/block/dst/dcore.c:672:
+		struct sockaddr_in *sin = (struct sockaddr_in *)&addr;
+		return sprintf(buf, "R: %u.%u.%u.%u:%d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#786: FILE: drivers/block/dst/dcore.c:676:
+		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)&addr;
+		return sprintf(buf,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_show_start' to 'start_show'
#791: FILE: drivers/block/dst/dcore.c:681:
+}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_show_size' to 'size_show'
#794: FILE: drivers/block/dst/dcore.c:684:
+static DEVICE_ATTR(size, 0444, dst_show_size, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_show_type' to 'type_show'
#795: FILE: drivers/block/dst/dcore.c:685:
+static DEVICE_ATTR(type, 0444, dst_show_type, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: drivers/block/dst/dcore.c:722:
+	snprintf(n->device.bus_id, sizeof(n->device.bus_id),
+			"n-%llu-%p", n->start, n);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct dst_storage)...)
#873: FILE: drivers/block/dst/dcore.c:763:
+	st = kzalloc(sizeof(struct dst_storage), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alg)...) over kzalloc(sizeof(struct dst_alg)...)
#932: FILE: drivers/block/dst/dcore.c:822:
+	alg = kzalloc(sizeof(struct dst_alg), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: drivers/block/dst/dcore.c:881:
+	dprintk("%s: node: %p, start: %llu, size: %llu, refcnt: %d.\n",
+			__func__, n, n->start, n->size,

WARNING:SPLIT_STRING: quoted string split across lines
#998: FILE: drivers/block/dst/dcore.c:888:
+		dprintk("%s: freeing node: %p, start: %llu, size: %llu, "
+				"refcnt: %d.\n",

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#1018: FILE: drivers/block/dst/dcore.c:908:
+ * Tree of of the nodes, which form the storage.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1033: FILE: drivers/block/dst/dcore.c:923:
+			__func__, dn->start, dn->start+dn->size, start);
 			                              ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1034: FILE: drivers/block/dst/dcore.c:924:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1038: FILE: drivers/block/dst/dcore.c:928:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: drivers/block/dst/dcore.c:958:
+static struct dst_node *dst_storage_tree_add(struct dst_node *new,
+		struct dst_storage *st)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: drivers/block/dst/dcore.c:970:
+		dprintk("%s: tree: %llu-%llu, new: %llu.\n",
+				__func__, dn->start, dn->start+dn->size,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1080: FILE: drivers/block/dst/dcore.c:970:
+				__func__, dn->start, dn->start+dn->size,
 				                              ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1082: FILE: drivers/block/dst/dcore.c:972:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1086: FILE: drivers/block/dst/dcore.c:976:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1103: FILE: drivers/block/dst/dcore.c:993:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1106: FILE: drivers/block/dst/dcore.c:996:
+	err = path_lookup(path, LOOKUP_FOLLOW, &nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1110: FILE: drivers/block/dst/dcore.c:1000:
+	inode = nd.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1124: FILE: drivers/block/dst/dcore.c:1014:
+	path_release(&nd);
 	              ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: drivers/block/dst/dcore.c:1048:
+int dst_data_recv_header(struct socket *sock,
+		struct dst_remote_request *r, int block)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1172: FILE: drivers/block/dst/dcore.c:1062:
+	msg.msg_flags = (block)?MSG_WAITALL:MSG_DONTWAIT | MSG_NOSIGNAL;
 	                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1172: FILE: drivers/block/dst/dcore.c:1062:
+	msg.msg_flags = (block)?MSG_WAITALL:MSG_DONTWAIT | MSG_NOSIGNAL;
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1182: FILE: drivers/block/dst/dcore.c:1072:
+int dst_data_send_header(struct socket *sock,
+		struct dst_remote_request *r)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: drivers/block/dst/dcore.c:1103:
+static int dst_setup_local(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_local_ctl *l)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1222: FILE: drivers/block/dst/dcore.c:1112:
+	n->bdev = open_by_devnum(dev, FMODE_READ|FMODE_WRITE);
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: drivers/block/dst/dcore.c:1122:
+static int dst_setup_local_export(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_le_template *tmp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1274: FILE: drivers/block/dst/dcore.c:1164:
+	dprintk("%s: checking result: cmd: %d, size reported: %llu, csum is supported: %u.\n",
+			__func__, be32_to_cpu(cfg.cmd), be64_to_cpu(cfg.sector), !!cfg.csum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1292: FILE: drivers/block/dst/dcore.c:1182:
+static int dst_setup_remote(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_remote_ctl *r)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1301: FILE: drivers/block/dst/dcore.c:1191:
+	sock->sk->sk_sndtimeo = sock->sk->sk_rcvtimeo =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1376: FILE: drivers/block/dst/dcore.c:1266:
+static struct dst_node *dst_alloc_node(struct dst_ctl *ctl,
+		void (*cleanup)(struct dst_node *))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n)...) over kzalloc(sizeof(struct dst_node)...)
#1385: FILE: drivers/block/dst/dcore.c:1275:
+	n = kzalloc(sizeof(struct dst_node), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1572: FILE: drivers/block/dst/dcore.c:1462:
+		dprintk("%s: STARTED name: '%s', st: %p, disk_size: %llu.\n",
+				__func__, st->name, st, st->disk_size);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ack)...) over kmalloc(sizeof(struct dst_ctl_ack)...)
#1651: FILE: drivers/block/dst/dcore.c:1541:
+	ack = kmalloc(sizeof(struct dst_ctl_ack), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1681: FILE: drivers/block/dst/dcore.c:1571:
+	dst_request_cache = kmem_cache_create("dst", sizeof(struct dst_request),
+				       0, 0, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1709: FILE: drivers/block/dst/dcore.c:1599:
+	printk(KERN_INFO "Distributed storage, '%s' release.\n", dst_name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1765: FILE: include/linux/dst.h:1:
+/*

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1794: FILE: include/linux/dst.h:30:
+	DST_ADD_LOCAL_EXPORT,	/* Add local node with given id to the storage to be exported and used by remote peers */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1795: FILE: include/linux/dst.h:31:
+	DST_START_STORAGE,	/* Array is ready and storage can be started, if there will be new nodes

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1796: FILE: include/linux/dst.h:32:
+				 * added to the storage, they will be checked against existing size and

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1797: FILE: include/linux/dst.h:33:
+				 * probably be dropped (for example in mirror format when new node has smaller

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1804: FILE: include/linux/dst.h:40:
+#define DST_CTL_FLAGS_REMOTE	(1<<0)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1804: FILE: include/linux/dst.h:40:
+#define DST_CTL_FLAGS_REMOTE	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1805: FILE: include/linux/dst.h:41:
+#define DST_CTL_FLAGS_EXPORT	(1<<1)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1805: FILE: include/linux/dst.h:41:
+#define DST_CTL_FLAGS_EXPORT	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1806: FILE: include/linux/dst.h:42:
+#define DST_CTL_USE_CSUM	(1<<2)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1806: FILE: include/linux/dst.h:42:
+#define DST_CTL_USE_CSUM	(1<<2)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1809: FILE: include/linux/dst.h:45:
+struct dst_ctl
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1817: FILE: include/linux/dst.h:53:
+struct dst_ctl_ack
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1824: FILE: include/linux/dst.h:60:
+struct dst_local_ctl
+{

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1833: FILE: include/linux/dst.h:69:
+	unsigned short		sa_data_len;			/* Number of bytes used in sa_data */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1837: FILE: include/linux/dst.h:73:
+struct dst_remote_ctl
+{

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1843: FILE: include/linux/dst.h:79:
+#define DST_PERM_READ		(1<<0)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1843: FILE: include/linux/dst.h:79:
+#define DST_PERM_READ		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1844: FILE: include/linux/dst.h:80:
+#define DST_PERM_WRITE		(1<<1)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1844: FILE: include/linux/dst.h:80:
+#define DST_PERM_WRITE		(1<<1)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1853: FILE: include/linux/dst.h:89:
+struct dst_secure_user
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1860: FILE: include/linux/dst.h:96:
+struct dst_local_export_ctl
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1868: FILE: include/linux/dst.h:104:
+^IDST_REMOTE_CFG^I^I= 1, ^I^I/* Request remote configuration */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1875: FILE: include/linux/dst.h:111:
+struct dst_remote_request
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1896: FILE: include/linux/dst.h:132:
+#define dprintk(f, a...) printk(KERN_NOTICE f, ##a)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1898: FILE: include/linux/dst.h:134:
+static inline void __attribute__ ((format (printf, 1, 2))) dprintk(const char * fmt, ...) {}

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#1898: FILE: include/linux/dst.h:134:
+static inline void __attribute__ ((format (printf, 1, 2))) dprintk(const char * fmt, ...) {}

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1902: FILE: include/linux/dst.h:138:
+struct kst_worker
+{

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1906: FILE: include/linux/dst.h:142:
+	struct mutex		state_mutex;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1909: FILE: include/linux/dst.h:145:
+	spinlock_t		ready_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1915: FILE: include/linux/dst.h:151:
+^Iwait_queue_head_t ^Iwait;$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1923: FILE: include/linux/dst.h:159:
+#define DST_REQ_HEADER_SENT	(1<<0)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1923: FILE: include/linux/dst.h:159:
+#define DST_REQ_HEADER_SENT	(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1924: FILE: include/linux/dst.h:160:
+#define DST_REQ_EXPORT		(1<<1)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1924: FILE: include/linux/dst.h:160:
+#define DST_REQ_EXPORT		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1925: FILE: include/linux/dst.h:161:
+#define DST_REQ_EXPORT_WRITE	(1<<2)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1925: FILE: include/linux/dst.h:161:
+#define DST_REQ_EXPORT_WRITE	(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1926: FILE: include/linux/dst.h:162:
+#define DST_REQ_EXPORT_READ	(1<<3)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1926: FILE: include/linux/dst.h:162:
+#define DST_REQ_EXPORT_READ	(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1927: FILE: include/linux/dst.h:163:
+#define DST_REQ_ALWAYS_QUEUE	(1<<4)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1927: FILE: include/linux/dst.h:163:
+#define DST_REQ_ALWAYS_QUEUE	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1928: FILE: include/linux/dst.h:164:
+#define DST_REQ_CHEKSUM_RECV	(1<<5)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1928: FILE: include/linux/dst.h:164:
+#define DST_REQ_CHEKSUM_RECV	(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1929: FILE: include/linux/dst.h:165:
+#define DST_REQ_CHECK_QUEUE	(1<<6)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1929: FILE: include/linux/dst.h:165:
+#define DST_REQ_CHECK_QUEUE	(1<<6)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1932: FILE: include/linux/dst.h:168:
+struct dst_request
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1935: FILE: include/linux/dst.h:171:
+^Istruct kst_state ^I*state;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1936: FILE: include/linux/dst.h:172:
+^Istruct dst_node ^I*node;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1945: FILE: include/linux/dst.h:181:
+^Iint ^I^I^I(*callback)(struct dst_request *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1946: FILE: include/linux/dst.h:182:
+	int 			(*callback)(struct dst_request *dst,
+						unsigned int revents);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1947: FILE: include/linux/dst.h:183:
+^Ivoid^I^I^I(*bio_endio)(struct dst_request *dst, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1948: FILE: include/linux/dst.h:184:
+	void			(*bio_endio)(struct dst_request *dst, 
+						int err);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1957: FILE: include/linux/dst.h:193:
+struct kst_state_ops
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1958: FILE: include/linux/dst.h:194:
+^Iint ^I^I(*init)(struct kst_state *, void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kst_state *' should also have an identifier name
#1958: FILE: include/linux/dst.h:194:
+	int 		(*init)(struct kst_state *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1958: FILE: include/linux/dst.h:194:
+	int 		(*init)(struct kst_state *, void *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1959: FILE: include/linux/dst.h:195:
+^Iint ^I^I(*push)(struct dst_request *req);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kst_state *' should also have an identifier name
#1960: FILE: include/linux/dst.h:196:
+	int		(*ready)(struct kst_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kst_state *' should also have an identifier name
#1961: FILE: include/linux/dst.h:197:
+	int		(*recovery)(struct kst_state *, int err);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1962: FILE: include/linux/dst.h:198:
+^Ivoid ^I^I(*exit)(struct kst_state *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kst_state *' should also have an identifier name
#1962: FILE: include/linux/dst.h:198:
+	void 		(*exit)(struct kst_state *);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1966: FILE: include/linux/dst.h:202:
+struct kst_state
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1970: FILE: include/linux/dst.h:206:
+^Iwait_queue_t ^I^Iwait;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1971: FILE: include/linux/dst.h:207:
+^Iwait_queue_head_t ^I*whead;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1978: FILE: include/linux/dst.h:214:
+	struct mutex		request_lock;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1989: FILE: include/linux/dst.h:225:
+struct dst_alg_ops
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1992: FILE: include/linux/dst.h:228:
+^Iint ^I^I^I(*remap)(struct dst_request *req);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1994: FILE: include/linux/dst.h:230:
+^Istruct module ^I^I*owner;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1998: FILE: include/linux/dst.h:234:
+struct dst_alg
+{

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2005: FILE: include/linux/dst.h:241:
+#define DST_ST_STARTED		(1<<0)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2005: FILE: include/linux/dst.h:241:
+#define DST_ST_STARTED		(1<<0)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2008: FILE: include/linux/dst.h:244:
+struct dst_storage
+{

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#2013: FILE: include/linux/dst.h:249:
+	struct mutex		tree_lock;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2030: FILE: include/linux/dst.h:266:
+struct dst_node
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2036: FILE: include/linux/dst.h:272:
+^Istruct block_device ^I*bdev;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dst_node *' should also have an identifier name
#2044: FILE: include/linux/dst.h:280:
+	void			(*cleanup)(struct dst_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dst_node *' should also have an identifier name
#2050: FILE: include/linux/dst.h:286:
+	void			(*priv_callback)(struct dst_node *);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2057: FILE: include/linux/dst.h:293:
+struct dst_le_template
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2059: FILE: include/linux/dst.h:295:
+^Ivoid ^I^I^I^I*data;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2063: FILE: include/linux/dst.h:299:
+struct dst_secure
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2074: FILE: include/linux/dst.h:310:
+struct kst_state *kst_listener_state_init(struct dst_node *node,
+		struct dst_le_template *tmp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2076: FILE: include/linux/dst.h:312:
+struct kst_state *kst_data_state_init(struct dst_node *node,
+		struct socket *newsock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2143: FILE: include/linux/dst.h:379:
+extern int dst_data_send_header(struct socket *sock,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2144: FILE: include/linux/dst.h:380:
+extern int dst_data_send_header(struct socket *sock,
+		struct dst_remote_request *r);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2145: FILE: include/linux/dst.h:381:
+extern int dst_data_recv_header(struct socket *sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2146: FILE: include/linux/dst.h:382:
+extern int dst_data_recv_header(struct socket *sock,
+		struct dst_remote_request *r, int block);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 81 warnings, 84 checks, 2074 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
