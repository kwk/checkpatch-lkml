ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#109: FILE: drivers/net/wan/hostess_sv11.c:47:
+static inline struct z8530_dev* dev_to_sv(struct net_device *dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <chanA>
#161: FILE: drivers/net/wan/hostess_sv11.c:86:
+			err = z8530_sync_open(d, &sv11->chanA);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#269: FILE: drivers/net/wan/hostess_sv11.c:152:
+	/* struct z8530_dev *sv11=dev_to_sv(d);
+	   z8530_ioctl(d,&sv11->chanA,ifr,cmd) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#269: FILE: drivers/net/wan/hostess_sv11.c:152:
+	   z8530_ioctl(d,&sv11->chanA,ifr,cmd) */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#342: FILE: drivers/net/wan/hostess_sv11.c:186:
+		printk(KERN_WARNING "hostess: I/O 0x%X already in use.\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sv)...) over kzalloc(sizeof(struct z8530_dev)...)
#360: FILE: drivers/net/wan/hostess_sv11.c:191:
+	sv = kzalloc(sizeof(struct z8530_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <chanB>
#384: FILE: drivers/net/wan/hostess_sv11.c:203:
+	sv->chanB.ctrlio = -1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#504: FILE: drivers/net/wan/hostess_sv11.c:265:
+	sv->chanA.netdevice = netdev = alloc_hdlcdev(sv);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: drivers/net/wan/hostess_sv11.c:278:
+		printk(KERN_ERR "hostess: unable to register HDLC device.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#605: FILE: drivers/net/wan/hostess_sv11.c:335:
+	if ((sv11_unit = sv11_init(io, irq)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#667: FILE: drivers/net/wan/sealevel.c:53:
+static inline struct slvl_device* dev_to_chan(struct net_device *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: drivers/net/wan/sealevel.c:176:
+	struct net_device *dev = alloc_hdlcdev(sv);
+	if (!dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#866: FILE: drivers/net/wan/sealevel.c:188:
+		printk(KERN_ERR "sealevel: unable to register HDLC device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#944: FILE: drivers/net/wan/sealevel.c:213:
+		printk(KERN_WARNING "sealevel: I/O 0x%X already in use.\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*b)...) over kzalloc(sizeof(struct slvl_board)...)
#955: FILE: drivers/net/wan/sealevel.c:218:
+	b = kzalloc(sizeof(struct slvl_board), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1157: FILE: drivers/net/wan/sealevel.c:342:
+		struct net_device *d = b->dev[u].chan->netdevice;
+		unregister_hdlc_device(d);

CHECK:CAMELCASE: Avoid CamelCase: <TxEOM>
#1221: FILE: drivers/net/wan/z85230.c:455:
+	if (status & TxEOM) {

CHECK:CAMELCASE: Avoid CamelCase: <RxENABLE>
#1245: FILE: drivers/net/wan/z85230.c:466:
+			write_zsreg(chan, R3, chan->regs[3] | RxENABLE);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1259: FILE: drivers/net/wan/z85230.c:477:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c->tx_skb"
#1342: FILE: drivers/net/wan/z85230.c:1535:
+	if (c->tx_skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1372: FILE: drivers/net/wan/z85230.c:1629:
+			printk(KERN_WARNING "%s: DMA flip overrun!\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#1396: FILE: drivers/net/wan/z85230.c:1643:
+		if (skb == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1398: FILE: drivers/net/wan/z85230.c:1645:
+			printk(KERN_WARNING "%s: Memory squeeze.\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c->skb2"
#1453: FILE: drivers/net/wan/z85230.c:1685:
+		if (c->skb2 == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000259800.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 10 warnings, 11 checks, 1469 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000259800.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
