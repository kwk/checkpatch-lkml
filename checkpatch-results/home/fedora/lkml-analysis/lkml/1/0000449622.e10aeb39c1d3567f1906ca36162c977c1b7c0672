WARNING:TYPO_SPELLING: 'suport' may be misspelled - perhaps 'support'?
#21: 
Subject: [PATCH 1/1] Generic Virtual Memmap suport for SPARSEMEM V2
                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#define pfn_to_page(pfn)     (vmemmap + (pfn))

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#define page_to_pfn(page)    ((page) - vmemmap)

WARNING:REPEATED_WORD: Possible repeated word: 'etc'
#68: 
for FLATMEM, DISCONTIG etc etc.

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#100: FILE: mm/sparse.c:13:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'memmory' may be misspelled - perhaps 'memory'?
#128: FILE: mm/sparse.c:227:
+ * via TLBs. For those arches the virtual memmory map is essentially
                                           ^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: mm/sparse.c:236:
+ * ^IThe architecture has its own functions to populate the memory$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: mm/sparse.c:237:
+ * ^Imap and provides a vmemmap_populate function.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#142: FILE: mm/sparse.c:241:
+ * ^IIf not set then PAGE_SIZE mappings are generated which$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#143: FILE: mm/sparse.c:242:
+ * ^Irequire one PTE/TLB per PAGE_SIZE chunk of the virtual memory map.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: mm/sparse.c:244:
+ * ^IIf set then PMD_SIZE mappings are generated which are much$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: mm/sparse.c:245:
+ * ^Ilighter on the TLB. On some platforms these generate$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: mm/sparse.c:246:
+ * ^Ithe same overhead as the 1-1 mappings.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: mm/sparse.c:258:
+			alloc_pages_node(node, GFP_KERNEL | __GFP_ZERO,
+				get_order(size));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#164: FILE: mm/sparse.c:263:
+		return NULL;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: mm/sparse.c:291:
+static int vmemmap_pop_pte(pmd_t *pmd, unsigned long addr,
+				unsigned long end, int node)

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/sparse.c:298:
+  ^I^Iif (pte_none(*pte))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: mm/sparse.c:298:
+  ^I^Iif (pte_none(*pte))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/sparse.c:298:
+  ^I^Iif (pte_none(*pte))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: mm/sparse.c:321:
+static int vmemmap_pop_pte(pmd_t *pmd, unsigned long addr,
+				unsigned long end, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: mm/sparse.c:328:
+static int vmemmap_pop_pmd(pud_t *pud, unsigned long addr,
+				unsigned long end, int node)

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: mm/sparse.c:337:
+  ^I^Iif (pmd_none(*pmd)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: mm/sparse.c:337:
+  ^I^Iif (pmd_none(*pmd)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: mm/sparse.c:337:
+  ^I^Iif (pmd_none(*pmd)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#238: FILE: mm/sparse.c:337:
+  		if (pmd_none(*pmd)) {
[...]
+				error = vmemmap_pmd_setup(pmd, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: mm/sparse.c:356:
+static int vmemmap_pop_pud(pgd_t *pgd, unsigned long addr,
+					unsigned long end, int node)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#265: FILE: mm/sparse.c:364:
+				pud++, addr += PUD_SIZE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: mm/sparse.c:380:
+int vmemmap_populate(struct page *start_page, unsigned long nr,
+								int node)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#291: FILE: mm/sparse.c:390:
+				pgd++, addr += PGDIR_SIZE) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#315: FILE: mm/sparse.c:414:
+		printk(KERN_ERR "%s: allocation failed. Error=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: mm/sparse.c:415:
+		printk(KERN_ERR "%s: allocation failed. Error=%d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#316: FILE: mm/sparse.c:415:
+				__FUNCTION__, error);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 21 warnings, 9 checks, 260 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
