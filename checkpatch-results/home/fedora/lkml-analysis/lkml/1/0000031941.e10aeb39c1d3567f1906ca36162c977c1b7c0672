WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list file patterns in alphabetic order
#79: FILE: MAINTAINERS:5601:
+F:	drivers/usb/host/xhci*
+F:	drivers/usb/host/pci-quirks*

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#92: FILE: Makefile:4:
+EXTRAVERSION = .2
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: arch/ia64/include/asm/io.h:427:
+extern void __iomem * early_ioremap (unsigned long phys_addr, unsigned long size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#130: FILE: arch/ia64/include/asm/io.h:427:
+extern void __iomem * early_ioremap (unsigned long phys_addr, unsigned long size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: arch/ia64/include/asm/io.h:427:
+extern void __iomem * early_ioremap (unsigned long phys_addr, unsigned long size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: arch/ia64/include/asm/io.h:428:
+extern void early_iounmap (volatile void __iomem *addr, unsigned long size);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#131: FILE: arch/ia64/include/asm/io.h:428:
+extern void early_iounmap (volatile void __iomem *addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: arch/ia64/include/asm/io.h:428:
+extern void early_iounmap (volatile void __iomem *addr, unsigned long size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#143: FILE: arch/ia64/mm/ioremap.c:25:
+early_ioremap (unsigned long phys_addr, unsigned long size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#156: FILE: arch/ia64/mm/ioremap.c:111:
+early_iounmap (volatile void __iomem *addr, unsigned long size)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#156: FILE: arch/ia64/mm/ioremap.c:111:
+early_iounmap (volatile void __iomem *addr, unsigned long size)

CHECK:BRACES: Unbalanced braces around else statement
#246: FILE: arch/s390/kvm/kvm-s390.c:428:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#304: FILE: arch/s390/kvm/sigp.c:192:
+		(address + vcpu->arch.sie_block->gmsor) , 1)) ||
 		                                        ^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#395: FILE: arch/sparc/lib/mcount.S:79:
+3:	sethi		%hi(ovstack), %g7		! cant move to panic stack fast enough
   	     		                 		  ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: arch/x86/include/asm/mce.h:218:
+extern void mcheck_intel_therm_init(void);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#485: FILE: arch/x86/kernel/amd_iommu.c:2053:
+		__devid = devid = calc_devid(dev->bus->number, dev->devfn);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: arch/x86/kernel/cpu/mcheck/therm_throt.c:267:
+	if (cpu_has(&boot_cpu_data, X86_FEATURE_ACPI) &&
+		cpu_has(&boot_cpu_data, X86_FEATURE_ACC))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: arch/x86/kernel/tlb_uv.c:821:
+	uv_write_global_mmr64(pnode, UVH_BAU_DATA_CONFIG,
 				      ((apicid << 32) | UV_BAU_MESSAGE));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#776: FILE: arch/x86/kvm/emulate.c:877:
+	c->eip = c->eip_orig = kvm_rip_read(ctxt->vcpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: arch/x86/xen/enlighten.c:148:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#854: FILE: arch/x86/xen/enlighten.c:157:
+			BUG();

ERROR:SPACING: space prohibited after that open parenthesis '('
#920: FILE: arch/x86/xen/suspend.c:55:
+	if ( smp_processor_id() == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: arch/x86/xen/suspend.c:64:
+	smp_call_function(xen_vcpu_notify_restore,
+			       (void *)CLOCK_EVT_NOTIFY_RESUME, 1);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#950: FILE: arch/x86/xen/time.c:437:
+				      IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING|IRQF_TIMER,
 				                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#950: FILE: arch/x86/xen/time.c:437:
+				      IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING|IRQF_TIMER,
 				                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#950: FILE: arch/x86/xen/time.c:437:
+				      IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING|IRQF_TIMER,
 				                                                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1242: FILE: drivers/gpu/drm/drm_irq.c:436:
+			if (ret)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1244: FILE: drivers/gpu/drm/drm_irq.c:438:
+			else {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1286: FILE: drivers/gpu/drm/i915/i915_drv.h:960:
+#define IS_I8XX(dev) (IS_I830(dev) || IS_845G(dev) || IS_I85X(dev) || IS_I865G(dev))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1294: FILE: drivers/gpu/drm/i915/i915_drv.h:1022:
+#define SUPPORTS_DIGITAL_OUTPUTS(dev)	(IS_I9XX(dev) && !IS_IGD(dev))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1298: FILE: drivers/gpu/drm/i915/i915_drv.h:1026:
+#define SUPPORTS_TV(dev)		(IS_I9XX(dev) && IS_MOBILE(dev) && \
+					!IS_IGDNG(dev) && !IS_IGD(dev))

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1359: FILE: drivers/gpu/drm/i915/intel_display.c:1709:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1379: FILE: drivers/gpu/drm/i915/intel_display.c:1747:
+			udelay(100);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1389: FILE: drivers/gpu/drm/i915/intel_display.c:1769:
+		udelay(100);

CHECK:CAMELCASE: Avoid CamelCase: <HAS_eDP>
#1404: FILE: drivers/gpu/drm/i915/intel_display.c:1778:
+		if (HAS_eDP) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1404: FILE: drivers/gpu/drm/i915/intel_display.c:1778:
+		if (HAS_eDP) {
+			igdng_disable_pll_edp(crtc);
 		}

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1435: FILE: drivers/gpu/drm/i915/intel_display.c:1801:
+		udelay(100);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->pdev->device == 0x7146'
#1562: FILE: drivers/gpu/drm/radeon/radeon_atombios.c:139:
+	if ((dev->pdev->device == 0x7146) &&
+	    (dev->pdev->subsystem_vendor == 0x17af) &&
+	    (dev->pdev->subsystem_device == 0x2058)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->pdev->subsystem_vendor == 0x17af'
#1562: FILE: drivers/gpu/drm/radeon/radeon_atombios.c:139:
+	if ((dev->pdev->device == 0x7146) &&
+	    (dev->pdev->subsystem_vendor == 0x17af) &&
+	    (dev->pdev->subsystem_device == 0x2058)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->pdev->subsystem_device == 0x2058'
#1562: FILE: drivers/gpu/drm/radeon/radeon_atombios.c:139:
+	if ((dev->pdev->device == 0x7146) &&
+	    (dev->pdev->subsystem_vendor == 0x17af) &&
+	    (dev->pdev->subsystem_device == 0x2058)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap"
#1779: FILE: drivers/md/bitmap.c:1095:
+	if (bitmap == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1928: FILE: drivers/md/dm-crypt.c:207:
+	unsigned salt_size = crypto_hash_digestsize(essiv->hash_tfm);

CHECK:SPACING: No space is necessary after a cast
#2391: FILE: drivers/net/b44.c:1508:
+			set_bit(len++, (unsigned long *) pmask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2405: FILE: drivers/net/bcm63xx_enet.c:1252:
+static int bcm_enet_get_sset_count(struct net_device *netdev,
+					int string_set)

CHECK:CAMELCASE: Avoid CamelCase: <pCap>
#2511: FILE: drivers/net/wireless/ath/ath9k/hw.c:3680:
+		pCap->tx_triglevel_max = MAX_TX_FIFO_THRESHOLD >> 1;

CHECK:CAMELCASE: Avoid CamelCase: <curLevel>
#2547: FILE: drivers/net/wireless/ath/ath9k/mac.c:82:
+		if (curLevel < ah->config.max_txtrig_level)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2612: FILE: drivers/net/wireless/ath/ath9k/xmit.c:1596:
+	if (ieee80211_is_nullfunc(fc) && ieee80211_has_pm(fc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2615: FILE: drivers/net/wireless/ath/ath9k/xmit.c:1599:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2627: FILE: drivers/net/wireless/ath/ath9k/xmit.c:2001:
+			if ((sc->sc_flags & SC_OP_PS_ENABLED)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2630: FILE: drivers/net/wireless/ath/ath9k/xmit.c:2004:
+			} else

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#2694: FILE: drivers/net/wireless/ipw2x00/ipw2100.c:6502:
 static struct pci_device_id ipw2100_pci_id_table[] __devinitdata = {

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#2741: FILE: drivers/net/wireless/rtl818x/rtl8187_dev.c:1332:
+	u16 product_id = le16_to_cpu(udev->descriptor.idProduct);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2764: FILE: drivers/net/wireless/rtl818x/rtl8187_dev.c:1527:
+	printk(KERN_INFO "%s: hwaddr %pM, %s V%d + %s, rfkill mask %d\n",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2824: FILE: drivers/pci/dmar.c:622:
+			if (!addr ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2825: FILE: drivers/pci/dmar.c:623:
+				printk("IOMMU: can't validate: %llx\n", drhd->address);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3156: FILE: drivers/platform/x86/thinkpad_acpi.c:6104:
+	TPACPI_Q_IBM('1', 'V', TPACPI_BRGHT_Q_ASK|TPACPI_BRGHT_Q_EC),
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3157: FILE: drivers/platform/x86/thinkpad_acpi.c:6105:
+	TPACPI_Q_IBM('1', 'W', TPACPI_BRGHT_Q_ASK|TPACPI_BRGHT_Q_EC),
 	                                         ^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#3222: FILE: drivers/ssb/sprom.c:56:
+		err = strict_strtoul(tmp, 16, &parsed);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3399: FILE: drivers/usb/storage/transport.c:670:
+	if (unlikely((srb->cmnd[0] == ATA_16 || srb->cmnd[0] == ATA_12) &&
 	    result == USB_STOR_TRANSPORT_GOOD &&

ERROR:SPACING: space prohibited after that open parenthesis '('
#3451: FILE: drivers/usb/storage/unusual_devs.h:822:
+UNUSUAL_DEV( 0x067b, 0x1063, 0x0100, 0x0100,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3452: FILE: drivers/usb/storage/unusual_devs.h:823:
+UNUSUAL_DEV( 0x067b, 0x1063, 0x0100, 0x0100,
+		"Prolific Technology, Inc.",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3455: FILE: drivers/usb/storage/unusual_devs.h:826:
+		US_FL_BAD_SENSE ),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3468: FILE: drivers/usb/storage/usb.c:231:
+	memset(data+8, ' ', 28);
 	           ^

CHECK:CAMELCASE: Avoid CamelCase: <vendorName>
#3487: FILE: drivers/usb/storage/usb.c:245:
+		n = strlen(us->unusual_dev->vendorName);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3488: FILE: drivers/usb/storage/usb.c:246:
+		memcpy(data+8, us->unusual_dev->vendorName, min(8, n));
 		           ^

CHECK:CAMELCASE: Avoid CamelCase: <productName>
#3489: FILE: drivers/usb/storage/usb.c:247:
+		n = strlen(us->unusual_dev->productName);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3490: FILE: drivers/usb/storage/usb.c:248:
+		memcpy(data+16, us->unusual_dev->productName, min(16, n));
 		           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#3514: FILE: drivers/video/matrox/g450_pll.c:371:
+                                /* Setting this breaks PC systems so don't do it */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3688: FILE: drivers/xen/manage.c:84:
+		printk(KERN_ERR "xen suspend: failed to setup stop_machine %d\n", err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3721: FILE: drivers/xen/manage.c:111:
+	printk(KERN_DEBUG "suspending xenstore...\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0444'.
#3770: FILE: drivers/xen/xenbus/xenbus_probe.c:457:
+static DEVICE_ATTR(nodename, S_IRUSR | S_IRGRP | S_IROTH, xendev_show_nodename, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0444'.
#3778: FILE: drivers/xen/xenbus/xenbus_probe.c:464:
+static DEVICE_ATTR(devtype, S_IRUSR | S_IRGRP | S_IROTH, xendev_show_devtype, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0444'.
#3786: FILE: drivers/xen/xenbus/xenbus_probe.c:471:
+static DEVICE_ATTR(modalias, S_IRUSR | S_IRGRP | S_IROTH, xendev_show_modalias, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4098: FILE: fs/jbd2/journal.c:1257:
+		printk(KERN_ERR "JBD2: journal transaction %u on %s "

WARNING:SPLIT_STRING: quoted string split across lines
#4099: FILE: fs/jbd2/journal.c:1258:
+		printk(KERN_ERR "JBD2: journal transaction %u on %s "
+		       "is corrupt.\n", journal->j_failed_commit,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4152: FILE: include/drm/drmP.h:1298:
+extern void drm_vblank_off(struct drm_device *dev, int crtc);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4535: FILE: kernel/rcutree.c:601:
+	if (rdp->completed != rnp->completed) {
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4844: FILE: kernel/sched.c:2448:
+		u64 max = 2*sysctl_sched_migration_cost;
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4902: FILE: kernel/sched.c:9546:
+		rq->avg_idle = 2*sysctl_sched_migration_cost;
 		                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#4914: FILE: kernel/sched_debug.c:288:
+#define P64(n) SEQ_printf(m, "  .%-30s: %Ld\n", #n, rq->n);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4914: FILE: kernel/sched_debug.c:288:
+#define P64(n) SEQ_printf(m, "  .%-30s: %Ld\n", #n, rq->n);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#4914: FILE: kernel/sched_debug.c:288:
+#define P64(n) SEQ_printf(m, "  .%-30s: %Ld\n", #n, rq->n);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#4956: FILE: kernel/sched_fair.c:1418:
+						if (!cpumask_test_cpu(i, &p->cpus_allowed))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#4958: FILE: kernel/sched_fair.c:1420:
+						if (!cpu_rq(i)->cfs.nr_running) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5039: FILE: mm/mincore.c:91:
+			 * but generally it needs to be check */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5089: FILE: mm/pagewalk.c:124:
+		 * in pmd_none_or_clear_bad(). */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5145: FILE: net/core/dev.c:4864:
+	/*
+	 *	Prevent userspace races by waiting until the network

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5157: FILE: net/core/dev.c:5407:
+	/*
+	 *	Prevent userspace races by waiting until the network

WARNING:TYPO_SPELLING: 'unnecesarily' may be misspelled - perhaps 'unnecessarily'?
#5236: FILE: net/mac80211/mesh.h:191:
+ * unnecesarily held in the pending queue.
    ^^^^^^^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5310: FILE: net/mac80211/scan.c:253:
+		/*
+		 * If IEEE80211_CONF_PS was not set and the dynamic_ps_timer

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5330: FILE: net/mac80211/scan.c:280:
+	/*
+	 * It's ok to abort a not-yet-running scan (that

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031941.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 36 warnings, 49 checks, 4483 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031941.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
