WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> > We have the __ASSEMBLY__ define for this, so just for asm code we don't need

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#310: FILE: include/linux/moduleloader.h:9:
+struct module_kobject
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#319: FILE: include/linux/moduleloader.h:18:
+struct module_private
+{

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#400: FILE: include/linux/moduleloader.h:99:
+	Elf_Sym *symtab;
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#400: FILE: include/linux/moduleloader.h:99:
+	Elf_Sym *symtab;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#408: FILE: include/linux/moduleloader.h:107:
+};
+#ifndef MODULE_ARCH_INIT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: include/linux/moduleloader.h:112:
+        struct attribute attr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: include/linux/moduleloader.h:112:
+        struct attribute attr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: include/linux/moduleloader.h:113:
+        ssize_t (*show)(struct module_attribute *, struct module_private *, char *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: include/linux/moduleloader.h:113:
+        ssize_t (*show)(struct module_attribute *, struct module_private *, char *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_attribute *' should also have an identifier name
#414: FILE: include/linux/moduleloader.h:113:
+        ssize_t (*show)(struct module_attribute *, struct module_private *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_private *' should also have an identifier name
#414: FILE: include/linux/moduleloader.h:113:
+        ssize_t (*show)(struct module_attribute *, struct module_private *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#414: FILE: include/linux/moduleloader.h:113:
+        ssize_t (*show)(struct module_attribute *, struct module_private *, char *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: include/linux/moduleloader.h:114:
+        ssize_t (*store)(struct module_attribute *, struct module_private *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/linux/moduleloader.h:114:
+        ssize_t (*store)(struct module_attribute *, struct module_private *,$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_attribute *' should also have an identifier name
#415: FILE: include/linux/moduleloader.h:114:
+        ssize_t (*store)(struct module_attribute *, struct module_private *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_private *' should also have an identifier name
#415: FILE: include/linux/moduleloader.h:114:
+        ssize_t (*store)(struct module_attribute *, struct module_private *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#415: FILE: include/linux/moduleloader.h:114:
+        ssize_t (*store)(struct module_attribute *, struct module_private *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_private *' should also have an identifier name
#417: FILE: include/linux/moduleloader.h:116:
+	void (*setup)(struct module_private *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#417: FILE: include/linux/moduleloader.h:116:
+	void (*setup)(struct module_private *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_private *' should also have an identifier name
#418: FILE: include/linux/moduleloader.h:117:
+	int (*test)(struct module_private *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module_private *' should also have an identifier name
#419: FILE: include/linux/moduleloader.h:118:
+	void (*free)(struct module_private *);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#424: FILE: include/linux/moduleloader.h:123:
+struct module_sect_attr
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#431: FILE: include/linux/moduleloader.h:130:
+struct module_sect_attrs
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#487: FILE: include/linux/moduleloader.h:180:
+extern int module_param_sysfs_setup(struct module_private *mod,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#491: FILE: include/linux/moduleloader.h:184:
+extern void module_param_sysfs_remove(struct module_private *mod);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: include/linux/moduleloader.h:217:
+int mod_sysfs_setup(struct module_private *mod,
+			   struct kernel_param *kparam,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: include/linux/moduleloader.h:230:
+static inline int mod_sysfs_setup(struct module_private *mod,
+			   struct kernel_param *kparam,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#617: FILE: kernel/module.c:93:
+static inline void add_taint_module(struct module_private *mod, unsigned flag)

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: kernel/module.c:477:
+^I                struct module_private *mod, char *buffer)     \$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b"
#720: FILE: kernel/module.c:545:
+	if (b == NULL || already_uses(a, b))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#732: FILE: kernel/module.c:554:
+		printk("%s: out of memory loading\n", a->mod.name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#891: FILE: kernel/module.c:793:
+	return sprintf(buffer, "%u\n", module_refcount(&mod->mod)-1);
 	                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: kernel/module.c:998:
+static void add_sect_attrs(struct module_private *mod, unsigned int nsect,
 		char *secstrings, Elf_Shdr *sechdrs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: kernel/module.c:1144:
+int mod_sysfs_setup(struct module_private *mod,
 			   struct kernel_param *kparam,

WARNING:SPLIT_STRING: quoted string split across lines
#1216: FILE: kernel/module.c:1421:
 			printk(KERN_WARNING "%s: module license '%s' taints "
+				"kernel.\n", mod->mod.name, license);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#1225: FILE: kernel/module.c:1460:
+static void setup_modinfo(struct module_private *mod, Elf_Shdr *sechdrs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: kernel/module.c:1558:
+static struct module_private *load_module(void __user *umod,
 				  unsigned long len,

WARNING:SPLIT_STRING: quoted string split across lines
#1353: FILE: kernel/module.c:1846:
 		printk(KERN_WARNING "%s: No versions for exported symbols."
+		       " Tainting kernel.\n", mod->mod.name);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1478: FILE: kernel/module.c:2168:
+				strlcpy(modname, mod->mod.name, MODULE_NAME_LEN + 1);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1496: FILE: kernel/module.c:2192:
+			strlcpy(module_name, mod->mod.name, MODULE_NAME_LEN + 1);

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1535: FILE: kernel/module.c:2299:
+		   mod->mod.state == MODULE_STATE_GOING ? "Unloading":
 		                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1536: FILE: kernel/module.c:2300:
+		   mod->mod.state == MODULE_STATE_COMING ? "Loading":
 		                                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1584: FILE: kernel/module.c:2405:
+		printk(" %s%s", mod->mod.name, taint_flags(mod->taints, buf));

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1611: FILE: kernel/params.c:15:
     along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1612: FILE: kernel/params.c:16:
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:LONG_LINE_STRING: line length of 127 exceeds 100 columns
#1808: FILE: scripts/mod/modpost.c:1336:
+	buf_printf(b, "asm (\".globl __this_module; .type __this_module,@object; __this_module = __this_module_private\");\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 22 warnings, 13 checks, 1584 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
