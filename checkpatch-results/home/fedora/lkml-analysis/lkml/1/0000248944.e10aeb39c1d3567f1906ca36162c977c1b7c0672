WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
The following changes since commit 837b41b5de356aa67abb2cadb5eef3efc7776f91:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '837b41b5de356aa67abb2cadb5eef3efc7776f91', maybe rebased or not pulled?
#32: 
The following changes since commit 837b41b5de356aa67abb2cadb5eef3efc7776f91:

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#150: FILE: include/linux/stop_machine.h:23:
+ * each of which disables interrupts.  The result is that noone is
                                                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#195: FILE: include/linux/stop_machine.h:58:
+	if (cpu == NR_CPUS)
[...]
+	else if (cpu == ~0U)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#195: FILE: include/linux/stop_machine.h:58:
+	if (cpu == NR_CPUS)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#199: FILE: include/linux/stop_machine.h:62:
+		return stop_machine(fn, data, &cpu_possible_map);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#199: FILE: include/linux/stop_machine.h:62:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: include/linux/stop_machine.h:64:
+		cpumask_t cpus = cpumask_of_cpu(cpu);
+		return stop_machine(fn, data, &cpus);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: kernel/cpu.c:262:
+	BUG_ON(cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: kernel/module.c:1697:
+static const struct kernel_symbol *lookup_symbol(const char *name,
+	const struct kernel_symbol *start,

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: kernel/module.c:1701:
+	const struct kernel_symbol *ks = start;
+	for (; ks < stop; ks++)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#353: FILE: kernel/stop_machine.c:1:
+/* Copyright 2008, 2005 Rusty Russell rusty@rustcorp.com.au IBM Corporation.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#380: FILE: kernel/stop_machine.c:29:
 };
+static enum stopmachine_state state;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#432: FILE: kernel/stop_machine.c:32:
+	int (*fn)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#497: FILE: kernel/stop_machine.c:64:
+ * than waiting for kthread_stop(), because it's easier for hotplug CPU. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: kernel/stop_machine.c:68:
+	enum stopmachine_state curstate = STOPMACHINE_NONE;
+	int uninitialized_var(ret);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#501: FILE: kernel/stop_machine.c:68:
+	int uninitialized_var(ret);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ret' should also have an identifier name
#501: FILE: kernel/stop_machine.c:68:
+	int uninitialized_var(ret);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#519: FILE: kernel/stop_machine.c:83:
+				 * multiple CPUs. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#561: FILE: kernel/stop_machine.c:116:
+	threads = kcalloc(NR_CPUS, sizeof(threads[0]), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#578: FILE: kernel/stop_machine.c:128:
+		struct sched_param param = { .sched_priority = MAX_RT_PRIO-1 };
 		                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#617: FILE: kernel/stop_machine.c:151:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#630: FILE: kernel/stop_machine.c:155:
+	 * doesn't hit this CPU until we're ready. */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248944.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 5 checks, 621 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248944.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
