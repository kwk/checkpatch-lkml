WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
regions to be on the "banned from /dev/mem use" list, so now both kernel memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/net/e1000e/netdev.c:4746:
+	err = pci_request_selected_regions_exclusive(pdev,
 	                                  pci_select_bars(pdev, IORESOURCE_MEM),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: drivers/pci/pci.c:1393:
+static int __pci_request_region(struct pci_dev *pdev, int bar, const char *res_name,
+									int exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: drivers/pci/pci.c:1407:
+		if (!__request_mem_region(pci_resource_start(pdev, bar),
+					pci_resource_len(pdev, bar), res_name,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: drivers/pci/pci.c:1461:
+ * ^Isysfs.$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#202: FILE: drivers/pci/pci.c:1467:
+}
+/**

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: drivers/pci/pci.c:1485:
+int __pci_request_selected_regions(struct pci_dev *pdev, int bars,
+				 const char *res_name, int excl)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: drivers/pci/pci.c:1503:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: drivers/pci/pci.c:1517:
+int pci_request_selected_regions_exclusive(struct pci_dev *pdev,
+				 int bars, const char *res_name)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: drivers/pci/pci.c:1566:
+ * ^I/dev/mem and the sysfs MMIO access will not be allowed.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: drivers/pci/pci.c:1577:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: include/linux/ioport.h:137:
+#define request_region(start,n,name)	__request_region(&ioport_resource, (start), (n), (name), 0)
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: include/linux/ioport.h:137:
+#define request_region(start,n,name)	__request_region(&ioport_resource, (start), (n), (name), 0)
                               ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#320: FILE: include/linux/ioport.h:138:
+#define __request_mem_region(start,n,name, excl) __request_region(&iomem_resource, (start), (n), (name), excl)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: include/linux/ioport.h:138:
+#define __request_mem_region(start,n,name, excl) __request_region(&iomem_resource, (start), (n), (name), excl)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: include/linux/ioport.h:138:
+#define __request_mem_region(start,n,name, excl) __request_region(&iomem_resource, (start), (n), (name), excl)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/linux/ioport.h:139:
+#define request_mem_region(start,n,name) __request_region(&iomem_resource, (start), (n), (name), 0)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/linux/ioport.h:139:
+#define request_mem_region(start,n,name) __request_region(&iomem_resource, (start), (n), (name), 0)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/ioport.h:140:
+#define request_mem_region_exclusive(start,n,name) \
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/ioport.h:140:
+#define request_mem_region_exclusive(start,n,name) \
                                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: include/linux/ioport.h:182:
+extern int iomem_is_exclusive(u64 addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#349: FILE: include/linux/pci.h:668:
+int __must_check pci_request_regions_exclusive(struct pci_dev *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#349: FILE: include/linux/pci.h:668:
+int __must_check pci_request_regions_exclusive(struct pci_dev *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#352: FILE: include/linux/pci.h:671:
+int __must_check pci_request_region_exclusive(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#352: FILE: include/linux/pci.h:671:
+int __must_check pci_request_region_exclusive(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#352: FILE: include/linux/pci.h:671:
+int __must_check pci_request_region_exclusive(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#355: FILE: include/linux/pci.h:674:
+int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#355: FILE: include/linux/pci.h:674:
+int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#355: FILE: include/linux/pci.h:674:
+int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/resource.c:903:
+		if (p->flags & IORESOURCE_BUSY &&
+		     p->flags & IORESOURCE_EXCLUSIVE) {

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#455: FILE: kernel/resource.c:922:
+__setup("iomem=", strict_iomem);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213372.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 12 warnings, 11 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213372.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
