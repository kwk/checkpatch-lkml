WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#50: FILE: arch/x86/kvm/Kconfig:53:
+config KVM_TRACE
+	bool "KVM trace support"
+	depends on KVM && MARKERS && SYSFS
+	select RELAY
+	select DEBUG_FS
+	default n
+	---help---
+	  This option allows reading a trace of kvm-related events through
+	  relayfs.  Note the ABI is not considered stable and will be
+	  modified in future updates.
+
 # OK, it's a little counter-intuitive to do this, but it puts it neatly under
 # the virtualization menu.
 source drivers/lguest/Kconfig

Kconfig symbols should have a help text which fully describes
it.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#105: FILE: include/linux/kvm_host.h:324:
+}
+#define kvm_trace_cleanup() ((void)0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#143: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: virt/kvm/kvm_trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: virt/kvm/kvm_trace.c:23:
+#define KVM_TRACE_STATE_RUNNING ^I(1 << 0)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#170: FILE: virt/kvm/kvm_trace.c:23:
+#define KVM_TRACE_STATE_RUNNING 	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: virt/kvm/kvm_trace.c:24:
+#define KVM_TRACE_STATE_PAUSE ^I^I(1 << 1)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#171: FILE: virt/kvm/kvm_trace.c:24:
+#define KVM_TRACE_STATE_PAUSE 		(1 << 1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: virt/kvm/kvm_trace.c:25:
+#define KVM_TRACE_STATE_CLEARUP ^I(1 << 2)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#172: FILE: virt/kvm/kvm_trace.c:25:
+#define KVM_TRACE_STATE_CLEARUP 	(1 << 2)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#180: FILE: virt/kvm/kvm_trace.c:33:
+};
+static struct kvm_trace *kvm_trace;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: virt/kvm/kvm_trace.c:67:
+^Iextra   ^I= va_arg(*args, u32);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: virt/kvm/kvm_trace.c:69:
+^Iextra ^I^I= min_t(u32, extra, KVM_TRC_EXTRA_MAX);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: virt/kvm/kvm_trace.c:72:
+^Irec.cycle_in ^I= p->cycle_in;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: virt/kvm/kvm_trace.c:127:
+static struct dentry *kvm_create_buf_file_callack(const char *filename,
+						 struct dentry *parent,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: virt/kvm/kvm_trace.c:143:
+^I.subbuf_start ^I^I= kvm_subbuf_start_callback,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: virt/kvm/kvm_trace.c:144:
+^I.create_buf_file ^I= kvm_create_buf_file_callack,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: virt/kvm/kvm_trace.c:145:
+^I.remove_buf_file ^I= kvm_remove_buf_file_callback,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: virt/kvm/kvm_trace.c:168:
+	kt->rchan = relay_open("trace", debugfs_dir, kuts->buf_size,
+				kuts->buf_nr, &kvm_relay_callbacks, kt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#326: FILE: virt/kvm/kvm_trace.c:179:
+			printk(KERN_INFO "Unable to register probe %s\n",

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#336: FILE: virt/kvm/kvm_trace.c:189:
+		if (kt->lost_file)
+			debugfs_remove(kt->lost_file);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kt"
#365: FILE: virt/kvm/kvm_trace.c:218:
+	if (kt == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kt"
#382: FILE: virt/kvm/kvm_trace.c:235:
+	if (kt == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#387: FILE: virt/kvm/kvm_trace.c:240:
+	    kt->trace_state == KVM_TRACE_STATE_PAUSE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: virt/kvm/kvm_trace.c:245:
+			struct kvm_trace_probe *p = &kvm_trace_probes[i];
+			marker_probe_unregister(p->name, p->probe_func, p);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000292908.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 10 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000292908.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
