WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#35: 
       Signed-off-by: Yunfeng Zhang <zyf.zeroos@gmail.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'acessing' may be misspelled - perhaps 'accessing'?
#73: FILE: Documentation/vm_pps.txt:32:
+1) SwapDaemon can collect the statistic of process acessing pages and by it
                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#181: FILE: Documentation/vm_pps.txt:140:
+mm_struct instances, during the process of scaning and reclamation, it
                                            ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: fs/exec.c:328:
+	set_pte_at(mm, address, pte, pte_mkdirty(pte_mkwrite(mk_pte(page,
+			    vma->vm_page_prot))));

ERROR:SPACING: space prohibited before that close parenthesis ')'
#371: FILE: include/asm-i386/pgtable-2level.h:57:
+	((((pte).pte_low >> 1) & 0xf ) + (((pte).pte_low >> 8) << 4 ))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#382: FILE: include/asm-i386/pgtable-2level.h:64:
((offset) << 8) })

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#399: FILE: include/asm-i386/pgtable.h:125:
+#define _PAGE_UNMAPPED	0x020	/* a special PTE type, hold its page reference
+				   even it's unmapped, see more from

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#400: FILE: include/asm-i386/pgtable.h:126:
+				   Documentation/vm_pps.txt. */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#411: FILE: include/asm-i386/pgtable.h:234:
+static inline int pte_unmapped(pte_t pte)	{ return ((pte).pte_low & 0x60)

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: include/asm-i386/pgtable.h:235:
+    == _PAGE_UNMAPPED; }$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#413: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_swapped(pte_t pte)	{ return ((pte).pte_low & 0x60)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: include/asm-i386/pgtable.h:237:
+    == _PAGE_SWAPPED; }$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#415: FILE: include/asm-i386/pgtable.h:238:
+static inline int pte_file(pte_t pte)		{ return ((pte).pte_low & 0x60)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: include/asm-i386/pgtable.h:239:
+    == _PAGE_FILE; }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#432: FILE: include/linux/mm.h:172:
+#define VM_PURE_PRIVATE	0x04000000	/* Is the vma is only belonging to a
+					   mm, see more from

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#433: FILE: include/linux/mm.h:173:
+					   Documentation/vm_pps.txt */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#447: FILE: include/linux/mm.h:1178:
+};
+extern struct pps_info pps_info;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#451: FILE: include/linux/mm.h:1182:
+struct delay_tlb_task
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#452: FILE: include/linux/mm.h:1183:
+	struct mm_struct* mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#454: FILE: include/linux/mm.h:1185:
+	struct vm_area_struct* vma[32];

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#458: FILE: include/linux/mm.h:1189:
+};
+extern struct delay_tlb_task delay_tlb_tasks[32];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#463: FILE: include/linux/mm.h:1194:
+void timer_flush_tlb_tasks(void* data /* = NULL */);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#465: FILE: include/linux/mm.h:1196:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#465: FILE: include/linux/mm.h:1196:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#466: FILE: include/linux/mm.h:1197:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: include/linux/swapops.h:53:
+	BUG_ON(!pte_swapped(pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: include/linux/swapops.h:67:
+	BUG_ON(!pte_swapped(__swp_entry_to_pte(arch_entry)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#578: FILE: mm/memory.c:706:
+			struct page *page;
+			page = pfn_to_page(pte_pfn(ptent));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#579: FILE: mm/memory.c:707:
+			BUG_ON(page == ZERO_PAGE(addr));

CHECK:BRACES: braces {} should be used on all arms of this statement
#619: FILE: mm/memory.c:1639:
+		if (!(vma->vm_flags & VM_PURE_PRIVATE))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#621: FILE: mm/memory.c:1641:
+		else {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#635: FILE: mm/memory.c:2016:
+	vm_area_struct *vma, pte_t* pte, pmd_t* pmd)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#635: FILE: mm/memory.c:2016:
+	vm_area_struct *vma, pte_t* pte, pmd_t* pmd)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#635: FILE: mm/memory.c:2016:
+	vm_area_struct *vma, pte_t* pte, pmd_t* pmd)
 	               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#637: FILE: mm/memory.c:2018:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#640: FILE: mm/memory.c:2021:
+	spinlock_t* ptl = pte_lockptr(vma->vm_mm, pmd);

CHECK:CAMELCASE: Avoid CamelCase: <swapType>
#641: FILE: mm/memory.c:2022:
+	int swapType = swp_type(entry);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <swapOffset>
#642: FILE: mm/memory.c:2023:
+	int swapOffset = swp_offset(entry);

CHECK:SPACING: No space is necessary after a cast
#658: FILE: mm/memory.c:2039:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#658: FILE: mm/memory.c:2039:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: mm/memory.c:2042:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: mm/memory.c:2042:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#661: FILE: mm/memory.c:2042:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {
+			spin_unlock(ptl);

CHECK:SPACING: No space is necessary after a cast
#685: FILE: mm/memory.c:2066:
+		if (prev - (pte_t*) pmd < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#685: FILE: mm/memory.c:2066:
+		if (prev - (pte_t*) pmd < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: mm/memory.c:2069:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: mm/memory.c:2069:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#688: FILE: mm/memory.c:2069:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {
+			spin_unlock(ptl);

CHECK:BRACES: braces {} should be used on all arms of this statement
#760: FILE: mm/memory.c:2231:
+		if (!(vma->vm_flags & VM_PURE_PRIVATE))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#762: FILE: mm/memory.c:2233:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#776: FILE: mm/memory.c:2525:
+			BUG_ON(!(vma->vm_flags & VM_PURE_PRIVATE));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#779: FILE: mm/memory.c:2528:
+			struct page* page = pte_page(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#781: FILE: mm/memory.c:2530:
+			pte_t temp_pte = mk_pte(page, vma->vm_page_prot);
+			pte = pte_offset_map_lock(mm, pmd, address, &ptl);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#799: FILE: mm/memory.c:2834:
+static void migrate_back_pte_range(struct mm_struct* mm, pmd_t *pmd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#800: FILE: mm/memory.c:2835:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#802: FILE: mm/memory.c:2837:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#805: FILE: mm/memory.c:2840:
+	spinlock_t* ptl;

CHECK:BRACES: braces {} should be used on all arms of this statement
#812: FILE: mm/memory.c:2847:
+		if (!pte_present(*pte) && pte_unmapped(*pte)) {
[...]
+		} else if (pte_present(*pte)) {
[...]
+		} else if (!pte_present(*pte) && pte_swapped(*pte))
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#817: FILE: mm/memory.c:2852:
+			BUG_ON(page == ZERO_PAGE(addr));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#838: FILE: mm/memory.c:2873:
+static void migrate_back_pmd_range(struct mm_struct* mm, pud_t *pud, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#839: FILE: mm/memory.c:2874:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#853: FILE: mm/memory.c:2888:
+static void migrate_back_pud_range(struct mm_struct* mm, pgd_t *pgd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#854: FILE: mm/memory.c:2889:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#870: FILE: mm/memory.c:2904:
+static void migrate_back_legacy_linux(struct mm_struct* mm, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#873: FILE: mm/memory.c:2906:
+	pgd_t* pgd;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#887: FILE: mm/memory.c:2920:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#887: FILE: mm/memory.c:2920:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#889: FILE: mm/memory.c:2922:
+	int condition = VM_READ | VM_WRITE | VM_EXEC | \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#894: FILE: mm/memory.c:2927:
+	if (!(vma->vm_flags & ~condition) && vma->vm_file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#905: FILE: mm/memory.c:2938:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#907: FILE: mm/memory.c:2940:
+	struct mm_struct* mm = vma->vm_mm;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#998: FILE: mm/rmap.c:621:
+	BUG_ON(vma->vm_flags & VM_PURE_PRIVATE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1007: FILE: mm/rmap.c:680:
+		BUG_ON(!pte_swapped(*pte));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#1020: FILE: mm/swap_state.c:357:
+			if (vma == NULL || !(vma->vm_flags & VM_PURE_PRIVATE))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1033: FILE: mm/swapfile.c:504:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1033: FILE: mm/swapfile.c:504:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1033: FILE: mm/swapfile.c:504:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1034: FILE: mm/swapfile.c:505:
+		type, struct page** ret_page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1036: FILE: mm/swapfile.c:507:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1038: FILE: mm/swapfile.c:509:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1064: FILE: mm/swapfile.c:535:
+static int pps_swapoff_scan_ptes(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1065: FILE: mm/swapfile.c:536:
+		vma, pmd_t* pmd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1068: FILE: mm/swapfile.c:539:
+	struct page* page;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1073: FILE: mm/swapfile.c:544:
+			if (page == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1082: FILE: mm/swapfile.c:553:
+					BUG();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1104: FILE: mm/swapfile.c:575:
+static int pps_swapoff_pmd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1105: FILE: mm/swapfile.c:576:
+		vma, pud_t* pud, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1109: FILE: mm/swapfile.c:580:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1110: FILE: mm/swapfile.c:581:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1121: FILE: mm/swapfile.c:592:
+static int pps_swapoff_pud_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1122: FILE: mm/swapfile.c:593:
+		vma, pgd_t* pgd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1126: FILE: mm/swapfile.c:597:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1127: FILE: mm/swapfile.c:598:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1138: FILE: mm/swapfile.c:609:
+static int pps_swapoff_pgd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1145: FILE: mm/swapfile.c:616:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1146: FILE: mm/swapfile.c:617:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1159: FILE: mm/swapfile.c:630:
+	struct vm_area_struct* vma;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1164: FILE: mm/swapfile.c:635:
+	prev = mm = &init_mm;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1176: FILE: mm/swapfile.c:647:
+		for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1259: FILE: mm/vmscan.c:1113:
+};
+// pps end.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1263: FILE: mm/vmscan.c:1117:
+	pte_t* ptes[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1264: FILE: mm/vmscan.c:1118:
+	struct page* pages[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1269: FILE: mm/vmscan.c:1123:
+static int get_series_stage(pte_t* pte, int index)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1274: FILE: mm/vmscan.c:1128:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1275: FILE: mm/vmscan.c:1129:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1278: FILE: mm/vmscan.c:1132:
+		if (pte_young(series.orig_ptes[index])) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1280: FILE: mm/vmscan.c:1134:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1283: FILE: mm/vmscan.c:1137:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1284: FILE: mm/vmscan.c:1138:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1285: FILE: mm/vmscan.c:1139:
+		if (!PageSwapCache(page))
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1287: FILE: mm/vmscan.c:1141:
+			return 3;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1287: FILE: mm/vmscan.c:1141:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1293: FILE: mm/vmscan.c:1147:
+	} else // pte_swapped -- SwappedPTE

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1297: FILE: mm/vmscan.c:1151:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1297: FILE: mm/vmscan.c:1151:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1304: FILE: mm/vmscan.c:1158:
+	for (i = 1; i < MAX_SERIES_LENGTH && *addr < end; i++, (*start)++,
+		*addr += PAGE_SIZE) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1314: FILE: mm/vmscan.c:1168:
+void timer_flush_tlb_tasks(void* data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1321: FILE: mm/vmscan.c:1175:
+		if (delay_tlb_tasks[i].mm != NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1322: FILE: mm/vmscan.c:1176:
+		if (delay_tlb_tasks[i].mm != NULL &&
+				cpu_isset(smp_processor_id(),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1323: FILE: mm/vmscan.c:1177:
+				cpu_isset(smp_processor_id(),
+				    delay_tlb_tasks[i].mm->cpu_vm_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: mm/vmscan.c:1179:
+				cpu_isset(smp_processor_id(),
+				    delay_tlb_tasks[i].cpu_mask)) {

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1340: FILE: mm/vmscan.c:1194:
+static struct delay_tlb_task* delay_task = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1340: FILE: mm/vmscan.c:1194:
+static struct delay_tlb_task* delay_task = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1341: FILE: mm/vmscan.c:1195:
+static int vma_index = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1343: FILE: mm/vmscan.c:1197:
+static struct delay_tlb_task* search_free_tlb_tasks_slot(void)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1345: FILE: mm/vmscan.c:1199:
+	struct delay_tlb_task* ret = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1349: FILE: mm/vmscan.c:1203:
+		if (delay_tlb_tasks[i].mm != NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1349: FILE: mm/vmscan.c:1203:
+		if (delay_tlb_tasks[i].mm != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1355: FILE: mm/vmscan.c:1209:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1365: FILE: mm/vmscan.c:1219:
+static void init_delay_task(struct mm_struct* mm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1375: FILE: mm/vmscan.c:1229:
+static void start_tlb_tasks(struct mm_struct* mm)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1381: FILE: mm/vmscan.c:1235:
+			if (cpus_empty(delay_tlb_tasks[i].cpu_mask)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1384: FILE: mm/vmscan.c:1238:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1392: FILE: mm/vmscan.c:1246:
+	BUG_ON(delay_task != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_task"
#1392: FILE: mm/vmscan.c:1246:
+	BUG_ON(delay_task != NULL);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1407: FILE: mm/vmscan.c:1261:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: mm/vmscan.c:1262:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,
+		unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1410: FILE: mm/vmscan.c:1264:
+	struct mm_struct* mm;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1413: FILE: mm/vmscan.c:1267:
+	if (vma_index != 0 && delay_task->vma[vma_index - 1] == vma &&
+			delay_task->end[vma_index - 1] == addr) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1433: FILE: mm/vmscan.c:1287:
+static void shrink_pvma_scan_ptes(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1434: FILE: mm/vmscan.c:1288:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1434: FILE: mm/vmscan.c:1288:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1438: FILE: mm/vmscan.c:1292:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1439: FILE: mm/vmscan.c:1293:
+	pte_t* pte = pte_offset_map(pmd, addr);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1443: FILE: mm/vmscan.c:1297:
+	struct address_space* mapping = &swapper_space;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1454: FILE: mm/vmscan.c:1308:
+			struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1455: FILE: mm/vmscan.c:1309:
+			struct page* page = series.pages[i];
+			lock_page(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1458: FILE: mm/vmscan.c:1312:
+			if (unlikely(pte_same(*series.ptes[i],
+					series.orig_ptes[i]))) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 36)
#1459: FILE: mm/vmscan.c:1313:
+				if (pte_dirty(*series.ptes[i]))
+				    set_page_dirty(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: mm/vmscan.c:1316:
+				set_pte_at(mm, addr + i * PAGE_SIZE,
+					series.ptes[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: mm/vmscan.c:1339:
+			if (unlikely(pte_same(*series.ptes[i],
+					series.orig_ptes[i]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1487: FILE: mm/vmscan.c:1341:
+				pte_t pte_unmapped = series.orig_ptes[i];
+				pte_unmapped.pte_low &= ~_PAGE_PRESENT;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1514: FILE: mm/vmscan.c:1368:
+					if (!add_to_swap(series.pages[i],
+						    GFP_ATOMIC)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1531: FILE: mm/vmscan.c:1385:
+				struct page* page = series.pages[i];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1566: FILE: mm/vmscan.c:1420:
+			struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1567: FILE: mm/vmscan.c:1421:
+			struct page* page = series.pages[i];
+			if (!(page_to_nid(page) == sc->reclaim_node ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: mm/vmscan.c:1422:
+			if (!(page_to_nid(page) == sc->reclaim_node ||
+				    sc->reclaim_node == -1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1574: FILE: mm/vmscan.c:1428:
+			if (!pte_same(*series.ptes[i], series.orig_ptes[i]) ||
+					/* We're racing with get_user_pages. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1583: FILE: mm/vmscan.c:1437:
+			swp_entry_t entry = { .val = page_private(page) };
+			swap_duplicate(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1585: FILE: mm/vmscan.c:1439:
+			pte_t pte_swp = swp_entry_to_pte(entry);
+			set_pte_at(mm, addr + i * PAGE_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1586: FILE: mm/vmscan.c:1440:
+			set_pte_at(mm, addr + i * PAGE_SIZE,
+				series.ptes[i], pte_swp);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1609: FILE: mm/vmscan.c:1463:
+static void shrink_pvma_pmd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1610: FILE: mm/vmscan.c:1464:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1610: FILE: mm/vmscan.c:1464:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1614: FILE: mm/vmscan.c:1468:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1615: FILE: mm/vmscan.c:1469:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1623: FILE: mm/vmscan.c:1477:
+static void shrink_pvma_pud_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1624: FILE: mm/vmscan.c:1478:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1624: FILE: mm/vmscan.c:1478:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1628: FILE: mm/vmscan.c:1482:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1629: FILE: mm/vmscan.c:1483:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1637: FILE: mm/vmscan.c:1491:
+static void shrink_pvma_pgd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1638: FILE: mm/vmscan.c:1492:
+		mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1643: FILE: mm/vmscan.c:1497:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1644: FILE: mm/vmscan.c:1498:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1652: FILE: mm/vmscan.c:1506:
+static void shrink_private_vma(struct scan_control* sc)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1654: FILE: mm/vmscan.c:1508:
+	struct vm_area_struct* vma;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1658: FILE: mm/vmscan.c:1512:
+	prev = mm = &init_mm;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1671: FILE: mm/vmscan.c:1525:
+			for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1707: FILE: mm/vmscan.c:2173:
+static int kppsd(void* p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1712: FILE: mm/vmscan.c:2178:
+	DEFINE_WAIT(wait);
+	tsk->flags |= PF_MEMALLOC | PF_SWAPWRITE;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1714: FILE: mm/vmscan.c:2180:
+	struct scan_control default_sc;
+	default_sc.gfp_mask = GFP_KERNEL;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 90 errors, 44 warnings, 48 checks, 1582 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
