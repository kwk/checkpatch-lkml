CHECK:CAMELCASE: Avoid CamelCase: <partitionReferenceNum>
#100: FILE: fs/udf/balloc.c:91:
+	loc.partitionReferenceNum = UDF_SB(sb)->s_partition;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#109: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > sbi->s_partmaps[bloc.partitionReferenceNum].s_partition_len) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#109: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > sbi->s_partmaps[bloc.partitionReferenceNum].s_partition_len) {

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#125: FILE: fs/udf/balloc.c:192:
+				struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIntegrityDesc>
#125: FILE: fs/udf/balloc.c:192:
+				struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: fs/udf/balloc.c:193:
+				struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+				lvid->freeSpaceTable[sbi->s_partition] =

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <freeSpaceTable>
#126: FILE: fs/udf/balloc.c:193:
+				lvid->freeSpaceTable[sbi->s_partition] =

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#127: FILE: fs/udf/balloc.c:194:
+					cpu_to_le32(le32_to_cpu(lvid->freeSpaceTable[sbi->s_partition]) + 1);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#174: FILE: fs/udf/balloc.c:268:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: fs/udf/balloc.c:269:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+		lvid->freeSpaceTable[partition] =

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#199: FILE: fs/udf/balloc.c:397:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: fs/udf/balloc.c:398:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+		lvid->freeSpaceTable[partition] =

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#211: FILE: fs/udf/balloc.c:429:
+	    (bloc.logicalBlockNum + count) > sbi->s_partmaps[bloc.partitionReferenceNum].s_partition_len) {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#228: FILE: fs/udf/balloc.c:441:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/udf/balloc.c:442:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+		lvid->freeSpaceTable[sbi->s_partition] =

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#262: FILE: fs/udf/balloc.c:680:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: fs/udf/balloc.c:681:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+		lvid->freeSpaceTable[partition] =

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#287: FILE: fs/udf/balloc.c:782:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: fs/udf/balloc.c:783:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+		lvid->freeSpaceTable[partition] =

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolIntegrityDescImpUse>
#414: FILE: fs/udf/ialloc.c:47:
+		struct logicalVolIntegrityDescImpUse *lvidiu =

CHECK:CAMELCASE: Avoid CamelCase: <numDirs>
#419: FILE: fs/udf/ialloc.c:50:
+			lvidiu->numDirs =

CHECK:CAMELCASE: Avoid CamelCase: <numFiles>
#424: FILE: fs/udf/ialloc.c:53:
+			lvidiu->numFiles =

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#438: FILE: fs/udf/ialloc.c:94:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolHeaderDesc>
#443: FILE: fs/udf/ialloc.c:98:
+		lvhd = (struct logicalVolHeaderDesc *)(lvid->logicalVolContentsUse);

CHECK:CAMELCASE: Avoid CamelCase: <logicalVolContentsUse>
#443: FILE: fs/udf/ialloc.c:98:
+		lvhd = (struct logicalVolHeaderDesc *)(lvid->logicalVolContentsUse);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#468: FILE: fs/udf/ialloc.c:130:
+		if (UDF_VERS_USE_EXTENDED_FE > sbi->s_udfrev)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:CAMELCASE: Avoid CamelCase: <descTag>
#566: FILE: fs/udf/inode.c:1546:
+	fe->descTag.tagSerialNum = cpu_to_le16(sbi->s_serial_number);

CHECK:CAMELCASE: Avoid CamelCase: <tagSerialNum>
#566: FILE: fs/udf/inode.c:1546:
+	fe->descTag.tagSerialNum = cpu_to_le16(sbi->s_serial_number);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#575: FILE: fs/udf/inode.c:1590:
+	if (ino.logicalBlockNum >= UDF_SB(sb)->s_partmaps[ino.partitionReferenceNum].s_partition_len) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#602: FILE: fs/udf/inode.c:1716:
+		if (!UDF_QUERY_FLAG(inode->i_sb, UDF_FLAG_STRICT) || UDF_SB(inode->i_sb)->s_udfrev >= 0x0201)

CHECK:CAMELCASE: Avoid CamelCase: <tagLocation>
#680: FILE: fs/udf/misc.c:216:
+			  block + sbi->s_session, le32_to_cpu(tag_p->tagLocation), location);

CHECK:CAMELCASE: Avoid CamelCase: <descCRC>
#689: FILE: fs/udf/misc.c:246:
+		  block + sbi->s_session, le16_to_cpu(tag_p->descCRC),

WARNING:LINE_SPACING: Missing a blank line after declarations
#797: FILE: fs/udf/partition.c:36:
+	struct udf_part_map *map;
+	if (partition >= sbi->s_partitions) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#822: FILE: fs/udf/partition.c:59:
+	index = (sb->s_blocksize - map->s_type_specific.s_virtual.s_start_offset) / sizeof(uint32_t);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#874: FILE: fs/udf/partition.c:111:
+	uint32_t packet;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_type_specific.s_sparing.s_spar_map[i]"
#882: FILE: fs/udf/partition.c:117:
+		if (map->s_type_specific.s_sparing.s_spar_map[i] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#883: FILE: fs/udf/partition.c:118:
+			st = (struct sparingTable *)map->s_type_specific.s_sparing.s_spar_map[i]->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <sparingTable>
#883: FILE: fs/udf/partition.c:118:
+			st = (struct sparingTable *)map->s_type_specific.s_sparing.s_spar_map[i]->b_data;

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#892: FILE: fs/udf/partition.c:129:
+					((block + offset) & (map->s_type_specific.s_sparing.s_packet_len - 1));

WARNING:LINE_SPACING: Missing a blank line after declarations
#917: FILE: fs/udf/partition.c:150:
+		struct udf_part_map *map = &sbi->s_partmaps[i];
+		if (old_block > map->s_partition_root &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_type_specific.s_sparing.s_spar_map[j]"
#924: FILE: fs/udf/partition.c:156:
+				if (map->s_type_specific.s_sparing.s_spar_map[j] != NULL) {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#933: FILE: fs/udf/partition.c:176:
+						((old_block - map->s_partition_root) & (sdata->s_packet_len - 1));

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#938: FILE: fs/udf/partition.c:180:
+						((old_block - map->s_partition_root) & (sdata->s_packet_len - 1));

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#947: FILE: fs/udf/partition.c:201:
+						((old_block - map->s_partition_root) & (sdata->s_packet_len - 1));

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#970: FILE: fs/udf/super.c:100:
+	struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <numOfPartitions>
#971: FILE: fs/udf/super.c:101:
+	__u32 number_of_partitions = le32_to_cpu(lvid->numOfPartitions);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#972: FILE: fs/udf/super.c:102:
+	__u32 offset = number_of_partitions * 2 * sizeof(uint32_t)/sizeof(uint8_t);
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#973: FILE: fs/udf/super.c:103:
+	__u32 offset = number_of_partitions * 2 * sizeof(uint32_t)/sizeof(uint8_t);
+	return (struct logicalVolIntegrityDescImpUse *)&(lvid->impUse[offset]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvid->impUse[offset]
#973: FILE: fs/udf/super.c:103:
+	return (struct logicalVolIntegrityDescImpUse *)&(lvid->impUse[offset]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <impUse>
#973: FILE: fs/udf/super.c:103:
+	return (struct logicalVolIntegrityDescImpUse *)&(lvid->impUse[offset]);

CHECK:CAMELCASE: Avoid CamelCase: <minUDFWriteRev>
#1009: FILE: fs/udf/super.c:488:
+		int write_rev = le16_to_cpu(udf_sb_lvidiu(sbi)->minUDFWriteRev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: fs/udf/super.c:659:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1073: FILE: fs/udf/super.c:697:
+				} else if (location == udf_variable_to_fixed(last[i]) - sbi->s_session) {

CHECK:CAMELCASE: Avoid CamelCase: <partitionNumber>
#1248: FILE: fs/udf/super.c:934:
+			  map->s_partition_num, le16_to_cpu(p->partitionNumber));

CHECK:CAMELCASE: Avoid CamelCase: <partitionLength>
#1250: FILE: fs/udf/super.c:936:
+			map->s_partition_len = le32_to_cpu(p->partitionLength); /* blocks */

CHECK:CAMELCASE: Avoid CamelCase: <partitionStartingLocation>
#1251: FILE: fs/udf/super.c:937:
+			map->s_partition_root = le32_to_cpu(p->partitionStartingLocation);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_uspace.s_bitmap"
#1289: FILE: fs/udf/super.c:972:
+					if (map->s_uspace.s_bitmap != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <s_extLength>
#1290: FILE: fs/udf/super.c:973:
+						map->s_uspace.s_bitmap->s_extLength =

CHECK:CAMELCASE: Avoid CamelCase: <s_extPosition>
#1293: FILE: fs/udf/super.c:975:
+						map->s_uspace.s_bitmap->s_extPosition =

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1296: FILE: fs/udf/super.c:977:
+						map->s_partition_flags |= UDF_PART_FLAG_UNALLOC_BITMAP;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_fspace.s_bitmap"
#1325: FILE: fs/udf/super.c:1002:
+					if (map->s_fspace.s_bitmap != NULL) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1332: FILE: fs/udf/super.c:1007:
+						map->s_partition_flags |= UDF_PART_FLAG_FREED_BITMAP;

CHECK:CAMELCASE: Avoid CamelCase: <mapTableLength>
#1370: FILE: fs/udf/super.c:1043:
+	     i < sbi->s_partitions && offset < le32_to_cpu(lvd->mapTableLength);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1372: FILE: fs/udf/super.c:1045:
+^I     ^Istruct udf_part_map *map = &sbi->s_partmaps[i];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1372: FILE: fs/udf/super.c:1045:
+^I     ^Istruct udf_part_map *map = &sbi->s_partmaps[i];$

CHECK:CAMELCASE: Avoid CamelCase: <volSeqNum>
#1381: FILE: fs/udf/super.c:1050:
+			map->s_volumeseqnum = le16_to_cpu(gpm1->volSeqNum);

CHECK:CAMELCASE: Avoid CamelCase: <partitionNum>
#1382: FILE: fs/udf/super.c:1051:
+			map->s_partition_num = le16_to_cpu(gpm1->partitionNum);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1407: FILE: fs/udf/super.c:1070:
+				map->s_type_specific.s_sparing.s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:CAMELCASE: Avoid CamelCase: <packetLength>
#1407: FILE: fs/udf/super.c:1070:
+				map->s_type_specific.s_sparing.s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_type_specific.s_sparing.s_spar_map[j]"
#1415: FILE: fs/udf/super.c:1075:
+					if (map->s_type_specific.s_sparing.s_spar_map[j] != NULL) {

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1416: FILE: fs/udf/super.c:1076:
+						st = (struct sparingTable *)map->s_type_specific.s_sparing.s_spar_map[j]->b_data;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1421: FILE: fs/udf/super.c:1079:
+							brelse(map->s_type_specific.s_sparing.s_spar_map[j]);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1422: FILE: fs/udf/super.c:1080:
+							map->s_type_specific.s_sparing.s_spar_map[j] = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <nextIntegrityExt>
#1462: FILE: fs/udf/super.c:1130:
+		if (lvid->nextIntegrityExt.extLength)

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#1462: FILE: fs/udf/super.c:1130:
+		if (lvid->nextIntegrityExt.extLength)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1507: FILE: fs/udf/super.c:1315:
+		if (sbi->s_anchor[i] &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1518: FILE: fs/udf/super.c:1342:
+	if (i == ARRAY_SIZE(sbi->s_anchor)) {
[...]
 	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1530: FILE: fs/udf/super.c:1351:
+		struct udf_part_map *map = &sbi->s_partmaps[i];
+		switch (map->s_partition_type) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1557: FILE: fs/udf/super.c:1371:
+					ino.logicalBlockNum = sbi->s_last_block - map2->s_partition_root;

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1599: FILE: fs/udf/super.c:1398:
+						     udf_ext0_offset(sbi->s_vat_inode))->lengthHeader) +

CHECK:CAMELCASE: Avoid CamelCase: <lengthHeader>
#1599: FILE: fs/udf/super.c:1398:
+						     udf_ext0_offset(sbi->s_vat_inode))->lengthHeader) +

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1601: FILE: fs/udf/super.c:1400:
+				map->s_type_specific.s_virtual.s_num_entries = (sbi->s_vat_inode->i_size -

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1602: FILE: fs/udf/super.c:1401:
+									map->s_type_specific.s_virtual.s_start_offset) >> 2;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sbi->s_partmaps[ino.partitionReferenceNum].s_partition_len'
#1610: FILE: fs/udf/super.c:1407:
+				sbi->s_partmaps[ino.partitionReferenceNum].
+								s_partition_len;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1621: FILE: fs/udf/super.c:1417:
+	struct buffer_head *bh = sbi->s_lvid_bh;
+	if (bh) {

CHECK:CAMELCASE: Avoid CamelCase: <impIdent>
#1629: FILE: fs/udf/super.c:1423:
+		lvidiu->impIdent.identSuffix[0] = UDF_OS_CLASS_UNIX;

CHECK:CAMELCASE: Avoid CamelCase: <identSuffix>
#1629: FILE: fs/udf/super.c:1423:
+		lvidiu->impIdent.identSuffix[0] = UDF_OS_CLASS_UNIX;

CHECK:CAMELCASE: Avoid CamelCase: <recordingDateAndTime>
#1634: FILE: fs/udf/super.c:1426:
+			lvid->recordingDateAndTime = cpu_to_lets(cpu_time);

CHECK:CAMELCASE: Avoid CamelCase: <integrityType>
#1635: FILE: fs/udf/super.c:1427:
+		lvid->integrityType = LVID_INTEGRITY_TYPE_OPEN;

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1640: FILE: fs/udf/super.c:1430:
+								       le16_to_cpu(lvid->descTag.descCRCLength), 0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: fs/udf/super.c:1430:
+		lvid->descTag.descCRC = cpu_to_le16(udf_crc((char *)lvid + sizeof(tag),
+								       le16_to_cpu(lvid->descTag.descCRCLength), 0));

CHECK:CAMELCASE: Avoid CamelCase: <descCRCLength>
#1640: FILE: fs/udf/super.c:1430:
+								       le16_to_cpu(lvid->descTag.descCRCLength), 0));

CHECK:CAMELCASE: Avoid CamelCase: <tagChecksum>
#1643: FILE: fs/udf/super.c:1432:
+		lvid->descTag.tagChecksum = 0;

CHECK:SPACING: No space is necessary after a cast
#1649: FILE: fs/udf/super.c:1436:
+					((uint8_t *) &(lvid->descTag))[i];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvid->descTag
#1649: FILE: fs/udf/super.c:1436:
+					((uint8_t *) &(lvid->descTag))[i];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1668: FILE: fs/udf/super.c:1449:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1676: FILE: fs/udf/super.c:1457:
+		struct logicalVolIntegrityDescImpUse *lvidiu = udf_sb_lvidiu(sbi);
+		lvidiu->impIdent.identSuffix[0] = UDF_OS_CLASS_UNIX;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1694: FILE: fs/udf/super.c:1461:
+		if (UDF_MAX_WRITE_VERSION > le16_to_cpu(lvidiu->maxUDFWriteRev))

CHECK:CAMELCASE: Avoid CamelCase: <maxUDFWriteRev>
#1694: FILE: fs/udf/super.c:1461:
+		if (UDF_MAX_WRITE_VERSION > le16_to_cpu(lvidiu->maxUDFWriteRev))

CHECK:CAMELCASE: Avoid CamelCase: <minUDFReadRev>
#1696: FILE: fs/udf/super.c:1463:
+		if (sbi->s_udfrev > le16_to_cpu(lvidiu->minUDFReadRev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lvid->descTag
#1712: FILE: fs/udf/super.c:1477:
+					((uint8_t *)&(lvid->descTag))[i];

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct udf_sb_info)...)
#1724: FILE: fs/udf/super.c:1512:
+	sbi = kzalloc(sizeof(struct udf_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1767: FILE: fs/udf/super.c:1562:
+	sbi->s_anchor[0] = sbi->s_anchor[1] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1786: FILE: fs/udf/super.c:1590:
+		uint16_t minUDFReadRev = le16_to_cpu(lvidiu->minUDFReadRev);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1787: FILE: fs/udf/super.c:1591:
+		uint16_t minUDFWriteRev = le16_to_cpu(lvidiu->minUDFWriteRev);

CHECK:CAMELCASE: Avoid CamelCase: <typeAndTimezone>
#1832: FILE: fs/udf/super.c:1633:
+			 ts.hour, ts.minute, ts.typeAndTimezone);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1853: FILE: fs/udf/super.c:1660:
+		iput(sbi->s_vat_inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1856: FILE: fs/udf/super.c:1663:
+		struct udf_part_map *map = &sbi->s_partmaps[sbi->s_partition];
+		if (map->s_partition_flags & UDF_PART_FLAG_UNALLOC_TABLE)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1857: FILE: fs/udf/super.c:1664:
+			iput(map->s_uspace.s_table);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1859: FILE: fs/udf/super.c:1666:
+			iput(map->s_fspace.s_table);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1905: FILE: fs/udf/super.c:1738:
+		iput(sbi->s_vat_inode);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1908: FILE: fs/udf/super.c:1741:
+		struct udf_part_map *map = &sbi->s_partmaps[sbi->s_partition];
+		if (map->s_partition_flags & UDF_PART_FLAG_UNALLOC_TABLE)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1909: FILE: fs/udf/super.c:1742:
+			iput(map->s_uspace.s_table);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1911: FILE: fs/udf/super.c:1744:
+			iput(map->s_fspace.s_table);
 			^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1942: FILE: fs/udf/super.c:1783:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sbi->s_lvid_bh"
#1943: FILE: fs/udf/super.c:1784:
+	if (sbi->s_lvid_bh != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lvidiu"
#1957: FILE: fs/udf/super.c:1794:
+	buf->f_files = (lvidiu != NULL ? (le32_to_cpu(lvidiu->numFiles) +

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1984: FILE: fs/udf/super.c:1901:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1985: FILE: fs/udf/super.c:1902:
+		struct logicalVolIntegrityDesc *lvid = (struct logicalVolIntegrityDesc *)sbi->s_lvid_bh->b_data;
+		if (le32_to_cpu(lvid->numOfPartitions) > sbi->s_partition) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi->s_partmaps)...) over kmalloc(sizeof(struct udf_part_map)...)
#2087: FILE: fs/udf/udf_sb.h:49:
+	sbi->s_partmaps = kmalloc(sizeof(struct udf_part_map) * Y, GFP_KERNEL);\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sbi->s_partmaps"
#2088: FILE: fs/udf/udf_sb.h:50:
+	if (sbi->s_partmaps != NULL) {\

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2102: FILE: fs/udf/udf_sb.h:62:
+	int nr_groups = ((sbi->s_partmaps[(Y)].s_partition_len + (sizeof(struct spaceBitmapDesc) << 3) +\

CHECK:CAMELCASE: Avoid CamelCase: <spaceBitmapDesc>
#2102: FILE: fs/udf/udf_sb.h:62:
+	int nr_groups = ((sbi->s_partmaps[(Y)].s_partition_len + (sizeof(struct spaceBitmapDesc) << 3) +\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sbi->s_partmaps[(Y)].Z.s_bitmap"
#2116: FILE: fs/udf/udf_sb.h:69:
+	if (sbi->s_partmaps[(Y)].Z.s_bitmap != NULL) {\

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#2172: FILE: fs/udf/udf_sb.h:98:
+#define UDF_SB_BITMAP(X,Y,Z,I)			( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_block_bitmap[I] )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2172: FILE: fs/udf/udf_sb.h:98:
+#define UDF_SB_BITMAP(X,Y,Z,I)			( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_block_bitmap[I] )
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2172: FILE: fs/udf/udf_sb.h:98:
+#define UDF_SB_BITMAP(X,Y,Z,I)			( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_block_bitmap[I] )
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2172: FILE: fs/udf/udf_sb.h:98:
+#define UDF_SB_BITMAP(X,Y,Z,I)			( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_block_bitmap[I] )
                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2172: FILE: fs/udf/udf_sb.h:98:
+#define UDF_SB_BITMAP(X,Y,Z,I)			( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_block_bitmap[I] )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2172: FILE: fs/udf/udf_sb.h:98:
+#define UDF_SB_BITMAP(X,Y,Z,I)			( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_block_bitmap[I] )

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2173: FILE: fs/udf/udf_sb.h:99:
+#define UDF_SB_BITMAP_NR_GROUPS(X,Y,Z)		( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_nr_groups )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2173: FILE: fs/udf/udf_sb.h:99:
+#define UDF_SB_BITMAP_NR_GROUPS(X,Y,Z)		( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_nr_groups )
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2173: FILE: fs/udf/udf_sb.h:99:
+#define UDF_SB_BITMAP_NR_GROUPS(X,Y,Z)		( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_nr_groups )
                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2173: FILE: fs/udf/udf_sb.h:99:
+#define UDF_SB_BITMAP_NR_GROUPS(X,Y,Z)		( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_nr_groups )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2173: FILE: fs/udf/udf_sb.h:99:
+#define UDF_SB_BITMAP_NR_GROUPS(X,Y,Z)		( UDF_SB(X)->s_partmaps[(Y)].Z.s_bitmap->s_nr_groups )

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 60 warnings, 61 checks, 1980 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
