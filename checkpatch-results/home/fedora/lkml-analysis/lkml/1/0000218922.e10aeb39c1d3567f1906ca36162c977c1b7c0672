WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-v28-for-linus-phase5

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: arch/x86/kernel/ptrace.c:1456:
+void send_sigtrap(struct task_struct *tsk, struct pt_regs *regs,
+					 int error_code, int si_code)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#322: FILE: arch/x86/kernel/signal_32.c:116:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#322: FILE: arch/x86/kernel/signal_32.c:116:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#326: FILE: arch/x86/kernel/signal_32.c:120:
+#define COPY_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#326: FILE: arch/x86/kernel/signal_32.c:120:
+#define COPY_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#332: FILE: arch/x86/kernel/signal_32.c:126:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#332: FILE: arch/x86/kernel/signal_32.c:126:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#338: FILE: arch/x86/kernel/signal_32.c:132:
+#define GET_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		loadsegment(seg, tmp);			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#338: FILE: arch/x86/kernel/signal_32.c:132:
+#define GET_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		loadsegment(seg, tmp);			\
+}

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#591: FILE: arch/x86/kernel/signal_32.c:499:
+	int usig = signr_convert(sig);
 	    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#595: FILE: arch/x86/kernel/signal_32.c:503:
+	if (is_ia32) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#597: FILE: arch/x86/kernel/signal_32.c:505:
+			ret = ia32_setup_rt_frame(usig, ka, info, set, regs);
 			                          ^^^^

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#599: FILE: arch/x86/kernel/signal_32.c:507:
+			ret = ia32_setup_frame(usig, ka, set, regs);
 			                       ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#600: FILE: arch/x86/kernel/signal_32.c:508:
+	} else

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#707: FILE: arch/x86/kernel/signal_32.c:706:
+	if (show_unhandled_signals && printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#708: FILE: arch/x86/kernel/signal_32.c:707:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#713: FILE: arch/x86/kernel/signal_32.c:712:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#713: FILE: arch/x86/kernel/signal_32.c:712:
+		printk(KERN_CONT "\n");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#726: FILE: arch/x86/kernel/signal_64.c:55:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#726: FILE: arch/x86/kernel/signal_64.c:55:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#730: FILE: arch/x86/kernel/signal_64.c:59:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#730: FILE: arch/x86/kernel/signal_64.c:59:
+#define COPY_SEG_STRICT(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#890: FILE: arch/x86/kernel/signal_64.c:298:
+	int usig = signr_convert(sig);
 	    ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#894: FILE: arch/x86/kernel/signal_64.c:302:
+	if (is_ia32) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#896: FILE: arch/x86/kernel/signal_64.c:304:
+			ret = ia32_setup_rt_frame(usig, ka, info, set, regs);
 			                          ^^^^

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#898: FILE: arch/x86/kernel/signal_64.c:306:
+			ret = ia32_setup_frame(usig, ka, set, regs);
 			                       ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#899: FILE: arch/x86/kernel/signal_64.c:307:
+	} else

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#992: FILE: arch/x86/kernel/signal_64.c:394:
+#define NR_restart_syscall	\
+	test_thread_flag(TIF_IA32) ? __NR_ia32_restart_syscall : __NR_restart_syscall

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1070: FILE: arch/x86/kernel/signal_64.c:507:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1076: FILE: arch/x86/kernel/signal_64.c:512:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1076: FILE: arch/x86/kernel/signal_64.c:512:
+		printk(KERN_CONT "\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1124: FILE: include/asm-generic/siginfo.h:202:
+#define TRAP_BRANCH     (__SI_FAULT|3)  /* process taken branch trap */
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1125: FILE: include/asm-generic/siginfo.h:203:
+#define TRAP_HWBKPT     (__SI_FAULT|4)  /* hardware breakpoint/watchpoint */
                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1185: FILE: include/asm-x86/traps.h:45:
+	else if (condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1185: FILE: include/asm-x86/traps.h:45:
+	else if (condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1185: FILE: include/asm-x86/traps.h:45:
+	else if (condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))
 	                                                ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218922.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 22 checks, 992 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218922.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
