WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#214: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: drivers/char/tty_audit.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: drivers/char/tty_audit.c:30:
+	buf = kmalloc(sizeof (*buf), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#307: FILE: drivers/char/tty_audit.c:89:
+		audit_log_format(ab, "tty pid=%u uid=%u auid=%u major=%d "
+				 "minor=%d comm=", tsk->pid, tsk->uid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf2"
#402: FILE: drivers/char/tty_audit.c:184:
+	if (buf2 == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#417: FILE: drivers/char/tty_audit.c:199:
+	/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#447: FILE: drivers/char/tty_audit.c:229:
+	if (buf->major != major || buf->minor != minor
+	    || buf->icanon != tty->icanon) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#524: FILE: drivers/char/tty_audit.c:306:
+		unsigned i;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#533: FILE: drivers/char/tty_audit.c:315:
+			struct file *filp;
 			             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#535: FILE: drivers/char/tty_audit.c:317:
+			filp = fcheck_files(current->files, i);
 			^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#536: FILE: drivers/char/tty_audit.c:318:
+			if (filp && is_tty(filp)) {
 			    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#536: FILE: drivers/char/tty_audit.c:318:
+			if (filp && is_tty(filp)) {
 			                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#562: FILE: drivers/char/tty_io.c:1503:
+int is_tty(struct file *filp)
                         ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#565: FILE: drivers/char/tty_io.c:1506:
+	return filp->f_op->read == tty_read
+		|| filp->f_op->read == hung_up_tty_read;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#631: FILE: include/linux/audit.h:466:
 }
+extern int audit_enabled;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: include/linux/audit.h:528:
+extern void		    audit_log_lost(const char *message);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#659: FILE: include/linux/sched.h:509:
+	unsigned audit_tty;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#672: FILE: include/linux/tty.h:313:
+extern int is_tty(struct file *filp);
                                ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#672: FILE: include/linux/tty.h:313:
+extern int is_tty(struct file *filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#682: FILE: include/linux/tty.h:347:
+extern void tty_audit_add_data(struct tty_struct *tty, unsigned char *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: include/linux/tty.h:349:
+extern void tty_audit_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: include/linux/tty.h:350:
+extern void tty_audit_push(struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#686: FILE: include/linux/tty.h:351:
+extern void tty_audit_push_task(struct task_struct *tsk, uid_t loginuid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#687: FILE: include/linux/tty.h:352:
+extern void tty_audit_opening(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#693: FILE: include/linux/tty.h:358:
+}
+static inline void tty_audit_exit(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#696: FILE: include/linux/tty.h:361:
+}
+static inline void tty_audit_push(struct tty_struct *tty)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#699: FILE: include/linux/tty.h:364:
+}
+static inline void tty_audit_push_task(struct task_struct *tsk, uid_t loginuid)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#702: FILE: include/linux/tty.h:367:
+}
+static inline void tty_audit_opening(void)

CHECK:BRACES: Unbalanced braces around else statement
#784: FILE: kernel/audit.c:677:
+				else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#805: FILE: kernel/audit.c:781:
+		if (!tsk)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#807: FILE: kernel/audit.c:783:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#828: FILE: kernel/audit.c:804:
+		if (!tsk)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#830: FILE: kernel/audit.c:806:
+		else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 20 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
