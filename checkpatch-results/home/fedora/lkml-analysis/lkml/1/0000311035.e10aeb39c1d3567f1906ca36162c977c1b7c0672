WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: fs/devscontrol.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!css->cgroup->parent"
#196: FILE: fs/devscontrol.c:63:
+	if (css->cgroup->parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!css->cgroup->parent"
#207: FILE: fs/devscontrol.c:74:
+	if (css->cgroup->parent == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*devs)...) over kzalloc(sizeof(struct devs_cgroup)...)
#218: FILE: fs/devscontrol.c:85:
+	devs = kzalloc(sizeof(struct devs_cgroup), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devs"
#219: FILE: fs/devscontrol.c:86:
+	if (devs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devs->cdev_map"
#223: FILE: fs/devscontrol.c:90:
+	if (devs->cdev_map == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devs->bdev_map"
#227: FILE: fs/devscontrol.c:94:
+	if (devs->bdev_map == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: fs/devscontrol.c:125:
+static int decode_perms_str(char *buf, int *chrdev, dev_t *dev,
+		int *all, mode_t *mode)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#274: FILE: fs/devscontrol.c:141:
+	major = simple_strtoul(buf + 2, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#286: FILE: fs/devscontrol.c:153:
+		minor = simple_strtoul(end + 1, &end, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: fs/devscontrol.c:177:
+static int encode_perms_str(char *buf, int len, int chrdev, dev_t dev,
+		int all, mode_t mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: fs/devscontrol.c:195:
+static ssize_t devs_write(struct cgroup *cont, struct cftype *cft,
+		struct file *f, const char __user *ubuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/devscontrol.c:257:
+	len = encode_perms_str(tmp, sizeof(tmp), arg->chrdev, dev,
+			range != 1, mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: fs/devscontrol.c:268:
+static ssize_t devs_read(struct cgroup *cont, struct cftype *cft,
+		struct file *f, char __user *ubuf, size_t nbytes, loff_t *pos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!arg.buf"
#408: FILE: fs/devscontrol.c:275:
+	if (arg.buf == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: fs/devscontrol.c:288:
+	ret = simple_read_from_buffer(ubuf, nbytes, pos,
+			arg.buf, arg.pos);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#480: FILE: include/linux/devscontrol.h:14:
+struct kobj_map *task_bdev_map(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'Controlls' may be misspelled - perhaps 'Controls'?
#502: FILE: init/Kconfig:296:
+	  Controlls the access rights to devices, i.e. you may hide
 	  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311035.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 13 checks, 433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311035.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
