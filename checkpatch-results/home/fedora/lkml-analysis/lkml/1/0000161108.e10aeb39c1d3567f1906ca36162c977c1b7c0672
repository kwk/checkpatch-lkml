WARNING:TYPO_SPELLING: 'argments' may be misspelled - perhaps 'arguments'?
#97: 
 fmt_args: the printf argments to match fmt
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'stucture' may be misspelled - perhaps 'structure'?
#105: 
 item: the name of the item in the stucture
                                   ^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#221: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: kernel/trace/trace_events_stage_1.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#319: FILE: kernel/trace/trace_events_stage_1.h:31:
+#define TRACE_FIELD(type, item, assign) \
+	type item;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#319: FILE: kernel/trace/trace_events_stage_1.h:31:
+#define TRACE_FIELD(type, item, assign) \
+	type item;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: kernel/trace/trace_events_stage_2.h:1:
+/*

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#367: FILE: kernel/trace/trace_events_stage_2.h:39:
+#define TRACE_FIELD(type, item, assign) \
+	field->item,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'item' may be better as '(item)' to avoid precedence issues
#367: FILE: kernel/trace/trace_events_stage_2.h:39:
+#define TRACE_FIELD(type, item, assign) \
+	field->item,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: kernel/trace/trace_events_stage_2.h:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#407: FILE: kernel/trace/trace_events_stage_3.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: kernel/trace/trace_events_stage_3.h:8:
+ * ^Ievent_trace_printk(_RET_IP_, "(<call>) " <fmt>);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: kernel/trace/trace_events_stage_3.h:13:
+ * ^Iint ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: kernel/trace/trace_events_stage_3.h:15:
+ * ^Iret = register_trace_<call>(ftrace_event_<call>);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: kernel/trace/trace_events_stage_3.h:16:
+ * ^Iif (!ret)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: kernel/trace/trace_events_stage_3.h:17:
+ * ^I^Ipr_info("event trace: Could not activate trace point "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: kernel/trace/trace_events_stage_3.h:18:
+ * ^I^I^I"probe to  <call>");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: kernel/trace/trace_events_stage_3.h:19:
+ * ^Ireturn ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: kernel/trace/trace_events_stage_3.h:24:
+ * ^Iunregister_trace_<call>(ftrace_event_<call>);$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#436: FILE: kernel/trace/trace_events_stage_3.h:30:
+ * __attribute__((__aligned__(4)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#437: FILE: kernel/trace/trace_events_stage_3.h:31:
+ * __attribute__((section("_ftrace_events"))) event_<call> = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#438: FILE: kernel/trace/trace_events_stage_3.h:32:
+ * ^I.name ^I^I^I= "<call>",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: kernel/trace/trace_events_stage_3.h:33:
+ * ^I.regfunc^I^I= ftrace_reg_event_<call>,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: kernel/trace/trace_events_stage_3.h:34:
+ * ^I.unregfunc^I^I= ftrace_unreg_event_<call>,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: kernel/trace/trace_events_stage_3.h:44:
+ * ^Istruct ring_buffer_event *event;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: kernel/trace/trace_events_stage_3.h:45:
+ * ^Istruct ftrace_raw_<call> *entry; <-- defined in stage 1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: kernel/trace/trace_events_stage_3.h:46:
+ * ^Iunsigned long irq_flags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: kernel/trace/trace_events_stage_3.h:47:
+ * ^Iint pc;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: kernel/trace/trace_events_stage_3.h:49:
+ * ^Ilocal_save_flags(irq_flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#456: FILE: kernel/trace/trace_events_stage_3.h:50:
+ * ^Ipc = preempt_count();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#458: FILE: kernel/trace/trace_events_stage_3.h:52:
+ * ^Ievent = trace_current_buffer_lock_reserve(event_<call>.id,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#459: FILE: kernel/trace/trace_events_stage_3.h:53:
+ * ^I^I^I^I  sizeof(struct ftrace_raw_<call>),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#460: FILE: kernel/trace/trace_events_stage_3.h:54:
+ * ^I^I^I^I  irq_flags, pc);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: kernel/trace/trace_events_stage_3.h:55:
+ * ^Iif (!event)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: kernel/trace/trace_events_stage_3.h:56:
+ * ^I^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#463: FILE: kernel/trace/trace_events_stage_3.h:57:
+ * ^Ientry^I= ring_buffer_event_data(event);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: kernel/trace/trace_events_stage_3.h:59:
+ * ^I<tstruct>;  <-- Here we assign the entries by the TRACE_FIELD.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#467: FILE: kernel/trace/trace_events_stage_3.h:61:
+ * ^Itrace_current_buffer_unlock_commit(event, irq_flags, pc);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#472: FILE: kernel/trace/trace_events_stage_3.h:66:
+ * ^Iint ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: kernel/trace/trace_events_stage_3.h:68:
+ * ^Iret = register_trace_<call>(ftrace_raw_event_<call>);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: kernel/trace/trace_events_stage_3.h:69:
+ * ^Iif (!ret)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: kernel/trace/trace_events_stage_3.h:70:
+ * ^I^Ipr_info("event trace: Could not activate trace point "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: kernel/trace/trace_events_stage_3.h:71:
+ * ^I^I^I"probe to <call>");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: kernel/trace/trace_events_stage_3.h:72:
+ * ^Ireturn ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#483: FILE: kernel/trace/trace_events_stage_3.h:77:
+ * ^Iunregister_trace_<call>(ftrace_raw_event_<call>);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#487: FILE: kernel/trace/trace_events_stage_3.h:81:
+ * ^I.trace^I^I^I= ftrace_raw_output_<call>, <-- stage 2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: kernel/trace/trace_events_stage_3.h:86:
+ * ^Iint id;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#494: FILE: kernel/trace/trace_events_stage_3.h:88:
+ * ^Iid = register_ftrace_event(&ftrace_event_type_<call>);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#495: FILE: kernel/trace/trace_events_stage_3.h:89:
+ * ^Iif (!id)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#496: FILE: kernel/trace/trace_events_stage_3.h:90:
+ * ^I^Ireturn -ENODEV;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#497: FILE: kernel/trace/trace_events_stage_3.h:91:
+ * ^Ievent_<call>.id = id;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#498: FILE: kernel/trace/trace_events_stage_3.h:92:
+ * ^Ireturn 0;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#502: FILE: kernel/trace/trace_events_stage_3.h:96:
+ * __attribute__((__aligned__(4)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#503: FILE: kernel/trace/trace_events_stage_3.h:97:
+ * __attribute__((section("_ftrace_events"))) event_<call> = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#504: FILE: kernel/trace/trace_events_stage_3.h:98:
+ * ^I.name ^I^I^I= "<call>",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#505: FILE: kernel/trace/trace_events_stage_3.h:99:
+ * ^I.regfunc^I^I= ftrace_reg_event_<call>,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: kernel/trace/trace_events_stage_3.h:100:
+ * ^I.unregfunc^I^I= ftrace_unreg_event_<call>,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#507: FILE: kernel/trace/trace_events_stage_3.h:101:
+ * ^I.raw_init^I^I= ftrace_raw_init_event_<call>,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#508: FILE: kernel/trace/trace_events_stage_3.h:102:
+ * ^I.raw_reg^I^I= ftrace_raw_reg_event_<call>,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#509: FILE: kernel/trace/trace_events_stage_3.h:103:
+ * ^I.raw_unreg^I^I= ftrace_raw_unreg_event_<call>,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#539: FILE: kernel/trace/trace_events_stage_3.h:133:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#544: FILE: kernel/trace/trace_events_stage_3.h:138:
+__attribute__((__aligned__(4)))						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#545: FILE: kernel/trace/trace_events_stage_3.h:139:
+__attribute__((section("_ftrace_events"))) event_##call = {		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#546: FILE: kernel/trace/trace_events_stage_3.h:140:
+^I.name ^I^I^I= #call,^I^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#553: FILE: kernel/trace/trace_events_stage_3.h:147:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'item' may be better as '(item)' to avoid precedence issues
#553: FILE: kernel/trace/trace_events_stage_3.h:147:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#553: FILE: kernel/trace/trace_events_stage_3.h:147:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'proto' - possible side-effects?
#557: FILE: kernel/trace/trace_events_stage_3.h:151:
+#define TRACE_EVENT_FORMAT(call, proto, args, fmt, tstruct, tpfmt)	\
+_TRACE_FORMAT(call, PARAMS(proto), PARAMS(args), PARAMS(fmt))		\
+									\
+static struct ftrace_event_call event_##call;				\
+									\
+static void ftrace_raw_event_##call(proto)				\
+{									\
+	struct ring_buffer_event *event;				\
+	struct ftrace_raw_##call *entry;				\
+	unsigned long irq_flags;					\
+	int pc;								\
+									\
+	local_save_flags(irq_flags);					\
+	pc = preempt_count();						\
+									\
+	event = trace_current_buffer_lock_reserve(event_##call.id,	\
+				  sizeof(struct ftrace_raw_##call), 	\
+				  irq_flags, pc);			\
+	if (!event)							\
+		return;							\
+	entry	= ring_buffer_event_data(event);			\
+									\
+	tstruct;							\
+									\
+	trace_current_buffer_unlock_commit(event, irq_flags, pc);	\
+}									\
+									\
+static int ftrace_raw_reg_event_##call(void)				\
+{									\
+	int ret;							\
+									\
+	ret = register_trace_##call(ftrace_raw_event_##call);		\
+	if (!ret)							\
+		pr_info("event trace: Could not activate trace point "	\
+			"probe to " #call);				\
+	return ret;							\
+}									\
+									\
+static void ftrace_raw_unreg_event_##call(void)				\
+{									\
+	unregister_trace_##call(ftrace_raw_event_##call);		\
+}									\
+									\
+static struct trace_event ftrace_event_type_##call = {			\
+	.trace			= ftrace_raw_output_##call,		\
+};									\
+									\
+static int ftrace_raw_init_event_##call(void)				\
+{									\
+	int id;								\
+									\
+	id = register_ftrace_event(&ftrace_event_type_##call);		\
+	if (!id)							\
+		return -ENODEV;						\
+	event_##call.id = id;						\
+	return 0;							\
+}									\
+									\
+static struct ftrace_event_call __used					\
+__attribute__((__aligned__(4)))						\
+__attribute__((section("_ftrace_events"))) event_##call = {		\
+	.name 			= #call,				\
+	.system			= STR(TRACE_SYSTEM),			\
+	.regfunc		= ftrace_reg_event_##call,		\
+	.unregfunc		= ftrace_unreg_event_##call,		\
+	.raw_init		= ftrace_raw_init_event_##call,		\
+	.raw_reg		= ftrace_raw_reg_event_##call,		\
+	.raw_unreg		= ftrace_raw_unreg_event_##call,	\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: kernel/trace/trace_events_stage_3.h:167:
+^I^I^I^I  sizeof(struct ftrace_raw_##call), ^I\$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#616: FILE: kernel/trace/trace_events_stage_3.h:210:
+__attribute__((__aligned__(4)))						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#617: FILE: kernel/trace/trace_events_stage_3.h:211:
+__attribute__((section("_ftrace_events"))) event_##call = {		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#618: FILE: kernel/trace/trace_events_stage_3.h:212:
+^I.name ^I^I^I= #call,^I^I^I^I\$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161108.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 64 warnings, 5 checks, 367 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161108.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
