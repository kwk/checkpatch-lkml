CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: arch/x86/include/asm/pci_x86.h:110:
+extern int pci_xen_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#112: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: arch/x86/include/asm/xen/iommu.h:1:
+#ifndef ASM_X86__XEN_IOMMU_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: arch/x86/include/asm/xen/iommu.h:4:
+extern void xen_iommu_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: arch/x86/pci/xen.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: arch/x86/pci/xen.c:3:
+ * ^I^I^I   x86 PCI core to support the Xen PCI Frontend$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#200: FILE: arch/x86/pci/xen.c:12:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#215: FILE: arch/x86/pci/xen.c:27:
+	printk(KERN_INFO "PCI: setting up Xen PCI frontend stub\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: drivers/pci/xen-iommu.c:1:
+#include <linux/types.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#281: FILE: drivers/pci/xen-iommu.c:23:
+		printk(KERN_ALERT "Fatal DMA error! "	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: drivers/pci/xen-iommu.c:25:
+		BUG();					\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#288: FILE: drivers/pci/xen-iommu.c:30:
+#define PAR(msg, addr, size)					\
+do {							\
+	printk(msg "[%#llx - %#llx]\n",			\
+	(unsigned long long)addr,			\
+	(unsigned long long)addr + size);		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#288: FILE: drivers/pci/xen-iommu.c:30:
+#define PAR(msg, addr, size)					\
+do {							\
+	printk(msg "[%#llx - %#llx]\n",			\
+	(unsigned long long)addr,			\
+	(unsigned long long)addr + size);		\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#288: FILE: drivers/pci/xen-iommu.c:30:
+#define PAR(msg, addr, size)					\
+do {							\
+	printk(msg "[%#llx - %#llx]\n",			\
+	(unsigned long long)addr,			\
+	(unsigned long long)addr + size);		\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: drivers/pci/xen-iommu.c:32:
+	printk(msg "[%#llx - %#llx]\n",			\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: drivers/pci/xen-iommu.c:38:
+static inline int address_needs_mapping(struct device *hwdev,
+						dma_addr_t addr)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#308: FILE: drivers/pci/xen-iommu.c:50:
+		printk(KERN_ERR "dma address needs mapping\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#309: FILE: drivers/pci/xen-iommu.c:51:
+		printk(KERN_ERR "mask: %#llx\n address: [%#llx]\n", mask, addr);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#323: FILE: drivers/pci/xen-iommu.c:65:
+	nr_pages = (offset + length + PAGE_SIZE-1) >> PAGE_SHIFT;
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: drivers/pci/xen-iommu.c:113:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: drivers/pci/xen-iommu.c:117:
+		BUG_ON(!sg_page(s));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#379: FILE: drivers/pci/xen-iommu.c:121:
+		IOMMU_BUG_ON(range_straddles_page_boundary(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->coherent_dma_mask < DMA_BIT_MASK(32)'
#418: FILE: drivers/pci/xen-iommu.c:160:
+	if (dev == NULL || (dev->coherent_dma_mask < DMA_BIT_MASK(32)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#418: FILE: drivers/pci/xen-iommu.c:160:
+	if (dev == NULL || (dev->coherent_dma_mask < DMA_BIT_MASK(32)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#424: FILE: drivers/pci/xen-iommu.c:166:
+	if (dev != NULL && dev->coherent_dma_mask)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#429: FILE: drivers/pci/xen-iommu.c:171:
+	if (ret != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: drivers/pci/xen-iommu.c:202:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#476: FILE: drivers/pci/xen-iommu.c:218:
+	BUG_ON(direction == DMA_NONE);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#480: FILE: drivers/pci/xen-iommu.c:222:
+static struct dma_map_ops xen_dma_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#497: FILE: drivers/pci/xen-iommu.c:239:
+static struct dma_map_ops xen_swiotlb_dma_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#519: FILE: drivers/pci/xen-iommu.c:261:
+	printk(KERN_INFO "Xen: Initializing Xen DMA ops\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#525: FILE: drivers/pci/xen-iommu.c:267:
+		printk(KERN_INFO "Xen: Enabling DMA fallback to swiotlb\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119792.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 12 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119792.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
