WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This patch provides an integrity framework (API and set of hooks), placement

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/linux/integrity.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: include/linux/integrity.h:25:
+ * ^I^IINTEGRITY_NOLABEL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: include/linux/integrity.h:30:
+ * ^Iof the requested xattr_name and the verification result of the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: include/linux/integrity.h:38:
+ * ^I^IINTEGRITY_NOLABEL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: include/linux/integrity.h:52:
+ * ^Ito be set.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: include/linux/integrity.h:58:
+ * ^Iidentified by @name for @dentry.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: include/linux/integrity.h:62:
+ * ^Ii_integrity field is initialized to NULL when the inode structure is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: include/linux/integrity.h:63:
+ * ^Iallocated.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: include/linux/integrity.h:64:
+ * ^I@inode contains the inode structure.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: include/linux/integrity.h:65:
+ * ^IReturn 0 if operation was successful.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#133: FILE: include/linux/integrity.h:69:
+ * ^IDeallocate the inode integrity structure and set @inode->i_integrity to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#134: FILE: include/linux/integrity.h:70:
+ * ^INULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: include/linux/integrity.h:74:
+ * ^Ixattr information.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#141: FILE: include/linux/integrity.h:77:
+ * ^I@name contains the security xattr name suffix.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: include/linux/integrity.h:83:
+ * ^I*file contains the file structure being closed.$

WARNING:SPACING: Unnecessary space before function pointer arguments
#160: FILE: include/linux/integrity.h:96:
+	int (*verify_metadata) (struct dentry *dentry, char *xattr_name,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/integrity.h:97:
+	int (*verify_metadata) (struct dentry *dentry, char *xattr_name,
+			char **xattr_value, int *xattr_val_len, int *status);

WARNING:SPACING: Unnecessary space before function pointer arguments
#162: FILE: include/linux/integrity.h:98:
+	int (*verify_data) (struct dentry *dentry, struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: include/linux/integrity.h:99:
+	int (*verify_data) (struct dentry *dentry, struct file *file,
+				int *status);

WARNING:SPACING: Unnecessary space before function pointer arguments
#164: FILE: include/linux/integrity.h:100:
+	void (*measure) (struct dentry *dentry, struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: include/linux/integrity.h:101:
+	void (*measure) (struct dentry *dentry, struct file *file,
+			const unsigned char *filename, int mask);

WARNING:SPACING: Unnecessary space before function pointer arguments
#166: FILE: include/linux/integrity.h:102:
+	int (*inode_setxattr) (struct dentry *dentry, char *name, void *value,

WARNING:SPACING: Unnecessary space before function pointer arguments
#168: FILE: include/linux/integrity.h:104:
+	void (*inode_post_setxattr) (struct dentry *dentry, char *name);

WARNING:SPACING: Unnecessary space before function pointer arguments
#169: FILE: include/linux/integrity.h:105:
+	int (*inode_alloc_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#170: FILE: include/linux/integrity.h:106:
+	void (*inode_free_integrity) (struct inode *inode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#171: FILE: include/linux/integrity.h:107:
+	void (*inode_init_integrity) (struct inode *inode, struct inode *dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: include/linux/integrity.h:108:
+	void (*inode_init_integrity) (struct inode *inode, struct inode *dir,
+				    char **name, void **value, size_t *len);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: include/linux/integrity.h:109:
+	void (*file_free_integrity) (struct file * file);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#173: FILE: include/linux/integrity.h:109:
+	void (*file_free_integrity) (struct file * file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#174: FILE: include/linux/integrity.h:110:
+	void (*d_instantiate) (struct dentry *dentry, struct inode *inode);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#176: FILE: include/linux/integrity.h:112:
+};
+extern int register_integrity(struct integrity_operations *ops);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/integrity.h:112:
+extern int register_integrity(struct integrity_operations *ops);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/integrity.h:113:
+extern int unregister_integrity(struct integrity_operations *ops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: include/linux/integrity.h:124:
+static inline int integrity_verify_metadata(struct dentry *dentry,
+			char *xattr_name, char **xattr_value,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: include/linux/integrity.h:138:
+static inline void integrity_measure(struct dentry *dentry, struct file *file,
+			const unsigned char *filename, int mask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#210: FILE: include/linux/integrity.h:146:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#210: FILE: include/linux/integrity.h:146:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_inode'
#210: FILE: include/linux/integrity.h:146:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#217: FILE: include/linux/integrity.h:153:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#217: FILE: include/linux/integrity.h:153:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_inode'
#217: FILE: include/linux/integrity.h:153:
+	if (unlikely (IS_PRIVATE (dentry->d_inode)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: include/linux/integrity.h:155:
+ ^Iintegrity_ops->inode_post_setxattr(dentry, name);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: include/linux/integrity.h:155:
+ ^Iintegrity_ops->inode_post_setxattr(dentry, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: include/linux/integrity.h:155:
+ ^Iintegrity_ops->inode_post_setxattr(dentry, name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: include/linux/integrity.h:169:
+static inline void integrity_inode_init_integrity(struct inode *inode,
+						struct inode *dir,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: include/linux/integrity.h:174:
+	if (unlikely (IS_PRIVATE (inode)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: include/linux/integrity.h:174:
+	if (unlikely (IS_PRIVATE (inode)))

WARNING:RETURN_VOID: void function return statements are not generally useful
#242: FILE: include/linux/integrity.h:178:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: include/linux/integrity.h:187:
+	if (unlikely (inode && IS_PRIVATE(inode)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: include/linux/integrity.h:193:
+static inline int integrity_verify_metadata(struct dentry *dentry,
+			char *xattr_name, char **xattr_value,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: include/linux/integrity.h:208:
+static inline void integrity_measure(struct dentry *dentry, struct file *file,
+			const unsigned char *filename, int mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/integrity.h:230:
+static inline int integrity_inode_init_integrity(struct inode *inode,
+						struct inode *dir,

WARNING:RETURN_VOID: void function return statements are not generally useful
#310: FILE: include/linux/integrity.h:246:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#315: FILE: include/linux/integrity.h:251:
+	return;
+}

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#327: FILE: security/Kconfig:42:
+config INTEGRITY
+	bool "Enable different integrity models"
+	help
+	  This allows you to choose different integrity modules to be
+	  configured into your kernel.
+
+	  If you are unsure how to answer this question, answer N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: security/integrity.c:1:
+/*

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#397: FILE: security/integrity.c:43:
+EXPORT_SYMBOL_GPL(register_integrity);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#398: FILE: security/integrity.c:44:
+EXPORT_SYMBOL_GPL(unregister_integrity);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#399: FILE: security/integrity.c:45:
+EXPORT_SYMBOL_GPL(integrity_ops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#405: FILE: security/integrity_dummy.c:1:
+/*

WARNING:RETURN_VOID: void function return statements are not generally useful
#476: FILE: security/integrity_dummy.c:72:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#486: FILE: security/integrity_dummy.c:82:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#489: FILE: security/integrity_dummy.c:85:
+				       char **name, void **value, size_t * len)

WARNING:RETURN_VOID: void function return statements are not generally useful
#492: FILE: security/integrity_dummy.c:88:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#497: FILE: security/integrity_dummy.c:93:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#516: FILE: security/integrity_dummy.c:112:
+	return;
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ops' - possible side-effects?
#531: FILE: security/integrity_dummy.c:127:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ops' may be better as '(ops)' to avoid precedence issues
#531: FILE: security/integrity_dummy.c:127:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#531: FILE: security/integrity_dummy.c:127:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#531: FILE: security/integrity_dummy.c:127:
+#define set_to_dummy_if_null(ops, function)				\
+	do {								\
+		if (!ops->function) {					\
+			ops->function = dummy_##function;		\
+			printk(KERN_INFO "Had to override the " #function \
+			" security operation with the dummy one.\n");\
+			}						\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#535: FILE: security/integrity_dummy.c:131:
+			printk(KERN_INFO "Had to override the " #function \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#558: FILE: security/integrity_dummy.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#570: FILE: security/integrity_dummy.h:13:
+extern void integrity_fixup_ops(struct integrity_operations *ops);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#640: FILE: fs/ext3/xattr_security.c:62:
+		 * indicate this is a new inode. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416431.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 52 warnings, 20 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416431.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
