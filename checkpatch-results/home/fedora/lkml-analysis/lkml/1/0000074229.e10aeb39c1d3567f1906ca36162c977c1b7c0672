WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#212: FILE: arch/x86/include/asm/hw_breakpoint.h:58:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#212: FILE: arch/x86/include/asm/hw_breakpoint.h:58:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#308: FILE: arch/x86/kernel/hw_breakpoint.c:78:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#308: FILE: arch/x86/kernel/hw_breakpoint.c:78:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->thread
#756: FILE: arch/x86/kernel/ptrace.c:457:
+	struct thread_struct *thread = &(current->thread);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'shoud' may be misspelled - perhaps 'should'?
#842: FILE: arch/x86/kernel/ptrace.c:532:
+		 * We shoud have at least an inactive breakpoint at this
 		      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: arch/x86/kernel/ptrace.c:574:
+		struct hw_breakpoint *bp;
+		bp = thread->ptrace_bps[n];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#891: FILE: arch/x86/kernel/ptrace.c:580:
+	 } else if (n == 7) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#905: FILE: arch/x86/kernel/ptrace.c:594:
+	if (!t->ptrace_bps[nr]) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#920: FILE: arch/x86/kernel/ptrace.c:609:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#933: FILE: arch/x86/kernel/ptrace.c:622:
+	if (new) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#939: FILE: arch/x86/kernel/ptrace.c:628:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1061: FILE: include/asm-generic/hw_breakpoint.h:135:
+extern int register_kernel_hw_breakpoint(struct hw_breakpoint *bp, int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1062: FILE: include/asm-generic/hw_breakpoint.h:136:
+extern int register_perf_hw_breakpoint(struct perf_counter *counter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1063: FILE: include/asm-generic/hw_breakpoint.h:137:
+extern int __register_perf_hw_breakpoint(struct perf_counter *counter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1064: FILE: include/asm-generic/hw_breakpoint.h:138:
+extern void unregister_hw_breakpoint(struct hw_breakpoint *bp);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*counter->hw.bp)...) over kzalloc(sizeof(struct hw_breakpoint)...)
#1246: FILE: kernel/hw_breakpoint.c:87:
+	counter->hw.bp = kzalloc(sizeof(struct hw_breakpoint), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1580: FILE: kernel/hw_breakpoint.c:246:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1700: FILE: kernel/trace/trace_ksym.c:220:
+			printk(KERN_INFO "ksym_tracer request failed. Try again"

WARNING:SPLIT_STRING: quoted string split across lines
#1701: FILE: kernel/trace/trace_ksym.c:221:
+			printk(KERN_INFO "ksym_tracer request failed. Try again"
+					 " later!!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000074229.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 11 checks, 1614 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000074229.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
