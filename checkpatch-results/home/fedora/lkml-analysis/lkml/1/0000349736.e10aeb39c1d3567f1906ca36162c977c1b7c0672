WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-linus

WARNING:TYPO_SPELLING: 'accesing' may be misspelled - perhaps 'accessing'?
#98: 
      S2io: Check for register initialization completion before accesing device registers
                                                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'complient' may be misspelled - perhaps 'compliant'?
#146: FILE: Documentation/networking/bonding.txt:579:
+		This algorithm is 802.3ad complient.
 		                          ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#242: FILE: drivers/net/bonding/bond_main.c:2759:
+			if (time_after_eq(jiffies, slave->dev->trans_start + 2*delta_in_ticks) ||
 			                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#243: FILE: drivers/net/bonding/bond_main.c:2760:
+			    (time_after_eq(jiffies, slave->dev->last_rx + 2*delta_in_ticks) &&
 			                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/net/bonding/bond_main.c:2854:
+			if (time_before_eq(jiffies,
+			    slave_last_rx(bond, slave) + delta_in_ticks)) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#263: FILE: drivers/net/bonding/bond_main.c:2863:
+				    time_before_eq(jiffies, slave->dev->trans_start + delta_in_ticks)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#272: FILE: drivers/net/bonding/bond_main.c:2902:
+			    (time_after_eq(jiffies, slave_last_rx(bond, slave) + 3*delta_in_ticks) &&

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#272: FILE: drivers/net/bonding/bond_main.c:2902:
+			    (time_after_eq(jiffies, slave_last_rx(bond, slave) + 3*delta_in_ticks) &&
 			                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#284: FILE: drivers/net/bonding/bond_main.c:2948:
+		if ((time_after_eq(jiffies, slave->dev->trans_start + 2*delta_in_ticks) ||
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/net/bonding/bond_main.c:2949:
+		if ((time_after_eq(jiffies, slave->dev->trans_start + 2*delta_in_ticks) ||
+			(time_after_eq(jiffies, slave_last_rx(bond, slave) + 2*delta_in_ticks) &&

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#285: FILE: drivers/net/bonding/bond_main.c:2949:
+			(time_after_eq(jiffies, slave_last_rx(bond, slave) + 2*delta_in_ticks) &&
 			                                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#287: FILE: drivers/net/bonding/bond_main.c:2951:
+			time_after_eq(jiffies, slave->jiffies + 2*delta_in_ticks)) {
 			                                         ^

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#304: FILE: drivers/net/bonding/bond_main.c:3618:
+	if (skb->protocol == __constant_htons(ETH_P_IP)) {

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#465: FILE: drivers/net/bonding/bond_sysfs.c:95:
+		buf[res-1] = '\n'; /* eat the leftover space */
 		       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#483: FILE: drivers/net/bonding/bond_sysfs.c:244:
+		buf[res-1] = '\n'; /* eat the leftover space */
 		       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#561: FILE: drivers/net/bonding/bond_sysfs.c:696:
+		buf[res-1] = '\n'; /* eat the leftover space */
 		       ^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#654: FILE: drivers/net/bonding/bond_sysfs.c:1290:
+		count = sprintf(buf, "%d\n", (bond_3ad_get_active_agg_info(bond, &ad_info)) ?  0 : ad_info.aggregator_id);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#666: FILE: drivers/net/bonding/bond_sysfs.c:1310:
+		count = sprintf(buf, "%d\n", (bond_3ad_get_active_agg_info(bond, &ad_info)) ?  0: ad_info.ports);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#666: FILE: drivers/net/bonding/bond_sysfs.c:1310:
+		count = sprintf(buf, "%d\n", (bond_3ad_get_active_agg_info(bond, &ad_info)) ?  0: ad_info.ports);
 		                                                                                ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#678: FILE: drivers/net/bonding/bond_sysfs.c:1330:
+		count = sprintf(buf, "%d\n", (bond_3ad_get_active_agg_info(bond, &ad_info)) ?  0 : ad_info.actor_key);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#690: FILE: drivers/net/bonding/bond_sysfs.c:1350:
+		count = sprintf(buf, "%d\n", (bond_3ad_get_active_agg_info(bond, &ad_info)) ?  0 : ad_info.partner_key);

CHECK:CAMELCASE: Avoid CamelCase: <SUPPORTED_10000baseT_Full>
#792: FILE: drivers/net/cxgb3/t3_hw.c:451:
+	 0, SUPPORTED_10000baseT_Full | SUPPORTED_AUI,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tx_tcnt != mac->tx_tcnt'
#908: FILE: drivers/net/cxgb3/xgmac.c:539:
+	if ((tx_tcnt != mac->tx_tcnt) && (mac->tx_xcnt == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mac->tx_xcnt == 0'
#908: FILE: drivers/net/cxgb3/xgmac.c:539:
+	if ((tx_tcnt != mac->tx_tcnt) && (mac->tx_xcnt == 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#994: FILE: drivers/net/ibm_newemac/core.c:477:
+	if (!link) {
[...]
+	} else if (emac_reset(dev) < 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#997: FILE: drivers/net/ibm_newemac/core.c:480:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1238: FILE: drivers/net/ibm_newemac/phy.c:315:
+static struct mii_phy_def bcm5248_phy_def = {
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1247: FILE: drivers/net/ibm_newemac/phy.c:324:
+	pr_debug("%s: Marvell 88E1111 Ethernet\n", __FUNCTION__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1290: FILE: drivers/net/ibm_newemac/phy.c:367:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1292: FILE: drivers/net/ibm_newemac/phy.c:369:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1303: FILE: drivers/net/ibm_newemac/phy.c:380:
+static struct mii_phy_def m88e1111_phy_def = {
+

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1560: FILE: drivers/net/s2io.c:1111:
+			msleep(10);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 20 checks, 1251 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
