WARNING:TYPO_SPELLING: 'appliable' may be misspelled - perhaps 'applicable'?
#60: 
appliable.]
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status < old_brightness_status'
#186: FILE: drivers/platform/mips/yeeloong_laptop.c:553:
+		if ((status < old_brightness_status) || (0 == status))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#186: FILE: drivers/platform/mips/yeeloong_laptop.c:553:
+		if ((status < old_brightness_status) || (0 == status))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status < old_volume_status'
#191: FILE: drivers/platform/mips/yeeloong_laptop.c:558:
+		if ((status < old_volume_status) || (0 == status))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#191: FILE: drivers/platform/mips/yeeloong_laptop.c:558:
+		if ((status < old_volume_status) || (0 == status))

CHECK:BRACES: braces {} should be used on all arms of this statement
#229: FILE: drivers/platform/mips/yeeloong_laptop.c:596:
+	if (!p)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: drivers/platform/mips/yeeloong_laptop.c:598:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#239: FILE: drivers/platform/mips/yeeloong_laptop.c:606:
+	 * otherwise, the brightness will not resume to the normal level! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#251: FILE: drivers/platform/mips/yeeloong_laptop.c:618:
+	 * when CRT is connected */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#317: FILE: drivers/platform/mips/yeeloong_laptop.c:684:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handler"
#375: FILE: drivers/platform/mips/yeeloong_laptop.c:742:
+	if (handler != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: drivers/platform/mips/yeeloong_laptop.c:754:
+			sparse_keymap_report_entry(yeeloong_hotkey_dev, ke, 1,
+					true);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#401: FILE: drivers/platform/mips/yeeloong_laptop.c:768:
+	if (SCI_IRQ_NUM != irq)

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#439: FILE: drivers/platform/mips/yeeloong_laptop.c:806:
+	udelay(10000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:LONG_UDELAY: long udelay - prefer mdelay; see arch/arm/include/asm/delay.h
#439: FILE: drivers/platform/mips/yeeloong_laptop.c:806:
+	udelay(10000);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 8 checks, 480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000037622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
