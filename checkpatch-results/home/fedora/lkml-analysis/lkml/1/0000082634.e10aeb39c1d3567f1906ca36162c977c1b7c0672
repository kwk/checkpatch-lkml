WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Suspicion is that either of the two functions is counting a duplicate (either

WARNING:TYPO_SPELLING: 'existance' may be misspelled - perhaps 'existence'?
#32: 
Modifying check_writable_mappings_rmap to check for rmap existance on
                                                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#53: FILE: arch/x86/kvm/mmu.c:3048:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#68: FILE: arch/x86/kvm/mmu.c:3063:
+				struct kvm_mmu_page *child;
+				child = page_header(ent & PT64_BASE_ADDR_MASK);

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: arch/x86/kvm/mmu.c:3081:
+		hpa_t root = vcpu->arch.mmu.root_hpa;
+		sp = page_header(root);

WARNING:RETURN_VOID: void function return statements are not generally useful
#100: FILE: arch/x86/kvm/mmu.c:3095:
+	return;
+}

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#121: FILE: arch/x86/kvm/mmu.c:3200:
+			if (!printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#123: FILE: arch/x86/kvm/mmu.c:3202:
+			printk(KERN_ERR "%s: no memslot for gfn %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: arch/x86/kvm/mmu.c:3203:
+			printk(KERN_ERR "%s: no memslot for gfn %ld\n",
+					 audit_msg, gfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#125: FILE: arch/x86/kvm/mmu.c:3204:
+			printk(KERN_ERR "%s: index %ld of sp (gfn=%lx)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: arch/x86/kvm/mmu.c:3205:
+			printk(KERN_ERR "%s: index %ld of sp (gfn=%lx)\n",
+					audit_msg, sptep - rev_sp->spt,

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#134: FILE: arch/x86/kvm/mmu.c:3213:
+			if (!printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#136: FILE: arch/x86/kvm/mmu.c:3215:
+			printk(KERN_ERR "%s: no rmap for writable spte %llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: arch/x86/kvm/mmu.c:3216:
+			printk(KERN_ERR "%s: no rmap for writable spte %llx\n",
+					 audit_msg, *sptep);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#142: FILE: arch/x86/kvm/mmu.c:3221:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 5 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
