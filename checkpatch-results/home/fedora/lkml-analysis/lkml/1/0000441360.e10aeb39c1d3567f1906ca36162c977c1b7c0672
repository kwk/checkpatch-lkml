WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Add an interface to the AF_RXRPC module so that the AFS filesystem module can

WARNING:TYPO_SPELLING: 'addess' may be misspelled - perhaps 'address'?
#89: 
bind an addess as appropriate and listen if it's to be a server socket, but
        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#258: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'addess' may be misspelled - perhaps 'address'?
#324: FILE: Documentation/networking/rxrpc.txt:692:
+bind an addess as appropriate and listen if it's to be a server socket, but
         ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#498: FILE: include/net/af_rxrpc.h:1:
+/* RxRPC kernel service interface definitions

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#530: FILE: include/net/af_rxrpc.h:36:
+extern void rxrpc_kernel_intercept_rx_messages(struct socket *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#530: FILE: include/net/af_rxrpc.h:36:
+extern void rxrpc_kernel_intercept_rx_messages(struct socket *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rxrpc_interceptor_t' should also have an identifier name
#530: FILE: include/net/af_rxrpc.h:36:
+extern void rxrpc_kernel_intercept_rx_messages(struct socket *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: include/net/af_rxrpc.h:38:
+extern struct rxrpc_call *rxrpc_kernel_begin_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#532: FILE: include/net/af_rxrpc.h:38:
+extern struct rxrpc_call *rxrpc_kernel_begin_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sockaddr_rxrpc *' should also have an identifier name
#532: FILE: include/net/af_rxrpc.h:38:
+extern struct rxrpc_call *rxrpc_kernel_begin_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#532: FILE: include/net/af_rxrpc.h:38:
+extern struct rxrpc_call *rxrpc_kernel_begin_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#532: FILE: include/net/af_rxrpc.h:38:
+extern struct rxrpc_call *rxrpc_kernel_begin_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#532: FILE: include/net/af_rxrpc.h:38:
+extern struct rxrpc_call *rxrpc_kernel_begin_call(struct socket *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#537: FILE: include/net/af_rxrpc.h:43:
+extern int rxrpc_kernel_send_data(struct rxrpc_call *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_call *' should also have an identifier name
#537: FILE: include/net/af_rxrpc.h:43:
+extern int rxrpc_kernel_send_data(struct rxrpc_call *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#537: FILE: include/net/af_rxrpc.h:43:
+extern int rxrpc_kernel_send_data(struct rxrpc_call *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#537: FILE: include/net/af_rxrpc.h:43:
+extern int rxrpc_kernel_send_data(struct rxrpc_call *, struct msghdr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: include/net/af_rxrpc.h:45:
+extern void rxrpc_kernel_abort_call(struct rxrpc_call *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_call *' should also have an identifier name
#539: FILE: include/net/af_rxrpc.h:45:
+extern void rxrpc_kernel_abort_call(struct rxrpc_call *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#539: FILE: include/net/af_rxrpc.h:45:
+extern void rxrpc_kernel_abort_call(struct rxrpc_call *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#540: FILE: include/net/af_rxrpc.h:46:
+extern void rxrpc_kernel_end_call(struct rxrpc_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_call *' should also have an identifier name
#540: FILE: include/net/af_rxrpc.h:46:
+extern void rxrpc_kernel_end_call(struct rxrpc_call *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: include/net/af_rxrpc.h:47:
+extern bool rxrpc_kernel_is_data_last(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#541: FILE: include/net/af_rxrpc.h:47:
+extern bool rxrpc_kernel_is_data_last(struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/net/af_rxrpc.h:48:
+extern u32 rxrpc_kernel_get_abort_code(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#542: FILE: include/net/af_rxrpc.h:48:
+extern u32 rxrpc_kernel_get_abort_code(struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#543: FILE: include/net/af_rxrpc.h:49:
+extern int rxrpc_kernel_get_error_number(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#543: FILE: include/net/af_rxrpc.h:49:
+extern int rxrpc_kernel_get_error_number(struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/net/af_rxrpc.h:50:
+extern void rxrpc_kernel_data_delivered(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#544: FILE: include/net/af_rxrpc.h:50:
+extern void rxrpc_kernel_data_delivered(struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/net/af_rxrpc.h:51:
+extern void rxrpc_kernel_free_skb(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#545: FILE: include/net/af_rxrpc.h:51:
+extern void rxrpc_kernel_free_skb(struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: include/net/af_rxrpc.h:52:
+extern struct rxrpc_call *rxrpc_kernel_accept_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#546: FILE: include/net/af_rxrpc.h:52:
+extern struct rxrpc_call *rxrpc_kernel_accept_call(struct socket *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#546: FILE: include/net/af_rxrpc.h:52:
+extern struct rxrpc_call *rxrpc_kernel_accept_call(struct socket *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: include/net/af_rxrpc.h:54:
+extern int rxrpc_kernel_reject_call(struct socket *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#548: FILE: include/net/af_rxrpc.h:54:
+extern int rxrpc_kernel_reject_call(struct socket *);

CHECK:SPACING: No space is necessary after a cast
#646: FILE: net/rxrpc/af_rxrpc.c:280:
+		trans = rxrpc_name_to_transport(sock, (struct sockaddr *) srx,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#687: FILE: net/rxrpc/af_rxrpc.c:321:
+EXPORT_SYMBOL(rxrpc_kernel_begin_call);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#703: FILE: net/rxrpc/af_rxrpc.c:337:
+EXPORT_SYMBOL(rxrpc_kernel_end_call);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#725: FILE: net/rxrpc/af_rxrpc.c:359:
+EXPORT_SYMBOL(rxrpc_kernel_intercept_rx_messages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#774: FILE: net/rxrpc/af_rxrpc.c:803:
+		printk(KERN_NOTICE "RxRPC: Failed to allocate work queue\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#851: FILE: net/rxrpc/ar-accept.c:388:
+	 * rxrpc_release_call() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#867: FILE: net/rxrpc/ar-accept.c:404:
+/*
+ * handle rejectance of a call by userspace

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#909: FILE: net/rxrpc/ar-accept.c:446:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#947: FILE: net/rxrpc/ar-accept.c:485:
+EXPORT_SYMBOL(rxrpc_kernel_accept_call);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#966: FILE: net/rxrpc/ar-accept.c:504:
+EXPORT_SYMBOL(rxrpc_kernel_reject_call);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1025: FILE: net/rxrpc/ar-call.c:22:
+static unsigned rxrpc_dead_call_timeout = 2;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[0]"
#1087: FILE: net/rxrpc/ar-call.c:448:
+			ASSERT(conn->channels[0] == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[1]"
#1088: FILE: net/rxrpc/ar-call.c:449:
+			       conn->channels[1] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[2]"
#1089: FILE: net/rxrpc/ar-call.c:450:
+			       conn->channels[2] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[3]"
#1090: FILE: net/rxrpc/ar-call.c:451:
+			       conn->channels[3] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[0]"
#1095: FILE: net/rxrpc/ar-call.c:456:
+			ASSERT(conn->channels[0] == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[1]"
#1096: FILE: net/rxrpc/ar-call.c:457:
+			       conn->channels[1] == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[2]"
#1097: FILE: net/rxrpc/ar-call.c:458:
+			       conn->channels[2] == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[3]"
#1098: FILE: net/rxrpc/ar-call.c:459:
+			       conn->channels[3] == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1101: FILE: net/rxrpc/ar-call.c:462:
+			printk(KERN_ERR "RxRPC: conn->avail_calls=%d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1103: FILE: net/rxrpc/ar-call.c:464:
+			BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[0]"
#1202: FILE: net/rxrpc/ar-connection.c:451:
+			ASSERT(conn->channels[0] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[1]"
#1203: FILE: net/rxrpc/ar-connection.c:452:
+			       conn->channels[1] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[2]"
#1204: FILE: net/rxrpc/ar-connection.c:453:
+			       conn->channels[2] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[3]"
#1205: FILE: net/rxrpc/ar-connection.c:454:
+			       conn->channels[3] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[0]"
#1215: FILE: net/rxrpc/ar-connection.c:466:
+			ASSERT(conn->channels[0] == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[1]"
#1216: FILE: net/rxrpc/ar-connection.c:467:
+			       conn->channels[1] == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[2]"
#1217: FILE: net/rxrpc/ar-connection.c:468:
+			       conn->channels[2] == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[3]"
#1218: FILE: net/rxrpc/ar-connection.c:469:
+			       conn->channels[3] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[0]"
#1235: FILE: net/rxrpc/ar-connection.c:569:
+	ASSERT(conn->channels[0] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[1]"
#1236: FILE: net/rxrpc/ar-connection.c:570:
+	       conn->channels[1] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[2]"
#1237: FILE: net/rxrpc/ar-connection.c:571:
+	       conn->channels[2] == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conn->channels[3]"
#1238: FILE: net/rxrpc/ar-connection.c:572:
+	       conn->channels[3] == NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1312: FILE: net/rxrpc/ar-connevent.c:318:
+		printk("resurrected on reject\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1313: FILE: net/rxrpc/ar-connevent.c:319:
+		BUG();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1404: FILE: net/rxrpc/ar-input.c:103:
+		} else {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1408: FILE: net/rxrpc/ar-input.c:107:
+			 * control pulling packets from the queue */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1549: FILE: net/rxrpc/ar-internal.h:31:
+#define rxrpc_queue_delayed_work(WS,D)	\
                                    ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1610: FILE: net/rxrpc/ar-internal.h:446:
+extern struct rxrpc_call *rxrpc_accept_call(struct rxrpc_sock *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_sock *' should also have an identifier name
#1610: FILE: net/rxrpc/ar-internal.h:446:
+extern struct rxrpc_call *rxrpc_accept_call(struct rxrpc_sock *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1610: FILE: net/rxrpc/ar-internal.h:446:
+extern struct rxrpc_call *rxrpc_accept_call(struct rxrpc_sock *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1612: FILE: net/rxrpc/ar-internal.h:448:
+extern int rxrpc_reject_call(struct rxrpc_sock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_sock *' should also have an identifier name
#1612: FILE: net/rxrpc/ar-internal.h:448:
+extern int rxrpc_reject_call(struct rxrpc_sock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1620: FILE: net/rxrpc/ar-internal.h:505:
+extern void rxrpc_reject_packet(struct rxrpc_local *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_local *' should also have an identifier name
#1620: FILE: net/rxrpc/ar-internal.h:505:
+extern void rxrpc_reject_packet(struct rxrpc_local *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#1620: FILE: net/rxrpc/ar-internal.h:505:
+extern void rxrpc_reject_packet(struct rxrpc_local *, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1628: FILE: net/rxrpc/ar-internal.h:575:
+extern void rxrpc_remove_user_ID(struct rxrpc_sock *, struct rxrpc_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_sock *' should also have an identifier name
#1628: FILE: net/rxrpc/ar-internal.h:575:
+extern void rxrpc_remove_user_ID(struct rxrpc_sock *, struct rxrpc_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rxrpc_call *' should also have an identifier name
#1628: FILE: net/rxrpc/ar-internal.h:575:
+extern void rxrpc_remove_user_ID(struct rxrpc_sock *, struct rxrpc_call *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1696: FILE: net/rxrpc/ar-output.c:231:
+		mm_segment_t oldfs = get_fs();
+		set_fs(KERNEL_DS);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1706: FILE: net/rxrpc/ar-output.c:241:
+EXPORT_SYMBOL(rxrpc_kernel_send_data);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1709: FILE: net/rxrpc/ar-output.c:244:
+/*
+ * rxrpc_kernel_abort_call - Allow a kernel service to abort a call

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1731: FILE: net/rxrpc/ar-output.c:266:
+EXPORT_SYMBOL(rxrpc_kernel_abort_call);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1821: FILE: net/rxrpc/ar-recvmsg.c:388:
+EXPORT_SYMBOL(rxrpc_kernel_data_delivered);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1838: FILE: net/rxrpc/ar-recvmsg.c:405:
+EXPORT_SYMBOL(rxrpc_kernel_is_data_last);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1855: FILE: net/rxrpc/ar-recvmsg.c:422:
+EXPORT_SYMBOL(rxrpc_kernel_get_abort_code);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1870: FILE: net/rxrpc/ar-recvmsg.c:437:
+EXPORT_SYMBOL(rxrpc_kernel_get_error_number);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1901: FILE: net/rxrpc/ar-skbuff.c:132:
+EXPORT_SYMBOL(rxrpc_kernel_free_skb);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 57 warnings, 38 checks, 1494 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
