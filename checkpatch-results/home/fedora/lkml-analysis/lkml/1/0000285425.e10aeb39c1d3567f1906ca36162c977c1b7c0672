WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#58: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: arch/microblaze/kernel/hack.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#64: FILE: arch/microblaze/kernel/hack.c:2:
+ * arch/microblaze/kernel/hack.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: No space is necessary after a cast
#94: FILE: arch/microblaze/kernel/hack.c:32:
+		addr = (unsigned int *) arr_fce[j];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: arch/microblaze/kernel/hack.c:34:
+		pr_debug("%s: func(%d) at 0x%x\n",
+					__func__, j, (unsigned int) addr);

CHECK:SPACING: No space is necessary after a cast
#96: FILE: arch/microblaze/kernel/hack.c:34:
+					__func__, j, (unsigned int) addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: arch/microblaze/kernel/hack.c:37:
+			pr_debug("%s: instruction code at %d: 0x%x\n",
+						__func__, i, addr[i]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#102: FILE: arch/microblaze/kernel/hack.c:40:
+				if ((addr[i+1] & 0xec00ff00) == 0xe800ff00) {
 				           ^

WARNING:SPLIT_STRING: quoted string split across lines
#104: FILE: arch/microblaze/kernel/hack.c:42:
+					pr_debug("%s: curr instr, "
+						"(%d):0x%x, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#105: FILE: arch/microblaze/kernel/hack.c:43:
+						"(%d):0x%x, "
+						"next(%d):0x%x\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#106: FILE: arch/microblaze/kernel/hack.c:44:
+						 __func__, i, addr[i], i+1,
 						                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#107: FILE: arch/microblaze/kernel/hack.c:45:
+								addr[i+1]);
 								      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: arch/microblaze/kernel/hack.c:47:
+					addr[i+1] = (addr[i+1] & 0xffff00ff) +
 					      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: arch/microblaze/kernel/hack.c:47:
+					addr[i+1] = (addr[i+1] & 0xffff00ff) +
 					                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: arch/microblaze/kernel/hack.c:50:
+					__invalidate_icache(addr[i+1]);
 					                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#114: FILE: arch/microblaze/kernel/hack.c:52:
+					pr_debug("%s: hack instr, "
+						"(%d):0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#115: FILE: arch/microblaze/kernel/hack.c:53:
+						"(%d):0x%x, "
+						"next(%d):0x%x\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: arch/microblaze/kernel/hack.c:54:
+						 __func__, i, addr[i], i+1,
 						                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#117: FILE: arch/microblaze/kernel/hack.c:55:
+								addr[i+1]);
 								      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#118: FILE: arch/microblaze/kernel/hack.c:56:
+				} else /* detection addik for ack */
+				if ((addr[i+1] & 0xfc00ff00) == 0x3000ff00) {

CHECK:BRACES: Unbalanced braces around else statement
#118: FILE: arch/microblaze/kernel/hack.c:56:
+				} else /* detection addik for ack */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: arch/microblaze/kernel/hack.c:57:
+				if ((addr[i+1] & 0xfc00ff00) == 0x3000ff00) {
 				           ^

WARNING:SPLIT_STRING: quoted string split across lines
#121: FILE: arch/microblaze/kernel/hack.c:59:
+					pr_debug("%s: curr instr, "
+						"(%d):0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#122: FILE: arch/microblaze/kernel/hack.c:60:
+						"(%d):0x%x, "
+						"next(%d):0x%x\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#123: FILE: arch/microblaze/kernel/hack.c:61:
+						 __func__, i, addr[i], i+1,
 						                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#124: FILE: arch/microblaze/kernel/hack.c:62:
+								addr[i+1]);
 								      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: arch/microblaze/kernel/hack.c:64:
+					addr[i+1] = (addr[i+1] & 0xffff00ff) +
 					      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: arch/microblaze/kernel/hack.c:64:
+					addr[i+1] = (addr[i+1] & 0xffff00ff) +
 					                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#129: FILE: arch/microblaze/kernel/hack.c:67:
+					__invalidate_icache(addr[i+1]);
 					                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: arch/microblaze/kernel/hack.c:69:
+					pr_debug("%s: hack instr, "
+						"(%d):0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#132: FILE: arch/microblaze/kernel/hack.c:70:
+						"(%d):0x%x, "
+						"next(%d):0x%x\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#133: FILE: arch/microblaze/kernel/hack.c:71:
+						 __func__, i, addr[i], i+1,
 						                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#134: FILE: arch/microblaze/kernel/hack.c:72:
+								addr[i+1]);
 								      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: arch/microblaze/kernel/hack.c:76:
+				pr_debug("%s: end of array %d\n",
+							__func__, i);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: arch/microblaze/kernel/intc.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#152: FILE: arch/microblaze/kernel/intc.c:2:
+ * arch/microblaze/kernel/intc.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#165: FILE: arch/microblaze/kernel/intc.c:15:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#183: FILE: arch/microblaze/kernel/intc.c:33:
+#define SIE 0x10			/* Set Interrupt Enable bits */
         ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#188: FILE: arch/microblaze/kernel/intc.c:38:
+#define MER_ME (1<<0)
                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#188: FILE: arch/microblaze/kernel/intc.c:38:
+#define MER_ME (1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#189: FILE: arch/microblaze/kernel/intc.c:39:
+#define MER_HIE (1<<1)
                   ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#189: FILE: arch/microblaze/kernel/intc.c:39:
+#define MER_HIE (1<<1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: arch/microblaze/kernel/intc.c:44:
+	unsigned int mask = (0x00000001 << (irq & 31));
+	pr_debug("enable: %d\n", irq);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#196: FILE: arch/microblaze/kernel/intc.c:46:
+	iowrite32(mask, HACK_BASE_ADDR + SIE);
 	                                 ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#198: FILE: arch/microblaze/kernel/intc.c:48:
+	iowrite32(mask, intc_baseaddr + SIE);
 	                                ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: arch/microblaze/kernel/intc.c:55:
+	unsigned long mask = (0x00000001 << (irq & 31));
+	pr_debug("disable: %d\n", irq);

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: arch/microblaze/kernel/intc.c:66:
+	unsigned long mask = (0x00000001 << (irq & 31));
+	pr_debug("disable_and_ack: %d\n", irq);

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#237: FILE: arch/microblaze/kernel/intc.c:87:
+		iowrite32(mask, HACK_BASE_ADDR + SIE);
 		                                 ^^^

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#242: FILE: arch/microblaze/kernel/intc.c:92:
+		iowrite32(mask, intc_baseaddr + SIE);
 		                                ^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_irq', this function's name, in a string
#272: FILE: arch/microblaze/kernel/intc.c:122:
+	pr_debug("get_irq: %d\n", irq);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#293: FILE: arch/microblaze/kernel/intc.c:143:
+	static char *intc_list[] = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "intc_list[j]"
#301: FILE: arch/microblaze/kernel/intc.c:151:
+	for (j = 0; intc_list[j] != NULL; j++) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#307: FILE: arch/microblaze/kernel/intc.c:157:
+	intc_baseaddr = *(int *) of_get_property(intc, "reg", NULL);

CHECK:SPACING: No space is necessary after a cast
#308: FILE: arch/microblaze/kernel/intc.c:158:
+	intc_baseaddr = (unsigned long) ioremap(intc_baseaddr, PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#309: FILE: arch/microblaze/kernel/intc.c:159:
+	NR_IRQ = *(int *) of_get_property(intc, "xlnx,num-intr-inputs", NULL);

CHECK:SPACING: No space is necessary after a cast
#311: FILE: arch/microblaze/kernel/intc.c:161:
+	function_hack((int *) arr_func, intc_baseaddr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#313: FILE: arch/microblaze/kernel/intc.c:163:
+	printk(KERN_INFO "%s #0 at 0x%08x, irq=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: arch/microblaze/kernel/intc.c:164:
+	printk(KERN_INFO "%s #0 at 0x%08x, irq=%d\n",
+		intc_list[j], intc_baseaddr, handle);

WARNING:TYPO_SPELLING: 'explicity' may be misspelled - perhaps 'explicitly'?
#318: FILE: arch/microblaze/kernel/intc.c:168:
+	 * explicity requested.
 	   ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#326: FILE: arch/microblaze/kernel/intc.c:176:
+	iowrite32(MER_HIE|MER_ME, intc_baseaddr + MER);
 	                 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#343: FILE: arch/microblaze/kernel/irq.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#381: FILE: arch/microblaze/kernel/irq.c:39:
+	printk(KERN_WARNING "unexpected IRQ trap at vector %02x\n", irq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: arch/microblaze/kernel/irq.c:49:
+	BUG_ON(irq == -1U);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#399: FILE: arch/microblaze/kernel/irq.c:57:
+	int i = *(loff_t *) v, j;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#404: FILE: arch/microblaze/kernel/irq.c:62:
+		seq_printf(p, "		");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#423: FILE: arch/microblaze/kernel/irq.c:81:
+					IRQ_LEVEL ? "level": "edge");
 					                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#438: FILE: arch/microblaze/kernel/irq.c:96:
+/*unsigned int irq_of_parse_and_map(struct device_node *dev, int index)
+{

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#442: FILE: arch/microblaze/kernel/irq.c:100:
+EXPORT_SYMBOL_GPL(irq_of_parse_and_map);*/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#449: FILE: arch/microblaze/kernel/timer.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#450: FILE: arch/microblaze/kernel/timer.c:2:
+ * arch/microblaze/kernel/timer.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#466: FILE: arch/microblaze/kernel/timer.c:18:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#486: FILE: arch/microblaze/kernel/timer.c:38:
+#define TCSR_MDT	(1<<0)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#486: FILE: arch/microblaze/kernel/timer.c:38:
+#define TCSR_MDT	(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#487: FILE: arch/microblaze/kernel/timer.c:39:
+#define TCSR_UDT	(1<<1)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#487: FILE: arch/microblaze/kernel/timer.c:39:
+#define TCSR_UDT	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#488: FILE: arch/microblaze/kernel/timer.c:40:
+#define TCSR_GENT	(1<<2)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#488: FILE: arch/microblaze/kernel/timer.c:40:
+#define TCSR_GENT	(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#489: FILE: arch/microblaze/kernel/timer.c:41:
+#define TCSR_CAPT	(1<<3)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#489: FILE: arch/microblaze/kernel/timer.c:41:
+#define TCSR_CAPT	(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#490: FILE: arch/microblaze/kernel/timer.c:42:
+#define TCSR_ARHT	(1<<4)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#490: FILE: arch/microblaze/kernel/timer.c:42:
+#define TCSR_ARHT	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#491: FILE: arch/microblaze/kernel/timer.c:43:
+#define TCSR_LOAD	(1<<5)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#491: FILE: arch/microblaze/kernel/timer.c:43:
+#define TCSR_LOAD	(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#492: FILE: arch/microblaze/kernel/timer.c:44:
+#define TCSR_ENIT	(1<<6)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#492: FILE: arch/microblaze/kernel/timer.c:44:
+#define TCSR_ENIT	(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#493: FILE: arch/microblaze/kernel/timer.c:45:
+#define TCSR_ENT	(1<<7)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#493: FILE: arch/microblaze/kernel/timer.c:45:
+#define TCSR_ENT	(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#494: FILE: arch/microblaze/kernel/timer.c:46:
+#define TCSR_TINT	(1<<8)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#494: FILE: arch/microblaze/kernel/timer.c:46:
+#define TCSR_TINT	(1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#495: FILE: arch/microblaze/kernel/timer.c:47:
+#define TCSR_PWMA	(1<<9)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#495: FILE: arch/microblaze/kernel/timer.c:47:
+#define TCSR_PWMA	(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#496: FILE: arch/microblaze/kernel/timer.c:48:
+#define TCSR_ENALL	(1<<10)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#496: FILE: arch/microblaze/kernel/timer.c:48:
+#define TCSR_ENALL	(1<<10)

WARNING:TYPO_SPELLING: 'couting' may be misspelled - perhaps 'counting'?
#537: FILE: arch/microblaze/kernel/timer.c:89:
+	/* Load register value (couting down */
 	                        ^^^^^^^

WARNING:TYPO_SPELLING: 'couting' may be misspelled - perhaps 'counting'?
#543: FILE: arch/microblaze/kernel/timer.c:95:
+	/* Load register value (couting down */
 	                        ^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#549: FILE: arch/microblaze/kernel/timer.c:101:
+	unsigned long offset = (tcmp-tcr)/(cpuinfo.cpu_clock_freq/1000000);
 	                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#549: FILE: arch/microblaze/kernel/timer.c:101:
+	unsigned long offset = (tcmp-tcr)/(cpuinfo.cpu_clock_freq/1000000);
 	                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#549: FILE: arch/microblaze/kernel/timer.c:101:
+	unsigned long offset = (tcmp-tcr)/(cpuinfo.cpu_clock_freq/1000000);
 	                                                         ^

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#566: FILE: arch/microblaze/kernel/timer.c:118:
+	char *timer_list[] = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timer_list[j]"
#573: FILE: arch/microblaze/kernel/timer.c:125:
+	for (j = 0; timer_list[j] != NULL; j++) {

CHECK:SPACING: No space is necessary after a cast
#579: FILE: arch/microblaze/kernel/timer.c:131:
+	timer_baseaddr = *(int *) of_get_property(timer, "reg", NULL);

CHECK:SPACING: No space is necessary after a cast
#580: FILE: arch/microblaze/kernel/timer.c:132:
+	timer_baseaddr = (unsigned long) ioremap(timer_baseaddr, PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#581: FILE: arch/microblaze/kernel/timer.c:133:
+	irq = *(int *) of_get_property(timer, "interrupts", NULL);

CHECK:SPACING: No space is necessary after a cast
#583: FILE: arch/microblaze/kernel/timer.c:135:
+	function_hack((int *) arr_func, timer_baseaddr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#585: FILE: arch/microblaze/kernel/timer.c:137:
+	printk(KERN_INFO "%s #0 at 0x%08x, irq=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: arch/microblaze/kernel/timer.c:138:
+	printk(KERN_INFO "%s #0 at 0x%08x, irq=%d\n",
+		timer_list[j], timer_baseaddr, irq);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#589: FILE: arch/microblaze/kernel/timer.c:141:
+	iowrite32(cpuinfo.cpu_clock_freq/HZ, timer_baseaddr + TLR0);
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#608: FILE: arch/microblaze/kernel/timer.c:160:
+	iowrite32(TCSR_TINT|TCSR_ENT|TCSR_ENIT|TCSR_ARHT|TCSR_UDT,
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#608: FILE: arch/microblaze/kernel/timer.c:160:
+	iowrite32(TCSR_TINT|TCSR_ENT|TCSR_ENIT|TCSR_ARHT|TCSR_UDT,
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#608: FILE: arch/microblaze/kernel/timer.c:160:
+	iowrite32(TCSR_TINT|TCSR_ENT|TCSR_ENIT|TCSR_ARHT|TCSR_UDT,
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#608: FILE: arch/microblaze/kernel/timer.c:160:
+	iowrite32(TCSR_TINT|TCSR_ENT|TCSR_ENIT|TCSR_ARHT|TCSR_UDT,
 	                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: arch/microblaze/kernel/timer.c:161:
+	iowrite32(TCSR_TINT|TCSR_ENT|TCSR_ENIT|TCSR_ARHT|TCSR_UDT,
+			timer_baseaddr + TCSR0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#619: FILE: include/asm-microblaze/hack.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#620: FILE: include/asm-microblaze/hack.h:2:
+ * include/asm-microblaze/hack.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#649: FILE: include/asm-microblaze/irq.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#650: FILE: include/asm-microblaze/irq.h:2:
+ * include/asm-microblaze/irq.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#667: FILE: include/asm-microblaze/irq.h:19:
+extern void ledoff(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#673: FILE: include/asm-microblaze/irq.h:25:
+	return (irq);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#677: FILE: include/asm-microblaze/irq.h:29:
+extern void do_IRQ(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#678: FILE: include/asm-microblaze/irq.h:30:
+extern void __init init_IRQ(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/asm-microblaze/irq.h:42:
+extern unsigned int irq_of_parse_and_map(struct device_node *dev, int index);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285425.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 42 warnings, 77 checks, 600 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285425.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
