WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
now). The use of large buffersizes can therefore be fully transparent to user

WARNING:TYPO_SPELLING: 'interate' may be misspelled - perhaps 'iterate'?
#40: 
  to interate over all base pages of a large buffer to get all ptes
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#77: FILE: mm/filemap.c:1326:
+		vmf->pgoff & ((1 << mapping_order(mapping)) -1);
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <PageAnon>
#181: FILE: mm/memory.c:490:
+		rss[!!PageAnon(head)]++;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: mm/memory.c:1756:
+		cow_user_page(new_page, old_page + page_index,
+							address, vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: mm/memory.c:2409:
+			copy_user_highpage(page,
+				vmf.page + page_index, address, vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: mm/rmap.c:275:
+static int __page_referenced_one(struct page *page,
 	struct vm_area_struct *vma, unsigned int *mapcount)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: mm/rmap.c:307:
+static int page_referenced_one(struct page *page,
+	struct vm_area_struct *vma, unsigned int *mapcount)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: mm/rmap.c:684:
+static int __try_to_unmap_one(struct page *page, int page_index,
+		struct vm_area_struct *vma, int migration)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: mm/rmap.c:758:
+		entry = make_migration_entry(page + page_index,
+						pte_write(pteval));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: mm/rmap.c:775:
+static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,
+				int migration)

WARNING:INDENTED_LABEL: labels should not be indented
#596: FILE: mm/mempolicy.c:263:
+	next:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: mm/mempolicy.c:604:
+static struct page *new_node_page(struct page *page,
+				unsigned long node, int **x)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 10 checks, 535 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
