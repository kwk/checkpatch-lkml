WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#1518: FILE: tests/Kconfig:17:
+	  lock debugging then those bugs wont be detected of course.)
 	                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1538: FILE: tests/locking-selftest-hardirq.h:1:
+#undef IRQ_DISABLE

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1552: FILE: tests/locking-selftest-mutex.h:1:
+#undef LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1568: FILE: tests/locking-selftest-rlock-hardirq.h:1:
+#include "locking-selftest-rlock.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1575: FILE: tests/locking-selftest-rlock-softirq.h:1:
+#include "locking-selftest-rlock.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1582: FILE: tests/locking-selftest-rlock.h:1:
+#undef LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1601: FILE: tests/locking-selftest-rsem.h:1:
+#undef LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1620: FILE: tests/locking-selftest-softirq.h:1:
+#undef IRQ_DISABLE

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1634: FILE: tests/locking-selftest-spin-hardirq.h:1:
+#include "locking-selftest-spin.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1641: FILE: tests/locking-selftest-spin-softirq.h:1:
+#include "locking-selftest-spin.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1648: FILE: tests/locking-selftest-spin.h:1:
+#undef LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1664: FILE: tests/locking-selftest-wlock-hardirq.h:1:
+#include "locking-selftest-wlock.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1671: FILE: tests/locking-selftest-wlock.h:1:
+#undef LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1690: FILE: tests/locking-selftest-wsem.h:1:
+#undef LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1709: FILE: tests/locking-selftest.c:1:
+/*

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1745: FILE: tests/locking-selftest.c:37:
+__setup("debug_locks_verbose=", setup_debug_locks_verbose);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1817: FILE: tests/locking-selftest.c:109:
+#define INIT_CLASS_FUNC(class) ^I^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1853: FILE: tests/locking-selftest.c:145:
+#define HARDIRQ_ENTER()				\
+	local_irq_disable();			\
+	irq_enter();				\
+	WARN_ON(!in_irq());

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1853: FILE: tests/locking-selftest.c:145:
+#define HARDIRQ_ENTER()				\
+	local_irq_disable();			\
+	irq_enter();				\
+	WARN_ON(!in_irq());

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1858: FILE: tests/locking-selftest.c:150:
+#define HARDIRQ_EXIT()				\
+	__irq_exit();				\
+	local_irq_enable();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1858: FILE: tests/locking-selftest.c:150:
+#define HARDIRQ_EXIT()				\
+	__irq_exit();				\
+	local_irq_enable();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1865: FILE: tests/locking-selftest.c:157:
+#define SOFTIRQ_ENTER()				\
+		local_bh_disable();		\
+		local_irq_disable();		\
+		trace_softirq_enter();		\
+		WARN_ON(!in_softirq());

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1865: FILE: tests/locking-selftest.c:157:
+#define SOFTIRQ_ENTER()				\
+		local_bh_disable();		\
+		local_irq_disable();		\
+		trace_softirq_enter();		\
+		WARN_ON(!in_softirq());

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1871: FILE: tests/locking-selftest.c:163:
+#define SOFTIRQ_EXIT()				\
+		trace_softirq_exit();		\
+		local_irq_enable();		\
+		local_bh_enable();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1871: FILE: tests/locking-selftest.c:163:
+#define SOFTIRQ_EXIT()				\
+		trace_softirq_exit();		\
+		local_irq_enable();		\
+		local_bh_enable();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1882: FILE: tests/locking-selftest.c:174:
+#define LU(x)			L(x); U(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1882: FILE: tests/locking-selftest.c:174:
+#define LU(x)			L(x); U(x)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1887: FILE: tests/locking-selftest.c:179:
+#define WLU(x)			WL(x); WU(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1887: FILE: tests/locking-selftest.c:179:
+#define WLU(x)			WL(x); WU(x)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1891: FILE: tests/locking-selftest.c:183:
+#define RLU(x)			RL(x); RU(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1891: FILE: tests/locking-selftest.c:183:
+#define RLU(x)			RL(x); RU(x)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1905: FILE: tests/locking-selftest.c:197:
+#define LOCK_UNLOCK_2(x,y)	LOCK(x); LOCK(y); UNLOCK(y); UNLOCK(x)
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1905: FILE: tests/locking-selftest.c:197:
+#define LOCK_UNLOCK_2(x,y)	LOCK(x); LOCK(y); UNLOCK(y); UNLOCK(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1905: FILE: tests/locking-selftest.c:197:
+#define LOCK_UNLOCK_2(x,y)	LOCK(x); LOCK(y); UNLOCK(y); UNLOCK(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#1905: FILE: tests/locking-selftest.c:197:
+#define LOCK_UNLOCK_2(x,y)	LOCK(x); LOCK(y); UNLOCK(y); UNLOCK(x)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1934: FILE: tests/locking-selftest.c:226:
+#define E()					\
+						\
+	LOCK(X1);				\
+	LOCK(X2); /* this one should fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1934: FILE: tests/locking-selftest.c:226:
+#define E()					\
+						\
+	LOCK(X1);				\
+	LOCK(X2); /* this one should fail */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1984: FILE: tests/locking-selftest.c:276:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2015: FILE: tests/locking-selftest.c:307:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(B, A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2015: FILE: tests/locking-selftest.c:307:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(B, A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2042: FILE: tests/locking-selftest.c:334:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(B, C);			\
+	LOCK_UNLOCK_2(C, A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2042: FILE: tests/locking-selftest.c:334:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(B, C);			\
+	LOCK_UNLOCK_2(C, A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2070: FILE: tests/locking-selftest.c:362:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(C, A);			\
+	LOCK_UNLOCK_2(B, C); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2070: FILE: tests/locking-selftest.c:362:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(C, A);			\
+	LOCK_UNLOCK_2(B, C); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2098: FILE: tests/locking-selftest.c:390:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(B, C);			\
+	LOCK_UNLOCK_2(C, D);			\
+	LOCK_UNLOCK_2(D, A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2098: FILE: tests/locking-selftest.c:390:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(B, C);			\
+	LOCK_UNLOCK_2(C, D);			\
+	LOCK_UNLOCK_2(D, A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2126: FILE: tests/locking-selftest.c:418:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(C, D);			\
+	LOCK_UNLOCK_2(B, D);			\
+	LOCK_UNLOCK_2(D, A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2126: FILE: tests/locking-selftest.c:418:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(C, D);			\
+	LOCK_UNLOCK_2(B, D);			\
+	LOCK_UNLOCK_2(D, A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2154: FILE: tests/locking-selftest.c:446:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(C, D);			\
+	LOCK_UNLOCK_2(B, C);			\
+	LOCK_UNLOCK_2(D, A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2154: FILE: tests/locking-selftest.c:446:
+#define E()					\
+						\
+	LOCK_UNLOCK_2(A, B);			\
+	LOCK_UNLOCK_2(C, D);			\
+	LOCK_UNLOCK_2(B, C);			\
+	LOCK_UNLOCK_2(D, A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2182: FILE: tests/locking-selftest.c:474:
+#define E()					\
+						\
+	LOCK(A);				\
+	UNLOCK(A);				\
+	UNLOCK(A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2182: FILE: tests/locking-selftest.c:474:
+#define E()					\
+						\
+	LOCK(A);				\
+	UNLOCK(A);				\
+	UNLOCK(A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2209: FILE: tests/locking-selftest.c:501:
+#define E()					\
+						\
+	LOCK(A);				\
+	LOCK(B);				\
+	UNLOCK(A); /* fail */			\
+	UNLOCK(B);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2209: FILE: tests/locking-selftest.c:501:
+#define E()					\
+						\
+	LOCK(A);				\
+	LOCK(B);				\
+	UNLOCK(A); /* fail */			\
+	UNLOCK(B);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2237: FILE: tests/locking-selftest.c:529:
+#define E()					\
+						\
+	LOCK(A);				\
+	INIT(A); /* fail */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2237: FILE: tests/locking-selftest.c:529:
+#define E()					\
+						\
+	LOCK(A);				\
+	INIT(A); /* fail */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2263: FILE: tests/locking-selftest.c:555:
+#define E1()				\
+					\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2263: FILE: tests/locking-selftest.c:555:
+#define E1()				\
+					\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2270: FILE: tests/locking-selftest.c:562:
+#define E2()				\
+					\
+	LOCK(A);			\
+	UNLOCK(A);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2270: FILE: tests/locking-selftest.c:562:
+#define E2()				\
+					\
+	LOCK(A);			\
+	UNLOCK(A);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2302: FILE: tests/locking-selftest.c:594:
+#define E1()				\
+					\
+	SOFTIRQ_ENTER();		\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	SOFTIRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2302: FILE: tests/locking-selftest.c:594:
+#define E1()				\
+					\
+	SOFTIRQ_ENTER();		\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	SOFTIRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2309: FILE: tests/locking-selftest.c:601:
+#define E2()				\
+					\
+	HARDIRQ_DISABLE();		\
+	LOCK(A);			\
+	HARDIRQ_ENABLE();		\
+	UNLOCK(A);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2309: FILE: tests/locking-selftest.c:601:
+#define E2()				\
+					\
+	HARDIRQ_DISABLE();		\
+	LOCK(A);			\
+	HARDIRQ_ENABLE();		\
+	UNLOCK(A);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2334: FILE: tests/locking-selftest.c:626:
+#define E1()				\
+					\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2334: FILE: tests/locking-selftest.c:626:
+#define E1()				\
+					\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2341: FILE: tests/locking-selftest.c:633:
+#define E2()				\
+					\
+	IRQ_DISABLE();			\
+	LOCK(A);			\
+	IRQ_ENABLE();			\
+	UNLOCK(A);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2341: FILE: tests/locking-selftest.c:633:
+#define E2()				\
+					\
+	IRQ_DISABLE();			\
+	LOCK(A);			\
+	IRQ_ENABLE();			\
+	UNLOCK(A);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2375: FILE: tests/locking-selftest.c:667:
+#define E1()				\
+					\
+	LOCK(A);			\
+	LOCK(B);			\
+	UNLOCK(B);			\
+	UNLOCK(A);			\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2375: FILE: tests/locking-selftest.c:667:
+#define E1()				\
+					\
+	LOCK(A);			\
+	LOCK(B);			\
+	UNLOCK(B);			\
+	UNLOCK(A);			\
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2382: FILE: tests/locking-selftest.c:674:
+#define E2()				\
+					\
+	LOCK(B);			\
+	UNLOCK(B);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2382: FILE: tests/locking-selftest.c:674:
+#define E2()				\
+					\
+	LOCK(B);			\
+	UNLOCK(B);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2387: FILE: tests/locking-selftest.c:679:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2387: FILE: tests/locking-selftest.c:679:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2424: FILE: tests/locking-selftest.c:716:
+#define E1()				\
+	IRQ_DISABLE();			\
+	LOCK(A);			\
+	LOCK(B);			\
+	UNLOCK(B);			\
+	UNLOCK(A);			\
+	IRQ_ENABLE();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2424: FILE: tests/locking-selftest.c:716:
+#define E1()				\
+	IRQ_DISABLE();			\
+	LOCK(A);			\
+	LOCK(B);			\
+	UNLOCK(B);			\
+	UNLOCK(A);			\
+	IRQ_ENABLE();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2432: FILE: tests/locking-selftest.c:724:
+#define E2()				\
+	LOCK(B);			\
+	UNLOCK(B);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2432: FILE: tests/locking-selftest.c:724:
+#define E2()				\
+	LOCK(B);			\
+	UNLOCK(B);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2436: FILE: tests/locking-selftest.c:728:
+#define E3()				\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2436: FILE: tests/locking-selftest.c:728:
+#define E3()				\
+	IRQ_ENTER();			\
+	LOCK(A);			\
+	UNLOCK(A);			\
+	IRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2483: FILE: tests/locking-selftest.c:775:
+#define E1()				\
+					\
+	IRQ_DISABLE();			\
+	WL(A);				\
+	LOCK(B);			\
+	UNLOCK(B);			\
+	WU(A);				\
+	IRQ_ENABLE();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2483: FILE: tests/locking-selftest.c:775:
+#define E1()				\
+					\
+	IRQ_DISABLE();			\
+	WL(A);				\
+	LOCK(B);			\
+	UNLOCK(B);			\
+	WU(A);				\
+	IRQ_ENABLE();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2492: FILE: tests/locking-selftest.c:784:
+#define E2()				\
+					\
+	LOCK(B);			\
+	UNLOCK(B);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2492: FILE: tests/locking-selftest.c:784:
+#define E2()				\
+					\
+	LOCK(B);			\
+	UNLOCK(B);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2497: FILE: tests/locking-selftest.c:789:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	RL(A);				\
+	RU(A);				\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2497: FILE: tests/locking-selftest.c:789:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	RL(A);				\
+	RU(A);				\
+	IRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2533: FILE: tests/locking-selftest.c:825:
+#define E1()				\
+					\
+	IRQ_DISABLE();			\
+	WL(A);				\
+	WU(A);				\
+	IRQ_ENABLE();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2533: FILE: tests/locking-selftest.c:825:
+#define E1()				\
+					\
+	IRQ_DISABLE();			\
+	WL(A);				\
+	WU(A);				\
+	IRQ_ENABLE();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2540: FILE: tests/locking-selftest.c:832:
+#define E2()				\
+					\
+	RL(A);				\
+	RU(A);				\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2540: FILE: tests/locking-selftest.c:832:
+#define E2()				\
+					\
+	RL(A);				\
+	RU(A);				\
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2545: FILE: tests/locking-selftest.c:837:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	RL(A);				\
+	L(B);				\
+	U(B);				\
+	RU(A);				\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2545: FILE: tests/locking-selftest.c:837:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	RL(A);				\
+	L(B);				\
+	U(B);				\
+	RU(A);				\
+	IRQ_EXIT();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2571: FILE: tests/locking-selftest.c:863:
+#define E1()				\
+					\
+	IRQ_DISABLE();			\
+	L(B);				\
+	WL(A);				\
+	WU(A);				\
+	U(B);				\
+	IRQ_ENABLE();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2571: FILE: tests/locking-selftest.c:863:
+#define E1()				\
+					\
+	IRQ_DISABLE();			\
+	L(B);				\
+	WL(A);				\
+	WU(A);				\
+	U(B);				\
+	IRQ_ENABLE();

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2580: FILE: tests/locking-selftest.c:872:
+#define E2()				\
+					\
+	RL(A);				\
+	RU(A);				\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2580: FILE: tests/locking-selftest.c:872:
+#define E2()				\
+					\
+	RL(A);				\
+	RU(A);				\
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2585: FILE: tests/locking-selftest.c:877:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	L(B);				\
+	U(B);				\
+	IRQ_EXIT();

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2585: FILE: tests/locking-selftest.c:877:
+#define E3()				\
+					\
+	IRQ_ENTER();			\
+	L(B);				\
+	U(B);				\
+	IRQ_EXIT();

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2613: FILE: tests/locking-selftest.c:905:
+#define I1(x)					\
+	do {					\
+		I_SPINLOCK(x);			\
+		I_RWLOCK(x);			\
+		I_MUTEX(x);			\
+		I_RWSEM(x);			\
+	} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2671: FILE: tests/locking-selftest.c:963:
+			printk("failed|");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2675: FILE: tests/locking-selftest.c:967:
+			printk("FAILED|");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2680: FILE: tests/locking-selftest.c:972:
+		printk("  ok  |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2685: FILE: tests/locking-selftest.c:977:
+		printk(" lockclass mask: %x, debug_locks: %d, expected: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2686: FILE: tests/locking-selftest.c:978:
+		printk(" lockclass mask: %x, debug_locks: %d, expected: %d\n",
+			lockclass_mask, debug_locks, expected);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2704: FILE: tests/locking-selftest.c:996:
+	printk("%33s:", testname);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2707: FILE: tests/locking-selftest.c:999:
+#define DO_TESTCASE_1(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_##nr, SUCCESS, LOCKTYPE_RWLOCK);		\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2707: FILE: tests/locking-selftest.c:999:
+#define DO_TESTCASE_1(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_##nr, SUCCESS, LOCKTYPE_RWLOCK);		\
+	printk("\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2708: FILE: tests/locking-selftest.c:1000:
+	print_testname(desc"/"#nr);				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2710: FILE: tests/locking-selftest.c:1002:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2712: FILE: tests/locking-selftest.c:1004:
+#define DO_TESTCASE_1B(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_##nr, FAILURE, LOCKTYPE_RWLOCK);		\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2712: FILE: tests/locking-selftest.c:1004:
+#define DO_TESTCASE_1B(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_##nr, FAILURE, LOCKTYPE_RWLOCK);		\
+	printk("\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2713: FILE: tests/locking-selftest.c:1005:
+	print_testname(desc"/"#nr);				\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2715: FILE: tests/locking-selftest.c:1007:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2717: FILE: tests/locking-selftest.c:1009:
+#define DO_TESTCASE_3(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_spin_##nr, FAILURE, LOCKTYPE_SPIN);	\
+	dotest(name##_wlock_##nr, FAILURE, LOCKTYPE_RWLOCK);	\
+	dotest(name##_rlock_##nr, SUCCESS, LOCKTYPE_RWLOCK);	\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2717: FILE: tests/locking-selftest.c:1009:
+#define DO_TESTCASE_3(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_spin_##nr, FAILURE, LOCKTYPE_SPIN);	\
+	dotest(name##_wlock_##nr, FAILURE, LOCKTYPE_RWLOCK);	\
+	dotest(name##_rlock_##nr, SUCCESS, LOCKTYPE_RWLOCK);	\
+	printk("\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2718: FILE: tests/locking-selftest.c:1010:
+	print_testname(desc"/"#nr);				\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2722: FILE: tests/locking-selftest.c:1014:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2724: FILE: tests/locking-selftest.c:1016:
+#define DO_TESTCASE_3RW(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_spin_##nr, FAILURE, LOCKTYPE_SPIN|LOCKTYPE_RWLOCK);\
+	dotest(name##_wlock_##nr, FAILURE, LOCKTYPE_RWLOCK);	\
+	dotest(name##_rlock_##nr, SUCCESS, LOCKTYPE_RWLOCK);	\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2724: FILE: tests/locking-selftest.c:1016:
+#define DO_TESTCASE_3RW(desc, name, nr)				\
+	print_testname(desc"/"#nr);				\
+	dotest(name##_spin_##nr, FAILURE, LOCKTYPE_SPIN|LOCKTYPE_RWLOCK);\
+	dotest(name##_wlock_##nr, FAILURE, LOCKTYPE_RWLOCK);	\
+	dotest(name##_rlock_##nr, SUCCESS, LOCKTYPE_RWLOCK);	\
+	printk("\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2725: FILE: tests/locking-selftest.c:1017:
+	print_testname(desc"/"#nr);				\

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2726: FILE: tests/locking-selftest.c:1018:
+	dotest(name##_spin_##nr, FAILURE, LOCKTYPE_SPIN|LOCKTYPE_RWLOCK);\
 	                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2729: FILE: tests/locking-selftest.c:1021:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2731: FILE: tests/locking-selftest.c:1023:
+#define DO_TESTCASE_6(desc, name)				\
+	print_testname(desc);					\
+	dotest(name##_spin, FAILURE, LOCKTYPE_SPIN);		\
+	dotest(name##_wlock, FAILURE, LOCKTYPE_RWLOCK);		\
+	dotest(name##_rlock, FAILURE, LOCKTYPE_RWLOCK);		\
+	dotest(name##_mutex, FAILURE, LOCKTYPE_MUTEX);		\
+	dotest(name##_wsem, FAILURE, LOCKTYPE_RWSEM);		\
+	dotest(name##_rsem, FAILURE, LOCKTYPE_RWSEM);		\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2731: FILE: tests/locking-selftest.c:1023:
+#define DO_TESTCASE_6(desc, name)				\
+	print_testname(desc);					\
+	dotest(name##_spin, FAILURE, LOCKTYPE_SPIN);		\
+	dotest(name##_wlock, FAILURE, LOCKTYPE_RWLOCK);		\
+	dotest(name##_rlock, FAILURE, LOCKTYPE_RWLOCK);		\
+	dotest(name##_mutex, FAILURE, LOCKTYPE_MUTEX);		\
+	dotest(name##_wsem, FAILURE, LOCKTYPE_RWSEM);		\
+	dotest(name##_rsem, FAILURE, LOCKTYPE_RWSEM);		\
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2739: FILE: tests/locking-selftest.c:1031:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2741: FILE: tests/locking-selftest.c:1033:
+#define DO_TESTCASE_6_SUCCESS(desc, name)			\
+	print_testname(desc);					\
+	dotest(name##_spin, SUCCESS, LOCKTYPE_SPIN);		\
+	dotest(name##_wlock, SUCCESS, LOCKTYPE_RWLOCK);		\
+	dotest(name##_rlock, SUCCESS, LOCKTYPE_RWLOCK);		\
+	dotest(name##_mutex, SUCCESS, LOCKTYPE_MUTEX);		\
+	dotest(name##_wsem, SUCCESS, LOCKTYPE_RWSEM);		\
+	dotest(name##_rsem, SUCCESS, LOCKTYPE_RWSEM);		\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2741: FILE: tests/locking-selftest.c:1033:
+#define DO_TESTCASE_6_SUCCESS(desc, name)			\
+	print_testname(desc);					\
+	dotest(name##_spin, SUCCESS, LOCKTYPE_SPIN);		\
+	dotest(name##_wlock, SUCCESS, LOCKTYPE_RWLOCK);		\
+	dotest(name##_rlock, SUCCESS, LOCKTYPE_RWLOCK);		\
+	dotest(name##_mutex, SUCCESS, LOCKTYPE_MUTEX);		\
+	dotest(name##_wsem, SUCCESS, LOCKTYPE_RWSEM);		\
+	dotest(name##_rsem, SUCCESS, LOCKTYPE_RWSEM);		\
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2749: FILE: tests/locking-selftest.c:1041:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2754: FILE: tests/locking-selftest.c:1046:
+#define DO_TESTCASE_6R(desc, name)				\
+	print_testname(desc);					\
+	dotest(name##_spin, FAILURE, LOCKTYPE_SPIN);		\
+	dotest(name##_wlock, FAILURE, LOCKTYPE_RWLOCK);		\
+	dotest(name##_rlock, SUCCESS, LOCKTYPE_RWLOCK);		\
+	dotest(name##_mutex, FAILURE, LOCKTYPE_MUTEX);		\
+	dotest(name##_wsem, FAILURE, LOCKTYPE_RWSEM);		\
+	dotest(name##_rsem, FAILURE, LOCKTYPE_RWSEM);		\
+	printk("\n");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2754: FILE: tests/locking-selftest.c:1046:
+#define DO_TESTCASE_6R(desc, name)				\
+	print_testname(desc);					\
+	dotest(name##_spin, FAILURE, LOCKTYPE_SPIN);		\
+	dotest(name##_wlock, FAILURE, LOCKTYPE_RWLOCK);		\
+	dotest(name##_rlock, SUCCESS, LOCKTYPE_RWLOCK);		\
+	dotest(name##_mutex, FAILURE, LOCKTYPE_MUTEX);		\
+	dotest(name##_wsem, FAILURE, LOCKTYPE_RWSEM);		\
+	dotest(name##_rsem, FAILURE, LOCKTYPE_RWSEM);		\
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2762: FILE: tests/locking-selftest.c:1054:
+	printk("\n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2764: FILE: tests/locking-selftest.c:1056:
+#define DO_TESTCASE_2I(desc, name, nr)				\
+	DO_TESTCASE_1("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2764: FILE: tests/locking-selftest.c:1056:
+#define DO_TESTCASE_2I(desc, name, nr)				\
+	DO_TESTCASE_1("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#2764: FILE: tests/locking-selftest.c:1056:
+#define DO_TESTCASE_2I(desc, name, nr)				\
+	DO_TESTCASE_1("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1("soft-"desc, name##_soft, nr);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2764: FILE: tests/locking-selftest.c:1056:
+#define DO_TESTCASE_2I(desc, name, nr)				\
+	DO_TESTCASE_1("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1("soft-"desc, name##_soft, nr);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2768: FILE: tests/locking-selftest.c:1060:
+#define DO_TESTCASE_2IB(desc, name, nr)				\
+	DO_TESTCASE_1B("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1B("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2768: FILE: tests/locking-selftest.c:1060:
+#define DO_TESTCASE_2IB(desc, name, nr)				\
+	DO_TESTCASE_1B("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1B("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#2768: FILE: tests/locking-selftest.c:1060:
+#define DO_TESTCASE_2IB(desc, name, nr)				\
+	DO_TESTCASE_1B("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1B("soft-"desc, name##_soft, nr);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2768: FILE: tests/locking-selftest.c:1060:
+#define DO_TESTCASE_2IB(desc, name, nr)				\
+	DO_TESTCASE_1B("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_1B("soft-"desc, name##_soft, nr);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2772: FILE: tests/locking-selftest.c:1064:
+#define DO_TESTCASE_6I(desc, name, nr)				\
+	DO_TESTCASE_3("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2772: FILE: tests/locking-selftest.c:1064:
+#define DO_TESTCASE_6I(desc, name, nr)				\
+	DO_TESTCASE_3("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#2772: FILE: tests/locking-selftest.c:1064:
+#define DO_TESTCASE_6I(desc, name, nr)				\
+	DO_TESTCASE_3("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3("soft-"desc, name##_soft, nr);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2772: FILE: tests/locking-selftest.c:1064:
+#define DO_TESTCASE_6I(desc, name, nr)				\
+	DO_TESTCASE_3("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3("soft-"desc, name##_soft, nr);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2776: FILE: tests/locking-selftest.c:1068:
+#define DO_TESTCASE_6IRW(desc, name, nr)			\
+	DO_TESTCASE_3RW("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3RW("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2776: FILE: tests/locking-selftest.c:1068:
+#define DO_TESTCASE_6IRW(desc, name, nr)			\
+	DO_TESTCASE_3RW("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3RW("soft-"desc, name##_soft, nr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#2776: FILE: tests/locking-selftest.c:1068:
+#define DO_TESTCASE_6IRW(desc, name, nr)			\
+	DO_TESTCASE_3RW("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3RW("soft-"desc, name##_soft, nr);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2776: FILE: tests/locking-selftest.c:1068:
+#define DO_TESTCASE_6IRW(desc, name, nr)			\
+	DO_TESTCASE_3RW("hard-"desc, name##_hard, nr);		\
+	DO_TESTCASE_3RW("soft-"desc, name##_soft, nr);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2780: FILE: tests/locking-selftest.c:1072:
+#define DO_TESTCASE_2x3(desc, name)				\
+	DO_TESTCASE_3(desc, name, 12);				\
+	DO_TESTCASE_3(desc, name, 21);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2780: FILE: tests/locking-selftest.c:1072:
+#define DO_TESTCASE_2x3(desc, name)				\
+	DO_TESTCASE_3(desc, name, 12);				\
+	DO_TESTCASE_3(desc, name, 21);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2780: FILE: tests/locking-selftest.c:1072:
+#define DO_TESTCASE_2x3(desc, name)				\
+	DO_TESTCASE_3(desc, name, 12);				\
+	DO_TESTCASE_3(desc, name, 21);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2780: FILE: tests/locking-selftest.c:1072:
+#define DO_TESTCASE_2x3(desc, name)				\
+	DO_TESTCASE_3(desc, name, 12);				\
+	DO_TESTCASE_3(desc, name, 21);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2784: FILE: tests/locking-selftest.c:1076:
+#define DO_TESTCASE_2x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 12);				\
+	DO_TESTCASE_6I(desc, name, 21);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2784: FILE: tests/locking-selftest.c:1076:
+#define DO_TESTCASE_2x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 12);				\
+	DO_TESTCASE_6I(desc, name, 21);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2784: FILE: tests/locking-selftest.c:1076:
+#define DO_TESTCASE_2x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 12);				\
+	DO_TESTCASE_6I(desc, name, 21);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2784: FILE: tests/locking-selftest.c:1076:
+#define DO_TESTCASE_2x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 12);				\
+	DO_TESTCASE_6I(desc, name, 21);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2788: FILE: tests/locking-selftest.c:1080:
+#define DO_TESTCASE_6x2(desc, name)				\
+	DO_TESTCASE_2I(desc, name, 123);			\
+	DO_TESTCASE_2I(desc, name, 132);			\
+	DO_TESTCASE_2I(desc, name, 213);			\
+	DO_TESTCASE_2I(desc, name, 231);			\
+	DO_TESTCASE_2I(desc, name, 312);			\
+	DO_TESTCASE_2I(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2788: FILE: tests/locking-selftest.c:1080:
+#define DO_TESTCASE_6x2(desc, name)				\
+	DO_TESTCASE_2I(desc, name, 123);			\
+	DO_TESTCASE_2I(desc, name, 132);			\
+	DO_TESTCASE_2I(desc, name, 213);			\
+	DO_TESTCASE_2I(desc, name, 231);			\
+	DO_TESTCASE_2I(desc, name, 312);			\
+	DO_TESTCASE_2I(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2788: FILE: tests/locking-selftest.c:1080:
+#define DO_TESTCASE_6x2(desc, name)				\
+	DO_TESTCASE_2I(desc, name, 123);			\
+	DO_TESTCASE_2I(desc, name, 132);			\
+	DO_TESTCASE_2I(desc, name, 213);			\
+	DO_TESTCASE_2I(desc, name, 231);			\
+	DO_TESTCASE_2I(desc, name, 312);			\
+	DO_TESTCASE_2I(desc, name, 321);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2788: FILE: tests/locking-selftest.c:1080:
+#define DO_TESTCASE_6x2(desc, name)				\
+	DO_TESTCASE_2I(desc, name, 123);			\
+	DO_TESTCASE_2I(desc, name, 132);			\
+	DO_TESTCASE_2I(desc, name, 213);			\
+	DO_TESTCASE_2I(desc, name, 231);			\
+	DO_TESTCASE_2I(desc, name, 312);			\
+	DO_TESTCASE_2I(desc, name, 321);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2796: FILE: tests/locking-selftest.c:1088:
+#define DO_TESTCASE_6x2B(desc, name)				\
+	DO_TESTCASE_2IB(desc, name, 123);			\
+	DO_TESTCASE_2IB(desc, name, 132);			\
+	DO_TESTCASE_2IB(desc, name, 213);			\
+	DO_TESTCASE_2IB(desc, name, 231);			\
+	DO_TESTCASE_2IB(desc, name, 312);			\
+	DO_TESTCASE_2IB(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2796: FILE: tests/locking-selftest.c:1088:
+#define DO_TESTCASE_6x2B(desc, name)				\
+	DO_TESTCASE_2IB(desc, name, 123);			\
+	DO_TESTCASE_2IB(desc, name, 132);			\
+	DO_TESTCASE_2IB(desc, name, 213);			\
+	DO_TESTCASE_2IB(desc, name, 231);			\
+	DO_TESTCASE_2IB(desc, name, 312);			\
+	DO_TESTCASE_2IB(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2796: FILE: tests/locking-selftest.c:1088:
+#define DO_TESTCASE_6x2B(desc, name)				\
+	DO_TESTCASE_2IB(desc, name, 123);			\
+	DO_TESTCASE_2IB(desc, name, 132);			\
+	DO_TESTCASE_2IB(desc, name, 213);			\
+	DO_TESTCASE_2IB(desc, name, 231);			\
+	DO_TESTCASE_2IB(desc, name, 312);			\
+	DO_TESTCASE_2IB(desc, name, 321);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2796: FILE: tests/locking-selftest.c:1088:
+#define DO_TESTCASE_6x2B(desc, name)				\
+	DO_TESTCASE_2IB(desc, name, 123);			\
+	DO_TESTCASE_2IB(desc, name, 132);			\
+	DO_TESTCASE_2IB(desc, name, 213);			\
+	DO_TESTCASE_2IB(desc, name, 231);			\
+	DO_TESTCASE_2IB(desc, name, 312);			\
+	DO_TESTCASE_2IB(desc, name, 321);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2804: FILE: tests/locking-selftest.c:1096:
+#define DO_TESTCASE_6x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 123);			\
+	DO_TESTCASE_6I(desc, name, 132);			\
+	DO_TESTCASE_6I(desc, name, 213);			\
+	DO_TESTCASE_6I(desc, name, 231);			\
+	DO_TESTCASE_6I(desc, name, 312);			\
+	DO_TESTCASE_6I(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2804: FILE: tests/locking-selftest.c:1096:
+#define DO_TESTCASE_6x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 123);			\
+	DO_TESTCASE_6I(desc, name, 132);			\
+	DO_TESTCASE_6I(desc, name, 213);			\
+	DO_TESTCASE_6I(desc, name, 231);			\
+	DO_TESTCASE_6I(desc, name, 312);			\
+	DO_TESTCASE_6I(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2804: FILE: tests/locking-selftest.c:1096:
+#define DO_TESTCASE_6x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 123);			\
+	DO_TESTCASE_6I(desc, name, 132);			\
+	DO_TESTCASE_6I(desc, name, 213);			\
+	DO_TESTCASE_6I(desc, name, 231);			\
+	DO_TESTCASE_6I(desc, name, 312);			\
+	DO_TESTCASE_6I(desc, name, 321);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2804: FILE: tests/locking-selftest.c:1096:
+#define DO_TESTCASE_6x6(desc, name)				\
+	DO_TESTCASE_6I(desc, name, 123);			\
+	DO_TESTCASE_6I(desc, name, 132);			\
+	DO_TESTCASE_6I(desc, name, 213);			\
+	DO_TESTCASE_6I(desc, name, 231);			\
+	DO_TESTCASE_6I(desc, name, 312);			\
+	DO_TESTCASE_6I(desc, name, 321);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2812: FILE: tests/locking-selftest.c:1104:
+#define DO_TESTCASE_6x6RW(desc, name)				\
+	DO_TESTCASE_6IRW(desc, name, 123);			\
+	DO_TESTCASE_6IRW(desc, name, 132);			\
+	DO_TESTCASE_6IRW(desc, name, 213);			\
+	DO_TESTCASE_6IRW(desc, name, 231);			\
+	DO_TESTCASE_6IRW(desc, name, 312);			\
+	DO_TESTCASE_6IRW(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2812: FILE: tests/locking-selftest.c:1104:
+#define DO_TESTCASE_6x6RW(desc, name)				\
+	DO_TESTCASE_6IRW(desc, name, 123);			\
+	DO_TESTCASE_6IRW(desc, name, 132);			\
+	DO_TESTCASE_6IRW(desc, name, 213);			\
+	DO_TESTCASE_6IRW(desc, name, 231);			\
+	DO_TESTCASE_6IRW(desc, name, 312);			\
+	DO_TESTCASE_6IRW(desc, name, 321);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2812: FILE: tests/locking-selftest.c:1104:
+#define DO_TESTCASE_6x6RW(desc, name)				\
+	DO_TESTCASE_6IRW(desc, name, 123);			\
+	DO_TESTCASE_6IRW(desc, name, 132);			\
+	DO_TESTCASE_6IRW(desc, name, 213);			\
+	DO_TESTCASE_6IRW(desc, name, 231);			\
+	DO_TESTCASE_6IRW(desc, name, 312);			\
+	DO_TESTCASE_6IRW(desc, name, 321);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2812: FILE: tests/locking-selftest.c:1104:
+#define DO_TESTCASE_6x6RW(desc, name)				\
+	DO_TESTCASE_6IRW(desc, name, 123);			\
+	DO_TESTCASE_6IRW(desc, name, 132);			\
+	DO_TESTCASE_6IRW(desc, name, 213);			\
+	DO_TESTCASE_6IRW(desc, name, 231);			\
+	DO_TESTCASE_6IRW(desc, name, 312);			\
+	DO_TESTCASE_6IRW(desc, name, 321);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2820: FILE: tests/locking-selftest.c:1112:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2827: FILE: tests/locking-selftest.c:1119:
+		printk("----------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2828: FILE: tests/locking-selftest.c:1120:
+		printk("| Locking API testsuite disabled |\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2829: FILE: tests/locking-selftest.c:1121:
+		printk("----------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2836: FILE: tests/locking-selftest.c:1128:
+	printk("------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2837: FILE: tests/locking-selftest.c:1129:
+	printk("| Locking API testsuite:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2838: FILE: tests/locking-selftest.c:1130:
+	printk("----------------------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2839: FILE: tests/locking-selftest.c:1131:
+	printk("                                 | spin |wlock |rlock |mutex | wsem | rsem |\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2840: FILE: tests/locking-selftest.c:1132:
+	printk("  --------------------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2856: FILE: tests/locking-selftest.c:1148:
+	printk("  --------------------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2858: FILE: tests/locking-selftest.c:1150:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2860: FILE: tests/locking-selftest.c:1152:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2862: FILE: tests/locking-selftest.c:1154:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2865: FILE: tests/locking-selftest.c:1157:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2867: FILE: tests/locking-selftest.c:1159:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2869: FILE: tests/locking-selftest.c:1161:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2872: FILE: tests/locking-selftest.c:1164:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2874: FILE: tests/locking-selftest.c:1166:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2876: FILE: tests/locking-selftest.c:1168:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2879: FILE: tests/locking-selftest.c:1171:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2881: FILE: tests/locking-selftest.c:1173:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2883: FILE: tests/locking-selftest.c:1175:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2885: FILE: tests/locking-selftest.c:1177:
+	printk("  --------------------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2901: FILE: tests/locking-selftest.c:1193:
+		printk("-----------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2903: FILE: tests/locking-selftest.c:1195:
+		printk("BUG: %3d unexpected failures (out of %3d) - debugging disabled! |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2904: FILE: tests/locking-selftest.c:1196:
+		printk("BUG: %3d unexpected failures (out of %3d) - debugging disabled! |\n",
+			unexpected_testcase_failures, testcase_total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2905: FILE: tests/locking-selftest.c:1197:
+		printk("-----------------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2907: FILE: tests/locking-selftest.c:1199:
+		printk("--------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2908: FILE: tests/locking-selftest.c:1200:
+		printk("%3d out of %3d testcases failed, as expected. |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2909: FILE: tests/locking-selftest.c:1201:
+		printk("%3d out of %3d testcases failed, as expected. |\n",
+			expected_testcase_failures, testcase_total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2910: FILE: tests/locking-selftest.c:1202:
+		printk("----------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2913: FILE: tests/locking-selftest.c:1205:
+		printk("--------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2914: FILE: tests/locking-selftest.c:1206:
+		printk("All %3d testcases failed, as expected. |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2915: FILE: tests/locking-selftest.c:1207:
+		printk("All %3d testcases failed, as expected. |\n",
+			expected_testcase_failures);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2916: FILE: tests/locking-selftest.c:1208:
+		printk("----------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2919: FILE: tests/locking-selftest.c:1211:
+		printk("-------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2920: FILE: tests/locking-selftest.c:1212:
+		printk("Good, all %3d testcases passed! |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2921: FILE: tests/locking-selftest.c:1213:
+		printk("Good, all %3d testcases passed! |\n",
+			testcase_successes);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2922: FILE: tests/locking-selftest.c:1214:
+		printk("---------------------------------\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2939: FILE: tests/locking-selftest-wlock-softirq.h:1:
+#include "locking-selftest-wlock.h"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323497.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 57 errors, 115 warnings, 39 checks, 1370 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323497.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
