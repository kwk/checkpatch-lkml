ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#30: 
--- a/debug/mdb-os.h	1969-12-31 17:00:00.000000000 -0700

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: debug/mdb-os.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#34: FILE: debug/mdb-os.h:2:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#36: FILE: debug/mdb-os.h:4:
+/***************************************************************************
+*

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#73: FILE: debug/mdb-os.h:41:
+#define MAX_SYMBOL_LEN  KSYM_NAME_LEN+1
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#73: FILE: debug/mdb-os.h:41:
+#define MAX_SYMBOL_LEN  KSYM_NAME_LEN+1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: debug/mdb-os.h:50:
+extern int mdb_kallsyms(char *str, int (*print)(char *s, ...));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: debug/mdb-os.h:51:
+extern int mdb_modules(char *str, int (*print)(char *s, ...));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: debug/mdb-os.h:52:
+extern int mdb_getkey(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: debug/mdb-os.h:53:
+extern int mdb_getlword(unsigned long *word, unsigned long addr, size_t

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#86: FILE: debug/mdb-os.h:53:
size);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: debug/mdb-os.h:54:
+extern int mdb_putword(unsigned long addr, unsigned long word, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: debug/mdb-os.h:55:
+extern unsigned long mdb_getword(unsigned long addr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: debug/mdb-os.h:56:
+extern int mdb_verify_rw(void *addr, size_t size);

CHECK:CAMELCASE: Avoid CamelCase: <ValidateAddress>
#90: FILE: debug/mdb-os.h:57:
+extern ULONG ValidateAddress(ULONG addr, ULONG length);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: debug/mdb-os.h:57:
+extern ULONG ValidateAddress(ULONG addr, ULONG length);

CHECK:CAMELCASE: Avoid CamelCase: <DisplayClosestSymbol>
#91: FILE: debug/mdb-os.h:58:
+extern int DisplayClosestSymbol(ULONG address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: debug/mdb-os.h:58:
+extern int DisplayClosestSymbol(ULONG address);

CHECK:CAMELCASE: Avoid CamelCase: <DumpOSSymbolTableMatch>
#92: FILE: debug/mdb-os.h:59:
+extern void DumpOSSymbolTableMatch(BYTE *symbol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: debug/mdb-os.h:59:
+extern void DumpOSSymbolTableMatch(BYTE *symbol);

CHECK:CAMELCASE: Avoid CamelCase: <DumpOSSymbolTable>
#93: FILE: debug/mdb-os.h:60:
+extern void DumpOSSymbolTable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: debug/mdb-os.h:60:
+extern void DumpOSSymbolTable(void);

CHECK:CAMELCASE: Avoid CamelCase: <GetValueFromSymbol>
#94: FILE: debug/mdb-os.h:61:
+extern ULONG GetValueFromSymbol(BYTE *symbol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: debug/mdb-os.h:61:
+extern ULONG GetValueFromSymbol(BYTE *symbol);

CHECK:CAMELCASE: Avoid CamelCase: <GetModuleInfoFromSymbolValue>
#95: FILE: debug/mdb-os.h:62:
+extern BYTE *GetModuleInfoFromSymbolValue(ULONG value, BYTE *buf, ULONG

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: debug/mdb-os.h:62:
+extern BYTE *GetModuleInfoFromSymbolValue(ULONG value, BYTE *buf, ULONG

CHECK:CAMELCASE: Avoid CamelCase: <GetSymbolFromValue>
#97: FILE: debug/mdb-os.h:63:
+extern BYTE *GetSymbolFromValue(ULONG value, BYTE *buf, ULONG len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: debug/mdb-os.h:63:
+extern BYTE *GetSymbolFromValue(ULONG value, BYTE *buf, ULONG len);

CHECK:CAMELCASE: Avoid CamelCase: <GetSymbolFromValueWithOffset>
#98: FILE: debug/mdb-os.h:64:
+extern BYTE *GetSymbolFromValueWithOffset(ULONG value, ULONG *sym_offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: debug/mdb-os.h:64:
+extern BYTE *GetSymbolFromValueWithOffset(ULONG value, ULONG *sym_offset,

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: debug/mdb-os.h:65:
+                                          BYTE *buf, ULONG len);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: debug/mdb-os.h:65:
+                                          BYTE *buf, ULONG len);$

CHECK:CAMELCASE: Avoid CamelCase: <GetSymbolFromValueOffsetModule>
#100: FILE: debug/mdb-os.h:66:
+extern BYTE *GetSymbolFromValueOffsetModule(ULONG value, ULONG *sym_offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: debug/mdb-os.h:66:
+extern BYTE *GetSymbolFromValueOffsetModule(ULONG value, ULONG *sym_offset,

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: debug/mdb-os.h:67:
+                                     BYTE **module, BYTE *buf, ULONG len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: debug/mdb-os.h:67:
+extern BYTE *GetSymbolFromValueOffsetModule(ULONG value, ULONG *sym_offset,
+                                     BYTE **module, BYTE *buf, ULONG len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: debug/mdb-os.h:67:
+                                     BYTE **module, BYTE *buf, ULONG len);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: debug/mdb-os.h:68:
+extern ULONG get_processor_id(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: debug/mdb-os.h:69:
+extern ULONG get_physical_processor(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: debug/mdb-os.h:70:
+extern ULONG fpu_present(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: debug/mdb-os.h:71:
+extern ULONG cpu_mttr_on(void);

CHECK:CAMELCASE: Avoid CamelCase: <UpcaseString>
#106: FILE: debug/mdb-os.h:72:
+extern BYTE *UpcaseString(BYTE *s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: debug/mdb-os.h:72:
+extern BYTE *UpcaseString(BYTE *s);

CHECK:CAMELCASE: Avoid CamelCase: <ClearScreen>
#107: FILE: debug/mdb-os.h:73:
+extern void ClearScreen(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: debug/mdb-os.h:73:
+extern void ClearScreen(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadFS>
#108: FILE: debug/mdb-os.h:74:
+extern WORD ReadFS(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: debug/mdb-os.h:74:
+extern WORD ReadFS(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadGS>
#109: FILE: debug/mdb-os.h:75:
+extern WORD ReadGS(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: debug/mdb-os.h:75:
+extern WORD ReadGS(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR>
#110: FILE: debug/mdb-os.h:76:
+extern ULONG ReadDR(ULONG regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: debug/mdb-os.h:76:
+extern ULONG ReadDR(ULONG regnum);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR>
#111: FILE: debug/mdb-os.h:77:
+extern void WriteDR(int regnum, ULONG contents);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: debug/mdb-os.h:77:
+extern void WriteDR(int regnum, ULONG contents);

CHECK:CAMELCASE: Avoid CamelCase: <ReadCR>
#112: FILE: debug/mdb-os.h:78:
+extern ULONG ReadCR(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: debug/mdb-os.h:78:
+extern ULONG ReadCR(int regnum);

CHECK:CAMELCASE: Avoid CamelCase: <WriteCR>
#113: FILE: debug/mdb-os.h:79:
+extern void WriteCR(int regnum, ULONG contents);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: debug/mdb-os.h:79:
+extern void WriteCR(int regnum, ULONG contents);

CHECK:CAMELCASE: Avoid CamelCase: <ReadTR>
#114: FILE: debug/mdb-os.h:80:
+extern ULONG ReadTR(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: debug/mdb-os.h:80:
+extern ULONG ReadTR(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadLDTR>
#115: FILE: debug/mdb-os.h:81:
+extern ULONG ReadLDTR(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: debug/mdb-os.h:81:
+extern ULONG ReadLDTR(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadGDTR>
#116: FILE: debug/mdb-os.h:82:
+extern void ReadGDTR(ULONG *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: debug/mdb-os.h:82:
+extern void ReadGDTR(ULONG *v);

CHECK:CAMELCASE: Avoid CamelCase: <ReadIDTR>
#117: FILE: debug/mdb-os.h:83:
+extern void ReadIDTR(ULONG *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: debug/mdb-os.h:83:
+extern void ReadIDTR(ULONG *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: debug/mdb-os.h:84:
+extern void save_npx(NUMERIC_FRAME *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: debug/mdb-os.h:85:
+extern void load_npx(NUMERIC_FRAME *v);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR0>
#120: FILE: debug/mdb-os.h:86:
+extern ULONG ReadDR0(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: debug/mdb-os.h:86:
+extern ULONG ReadDR0(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR1>
#121: FILE: debug/mdb-os.h:87:
+extern ULONG ReadDR1(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: debug/mdb-os.h:87:
+extern ULONG ReadDR1(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR2>
#122: FILE: debug/mdb-os.h:88:
+extern ULONG ReadDR2(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: debug/mdb-os.h:88:
+extern ULONG ReadDR2(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR3>
#123: FILE: debug/mdb-os.h:89:
+extern ULONG ReadDR3(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: debug/mdb-os.h:89:
+extern ULONG ReadDR3(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR6>
#124: FILE: debug/mdb-os.h:90:
+extern ULONG ReadDR6(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: debug/mdb-os.h:90:
+extern ULONG ReadDR6(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadDR7>
#125: FILE: debug/mdb-os.h:91:
+extern ULONG ReadDR7(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: debug/mdb-os.h:91:
+extern ULONG ReadDR7(void);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR0>
#126: FILE: debug/mdb-os.h:92:
+extern void WriteDR0(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: debug/mdb-os.h:92:
+extern void WriteDR0(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR1>
#127: FILE: debug/mdb-os.h:93:
+extern void WriteDR1(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: debug/mdb-os.h:93:
+extern void WriteDR1(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR2>
#128: FILE: debug/mdb-os.h:94:
+extern void WriteDR2(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: debug/mdb-os.h:94:
+extern void WriteDR2(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR3>
#129: FILE: debug/mdb-os.h:95:
+extern void WriteDR3(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: debug/mdb-os.h:95:
+extern void WriteDR3(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR6>
#130: FILE: debug/mdb-os.h:96:
+extern void WriteDR6(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: debug/mdb-os.h:96:
+extern void WriteDR6(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteDR7>
#131: FILE: debug/mdb-os.h:97:
+extern void WriteDR7(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: debug/mdb-os.h:97:
+extern void WriteDR7(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <ReadCR0>
#132: FILE: debug/mdb-os.h:98:
+extern ULONG ReadCR0(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: debug/mdb-os.h:98:
+extern ULONG ReadCR0(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadCR2>
#133: FILE: debug/mdb-os.h:99:
+extern ULONG ReadCR2(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: debug/mdb-os.h:99:
+extern ULONG ReadCR2(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadCR3>
#134: FILE: debug/mdb-os.h:100:
+extern ULONG ReadCR3(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: debug/mdb-os.h:100:
+extern ULONG ReadCR3(void);

CHECK:CAMELCASE: Avoid CamelCase: <ReadCR4>
#135: FILE: debug/mdb-os.h:101:
+extern ULONG ReadCR4(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: debug/mdb-os.h:101:
+extern ULONG ReadCR4(void);

CHECK:CAMELCASE: Avoid CamelCase: <WriteCR0>
#136: FILE: debug/mdb-os.h:102:
+extern void WriteCR0(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: debug/mdb-os.h:102:
+extern void WriteCR0(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteCR2>
#137: FILE: debug/mdb-os.h:103:
+extern void WriteCR2(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: debug/mdb-os.h:103:
+extern void WriteCR2(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteCR3>
#138: FILE: debug/mdb-os.h:104:
+extern void WriteCR3(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: debug/mdb-os.h:104:
+extern void WriteCR3(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <WriteCR4>
#139: FILE: debug/mdb-os.h:105:
+extern void WriteCR4(ULONG v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: debug/mdb-os.h:105:
+extern void WriteCR4(ULONG v);

CHECK:CAMELCASE: Avoid CamelCase: <ReadMSR>
#140: FILE: debug/mdb-os.h:106:
+extern void ReadMSR(ULONG r, ULONG *v1, ULONG *v2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: debug/mdb-os.h:106:
+extern void ReadMSR(ULONG r, ULONG *v1, ULONG *v2);

CHECK:CAMELCASE: Avoid CamelCase: <WriteMSR>
#141: FILE: debug/mdb-os.h:107:
+extern void WriteMSR(ULONG r, ULONG *v1, ULONG *v2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: debug/mdb-os.h:107:
+extern void WriteMSR(ULONG r, ULONG *v1, ULONG *v2);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 4 warnings, 102 checks, 111 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
