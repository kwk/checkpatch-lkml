WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: arch/score/kernel/module.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#49: FILE: arch/score/kernel/module.c:2:
+ * arch/score/kernel/module.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: arch/score/kernel/module.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#88: FILE: arch/score/kernel/module.c:41:
+int module_frob_arch_sections(Elf_Ehdr *hdr, Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#88: FILE: arch/score/kernel/module.c:41:
+int module_frob_arch_sections(Elf_Ehdr *hdr, Elf_Shdr *sechdrs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: arch/score/kernel/module.c:42:
+int module_frob_arch_sections(Elf_Ehdr *hdr, Elf_Shdr *sechdrs,
+			char *secstrings, struct module *mod)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: arch/score/kernel/module.c:48:
+int apply_relocate(Elf_Shdr *sechdrs, const char *strtab,
+		unsigned int symindex, unsigned int relindex,

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#98: FILE: arch/score/kernel/module.c:51:
+	Elf32_Shdr *symsec = sechdrs + symindex;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Rel>
#101: FILE: arch/score/kernel/module.c:54:
+	Elf32_Rel *rel = (void *)relsec->sh_addr;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#106: FILE: arch/score/kernel/module.c:59:
+		Elf32_Sym *sym;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'r_offset < 0'
#110: FILE: arch/score/kernel/module.c:63:
+		if ((r_offset < 0) ||
+		    (r_offset > (symsec->sh_size / sizeof(Elf32_Sym)))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#112: FILE: arch/score/kernel/module.c:65:
+			printk(KERN_ERR "%s: bad relocation, section %d reloc %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: arch/score/kernel/module.c:66:
+			printk(KERN_ERR "%s: bad relocation, section %d reloc %d\n",
+				me->name, relindex, i);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rel->r_offset < 0'
#119: FILE: arch/score/kernel/module.c:72:
+		if ((rel->r_offset < 0) ||
+		    (rel->r_offset > dstsec->sh_size - sizeof(u32))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#121: FILE: arch/score/kernel/module.c:74:
+			printk(KERN_ERR "%s: out of bounds relocation, "

WARNING:SPLIT_STRING: quoted string split across lines
#122: FILE: arch/score/kernel/module.c:75:
+			printk(KERN_ERR "%s: out of bounds relocation, "
+				"section %d reloc %d offset %d size %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: arch/score/kernel/module.c:94:
+			unsigned long temp, temp_hi;
+			temp_hi = *((unsigned long *)loc - 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#183: FILE: arch/score/kernel/module.c:136:
+			printk(KERN_ERR "%s: unknown relocation: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: arch/score/kernel/module.c:137:
+			printk(KERN_ERR "%s: unknown relocation: %u\n",
+				me->name, ELF32_R_TYPE(rel->r_info));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: arch/score/kernel/module.c:146:
+int apply_relocate_add(Elf_Shdr *sechdrs, const char *strtab,
+		unsigned int symindex, unsigned int relsec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: arch/score/kernel/module.c:160:
+int module_finalize(const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,
+		struct module *me)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: arch/score/kernel/process.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#220: FILE: arch/score/kernel/process.c:2:
+ * arch/score/kernel/process.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#241: FILE: arch/score/kernel/process.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#250: FILE: arch/score/kernel/process.c:32:
+EXPORT_SYMBOL(pm_power_off);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: No space is necessary after a cast
#324: FILE: arch/score/kernel/process.c:106:
+		childregs->regs[28] = (unsigned long) ti; /* kernel fork */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#325: FILE: arch/score/kernel/process.c:107:
+		childregs->regs[0] = (unsigned long) childregs;

CHECK:SPACING: No space is necessary after a cast
#328: FILE: arch/score/kernel/process.c:110:
+	p->thread.reg0 = (unsigned long) childregs;

CHECK:SPACING: No space is necessary after a cast
#329: FILE: arch/score/kernel/process.c:111:
+	p->thread.reg3 = (unsigned long) ret_from_fork;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: arch/score/kernel/process.c:125:
+kernel_thread_helper(void *unused0, int (*fn)(void *),
+		 void *arg, void *unused1)

CHECK:SPACING: No space is necessary after a cast
#357: FILE: arch/score/kernel/process.c:139:
+	regs.regs[6] = (unsigned long) arg;

CHECK:SPACING: No space is necessary after a cast
#358: FILE: arch/score/kernel/process.c:140:
+	regs.regs[5] = (unsigned long) fn;

CHECK:SPACING: No space is necessary after a cast
#359: FILE: arch/score/kernel/process.c:141:
+	regs.cp0_epc = (unsigned long) kernel_thread_helper;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#360: FILE: arch/score/kernel/process.c:142:
+	regs.cp0_psr = (regs.cp0_psr & ~(0x1|0x4|0x8)) | \
 	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#360: FILE: arch/score/kernel/process.c:142:
+	regs.cp0_psr = (regs.cp0_psr & ~(0x1|0x4|0x8)) | \
 	                                        ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#360: FILE: arch/score/kernel/process.c:142:
+	regs.cp0_psr = (regs.cp0_psr & ~(0x1|0x4|0x8)) | \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#363: FILE: arch/score/kernel/process.c:145:
+	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 23 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
