WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1121: FILE: tests/rcutorture.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1135: FILE: tests/rcutorture.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1136: FILE: tests/rcutorture.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1156: FILE: tests/rcutorture.c:36:
+#include <asm/atomic.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#1171: FILE: tests/rcutorture.c:51:
+              "Josh Triplett <josh@freedesktop.org>");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: tests/rcutorture.c:51:
+              "Josh Triplett <josh@freedesktop.org>");$

WARNING:SPLIT_STRING: quoted string split across lines
#1171: FILE: tests/rcutorture.c:51:
+MODULE_AUTHOR("Paul E. McKenney <paulmck@us.ibm.com> and "
+              "Josh Triplett <josh@freedesktop.org>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1198: FILE: tests/rcutorture.c:78:
+#define PRINTK_STRING(s) \
+	do { printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1199: FILE: tests/rcutorture.c:79:
+	do { printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1201: FILE: tests/rcutorture.c:81:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1203: FILE: tests/rcutorture.c:83:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG "!!! " s "\n", torture_type); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1203: FILE: tests/rcutorture.c:83:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG "!!! " s "\n", torture_type); } while (0)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1223: FILE: tests/rcutorture.c:103:
+static int fullstop = 0;	/* stop generating callbacks at test end. */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1225: FILE: tests/rcutorture.c:105:
+static struct rcu_torture *rcu_torture_current = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1226: FILE: tests/rcutorture.c:106:
+static long rcu_torture_current_version = 0;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1230: FILE: tests/rcutorture.c:110:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_count) =
+	{ 0 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1232: FILE: tests/rcutorture.c:112:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_batch) =
+	{ 0 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1317: FILE: tests/rcutorture.c:197:
+};
+static struct rcu_torture_ops *cur_ops = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1317: FILE: tests/rcutorture.c:197:
+static struct rcu_torture_ops *cur_ops = NULL;

CHECK:SPACING: No space is necessary after a cast
#1323: FILE: tests/rcutorture.c:203:
+static int rcu_torture_read_lock(void) __acquires(RCU)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1366: FILE: tests/rcutorture.c:246:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1369: FILE: tests/rcutorture.c:249:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1434: FILE: tests/rcutorture.c:314:
+static int rcu_bh_torture_read_lock(void) __acquires(RCU_BH)

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#1452: FILE: tests/rcutorture.c:332:
+	call_rcu_bh(&p->rtort_rcu, rcu_torture_cb);

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#1473: FILE: tests/rcutorture.c:353:
+	call_rcu_bh(&rcu.head, rcu_bh_torture_wakeme_after_cb);

CHECK:SPACING: No space is necessary after a cast
#1521: FILE: tests/rcutorture.c:401:
+static int srcu_torture_read_lock(void) __acquires(&srcu_ctl)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1606: FILE: tests/rcutorture.c:486:
+	synchronize_sched();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_writer', this function's name, in a string
#1636: FILE: tests/rcutorture.c:516:
+	VERBOSE_PRINTK_STRING("rcu_torture_writer task started");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1641: FILE: tests/rcutorture.c:521:
+		if ((rp = rcu_torture_alloc()) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1648: FILE: tests/rcutorture.c:528:
+		smp_wmb();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_writer', this function's name, in a string
#1660: FILE: tests/rcutorture.c:540:
+	VERBOSE_PRINTK_STRING("rcu_torture_writer task stopping");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_fakewriter', this function's name, in a string
#1675: FILE: tests/rcutorture.c:555:
+	VERBOSE_PRINTK_STRING("rcu_torture_fakewriter task started");

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1679: FILE: tests/rcutorture.c:559:
+		schedule_timeout_uninterruptible(1 + rcu_random(&rand)%10);
 		                                                      ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_fakewriter', this function's name, in a string
#1684: FILE: tests/rcutorture.c:564:
+	VERBOSE_PRINTK_STRING("rcu_torture_fakewriter task stopping");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_reader', this function's name, in a string
#1705: FILE: tests/rcutorture.c:585:
+	VERBOSE_PRINTK_STRING("rcu_torture_reader task started");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1712: FILE: tests/rcutorture.c:592:
+		if (p == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_reader', this function's name, in a string
#1738: FILE: tests/rcutorture.c:618:
+	VERBOSE_PRINTK_STRING("rcu_torture_reader task stopping");

WARNING:SPLIT_STRING: quoted string split across lines
#1769: FILE: tests/rcutorture.c:649:
+		       "rtc: %p ver: %ld tfle: %d rta: %d rtaf: %d rtf: %d "
+		       "rtmbe: %d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1817: FILE: tests/rcutorture.c:697:
+	printk(KERN_ALERT "%s", printk_buf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_stats', this function's name, in a string
#1830: FILE: tests/rcutorture.c:710:
+	VERBOSE_PRINTK_STRING("rcu_torture_stats task started");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_stats', this function's name, in a string
#1835: FILE: tests/rcutorture.c:715:
+	VERBOSE_PRINTK_STRING("rcu_torture_stats task stopping");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_shuffle', this function's name, in a string
#1895: FILE: tests/rcutorture.c:775:
+	VERBOSE_PRINTK_STRING("rcu_torture_shuffle task started");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_shuffle', this function's name, in a string
#1900: FILE: tests/rcutorture.c:780:
+	VERBOSE_PRINTK_STRING("rcu_torture_shuffle task stopping");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1907: FILE: tests/rcutorture.c:787:
+	printk(KERN_ALERT "%s" TORTURE_FLAG

WARNING:SPLIT_STRING: quoted string split across lines
#1909: FILE: tests/rcutorture.c:789:
+		"--- %s: nreaders=%d nfakewriters=%d "
+		"stat_interval=%d verbose=%d test_no_idle_hz=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#1910: FILE: tests/rcutorture.c:790:
+		"stat_interval=%d verbose=%d test_no_idle_hz=%d "
+		"shuffle_interval = %d\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1936: FILE: tests/rcutorture.c:816:
+				VERBOSE_PRINTK_STRING(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1950: FILE: tests/rcutorture.c:830:
+				VERBOSE_PRINTK_STRING(

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1986: FILE: tests/rcutorture.c:866:
+	static struct rcu_torture_ops *torture_ops[] =
+		{ &rcu_ops, &rcu_sync_ops, &rcu_bh_ops, &rcu_bh_sync_ops,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1996: FILE: tests/rcutorture.c:876:
+		printk(KERN_ALERT "rcutorture: invalid torture type: \"%s\"\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2049: FILE: tests/rcutorture.c:929:
+^I                           GFP_KERNEL);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fakewriter_tasks"
#2050: FILE: tests/rcutorture.c:930:
+	if (fakewriter_tasks == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2058: FILE: tests/rcutorture.c:938:
+^I^I                                  "rcu_torture_fakewriter");$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reader_tasks"
#2068: FILE: tests/rcutorture.c:948:
+	if (reader_tasks == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2087: FILE: tests/rcutorture.c:967:
+		stats_task = kthread_run(rcu_torture_stats, NULL,
+					"rcu_torture_stats");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2099: FILE: tests/rcutorture.c:979:
+		shuffler_task = kthread_run(rcu_torture_shuffle, NULL,
+					  "rcu_torture_shuffle");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323495.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 29 warnings, 14 checks, 1042 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323495.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
