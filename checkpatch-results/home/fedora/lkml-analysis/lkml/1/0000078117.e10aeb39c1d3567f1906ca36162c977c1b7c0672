WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#135: FILE: kernel/stop_machine.c:67:
+ * on dedicated per-cpu kthreads. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: kernel/stop_machine.c:136:
+	struct sched_param param = { .sched_priority = MAX_RT_PRIO-1 };
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: kernel/stop_machine.c:162:
+		struct task_struct *p = *per_cpu_ptr(stop_machine_threads, cpu);
+		if (p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#284: FILE: kernel/stop_machine.c:229:
+			printk(KERN_ERR "failed to create stop machine "

WARNING:SPLIT_STRING: quoted string split across lines
#285: FILE: kernel/stop_machine.c:230:
+			printk(KERN_ERR "failed to create stop machine "
+			       "thread for %u\n", cpu);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#331: FILE: kernel/stop_machine.c:273:
+		yield();

WARNING:REPEATED_WORD: Possible repeated word: 'die'
#459: FILE: kernel/workqueue.c:49:
+	WORKER_REQ_DIE		= 1 << 1,	/* die die die */

WARNING:REPEATED_WORD: Possible repeated word: 'die'
#459: FILE: kernel/workqueue.c:49:
+	WORKER_REQ_DIE		= 1 << 1,	/* die die die */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(1 << WORK_STRUCT_FLAG_BITS) over __attribute__((aligned(1 << WORK_STRUCT_FLAG_BITS)))
#586: FILE: kernel/workqueue.c:166:
+} __attribute__((aligned(1 << WORK_STRUCT_FLAG_BITS)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: kernel/workqueue.c:214:
+	BUG_ON((unsigned long)cwq & WORK_STRUCT_FLAG_MASK);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#965: FILE: kernel/workqueue.c:496:
+	BUG_ON(!list_empty(&work->entry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1050: FILE: kernel/workqueue.c:624:
+	BUG_ON(worker->state & WORKER_STA_IDLE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1051: FILE: kernel/workqueue.c:625:
+	BUG_ON(!list_empty(&worker->entry));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1065: FILE: kernel/workqueue.c:639:
+	if (likely(!(worker->state & WORKER_STA_ROGUE))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1069: FILE: kernel/workqueue.c:643:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1085: FILE: kernel/workqueue.c:659:
+	BUG_ON(!(worker->state & WORKER_STA_IDLE));

WARNING:REPEATED_WORD: Possible repeated word: 'mayday'
#1164: FILE: kernel/workqueue.c:738:
+	/* mayday mayday mayday */

WARNING:REPEATED_WORD: Possible repeated word: 'mayday'
#1164: FILE: kernel/workqueue.c:738:
+	/* mayday mayday mayday */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1191: FILE: kernel/workqueue.c:758:
+	BUG_ON(worker->current_work);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1192: FILE: kernel/workqueue.c:759:
+	BUG_ON(!list_empty(&worker->scheduled));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1193: FILE: kernel/workqueue.c:760:
+	BUG_ON(!(worker->state & WORKER_STA_IDLE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1194: FILE: kernel/workqueue.c:761:
+	BUG_ON(worker->state & WORKER_STA_RUNNING);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1195: FILE: kernel/workqueue.c:762:
+	BUG_ON(worker->req_flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1233: FILE: kernel/workqueue.c:791:
+		if (time_before(jiffies, expires))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1235: FILE: kernel/workqueue.c:793:
+		else {

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#1302: FILE: kernel/workqueue.c:851:
+			if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1303: FILE: kernel/workqueue.c:852:
+				printk(KERN_WARNING "workqueue: too many "

WARNING:SPLIT_STRING: quoted string split across lines
#1304: FILE: kernel/workqueue.c:853:
+				printk(KERN_WARNING "workqueue: too many "
+				       "workers (%d) on cpu %d, can't create "

WARNING:SPLIT_STRING: quoted string split across lines
#1305: FILE: kernel/workqueue.c:854:
+				       "workers (%d) on cpu %d, can't create "
+				       "new ones\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1311: FILE: kernel/workqueue.c:860:
+			BUG_ON(need_new_worker(gcwq));

WARNING:INDENTED_LABEL: labels should not be indented
#1324: FILE: kernel/workqueue.c:866:
+	cooldown:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1373: FILE: kernel/workqueue.c:906:
+	BUG_ON(gcwq->flags & GCWQ_MANAGING_WORKERS);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1401: FILE: kernel/workqueue.c:931:
+ ^Ilist_for_each_entry_safe_continue(work, n, &gcwq->worklist, entry) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1401: FILE: kernel/workqueue.c:931:
+ ^Ilist_for_each_entry_safe_continue(work, n, &gcwq->worklist, entry) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1401: FILE: kernel/workqueue.c:931:
+ ^Ilist_for_each_entry_safe_continue(work, n, &gcwq->worklist, entry) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1471: FILE: kernel/workqueue.c:995:
+		printk(KERN_ERR "BUG: workqueue leaked lock or atomic: "

WARNING:SPLIT_STRING: quoted string split across lines
#1472: FILE: kernel/workqueue.c:996:
+		printk(KERN_ERR "BUG: workqueue leaked lock or atomic: "
+		       "%s/0x%08x/%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1475: FILE: kernel/workqueue.c:999:
+		printk(KERN_ERR "    last function: ");

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#1520: FILE: kernel/workqueue.c:1041:
+	struct worker *worker = worker;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1558: FILE: kernel/workqueue.c:1078:
+		if (likely(!(*work_data_bits(work) & WORK_STRUCT_LINKED))) {
[...]
+		} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1560: FILE: kernel/workqueue.c:1080:
+			BUG_ON(!list_empty(&worker->scheduled));

CHECK:BRACES: Unbalanced braces around else statement
#1562: FILE: kernel/workqueue.c:1082:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1675: FILE: kernel/workqueue.c:1192:
+	BUG_ON(atomic_read(&wq->nr_cwqs_to_flush) || wq->flush_done);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1685: FILE: kernel/workqueue.c:1202:
+		BUG_ON(cwq->flush_cnt);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1715: FILE: kernel/workqueue.c:1232:
+	struct wq_barrier *barr = container_of(work, struct wq_barrier, work);
+	complete(&barr->done);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1746: FILE: kernel/workqueue.c:1263:
+	if (worker)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1748: FILE: kernel/workqueue.c:1265:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2126: FILE: kernel/workqueue.c:1669:
+		struct cpu_workqueue_struct *cwq = get_cwq(cpu, wq);
+		BUG_ON(cwq->nr_in_flight);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2126: FILE: kernel/workqueue.c:1669:
+		BUG_ON(cwq->nr_in_flight);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cond' - possible side-effects?
#2160: FILE: kernel/workqueue.c:1703:
+#define trustee_wait_event_timeout(cond, timeout) ({			\
+	long __ret = (timeout);						\
+	while (!(cond) && gcwq->trustee_target != TRUSTEE_CANCEL) {	\
+		spin_unlock_irq(&gcwq->lock);				\
+		__wait_event_timeout(gcwq->trustee_wait, (cond) ||	\
+				gcwq->trustee_target == TRUSTEE_CANCEL,	\
+				__ret);					\
+		spin_lock_irq(&gcwq->lock);				\
+	}								\
+	gcwq->trustee_target == TRUSTEE_CANCEL ? -1 : (__ret);		\
+})

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2178: FILE: kernel/workqueue.c:1721:
+static int __devinit trustee_state_reached(struct global_cwq *gcwq, int state)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2185: FILE: kernel/workqueue.c:1728:
+static bool __devinit trustee_unset_rogue(struct worker *worker)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2193: FILE: kernel/workqueue.c:1736:
+	BUG_ON(set_cpus_allowed_ptr(worker->task, get_cpu_mask(gcwq->cpu)));

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2199: FILE: kernel/workqueue.c:1742:
+static void __devinit trustee_reap_workfn(struct work_struct *work)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2207: FILE: kernel/workqueue.c:1750:
+static int __devinit trustee_thread(void *__gcwq)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2223: FILE: kernel/workqueue.c:1766:
+		BUG_ON(gcwq->cpu != smp_processor_id());

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2224: FILE: kernel/workqueue.c:1767:
+		BUG_ON(trustee_wait_event(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2224: FILE: kernel/workqueue.c:1767:
+		BUG_ON(trustee_wait_event(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2284: FILE: kernel/workqueue.c:1827:
+			if (trustee_wait_event(

WARNING:INDENTED_LABEL: labels should not be indented
#2296: FILE: kernel/workqueue.c:1839:
+	recheck:

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2327: FILE: kernel/workqueue.c:1870:
 static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2378: FILE: kernel/workqueue.c:1895:
+			BUG_ON(gcwq->nr_workers);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2398: FILE: kernel/workqueue.c:1911:
+		BUG_ON(gcwq->trustee || gcwq->trustee_state != TRUSTEE_DONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2458: FILE: kernel/workqueue.c:2012:
+		BUG_ON(!create_worker(gcwq, true));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2603: FILE: kernel/sched_fair.c:1837:
+#define FAIR_SCHED_CLASS_INIT				\
+	FAIR_SCHED_CLASS_INIT_BASE			\
+	FAIR_SCHED_CLASS_INIT_SMP			\
+	FAIR_SCHED_CLASS_INIT_GROUP

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2637: FILE: include/linux/sched.h:1870:
+extern void sched_setscheduler_workqueue(struct task_struct *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2670: FILE: kernel/sched_workqueue.c:1:
+#include "sched_workqueue.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2772: FILE: kernel/sched_workqueue.h:1:
+void sched_workqueue_worker_wakeup(struct task_struct *task);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078117.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 53 warnings, 13 checks, 2610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078117.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
