WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: arch/ia64/kvm/kvm-ia64.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'suppport' may be misspelled - perhaps 'support'?
#45: FILE: arch/ia64/kvm/kvm-ia64.c:3:
+ * kvm_ia64.c: Basic KVM suppport On Itanium series processors
                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#48: FILE: arch/ia64/kvm/kvm-ia64.c:6:
+ * ^ICopyright (C) 2007, Intel Corporation.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#49: FILE: arch/ia64/kvm/kvm-ia64.c:7:
+ *  ^IXiantao Zhang  (xiantao.zhang@intel.com)$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#61: FILE: arch/ia64/kvm/kvm-ia64.c:19:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#78: FILE: arch/ia64/kvm/kvm-ia64.c:36:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#81: FILE: arch/ia64/kvm/kvm-ia64.c:39:
+#include <asm/cacheflush.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: arch/ia64/kvm/kvm-ia64.c:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: missing space after struct definition
#108: FILE: arch/ia64/kvm/kvm-ia64.c:66:
+struct fdesc{

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/ia64/kvm/kvm-ia64.c:67:
+    unsigned long ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: arch/ia64/kvm/kvm-ia64.c:68:
+    unsigned long gp;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: arch/ia64/kvm/kvm-ia64.c:110:
+	PAL_CALL_STK(iprv, PAL_VP_CREATE, (u64)vpd, (u64)host_iva,
+			(u64)opt_handler);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: arch/ia64/kvm/kvm-ia64.c:126:
+	pte = pte_val(mk_pte_phys(__pa(kvm_vmm_base),
+				PAGE_KERNEL));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#180: FILE: arch/ia64/kvm/kvm-ia64.c:138:
+		printk(KERN_WARNING"kvm: Failed to Enable VT Support!!!!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#180: FILE: arch/ia64/kvm/kvm-ia64.c:138:
+		printk(KERN_WARNING"kvm: Failed to Enable VT Support!!!!\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPACING: space prohibited before semicolon
#181: FILE: arch/ia64/kvm/kvm-ia64.c:139:
+		return ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#186: FILE: arch/ia64/kvm/kvm-ia64.c:144:
+		printk(KERN_INFO"kvm: kvm_vsa_base:0x%lx\n", kvm_vsa_base);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#186: FILE: arch/ia64/kvm/kvm-ia64.c:144:
+		printk(KERN_INFO"kvm: kvm_vsa_base:0x%lx\n", kvm_vsa_base);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#194: FILE: arch/ia64/kvm/kvm-ia64.c:152:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: arch/ia64/kvm/kvm-ia64.c:160:
+	pte = pte_val(mk_pte_phys(__pa(kvm_vmm_base),
+				PAGE_KERNEL));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#212: FILE: arch/ia64/kvm/kvm-ia64.c:170:
+		printk(KERN_DEBUG"kvm: Failed to disable VT support! :%ld\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#212: FILE: arch/ia64/kvm/kvm-ia64.c:170:
+		printk(KERN_DEBUG"kvm: Failed to disable VT support! :%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: arch/ia64/kvm/kvm-ia64.c:171:
+		printk(KERN_DEBUG"kvm: Failed to disable VT support! :%ld\n",
+				status);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#224: FILE: arch/ia64/kvm/kvm-ia64.c:182:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#238: FILE: arch/ia64/kvm/kvm-ia64.c:196:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: arch/ia64/kvm/kvm-ia64.c:199:
+static struct kvm_io_device *vcpu_find_mmio_dev(struct kvm_vcpu *vcpu,
+					gpa_t addr)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#267: FILE: arch/ia64/kvm/kvm-ia64.c:225:
+	vcpu->mmio_phys_addr = kvm_run->mmio.phys_addr = p->addr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#268: FILE: arch/ia64/kvm/kvm-ia64.c:226:
+	vcpu->mmio_size = kvm_run->mmio.len = p->size;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#269: FILE: arch/ia64/kvm/kvm-ia64.c:227:
+	vcpu->mmio_is_write = kvm_run->mmio.is_write = !p->dir;

CHECK:BRACES: braces {} should be used on all arms of this statement
#278: FILE: arch/ia64/kvm/kvm-ia64.c:236:
+	if (mmio_dev) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: arch/ia64/kvm/kvm-ia64.c:239:
+			kvm_iodevice_write(mmio_dev, p->addr, p->size,
+						&p->data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: arch/ia64/kvm/kvm-ia64.c:242:
+			kvm_iodevice_read(mmio_dev, p->addr, p->size,
+						&p->data);

CHECK:BRACES: Unbalanced braces around else statement
#286: FILE: arch/ia64/kvm/kvm-ia64.c:244:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#287: FILE: arch/ia64/kvm/kvm-ia64.c:245:
+		printk(KERN_ERR"kvm: No iodevice found! addr:%lx\n", p->addr);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#287: FILE: arch/ia64/kvm/kvm-ia64.c:245:
+		printk(KERN_ERR"kvm: No iodevice found! addr:%lx\n", p->addr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#299: FILE: arch/ia64/kvm/kvm-ia64.c:257:
+	if (p->exit_reason == EXIT_REASON_PAL_CALL)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#301: FILE: arch/ia64/kvm/kvm-ia64.c:259:
+		return kvm_pal_emul(vcpu, kvm_run);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#301: FILE: arch/ia64/kvm/kvm-ia64.c:259:
+	else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#317: FILE: arch/ia64/kvm/kvm-ia64.c:275:
+		return 1;
+	} else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#323: FILE: arch/ia64/kvm/kvm-ia64.c:281:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: arch/ia64/kvm/kvm-ia64.c:288:
+static void vcpu_deliver_ipi(struct kvm_vcpu *vcpu, uint64_t dm,
+				uint64_t vector)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#345: FILE: arch/ia64/kvm/kvm-ia64.c:303:
+		printk(KERN_ERR"kvm: Unimplemented Deliver reserved IPI!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#345: FILE: arch/ia64/kvm/kvm-ia64.c:303:
+		printk(KERN_ERR"kvm: Unimplemented Deliver reserved IPI!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: arch/ia64/kvm/kvm-ia64.c:309:
+static struct kvm_vcpu *lid_to_vcpu(struct kvm *kvm, unsigned long id,
+			unsigned long eid)

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#386: FILE: arch/ia64/kvm/kvm-ia64.c:344:
+		if (waitqueue_active(&target_vcpu->wq))

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: arch/ia64/kvm/kvm-ia64.c:385:
+	int i;
+	call_data.ptc_g_data = p->u.ptc_g_data;

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#435: FILE: arch/ia64/kvm/kvm-ia64.c:393:
+		if (waitqueue_active(&kvm->vcpus[i]->wq))

CHECK:BRACES: braces {} should be used on all arms of this statement
#438: FILE: arch/ia64/kvm/kvm-ia64.c:396:
+		if (kvm->vcpus[i]->cpu != -1) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: arch/ia64/kvm/kvm-ia64.c:399:
+			smp_call_function_single(kvm->vcpus[i]->cpu,
+					vcpu_global_purge, &call_data, 0, 1);

CHECK:BRACES: Unbalanced braces around else statement
#442: FILE: arch/ia64/kvm/kvm-ia64.c:400:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#443: FILE: arch/ia64/kvm/kvm-ia64.c:401:
+			printk(KERN_WARNING"kvm: Uninit vcpu received ipi!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#443: FILE: arch/ia64/kvm/kvm-ia64.c:401:
+			printk(KERN_WARNING"kvm: Uninit vcpu received ipi!\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#445: FILE: arch/ia64/kvm/kvm-ia64.c:403:
+
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#456: FILE: arch/ia64/kvm/kvm-ia64.c:414:
+{
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#490: FILE: arch/ia64/kvm/kvm-ia64.c:448:
+		return 1;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: arch/ia64/kvm/kvm-ia64.c:449:
+		printk(KERN_ERR"kvm: Unsupported userspace halt!");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#491: FILE: arch/ia64/kvm/kvm-ia64.c:449:
+		printk(KERN_ERR"kvm: Unsupported userspace halt!");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: arch/ia64/kvm/kvm-ia64.c:455:
+static int handle_vm_shutdown(struct kvm_vcpu *vcpu,
+		struct kvm_run *kvm_run)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: arch/ia64/kvm/kvm-ia64.c:462:
+static int handle_external_interrupt(struct kvm_vcpu *vcpu,
+		struct kvm_run *kvm_run)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#524: FILE: arch/ia64/kvm/kvm-ia64.c:482:
+		sizeof(kvm_vti_exit_handlers)/sizeof(*kvm_vti_exit_handlers);
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#545: FILE: arch/ia64/kvm/kvm-ia64.c:503:
+	u32 exit_reason = kvm_get_exit_reason(vcpu);
+	vcpu->arch.last_exit = exit_reason;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#548: FILE: arch/ia64/kvm/kvm-ia64.c:506:
+	if (exit_reason < kvm_vti_max_exit_handlers
+			&& kvm_vti_exit_handlers[exit_reason])

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#550: FILE: arch/ia64/kvm/kvm-ia64.c:508:
+		return kvm_vti_exit_handlers[exit_reason](vcpu, kvm_run);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#550: FILE: arch/ia64/kvm/kvm-ia64.c:508:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: arch/ia64/kvm/kvm-ia64.c:536:
+	r = ia64_itr_entry(0x3, KVM_VM_DATA_BASE,
+					pte, KVM_VM_DATA_SHIFT);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#586: FILE: arch/ia64/kvm/kvm-ia64.c:544:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#590: FILE: arch/ia64/kvm/kvm-ia64.c:548:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#594: FILE: arch/ia64/kvm/kvm-ia64.c:552:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: arch/ia64/kvm/kvm-ia64.c:559:
+	if (vcpu->arch.last_run_cpu != cpu ||
+			per_cpu(last_vcpu, cpu) != vcpu) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#611: FILE: arch/ia64/kvm/kvm-ia64.c:569:
+}
+static void kvm_vcpu_post_transition(struct kvm_vcpu *vcpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#743: FILE: arch/ia64/kvm/kvm-ia64.c:701:
+{
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#745: FILE: arch/ia64/kvm/kvm-ia64.c:703:
+	uint64_t  vm_base;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#751: FILE: arch/ia64/kvm/kvm-ia64.c:709:
+	printk(KERN_DEBUG"kvm: VM data's base Address:0x%lx\n", vm_base);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#751: FILE: arch/ia64/kvm/kvm-ia64.c:709:
+	printk(KERN_DEBUG"kvm: VM data's base Address:0x%lx\n", vm_base);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: arch/ia64/kvm/kvm-ia64.c:745:
+			kvm_set_pmt_entry(kvm, j >> PAGE_SHIFT,
+					io_ranges[i].type, 0);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#790: FILE: arch/ia64/kvm/kvm-ia64.c:748:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: arch/ia64/kvm/kvm-ia64.c:759:
+	BUG_ON(!kvm);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#819: FILE: arch/ia64/kvm/kvm-ia64.c:777:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#831: FILE: arch/ia64/kvm/kvm-ia64.c:789:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: arch/ia64/kvm/kvm-ia64.c:792:
+static int kvm_vm_ioctl_get_irqchip(struct kvm *kvm,
+					struct kvm_irqchip *chip)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: arch/ia64/kvm/kvm-ia64.c:800:
+		memcpy(&chip->chip.ioapic, ioapic_irqchip(kvm),
+				sizeof(struct kvm_ioapic_state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: arch/ia64/kvm/kvm-ia64.c:817:
+		memcpy(ioapic_irqchip(kvm),
+				&chip->chip.ioapic,

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_x' - possible side-effects?
#869: FILE: arch/ia64/kvm/kvm-ia64.c:827:
+#define RESTORE_REGS(_x) vcpu->arch._x = regs->_x

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#894: FILE: arch/ia64/kvm/kvm-ia64.c:852:
+	r = copy_from_user(&vcpu->arch.guest, regs->saved_guest,
+						sizeof(union context));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#942: FILE: arch/ia64/kvm/kvm-ia64.c:900:
+long kvm_arch_vm_ioctl(struct file *filp,
                                     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: arch/ia64/kvm/kvm-ia64.c:901:
+long kvm_arch_vm_ioctl(struct file *filp,
+		unsigned int ioctl, unsigned long arg)

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_mem should be sizeof(kvm_mem)
#955: FILE: arch/ia64/kvm/kvm-ia64.c:913:
+		if (copy_from_user(&kvm_mem, argp, sizeof kvm_mem))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: arch/ia64/kvm/kvm-ia64.c:921:
+		r = kvm_vm_ioctl_set_memory_region(kvm,
+					&kvm_userspace_mem, 0);

WARNING:SIZEOF_PARENTHESIS: sizeof irq_event should be sizeof(irq_event)
#978: FILE: arch/ia64/kvm/kvm-ia64.c:936:
+		if (copy_from_user(&irq_event, argp, sizeof irq_event))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: arch/ia64/kvm/kvm-ia64.c:941:
+			kvm_ioapic_set_irq(kvm->arch.vioapic,
+						irq_event.irq,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#995: FILE: arch/ia64/kvm/kvm-ia64.c:953:
+		if (copy_from_user(&chip, argp, sizeof chip))
+				goto out;

WARNING:SIZEOF_PARENTHESIS: sizeof chip should be sizeof(chip)
#995: FILE: arch/ia64/kvm/kvm-ia64.c:953:
+		if (copy_from_user(&chip, argp, sizeof chip))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1004: FILE: arch/ia64/kvm/kvm-ia64.c:962:
+		if (copy_to_user(argp, &chip, sizeof chip))
+				goto out;

WARNING:SIZEOF_PARENTHESIS: sizeof chip should be sizeof(chip)
#1004: FILE: arch/ia64/kvm/kvm-ia64.c:962:
+		if (copy_to_user(argp, &chip, sizeof chip))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1014: FILE: arch/ia64/kvm/kvm-ia64.c:972:
+		if (copy_from_user(&chip, argp, sizeof chip))
+				goto out;

WARNING:SIZEOF_PARENTHESIS: sizeof chip should be sizeof(chip)
#1014: FILE: arch/ia64/kvm/kvm-ia64.c:972:
+		if (copy_from_user(&chip, argp, sizeof chip))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: arch/ia64/kvm/kvm-ia64.c:991:
+int kvm_arch_vcpu_ioctl_set_sregs(struct kvm_vcpu *vcpu,
+		struct kvm_sregs *sregs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: arch/ia64/kvm/kvm-ia64.c:997:
+int kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,
+		struct kvm_sregs *sregs)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1043: FILE: arch/ia64/kvm/kvm-ia64.c:1001:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1044: FILE: arch/ia64/kvm/kvm-ia64.c:1002:
+}
+int kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: arch/ia64/kvm/kvm-ia64.c:1003:
+int kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,
+		struct kvm_translation *tr)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1047: FILE: arch/ia64/kvm/kvm-ia64.c:1005:
+{
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kvm_vm_buffer_size < KVM_VM_BUFFER_SIZE'
#1053: FILE: arch/ia64/kvm/kvm-ia64.c:1011:
+	if (!kvm_vmm_base && (kvm_vm_buffer_size < KVM_VM_BUFFER_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: arch/ia64/kvm/kvm-ia64.c:1013:
+		kvm_vmm_base = __get_free_pages(GFP_KERNEL,
+				get_order(KVM_VMM_SIZE));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1062: FILE: arch/ia64/kvm/kvm-ia64.c:1020:
+		printk(KERN_DEBUG"kvm:VMM's Base Addr:0x%lx, vm_buffer:0x%lx\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1062: FILE: arch/ia64/kvm/kvm-ia64.c:1020:
+		printk(KERN_DEBUG"kvm:VMM's Base Addr:0x%lx, vm_buffer:0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: arch/ia64/kvm/kvm-ia64.c:1021:
+		printk(KERN_DEBUG"kvm:VMM's Base Addr:0x%lx, vm_buffer:0x%lx\n",
+				kvm_vmm_base, kvm_vm_buffer);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1135: FILE: arch/ia64/kvm/kvm-ia64.c:1093:
+	printk(KERN_DEBUG "kvm: vcpu:%p,ivt: 0x%lx\n", vcpu, vmm_ivt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1140: FILE: arch/ia64/kvm/kvm-ia64.c:1098:
+		printk(KERN_ERR"kvm: ia64_pal_vp_create failed!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1140: FILE: arch/ia64/kvm/kvm-ia64.c:1098:
+		printk(KERN_ERR"kvm: ia64_pal_vp_create failed!\n");

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1176: FILE: arch/ia64/kvm/kvm-ia64.c:1134:
+	if (waitqueue_active(q)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1203: FILE: arch/ia64/kvm/kvm-ia64.c:1161:
+	if (vcpu->vcpu_id == 0) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'Initilize' may be misspelled - perhaps 'Initialize'?
#1209: FILE: arch/ia64/kvm/kvm-ia64.c:1167:
+		/*Initilize itc offset for vcpus*/
 		  ^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1216: FILE: arch/ia64/kvm/kvm-ia64.c:1174:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vcpu->arch.apic)...) over kzalloc(sizeof(struct kvm_lapic)...)
#1220: FILE: arch/ia64/kvm/kvm-ia64.c:1178:
+	vcpu->arch.apic = kzalloc(sizeof(struct kvm_lapic), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1235: FILE: arch/ia64/kvm/kvm-ia64.c:1193:
+				((sizeof(struct kvm_vcpu)+15) & ~15);
 				                         ^

WARNING:TYPO_SPELLING: 'Initilize' may be misspelled - perhaps 'Initialize'?
#1241: FILE: arch/ia64/kvm/kvm-ia64.c:1199:
+	/*Initilize region register*/
 	  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'Initilize' may be misspelled - perhaps 'Initialize'?
#1250: FILE: arch/ia64/kvm/kvm-ia64.c:1208:
+	/*Initilize branch register 0*/
 	  ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1289: FILE: arch/ia64/kvm/kvm-ia64.c:1247:
+		printk(KERN_DEBUG"kvm: vpd init error!!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1289: FILE: arch/ia64/kvm/kvm-ia64.c:1247:
+		printk(KERN_DEBUG"kvm: vpd init error!!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: arch/ia64/kvm/kvm-ia64.c:1266:
+struct kvm_vcpu *kvm_arch_vcpu_create(struct kvm *kvm,
+		unsigned int id)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1317: FILE: arch/ia64/kvm/kvm-ia64.c:1275:
+		printk(KERN_ERR"kvm: Create vcpu[%d] error!\n", id);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1317: FILE: arch/ia64/kvm/kvm-ia64.c:1275:
+		printk(KERN_ERR"kvm: Create vcpu[%d] error!\n", id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1329: FILE: arch/ia64/kvm/kvm-ia64.c:1287:
+		printk(KERN_DEBUG"kvm: vcpu_setup error!!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1329: FILE: arch/ia64/kvm/kvm-ia64.c:1287:
+		printk(KERN_DEBUG"kvm: vcpu_setup error!!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: arch/ia64/kvm/kvm-ia64.c:1312:
+int kvm_arch_vcpu_ioctl_debug_guest(struct kvm_vcpu *vcpu,
+		struct kvm_debug_guest *dbg)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1368: FILE: arch/ia64/kvm/kvm-ia64.c:1326:
+
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1408: FILE: arch/ia64/kvm/kvm-ia64.c:1366:
+#define SAVE_REGS(_x) ^Iregs->_x = vcpu->arch._x$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1408: FILE: arch/ia64/kvm/kvm-ia64.c:1366:
+#define SAVE_REGS(_x) 	regs->_x = vcpu->arch._x

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_x' - possible side-effects?
#1408: FILE: arch/ia64/kvm/kvm-ia64.c:1366:
+#define SAVE_REGS(_x) 	regs->_x = vcpu->arch._x

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_x' may be better as '(_x)' to avoid precedence issues
#1408: FILE: arch/ia64/kvm/kvm-ia64.c:1366:
+#define SAVE_REGS(_x) 	regs->_x = vcpu->arch._x

WARNING:LINE_SPACING: Missing a blank line after declarations
#1415: FILE: arch/ia64/kvm/kvm-ia64.c:1373:
+	struct vpd *vpd = to_host(vcpu->kvm, vcpu->arch.vpd);
+	vcpu_load(vcpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1431: FILE: arch/ia64/kvm/kvm-ia64.c:1389:
+	r = copy_to_user(regs->saved_guest, &vcpu->arch.guest,
+					sizeof(union context));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1472: FILE: arch/ia64/kvm/kvm-ia64.c:1430:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1477: FILE: arch/ia64/kvm/kvm-ia64.c:1435:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1478: FILE: arch/ia64/kvm/kvm-ia64.c:1436:
+long kvm_arch_vcpu_ioctl(struct file *filp,
                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1479: FILE: arch/ia64/kvm/kvm-ia64.c:1437:
+long kvm_arch_vcpu_ioctl(struct file *filp,
+		unsigned int ioctl, unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: arch/ia64/kvm/kvm-ia64.c:1443:
+int kvm_arch_set_memory_region(struct kvm *kvm,
+		struct kvm_userspace_memory_region *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: arch/ia64/kvm/kvm-ia64.c:1456:
+		kvm_set_pmt_entry(kvm, base_gfn + i,
+				page_to_pfn(page) << PAGE_SHIFT,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1499: FILE: arch/ia64/kvm/kvm-ia64.c:1457:
+				_PAGE_AR_RWX|_PAGE_MA_WB);
 				            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1506: FILE: arch/ia64/kvm/kvm-ia64.c:1464:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1507: FILE: arch/ia64/kvm/kvm-ia64.c:1465:
+long kvm_arch_dev_ioctl(struct file *filp,
                                      ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1508: FILE: arch/ia64/kvm/kvm-ia64.c:1466:
+long kvm_arch_dev_ioctl(struct file *filp,
+		unsigned int ioctl, unsigned long arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1530: FILE: arch/ia64/kvm/kvm-ia64.c:1488:
+	printk(KERN_DEBUG"kvm: Hardware Supports VT\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1530: FILE: arch/ia64/kvm/kvm-ia64.c:1488:
+	printk(KERN_DEBUG"kvm: Hardware Supports VT\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1535: FILE: arch/ia64/kvm/kvm-ia64.c:1493:
+	printk(KERN_DEBUG"kvm: VM Buffer Size:0x%lx\n", kvm_vm_buffer_size);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1535: FILE: arch/ia64/kvm/kvm-ia64.c:1493:
+	printk(KERN_DEBUG"kvm: VM Buffer Size:0x%lx\n", kvm_vm_buffer_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1538: FILE: arch/ia64/kvm/kvm-ia64.c:1496:
+		printk(KERN_WARNING"kvm: No opcode ability on hardware, "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1538: FILE: arch/ia64/kvm/kvm-ia64.c:1496:
+		printk(KERN_WARNING"kvm: No opcode ability on hardware, "

WARNING:SPLIT_STRING: quoted string split across lines
#1539: FILE: arch/ia64/kvm/kvm-ia64.c:1497:
+		printk(KERN_WARNING"kvm: No opcode ability on hardware, "
+				"vm_env_info:0x%lx\n", vp_env_info);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1548: FILE: arch/ia64/kvm/kvm-ia64.c:1506:
+static int kvm_relocate_vmm(struct kvm_vmm_info *vmm_info,
+						struct module *module)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1556: FILE: arch/ia64/kvm/kvm-ia64.c:1514:
+	BUG_ON(!module);

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#1559: FILE: arch/ia64/kvm/kvm-ia64.c:1517:
+		printk("kvm: kvm area hasn't been initilized yet!!\n");
 		                                  ^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1559: FILE: arch/ia64/kvm/kvm-ia64.c:1517:
+		printk("kvm: kvm area hasn't been initilized yet!!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1575: FILE: arch/ia64/kvm/kvm-ia64.c:1533:
+	printk(KERN_DEBUG"kvm: Relocated VMM's IVT Base Addr:%lx\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1575: FILE: arch/ia64/kvm/kvm-ia64.c:1533:
+	printk(KERN_DEBUG"kvm: Relocated VMM's IVT Base Addr:%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1576: FILE: arch/ia64/kvm/kvm-ia64.c:1534:
+	printk(KERN_DEBUG"kvm: Relocated VMM's IVT Base Addr:%lx\n",
+			kvm_vmm_info->vmm_ivt);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1584: FILE: arch/ia64/kvm/kvm-ia64.c:1542:
+	p_fdesc->gp = KVM_VMM_BASE+(p_fdesc->gp - module_base);
 	                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1586: FILE: arch/ia64/kvm/kvm-ia64.c:1544:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Init Entry Addr:%lx\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1586: FILE: arch/ia64/kvm/kvm-ia64.c:1544:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Init Entry Addr:%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1587: FILE: arch/ia64/kvm/kvm-ia64.c:1545:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Init Entry Addr:%lx\n",
+			KVM_VMM_BASE+func_offset);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1587: FILE: arch/ia64/kvm/kvm-ia64.c:1545:
+			KVM_VMM_BASE+func_offset);
 			            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1599: FILE: arch/ia64/kvm/kvm-ia64.c:1557:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Entry IP:%p\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1599: FILE: arch/ia64/kvm/kvm-ia64.c:1557:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Entry IP:%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1600: FILE: arch/ia64/kvm/kvm-ia64.c:1558:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Entry IP:%p\n",
+						kvm_vmm_info->vmm_entry);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1601: FILE: arch/ia64/kvm/kvm-ia64.c:1559:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Trampoline Entry IP:0x%lx\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1601: FILE: arch/ia64/kvm/kvm-ia64.c:1559:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Trampoline Entry IP:0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1602: FILE: arch/ia64/kvm/kvm-ia64.c:1560:
+	printk(KERN_DEBUG"kvm: Relocated VMM's Trampoline Entry IP:0x%lx\n",
+						KVM_VMM_BASE + func_offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1613: FILE: arch/ia64/kvm/kvm-ia64.c:1571:
+		printk(KERN_ERR "kvm: No Hardware Virtualization Support!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1619: FILE: arch/ia64/kvm/kvm-ia64.c:1577:
+		printk(KERN_ERR "kvm: Already loaded VMM module!\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*kvm_vmm_info)...) over kzalloc(sizeof(struct kvm_vmm_info)...)
#1625: FILE: arch/ia64/kvm/kvm-ia64.c:1583:
+	kvm_vmm_info = kzalloc(sizeof(struct kvm_vmm_info), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1654: FILE: arch/ia64/kvm/kvm-ia64.c:1612:
+static int kvm_ia64_sync_dirty_log(struct kvm *kvm,
+		struct kvm_dirty_log *log)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1674: FILE: arch/ia64/kvm/kvm-ia64.c:1632:
+	for (i = 0; i < n/sizeof(long); ++i) {
 	                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1684: FILE: arch/ia64/kvm/kvm-ia64.c:1642:
+int kvm_vm_ioctl_get_dirty_log(struct kvm *kvm,
+		struct kvm_dirty_log *log)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1727: FILE: arch/ia64/kvm/kvm-ia64.c:1685:
+	struct kvm_vcpu *vcpu = (struct kvm_vcpu *)info;
+	printk(KERN_DEBUG"vcpu_kick_intr %p \n", vcpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1727: FILE: arch/ia64/kvm/kvm-ia64.c:1685:
+	printk(KERN_DEBUG"vcpu_kick_intr %p \n", vcpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vcpu_kick_intr', this function's name, in a string
#1727: FILE: arch/ia64/kvm/kvm-ia64.c:1685:
+	printk(KERN_DEBUG"vcpu_kick_intr %p \n", vcpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1727: FILE: arch/ia64/kvm/kvm-ia64.c:1685:
+	printk(KERN_DEBUG"vcpu_kick_intr %p \n", vcpu);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1727: FILE: arch/ia64/kvm/kvm-ia64.c:1685:
+	printk(KERN_DEBUG"vcpu_kick_intr %p \n", vcpu);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1735: FILE: arch/ia64/kvm/kvm-ia64.c:1693:
+	if (waitqueue_active(&vcpu->wq))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1744: FILE: arch/ia64/kvm/kvm-ia64.c:1702:
+{
+

WARNING:TABSTOP: Statements should start on a tabstop
#1749: FILE: arch/ia64/kvm/kvm-ia64.c:1707:
+		 if (vcpu->arch.mp_state == VCPU_MP_STATE_RUNNABLE)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1749: FILE: arch/ia64/kvm/kvm-ia64.c:1707:
+		 if (vcpu->arch.mp_state == VCPU_MP_STATE_RUNNABLE)
[...]
+		else if (vcpu->arch.mp_state == VCPU_MP_STATE_HALTED) {
[...]

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1753: FILE: arch/ia64/kvm/kvm-ia64.c:1711:
+			if (waitqueue_active(&vcpu->wq))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1772: FILE: arch/ia64/kvm/kvm-ia64.c:1730:
+struct kvm_vcpu *kvm_get_lowest_prio_vcpu(struct kvm *kvm, u8 vector,
+				       unsigned long bitmap)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1806: FILE: arch/ia64/kvm/kvm-ia64.c:1764:
+    struct vpd *vpd = to_host(vcpu->kvm, vcpu->arch.vpd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1808: FILE: arch/ia64/kvm/kvm-ia64.c:1766:
+    if (vpd->irr[0] & (1UL << NMI_VECTOR))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#1808: FILE: arch/ia64/kvm/kvm-ia64.c:1766:
+    if (vpd->irr[0] & (1UL << NMI_VECTOR))
+		return NMI_VECTOR;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1810: FILE: arch/ia64/kvm/kvm-ia64.c:1768:
+    if (vpd->irr[0] & (1UL << ExtINT_VECTOR))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#1810: FILE: arch/ia64/kvm/kvm-ia64.c:1768:
+    if (vpd->irr[0] & (1UL << ExtINT_VECTOR))
+		return ExtINT_VECTOR;

CHECK:CAMELCASE: Avoid CamelCase: <ExtINT_VECTOR>
#1810: FILE: arch/ia64/kvm/kvm-ia64.c:1768:
+    if (vpd->irr[0] & (1UL << ExtINT_VECTOR))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1813: FILE: arch/ia64/kvm/kvm-ia64.c:1771:
+    return find_highest_bits((int *)&vpd->irr[0]);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294395.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 75 warnings, 116 checks, 1789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294395.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
