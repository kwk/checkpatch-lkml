WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#190: FILE: security/ima/ima.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#216: FILE: security/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#216: FILE: security/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:WxV)
#216: FILE: security/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#229: FILE: security/ima/ima.h:40:
+#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'digest' may be better as '(digest)' to avoid precedence issues
#230: FILE: security/ima/ima.h:41:
+#define IMA_HASH_KEY(digest) (hash_long( \
+	(unsigned long)(*digest), IMA_HASH_BITS));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#230: FILE: security/ima/ima.h:41:
+#define IMA_HASH_KEY(digest) (hash_long( \
+	(unsigned long)(*digest), IMA_HASH_BITS));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: security/ima/ima.h:67:
+struct ima_queue_entry *ima_lookup_digest_entry(u8 * digest);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#261: FILE: security/ima/ima.h:72:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#274: FILE: security/ima/ima.h:85:
+};
+extern struct ima_h_table ima_htable;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#278: FILE: security/ima/ima.h:89:
+#define IMA_TPM ((((u32)TPM_ANY_TYPE)<<16)| (u32)TPM_ANY_NUM)
                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#278: FILE: security/ima/ima.h:89:
+#define IMA_TPM ((((u32)TPM_ANY_TYPE)<<16)| (u32)TPM_ANY_NUM)
                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: security/ima/ima.h:90:
+static inline void ima_extend(const u8 * hash)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: security/ima/ima.h:99:
+static inline void ima_pcrread(int idx, u8 * pcr, int pcr_size)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#302: FILE: security/ima/ima_crypto.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: security/ima/ima_crypto.c:8:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: security/ima/ima_crypto.c:38:
+		struct dentry *de = dget(dentry);
+		if (!de)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#344: FILE: security/ima/ima_crypto.c:43:
+			printk(KERN_INFO "%s: dentry_open failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#345: FILE: security/ima/ima_crypto.c:44:
+			       __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#354: FILE: security/ima/ima_crypto.c:53:
+		printk(KERN_INFO "%s: missing file\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#354: FILE: security/ima/ima_crypto.c:53:
+		printk(KERN_INFO "%s: missing file\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#399: FILE: security/ima/ima_crypto.c:98:
+		printk(KERN_INFO "%s: failed to load %s transform: %ld\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#400: FILE: security/ima/ima_crypto.c:99:
+		       __FUNCTION__, ima_hash, PTR_ERR(tfm));

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#401: FILE: security/ima/ima_crypto.c:100:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#422: FILE: security/ima/ima_fs.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: security/ima/ima_fs.c:22:
+static ssize_t ima_show_htable_value(char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#444: FILE: security/ima/ima_fs.c:23:
+				     loff_t * ppos, atomic_t * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#444: FILE: security/ima/ima_fs.c:23:
+				     loff_t * ppos, atomic_t * val)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#453: FILE: security/ima/ima_fs.c:32:
+static ssize_t ima_show_htable_violations(struct file *filp,
                                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#454: FILE: security/ima/ima_fs.c:33:
+					  char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: security/ima/ima_fs.c:34:
+					  size_t count, loff_t * ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#460: FILE: security/ima/ima_fs.c:39:
+static struct file_operations ima_htable_violations_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#464: FILE: security/ima/ima_fs.c:43:
+static ssize_t ima_show_measurements_count(struct file *filp,
                                                         ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#465: FILE: security/ima/ima_fs.c:44:
+					   char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#466: FILE: security/ima/ima_fs.c:45:
+					   size_t count, loff_t * ppos)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#470: FILE: security/ima/ima_fs.c:49:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#472: FILE: security/ima/ima_fs.c:51:
+static struct file_operations ima_measurements_count_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#477: FILE: security/ima/ima_fs.c:56:
+static void *ima_measurements_start(struct seq_file *m, loff_t * pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: security/ima/ima_fs.c:72:
+static void *ima_measurements_next(struct seq_file *m, void *v, loff_t * pos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#496: FILE: security/ima/ima_fs.c:75:
+	 * against concurrent list-extension */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#537: FILE: security/ima/ima_fs.c:116:
+	if (e == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#575: FILE: security/ima/ima_fs.c:154:
+static struct seq_operations ima_measurments_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#587: FILE: security/ima/ima_fs.c:166:
+static struct file_operations ima_measurements_ops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#606: FILE: security/ima/ima_fs.c:185:
+	if (e == NULL)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#622: FILE: security/ima/ima_fs.c:201:
+static struct seq_operations ima_ascii_measurements_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#634: FILE: security/ima/ima_fs.c:213:
+static struct file_operations ima_ascii_measurements_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#655: FILE: security/ima/ima_fs.c:234:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#662: FILE: security/ima/ima_fs.c:241:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#669: FILE: security/ima/ima_fs.c:248:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#675: FILE: security/ima/ima_fs.c:254:
+	    securityfs_create_file("violations", S_IRUSR | S_IRGRP,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#702: FILE: security/ima/ima_init.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*entry)...) over kzalloc(sizeof(struct ima_measure_entry)...)
#747: FILE: security/ima/ima_init.c:46:
+	entry = kzalloc(sizeof(struct ima_measure_entry), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#748: FILE: security/ima/ima_init.c:47:
+	if (entry == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#752: FILE: security/ima/ima_init.c:51:
+	if ((count = strlen(boot_aggregate_name)) > IMA_EVENT_NAME_LEN_MAX)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#756: FILE: security/ima/ima_init.c:55:
+	if (ima_used_chip) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#776: FILE: security/ima/ima_init.c:75:
+			sg_init_one(&sg, (u8 *) pcr_i, 20);

CHECK:BRACES: Unbalanced braces around else statement
#781: FILE: security/ima/ima_init.c:80:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#823: FILE: security/ima/ima_main.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#847: FILE: security/ima/ima_main.c:25:
+#define SHA1_DIGEST_SIZE ^I20^I/* SHA1 is 160-bits */$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#852: FILE: security/ima/ima_main.c:30:
+	struct mutex mutex;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#860: FILE: security/ima/ima_main.c:38:
+	ima_enabled = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#864: FILE: security/ima/ima_main.c:42:
+__setup("ima=", ima_enabled_setup);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#875: FILE: security/ima/ima_main.c:53:
+		printk(KERN_INFO "%s: invalid hash type %s, using sha1\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#876: FILE: security/ima/ima_main.c:54:
+		       __FUNCTION__, str);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#880: FILE: security/ima/ima_main.c:58:
+__setup("ima_hash=", hash_setup);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#925: FILE: security/ima/ima_main.c:103:
+		printk(KERN_INFO "%s: %s hash exists(%s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#926: FILE: security/ima/ima_main.c:104:
+		       __FUNCTION__, name, qe->entry->file_name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*entry)...) over kzalloc(sizeof(struct ima_measure_entry)...)
#931: FILE: security/ima/ima_main.c:109:
+	entry = kzalloc(sizeof(struct ima_measure_entry), GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#939: FILE: security/ima/ima_main.c:117:
+		printk(KERN_INFO "%s: name is null\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#939: FILE: security/ima/ima_main.c:117:
+		printk(KERN_INFO "%s: name is null\n", __FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#942: FILE: security/ima/ima_main.c:120:
+		if ((count = strlen(name)) > IMA_EVENT_NAME_LEN_MAX)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#964: FILE: security/ima/ima_main.c:142:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == SYSFS_MAGIC'
#964: FILE: security/ima/ima_main.c:142:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_READ'
#971: FILE: security/ima/ima_main.c:149:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#971: FILE: security/ima/ima_main.c:149:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask != MAY_WRITE'
#971: FILE: security/ima/ima_main.c:149:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask != MAY_APPEND'
#971: FILE: security/ima/ima_main.c:149:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#972: FILE: security/ima/ima_main.c:150:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#973: FILE: security/ima/ima_main.c:151:
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

WARNING:RETURN_VOID: void function return statements are not generally useful
#1020: FILE: security/ima/ima_main.c:198:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1075: FILE: security/ima/ima_main.c:253:
+			   char **name, void **value, size_t * len)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1083: FILE: security/ima/ima_main.c:261:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*iint)...) over kzalloc(sizeof(struct ima_iint_cache)...)
#1089: FILE: security/ima/ima_main.c:267:
+	iint = kzalloc(sizeof(struct ima_iint_cache), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1164: FILE: security/ima/ima_main.c:342:
+	int error;
+	tfm_hash = crypto_alloc_hash(ima_hash, 0, CRYPTO_ALG_ASYNC);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1192: FILE: security/ima/ima_queue.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1240: FILE: security/ima/ima_queue.c:49:
+struct ima_queue_entry *ima_lookup_digest_entry(u8 * digest_value)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct ima_queue_entry)...)
#1265: FILE: security/ima/ima_queue.c:74:
+	qe = kmalloc(sizeof(struct ima_queue_entry), GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1266: FILE: security/ima/ima_queue.c:75:
+	if (qe == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct ima_queue_entry)...)
#1287: FILE: security/ima/ima_queue.c:96:
+	qe = kmalloc(sizeof(struct ima_queue_entry), GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1288: FILE: security/ima/ima_queue.c:97:
+	if (qe == NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416430.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 41 warnings, 31 checks, 1222 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416430.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
