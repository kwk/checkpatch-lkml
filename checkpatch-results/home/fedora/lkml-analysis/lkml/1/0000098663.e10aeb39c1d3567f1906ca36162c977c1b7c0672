WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: include/linux/ksm.h:1:
+#ifndef __LINUX_KSM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#267: FILE: include/linux/ksm.h:50:
+		page->mapping = (void *) PAGE_MAPPING_ANON;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: include/linux/ksm.h:57:
+static inline int ksm_madvise(struct vm_area_struct *vma, unsigned long start,
+		unsigned long end, int advice, unsigned long *vm_flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/mmu_notifier.h:166:
+extern void __mmu_notifier_change_pte(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#505: FILE: mm/ksm.c:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#648: FILE: mm/ksm.c:144:
+};
+static struct ksm_scan ksm_scan = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__struct' - possible side-effects?
#679: FILE: mm/ksm.c:175:
+#define KSM_KMEM_CACHE(__struct, __flags) kmem_cache_create("ksm_"#__struct,\
+		sizeof(struct __struct), __alignof__(struct __struct),\
+		(__flags), NULL)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#733: FILE: mm/ksm.c:229:
+	mm_slots_hash = kzalloc(MM_SLOTS_HASH_HEADS * sizeof(struct hlist_head),
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: mm/ksm.c:296:
+			ret = handle_mm_fault(vma->vm_mm, vma, addr,
+							FAULT_FLAG_WRITE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#895: FILE: mm/ksm.c:391:
+			BUG_ON(prev_item->next != rmap_item);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#898: FILE: mm/ksm.c:394:
+				BUG_ON(next_item->prev != rmap_item);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#921: FILE: mm/ksm.c:417:
+		BUG_ON(age > 2);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1012: FILE: mm/ksm.c:508:
+		ksm_scan.mm_slot = list_entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1015: FILE: mm/ksm.c:511:
+		ksm_scan.rmap_item = list_entry(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1034: FILE: mm/ksm.c:530:
+	void *addr = kmap_atomic(page, KM_USER0);
+	checksum = jhash2(addr, PAGE_SIZE / 4, 17);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1063: FILE: mm/ksm.c:559:
+	spinlock_t *ptl;

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#1081: FILE: mm/ksm.c:577:
+		 * Ok this is tricky, when get_user_pages_fast() run it doesnt
 		                                                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1127: FILE: mm/ksm.c:623:
+	spinlock_t *ptl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1353: FILE: mm/ksm.c:849:
+			BUG_ON(!in_stable_tree(tree_rmap_item));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1408: FILE: mm/ksm.c:904:
+			BUG_ON(!in_stable_tree(tree_rmap_item));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: mm/ksm.c:966:
+static struct rmap_item *unstable_tree_search_insert(struct page *page,
+						struct page **page2,

CHECK:BRACES: Unbalanced braces around else statement
#1559: FILE: mm/ksm.c:1055:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1614: FILE: mm/ksm.c:1110:
+			if (stable_tree_insert(page2[0], tree_rmap_item))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1616: FILE: mm/ksm.c:1112:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1618: FILE: mm/ksm.c:1114:
+				break_cow(tree_rmap_item->mm,
+						tree_rmap_item->address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1699: FILE: mm/ksm.c:1195:
+				rmap_item = get_next_rmap_item(slot,
+					ksm_scan.rmap_item->link.next,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1701: FILE: mm/ksm.c:1197:
+				if (rmap_item) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1704: FILE: mm/ksm.c:1200:
+				} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1783: FILE: mm/ksm.c:1279:
+			schedule_timeout_interruptible(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1787: FILE: mm/ksm.c:1283:
+			wait_event_interruptible(ksm_thread_wait,
+					(ksm_run & KSM_RUN_MERGE) ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#1834: FILE: mm/ksm.c:1330:
+	struct mm_slot *mm_slot = alloc_mm_slot();
+	if (!mm_slot)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1882: FILE: mm/ksm.c:1378:
+	err = strict_strtoul(buf, 10, &msecs);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1905: FILE: mm/ksm.c:1401:
+	err = strict_strtoul(buf, 10, &nr_pages);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1927: FILE: mm/ksm.c:1423:
+	err = strict_strtoul(buf, 10, &flags);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1978: FILE: mm/ksm.c:1474:
+	err = strict_strtoul(buf, 10, &nr_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2024: FILE: mm/ksm.c:1520:
+		printk(KERN_ERR "ksm: creating kthread failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2031: FILE: mm/ksm.c:1527:
+		printk(KERN_ERR "ksm: register sysfs failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2276: FILE: mm/mremap.c:194:
+	if (ksm_madvise(vma, old_addr, old_addr + old_len,
+						MADV_UNMERGEABLE, &vm_flags))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098663.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 21 checks, 2100 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098663.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
