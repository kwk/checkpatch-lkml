WARNING:TYPO_SPELLING: 'dynamicly' may be misspelled - perhaps 'dynamically'?
#36: 
dynamicly and the application cannot know in advance what pages are
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'registred' may be misspelled - perhaps 'registered'?
#49: 
Ksm scan just memory areas that were registred to be scanned by it.
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'inforamtion' may be misspelled - perhaps 'information'?
#66: 
Return information about the kernel thread, the inforamtion is returned
                                                ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#93: 
        the begining of the virtual address of this region.
            ^^^^^^^^

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#109: 
        flags to control ksm scaning (right now just
                             ^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#134: FILE: drivers/Kconfig:111:
+config PAGE_SHARING
+	bool "KSM page sharing driver support"
+	depends on CRYPTO_SHA1
+	help
+		ksm is a driver for merging identical pages between applciations

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#141: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: include/linux/ksm.h:1:
+#ifndef __LINUX_KSM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#164: FILE: include/linux/ksm.h:19:
+	__u64 addr; /* the begining of the virtual address */
 	                   ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: include/linux/ksm.h:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#266: FILE: mm/ksm.c:1:
+/*

WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#326: FILE: mm/ksm.c:61:
+ * ksm_mem_slot - hold information for an userspace scanning range
                                        ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'untill' may be misspelled - perhaps 'until'?
#327: FILE: mm/ksm.c:62:
+ * (the scanning for this region will be from addr untill addr +
                                                    ^^^^^^

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#334: FILE: mm/ksm.c:69:
+	unsigned long addr;	/* the begining of the virtual address */
 	                   	       ^^^^^^^^

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#398: FILE: mm/ksm.c:133:
+ * virtual address of file backed memory, beacuse cmp_and_merge_page will be
                                           ^^^^^^^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#401: FILE: mm/ksm.c:136:
+ * 3) PageKSM cant be free without we will notice it before check the sha1 val
               ^^^^

WARNING:TYPO_SPELLING: 'registred' may be misspelled - perhaps 'registered'?
#411: FILE: mm/ksm.c:146:
+ * slots is linked list that hold all the memory regions that were registred
                                                                    ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#505: FILE: mm/ksm.c:240:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#528: FILE: mm/ksm.c:263:
+ * is always write protected (therefore its data content cant ever be changed)
                                                          ^^^^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#529: FILE: mm/ksm.c:264:
+ * and this page cant be swapped.
                  ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#622: FILE: mm/ksm.c:357:
+	void *addr = kmap_atomic(page, KM_USER0);
+	hash = jhash(addr, PAGE_SIZE, 17);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*slot)...) over kzalloc(sizeof(struct ksm_mem_slot)...)
#652: FILE: mm/ksm.c:387:
+	slot = kzalloc(sizeof(struct ksm_mem_slot), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#686: FILE: mm/ksm.c:421:
+	BUG_ON(!slot);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#710: FILE: mm/ksm.c:445:
+static int ksm_sma_release(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#720: FILE: mm/ksm.c:455:
+static long ksm_sma_ioctl(struct file *filp,
                                        ^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#771: FILE: mm/ksm.c:506:
+ * since the last time we compute it it remove it from the hash table.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: mm/ksm.c:509:
+static void update_hash(struct ksm_scan *ksm_scan,
+		       unsigned long hash_index)

WARNING:TYPO_SPELLING: 'diffrent' may be misspelled - perhaps 'different'?
#875: FILE: mm/ksm.c:610:
+	 * and then recreated and have diffrent sha1 value.
 	                               ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#895: FILE: mm/ksm.c:630:
+		char *old_addr, *new_addr;
+		old_addr = kmap_atomic(oldpage, KM_USER0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#897: FILE: mm/ksm.c:632:
+		r = !memcmp(old_addr+PAGEHASH_LEN, new_addr+PAGEHASH_LEN,
 		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#897: FILE: mm/ksm.c:632:
+		r = !memcmp(old_addr+PAGEHASH_LEN, new_addr+PAGEHASH_LEN,
 		                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#898: FILE: mm/ksm.c:633:
+			    PAGE_SIZE-PAGEHASH_LEN);
 			             ^

WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#1166: FILE: mm/ksm.c:901:
+ * update slot_index - make sure ksm_scan will point to vaild data,
                                                         ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1198: FILE: mm/ksm.c:933:
+ * (this function can be called from the kernel thread scanner, or from $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1226: FILE: mm/ksm.c:961:
+		if (is_present_pte(slot->mm, slot->addr +
[...]
+		} else
[...]

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1229: FILE: mm/ksm.c:964:
+					     ksm_scan->page_index * PAGE_SIZE ,
 					                                      ^

CHECK:BRACES: Unbalanced braces around else statement
#1238: FILE: mm/ksm.c:973:
+		} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1259: FILE: mm/ksm.c:994:
+static int ksm_scan_release(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1267: FILE: mm/ksm.c:1002:
+static long ksm_scan_ioctl(struct file *filp,
                                         ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1289: FILE: mm/ksm.c:1024:
+static struct file_operations ksm_sma_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ksm_sma)...) over kmalloc(sizeof(struct ksm_sma)...)
#1300: FILE: mm/ksm.c:1035:
+	ksm_sma = kmalloc(sizeof(struct ksm_sma), GFP_KERNEL);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1317: FILE: mm/ksm.c:1052:
+static struct file_operations ksm_scan_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1413: FILE: mm/ksm.c:1148:
+static long ksm_dev_ioctl(struct file *filp,
                                        ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1457: FILE: mm/ksm.c:1192:
+static struct file_operations ksm_chardev_ops = {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1478: FILE: mm/ksm.c:1213:
+			schedule_timeout_interruptible(

CHECK:BRACES: Unbalanced braces around else statement
#1480: FILE: mm/ksm.c:1215:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1482: FILE: mm/ksm.c:1217:
+			wait_event_interruptible(kthread_wait,
+					ksmd_flags & ksm_control_flags_run ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1512: FILE: mm/ksm.c:1247:
+		printk(KERN_ERR "ksm: creating kthread failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1519: FILE: mm/ksm.c:1254:
+		printk(KERN_ERR "ksm: misc device register failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1523: FILE: mm/ksm.c:1258:
+	printk(KERN_WARNING "ksm loaded\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203285.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 35 warnings, 13 checks, 1398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203285.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
