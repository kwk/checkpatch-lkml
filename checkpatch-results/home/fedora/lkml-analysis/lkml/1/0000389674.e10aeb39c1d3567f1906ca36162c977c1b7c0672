WARNING:TYPO_SPELLING: 'substraction' may be misspelled - perhaps 'subtraction'?
#26: 
is costly as it involves a lookup of another structure and a substraction
                                                             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
pointer values of plenty of 0's at the least significant bits of the address.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: include/linux/mmzone.h:643:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: include/linux/mmzone.h:672:
+	BUG_ON(zonelist_zone(encoded) != zone);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/linux/mmzone.h:700:
+static inline unsigned long *first_zones_zonelist(struct zonelist *zonelist,
 					enum zone_type highest_zoneidx)

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: include/linux/mmzone.h:703:
+	unsigned long *z;
+	for (z = zonelist->_zones;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#158: FILE: include/linux/mmzone.h:703:
+	for (z = zonelist->_zones;
[...]
+		z++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: include/linux/mmzone.h:711:
+static inline unsigned long *next_zones_zonelist(unsigned long *z,
 					enum zone_type highest_zoneidx)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#170: FILE: include/linux/mmzone.h:713:
+	for (++z;
[...]
+		z++);

WARNING:LINE_SPACING: Missing a blank line after declarations
#246: FILE: mm/mempolicy.c:489:
+			struct zone *zone;
+			zone = zonelist_zone(p->v.zonelist->_zones[i]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: mm/mempolicy.c:1360:
+			struct zone *za, *zb;
+			za = zonelist_zone(a->v.zonelist->_zones[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: mm/page_alloc.c:1091:
+static int zlc_zone_worth_trying(struct zonelist *zonelist, unsigned long *z,
 						nodemask_t *allowednodes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: mm/page_alloc.c:1135:
+static int zlc_zone_worth_trying(struct zonelist *zonelist, unsigned long *z,
 				nodemask_t *allowednodes)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zonelist_zone"
#408: FILE: mm/page_alloc.c:1246:
+	if (unlikely(zonelist_zone(*z) == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: mm/vmstat.c:389:
+		__inc_zone_state(zonelist_zone(zonelist->_zones[0]),
+								NUMA_FOREIGN);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389674.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 6 warnings, 7 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389674.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
