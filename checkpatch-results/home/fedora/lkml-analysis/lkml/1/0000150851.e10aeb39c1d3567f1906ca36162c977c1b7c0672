WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/xen/sys-hypervisor.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hyp_sysfs_attr *' should also have an identifier name
#109: FILE: drivers/xen/sys-hypervisor.c:30:
+	ssize_t (*show)(struct hyp_sysfs_attr *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#109: FILE: drivers/xen/sys-hypervisor.c:30:
+	ssize_t (*show)(struct hyp_sysfs_attr *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hyp_sysfs_attr *' should also have an identifier name
#110: FILE: drivers/xen/sys-hypervisor.c:31:
+	ssize_t (*store)(struct hyp_sysfs_attr *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#110: FILE: drivers/xen/sys-hypervisor.c:31:
+	ssize_t (*store)(struct hyp_sysfs_attr *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#110: FILE: drivers/xen/sys-hypervisor.c:31:
+	ssize_t (*store)(struct hyp_sysfs_attr *, const char *, size_t);

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: drivers/xen/sys-hypervisor.c:56:
+	int version = HYPERVISOR_xen_version(XENVER_version, NULL);
+	if (version)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: drivers/xen/sys-hypervisor.c:66:
+	int version = HYPERVISOR_xen_version(XENVER_version, NULL);
+	if (version)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#198: FILE: drivers/xen/sys-hypervisor.c:119:
+	extern int xenstored_ready;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_compile_info)...)
#234: FILE: drivers/xen/sys-hypervisor.c:155:
+	info = kmalloc(sizeof(struct xen_compile_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_compile_info)...)
#252: FILE: drivers/xen/sys-hypervisor.c:173:
+	info = kmalloc(sizeof(struct xen_compile_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_compile_info)...)
#270: FILE: drivers/xen/sys-hypervisor.c:191:
+	info = kmalloc(sizeof(struct xen_compile_info), GFP_KERNEL);

WARNING:STORAGE_CLASS: storage class 'static' should be located before type 'int __init'
#295: FILE: drivers/xen/sys-hypervisor.c:216:
+int __init static xen_compilation_init(void)

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#346: FILE: drivers/xen/sys-hypervisor.c:267:
+	struct xen_platform_parameters *parms;
 	                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#348: FILE: drivers/xen/sys-hypervisor.c:269:
+	parms = kmalloc(sizeof(struct xen_platform_parameters), GFP_KERNEL);
 	^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*parms)...) over kmalloc(sizeof(struct xen_platform_parameters)...)
#348: FILE: drivers/xen/sys-hypervisor.c:269:
+	parms = kmalloc(sizeof(struct xen_platform_parameters), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#349: FILE: drivers/xen/sys-hypervisor.c:270:
+	if (parms) {
 	    ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#351: FILE: drivers/xen/sys-hypervisor.c:272:
+					     parms);
 					     ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#354: FILE: drivers/xen/sys-hypervisor.c:275:
+		kfree(parms);
 		      ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct xen_feature_info)...)
#381: FILE: drivers/xen/sys-hypervisor.c:302:
+	info = kmalloc(sizeof(struct xen_feature_info), GFP_KERNEL);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#427: FILE: drivers/xen/sys-hypervisor.c:348:
+extern unsigned long paddr_vmcoreinfo_xen;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#510: FILE: drivers/xen/sys-hypervisor.c:431:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#519: FILE: drivers/xen/sys-hypervisor.c:440:
+	struct hyp_sysfs_attr *hyp_attr;
+	hyp_attr = container_of(attr, struct hyp_sysfs_attr, attr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#531: FILE: drivers/xen/sys-hypervisor.c:452:
+	struct hyp_sysfs_attr *hyp_attr;
+	hyp_attr = container_of(attr, struct hyp_sysfs_attr, attr);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#537: FILE: drivers/xen/sys-hypervisor.c:458:
+static struct sysfs_ops hyp_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150851.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 6 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150851.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
