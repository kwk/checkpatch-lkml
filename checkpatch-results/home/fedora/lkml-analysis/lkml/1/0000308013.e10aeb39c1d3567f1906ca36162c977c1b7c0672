WARNING:LINE_SPACING: Missing a blank line after declarations
#61: FILE: include/asm-x86/string_32.h:35:
+	int d0, d1, d2;
+	__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#61: FILE: include/asm-x86/string_32.h:35:
+	__asm__ __volatile__(

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#69: FILE: include/asm-x86/string_32.h:43:
+		: "0" (n/4), "g" (n), "1" ((long)to), "2" ((long)from)
 		        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#116: FILE: include/asm-x86/string_32.h:77:
+	case 6: *(int *)to = *(int *)from;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#119: FILE: include/asm-x86/string_32.h:80:
+	case 8: *(int *)to = *(int *)from;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#137: FILE: include/asm-x86/string_32.h:94:
+			: "0" (n/4), "1" (edi), "2" (esi)
 			        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#191: FILE: include/asm-x86/string_32.h:130:
+	case 2: __asm__ __volatile__("movsw"

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#196: FILE: include/asm-x86/string_32.h:135:
+	default: __asm__ __volatile__("movsw\n\tmovsb"

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#228: FILE: include/asm-x86/string_32.h:167:
+#define memcpy(t, f, n)				\
+	(__builtin_constant_p((n))		\
+	 ? __constant_memcpy3d((t), (f), (n))	\
+	 : __memcpy3d((t), (f), (n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#228: FILE: include/asm-x86/string_32.h:167:
+#define memcpy(t, f, n)				\
+	(__builtin_constant_p((n))		\
+	 ? __constant_memcpy3d((t), (f), (n))	\
+	 : __memcpy3d((t), (f), (n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#228: FILE: include/asm-x86/string_32.h:167:
+#define memcpy(t, f, n)				\
+	(__builtin_constant_p((n))		\
+	 ? __constant_memcpy3d((t), (f), (n))	\
+	 : __memcpy3d((t), (f), (n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#244: FILE: include/asm-x86/string_32.h:178:
+#define memcpy(t, f, n)				\
+	(__builtin_constant_p((n))		\
+	 ? __constant_memcpy((t), (f), (n))	\
+	 : __memcpy((t), (f), (n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#244: FILE: include/asm-x86/string_32.h:178:
+#define memcpy(t, f, n)				\
+	(__builtin_constant_p((n))		\
+	 ? __constant_memcpy((t), (f), (n))	\
+	 : __memcpy((t), (f), (n)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#244: FILE: include/asm-x86/string_32.h:178:
+#define memcpy(t, f, n)				\
+	(__builtin_constant_p((n))		\
+	 ? __constant_memcpy((t), (f), (n))	\
+	 : __memcpy((t), (f), (n)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/asm-x86/string_32.h:191:
+extern void *memchr(const void *cs, int c, size_t count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: include/asm-x86/string_32.h:196:
+	int d0, d1;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#273: FILE: include/asm-x86/string_32.h:196:
+	__asm__ __volatile__(

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: include/asm-x86/string_32.h:216:
+	int d0, d1;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#310: FILE: include/asm-x86/string_32.h:216:
+	__asm__ __volatile__(

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#320: FILE: include/asm-x86/string_32.h:226:
+		: "a" (c), "q" (count), "0" (count/4), "1" ((long)s)
 		                                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: include/asm-x86/string_32.h:233:
+extern size_t strnlen(const char *s, size_t count);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#337: FILE: include/asm-x86/string_32.h:243:
+static __always_inline void *__constant_c_and_count_memset(void *s, unsigned long pattern, size_t count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#357: FILE: include/asm-x86/string_32.h:263:
+#define COMMON(x)						\
+	__asm__  __volatile__(					\
+		"rep ; stosl"					\
+		x						\
+		: "=&c" (d0), "=&D" (d1)			\
+		: "a" (pattern), "0" (count/4), "1" ((long)s)	\
+		: "memory")

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#362: FILE: include/asm-x86/string_32.h:268:
+		: "a" (pattern), "0" (count/4), "1" ((long)s)	\
 		                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: include/asm-x86/string_32.h:273:
+		int d0, d1;
+		switch (count % 4) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#415: FILE: include/asm-x86/string_32.h:292:
+#define __constant_c_x_memset(s, c, count)			\
+	(__builtin_constant_p(count)				\
+	 ? __constant_c_and_count_memset((s), (c), (count))	\
+	 : __constant_c_memset((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#415: FILE: include/asm-x86/string_32.h:292:
+#define __constant_c_x_memset(s, c, count)			\
+	(__builtin_constant_p(count)				\
+	 ? __constant_c_and_count_memset((s), (c), (count))	\
+	 : __constant_c_memset((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#415: FILE: include/asm-x86/string_32.h:292:
+#define __constant_c_x_memset(s, c, count)			\
+	(__builtin_constant_p(count)				\
+	 ? __constant_c_and_count_memset((s), (c), (count))	\
+	 : __constant_c_memset((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#424: FILE: include/asm-x86/string_32.h:297:
+#define __memset(s, c, count)				\
+	(__builtin_constant_p(count)			\
+	 ? __constant_count_memset((s), (c), (count))	\
+	 : __memset_generic((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#424: FILE: include/asm-x86/string_32.h:297:
+#define __memset(s, c, count)				\
+	(__builtin_constant_p(count)			\
+	 ? __constant_count_memset((s), (c), (count))	\
+	 : __memset_generic((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#424: FILE: include/asm-x86/string_32.h:297:
+#define __memset(s, c, count)				\
+	(__builtin_constant_p(count)			\
+	 ? __constant_count_memset((s), (c), (count))	\
+	 : __memset_generic((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#434: FILE: include/asm-x86/string_32.h:303:
+#define memset(s, c, count)						\
+	(__builtin_constant_p(c)					\
+	 ? __constant_c_x_memset((s), (0x01010101UL * (unsigned char)(c)), \
+				 (count))				\
+	 : __memset((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#434: FILE: include/asm-x86/string_32.h:303:
+#define memset(s, c, count)						\
+	(__builtin_constant_p(c)					\
+	 ? __constant_c_x_memset((s), (0x01010101UL * (unsigned char)(c)), \
+				 (count))				\
+	 : __memset((s), (c), (count)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#434: FILE: include/asm-x86/string_32.h:303:
+#define memset(s, c, count)						\
+	(__builtin_constant_p(c)					\
+	 ? __constant_c_x_memset((s), (0x01010101UL * (unsigned char)(c)), \
+				 (count))				\
+	 : __memset((s), (c), (count)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/asm-x86/string_32.h:313:
+extern void *memscan(void *addr, int c, size_t size);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 5 warnings, 25 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
