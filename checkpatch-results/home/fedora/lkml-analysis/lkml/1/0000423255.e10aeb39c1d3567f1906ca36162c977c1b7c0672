WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#39: 
Signed-off-by:		Eric Wollesen <ericw@xmtp.net>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#40: 
Signed-off-by:		Doug Thompson <norsk5@xmission.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: drivers/edac/i5000_edac.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#58: FILE: drivers/edac/i5000_edac.c:13:
+ * ^Ihttp://developer.intel.com/design/chipsets/datashts/313070.htm$

WARNING:INCLUDE_LINUX: Use #include <linux/mmzone.h> instead of <asm/mmzone.h>
#67: FILE: drivers/edac/i5000_edac.c:22:
+#include <asm/mmzone.h>

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#74: FILE: drivers/edac/i5000_edac.c:29:
+#define I5000_REVISION    " Ver: 2.0.11.devel " __DATE__

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: drivers/edac/i5000_edac.c:32:
+        edac_printk(level, "i5000", fmt, ##arg)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: drivers/edac/i5000_edac.c:32:
+        edac_printk(level, "i5000", fmt, ##arg)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: drivers/edac/i5000_edac.c:35:
+        edac_mc_chipset_printk(mci, level, "i5000", fmt, ##arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: drivers/edac/i5000_edac.c:35:
+        edac_mc_chipset_printk(mci, level, "i5000", fmt, ##arg)$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#118: FILE: drivers/edac/i5000_edac.c:73:
+#define			EXTRACT_FBDCHAN_INDX(x)	(((x)>>28) & 0x3)
        			                       	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: drivers/edac/i5000_edac.c:120:
+^I^I       ^I^I^I^I^IFERR_NF_M8ERR | \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: drivers/edac/i5000_edac.c:120:
+^I^I       ^I^I^I^I^IFERR_NF_M8ERR | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: drivers/edac/i5000_edac.c:132:
+^I       ^I^I^I^I^I^IFERR_NF_M25ERR | \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: drivers/edac/i5000_edac.c:132:
+^I       ^I^I^I^I^I^IFERR_NF_M25ERR | \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: drivers/edac/i5000_edac.c:184:
+#define ^I^IENABLE_EMASK_FBD_UNCORRECTABLE^I(EMASK_FBD_M4ERR | \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: drivers/edac/i5000_edac.c:193:
+#define ^I^IENABLE_EMASK_FBD_CORRECTABLE^I(EMASK_FBD_M17ERR | \$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#268: FILE: drivers/edac/i5000_edac.c:223:
+#define			NREC_BANK(x)		(((x)>>12) & 0x7)
        			            		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#269: FILE: drivers/edac/i5000_edac.c:224:
+#define			NREC_RDWR(x)		(((x)>>11) & 1)
        			            		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#270: FILE: drivers/edac/i5000_edac.c:225:
+#define			NREC_RANK(x)		(((x)>>8) & 0x7)
        			            		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#272: FILE: drivers/edac/i5000_edac.c:227:
+#define			NREC_CAS(x)		(((x)>>16) & 0xFFFFFF)
        			           		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#282: FILE: drivers/edac/i5000_edac.c:237:
+#define			REC_BANK(x)		(((x)>>12) & 0x7)
        			           		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#283: FILE: drivers/edac/i5000_edac.c:238:
+#define			REC_RDWR(x)		(((x)>>11) & 1)
        			           		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#284: FILE: drivers/edac/i5000_edac.c:239:
+#define			REC_RANK(x)		(((x)>>8) & 0x7)
        			           		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#286: FILE: drivers/edac/i5000_edac.c:241:
+#define			REC_CAS(x)		(((x)>>16) & 0xFFFFFF)
        			          		     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#323: FILE: drivers/edac/i5000_edac.c:278:
+#define MTR_DRAM_BANKS_ADDR_BITS(mtr)	((MTR_DRAM_BANKS(mtr) == 8) ? 3

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#324: FILE: drivers/edac/i5000_edac.c:278:
: 2)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#326: FILE: drivers/edac/i5000_edac.c:280:
+#define MTR_DIMM_RANK_ADDR_BITS(mtr)	((MTR_DIM_RANKS(mtr) ? 2 : 1)

CHECK:CAMELCASE: Avoid CamelCase: <numrow_toString>
#333: FILE: drivers/edac/i5000_edac.c:287:
+static char *numrow_toString[] = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <numcol_toString>
#340: FILE: drivers/edac/i5000_edac.c:294:
+static char *numcol_toString[] = {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#375: FILE: drivers/edac/i5000_edac.c:329:
+#define MAX_CSROWS	(8*2)	/* max possible csrows per channel */
                   	  ^

WARNING:TYPO_SPELLING: 'Technlogy' may be misspelled - perhaps 'Technology'?
#392: FILE: drivers/edac/i5000_edac.c:346:
+	u16 b0_mtr[NUM_MTRS];	/* Memory Technlogy Reg */
 	                     	          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Brnach' may be misspelled - perhaps 'Branch'?
#394: FILE: drivers/edac/i5000_edac.c:348:
+	u16 b0_ambpresent1;	/* Brnach 0, Channel 1 */
 	                   	   ^^^^^^

WARNING:TYPO_SPELLING: 'Technlogy' may be misspelled - perhaps 'Technology'?
#396: FILE: drivers/edac/i5000_edac.c:350:
+	u16 b1_mtr[NUM_MTRS];	/* Memory Technlogy Reg */
 	                     	          ^^^^^^^^^

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#400: FILE: drivers/edac/i5000_edac.c:354:
+	/* DIMM infomation matrix, allocating architecture maximums */
 	        ^^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#410: FILE: drivers/edac/i5000_edac.c:364:
+struct i5000_error_info {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#419: FILE: drivers/edac/i5000_edac.c:372:
+	/* These registers are input ONLY if there was a Recoverable  Error
+	u32 redmemb;		/* Recoverable Mem Data Error log B */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#424: FILE: drivers/edac/i5000_edac.c:377:
+	 * Non-Recoverable Error */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: drivers/edac/i5000_edac.c:389:
+				 struct i5000_error_info * info)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#477: FILE: drivers/edac/i5000_edac.c:430:
+	 * register as well */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#505: FILE: drivers/edac/i5000_edac.c:458:
+ * ^I^I^I^I^Istruct i5000_error_info *info,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: drivers/edac/i5000_edac.c:459:
+ * ^I^I^I^I^Iint handle_errors);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#511: FILE: drivers/edac/i5000_edac.c:464:
+					   struct i5000_error_info * info,

CHECK:CAMELCASE: Avoid CamelCase: <allErrors>
#515: FILE: drivers/edac/i5000_edac.c:468:
+	u32 allErrors;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#530: FILE: drivers/edac/i5000_edac.c:482:
+	/* ONLY ONE of the possible error bits will be set, as per the docs
+	i5000_mc_printk(mci, KERN_ERR,

WARNING:SPLIT_STRING: quoted string split across lines
#545: FILE: drivers/edac/i5000_edac.c:497:
+	debugf0("\t\tCSROW= %d  Channels= %d,%d  (Branch= %d "
+		"DRAM Bank= %d rdwr= %s ras= %d cas= %d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#553: FILE: drivers/edac/i5000_edac.c:505:
+				"Alert on non-redundant retry or fast "
+				"reset timeout\n");

WARNING:SPLIT_STRING: quoted string split across lines
#558: FILE: drivers/edac/i5000_edac.c:510:
+				"Northbound CRC error on non-redundant "
+				"retry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#563: FILE: drivers/edac/i5000_edac.c:515:
+				">Tmid Thermal event with intelligent "
+				"throttling disabled\n");

WARNING:SPLIT_STRING: quoted string split across lines
#569: FILE: drivers/edac/i5000_edac.c:521:
+		 "(Branch=%d DRAM-Bank=%d RDWR=%s RAS=%d CAS=%d "
+		 "FATAL Err=0x%x)",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#579: FILE: drivers/edac/i5000_edac.c:531:
+ * ^I^I^I^I  struct i5000_error_info *info,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#580: FILE: drivers/edac/i5000_edac.c:532:
+ * ^I^I^I^I  int handle_errors);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#586: FILE: drivers/edac/i5000_edac.c:537:
+					      struct i5000_error_info * info,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#608: FILE: drivers/edac/i5000_edac.c:558:
+	/* ONLY ONE of the possible error bits will be set, as per the docs
+	i5000_mc_printk(mci, KERN_WARNING,

WARNING:TYPO_SPELLING: 'UE' may be misspelled - perhaps 'USE'?
#633: FILE: drivers/edac/i5000_edac.c:583:
+			 "CAS=%d, UE Err=0x%x)",
 			          ^^

WARNING:SPLIT_STRING: quoted string split across lines
#633: FILE: drivers/edac/i5000_edac.c:583:
+			 "(Branch=%d DRAM-Bank=%d RDWR=%s RAS=%d "
+			 "CAS=%d, UE Err=0x%x)",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#653: FILE: drivers/edac/i5000_edac.c:603:
+		 * from branch base of 0 */

WARNING:SPLIT_STRING: quoted string split across lines
#663: FILE: drivers/edac/i5000_edac.c:613:
+		debugf0("\t\tCSROW= %d Channel= %d  (Branch %d "
+			"DRAM Bank= %d rdwr= %s ras= %d cas= %d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#670: FILE: drivers/edac/i5000_edac.c:620:
+			 "(Branch=%d DRAM-Bank=%d RDWR=%s RAS=%d "
+			 "CAS=%d, CE Err=0x%x)", branch >> 1, bank,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#720: FILE: drivers/edac/i5000_edac.c:670:
+				     struct i5000_error_info * info,

WARNING:LINE_SPACING: Missing a blank line after declarations
#750: FILE: drivers/edac/i5000_edac.c:700:
+	struct i5000_error_info info;
+	debugf4("MC%d: " __FILE__ ": %s()\n", mci->mc_idx, __func__);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev"
#776: FILE: drivers/edac/i5000_edac.c:726:
+		if (pdev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#779: FILE: drivers/edac/i5000_edac.c:729:
+				     "'system address,Process Bus' "
+				     "device not found:"

WARNING:SPLIT_STRING: quoted string split across lines
#780: FILE: drivers/edac/i5000_edac.c:730:
+				     "device not found:"
+				     "vendor 0x%x device 0x%x FUNC 1 "

WARNING:SPLIT_STRING: quoted string split across lines
#781: FILE: drivers/edac/i5000_edac.c:731:
+				     "vendor 0x%x device 0x%x FUNC 1 "
+				     "(broken BIOS?)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev"
#801: FILE: drivers/edac/i5000_edac.c:751:
+		if (pdev == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: drivers/edac/i5000_edac.c:754:
+				     "MC: 'branchmap,control,errors' "
+				     "device not found:"

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: drivers/edac/i5000_edac.c:755:
+				     "device not found:"
+				     "vendor 0x%x device 0x%x Func 2 "

WARNING:SPLIT_STRING: quoted string split across lines
#806: FILE: drivers/edac/i5000_edac.c:756:
+				     "vendor 0x%x device 0x%x Func 2 "
+				     "(broken BIOS?)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev"
#835: FILE: drivers/edac/i5000_edac.c:785:
+	if (pdev == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#838: FILE: drivers/edac/i5000_edac.c:788:
+			     "MC: 'BRANCH 0' device not found:"
+			     "vendor 0x%x device 0x%x Func 0 (broken BIOS?)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev"
#856: FILE: drivers/edac/i5000_edac.c:806:
+		if (pdev == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#859: FILE: drivers/edac/i5000_edac.c:809:
+				     "MC: 'BRANCH 1' device not found:"
+				     "vendor 0x%x device 0x%x Func 0 "

WARNING:SPLIT_STRING: quoted string split across lines
#860: FILE: drivers/edac/i5000_edac.c:810:
+				     "vendor 0x%x device 0x%x Func 0 "
+				     "(broken BIOS?)\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#891: FILE: drivers/edac/i5000_edac.c:841:
+	if (pvt->maxch >= CHANNELS_PER_BRANCH) {
+		pci_dev_put(pvt->branch_1);	/* DEV 22 */
+	}

WARNING:TYPO_SPELLING: 'determineing' may be misspelled - perhaps 'determining'?
#900: FILE: drivers/edac/i5000_edac.c:850:
+ *		determineing which of the NUM_MTRS requires knowing
   		^^^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <addrBits>
#975: FILE: drivers/edac/i5000_edac.c:920:
+	int addrBits;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dinfo->dual_rank == 0'
#985: FILE: drivers/edac/i5000_edac.c:930:
+			if (!((dinfo->dual_rank == 0) &&
+			      ((csrow & 0x1) == 0x1))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#988: FILE: drivers/edac/i5000_edac.c:933:
+				 * on the DRAM */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1022: FILE: drivers/edac/i5000_edac.c:966:
+	mem_buffer = p = kmalloc(space, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1023: FILE: drivers/edac/i5000_edac.c:967:
+	if (p == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1025: FILE: drivers/edac/i5000_edac.c:969:
+		i5000_printk(KERN_ERR, "MC: %s:%s() kmalloc() failed\n",
+			    __FILE__, __func__);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1040: FILE: drivers/edac/i5000_edac.c:984:
+	for (csrow = max_csrows - 1; csrow >= 0; csrow--) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1042: FILE: drivers/edac/i5000_edac.c:986:
+		 * then reset the message buffer  */

WARNING:SPLIT_STRING: quoted string split across lines
#1045: FILE: drivers/edac/i5000_edac.c:989:
+			n = snprintf(p, space, "---------------------------"
+				     "--------------------------------");

WARNING:SPLIT_STRING: quoted string split across lines
#1070: FILE: drivers/edac/i5000_edac.c:1014:
+	n = snprintf(p, space, "---------------------------"
+		     "--------------------------------\n");

CHECK:SPACING: No space is necessary after a cast
#1111: FILE: drivers/edac/i5000_edac.c:1055:
+			      (u32 *) & pvt->ambase);

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1111: FILE: drivers/edac/i5000_edac.c:1055:
+			      (u32 *) & pvt->ambase);
 			              ^

CHECK:SPACING: No space is necessary after a cast
#1113: FILE: drivers/edac/i5000_edac.c:1057:
+			      ((u32 *) & pvt->ambase) + sizeof(u32));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1113: FILE: drivers/edac/i5000_edac.c:1057:
+			      ((u32 *) & pvt->ambase) + sizeof(u32));
 			               ^

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#1119: FILE: drivers/edac/i5000_edac.c:1063:
+		(long unsigned int)pvt->ambase, pvt->maxch, pvt->maxdimmperch);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#1119: FILE: drivers/edac/i5000_edac.c:1063:
+		(long unsigned int)pvt->ambase, pvt->maxch, pvt->maxdimmperch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: drivers/edac/i5000_edac.c:1073:
+	debugf2("Actual TOLM byte addr=%u (0x%x)\n", actual_tolm,
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1141: FILE: drivers/edac/i5000_edac.c:1083:
+	debugf2("MIR0: limit= 0x%x  WAY1= %u  WAY0= %x\n", limit, way1,
+	limit = (pvt->mir1 >> 4) & 0x0FFF;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1146: FILE: drivers/edac/i5000_edac.c:1087:
+	debugf2("MIR1: limit= 0x%x  WAY1= %u  WAY0= %x\n", limit, way1,
+	limit = (pvt->mir2 >> 4) & 0x0FFF;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: drivers/edac/i5000_edac.c:1091:
+	debugf2("MIR2: limit= 0x%x  WAY1= %u  WAY0= %x\n", limit, way1,
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1175: FILE: drivers/edac/i5000_edac.c:1115:
+	for (slot_row = 0; slot_row < NUM_MTRS; slot_row++) {
+		decode_mtr(slot_row, pvt->b0_mtr[slot_row]);
+	}

WARNING:TYPO_SPELLING: 'branchs' may be misspelled - perhaps 'branches'?
#1185: FILE: drivers/edac/i5000_edac.c:1125:
+	/* Only if we have 2 branchs (4 channels) */
 	                     ^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1192: FILE: drivers/edac/i5000_edac.c:1132:
+		for (slot_row = 0; slot_row < NUM_MTRS; slot_row++) {
+			decode_mtr(slot_row, pvt->b1_mtr[slot_row]);
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1206: FILE: drivers/edac/i5000_edac.c:1146:
+	 * orderly matrix */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1257: FILE: drivers/edac/i5000_edac.c:1197:
+		for (channel = 0; channel < pvt->maxch; channel++) {
+			csrow_megs += pvt->dimm_info[csrow][channel].megabytes;
+		}

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1318: FILE: drivers/edac/i5000_edac.c:1258:
+	*num_dimms_per_channel = (int)value *2;
 	                                    ^

WARNING:REPEATED_WORD: Possible repeated word: 'have'
#1357: FILE: drivers/edac/i5000_edac.c:1297:
+	 * resource as specified by the chipset. Thus, we might have
+	 * have more DIMMs per channel than actually on the mobo, but this

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#1358: FILE: drivers/edac/i5000_edac.c:1298:
+	 * allows the driver to support upto the chipset max, without
 	                                ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1375: FILE: drivers/edac/i5000_edac.c:1314:
+	debugf0("MC: " __FILE__ ": %s(): mci = %p\n", __func__, mci);
 	           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1375: FILE: drivers/edac/i5000_edac.c:1314:
+	debugf0("MC: " __FILE__ ": %s(): mci = %p\n", __func__, mci);
 	                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1375: FILE: drivers/edac/i5000_edac.c:1314:
+	debugf0("MC: " __FILE__ ": %s(): mci = %p\n", __func__, mci);
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1375: FILE: drivers/edac/i5000_edac.c:1314:
+	debugf0("MC: " __FILE__ ": %s(): mci = %p\n", __func__, mci);
 	                               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1375: FILE: drivers/edac/i5000_edac.c:1314:
+	debugf0("MC: " __FILE__ ": %s(): mci = %p\n", __func__, mci);
 	                                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1404: FILE: drivers/edac/i5000_edac.c:1343:
+	 * with the mapping and control information */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1406: FILE: drivers/edac/i5000_edac.c:1345:
+		debugf0("MC: Setting mci->edac_cap to EDAC_FLAG_NONE\n"
 		           ^

CHECK:CAMELCASE: Avoid CamelCase: <Setting>
#1406: FILE: drivers/edac/i5000_edac.c:1345:
+		debugf0("MC: Setting mci->edac_cap to EDAC_FLAG_NONE\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1411: FILE: drivers/edac/i5000_edac.c:1350:
+		debugf1("MC: Enable error reporting now\n");
 		           ^

CHECK:CAMELCASE: Avoid CamelCase: <Enable>
#1411: FILE: drivers/edac/i5000_edac.c:1350:
+		debugf1("MC: Enable error reporting now\n");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1417: FILE: drivers/edac/i5000_edac.c:1356:
+		debugf0("MC: " __FILE__
 		           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1418: FILE: drivers/edac/i5000_edac.c:1357:
+			": %s(): failed edac_mc_add_mc()\n", __func__);
 			 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1418: FILE: drivers/edac/i5000_edac.c:1357:
+			": %s(): failed edac_mc_add_mc()\n", __func__);
 			   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1418: FILE: drivers/edac/i5000_edac.c:1357:
+			": %s(): failed edac_mc_add_mc()\n", __func__);
 			       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1430: FILE: drivers/edac/i5000_edac.c:1369:
+      fail1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1434: FILE: drivers/edac/i5000_edac.c:1373:
+      fail0:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1440: FILE: drivers/edac/i5000_edac.c:1379:
+ *^Ii5000_init_one^Iconstructor for one instance of device$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1441: FILE: drivers/edac/i5000_edac.c:1380:
+ *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1442: FILE: drivers/edac/i5000_edac.c:1381:
+ * ^Ireturns:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1442: FILE: drivers/edac/i5000_edac.c:1381:
+ * ^Ireturns:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1443: FILE: drivers/edac/i5000_edac.c:1382:
+ *^I^Inegative on error$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1444: FILE: drivers/edac/i5000_edac.c:1383:
+ *^I^Icount (>= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1445: FILE: drivers/edac/i5000_edac.c:1384:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1451: FILE: drivers/edac/i5000_edac.c:1390:
+	debugf0("MC: " __FILE__ ": %s()\n", __func__);
 	           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1451: FILE: drivers/edac/i5000_edac.c:1390:
+	debugf0("MC: " __FILE__ ": %s()\n", __func__);
 	                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1451: FILE: drivers/edac/i5000_edac.c:1390:
+	debugf0("MC: " __FILE__ ": %s()\n", __func__);
 	                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1463: FILE: drivers/edac/i5000_edac.c:1402:
+ *^Ii5000_remove_one^Idestructor for one instance of device$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1464: FILE: drivers/edac/i5000_edac.c:1403:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1465: FILE: drivers/edac/i5000_edac.c:1404:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1470: FILE: drivers/edac/i5000_edac.c:1409:
+	debugf0(__FILE__ ": %s()\n", __func__);
 	                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1470: FILE: drivers/edac/i5000_edac.c:1409:
+	debugf0(__FILE__ ": %s()\n", __func__);
 	                    ^

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1470: FILE: drivers/edac/i5000_edac.c:1409:
+	debugf0(__FILE__ ": %s()\n", __func__);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1482: FILE: drivers/edac/i5000_edac.c:1421:
+ *^Ipci_device_id^Itable for which devices we are looking for$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1483: FILE: drivers/edac/i5000_edac.c:1422:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1484: FILE: drivers/edac/i5000_edac.c:1423:
+ *^IThe "E500P" device is the first device supported.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1485: FILE: drivers/edac/i5000_edac.c:1424:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1496: FILE: drivers/edac/i5000_edac.c:1435:
+ *^Ii5000_driver^Ipci_driver structure for this module$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1497: FILE: drivers/edac/i5000_edac.c:1436:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1498: FILE: drivers/edac/i5000_edac.c:1437:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1507: FILE: drivers/edac/i5000_edac.c:1446:
+ *^Ii5000_init^I^IModule entry function$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1508: FILE: drivers/edac/i5000_edac.c:1447:
+ *^I^I^ITry to initialize this module for its devices$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1509: FILE: drivers/edac/i5000_edac.c:1448:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1514: FILE: drivers/edac/i5000_edac.c:1453:
+	debugf2("MC: " __FILE__ ": %s()\n", __func__);
 	           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1514: FILE: drivers/edac/i5000_edac.c:1453:
+	debugf2("MC: " __FILE__ ": %s()\n", __func__);
 	                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1514: FILE: drivers/edac/i5000_edac.c:1453:
+	debugf2("MC: " __FILE__ ": %s()\n", __func__);
 	                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1522: FILE: drivers/edac/i5000_edac.c:1461:
+ *^Ii5000_exit()^IModule exit function$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1523: FILE: drivers/edac/i5000_edac.c:1462:
+ *^I^I^IUnregister the driver$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1524: FILE: drivers/edac/i5000_edac.c:1463:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1527: FILE: drivers/edac/i5000_edac.c:1466:
+	debugf2("MC: " __FILE__ ": %s()\n", __func__);
 	           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1527: FILE: drivers/edac/i5000_edac.c:1466:
+	debugf2("MC: " __FILE__ ": %s()\n", __func__);
 	                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1527: FILE: drivers/edac/i5000_edac.c:1466:
+	debugf2("MC: " __FILE__ ": %s()\n", __func__);
 	                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1536: FILE: drivers/edac/i5000_edac.c:1475:
+    ("Linux Networx (http://lnxi.com) Doug Thompson$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1536: FILE: drivers/edac/i5000_edac.c:1475:
+    ("Linux Networx (http://lnxi.com) Doug Thompson

ERROR:SPACING: spaces required around that ':' (ctx:VxC)
#1536: FILE: drivers/edac/i5000_edac.c:1475:
+    ("Linux Networx (http://lnxi.com) Doug Thompson
                          ^

CHECK:CAMELCASE: Avoid CamelCase: <Linux>
#1536: FILE: drivers/edac/i5000_edac.c:1475:
+    ("Linux Networx (http://lnxi.com) Doug Thompson

CHECK:CAMELCASE: Avoid CamelCase: <Networx>
#1536: FILE: drivers/edac/i5000_edac.c:1475:
+    ("Linux Networx (http://lnxi.com) Doug Thompson

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1560: FILE: drivers/edac/Kconfig:94:
+config EDAC_I5000
+	tristate "Intel Greencreek/Blackford chipset"
+	depends on EDAC_MM_EDAC && X86 && PCI
+	help
+	  Support for error detection and correction the Intel
+	  Greekcreek/Blackford chipsets.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423255.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 30 errors, 89 warnings, 42 checks, 1514 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423255.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
