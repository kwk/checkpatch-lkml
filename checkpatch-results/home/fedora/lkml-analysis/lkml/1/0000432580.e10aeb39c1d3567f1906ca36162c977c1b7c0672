CHECK:BRACES: Unbalanced braces around else statement
#164: FILE: arch/ia64/hp/sim/simscsi.c:247:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: arch/ia64/hp/sim/simscsi.c:250:
+			unsigned thislen;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: arch/x86_64/kernel/pci-gart.c:323:
+static int __dma_map_cont(struct scatterlist *start, int nelems,
 		      struct scatterlist *sout, unsigned long pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#329: FILE: arch/x86_64/kernel/pci-gart.c:337:
+		BUG_ON(s != start && s->offset);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: arch/x86_64/kernel/pci-gart.c:361:
+static inline int dma_map_cont(struct scatterlist *start, int nelems,
 		      struct scatterlist *sout,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: arch/x86_64/kernel/pci-gart.c:365:
+		BUG_ON(nelems != 1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: arch/x86_64/kernel/pci-gart.c:409:
+				if (dma_map_cont(start_sg, i - start, sg+out,
 				                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: arch/x86_64/kernel/pci-gart.c:410:
+				if (dma_map_cont(start_sg, i - start, sg+out,
+						  pages, need) < 0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#406: FILE: arch/x86_64/kernel/pci-gart.c:423:
+	if (dma_map_cont(start_sg, i - start, sg+out, pages, need) < 0)
 	                                        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#482: FILE: block/ll_rw_blk.c:1326:
+	sg = next_sg = &sglist[0];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#545: FILE: block/ll_rw_blk.c:3974:
+	.attr = {.name = "max_segments", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#858: FILE: drivers/infiniband/hw/ipath/ipath_dma.c:110:
+		addr = (u64) page_address(sg->page);

CHECK:SPACING: No space is necessary after a cast
#948: FILE: drivers/infiniband/ulp/iser/iser_memory.c:240:
+	page_vec->offset = (u64) sgl[0].offset & ~MASK_4K;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#999: FILE: drivers/infiniband/ulp/iser/iser_memory.c:305:
+		   (unsigned long)sg->length); */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1147: FILE: drivers/scsi/3w-9xxx.c:1897:
+					command_packet->sg_list[i].address = TW_CPU_TO_SGL(sg_dma_address(sg));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1148: FILE: drivers/scsi/3w-9xxx.c:1898:
+					command_packet->sg_list[i].length = cpu_to_le32(sg_dma_len(sg));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: drivers/scsi/53c700.c:1906:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <SCp>
#1204: FILE: drivers/scsi/53c700.c:1907:
+		sgl = SCp->request_buffer;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <vPtr>
#1207: FILE: drivers/scsi/53c700.c:1910:
+				vPtr = sg_dma_address(sg);

CHECK:CAMELCASE: Avoid CamelCase: <ScatterList>
#1231: FILE: drivers/scsi/BusLogic.c:2876:
+		for_each_sg(ScatterList, sg, Count, Segment) {

CHECK:CAMELCASE: Avoid CamelCase: <Count>
#1231: FILE: drivers/scsi/BusLogic.c:2876:
+		for_each_sg(ScatterList, sg, Count, Segment) {

CHECK:CAMELCASE: Avoid CamelCase: <Segment>
#1231: FILE: drivers/scsi/BusLogic.c:2876:
+		for_each_sg(ScatterList, sg, Count, Segment) {

CHECK:CAMELCASE: Avoid CamelCase: <ScatterGatherList>
#1232: FILE: drivers/scsi/BusLogic.c:2877:
+			CCB->ScatterGatherList[Segment].SegmentByteCount = sg_dma_len(sg);

CHECK:CAMELCASE: Avoid CamelCase: <SegmentByteCount>
#1232: FILE: drivers/scsi/BusLogic.c:2877:
+			CCB->ScatterGatherList[Segment].SegmentByteCount = sg_dma_len(sg);

CHECK:CAMELCASE: Avoid CamelCase: <SegmentDataPointer>
#1233: FILE: drivers/scsi/BusLogic.c:2878:
+			CCB->ScatterGatherList[Segment].SegmentDataPointer = sg_dma_address(sg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1247: FILE: drivers/scsi/NCR53c406a.c:880:
+^I^I^I^I$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1255: FILE: drivers/scsi/NCR53c406a.c:884:
+					NCR53c406a_pio_write(page_address(sg->page) + sg->offset, sg->length);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1273: FILE: drivers/scsi/NCR53c406a.c:912:
+					NCR53c406a_pio_read(page_address(sg->page) + sg->offset, sg->length);

CHECK:CAMELCASE: Avoid CamelCase: <pSrbSG>
#1286: FILE: drivers/scsi/a100u2w.c:799:
+	struct scatterlist *pSrbSG, *sg;

CHECK:CAMELCASE: Avoid CamelCase: <pSG>
#1298: FILE: drivers/scsi/a100u2w.c:824:
+				pSG->SG_Ptr = (U32) sg_dma_address(sg);

CHECK:CAMELCASE: Avoid CamelCase: <SG_Ptr>
#1298: FILE: drivers/scsi/a100u2w.c:824:
+				pSG->SG_Ptr = (U32) sg_dma_address(sg);

CHECK:CAMELCASE: Avoid CamelCase: <SG_Len>
#1299: FILE: drivers/scsi/a100u2w.c:825:
+				pSG->SG_Len = (U32) sg_dma_len(sg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1351: FILE: drivers/scsi/aacraid/aachba.c:2416:
+			int count = sg_dma_len(s);
+			addr = sg_dma_address(s);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1399: FILE: drivers/scsi/advansys.c:6471:
+        struct scatterlist      *slp, *sg;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: drivers/scsi/advansys.c:6471:
+        struct scatterlist      *slp, *sg;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1411: FILE: drivers/scsi/advansys.c:6505:
+	for_each_sg(slp, sg, use_sg, sgcnt) {
+	    asc_sg_head.sg_list[sgcnt].addr = cpu_to_le32(sg_dma_address(sg));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1423: FILE: drivers/scsi/advansys.c:6703:
+    struct scatterlist  *slp, *sg;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1432: FILE: drivers/scsi/advansys.c:6781:
+	for_each_sg(slp, sg, NO_OF_SG_PER_BLOCK, i)
         {

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#1471: FILE: drivers/scsi/aha1542.c:709:
+		for_each_sg(sgpnt, sg, SCpnt->use_sg, i) {

CHECK:SPACING: No space is necessary after a cast
#1473: FILE: drivers/scsi/aha1542.c:711:
+			    (((int) sg->offset) & 1) || (sg->length & 1)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1510: FILE: drivers/scsi/aha1740.c:428:
+		struct scatterlist * sgpnt, * sg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1510: FILE: drivers/scsi/aha1740.c:428:
+		struct scatterlist * sgpnt, * sg;
 		                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1522: FILE: drivers/scsi/aha1740.c:440:
+			cptr[i].datalen = sg_dma_len (sg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1523: FILE: drivers/scsi/aha1740.c:441:
+			cptr[i].dataptr = sg_dma_address (sg);

CHECK:CAMELCASE: Avoid CamelCase: <pHba>
#1690: FILE: drivers/scsi/dpt_i2o.c:2146:
+		int sg_count = pci_map_sg(pHba->pDev, sgl, cmd->use_sg,

CHECK:CAMELCASE: Avoid CamelCase: <pDev>
#1690: FILE: drivers/scsi/dpt_i2o.c:2146:
+		int sg_count = pci_map_sg(pHba->pDev, sgl, cmd->use_sg,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1703: FILE: drivers/scsi/dpt_i2o.c:2157:
+				mptr[-2] = direction|0xD0000000|sg_dma_len(sg);
 				                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1703: FILE: drivers/scsi/dpt_i2o.c:2157:
+				mptr[-2] = direction|0xD0000000|sg_dma_len(sg);
 				                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1768: FILE: drivers/scsi/gdth.c:2659:
+    struct scatterlist *sl, *sg;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1778: FILE: drivers/scsi/gdth.c:2669:
+	for_each_sg(sl, sg, scp->use_sg, i) {
             unsigned long flags;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1781: FILE: drivers/scsi/gdth.c:2671:
+            cpnow = (ushort)sg->length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1781: FILE: drivers/scsi/gdth.c:2671:
+            cpnow = (ushort)sg->length;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1788: FILE: drivers/scsi/gdth.c:2677:
+            if (!sg->page) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1788: FILE: drivers/scsi/gdth.c:2677:
+            if (!sg->page) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1796: FILE: drivers/scsi/gdth.c:2684:
+            address = kmap_atomic(sg->page, KM_BIO_SRC_IRQ) + sg->offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1796: FILE: drivers/scsi/gdth.c:2684:
+            address = kmap_atomic(sg->page, KM_BIO_SRC_IRQ) + sg->offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1799: FILE: drivers/scsi/gdth.c:2686:
+            flush_dcache_page(sg->page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1799: FILE: drivers/scsi/gdth.c:2686:
+            flush_dcache_page(sg->page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1803: FILE: drivers/scsi/gdth.c:2689:
+            address = kmap_atomic(sg->page, KM_BH_IRQ) + sg->offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1803: FILE: drivers/scsi/gdth.c:2689:
+            address = kmap_atomic(sg->page, KM_BH_IRQ) + sg->offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1806: FILE: drivers/scsi/gdth.c:2691:
+            flush_dcache_page(sg->page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1806: FILE: drivers/scsi/gdth.c:2691:
+            flush_dcache_page(sg->page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1815: FILE: drivers/scsi/gdth.c:2811:
+    struct scatterlist *sl, *sg;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1825: FILE: drivers/scsi/gdth.c:2917:
+		for_each_sg(sl, sg, sgcnt, i) {
+                    cmdp->u.cache64.sg_lst[i].sg_ptr = sg_dma_address(sg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1826: FILE: drivers/scsi/gdth.c:2918:
+                    cmdp->u.cache64.sg_lst[i].sg_ptr = sg_dma_address(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1826: FILE: drivers/scsi/gdth.c:2918:
+                    cmdp->u.cache64.sg_lst[i].sg_ptr = sg_dma_address(sg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1834: FILE: drivers/scsi/gdth.c:2925:
+                    cmdp->u.cache64.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1834: FILE: drivers/scsi/gdth.c:2925:
+                    cmdp->u.cache64.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1841: FILE: drivers/scsi/gdth.c:2930:
+		for_each_sg(sl, sg, sgcnt, i) {
+                    cmdp->u.cache.sg_lst[i].sg_ptr = sg_dma_address(sg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1842: FILE: drivers/scsi/gdth.c:2931:
+                    cmdp->u.cache.sg_lst[i].sg_ptr = sg_dma_address(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1842: FILE: drivers/scsi/gdth.c:2931:
+                    cmdp->u.cache.sg_lst[i].sg_ptr = sg_dma_address(sg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1847: FILE: drivers/scsi/gdth.c:2935:
+                    cmdp->u.cache.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1847: FILE: drivers/scsi/gdth.c:2935:
+                    cmdp->u.cache.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1856: FILE: drivers/scsi/gdth.c:3021:
+    struct scatterlist *sl, *sg;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1866: FILE: drivers/scsi/gdth.c:3124:
+		for_each_sg(sl, sg, sgcnt, i) {
+                    cmdp->u.raw64.sg_lst[i].sg_ptr = sg_dma_address(sg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1867: FILE: drivers/scsi/gdth.c:3125:
+                    cmdp->u.raw64.sg_lst[i].sg_ptr = sg_dma_address(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1867: FILE: drivers/scsi/gdth.c:3125:
+                    cmdp->u.raw64.sg_lst[i].sg_ptr = sg_dma_address(sg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1875: FILE: drivers/scsi/gdth.c:3132:
+                    cmdp->u.raw64.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1875: FILE: drivers/scsi/gdth.c:3132:
+                    cmdp->u.raw64.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1882: FILE: drivers/scsi/gdth.c:3137:
+		for_each_sg(sl, sg, sgcnt, i) {
+                    cmdp->u.raw.sg_lst[i].sg_ptr = sg_dma_address(sg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1883: FILE: drivers/scsi/gdth.c:3138:
+                    cmdp->u.raw.sg_lst[i].sg_ptr = sg_dma_address(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1883: FILE: drivers/scsi/gdth.c:3138:
+                    cmdp->u.raw.sg_lst[i].sg_ptr = sg_dma_address(sg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1888: FILE: drivers/scsi/gdth.c:3142:
+                    cmdp->u.raw.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1888: FILE: drivers/scsi/gdth.c:3142:
+                    cmdp->u.raw.sg_lst[i].sg_len = sg_dma_len(sg);$

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1944: FILE: drivers/scsi/ibmmca.c:1945:
+			ld(host_index)[ldn].sge[i].address = (void *) (isa_page_to_bus(sg->page) + sg->offset);

CHECK:SPACING: No space is necessary after a cast
#1944: FILE: drivers/scsi/ibmmca.c:1945:
+			ld(host_index)[ldn].sge[i].address = (void *) (isa_page_to_bus(sg->page) + sg->offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2003: FILE: drivers/scsi/ide-scsi.c:205:
+		printk (KERN_ERR "ide-scsi: scatter gather table too small, discarding data\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2003: FILE: drivers/scsi/ide-scsi.c:205:
+		printk (KERN_ERR "ide-scsi: scatter gather table too small, discarding data\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2004: FILE: drivers/scsi/ide-scsi.c:206:
+		idescsi_discard_data (drive, bcount);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2034: FILE: drivers/scsi/ide-scsi.c:242:
+		printk (KERN_ERR "ide-scsi: scatter gather table too small, padding with zeros\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2034: FILE: drivers/scsi/ide-scsi.c:242:
+		printk (KERN_ERR "ide-scsi: scatter gather table too small, padding with zeros\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2035: FILE: drivers/scsi/ide-scsi.c:243:
+		idescsi_output_zeros (drive, bcount);

CHECK:CAMELCASE: Avoid CamelCase: <pSCB>
#2073: FILE: drivers/scsi/initio.c:2929:
+		pSG = &pSCB->SCB_SGList[0];

CHECK:CAMELCASE: Avoid CamelCase: <SCB_SGList>
#2073: FILE: drivers/scsi/initio.c:2929:
+		pSG = &pSCB->SCB_SGList[0];

CHECK:CAMELCASE: Avoid CamelCase: <TotalLen>
#2074: FILE: drivers/scsi/initio.c:2930:
+		TotalLen = 0;

CHECK:CAMELCASE: Avoid CamelCase: <SCB_SGLen>
#2075: FILE: drivers/scsi/initio.c:2931:
+		for_each_sg(pSrbSG, sg, pSCB->SCB_SGLen, i) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2345: FILE: drivers/scsi/iscsi_tcp.c:773:
+							 sg->length-rc);
 							           ^

CHECK:SPACING: No space is necessary after a cast
#2391: FILE: drivers/scsi/jazz_esp.c:244:
+    struct scatterlist *sgl = (struct scatterlist *) sp->SCp.buffer;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2391: FILE: drivers/scsi/jazz_esp.c:244:
+    struct scatterlist *sgl = (struct scatterlist *) sp->SCp.buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2392: FILE: drivers/scsi/jazz_esp.c:245:
+    struct scatterlist *sg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2393: FILE: drivers/scsi/jazz_esp.c:246:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2395: FILE: drivers/scsi/jazz_esp.c:248:
+    for_each_sg(sgl, sg, sz, i)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2412: FILE: drivers/scsi/jazz_esp.c:261:
+    struct scatterlist *sgl = (struct scatterlist *)sp->request_buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2413: FILE: drivers/scsi/jazz_esp.c:262:
+    struct scatterlist *sg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2414: FILE: drivers/scsi/jazz_esp.c:263:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2416: FILE: drivers/scsi/jazz_esp.c:265:
+    for_each_sg(sgl, sg, sp->use_sg, i)$

CHECK:CAMELCASE: Avoid CamelCase: <bdeSize>
#2445: FILE: drivers/scsi/lpfc/lpfc_scsi.c:221:
+			bpl->tus.f.bdeSize = sg_dma_len(sg);

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#2706: FILE: drivers/scsi/pcmcia/sym53c500_cs.c:451:
+					SYM53C500_pio_write(fast_pio, port_base, page_address(sg->page) + sg->offset, sg->length);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#2724: FILE: drivers/scsi/pcmcia/sym53c500_cs.c:473:
+					SYM53C500_pio_read(fast_pio, port_base, page_address(sg->page) + sg->offset, sg->length);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3036: FILE: drivers/scsi/scsi_debug.c:604:
+	struct scatterlist * sgpnt, * sg;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#3036: FILE: drivers/scsi/scsi_debug.c:604:
+	struct scatterlist * sgpnt, * sg;
 	                            ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3045: FILE: drivers/scsi/scsi_debug.c:625:
+	req_len = act_len = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3074: FILE: drivers/scsi/scsi_debug.c:658:
+	struct scatterlist * sg;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3086: FILE: drivers/scsi/scsi_debug.c:674:
+	req_len = fin = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3229: FILE: drivers/scsi/scsi_lib.c:720:
+		printk(KERN_ERR "scsi: bad segment count=%d\n", nents);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3230: FILE: drivers/scsi/scsi_lib.c:721:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3246: FILE: drivers/scsi/scsi_lib.c:734:
+	BUG_ON(!cmd->use_sg);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3249: FILE: drivers/scsi/scsi_lib.c:737:
+	ret = prev = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3252: FILE: drivers/scsi/scsi_lib.c:740:
+		if (this > SCSI_MAX_SG_SEGMENTS) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3255: FILE: drivers/scsi/scsi_lib.c:743:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3329: FILE: drivers/scsi/scsi_lib.c:815:
+	BUG_ON(cmd->sglist_len >= SG_MEMPOOL_NR);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3346: FILE: drivers/scsi/scsi_lib.c:831:
+			if (this > SCSI_MAX_SG_SEGMENTS) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3349: FILE: drivers/scsi/scsi_lib.c:834:
+			} else

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#3581: FILE: drivers/scsi/sym53c416.c:441:
+						tot_trans += sym53c416_write(base, SG_ADDRESS(sg), sg->length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3619: FILE: drivers/scsi/u14-34f.c:1114:
+   struct scatterlist *sgpnt, *sg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3631: FILE: drivers/scsi/u14-34f.c:1143:
+   for_each_sg(sgpnt, sg, count, k) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#3631: FILE: drivers/scsi/u14-34f.c:1143:
+   for_each_sg(sgpnt, sg, count, k) {
+      cpp->sglist[k].address = H2DEV(sg_dma_address(sg));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3632: FILE: drivers/scsi/u14-34f.c:1144:
+      cpp->sglist[k].address = H2DEV(sg_dma_address(sg));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3633: FILE: drivers/scsi/u14-34f.c:1145:
+      cpp->sglist[k].num_bytes = H2DEV(sg_dma_len(sg));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3634: FILE: drivers/scsi/u14-34f.c:1146:
+      data_len += sg->length;$

CHECK:SPACING: No space is necessary after a cast
#3867: FILE: drivers/usb/storage/protocol.c:190:
+			sg = (struct scatterlist *) srb->request_buffer;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3907: FILE: drivers/usb/storage/protocol.c:253:
+	usb_stor_access_xfer_buf(buffer, buflen, srb, &sg, &offset,
 			TO_XFER_BUF);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4152: FILE: include/asm-i386/dma-mapping.h:48:
+		BUG_ON(!sg->page);

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SG_CHAIN' is wrong - use Kconfig variables or standard guards instead
#4167: FILE: include/asm-i386/scatterlist.h:13:
+#define ARCH_HAS_SG_CHAIN

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SG_CHAIN' is wrong - use Kconfig variables or standard guards instead
#4194: FILE: include/asm-x86_64/scatterlist.h:14:
+#define ARCH_HAS_SG_CHAIN

CHECK:SPACING: No space is necessary after a cast
#4304: FILE: include/linux/scatterlist.h:23:
+#define sg_is_chain(sg)		((unsigned long) (sg)->page & 0x01)

CHECK:SPACING: No space is necessary after a cast
#4306: FILE: include/linux/scatterlist.h:25:
+	((struct scatterlist *) ((unsigned long) (sg)->page & ~0x01))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#4325: FILE: include/linux/scatterlist.h:44:
+#define for_each_sg(sglist, sg, nr, __i)	\
+	for (__i = 0, sg = (sglist); __i < (nr); __i++, sg = sg_next(sg))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__i' - possible side-effects?
#4325: FILE: include/linux/scatterlist.h:44:
+#define for_each_sg(sglist, sg, nr, __i)	\
+	for (__i = 0, sg = (sglist); __i < (nr); __i++, sg = sg_next(sg))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4356: FILE: include/linux/scatterlist.h:75:
+	BUG();

CHECK:SPACING: No space is necessary after a cast
#4358: FILE: include/linux/scatterlist.h:77:
+	prv[prv_nents - 1].page = (struct page *) ((unsigned long) sgl | 0x01);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4397: FILE: include/scsi/scsi_cmnd.h:137:
+extern void scsi_free_sgtable(struct scsi_cmnd *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#4397: FILE: include/scsi/scsi_cmnd.h:137:
+extern void scsi_free_sgtable(struct scsi_cmnd *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000432580.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 69 warnings, 50 checks, 3703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000432580.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
